
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001865c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0801882c  0801882c  0002882c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018db8  08018db8  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08018db8  08018db8  00028db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018dc0  08018dc0  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018dc0  08018dc0  00028dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018dc4  08018dc4  00028dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08018dc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043a4  200001d8  08018fa0  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  2000457c  08018fa0  0003457c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fc4e  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a7b  00000000  00000000  0005fe56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002380  00000000  00000000  000668d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002060  00000000  00000000  00068c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ee1a  00000000  00000000  0006acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003655a  00000000  00000000  00099ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f36e2  00000000  00000000  000d002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c370e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096d8  00000000  00000000  001c3760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018814 	.word	0x08018814

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08018814 	.word	0x08018814

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <FT_CAN_FilterConfig>:
 */

#include "ft_can.h"

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	; 0x40
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	817b      	strh	r3, [r7, #10]
 80005c2:	4613      	mov	r3, r2
 80005c4:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 13, mask_id = 0x1FF80000;
 80005c6:	897b      	ldrh	r3, [r7, #10]
 80005c8:	035b      	lsls	r3, r3, #13
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <FT_CAN_FilterConfig+0x68>)
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005d0:	7a7b      	ldrb	r3, [r7, #9]
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005de:	0b5b      	lsrs	r3, r3, #13
 80005e0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005ec:	0b5b      	lsrs	r3, r3, #13
 80005ee:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 8000600:	7a7b      	ldrb	r3, [r7, #9]
 8000602:	330e      	adds	r3, #14
 8000604:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f007 f893 	bl	8007738 <HAL_CAN_ConfigFilter>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3740      	adds	r7, #64	; 0x40
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	1ff80000 	.word	0x1ff80000

08000620 <FT_CAN_ProcessData>:

#ifndef FT_CAN_SIMPLE

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800062e:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000636:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	f040 8258 	bne.w	8000af4 <FT_CAN_ProcessData+0x4d4>
	{
		return;
	}

	switch(id >> 1)
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	085b      	lsrs	r3, r3, #1
 8000648:	b29b      	uxth	r3, r3
 800064a:	2b8d      	cmp	r3, #141	; 0x8d
 800064c:	f300 8166 	bgt.w	800091c <FT_CAN_ProcessData+0x2fc>
 8000650:	2b00      	cmp	r3, #0
 8000652:	dc41      	bgt.n	80006d8 <FT_CAN_ProcessData+0xb8>
 8000654:	e247      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
 8000656:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800065a:	2b1b      	cmp	r3, #27
 800065c:	f200 8243 	bhi.w	8000ae6 <FT_CAN_ProcessData+0x4c6>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <FT_CAN_ProcessData+0x48>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	08000aab 	.word	0x08000aab
 800066c:	08000ae7 	.word	0x08000ae7
 8000670:	08000ae7 	.word	0x08000ae7
 8000674:	08000ae7 	.word	0x08000ae7
 8000678:	08000ae7 	.word	0x08000ae7
 800067c:	08000ae7 	.word	0x08000ae7
 8000680:	08000ae7 	.word	0x08000ae7
 8000684:	08000ae7 	.word	0x08000ae7
 8000688:	08000ae7 	.word	0x08000ae7
 800068c:	08000ae7 	.word	0x08000ae7
 8000690:	08000ae7 	.word	0x08000ae7
 8000694:	08000ae7 	.word	0x08000ae7
 8000698:	08000ae7 	.word	0x08000ae7
 800069c:	08000ae7 	.word	0x08000ae7
 80006a0:	08000ae7 	.word	0x08000ae7
 80006a4:	08000ae7 	.word	0x08000ae7
 80006a8:	08000ae7 	.word	0x08000ae7
 80006ac:	08000ae7 	.word	0x08000ae7
 80006b0:	08000ab5 	.word	0x08000ab5
 80006b4:	08000ae7 	.word	0x08000ae7
 80006b8:	08000ae7 	.word	0x08000ae7
 80006bc:	08000ae7 	.word	0x08000ae7
 80006c0:	08000ae7 	.word	0x08000ae7
 80006c4:	08000ae7 	.word	0x08000ae7
 80006c8:	08000abf 	.word	0x08000abf
 80006cc:	08000ac9 	.word	0x08000ac9
 80006d0:	08000ad3 	.word	0x08000ad3
 80006d4:	08000add 	.word	0x08000add
 80006d8:	3b01      	subs	r3, #1
 80006da:	2b8c      	cmp	r3, #140	; 0x8c
 80006dc:	f200 8203 	bhi.w	8000ae6 <FT_CAN_ProcessData+0x4c6>
 80006e0:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <FT_CAN_ProcessData+0xc8>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	0800092f 	.word	0x0800092f
 80006ec:	0800093b 	.word	0x0800093b
 80006f0:	08000947 	.word	0x08000947
 80006f4:	08000953 	.word	0x08000953
 80006f8:	0800095d 	.word	0x0800095d
 80006fc:	08000969 	.word	0x08000969
 8000700:	08000975 	.word	0x08000975
 8000704:	080009ed 	.word	0x080009ed
 8000708:	080009f7 	.word	0x080009f7
 800070c:	08000a01 	.word	0x08000a01
 8000710:	08000a0b 	.word	0x08000a0b
 8000714:	08000a15 	.word	0x08000a15
 8000718:	08000a1f 	.word	0x08000a1f
 800071c:	08000a29 	.word	0x08000a29
 8000720:	08000a33 	.word	0x08000a33
 8000724:	08000a3d 	.word	0x08000a3d
 8000728:	0800097f 	.word	0x0800097f
 800072c:	08000ae7 	.word	0x08000ae7
 8000730:	08000ae7 	.word	0x08000ae7
 8000734:	08000ae7 	.word	0x08000ae7
 8000738:	08000ae7 	.word	0x08000ae7
 800073c:	08000ae7 	.word	0x08000ae7
 8000740:	08000ae7 	.word	0x08000ae7
 8000744:	08000ae7 	.word	0x08000ae7
 8000748:	08000ae7 	.word	0x08000ae7
 800074c:	08000ae7 	.word	0x08000ae7
 8000750:	08000ae7 	.word	0x08000ae7
 8000754:	08000ae7 	.word	0x08000ae7
 8000758:	08000ae7 	.word	0x08000ae7
 800075c:	08000ae7 	.word	0x08000ae7
 8000760:	08000ae7 	.word	0x08000ae7
 8000764:	08000ae7 	.word	0x08000ae7
 8000768:	08000ae7 	.word	0x08000ae7
 800076c:	08000ae7 	.word	0x08000ae7
 8000770:	08000ae7 	.word	0x08000ae7
 8000774:	08000ae7 	.word	0x08000ae7
 8000778:	08000ae7 	.word	0x08000ae7
 800077c:	08000ae7 	.word	0x08000ae7
 8000780:	0800098b 	.word	0x0800098b
 8000784:	08000ae7 	.word	0x08000ae7
 8000788:	08000ae7 	.word	0x08000ae7
 800078c:	08000ae7 	.word	0x08000ae7
 8000790:	08000ae7 	.word	0x08000ae7
 8000794:	08000ae7 	.word	0x08000ae7
 8000798:	08000ae7 	.word	0x08000ae7
 800079c:	08000ae7 	.word	0x08000ae7
 80007a0:	08000ae7 	.word	0x08000ae7
 80007a4:	08000ae7 	.word	0x08000ae7
 80007a8:	08000ae7 	.word	0x08000ae7
 80007ac:	08000ae7 	.word	0x08000ae7
 80007b0:	08000ae7 	.word	0x08000ae7
 80007b4:	08000ae7 	.word	0x08000ae7
 80007b8:	08000ae7 	.word	0x08000ae7
 80007bc:	08000ae7 	.word	0x08000ae7
 80007c0:	08000ae7 	.word	0x08000ae7
 80007c4:	08000ae7 	.word	0x08000ae7
 80007c8:	08000ae7 	.word	0x08000ae7
 80007cc:	08000ae7 	.word	0x08000ae7
 80007d0:	08000ae7 	.word	0x08000ae7
 80007d4:	08000ae7 	.word	0x08000ae7
 80007d8:	08000ae7 	.word	0x08000ae7
 80007dc:	08000ae7 	.word	0x08000ae7
 80007e0:	08000ae7 	.word	0x08000ae7
 80007e4:	08000ae7 	.word	0x08000ae7
 80007e8:	08000ae7 	.word	0x08000ae7
 80007ec:	08000997 	.word	0x08000997
 80007f0:	080009bb 	.word	0x080009bb
 80007f4:	080009c5 	.word	0x080009c5
 80007f8:	080009cf 	.word	0x080009cf
 80007fc:	080009d9 	.word	0x080009d9
 8000800:	080009e3 	.word	0x080009e3
 8000804:	08000a47 	.word	0x08000a47
 8000808:	08000a51 	.word	0x08000a51
 800080c:	08000a5b 	.word	0x08000a5b
 8000810:	08000a65 	.word	0x08000a65
 8000814:	08000a6f 	.word	0x08000a6f
 8000818:	08000a79 	.word	0x08000a79
 800081c:	08000a83 	.word	0x08000a83
 8000820:	08000a8d 	.word	0x08000a8d
 8000824:	08000a97 	.word	0x08000a97
 8000828:	08000aa1 	.word	0x08000aa1
 800082c:	08000ae7 	.word	0x08000ae7
 8000830:	08000ae7 	.word	0x08000ae7
 8000834:	08000ae7 	.word	0x08000ae7
 8000838:	08000ae7 	.word	0x08000ae7
 800083c:	08000ae7 	.word	0x08000ae7
 8000840:	08000ae7 	.word	0x08000ae7
 8000844:	08000ae7 	.word	0x08000ae7
 8000848:	08000ae7 	.word	0x08000ae7
 800084c:	08000ae7 	.word	0x08000ae7
 8000850:	08000ae7 	.word	0x08000ae7
 8000854:	08000ae7 	.word	0x08000ae7
 8000858:	08000ae7 	.word	0x08000ae7
 800085c:	08000ae7 	.word	0x08000ae7
 8000860:	08000ae7 	.word	0x08000ae7
 8000864:	08000ae7 	.word	0x08000ae7
 8000868:	08000ae7 	.word	0x08000ae7
 800086c:	08000ae7 	.word	0x08000ae7
 8000870:	08000ae7 	.word	0x08000ae7
 8000874:	08000ae7 	.word	0x08000ae7
 8000878:	08000ae7 	.word	0x08000ae7
 800087c:	08000ae7 	.word	0x08000ae7
 8000880:	08000ae7 	.word	0x08000ae7
 8000884:	08000ae7 	.word	0x08000ae7
 8000888:	08000ae7 	.word	0x08000ae7
 800088c:	08000ae7 	.word	0x08000ae7
 8000890:	08000ae7 	.word	0x08000ae7
 8000894:	08000ae7 	.word	0x08000ae7
 8000898:	08000ae7 	.word	0x08000ae7
 800089c:	08000ae7 	.word	0x08000ae7
 80008a0:	08000ae7 	.word	0x08000ae7
 80008a4:	08000ae7 	.word	0x08000ae7
 80008a8:	08000ae7 	.word	0x08000ae7
 80008ac:	08000ae7 	.word	0x08000ae7
 80008b0:	08000ae7 	.word	0x08000ae7
 80008b4:	08000ae7 	.word	0x08000ae7
 80008b8:	08000ae7 	.word	0x08000ae7
 80008bc:	08000ae7 	.word	0x08000ae7
 80008c0:	08000ae7 	.word	0x08000ae7
 80008c4:	08000ae7 	.word	0x08000ae7
 80008c8:	08000ae7 	.word	0x08000ae7
 80008cc:	08000ae7 	.word	0x08000ae7
 80008d0:	08000ae7 	.word	0x08000ae7
 80008d4:	08000ae7 	.word	0x08000ae7
 80008d8:	08000ae7 	.word	0x08000ae7
 80008dc:	08000ae7 	.word	0x08000ae7
 80008e0:	08000ae7 	.word	0x08000ae7
 80008e4:	08000ae7 	.word	0x08000ae7
 80008e8:	08000ae7 	.word	0x08000ae7
 80008ec:	08000ae7 	.word	0x08000ae7
 80008f0:	08000ae7 	.word	0x08000ae7
 80008f4:	08000ae7 	.word	0x08000ae7
 80008f8:	08000ae7 	.word	0x08000ae7
 80008fc:	08000ae7 	.word	0x08000ae7
 8000900:	08000ae7 	.word	0x08000ae7
 8000904:	08000ae7 	.word	0x08000ae7
 8000908:	08000ae7 	.word	0x08000ae7
 800090c:	08000ae7 	.word	0x08000ae7
 8000910:	08000ae7 	.word	0x08000ae7
 8000914:	080009a3 	.word	0x080009a3
 8000918:	080009af 	.word	0x080009af
 800091c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000920:	f280 80e1 	bge.w	8000ae6 <FT_CAN_ProcessData+0x4c6>
 8000924:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8000928:	f6bf ae95 	bge.w	8000656 <FT_CAN_ProcessData+0x36>
 800092c:	e0db      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 800092e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			break;
 8000938:	e0d5      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 800093a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8000944:	e0cf      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8000946:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 8000950:	e0c9      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 8000952:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800095a:	e0c4      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 800095c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			break;
 8000966:	e0be      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8000968:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 8000972:	e0b8      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 8000974:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 800097c:	e0b3      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 800097e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 8000988:	e0ad      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 800098a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 8000994:	e0a7      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 8000996:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 80009a0:	e0a1      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 80009a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			break;
 80009ac:	e09b      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 80009ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			break;
 80009b8:	e095      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
			break;
#endif

#ifdef FT_CAN_TIMING
		case 0x0043: //Injection Bank A Timing
			FT_Data_Struct->injection_bank_a_time = data;
 80009ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	805a      	strh	r2, [r3, #2]
			break;
 80009c2:	e090      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0044: //Injection Bank B Timing
			FT_Data_Struct->injection_bank_b_time = data;
 80009c4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	809a      	strh	r2, [r3, #4]
			break;
 80009cc:	e08b      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0045: //Injection Bank A Duty Cycle
			FT_Data_Struct->injection_bank_a_duty_cycle = data;
 80009ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	80da      	strh	r2, [r3, #6]
			break;
 80009d6:	e086      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0046: //Injection Bank B Duty Cycle
			FT_Data_Struct->injection_bank_b_duty_cycle = data;
 80009d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	811a      	strh	r2, [r3, #8]
			break;
 80009e0:	e081      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0047: //Ignition Advance
			FT_Data_Struct->ignition_advance = data;
 80009e2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	801a      	strh	r2, [r3, #0]
			break;
 80009ea:	e07c      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 80009ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 80009f4:	e077      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 80009f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	819a      	strh	r2, [r3, #12]
			break;
 80009fe:	e072      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 8000a00:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8000a08:	e06d      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 8000a0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8000a12:	e068      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 8000a14:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8000a1c:	e063      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 8000a1e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8000a26:	e05e      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 8000a28:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8000a30:	e059      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 8000a32:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8000a3a:	e054      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 8000a3c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	835a      	strh	r2, [r3, #26]
			break;
 8000a44:	e04f      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 8000a46:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8000a4e:	e04a      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 8000a50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8000a58:	e045      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8000a5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8000a62:	e040      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 8000a64:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	82da      	strh	r2, [r3, #22]
			break;
 8000a6c:	e03b      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 8000a6e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	815a      	strh	r2, [r3, #10]
			break;
 8000a76:	e036      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 8000a78:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	825a      	strh	r2, [r3, #18]
			break;
 8000a80:	e031      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 8000a82:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	839a      	strh	r2, [r3, #28]
			break;
 8000a8a:	e02c      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 8000a8c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	83da      	strh	r2, [r3, #30]
			break;
 8000a94:	e027      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 8000a96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	841a      	strh	r2, [r3, #32]
			break;
 8000a9e:	e022      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 8000aa0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	829a      	strh	r2, [r3, #20]
			break;
 8000aa8:	e01d      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 8000aaa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	81da      	strh	r2, [r3, #14]
			break;
 8000ab2:	e018      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8000ab4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8000abc:	e013      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 8000abe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	831a      	strh	r2, [r3, #24]
			break;
 8000ac6:	e00e      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8000ac8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	821a      	strh	r2, [r3, #16]
			break;
 8000ad0:	e009      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 8000ad2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8000ada:	e004      	b.n	8000ae6 <FT_CAN_ProcessData+0x4c6>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 8000adc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8000ae4:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8000ae6:	89ba      	ldrh	r2, [r7, #12]
 8000ae8:	89fb      	ldrh	r3, [r7, #14]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f805 	bl	8000afc <FT_CAN_ProcessCustomData>
 8000af2:	e000      	b.n	8000af6 <FT_CAN_ProcessData+0x4d6>
		return;
 8000af4:	bf00      	nop
}
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	460a      	mov	r2, r1
 8000b06:	80fb      	strh	r3, [r7, #6]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <FT_CAN_ReceiveData>:

#endif

void FT_CAN_ReceiveData(uint32_t RxID, uint32_t RxLength, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b1c:	b089      	sub	sp, #36	; 0x24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	466b      	mov	r3, sp
 8000b2a:	461e      	mov	r6, r3
	uint32_t extid = (RxID & 0x1FF80000) >> 13;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	0b5a      	lsrs	r2, r3, #13
 8000b30:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]

	if(		   (extid != FT_Gear_Controller)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b3e:	d02d      	beq.n	8000b9c <FT_CAN_ReceiveData+0x84>
			&& (extid != FT_Knock_Meter)
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	f240 1241 	movw	r2, #321	; 0x141
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d028      	beq.n	8000b9c <FT_CAN_ReceiveData+0x84>
			&& (extid != FT_Boost_Controller2)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000b50:	d024      	beq.n	8000b9c <FT_CAN_ReceiveData+0x84>
			&& (extid != FT_Injector_Driver)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000b58:	d020      	beq.n	8000b9c <FT_CAN_ReceiveData+0x84>
			&& (extid != FT_WBO2_Nano)
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000b60:	d01c      	beq.n	8000b9c <FT_CAN_ReceiveData+0x84>
			&& (extid != FT_WBO2_Slim)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	f240 2241 	movw	r2, #577	; 0x241
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d017      	beq.n	8000b9c <FT_CAN_ReceiveData+0x84>
			&& (extid != FT_Alcohol_O2)
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	f240 2242 	movw	r2, #578	; 0x242
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d012      	beq.n	8000b9c <FT_CAN_ReceiveData+0x84>
			&& (extid != FTSpark)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	f240 2243 	movw	r2, #579	; 0x243
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d00d      	beq.n	8000b9c <FT_CAN_ReceiveData+0x84>
			&& (extid != FT_Switchpad)
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000b86:	d009      	beq.n	8000b9c <FT_CAN_ReceiveData+0x84>
			&& (extid != FT500)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000b8e:	d005      	beq.n	8000b9c <FT_CAN_ReceiveData+0x84>
			&& (extid != FT600))
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	f240 2281 	movw	r2, #641	; 0x281
 8000b96:	4293      	cmp	r3, r2
 8000b98:	f040 838d 	bne.w	80012b6 <FT_CAN_ReceiveData+0x79e>
		return;

	uint8_t buffer[RxLength];
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	4699      	mov	r9, r3
 8000baa:	f04f 0200 	mov.w	r2, #0
 8000bae:	f04f 0300 	mov.w	r3, #0
 8000bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	460c      	mov	r4, r1
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	f04f 0200 	mov.w	r2, #0
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	00eb      	lsls	r3, r5, #3
 8000bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bd2:	00e2      	lsls	r2, r4, #3
 8000bd4:	1dcb      	adds	r3, r1, #7
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	ebad 0d03 	sub.w	sp, sp, r3
 8000bde:	466b      	mov	r3, sp
 8000be0:	3300      	adds	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < RxLength; i++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	77fb      	strb	r3, [r7, #31]
 8000be8:	e009      	b.n	8000bfe <FT_CAN_ReceiveData+0xe6>
		buffer[i] = pData[i];
 8000bea:	7ffb      	ldrb	r3, [r7, #31]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	441a      	add	r2, r3
 8000bf0:	7ffb      	ldrb	r3, [r7, #31]
 8000bf2:	7811      	ldrb	r1, [r2, #0]
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < RxLength; i++)
 8000bf8:	7ffb      	ldrb	r3, [r7, #31]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	77fb      	strb	r3, [r7, #31]
 8000bfe:	7ffb      	ldrb	r3, [r7, #31]
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d8f1      	bhi.n	8000bea <FT_CAN_ReceiveData+0xd2>

	if((((RxID / 0x800) & 0x7) == 0x00) || (((RxID / 0x800) & 0x7) == 0x01))
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	0adb      	lsrs	r3, r3, #11
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d006      	beq.n	8000c20 <FT_CAN_ReceiveData+0x108>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	0adb      	lsrs	r3, r3, #11
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	f040 8143 	bne.w	8000ea6 <FT_CAN_ReceiveData+0x38e>
	{
		if((RxID & 0xFFF) == 0x600)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c26:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000c2a:	d146      	bne.n	8000cba <FT_CAN_ReceiveData+0x1a2>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->tps |= buffer[1];
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	785b      	ldrb	r3, [r3, #1]
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->map  = buffer[2] << 8;
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	789b      	ldrb	r3, [r3, #2]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map |= buffer[3];
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	78db      	ldrb	r3, [r3, #3]
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b21a      	sxth	r2, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->iat  = buffer[4] << 8;
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->iat |= buffer[5];
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	795b      	ldrb	r3, [r3, #5]
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b21a      	sxth	r2, r3
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	799b      	ldrb	r3, [r3, #6]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->ect |= buffer[7];
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	79db      	ldrb	r3, [r3, #7]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	879a      	strh	r2, [r3, #60]	; 0x3c

			return;
 8000cb8:	e2fe      	b.n	80012b8 <FT_CAN_ReceiveData+0x7a0>
		}
		else if((RxID & 0xFFF) == 0x601)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cc0:	f240 6201 	movw	r2, #1537	; 0x601
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d146      	bne.n	8000d56 <FT_CAN_ReceiveData+0x23e>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	785b      	ldrb	r3, [r3, #1]
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	789b      	ldrb	r3, [r3, #2]
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	78db      	ldrb	r3, [r3, #3]
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	791b      	ldrb	r3, [r3, #4]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->coolant_pressure |= buffer[5];
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	795b      	ldrb	r3, [r3, #5]
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	799b      	ldrb	r3, [r3, #6]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b21a      	sxth	r2, r3
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->gear 			 |= buffer[7];
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	79db      	ldrb	r3, [r3, #7]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 8000d54:	e2b0      	b.n	80012b8 <FT_CAN_ReceiveData+0x7a0>
		}
		else if((RxID & 0xFFF) == 0x602)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d5c:	f240 6202 	movw	r2, #1538	; 0x602
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d148      	bne.n	8000df6 <FT_CAN_ReceiveData+0x2de>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->lambda 			|= buffer[1];
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	785b      	ldrb	r3, [r3, #1]
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	789b      	ldrb	r3, [r3, #2]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->rpm 			|= buffer[3];
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	78db      	ldrb	r3, [r3, #3]
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	791b      	ldrb	r3, [r3, #4]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	795b      	ldrb	r3, [r3, #5]
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	799b      	ldrb	r3, [r3, #6]
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	79db      	ldrb	r3, [r3, #7]
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			return;
 8000df4:	e260      	b.n	80012b8 <FT_CAN_ReceiveData+0x7a0>
		}

#ifndef FT_CAN_SIMPLE
		else if((RxID & 0xFF) == 0xFF)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2bff      	cmp	r3, #255	; 0xff
 8000dfc:	f040 8258 	bne.w	80012b0 <FT_CAN_ReceiveData+0x798>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_id 	 |= buffer[1];
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	785b      	ldrb	r3, [r3, #1]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->data_content |= buffer[3];
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	78db      	ldrb	r3, [r3, #3]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

			FT_CAN_ProcessData(FT_Data_Struct);
 8000e4c:	6838      	ldr	r0, [r7, #0]
 8000e4e:	f7ff fbe7 	bl	8000620 <FT_CAN_ProcessData>

			FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_id 	 |= buffer[5];
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_content  = buffer[6] << 8;
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	799b      	ldrb	r3, [r3, #6]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->data_content |= buffer[7];
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	79db      	ldrb	r3, [r3, #7]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

			FT_CAN_ProcessData(FT_Data_Struct);
 8000e9e:	6838      	ldr	r0, [r7, #0]
 8000ea0:	f7ff fbbe 	bl	8000620 <FT_CAN_ProcessData>

			return;
 8000ea4:	e208      	b.n	80012b8 <FT_CAN_ReceiveData+0x7a0>
		}
	}

	else if(buffer[0] == 0xFF)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2bff      	cmp	r3, #255	; 0xff
 8000eac:	d129      	bne.n	8000f02 <FT_CAN_ReceiveData+0x3ea>
	{
		FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		FT_Data_Struct->data_id 	 |= buffer[2];
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	789b      	ldrb	r3, [r3, #2]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		FT_Data_Struct->data_content  = buffer[3] << 8;
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	78db      	ldrb	r3, [r3, #3]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		FT_Data_Struct->data_content |= buffer[4];
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	791b      	ldrb	r3, [r3, #4]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

		FT_CAN_ProcessData(FT_Data_Struct);
 8000efa:	6838      	ldr	r0, [r7, #0]
 8000efc:	f7ff fb90 	bl	8000620 <FT_CAN_ProcessData>

		return;
 8000f00:	e1da      	b.n	80012b8 <FT_CAN_ReceiveData+0x7a0>

	//Segmented Messages
	else
	{
		//First Message
		if(buffer[0] == 0)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d14b      	bne.n	8000fa2 <FT_CAN_ReceiveData+0x48a>
		{
			FT_Data_Struct->data_length   = buffer[1] << 8;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			FT_Data_Struct->data_length  |= buffer[2];
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	789b      	ldrb	r3, [r3, #2]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

			FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	78db      	ldrb	r3, [r3, #3]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_id 	 |= buffer[4];
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	791b      	ldrb	r3, [r3, #4]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_content  = buffer[5] << 8;
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	795b      	ldrb	r3, [r3, #5]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->data_content |= buffer[6];
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	799b      	ldrb	r3, [r3, #6]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

			FT_CAN_ProcessData(FT_Data_Struct);
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f7ff fb4f 	bl	8000620 <FT_CAN_ProcessData>

			if(RxLength == 8)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d107      	bne.n	8000f98 <FT_CAN_ReceiveData+0x480>
				FT_Data_Struct->data_id   = buffer[7] << 8;
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	79db      	ldrb	r3, [r3, #7]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

			FT_Data_Struct->data_last_seg = 0;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 8000fa0:	e18a      	b.n	80012b8 <FT_CAN_ReceiveData+0x7a0>
		}
		//Messages 1, 5, etc
		else if((buffer[0]-1)%4 == 0)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d15c      	bne.n	800106a <FT_CAN_ReceiveData+0x552>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d120      	bne.n	8001004 <FT_CAN_ReceiveData+0x4ec>
			{
				FT_Data_Struct->data_id 	 |= buffer[1];
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	785b      	ldrb	r3, [r3, #1]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[2] << 8;
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[3];
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	78db      	ldrb	r3, [r3, #3]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f7ff fb0e 	bl	8000620 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	2b08      	cmp	r3, #8
 8001008:	d128      	bne.n	800105c <FT_CAN_ReceiveData+0x544>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	b29b      	uxth	r3, r3
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b29a      	uxth	r2, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[5];
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	795b      	ldrb	r3, [r3, #5]
 8001024:	b29b      	uxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b29a      	uxth	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	b29b      	uxth	r3, r3
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b29a      	uxth	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[7];
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	79db      	ldrb	r3, [r3, #7]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b29a      	uxth	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f7ff fae2 	bl	8000620 <FT_CAN_ProcessData>
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b29a      	uxth	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 8001068:	e126      	b.n	80012b8 <FT_CAN_ReceiveData+0x7a0>
		}
		//messages 2, 6, etc
		else if((buffer[0]-2)%4 == 0)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	3b02      	subs	r3, #2
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d150      	bne.n	800111a <FT_CAN_ReceiveData+0x602>
		{
			if(RxLength >= 5)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d928      	bls.n	80010d0 <FT_CAN_ReceiveData+0x5b8>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	b29b      	uxth	r3, r3
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b29a      	uxth	r2, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[2];
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	789b      	ldrb	r3, [r3, #2]
 8001098:	b29b      	uxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b29a      	uxth	r2, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[3] << 8;
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	78db      	ldrb	r3, [r3, #3]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[4];
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 80010ca:	6838      	ldr	r0, [r7, #0]
 80010cc:	f7ff faa8 	bl	8000620 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d11a      	bne.n	800110c <FT_CAN_ReceiveData+0x5f4>
			{
				FT_Data_Struct->data_id  	 = buffer[5] << 8;
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	795b      	ldrb	r3, [r3, #5]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b29a      	uxth	r2, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	|= buffer[6];
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	799b      	ldrb	r3, [r3, #6]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content = buffer[7] << 8;
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	79db      	ldrb	r3, [r3, #7]
 8001100:	b29b      	uxth	r3, r3
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b29a      	uxth	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			}

			FT_Data_Struct->data_last_seg 	 = buffer[0];
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b29a      	uxth	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 8001118:	e0ce      	b.n	80012b8 <FT_CAN_ReceiveData+0x7a0>
		}
		//Messages 3, 7, etc
		else if((buffer[0]-3)%4 == 0)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	3b03      	subs	r3, #3
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d15f      	bne.n	80011e8 <FT_CAN_ReceiveData+0x6d0>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001134:	3301      	adds	r3, #1
 8001136:	429a      	cmp	r2, r3
 8001138:	d10d      	bne.n	8001156 <FT_CAN_ReceiveData+0x63e>
			{
				FT_Data_Struct->data_content |= buffer[1];
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	b29b      	uxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b29a      	uxth	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f7ff fa65 	bl	8000620 <FT_CAN_ProcessData>
			}

			if(RxLength >= 6)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2b05      	cmp	r3, #5
 800115a:	d928      	bls.n	80011ae <FT_CAN_ReceiveData+0x696>
			{
				FT_Data_Struct->data_id  	  = buffer[2] << 8;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	789b      	ldrb	r3, [r3, #2]
 8001160:	b29b      	uxth	r3, r3
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b29a      	uxth	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[3];
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	78db      	ldrb	r3, [r3, #3]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b29a      	uxth	r2, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[4] << 8;
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	b29b      	uxth	r3, r3
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b29a      	uxth	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[5];
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	795b      	ldrb	r3, [r3, #5]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 80011a8:	6838      	ldr	r0, [r7, #0]
 80011aa:	f7ff fa39 	bl	8000620 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d112      	bne.n	80011da <FT_CAN_ReceiveData+0x6c2>
			{
				FT_Data_Struct->data_id 	  = buffer[6] << 8;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	799b      	ldrb	r3, [r3, #6]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b29a      	uxth	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[7];
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	79db      	ldrb	r3, [r3, #7]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 80011e6:	e067      	b.n	80012b8 <FT_CAN_ReceiveData+0x7a0>
		}
		//Messages 4, 8, etc
		else if(buffer[0]%4 == 0)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d15d      	bne.n	80012b2 <FT_CAN_ReceiveData+0x79a>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001202:	3301      	adds	r3, #1
 8001204:	429a      	cmp	r2, r3
 8001206:	d115      	bne.n	8001234 <FT_CAN_ReceiveData+0x71c>
			{
				FT_Data_Struct->data_content  = buffer[1] << 8;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	b29b      	uxth	r3, r3
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b29a      	uxth	r2, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[2];
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	789b      	ldrb	r3, [r3, #2]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b29a      	uxth	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f7ff f9f6 	bl	8000620 <FT_CAN_ProcessData>
			}

			if(RxLength >= 7)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b06      	cmp	r3, #6
 8001238:	d928      	bls.n	800128c <FT_CAN_ReceiveData+0x774>
			{
				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	78db      	ldrb	r3, [r3, #3]
 800123e:	b29b      	uxth	r3, r3
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b29a      	uxth	r2, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[4];
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	791b      	ldrb	r3, [r3, #4]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b29a      	uxth	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[5] << 8;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	795b      	ldrb	r3, [r3, #5]
 8001264:	b29b      	uxth	r3, r3
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b29a      	uxth	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[6];
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	799b      	ldrb	r3, [r3, #6]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b29a      	uxth	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f7ff f9ca 	bl	8000620 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b08      	cmp	r3, #8
 8001290:	d107      	bne.n	80012a2 <FT_CAN_ReceiveData+0x78a>
			FT_Data_Struct->data_id 	  	  = buffer[7] << 8;
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	79db      	ldrb	r3, [r3, #7]
 8001296:	b29b      	uxth	r3, r3
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b29a      	uxth	r2, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 80012ae:	e003      	b.n	80012b8 <FT_CAN_ReceiveData+0x7a0>
		if((RxID & 0xFFF) == 0x600)
 80012b0:	bf00      	nop
 80012b2:	46b5      	mov	sp, r6
 80012b4:	e001      	b.n	80012ba <FT_CAN_ReceiveData+0x7a2>
		return;
 80012b6:	bf00      	nop
 80012b8:	46b5      	mov	sp, r6
		}
#endif
	}
}
 80012ba:	3724      	adds	r7, #36	; 0x24
 80012bc:	46bd      	mov	sp, r7
 80012be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c8:	f005 fc82 	bl	8006bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012cc:	f000 f900 	bl	80014d0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012d0:	f000 f976 	bl	80015c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 fc16 	bl	8001b04 <MX_GPIO_Init>
  MX_DMA_Init();
 80012d8:	f000 fbdc 	bl	8001a94 <MX_DMA_Init>
  MX_IWDG_Init();
 80012dc:	f000 fb3a 	bl	8001954 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 80012e0:	f000 fb82 	bl	80019e8 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 80012e4:	f000 f994 	bl	8001610 <MX_ADC1_Init>
  MX_RTC_Init();
 80012e8:	f000 fb4e 	bl	8001988 <MX_RTC_Init>
  MX_FATFS_Init();
 80012ec:	f00f ffae 	bl	801124c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80012f0:	f016 f882 	bl	80173f8 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 80012f4:	f000 fa32 	bl	800175c <MX_ADC2_Init>
  MX_CAN1_Init();
 80012f8:	f000 fac8 	bl	800188c <MX_CAN1_Init>
  MX_I2C1_Init();
 80012fc:	f000 fafc 	bl	80018f8 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001300:	f000 fb92 	bl	8001a28 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 8001304:	4a64      	ldr	r2, [pc, #400]	; (8001498 <main+0x1d4>)
 8001306:	4965      	ldr	r1, [pc, #404]	; (800149c <main+0x1d8>)
 8001308:	4865      	ldr	r0, [pc, #404]	; (80014a0 <main+0x1dc>)
 800130a:	f003 ff65 	bl	80051d8 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks if data is being saved and starts saving if conditions are met
	  if((flagDatalogger == DL_NO_SAVE) || (flagDatalogger == DL_BUT_PRESS))
 800130e:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <main+0x1e0>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <main+0x5a>
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <main+0x1e0>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d105      	bne.n	800132a <main+0x66>
		  Principal_Datalogger_Start(dirString, logString, &dirStruct, &fileStruct);
 800131e:	4b62      	ldr	r3, [pc, #392]	; (80014a8 <main+0x1e4>)
 8001320:	4a62      	ldr	r2, [pc, #392]	; (80014ac <main+0x1e8>)
 8001322:	4963      	ldr	r1, [pc, #396]	; (80014b0 <main+0x1ec>)
 8001324:	4863      	ldr	r0, [pc, #396]	; (80014b4 <main+0x1f0>)
 8001326:	f004 fcc7 	bl	8005cb8 <Principal_Datalogger_Start>

	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection(&fatfsStruct, &dirStruct, &fileStruct);
 800132a:	4a5f      	ldr	r2, [pc, #380]	; (80014a8 <main+0x1e4>)
 800132c:	495f      	ldr	r1, [pc, #380]	; (80014ac <main+0x1e8>)
 800132e:	4862      	ldr	r0, [pc, #392]	; (80014b8 <main+0x1f4>)
 8001330:	f004 fec2 	bl	80060b8 <Principal_Card_Detection>

	  //Checks USB cable connection, if connected will disable logging
	  if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET) && (flagDatalogger == DL_SAVE))
 8001334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001338:	4860      	ldr	r0, [pc, #384]	; (80014bc <main+0x1f8>)
 800133a:	f007 fddd 	bl	8008ef8 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	d107      	bne.n	8001354 <main+0x90>
 8001344:	4b57      	ldr	r3, [pc, #348]	; (80014a4 <main+0x1e0>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d103      	bne.n	8001354 <main+0x90>
		  Principal_Datalogger_Finish(&dirStruct, &fileStruct);
 800134c:	4956      	ldr	r1, [pc, #344]	; (80014a8 <main+0x1e4>)
 800134e:	4857      	ldr	r0, [pc, #348]	; (80014ac <main+0x1e8>)
 8001350:	f004 fda0 	bl	8005e94 <Principal_Datalogger_Finish>

	  //Analog inputs 1-4 CAN message
	  if((accMsg[ANALOG_1_4] >= perMsg[ANALOG_1_4]) && (perMsg[ANALOG_1_4] != MSG_DISABLED))
 8001354:	4b5a      	ldr	r3, [pc, #360]	; (80014c0 <main+0x1fc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a5a      	ldr	r2, [pc, #360]	; (80014c4 <main+0x200>)
 800135a:	8812      	ldrh	r2, [r2, #0]
 800135c:	4293      	cmp	r3, r2
 800135e:	d30e      	bcc.n	800137e <main+0xba>
 8001360:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <main+0x200>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00a      	beq.n	800137e <main+0xba>
	  {
		  accMsg[ANALOG_1_4] -= perMsg[ANALOG_1_4];
 8001368:	4b55      	ldr	r3, [pc, #340]	; (80014c0 <main+0x1fc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a55      	ldr	r2, [pc, #340]	; (80014c4 <main+0x200>)
 800136e:	8812      	ldrh	r2, [r2, #0]
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	4a53      	ldr	r2, [pc, #332]	; (80014c0 <main+0x1fc>)
 8001374:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, ANALOG_1_4);
 8001376:	2100      	movs	r1, #0
 8001378:	4849      	ldr	r0, [pc, #292]	; (80014a0 <main+0x1dc>)
 800137a:	f002 fa73 	bl	8003864 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((accMsg[ANALOG_5_8] >= perMsg[ANALOG_5_8]) && (perMsg[ANALOG_5_8] != MSG_DISABLED))
 800137e:	4b50      	ldr	r3, [pc, #320]	; (80014c0 <main+0x1fc>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4a50      	ldr	r2, [pc, #320]	; (80014c4 <main+0x200>)
 8001384:	8852      	ldrh	r2, [r2, #2]
 8001386:	4293      	cmp	r3, r2
 8001388:	d30e      	bcc.n	80013a8 <main+0xe4>
 800138a:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <main+0x200>)
 800138c:	885b      	ldrh	r3, [r3, #2]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00a      	beq.n	80013a8 <main+0xe4>
	  {
		  accMsg[ANALOG_5_8] -= perMsg[ANALOG_5_8];
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <main+0x1fc>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <main+0x200>)
 8001398:	8852      	ldrh	r2, [r2, #2]
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	4a48      	ldr	r2, [pc, #288]	; (80014c0 <main+0x1fc>)
 800139e:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, ANALOG_5_8);
 80013a0:	2101      	movs	r1, #1
 80013a2:	483f      	ldr	r0, [pc, #252]	; (80014a0 <main+0x1dc>)
 80013a4:	f002 fa5e 	bl	8003864 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((accMsg[ANALOG_9_12] >= perMsg[ANALOG_9_12]) && (perMsg[ANALOG_9_12] != MSG_DISABLED))
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <main+0x1fc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a45      	ldr	r2, [pc, #276]	; (80014c4 <main+0x200>)
 80013ae:	8892      	ldrh	r2, [r2, #4]
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d30e      	bcc.n	80013d2 <main+0x10e>
 80013b4:	4b43      	ldr	r3, [pc, #268]	; (80014c4 <main+0x200>)
 80013b6:	889b      	ldrh	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00a      	beq.n	80013d2 <main+0x10e>
	  {
		  accMsg[ANALOG_9_12] -= perMsg[ANALOG_9_12];
 80013bc:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <main+0x1fc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4a40      	ldr	r2, [pc, #256]	; (80014c4 <main+0x200>)
 80013c2:	8892      	ldrh	r2, [r2, #4]
 80013c4:	1a9b      	subs	r3, r3, r2
 80013c6:	4a3e      	ldr	r2, [pc, #248]	; (80014c0 <main+0x1fc>)
 80013c8:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, ANALOG_9_12);
 80013ca:	2102      	movs	r1, #2
 80013cc:	4834      	ldr	r0, [pc, #208]	; (80014a0 <main+0x1dc>)
 80013ce:	f002 fa49 	bl	8003864 <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((accMsg[RTC_MSG] >= perMsg[RTC_MSG]) && (perMsg[RTC_MSG] != MSG_DISABLED))
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <main+0x1fc>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	4a3b      	ldr	r2, [pc, #236]	; (80014c4 <main+0x200>)
 80013d8:	88d2      	ldrh	r2, [r2, #6]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d30e      	bcc.n	80013fc <main+0x138>
 80013de:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <main+0x200>)
 80013e0:	88db      	ldrh	r3, [r3, #6]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00a      	beq.n	80013fc <main+0x138>
	  {
		  accMsg[RTC_MSG] -= perMsg[RTC_MSG];
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <main+0x1fc>)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	4a36      	ldr	r2, [pc, #216]	; (80014c4 <main+0x200>)
 80013ec:	88d2      	ldrh	r2, [r2, #6]
 80013ee:	1a9b      	subs	r3, r3, r2
 80013f0:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <main+0x1fc>)
 80013f2:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_MSG);
 80013f4:	2103      	movs	r1, #3
 80013f6:	482a      	ldr	r0, [pc, #168]	; (80014a0 <main+0x1dc>)
 80013f8:	f002 fa34 	bl	8003864 <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((accMsg[VERIFY_MSG] >= perMsg[VERIFY_MSG]) && (perMsg[VERIFY_MSG] != MSG_DISABLED))
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <main+0x1fc>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	4a30      	ldr	r2, [pc, #192]	; (80014c4 <main+0x200>)
 8001402:	8912      	ldrh	r2, [r2, #8]
 8001404:	4293      	cmp	r3, r2
 8001406:	d30e      	bcc.n	8001426 <main+0x162>
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <main+0x200>)
 800140a:	891b      	ldrh	r3, [r3, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00a      	beq.n	8001426 <main+0x162>
	  {
		  accMsg[VERIFY_MSG] -= perMsg[VERIFY_MSG];
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <main+0x1fc>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4a2b      	ldr	r2, [pc, #172]	; (80014c4 <main+0x200>)
 8001416:	8912      	ldrh	r2, [r2, #8]
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <main+0x1fc>)
 800141c:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, VERIFY_MSG);
 800141e:	2104      	movs	r1, #4
 8001420:	481f      	ldr	r0, [pc, #124]	; (80014a0 <main+0x1dc>)
 8001422:	f002 fa1f 	bl	8003864 <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((accMsg[ECU_SAVE] >= perMsg[ECU_SAVE]) && (perMsg[ECU_SAVE] != MSG_DISABLED))
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <main+0x1fc>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <main+0x200>)
 800142c:	8992      	ldrh	r2, [r2, #12]
 800142e:	4293      	cmp	r3, r2
 8001430:	d30e      	bcc.n	8001450 <main+0x18c>
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <main+0x200>)
 8001434:	899b      	ldrh	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00a      	beq.n	8001450 <main+0x18c>
	  {
		  accMsg[ECU_SAVE] -= perMsg[ECU_SAVE];
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <main+0x1fc>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <main+0x200>)
 8001440:	8992      	ldrh	r2, [r2, #12]
 8001442:	1a9b      	subs	r3, r3, r2
 8001444:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <main+0x1fc>)
 8001446:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, ECU_SAVE);
 8001448:	2106      	movs	r1, #6
 800144a:	4815      	ldr	r0, [pc, #84]	; (80014a0 <main+0x1dc>)
 800144c:	f002 fa0a 	bl	8003864 <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((accMsg[PDM_SAVE] >= perMsg[PDM_SAVE]) && (perMsg[PDM_SAVE] != MSG_DISABLED))
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <main+0x1fc>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <main+0x200>)
 8001456:	89d2      	ldrh	r2, [r2, #14]
 8001458:	4293      	cmp	r3, r2
 800145a:	d30e      	bcc.n	800147a <main+0x1b6>
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <main+0x200>)
 800145e:	89db      	ldrh	r3, [r3, #14]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00a      	beq.n	800147a <main+0x1b6>
	  {
		  accMsg[PDM_SAVE] -= perMsg[PDM_SAVE];
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <main+0x1fc>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <main+0x200>)
 800146a:	89d2      	ldrh	r2, [r2, #14]
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <main+0x1fc>)
 8001470:	61d3      	str	r3, [r2, #28]
		  Principal_Transmit_Msg(&hcan1, PDM_SAVE);
 8001472:	2107      	movs	r1, #7
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <main+0x1dc>)
 8001476:	f002 f9f5 	bl	8003864 <Principal_Transmit_Msg>
	  }

	  if((verifyCAN != 0) && (flagDatalogger != DL_ERROR))
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <main+0x204>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f43f af45 	beq.w	800130e <main+0x4a>
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <main+0x1e0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b04      	cmp	r3, #4
 800148a:	f43f af40 	beq.w	800130e <main+0x4a>
		  HAL_IWDG_Refresh(&hiwdg);
 800148e:	480f      	ldr	r0, [pc, #60]	; (80014cc <main+0x208>)
 8001490:	f008 fd97 	bl	8009fc2 <HAL_IWDG_Refresh>
	  if((flagDatalogger == DL_NO_SAVE) || (flagDatalogger == DL_BUT_PRESS))
 8001494:	e73b      	b.n	800130e <main+0x4a>
 8001496:	bf00      	nop
 8001498:	20000530 	.word	0x20000530
 800149c:	2000036c 	.word	0x2000036c
 80014a0:	20000344 	.word	0x20000344
 80014a4:	2000376a 	.word	0x2000376a
 80014a8:	20002700 	.word	0x20002700
 80014ac:	20001698 	.word	0x20001698
 80014b0:	20003738 	.word	0x20003738
 80014b4:	2000372c 	.word	0x2000372c
 80014b8:	200016c8 	.word	0x200016c8
 80014bc:	40020000 	.word	0x40020000
 80014c0:	200037c4 	.word	0x200037c4
 80014c4:	20003794 	.word	0x20003794
 80014c8:	200037e8 	.word	0x200037e8
 80014cc:	200003c0 	.word	0x200003c0

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	; 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	2234      	movs	r2, #52	; 0x34
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f016 fd22 	bl	8017f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <SystemClock_Config+0xe8>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <SystemClock_Config+0xe8>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <SystemClock_Config+0xe8>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	2300      	movs	r3, #0
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	4b29      	ldr	r3, [pc, #164]	; (80015bc <SystemClock_Config+0xec>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a28      	ldr	r2, [pc, #160]	; (80015bc <SystemClock_Config+0xec>)
 800151a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <SystemClock_Config+0xec>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 800152c:	230d      	movs	r3, #13
 800152e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001536:	2301      	movs	r3, #1
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800153a:	2301      	movs	r3, #1
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001548:	2308      	movs	r3, #8
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800154c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001550:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001556:	2306      	movs	r3, #6
 8001558:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800155a:	2302      	movs	r3, #2
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4618      	mov	r0, r3
 8001564:	f00a fdea 	bl	800c13c <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800156e:	f000 fb6f 	bl	8001c50 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001572:	f009 ff33 	bl	800b3dc <HAL_PWREx_EnableOverDrive>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800157c:	f000 fb68 	bl	8001c50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001580:	230f      	movs	r3, #15
 8001582:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001584:	2302      	movs	r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800158c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	2105      	movs	r1, #5
 800159e:	4618      	mov	r0, r3
 80015a0:	f009 ff6c 	bl	800b47c <HAL_RCC_ClockConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0xde>
  {
    Error_Handler();
 80015aa:	f000 fb51 	bl	8001c50 <Error_Handler>
  }
}
 80015ae:	bf00      	nop
 80015b0:	3750      	adds	r7, #80	; 0x50
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40007000 	.word	0x40007000

080015c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b098      	sub	sp, #96	; 0x60
 80015c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	225c      	movs	r2, #92	; 0x5c
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f016 fcab 	bl	8017f28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80015d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 80015d8:	2308      	movs	r3, #8
 80015da:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80015dc:	23c0      	movs	r3, #192	; 0xc0
 80015de:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80015e4:	2304      	movs	r3, #4
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80015ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015f0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80015f2:	2300      	movs	r3, #0
 80015f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4618      	mov	r0, r3
 80015fa:	f00a f845 	bl	800b688 <HAL_RCCEx_PeriphCLKConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8001604:	f000 fb24 	bl	8001c50 <Error_Handler>
  }
}
 8001608:	bf00      	nop
 800160a:	3760      	adds	r7, #96	; 0x60
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001616:	463b      	mov	r3, r7
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001622:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <MX_ADC1_Init+0x140>)
 8001624:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <MX_ADC1_Init+0x144>)
 8001626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001628:	4b49      	ldr	r3, [pc, #292]	; (8001750 <MX_ADC1_Init+0x140>)
 800162a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800162e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001630:	4b47      	ldr	r3, [pc, #284]	; (8001750 <MX_ADC1_Init+0x140>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001636:	4b46      	ldr	r3, [pc, #280]	; (8001750 <MX_ADC1_Init+0x140>)
 8001638:	2201      	movs	r2, #1
 800163a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800163c:	4b44      	ldr	r3, [pc, #272]	; (8001750 <MX_ADC1_Init+0x140>)
 800163e:	2201      	movs	r2, #1
 8001640:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001642:	4b43      	ldr	r3, [pc, #268]	; (8001750 <MX_ADC1_Init+0x140>)
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <MX_ADC1_Init+0x140>)
 800164c:	2200      	movs	r2, #0
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001650:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <MX_ADC1_Init+0x140>)
 8001652:	4a41      	ldr	r2, [pc, #260]	; (8001758 <MX_ADC1_Init+0x148>)
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <MX_ADC1_Init+0x140>)
 8001658:	2200      	movs	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 800165c:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <MX_ADC1_Init+0x140>)
 800165e:	2207      	movs	r2, #7
 8001660:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <MX_ADC1_Init+0x140>)
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800166a:	4b39      	ldr	r3, [pc, #228]	; (8001750 <MX_ADC1_Init+0x140>)
 800166c:	2201      	movs	r2, #1
 800166e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001670:	4837      	ldr	r0, [pc, #220]	; (8001750 <MX_ADC1_Init+0x140>)
 8001672:	f005 fb43 	bl	8006cfc <HAL_ADC_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800167c:	f000 fae8 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001680:	2306      	movs	r3, #6
 8001682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001684:	2301      	movs	r3, #1
 8001686:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001688:	2307      	movs	r3, #7
 800168a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4619      	mov	r1, r3
 8001690:	482f      	ldr	r0, [pc, #188]	; (8001750 <MX_ADC1_Init+0x140>)
 8001692:	f005 fca5 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800169c:	f000 fad8 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016a0:	2307      	movs	r3, #7
 80016a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	4828      	ldr	r0, [pc, #160]	; (8001750 <MX_ADC1_Init+0x140>)
 80016ae:	f005 fc97 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016b8:	f000 faca 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80016bc:	230e      	movs	r3, #14
 80016be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80016c0:	2303      	movs	r3, #3
 80016c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	4821      	ldr	r0, [pc, #132]	; (8001750 <MX_ADC1_Init+0x140>)
 80016ca:	f005 fc89 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80016d4:	f000 fabc 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80016d8:	230f      	movs	r3, #15
 80016da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	481a      	ldr	r0, [pc, #104]	; (8001750 <MX_ADC1_Init+0x140>)
 80016e6:	f005 fc7b 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80016f0:	f000 faae 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016f4:	2308      	movs	r3, #8
 80016f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80016f8:	2305      	movs	r3, #5
 80016fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <MX_ADC1_Init+0x140>)
 8001702:	f005 fc6d 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800170c:	f000 faa0 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001710:	2309      	movs	r3, #9
 8001712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001714:	2306      	movs	r3, #6
 8001716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_ADC1_Init+0x140>)
 800171e:	f005 fc5f 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001728:	f000 fa92 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800172c:	2312      	movs	r3, #18
 800172e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001730:	2307      	movs	r3, #7
 8001732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_ADC1_Init+0x140>)
 800173a:	f005 fc51 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001744:	f000 fa84 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200001f4 	.word	0x200001f4
 8001754:	40012000 	.word	0x40012000
 8001758:	0f000001 	.word	0x0f000001

0800175c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800176e:	4b44      	ldr	r3, [pc, #272]	; (8001880 <MX_ADC2_Init+0x124>)
 8001770:	4a44      	ldr	r2, [pc, #272]	; (8001884 <MX_ADC2_Init+0x128>)
 8001772:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <MX_ADC2_Init+0x124>)
 8001776:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800177a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <MX_ADC2_Init+0x124>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001782:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <MX_ADC2_Init+0x124>)
 8001784:	2201      	movs	r2, #1
 8001786:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <MX_ADC2_Init+0x124>)
 800178a:	2201      	movs	r2, #1
 800178c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800178e:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <MX_ADC2_Init+0x124>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <MX_ADC2_Init+0x124>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b38      	ldr	r3, [pc, #224]	; (8001880 <MX_ADC2_Init+0x124>)
 800179e:	4a3a      	ldr	r2, [pc, #232]	; (8001888 <MX_ADC2_Init+0x12c>)
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <MX_ADC2_Init+0x124>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <MX_ADC2_Init+0x124>)
 80017aa:	2206      	movs	r2, #6
 80017ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <MX_ADC2_Init+0x124>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <MX_ADC2_Init+0x124>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017bc:	4830      	ldr	r0, [pc, #192]	; (8001880 <MX_ADC2_Init+0x124>)
 80017be:	f005 fa9d 	bl	8006cfc <HAL_ADC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80017c8:	f000 fa42 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017d4:	2307      	movs	r3, #7
 80017d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4828      	ldr	r0, [pc, #160]	; (8001880 <MX_ADC2_Init+0x124>)
 80017de:	f005 fbff 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80017e8:	f000 fa32 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	4821      	ldr	r0, [pc, #132]	; (8001880 <MX_ADC2_Init+0x124>)
 80017fa:	f005 fbf1 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001804:	f000 fa24 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001808:	2302      	movs	r3, #2
 800180a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800180c:	2303      	movs	r3, #3
 800180e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	481a      	ldr	r0, [pc, #104]	; (8001880 <MX_ADC2_Init+0x124>)
 8001816:	f005 fbe3 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001820:	f000 fa16 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001824:	2303      	movs	r3, #3
 8001826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001828:	2304      	movs	r3, #4
 800182a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	4619      	mov	r1, r3
 8001830:	4813      	ldr	r0, [pc, #76]	; (8001880 <MX_ADC2_Init+0x124>)
 8001832:	f005 fbd5 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800183c:	f000 fa08 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001840:	2304      	movs	r3, #4
 8001842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001844:	2305      	movs	r3, #5
 8001846:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001848:	463b      	mov	r3, r7
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_ADC2_Init+0x124>)
 800184e:	f005 fbc7 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001858:	f000 f9fa 	bl	8001c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800185c:	2305      	movs	r3, #5
 800185e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001860:	2306      	movs	r3, #6
 8001862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_ADC2_Init+0x124>)
 800186a:	f005 fbb9 	bl	8006fe0 <HAL_ADC_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001874:	f000 f9ec 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000023c 	.word	0x2000023c
 8001884:	40012100 	.word	0x40012100
 8001888:	0f000001 	.word	0x0f000001

0800188c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_CAN1_Init+0x64>)
 8001892:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <MX_CAN1_Init+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_CAN1_Init+0x64>)
 8001898:	2205      	movs	r2, #5
 800189a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_CAN1_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018aa:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80018ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018dc:	f005 fe30 	bl	8007540 <HAL_CAN_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80018e6:	f000 f9b3 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000344 	.word	0x20000344
 80018f4:	40006400 	.word	0x40006400

080018f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C1_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C1_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C1_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C1_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C1_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C1_Init+0x50>)
 8001936:	f007 fb43 	bl	8008fc0 <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001940:	f000 f986 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000036c 	.word	0x2000036c
 800194c:	40005400 	.word	0x40005400
 8001950:	00061a80 	.word	0x00061a80

08001954 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_IWDG_Init+0x2c>)
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <MX_IWDG_Init+0x30>)
 800195c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_IWDG_Init+0x2c>)
 8001960:	2206      	movs	r2, #6
 8001962:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 59;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_IWDG_Init+0x2c>)
 8001966:	223b      	movs	r2, #59	; 0x3b
 8001968:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_IWDG_Init+0x2c>)
 800196c:	f008 fae7 	bl	8009f3e <HAL_IWDG_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 8001976:	f000 f96b 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200003c0 	.word	0x200003c0
 8001984:	40003000 	.word	0x40003000

08001988 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800199c:	2300      	movs	r3, #0
 800199e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_RTC_Init+0x58>)
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <MX_RTC_Init+0x5c>)
 80019a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_RTC_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_RTC_Init+0x58>)
 80019ae:	227f      	movs	r2, #127	; 0x7f
 80019b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_RTC_Init+0x58>)
 80019b4:	22ff      	movs	r2, #255	; 0xff
 80019b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_RTC_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_RTC_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_RTC_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_RTC_Init+0x58>)
 80019cc:	f00a fe54 	bl	800c678 <HAL_RTC_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80019d6:	f000 f93b 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200003cc 	.word	0x200003cc
 80019e4:	40002800 	.word	0x40002800

080019e8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_SDIO_SD_Init+0x38>)
 80019ee:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <MX_SDIO_SD_Init+0x3c>)
 80019f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_SDIO_SD_Init+0x38>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_SDIO_SD_Init+0x38>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_SDIO_SD_Init+0x38>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_SDIO_SD_Init+0x38>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <MX_SDIO_SD_Init+0x38>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <MX_SDIO_SD_Init+0x38>)
 8001a12:	2203      	movs	r2, #3
 8001a14:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	200003ec 	.word	0x200003ec
 8001a24:	40012c00 	.word	0x40012c00

08001a28 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <MX_TIM7_Init+0x64>)
 8001a38:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <MX_TIM7_Init+0x68>)
 8001a3a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_TIM7_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_TIM7_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_TIM7_Init+0x64>)
 8001a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_TIM7_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a56:	480d      	ldr	r0, [pc, #52]	; (8001a8c <MX_TIM7_Init+0x64>)
 8001a58:	f00c fff1 	bl	800ea3e <HAL_TIM_Base_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a62:	f000 f8f5 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_TIM7_Init+0x64>)
 8001a74:	f00d fa72 	bl	800ef5c <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a7e:	f000 f8e7 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000530 	.word	0x20000530
 8001a90:	40001400 	.word	0x40001400

08001a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <MX_DMA_Init+0x6c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <MX_DMA_Init+0x6c>)
 8001aa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <MX_DMA_Init+0x6c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2102      	movs	r1, #2
 8001aba:	2038      	movs	r0, #56	; 0x38
 8001abc:	f006 fcb3 	bl	8008426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ac0:	2038      	movs	r0, #56	; 0x38
 8001ac2:	f006 fccc 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2102      	movs	r1, #2
 8001aca:	203a      	movs	r0, #58	; 0x3a
 8001acc:	f006 fcab 	bl	8008426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ad0:	203a      	movs	r0, #58	; 0x3a
 8001ad2:	f006 fcc4 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	203b      	movs	r0, #59	; 0x3b
 8001adc:	f006 fca3 	bl	8008426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001ae0:	203b      	movs	r0, #59	; 0x3b
 8001ae2:	f006 fcbc 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2045      	movs	r0, #69	; 0x45
 8001aec:	f006 fc9b 	bl	8008426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001af0:	2045      	movs	r0, #69	; 0x45
 8001af2:	f006 fcb4 	bl	800845e <HAL_NVIC_EnableIRQ>

}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a41      	ldr	r2, [pc, #260]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a3a      	ldr	r2, [pc, #232]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a2c      	ldr	r2, [pc, #176]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <MX_GPIO_Init+0x140>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	210f      	movs	r1, #15
 8001baa:	4827      	ldr	r0, [pc, #156]	; (8001c48 <MX_GPIO_Init+0x144>)
 8001bac:	f007 f9bc 	bl	8008f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001bb6:	4825      	ldr	r0, [pc, #148]	; (8001c4c <MX_GPIO_Init+0x148>)
 8001bb8:	f007 f9b6 	bl	8008f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <MX_GPIO_Init+0x144>)
 8001bd4:	f006 fffc 	bl	8008bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001bd8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4816      	ldr	r0, [pc, #88]	; (8001c4c <MX_GPIO_Init+0x148>)
 8001bf2:	f006 ffed 	bl	8008bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001bf6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bfc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480f      	ldr	r0, [pc, #60]	; (8001c4c <MX_GPIO_Init+0x148>)
 8001c0e:	f006 ffdf 	bl	8008bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4808      	ldr	r0, [pc, #32]	; (8001c48 <MX_GPIO_Init+0x144>)
 8001c26:	f006 ffd3 	bl	8008bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	2028      	movs	r0, #40	; 0x28
 8001c30:	f006 fbf9 	bl	8008426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c34:	2028      	movs	r0, #40	; 0x28
 8001c36:	f006 fc12 	bl	800845e <HAL_NVIC_EnableIRQ>

}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	; 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	40020400 	.word	0x40020400

08001c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <Error_Handler+0x8>
	...

08001c5c <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	603a      	str	r2, [r7, #0]
 8001c66:	80fb      	strh	r3, [r7, #6]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	2b1d      	cmp	r3, #29
 8001c76:	f200 81f9 	bhi.w	800206c <Process_Data+0x410>
 8001c7a:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <Process_Data+0x24>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001cf9 	.word	0x08001cf9
 8001c84:	08001d29 	.word	0x08001d29
 8001c88:	08001d59 	.word	0x08001d59
 8001c8c:	08001d89 	.word	0x08001d89
 8001c90:	08001db9 	.word	0x08001db9
 8001c94:	08001de9 	.word	0x08001de9
 8001c98:	08001e19 	.word	0x08001e19
 8001c9c:	08001e49 	.word	0x08001e49
 8001ca0:	08001e79 	.word	0x08001e79
 8001ca4:	08001ea9 	.word	0x08001ea9
 8001ca8:	08001ed9 	.word	0x08001ed9
 8001cac:	08001f09 	.word	0x08001f09
 8001cb0:	08001f39 	.word	0x08001f39
 8001cb4:	08001f69 	.word	0x08001f69
 8001cb8:	08001f99 	.word	0x08001f99
 8001cbc:	08001fc9 	.word	0x08001fc9
 8001cc0:	08001ffd 	.word	0x08001ffd
 8001cc4:	08002005 	.word	0x08002005
 8001cc8:	0800200d 	.word	0x0800200d
 8001ccc:	08002015 	.word	0x08002015
 8001cd0:	0800201d 	.word	0x0800201d
 8001cd4:	08002025 	.word	0x08002025
 8001cd8:	0800202d 	.word	0x0800202d
 8001cdc:	08002035 	.word	0x08002035
 8001ce0:	0800203d 	.word	0x0800203d
 8001ce4:	08002045 	.word	0x08002045
 8001ce8:	0800204d 	.word	0x0800204d
 8001cec:	08002055 	.word	0x08002055
 8001cf0:	0800205d 	.word	0x0800205d
 8001cf4:	08002065 	.word	0x08002065
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	88ba      	ldrh	r2, [r7, #4]
 8001cfc:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	885b      	ldrh	r3, [r3, #2]
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001d16:	e1aa      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	885b      	ldrh	r3, [r3, #2]
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	805a      	strh	r2, [r3, #2]
			break;
 8001d26:	e1a2      	b.n	800206e <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	88ba      	ldrh	r2, [r7, #4]
 8001d2c:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	885b      	ldrh	r3, [r3, #2]
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001d46:	e192      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	885b      	ldrh	r3, [r3, #2]
 8001d4c:	f023 0302 	bic.w	r3, r3, #2
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	805a      	strh	r2, [r3, #2]
			break;
 8001d56:	e18a      	b.n	800206e <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	88ba      	ldrh	r2, [r7, #4]
 8001d5c:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	885b      	ldrh	r3, [r3, #2]
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001d76:	e17a      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	885b      	ldrh	r3, [r3, #2]
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	805a      	strh	r2, [r3, #2]
			break;
 8001d86:	e172      	b.n	800206e <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	88ba      	ldrh	r2, [r7, #4]
 8001d8c:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	885b      	ldrh	r3, [r3, #2]
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001da6:	e162      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	f023 0308 	bic.w	r3, r3, #8
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	805a      	strh	r2, [r3, #2]
			break;
 8001db6:	e15a      	b.n	800206e <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	88ba      	ldrh	r2, [r7, #4]
 8001dbc:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	885b      	ldrh	r3, [r3, #2]
 8001dcc:	f043 0310 	orr.w	r3, r3, #16
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001dd6:	e14a      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	f023 0310 	bic.w	r3, r3, #16
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	805a      	strh	r2, [r3, #2]
			break;
 8001de6:	e142      	b.n	800206e <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	88ba      	ldrh	r2, [r7, #4]
 8001dec:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	885b      	ldrh	r3, [r3, #2]
 8001dfc:	f043 0320 	orr.w	r3, r3, #32
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001e06:	e132      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	f023 0320 	bic.w	r3, r3, #32
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	805a      	strh	r2, [r3, #2]
			break;
 8001e16:	e12a      	b.n	800206e <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	88ba      	ldrh	r2, [r7, #4]
 8001e1c:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	885b      	ldrh	r3, [r3, #2]
 8001e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001e36:	e11a      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	805a      	strh	r2, [r3, #2]
			break;
 8001e46:	e112      	b.n	800206e <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	88ba      	ldrh	r2, [r7, #4]
 8001e4c:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	885b      	ldrh	r3, [r3, #2]
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001e66:	e102      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	885b      	ldrh	r3, [r3, #2]
 8001e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	805a      	strh	r2, [r3, #2]
			break;
 8001e76:	e0fa      	b.n	800206e <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	88ba      	ldrh	r2, [r7, #4]
 8001e7c:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	885b      	ldrh	r3, [r3, #2]
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001e96:	e0ea      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	885b      	ldrh	r3, [r3, #2]
 8001e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	805a      	strh	r2, [r3, #2]
			break;
 8001ea6:	e0e2      	b.n	800206e <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	88ba      	ldrh	r2, [r7, #4]
 8001eac:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	885b      	ldrh	r3, [r3, #2]
 8001ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001ec6:	e0d2      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	885b      	ldrh	r3, [r3, #2]
 8001ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	805a      	strh	r2, [r3, #2]
			break;
 8001ed6:	e0ca      	b.n	800206e <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	88ba      	ldrh	r2, [r7, #4]
 8001edc:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d007      	beq.n	8001ef8 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	885b      	ldrh	r3, [r3, #2]
 8001eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001ef6:	e0ba      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	885b      	ldrh	r3, [r3, #2]
 8001efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	805a      	strh	r2, [r3, #2]
			break;
 8001f06:	e0b2      	b.n	800206e <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	88ba      	ldrh	r2, [r7, #4]
 8001f0c:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	885b      	ldrh	r3, [r3, #2]
 8001f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001f26:	e0a2      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	885b      	ldrh	r3, [r3, #2]
 8001f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	805a      	strh	r2, [r3, #2]
			break;
 8001f36:	e09a      	b.n	800206e <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	88ba      	ldrh	r2, [r7, #4]
 8001f3c:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	885b      	ldrh	r3, [r3, #2]
 8001f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001f56:	e08a      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	885b      	ldrh	r3, [r3, #2]
 8001f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	805a      	strh	r2, [r3, #2]
			break;
 8001f66:	e082      	b.n	800206e <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	88ba      	ldrh	r2, [r7, #4]
 8001f6c:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	885b      	ldrh	r3, [r3, #2]
 8001f7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001f86:	e072      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	885b      	ldrh	r3, [r3, #2]
 8001f8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	805a      	strh	r2, [r3, #2]
			break;
 8001f96:	e06a      	b.n	800206e <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	88ba      	ldrh	r2, [r7, #4]
 8001f9c:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	885b      	ldrh	r3, [r3, #2]
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001fb6:	e05a      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	885b      	ldrh	r3, [r3, #2]
 8001fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	805a      	strh	r2, [r3, #2]
			break;
 8001fc6:	e052      	b.n	800206e <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	88ba      	ldrh	r2, [r7, #4]
 8001fcc:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d009      	beq.n	8001fec <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	885b      	ldrh	r3, [r3, #2]
 8001fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001fea:	e040      	b.n	800206e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	885b      	ldrh	r3, [r3, #2]
 8001ff0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	805a      	strh	r2, [r3, #2]
			break;
 8001ffa:	e038      	b.n	800206e <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	88ba      	ldrh	r2, [r7, #4]
 8002000:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8002002:	e034      	b.n	800206e <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	88ba      	ldrh	r2, [r7, #4]
 8002008:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 800200a:	e030      	b.n	800206e <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	88ba      	ldrh	r2, [r7, #4]
 8002010:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8002012:	e02c      	b.n	800206e <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	88ba      	ldrh	r2, [r7, #4]
 8002018:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 800201a:	e028      	b.n	800206e <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	88ba      	ldrh	r2, [r7, #4]
 8002020:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8002022:	e024      	b.n	800206e <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	88ba      	ldrh	r2, [r7, #4]
 8002028:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 800202a:	e020      	b.n	800206e <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	88ba      	ldrh	r2, [r7, #4]
 8002030:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8002032:	e01c      	b.n	800206e <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	88ba      	ldrh	r2, [r7, #4]
 8002038:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 800203a:	e018      	b.n	800206e <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	88ba      	ldrh	r2, [r7, #4]
 8002040:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8002042:	e014      	b.n	800206e <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	88ba      	ldrh	r2, [r7, #4]
 8002048:	801a      	strh	r2, [r3, #0]
			break;
 800204a:	e010      	b.n	800206e <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	88ba      	ldrh	r2, [r7, #4]
 8002050:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8002052:	e00c      	b.n	800206e <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	88ba      	ldrh	r2, [r7, #4]
 8002058:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 800205a:	e008      	b.n	800206e <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	88ba      	ldrh	r2, [r7, #4]
 8002060:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8002062:	e004      	b.n	800206e <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	88ba      	ldrh	r2, [r7, #4]
 8002068:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800206a:	e000      	b.n	800206e <Process_Data+0x412>

		default:
			break;
 800206c:	bf00      	nop
	}

	return;
 800206e:	bf00      	nop
}
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop

0800207c <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b090      	sub	sp, #64	; 0x40
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <PDM_CAN_FilterConfig+0x5c>)
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <PDM_CAN_FilterConfig+0x60>)
 800208e:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002090:	2300      	movs	r3, #0
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002094:	2301      	movs	r3, #1
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 8002098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800209a:	0b5b      	lsrs	r3, r3, #13
 800209c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 800209e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 80020a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a8:	0b5b      	lsrs	r3, r3, #13
 80020aa:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80020bc:	2301      	movs	r3, #1
 80020be:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4619      	mov	r1, r3
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f005 fb36 	bl	8007738 <HAL_CAN_ConfigFilter>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3740      	adds	r7, #64	; 0x40
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	1e35c000 	.word	0x1e35c000
 80020dc:	1ffff000 	.word	0x1ffff000

080020e0 <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, PDM_Data* data_struct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	460b      	mov	r3, r1
 80020ee:	72fb      	strb	r3, [r7, #11]
	uint16_t id = 0, data = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	82fb      	strh	r3, [r7, #22]
 80020f4:	2300      	movs	r3, #0
 80020f6:	82bb      	strh	r3, [r7, #20]

	if((data_id & 0x1FFFF000) != 0x1E35C000)
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4b26      	ldr	r3, [pc, #152]	; (8002194 <PDM_CAN_Process_Data+0xb4>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	4a26      	ldr	r2, [pc, #152]	; (8002198 <PDM_CAN_Process_Data+0xb8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d142      	bne.n	800218a <PDM_CAN_Process_Data+0xaa>
		return;

	id  = data_buffer[0] << 8;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	82fb      	strh	r3, [r7, #22]
	id |= data_buffer[1] & 0xff;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3301      	adds	r3, #1
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b29a      	uxth	r2, r3
 8002116:	8afb      	ldrh	r3, [r7, #22]
 8002118:	4313      	orrs	r3, r2
 800211a:	82fb      	strh	r3, [r7, #22]
	data  = data_buffer[2] << 8;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3302      	adds	r3, #2
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	82bb      	strh	r3, [r7, #20]
	data |= data_buffer[3] & 0xff;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3303      	adds	r3, #3
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b29a      	uxth	r2, r3
 8002130:	8abb      	ldrh	r3, [r7, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	82bb      	strh	r3, [r7, #20]

	Process_Data(id, data, data_struct);
 8002136:	8ab9      	ldrh	r1, [r7, #20]
 8002138:	8afb      	ldrh	r3, [r7, #22]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fd8d 	bl	8001c5c <Process_Data>

	if(data_length == 8)
 8002142:	7afb      	ldrb	r3, [r7, #11]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d121      	bne.n	800218c <PDM_CAN_Process_Data+0xac>
	{
		id  = data_buffer[4] << 8;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	82fb      	strh	r3, [r7, #22]
		id |= data_buffer[5] & 0xff;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3305      	adds	r3, #5
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	b29a      	uxth	r2, r3
 800215c:	8afb      	ldrh	r3, [r7, #22]
 800215e:	4313      	orrs	r3, r2
 8002160:	82fb      	strh	r3, [r7, #22]
		data  = data_buffer[6] << 8;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3306      	adds	r3, #6
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b29b      	uxth	r3, r3
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	82bb      	strh	r3, [r7, #20]
		data |= data_buffer[7] & 0xff;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3307      	adds	r3, #7
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b29a      	uxth	r2, r3
 8002176:	8abb      	ldrh	r3, [r7, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	82bb      	strh	r3, [r7, #20]

		Process_Data(id, data, data_struct);
 800217c:	8ab9      	ldrh	r1, [r7, #20]
 800217e:	8afb      	ldrh	r3, [r7, #22]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fd6a 	bl	8001c5c <Process_Data>
 8002188:	e000      	b.n	800218c <PDM_CAN_Process_Data+0xac>
		return;
 800218a:	bf00      	nop
	}
}
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	1ffff000 	.word	0x1ffff000
 8002198:	1e35c000 	.word	0x1e35c000

0800219c <Principal_Verify>:
 */

#include "principal.h"

void Principal_Verify()
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
	verifyADC = 0;
 80021a2:	4b29      	ldr	r3, [pc, #164]	; (8002248 <Principal_Verify+0xac>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	e015      	b.n	80021da <Principal_Verify+0x3e>
		if(adcBuffer[i] > ADC_THRESHOLD)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	4a26      	ldr	r2, [pc, #152]	; (800224c <Principal_Verify+0xb0>)
 80021b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021b6:	2b1e      	cmp	r3, #30
 80021b8:	d90c      	bls.n	80021d4 <Principal_Verify+0x38>
			verifyADC |= (1 << i);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2201      	movs	r2, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <Principal_Verify+0xac>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <Principal_Verify+0xac>)
 80021d2:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	3301      	adds	r3, #1
 80021d8:	71fb      	strb	r3, [r7, #7]
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b12      	cmp	r3, #18
 80021de:	d9e6      	bls.n	80021ae <Principal_Verify+0x12>

	if(flagDatalogger == DL_SAVE)
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <Principal_Verify+0xb4>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <Principal_Verify+0x58>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2102      	movs	r1, #2
 80021ec:	4819      	ldr	r0, [pc, #100]	; (8002254 <Principal_Verify+0xb8>)
 80021ee:	f006 fe9b 	bl	8008f28 <HAL_GPIO_WritePin>
 80021f2:	e004      	b.n	80021fe <Principal_Verify+0x62>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2102      	movs	r1, #2
 80021f8:	4816      	ldr	r0, [pc, #88]	; (8002254 <Principal_Verify+0xb8>)
 80021fa:	f006 fe95 	bl	8008f28 <HAL_GPIO_WritePin>

	if((verifyCAN & 1) == 1)
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <Principal_Verify+0xbc>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <Principal_Verify+0x78>
		HAL_GPIO_TogglePin(LED_CAN_TX);
 800220a:	2104      	movs	r1, #4
 800220c:	4811      	ldr	r0, [pc, #68]	; (8002254 <Principal_Verify+0xb8>)
 800220e:	f006 fea4 	bl	8008f5a <HAL_GPIO_TogglePin>
 8002212:	e004      	b.n	800221e <Principal_Verify+0x82>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	2104      	movs	r1, #4
 8002218:	480e      	ldr	r0, [pc, #56]	; (8002254 <Principal_Verify+0xb8>)
 800221a:	f006 fe85 	bl	8008f28 <HAL_GPIO_WritePin>

	if((verifyCAN & 2) == 2)
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <Principal_Verify+0xbc>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <Principal_Verify+0x98>
		HAL_GPIO_TogglePin(LED_CAN_RX);
 800222a:	2108      	movs	r1, #8
 800222c:	4809      	ldr	r0, [pc, #36]	; (8002254 <Principal_Verify+0xb8>)
 800222e:	f006 fe94 	bl	8008f5a <HAL_GPIO_TogglePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
}
 8002232:	e004      	b.n	800223e <Principal_Verify+0xa2>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	2108      	movs	r1, #8
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <Principal_Verify+0xb8>)
 800223a:	f006 fe75 	bl	8008f28 <HAL_GPIO_WritePin>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200037ea 	.word	0x200037ea
 800224c:	200005cc 	.word	0x200005cc
 8002250:	2000376a 	.word	0x2000376a
 8002254:	40020800 	.word	0x40020800
 8002258:	200037e8 	.word	0x200037e8

0800225c <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af02      	add	r7, sp, #8
 8002262:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x000f) == 0x0000)
 8002264:	4b49      	ldr	r3, [pc, #292]	; (800238c <Tx_Analog_1_4+0x130>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	2b00      	cmp	r3, #0
 800226e:	d103      	bne.n	8002278 <Tx_Analog_1_4+0x1c>
	{
		accCAN[ANALOG_1_4] = 0;
 8002270:	4b47      	ldr	r3, [pc, #284]	; (8002390 <Tx_Analog_1_4+0x134>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
		return;
 8002276:	e086      	b.n	8002386 <Tx_Analog_1_4+0x12a>
	}

	txHeader.IDE = CAN_ID_STD;
 8002278:	4b46      	ldr	r3, [pc, #280]	; (8002394 <Tx_Analog_1_4+0x138>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800227e:	4b45      	ldr	r3, [pc, #276]	; (8002394 <Tx_Analog_1_4+0x138>)
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <Tx_Analog_1_4+0x138>)
 8002286:	2200      	movs	r2, #0
 8002288:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + ANALOG_1_4);
 800228a:	4b42      	ldr	r3, [pc, #264]	; (8002394 <Tx_Analog_1_4+0x138>)
 800228c:	f240 5201 	movw	r2, #1281	; 0x501
 8002290:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002292:	4b40      	ldr	r3, [pc, #256]	; (8002394 <Tx_Analog_1_4+0x138>)
 8002294:	2208      	movs	r2, #8
 8002296:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[0] >> 8;
 8002298:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <Tx_Analog_1_4+0x13c>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	b29b      	uxth	r3, r3
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <Tx_Analog_1_4+0x140>)
 80022a4:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[0] & 0xff;
 80022a6:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <Tx_Analog_1_4+0x13c>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	4b3b      	ldr	r3, [pc, #236]	; (800239c <Tx_Analog_1_4+0x140>)
 80022ae:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[1] >> 8;
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <Tx_Analog_1_4+0x13c>)
 80022b2:	885b      	ldrh	r3, [r3, #2]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b38      	ldr	r3, [pc, #224]	; (800239c <Tx_Analog_1_4+0x140>)
 80022bc:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[1] & 0xff;
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <Tx_Analog_1_4+0x13c>)
 80022c0:	885b      	ldrh	r3, [r3, #2]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b35      	ldr	r3, [pc, #212]	; (800239c <Tx_Analog_1_4+0x140>)
 80022c6:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[2] >> 8;
 80022c8:	4b33      	ldr	r3, [pc, #204]	; (8002398 <Tx_Analog_1_4+0x13c>)
 80022ca:	889b      	ldrh	r3, [r3, #4]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b32      	ldr	r3, [pc, #200]	; (800239c <Tx_Analog_1_4+0x140>)
 80022d4:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[2] & 0xff;
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <Tx_Analog_1_4+0x13c>)
 80022d8:	889b      	ldrh	r3, [r3, #4]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b2f      	ldr	r3, [pc, #188]	; (800239c <Tx_Analog_1_4+0x140>)
 80022de:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[3] >> 8;
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <Tx_Analog_1_4+0x13c>)
 80022e2:	88db      	ldrh	r3, [r3, #6]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b2c      	ldr	r3, [pc, #176]	; (800239c <Tx_Analog_1_4+0x140>)
 80022ec:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[3] & 0xff;
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <Tx_Analog_1_4+0x13c>)
 80022f0:	88db      	ldrh	r3, [r3, #6]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b29      	ldr	r3, [pc, #164]	; (800239c <Tx_Analog_1_4+0x140>)
 80022f6:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <Tx_Analog_1_4+0x144>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10a      	bne.n	8002316 <Tx_Analog_1_4+0xba>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8002300:	4b24      	ldr	r3, [pc, #144]	; (8002394 <Tx_Analog_1_4+0x138>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <Tx_Analog_1_4+0x138>)
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	b2d9      	uxtb	r1, r3
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <Tx_Analog_1_4+0x148>)
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <Tx_Analog_1_4+0x14c>)
 8002310:	4a22      	ldr	r2, [pc, #136]	; (800239c <Tx_Analog_1_4+0x140>)
 8002312:	f003 fded 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_1_4] >= perCAN[ANALOG_1_4]) && (perCAN[ANALOG_1_4] != MSG_DISABLED))
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <Tx_Analog_1_4+0x134>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a24      	ldr	r2, [pc, #144]	; (80023ac <Tx_Analog_1_4+0x150>)
 800231c:	8812      	ldrh	r2, [r2, #0]
 800231e:	4293      	cmp	r3, r2
 8002320:	d331      	bcc.n	8002386 <Tx_Analog_1_4+0x12a>
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <Tx_Analog_1_4+0x150>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d02d      	beq.n	8002386 <Tx_Analog_1_4+0x12a>
	{
		accCAN[ANALOG_1_4] -= perCAN[ANALOG_1_4];
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <Tx_Analog_1_4+0x134>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <Tx_Analog_1_4+0x150>)
 8002330:	8812      	ldrh	r2, [r2, #0]
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	4a16      	ldr	r2, [pc, #88]	; (8002390 <Tx_Analog_1_4+0x134>)
 8002336:	6013      	str	r3, [r2, #0]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <Tx_Analog_1_4+0x154>)
 800233a:	4a18      	ldr	r2, [pc, #96]	; (800239c <Tx_Analog_1_4+0x140>)
 800233c:	4915      	ldr	r1, [pc, #84]	; (8002394 <Tx_Analog_1_4+0x138>)
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f005 fb1e 	bl	8007980 <HAL_CAN_AddTxMessage>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <Tx_Analog_1_4+0xfe>
			verifyCAN |= 1;
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <Tx_Analog_1_4+0x158>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <Tx_Analog_1_4+0x158>)
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e006      	b.n	8002368 <Tx_Analog_1_4+0x10c>
		else
			verifyCAN &= 0x02;
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <Tx_Analog_1_4+0x158>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <Tx_Analog_1_4+0x158>)
 8002366:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e002      	b.n	8002374 <Tx_Analog_1_4+0x118>
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	3301      	adds	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f005 fbde 	bl	8007b36 <HAL_CAN_GetTxMailboxesFreeLevel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b03      	cmp	r3, #3
 800237e:	d002      	beq.n	8002386 <Tx_Analog_1_4+0x12a>
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d9f3      	bls.n	800236e <Tx_Analog_1_4+0x112>
	}
}
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200037ea 	.word	0x200037ea
 8002390:	200037ac 	.word	0x200037ac
 8002394:	200005b0 	.word	0x200005b0
 8002398:	200005cc 	.word	0x200005cc
 800239c:	20000588 	.word	0x20000588
 80023a0:	2000376a 	.word	0x2000376a
 80023a4:	20002700 	.word	0x20002700
 80023a8:	20001698 	.word	0x20001698
 80023ac:	20003788 	.word	0x20003788
 80023b0:	20000590 	.word	0x20000590
 80023b4:	200037e8 	.word	0x200037e8

080023b8 <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af02      	add	r7, sp, #8
 80023be:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x00f0) == 0x0000)
 80023c0:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <Tx_Analog_5_8+0x130>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d103      	bne.n	80023d4 <Tx_Analog_5_8+0x1c>
	{
		accCAN[ANALOG_5_8] = 0;
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <Tx_Analog_5_8+0x134>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	605a      	str	r2, [r3, #4]
		return;
 80023d2:	e086      	b.n	80024e2 <Tx_Analog_5_8+0x12a>
	}

	txHeader.IDE = CAN_ID_STD;
 80023d4:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <Tx_Analog_5_8+0x138>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80023da:	4b45      	ldr	r3, [pc, #276]	; (80024f0 <Tx_Analog_5_8+0x138>)
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80023e0:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <Tx_Analog_5_8+0x138>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + ANALOG_5_8);
 80023e6:	4b42      	ldr	r3, [pc, #264]	; (80024f0 <Tx_Analog_5_8+0x138>)
 80023e8:	f240 5202 	movw	r2, #1282	; 0x502
 80023ec:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80023ee:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <Tx_Analog_5_8+0x138>)
 80023f0:	2208      	movs	r2, #8
 80023f2:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[4] >> 8;
 80023f4:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <Tx_Analog_5_8+0x13c>)
 80023f6:	891b      	ldrh	r3, [r3, #8]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <Tx_Analog_5_8+0x140>)
 8002400:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[4] & 0xff;
 8002402:	4b3c      	ldr	r3, [pc, #240]	; (80024f4 <Tx_Analog_5_8+0x13c>)
 8002404:	891b      	ldrh	r3, [r3, #8]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <Tx_Analog_5_8+0x140>)
 800240a:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[5] >> 8;
 800240c:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <Tx_Analog_5_8+0x13c>)
 800240e:	895b      	ldrh	r3, [r3, #10]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	b29b      	uxth	r3, r3
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <Tx_Analog_5_8+0x140>)
 8002418:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[5] & 0xff;
 800241a:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <Tx_Analog_5_8+0x13c>)
 800241c:	895b      	ldrh	r3, [r3, #10]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <Tx_Analog_5_8+0x140>)
 8002422:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[6] >> 8;
 8002424:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <Tx_Analog_5_8+0x13c>)
 8002426:	899b      	ldrh	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	b29b      	uxth	r3, r3
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <Tx_Analog_5_8+0x140>)
 8002430:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[6] & 0xff;
 8002432:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <Tx_Analog_5_8+0x13c>)
 8002434:	899b      	ldrh	r3, [r3, #12]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <Tx_Analog_5_8+0x140>)
 800243a:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[7] >> 8;
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <Tx_Analog_5_8+0x13c>)
 800243e:	89db      	ldrh	r3, [r3, #14]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	b29b      	uxth	r3, r3
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <Tx_Analog_5_8+0x140>)
 8002448:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[7] & 0xff;
 800244a:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <Tx_Analog_5_8+0x13c>)
 800244c:	89db      	ldrh	r3, [r3, #14]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <Tx_Analog_5_8+0x140>)
 8002452:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002454:	4b29      	ldr	r3, [pc, #164]	; (80024fc <Tx_Analog_5_8+0x144>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10a      	bne.n	8002472 <Tx_Analog_5_8+0xba>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <Tx_Analog_5_8+0x138>)
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <Tx_Analog_5_8+0x138>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	b2d9      	uxtb	r1, r3
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <Tx_Analog_5_8+0x148>)
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <Tx_Analog_5_8+0x14c>)
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <Tx_Analog_5_8+0x140>)
 800246e:	f003 fd3f 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_5_8] >= perCAN[ANALOG_5_8]) && (perCAN[ANALOG_5_8] != MSG_DISABLED))
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <Tx_Analog_5_8+0x134>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a24      	ldr	r2, [pc, #144]	; (8002508 <Tx_Analog_5_8+0x150>)
 8002478:	8852      	ldrh	r2, [r2, #2]
 800247a:	4293      	cmp	r3, r2
 800247c:	d331      	bcc.n	80024e2 <Tx_Analog_5_8+0x12a>
 800247e:	4b22      	ldr	r3, [pc, #136]	; (8002508 <Tx_Analog_5_8+0x150>)
 8002480:	885b      	ldrh	r3, [r3, #2]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02d      	beq.n	80024e2 <Tx_Analog_5_8+0x12a>
	{
		accCAN[ANALOG_5_8] -= perCAN[ANALOG_5_8];
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <Tx_Analog_5_8+0x134>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4a1f      	ldr	r2, [pc, #124]	; (8002508 <Tx_Analog_5_8+0x150>)
 800248c:	8852      	ldrh	r2, [r2, #2]
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	4a16      	ldr	r2, [pc, #88]	; (80024ec <Tx_Analog_5_8+0x134>)
 8002492:	6053      	str	r3, [r2, #4]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002494:	4b1d      	ldr	r3, [pc, #116]	; (800250c <Tx_Analog_5_8+0x154>)
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <Tx_Analog_5_8+0x140>)
 8002498:	4915      	ldr	r1, [pc, #84]	; (80024f0 <Tx_Analog_5_8+0x138>)
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f005 fa70 	bl	8007980 <HAL_CAN_AddTxMessage>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d107      	bne.n	80024b6 <Tx_Analog_5_8+0xfe>
			verifyCAN |= 1;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <Tx_Analog_5_8+0x158>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <Tx_Analog_5_8+0x158>)
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e006      	b.n	80024c4 <Tx_Analog_5_8+0x10c>
		else
			verifyCAN &= 0x02;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <Tx_Analog_5_8+0x158>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <Tx_Analog_5_8+0x158>)
 80024c2:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e002      	b.n	80024d0 <Tx_Analog_5_8+0x118>
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	3301      	adds	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f005 fb30 	bl	8007b36 <HAL_CAN_GetTxMailboxesFreeLevel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d002      	beq.n	80024e2 <Tx_Analog_5_8+0x12a>
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d9f3      	bls.n	80024ca <Tx_Analog_5_8+0x112>
	}
}
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200037ea 	.word	0x200037ea
 80024ec:	200037ac 	.word	0x200037ac
 80024f0:	200005b0 	.word	0x200005b0
 80024f4:	200005cc 	.word	0x200005cc
 80024f8:	20000588 	.word	0x20000588
 80024fc:	2000376a 	.word	0x2000376a
 8002500:	20002700 	.word	0x20002700
 8002504:	20001698 	.word	0x20001698
 8002508:	20003788 	.word	0x20003788
 800250c:	20000590 	.word	0x20000590
 8002510:	200037e8 	.word	0x200037e8

08002514 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af02      	add	r7, sp, #8
 800251a:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x0f00) == 0x0000)
 800251c:	4b4d      	ldr	r3, [pc, #308]	; (8002654 <Tx_Analog_9_12+0x140>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <Tx_Analog_9_12+0x1c>
	{
		accCAN[ANALOG_9_12] = 0;
 8002528:	4b4b      	ldr	r3, [pc, #300]	; (8002658 <Tx_Analog_9_12+0x144>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
		return;
 800252e:	e08e      	b.n	800264e <Tx_Analog_9_12+0x13a>
	}

	txHeader.IDE = CAN_ID_STD;
 8002530:	4b4a      	ldr	r3, [pc, #296]	; (800265c <Tx_Analog_9_12+0x148>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002536:	4b49      	ldr	r3, [pc, #292]	; (800265c <Tx_Analog_9_12+0x148>)
 8002538:	2200      	movs	r2, #0
 800253a:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 800253c:	4b47      	ldr	r3, [pc, #284]	; (800265c <Tx_Analog_9_12+0x148>)
 800253e:	2200      	movs	r2, #0
 8002540:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + ANALOG_9_12);
 8002542:	4b46      	ldr	r3, [pc, #280]	; (800265c <Tx_Analog_9_12+0x148>)
 8002544:	f240 5203 	movw	r2, #1283	; 0x503
 8002548:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800254a:	4b44      	ldr	r3, [pc, #272]	; (800265c <Tx_Analog_9_12+0x148>)
 800254c:	2208      	movs	r2, #8
 800254e:	611a      	str	r2, [r3, #16]

	if((verifyADC & 0x0f00) == 0)
 8002550:	4b40      	ldr	r3, [pc, #256]	; (8002654 <Tx_Analog_9_12+0x140>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002558:	2b00      	cmp	r3, #0
 800255a:	d077      	beq.n	800264c <Tx_Analog_9_12+0x138>
		return;

	txData[0] = adcBuffer[8] >> 8;
 800255c:	4b40      	ldr	r3, [pc, #256]	; (8002660 <Tx_Analog_9_12+0x14c>)
 800255e:	8a1b      	ldrh	r3, [r3, #16]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	b29b      	uxth	r3, r3
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <Tx_Analog_9_12+0x150>)
 8002568:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[8] & 0xff;
 800256a:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <Tx_Analog_9_12+0x14c>)
 800256c:	8a1b      	ldrh	r3, [r3, #16]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <Tx_Analog_9_12+0x150>)
 8002572:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[9] >> 8;
 8002574:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <Tx_Analog_9_12+0x14c>)
 8002576:	8a5b      	ldrh	r3, [r3, #18]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	b29b      	uxth	r3, r3
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b39      	ldr	r3, [pc, #228]	; (8002664 <Tx_Analog_9_12+0x150>)
 8002580:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[9] & 0xff;
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <Tx_Analog_9_12+0x14c>)
 8002584:	8a5b      	ldrh	r3, [r3, #18]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <Tx_Analog_9_12+0x150>)
 800258a:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[10] >> 8;
 800258c:	4b34      	ldr	r3, [pc, #208]	; (8002660 <Tx_Analog_9_12+0x14c>)
 800258e:	8a9b      	ldrh	r3, [r3, #20]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	b29b      	uxth	r3, r3
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <Tx_Analog_9_12+0x150>)
 8002598:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[10] & 0xff;
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <Tx_Analog_9_12+0x14c>)
 800259c:	8a9b      	ldrh	r3, [r3, #20]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b30      	ldr	r3, [pc, #192]	; (8002664 <Tx_Analog_9_12+0x150>)
 80025a2:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[11] >> 8;
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <Tx_Analog_9_12+0x14c>)
 80025a6:	8adb      	ldrh	r3, [r3, #22]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <Tx_Analog_9_12+0x150>)
 80025b0:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[11] & 0xff;
 80025b2:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <Tx_Analog_9_12+0x14c>)
 80025b4:	8adb      	ldrh	r3, [r3, #22]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <Tx_Analog_9_12+0x150>)
 80025ba:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <Tx_Analog_9_12+0x154>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d10a      	bne.n	80025da <Tx_Analog_9_12+0xc6>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 80025c4:	4b25      	ldr	r3, [pc, #148]	; (800265c <Tx_Analog_9_12+0x148>)
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <Tx_Analog_9_12+0x148>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	b2d9      	uxtb	r1, r3
 80025ce:	4b27      	ldr	r3, [pc, #156]	; (800266c <Tx_Analog_9_12+0x158>)
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	4b27      	ldr	r3, [pc, #156]	; (8002670 <Tx_Analog_9_12+0x15c>)
 80025d4:	4a23      	ldr	r2, [pc, #140]	; (8002664 <Tx_Analog_9_12+0x150>)
 80025d6:	f003 fc8b 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_9_12] >= perCAN[ANALOG_9_12]) && (perCAN[ANALOG_9_12] != MSG_DISABLED))
 80025da:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <Tx_Analog_9_12+0x144>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4a25      	ldr	r2, [pc, #148]	; (8002674 <Tx_Analog_9_12+0x160>)
 80025e0:	8892      	ldrh	r2, [r2, #4]
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d333      	bcc.n	800264e <Tx_Analog_9_12+0x13a>
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <Tx_Analog_9_12+0x160>)
 80025e8:	889b      	ldrh	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d02f      	beq.n	800264e <Tx_Analog_9_12+0x13a>
	{
		accCAN[ANALOG_9_12] -= perCAN[ANALOG_9_12];
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <Tx_Analog_9_12+0x144>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4a20      	ldr	r2, [pc, #128]	; (8002674 <Tx_Analog_9_12+0x160>)
 80025f4:	8892      	ldrh	r2, [r2, #4]
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	4a17      	ldr	r2, [pc, #92]	; (8002658 <Tx_Analog_9_12+0x144>)
 80025fa:	6093      	str	r3, [r2, #8]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <Tx_Analog_9_12+0x164>)
 80025fe:	4a19      	ldr	r2, [pc, #100]	; (8002664 <Tx_Analog_9_12+0x150>)
 8002600:	4916      	ldr	r1, [pc, #88]	; (800265c <Tx_Analog_9_12+0x148>)
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f005 f9bc 	bl	8007980 <HAL_CAN_AddTxMessage>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d107      	bne.n	800261e <Tx_Analog_9_12+0x10a>
			verifyCAN |= 1;
 800260e:	4b1b      	ldr	r3, [pc, #108]	; (800267c <Tx_Analog_9_12+0x168>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <Tx_Analog_9_12+0x168>)
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e006      	b.n	800262c <Tx_Analog_9_12+0x118>
		else
			verifyCAN &= 0x02;
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <Tx_Analog_9_12+0x168>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <Tx_Analog_9_12+0x168>)
 800262a:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
 8002630:	e002      	b.n	8002638 <Tx_Analog_9_12+0x124>
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	3301      	adds	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f005 fa7c 	bl	8007b36 <HAL_CAN_GetTxMailboxesFreeLevel>
 800263e:	4603      	mov	r3, r0
 8002640:	2b03      	cmp	r3, #3
 8002642:	d004      	beq.n	800264e <Tx_Analog_9_12+0x13a>
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d9f3      	bls.n	8002632 <Tx_Analog_9_12+0x11e>
 800264a:	e000      	b.n	800264e <Tx_Analog_9_12+0x13a>
		return;
 800264c:	bf00      	nop
	}
}
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200037ea 	.word	0x200037ea
 8002658:	200037ac 	.word	0x200037ac
 800265c:	200005b0 	.word	0x200005b0
 8002660:	200005cc 	.word	0x200005cc
 8002664:	20000588 	.word	0x20000588
 8002668:	2000376a 	.word	0x2000376a
 800266c:	20002700 	.word	0x20002700
 8002670:	20001698 	.word	0x20001698
 8002674:	20003788 	.word	0x20003788
 8002678:	20000590 	.word	0x20000590
 800267c:	200037e8 	.word	0x200037e8

08002680 <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 8002688:	4b44      	ldr	r3, [pc, #272]	; (800279c <Tx_RTC+0x11c>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800268e:	4b43      	ldr	r3, [pc, #268]	; (800279c <Tx_RTC+0x11c>)
 8002690:	2200      	movs	r2, #0
 8002692:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002694:	4b41      	ldr	r3, [pc, #260]	; (800279c <Tx_RTC+0x11c>)
 8002696:	2200      	movs	r2, #0
 8002698:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + RTC_MSG);
 800269a:	4b40      	ldr	r3, [pc, #256]	; (800279c <Tx_RTC+0x11c>)
 800269c:	f240 5204 	movw	r2, #1284	; 0x504
 80026a0:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80026a2:	4b3e      	ldr	r3, [pc, #248]	; (800279c <Tx_RTC+0x11c>)
 80026a4:	2208      	movs	r2, #8
 80026a6:	611a      	str	r2, [r3, #16]

	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80026a8:	2200      	movs	r2, #0
 80026aa:	493d      	ldr	r1, [pc, #244]	; (80027a0 <Tx_RTC+0x120>)
 80026ac:	483d      	ldr	r0, [pc, #244]	; (80027a4 <Tx_RTC+0x124>)
 80026ae:	f00a f931 	bl	800c914 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 80026b2:	2200      	movs	r2, #0
 80026b4:	493c      	ldr	r1, [pc, #240]	; (80027a8 <Tx_RTC+0x128>)
 80026b6:	483b      	ldr	r0, [pc, #236]	; (80027a4 <Tx_RTC+0x124>)
 80026b8:	f00a fa31 	bl	800cb1e <HAL_RTC_GetDate>

	txData[0] = rtcDate.Year;
 80026bc:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <Tx_RTC+0x128>)
 80026be:	78da      	ldrb	r2, [r3, #3]
 80026c0:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <Tx_RTC+0x12c>)
 80026c2:	701a      	strb	r2, [r3, #0]
	txData[1] = rtcDate.Month;
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <Tx_RTC+0x128>)
 80026c6:	785a      	ldrb	r2, [r3, #1]
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <Tx_RTC+0x12c>)
 80026ca:	705a      	strb	r2, [r3, #1]
	txData[2] = rtcDate.Date;
 80026cc:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <Tx_RTC+0x128>)
 80026ce:	789a      	ldrb	r2, [r3, #2]
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <Tx_RTC+0x12c>)
 80026d2:	709a      	strb	r2, [r3, #2]
	txData[3] = rtcTime.Hours;
 80026d4:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <Tx_RTC+0x120>)
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	4b34      	ldr	r3, [pc, #208]	; (80027ac <Tx_RTC+0x12c>)
 80026da:	70da      	strb	r2, [r3, #3]
	txData[4] = rtcTime.Minutes;
 80026dc:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <Tx_RTC+0x120>)
 80026de:	785a      	ldrb	r2, [r3, #1]
 80026e0:	4b32      	ldr	r3, [pc, #200]	; (80027ac <Tx_RTC+0x12c>)
 80026e2:	711a      	strb	r2, [r3, #4]
	txData[5] = rtcTime.Seconds;
 80026e4:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <Tx_RTC+0x120>)
 80026e6:	789a      	ldrb	r2, [r3, #2]
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <Tx_RTC+0x12c>)
 80026ea:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[12] >> 8;
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <Tx_RTC+0x130>)
 80026ee:	8b1b      	ldrh	r3, [r3, #24]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <Tx_RTC+0x12c>)
 80026f8:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[12] & 0xff;
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <Tx_RTC+0x130>)
 80026fc:	8b1b      	ldrh	r3, [r3, #24]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <Tx_RTC+0x12c>)
 8002702:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <Tx_RTC+0x134>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d10a      	bne.n	8002722 <Tx_RTC+0xa2>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <Tx_RTC+0x11c>)
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <Tx_RTC+0x11c>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	b2d9      	uxtb	r1, r3
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <Tx_RTC+0x138>)
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <Tx_RTC+0x13c>)
 800271c:	4a23      	ldr	r2, [pc, #140]	; (80027ac <Tx_RTC+0x12c>)
 800271e:	f003 fbe7 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	if((accCAN[RTC_MSG] >= perCAN[RTC_MSG]) && (perCAN[RTC_MSG] != MSG_DISABLED))
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <Tx_RTC+0x140>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <Tx_RTC+0x144>)
 8002728:	88d2      	ldrh	r2, [r2, #6]
 800272a:	4293      	cmp	r3, r2
 800272c:	d331      	bcc.n	8002792 <Tx_RTC+0x112>
 800272e:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <Tx_RTC+0x144>)
 8002730:	88db      	ldrh	r3, [r3, #6]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02d      	beq.n	8002792 <Tx_RTC+0x112>
	{
		accCAN[RTC_MSG] -= perCAN[RTC_MSG];
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <Tx_RTC+0x140>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <Tx_RTC+0x144>)
 800273c:	88d2      	ldrh	r2, [r2, #6]
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <Tx_RTC+0x140>)
 8002742:	60d3      	str	r3, [r2, #12]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <Tx_RTC+0x148>)
 8002746:	4a19      	ldr	r2, [pc, #100]	; (80027ac <Tx_RTC+0x12c>)
 8002748:	4914      	ldr	r1, [pc, #80]	; (800279c <Tx_RTC+0x11c>)
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f005 f918 	bl	8007980 <HAL_CAN_AddTxMessage>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <Tx_RTC+0xe6>
			verifyCAN |= 1;
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <Tx_RTC+0x14c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <Tx_RTC+0x14c>)
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e006      	b.n	8002774 <Tx_RTC+0xf4>
		else
			verifyCAN &= 0x02;
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <Tx_RTC+0x14c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <Tx_RTC+0x14c>)
 8002772:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e002      	b.n	8002780 <Tx_RTC+0x100>
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	3301      	adds	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f005 f9d8 	bl	8007b36 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002786:	4603      	mov	r3, r0
 8002788:	2b03      	cmp	r3, #3
 800278a:	d002      	beq.n	8002792 <Tx_RTC+0x112>
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d9f3      	bls.n	800277a <Tx_RTC+0xfa>
	}
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200005b0 	.word	0x200005b0
 80027a0:	20003774 	.word	0x20003774
 80027a4:	200003cc 	.word	0x200003cc
 80027a8:	20003770 	.word	0x20003770
 80027ac:	20000588 	.word	0x20000588
 80027b0:	200005cc 	.word	0x200005cc
 80027b4:	2000376a 	.word	0x2000376a
 80027b8:	20002700 	.word	0x20002700
 80027bc:	20001698 	.word	0x20001698
 80027c0:	200037ac 	.word	0x200037ac
 80027c4:	20003788 	.word	0x20003788
 80027c8:	20000590 	.word	0x20000590
 80027cc:	200037e8 	.word	0x200037e8

080027d0 <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 80027d8:	4bc7      	ldr	r3, [pc, #796]	; (8002af8 <Tx_Verify+0x328>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80027de:	4bc6      	ldr	r3, [pc, #792]	; (8002af8 <Tx_Verify+0x328>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80027e4:	4bc4      	ldr	r3, [pc, #784]	; (8002af8 <Tx_Verify+0x328>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | (FIRST_ID + VERIFY_MSG);
 80027ea:	4bc3      	ldr	r3, [pc, #780]	; (8002af8 <Tx_Verify+0x328>)
 80027ec:	f240 5205 	movw	r2, #1285	; 0x505
 80027f0:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80027f2:	4bc1      	ldr	r3, [pc, #772]	; (8002af8 <Tx_Verify+0x328>)
 80027f4:	2208      	movs	r2, #8
 80027f6:	611a      	str	r2, [r3, #16]

	Principal_Verify();
 80027f8:	f7ff fcd0 	bl	800219c <Principal_Verify>

	txData[0] = verifyADC & 0xff;
 80027fc:	4bbf      	ldr	r3, [pc, #764]	; (8002afc <Tx_Verify+0x32c>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4bbf      	ldr	r3, [pc, #764]	; (8002b00 <Tx_Verify+0x330>)
 8002804:	701a      	strb	r2, [r3, #0]
	txData[1] = (verifyADC >> 8) & 0x0f;
 8002806:	4bbd      	ldr	r3, [pc, #756]	; (8002afc <Tx_Verify+0x32c>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	b29b      	uxth	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4bba      	ldr	r3, [pc, #744]	; (8002b00 <Tx_Verify+0x330>)
 8002818:	705a      	strb	r2, [r3, #1]

	if(flagDatalogger == DL_SAVE)
 800281a:	4bba      	ldr	r3, [pc, #744]	; (8002b04 <Tx_Verify+0x334>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d106      	bne.n	8002830 <Tx_Verify+0x60>
		txData[1] |= (1 << 4);
 8002822:	4bb7      	ldr	r3, [pc, #732]	; (8002b00 <Tx_Verify+0x330>)
 8002824:	785b      	ldrb	r3, [r3, #1]
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4bb4      	ldr	r3, [pc, #720]	; (8002b00 <Tx_Verify+0x330>)
 800282e:	705a      	strb	r2, [r3, #1]

	if(flagRTC == RTC_OK)
 8002830:	4bb5      	ldr	r3, [pc, #724]	; (8002b08 <Tx_Verify+0x338>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d106      	bne.n	8002846 <Tx_Verify+0x76>
		txData[1] |= (1 << 5);
 8002838:	4bb1      	ldr	r3, [pc, #708]	; (8002b00 <Tx_Verify+0x330>)
 800283a:	785b      	ldrb	r3, [r3, #1]
 800283c:	f043 0320 	orr.w	r3, r3, #32
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4baf      	ldr	r3, [pc, #700]	; (8002b00 <Tx_Verify+0x330>)
 8002844:	705a      	strb	r2, [r3, #1]

	__FREQ_TO_BUFFER(txData[2], perMsg[ANALOG_1_4]);
 8002846:	4bb1      	ldr	r3, [pc, #708]	; (8002b0c <Tx_Verify+0x33c>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800284e:	f000 8082 	beq.w	8002956 <Tx_Verify+0x186>
 8002852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002856:	f300 80aa 	bgt.w	80029ae <Tx_Verify+0x1de>
 800285a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800285e:	d07e      	beq.n	800295e <Tx_Verify+0x18e>
 8002860:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002864:	f300 80a3 	bgt.w	80029ae <Tx_Verify+0x1de>
 8002868:	2bc8      	cmp	r3, #200	; 0xc8
 800286a:	d07c      	beq.n	8002966 <Tx_Verify+0x196>
 800286c:	2bc8      	cmp	r3, #200	; 0xc8
 800286e:	f300 809e 	bgt.w	80029ae <Tx_Verify+0x1de>
 8002872:	2b32      	cmp	r3, #50	; 0x32
 8002874:	dc6c      	bgt.n	8002950 <Tx_Verify+0x180>
 8002876:	2b02      	cmp	r3, #2
 8002878:	f2c0 8099 	blt.w	80029ae <Tx_Verify+0x1de>
 800287c:	3b02      	subs	r3, #2
 800287e:	2b30      	cmp	r3, #48	; 0x30
 8002880:	f200 8095 	bhi.w	80029ae <Tx_Verify+0x1de>
 8002884:	a201      	add	r2, pc, #4	; (adr r2, 800288c <Tx_Verify+0xbc>)
 8002886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288a:	bf00      	nop
 800288c:	080029a7 	.word	0x080029a7
 8002890:	0800299f 	.word	0x0800299f
 8002894:	080029af 	.word	0x080029af
 8002898:	08002997 	.word	0x08002997
 800289c:	080029af 	.word	0x080029af
 80028a0:	080029af 	.word	0x080029af
 80028a4:	080029af 	.word	0x080029af
 80028a8:	080029af 	.word	0x080029af
 80028ac:	0800298f 	.word	0x0800298f
 80028b0:	080029af 	.word	0x080029af
 80028b4:	080029af 	.word	0x080029af
 80028b8:	080029af 	.word	0x080029af
 80028bc:	080029af 	.word	0x080029af
 80028c0:	080029af 	.word	0x080029af
 80028c4:	080029af 	.word	0x080029af
 80028c8:	080029af 	.word	0x080029af
 80028cc:	080029af 	.word	0x080029af
 80028d0:	080029af 	.word	0x080029af
 80028d4:	08002987 	.word	0x08002987
 80028d8:	080029af 	.word	0x080029af
 80028dc:	080029af 	.word	0x080029af
 80028e0:	080029af 	.word	0x080029af
 80028e4:	080029af 	.word	0x080029af
 80028e8:	080029af 	.word	0x080029af
 80028ec:	080029af 	.word	0x080029af
 80028f0:	080029af 	.word	0x080029af
 80028f4:	080029af 	.word	0x080029af
 80028f8:	080029af 	.word	0x080029af
 80028fc:	080029af 	.word	0x080029af
 8002900:	080029af 	.word	0x080029af
 8002904:	080029af 	.word	0x080029af
 8002908:	080029af 	.word	0x080029af
 800290c:	080029af 	.word	0x080029af
 8002910:	080029af 	.word	0x080029af
 8002914:	080029af 	.word	0x080029af
 8002918:	080029af 	.word	0x080029af
 800291c:	080029af 	.word	0x080029af
 8002920:	080029af 	.word	0x080029af
 8002924:	0800297f 	.word	0x0800297f
 8002928:	080029af 	.word	0x080029af
 800292c:	080029af 	.word	0x080029af
 8002930:	080029af 	.word	0x080029af
 8002934:	080029af 	.word	0x080029af
 8002938:	080029af 	.word	0x080029af
 800293c:	080029af 	.word	0x080029af
 8002940:	080029af 	.word	0x080029af
 8002944:	080029af 	.word	0x080029af
 8002948:	080029af 	.word	0x080029af
 800294c:	08002977 	.word	0x08002977
 8002950:	2b64      	cmp	r3, #100	; 0x64
 8002952:	d00c      	beq.n	800296e <Tx_Verify+0x19e>
 8002954:	e02b      	b.n	80029ae <Tx_Verify+0x1de>
 8002956:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <Tx_Verify+0x330>)
 8002958:	2201      	movs	r2, #1
 800295a:	709a      	strb	r2, [r3, #2]
 800295c:	e02a      	b.n	80029b4 <Tx_Verify+0x1e4>
 800295e:	4b68      	ldr	r3, [pc, #416]	; (8002b00 <Tx_Verify+0x330>)
 8002960:	2202      	movs	r2, #2
 8002962:	709a      	strb	r2, [r3, #2]
 8002964:	e026      	b.n	80029b4 <Tx_Verify+0x1e4>
 8002966:	4b66      	ldr	r3, [pc, #408]	; (8002b00 <Tx_Verify+0x330>)
 8002968:	2203      	movs	r2, #3
 800296a:	709a      	strb	r2, [r3, #2]
 800296c:	e022      	b.n	80029b4 <Tx_Verify+0x1e4>
 800296e:	4b64      	ldr	r3, [pc, #400]	; (8002b00 <Tx_Verify+0x330>)
 8002970:	2204      	movs	r2, #4
 8002972:	709a      	strb	r2, [r3, #2]
 8002974:	e01e      	b.n	80029b4 <Tx_Verify+0x1e4>
 8002976:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <Tx_Verify+0x330>)
 8002978:	2205      	movs	r2, #5
 800297a:	709a      	strb	r2, [r3, #2]
 800297c:	e01a      	b.n	80029b4 <Tx_Verify+0x1e4>
 800297e:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <Tx_Verify+0x330>)
 8002980:	2206      	movs	r2, #6
 8002982:	709a      	strb	r2, [r3, #2]
 8002984:	e016      	b.n	80029b4 <Tx_Verify+0x1e4>
 8002986:	4b5e      	ldr	r3, [pc, #376]	; (8002b00 <Tx_Verify+0x330>)
 8002988:	2207      	movs	r2, #7
 800298a:	709a      	strb	r2, [r3, #2]
 800298c:	e012      	b.n	80029b4 <Tx_Verify+0x1e4>
 800298e:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <Tx_Verify+0x330>)
 8002990:	2208      	movs	r2, #8
 8002992:	709a      	strb	r2, [r3, #2]
 8002994:	e00e      	b.n	80029b4 <Tx_Verify+0x1e4>
 8002996:	4b5a      	ldr	r3, [pc, #360]	; (8002b00 <Tx_Verify+0x330>)
 8002998:	2209      	movs	r2, #9
 800299a:	709a      	strb	r2, [r3, #2]
 800299c:	e00a      	b.n	80029b4 <Tx_Verify+0x1e4>
 800299e:	4b58      	ldr	r3, [pc, #352]	; (8002b00 <Tx_Verify+0x330>)
 80029a0:	220a      	movs	r2, #10
 80029a2:	709a      	strb	r2, [r3, #2]
 80029a4:	e006      	b.n	80029b4 <Tx_Verify+0x1e4>
 80029a6:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <Tx_Verify+0x330>)
 80029a8:	220b      	movs	r2, #11
 80029aa:	709a      	strb	r2, [r3, #2]
 80029ac:	e002      	b.n	80029b4 <Tx_Verify+0x1e4>
 80029ae:	4b54      	ldr	r3, [pc, #336]	; (8002b00 <Tx_Verify+0x330>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	709a      	strb	r2, [r3, #2]
 80029b4:	bf00      	nop
	__FREQ_TO_BUFFER(txData[3], perMsg[ANALOG_5_8]);
 80029b6:	4b55      	ldr	r3, [pc, #340]	; (8002b0c <Tx_Verify+0x33c>)
 80029b8:	885b      	ldrh	r3, [r3, #2]
 80029ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029be:	f000 8082 	beq.w	8002ac6 <Tx_Verify+0x2f6>
 80029c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029c6:	f300 80b7 	bgt.w	8002b38 <Tx_Verify+0x368>
 80029ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029ce:	d07e      	beq.n	8002ace <Tx_Verify+0x2fe>
 80029d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029d4:	f300 80b0 	bgt.w	8002b38 <Tx_Verify+0x368>
 80029d8:	2bc8      	cmp	r3, #200	; 0xc8
 80029da:	d07c      	beq.n	8002ad6 <Tx_Verify+0x306>
 80029dc:	2bc8      	cmp	r3, #200	; 0xc8
 80029de:	f300 80ab 	bgt.w	8002b38 <Tx_Verify+0x368>
 80029e2:	2b32      	cmp	r3, #50	; 0x32
 80029e4:	dc6c      	bgt.n	8002ac0 <Tx_Verify+0x2f0>
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	f2c0 80a6 	blt.w	8002b38 <Tx_Verify+0x368>
 80029ec:	3b02      	subs	r3, #2
 80029ee:	2b30      	cmp	r3, #48	; 0x30
 80029f0:	f200 80a2 	bhi.w	8002b38 <Tx_Verify+0x368>
 80029f4:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <Tx_Verify+0x22c>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002b31 	.word	0x08002b31
 8002a00:	08002b29 	.word	0x08002b29
 8002a04:	08002b39 	.word	0x08002b39
 8002a08:	08002b21 	.word	0x08002b21
 8002a0c:	08002b39 	.word	0x08002b39
 8002a10:	08002b39 	.word	0x08002b39
 8002a14:	08002b39 	.word	0x08002b39
 8002a18:	08002b39 	.word	0x08002b39
 8002a1c:	08002b19 	.word	0x08002b19
 8002a20:	08002b39 	.word	0x08002b39
 8002a24:	08002b39 	.word	0x08002b39
 8002a28:	08002b39 	.word	0x08002b39
 8002a2c:	08002b39 	.word	0x08002b39
 8002a30:	08002b39 	.word	0x08002b39
 8002a34:	08002b39 	.word	0x08002b39
 8002a38:	08002b39 	.word	0x08002b39
 8002a3c:	08002b39 	.word	0x08002b39
 8002a40:	08002b39 	.word	0x08002b39
 8002a44:	08002b11 	.word	0x08002b11
 8002a48:	08002b39 	.word	0x08002b39
 8002a4c:	08002b39 	.word	0x08002b39
 8002a50:	08002b39 	.word	0x08002b39
 8002a54:	08002b39 	.word	0x08002b39
 8002a58:	08002b39 	.word	0x08002b39
 8002a5c:	08002b39 	.word	0x08002b39
 8002a60:	08002b39 	.word	0x08002b39
 8002a64:	08002b39 	.word	0x08002b39
 8002a68:	08002b39 	.word	0x08002b39
 8002a6c:	08002b39 	.word	0x08002b39
 8002a70:	08002b39 	.word	0x08002b39
 8002a74:	08002b39 	.word	0x08002b39
 8002a78:	08002b39 	.word	0x08002b39
 8002a7c:	08002b39 	.word	0x08002b39
 8002a80:	08002b39 	.word	0x08002b39
 8002a84:	08002b39 	.word	0x08002b39
 8002a88:	08002b39 	.word	0x08002b39
 8002a8c:	08002b39 	.word	0x08002b39
 8002a90:	08002b39 	.word	0x08002b39
 8002a94:	08002aef 	.word	0x08002aef
 8002a98:	08002b39 	.word	0x08002b39
 8002a9c:	08002b39 	.word	0x08002b39
 8002aa0:	08002b39 	.word	0x08002b39
 8002aa4:	08002b39 	.word	0x08002b39
 8002aa8:	08002b39 	.word	0x08002b39
 8002aac:	08002b39 	.word	0x08002b39
 8002ab0:	08002b39 	.word	0x08002b39
 8002ab4:	08002b39 	.word	0x08002b39
 8002ab8:	08002b39 	.word	0x08002b39
 8002abc:	08002ae7 	.word	0x08002ae7
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d00c      	beq.n	8002ade <Tx_Verify+0x30e>
 8002ac4:	e038      	b.n	8002b38 <Tx_Verify+0x368>
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <Tx_Verify+0x330>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	70da      	strb	r2, [r3, #3]
 8002acc:	e037      	b.n	8002b3e <Tx_Verify+0x36e>
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <Tx_Verify+0x330>)
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	70da      	strb	r2, [r3, #3]
 8002ad4:	e033      	b.n	8002b3e <Tx_Verify+0x36e>
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <Tx_Verify+0x330>)
 8002ad8:	2203      	movs	r2, #3
 8002ada:	70da      	strb	r2, [r3, #3]
 8002adc:	e02f      	b.n	8002b3e <Tx_Verify+0x36e>
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <Tx_Verify+0x330>)
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	70da      	strb	r2, [r3, #3]
 8002ae4:	e02b      	b.n	8002b3e <Tx_Verify+0x36e>
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <Tx_Verify+0x330>)
 8002ae8:	2205      	movs	r2, #5
 8002aea:	70da      	strb	r2, [r3, #3]
 8002aec:	e027      	b.n	8002b3e <Tx_Verify+0x36e>
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <Tx_Verify+0x330>)
 8002af0:	2206      	movs	r2, #6
 8002af2:	70da      	strb	r2, [r3, #3]
 8002af4:	e023      	b.n	8002b3e <Tx_Verify+0x36e>
 8002af6:	bf00      	nop
 8002af8:	200005b0 	.word	0x200005b0
 8002afc:	200037ea 	.word	0x200037ea
 8002b00:	20000588 	.word	0x20000588
 8002b04:	2000376a 	.word	0x2000376a
 8002b08:	2000376b 	.word	0x2000376b
 8002b0c:	20003794 	.word	0x20003794
 8002b10:	4bc1      	ldr	r3, [pc, #772]	; (8002e18 <Tx_Verify+0x648>)
 8002b12:	2207      	movs	r2, #7
 8002b14:	70da      	strb	r2, [r3, #3]
 8002b16:	e012      	b.n	8002b3e <Tx_Verify+0x36e>
 8002b18:	4bbf      	ldr	r3, [pc, #764]	; (8002e18 <Tx_Verify+0x648>)
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	70da      	strb	r2, [r3, #3]
 8002b1e:	e00e      	b.n	8002b3e <Tx_Verify+0x36e>
 8002b20:	4bbd      	ldr	r3, [pc, #756]	; (8002e18 <Tx_Verify+0x648>)
 8002b22:	2209      	movs	r2, #9
 8002b24:	70da      	strb	r2, [r3, #3]
 8002b26:	e00a      	b.n	8002b3e <Tx_Verify+0x36e>
 8002b28:	4bbb      	ldr	r3, [pc, #748]	; (8002e18 <Tx_Verify+0x648>)
 8002b2a:	220a      	movs	r2, #10
 8002b2c:	70da      	strb	r2, [r3, #3]
 8002b2e:	e006      	b.n	8002b3e <Tx_Verify+0x36e>
 8002b30:	4bb9      	ldr	r3, [pc, #740]	; (8002e18 <Tx_Verify+0x648>)
 8002b32:	220b      	movs	r2, #11
 8002b34:	70da      	strb	r2, [r3, #3]
 8002b36:	e002      	b.n	8002b3e <Tx_Verify+0x36e>
 8002b38:	4bb7      	ldr	r3, [pc, #732]	; (8002e18 <Tx_Verify+0x648>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	70da      	strb	r2, [r3, #3]
 8002b3e:	bf00      	nop
	__FREQ_TO_BUFFER(txData[4], perMsg[ANALOG_9_12]);
 8002b40:	4bb6      	ldr	r3, [pc, #728]	; (8002e1c <Tx_Verify+0x64c>)
 8002b42:	889b      	ldrh	r3, [r3, #4]
 8002b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b48:	f000 8081 	beq.w	8002c4e <Tx_Verify+0x47e>
 8002b4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b50:	f300 80a9 	bgt.w	8002ca6 <Tx_Verify+0x4d6>
 8002b54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b58:	d07d      	beq.n	8002c56 <Tx_Verify+0x486>
 8002b5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b5e:	f300 80a2 	bgt.w	8002ca6 <Tx_Verify+0x4d6>
 8002b62:	2bc8      	cmp	r3, #200	; 0xc8
 8002b64:	d07b      	beq.n	8002c5e <Tx_Verify+0x48e>
 8002b66:	2bc8      	cmp	r3, #200	; 0xc8
 8002b68:	f300 809d 	bgt.w	8002ca6 <Tx_Verify+0x4d6>
 8002b6c:	2b32      	cmp	r3, #50	; 0x32
 8002b6e:	dc6b      	bgt.n	8002c48 <Tx_Verify+0x478>
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	f2c0 8098 	blt.w	8002ca6 <Tx_Verify+0x4d6>
 8002b76:	3b02      	subs	r3, #2
 8002b78:	2b30      	cmp	r3, #48	; 0x30
 8002b7a:	f200 8094 	bhi.w	8002ca6 <Tx_Verify+0x4d6>
 8002b7e:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <Tx_Verify+0x3b4>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002c9f 	.word	0x08002c9f
 8002b88:	08002c97 	.word	0x08002c97
 8002b8c:	08002ca7 	.word	0x08002ca7
 8002b90:	08002c8f 	.word	0x08002c8f
 8002b94:	08002ca7 	.word	0x08002ca7
 8002b98:	08002ca7 	.word	0x08002ca7
 8002b9c:	08002ca7 	.word	0x08002ca7
 8002ba0:	08002ca7 	.word	0x08002ca7
 8002ba4:	08002c87 	.word	0x08002c87
 8002ba8:	08002ca7 	.word	0x08002ca7
 8002bac:	08002ca7 	.word	0x08002ca7
 8002bb0:	08002ca7 	.word	0x08002ca7
 8002bb4:	08002ca7 	.word	0x08002ca7
 8002bb8:	08002ca7 	.word	0x08002ca7
 8002bbc:	08002ca7 	.word	0x08002ca7
 8002bc0:	08002ca7 	.word	0x08002ca7
 8002bc4:	08002ca7 	.word	0x08002ca7
 8002bc8:	08002ca7 	.word	0x08002ca7
 8002bcc:	08002c7f 	.word	0x08002c7f
 8002bd0:	08002ca7 	.word	0x08002ca7
 8002bd4:	08002ca7 	.word	0x08002ca7
 8002bd8:	08002ca7 	.word	0x08002ca7
 8002bdc:	08002ca7 	.word	0x08002ca7
 8002be0:	08002ca7 	.word	0x08002ca7
 8002be4:	08002ca7 	.word	0x08002ca7
 8002be8:	08002ca7 	.word	0x08002ca7
 8002bec:	08002ca7 	.word	0x08002ca7
 8002bf0:	08002ca7 	.word	0x08002ca7
 8002bf4:	08002ca7 	.word	0x08002ca7
 8002bf8:	08002ca7 	.word	0x08002ca7
 8002bfc:	08002ca7 	.word	0x08002ca7
 8002c00:	08002ca7 	.word	0x08002ca7
 8002c04:	08002ca7 	.word	0x08002ca7
 8002c08:	08002ca7 	.word	0x08002ca7
 8002c0c:	08002ca7 	.word	0x08002ca7
 8002c10:	08002ca7 	.word	0x08002ca7
 8002c14:	08002ca7 	.word	0x08002ca7
 8002c18:	08002ca7 	.word	0x08002ca7
 8002c1c:	08002c77 	.word	0x08002c77
 8002c20:	08002ca7 	.word	0x08002ca7
 8002c24:	08002ca7 	.word	0x08002ca7
 8002c28:	08002ca7 	.word	0x08002ca7
 8002c2c:	08002ca7 	.word	0x08002ca7
 8002c30:	08002ca7 	.word	0x08002ca7
 8002c34:	08002ca7 	.word	0x08002ca7
 8002c38:	08002ca7 	.word	0x08002ca7
 8002c3c:	08002ca7 	.word	0x08002ca7
 8002c40:	08002ca7 	.word	0x08002ca7
 8002c44:	08002c6f 	.word	0x08002c6f
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d00c      	beq.n	8002c66 <Tx_Verify+0x496>
 8002c4c:	e02b      	b.n	8002ca6 <Tx_Verify+0x4d6>
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <Tx_Verify+0x648>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	711a      	strb	r2, [r3, #4]
 8002c54:	e02a      	b.n	8002cac <Tx_Verify+0x4dc>
 8002c56:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <Tx_Verify+0x648>)
 8002c58:	2202      	movs	r2, #2
 8002c5a:	711a      	strb	r2, [r3, #4]
 8002c5c:	e026      	b.n	8002cac <Tx_Verify+0x4dc>
 8002c5e:	4b6e      	ldr	r3, [pc, #440]	; (8002e18 <Tx_Verify+0x648>)
 8002c60:	2203      	movs	r2, #3
 8002c62:	711a      	strb	r2, [r3, #4]
 8002c64:	e022      	b.n	8002cac <Tx_Verify+0x4dc>
 8002c66:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <Tx_Verify+0x648>)
 8002c68:	2204      	movs	r2, #4
 8002c6a:	711a      	strb	r2, [r3, #4]
 8002c6c:	e01e      	b.n	8002cac <Tx_Verify+0x4dc>
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <Tx_Verify+0x648>)
 8002c70:	2205      	movs	r2, #5
 8002c72:	711a      	strb	r2, [r3, #4]
 8002c74:	e01a      	b.n	8002cac <Tx_Verify+0x4dc>
 8002c76:	4b68      	ldr	r3, [pc, #416]	; (8002e18 <Tx_Verify+0x648>)
 8002c78:	2206      	movs	r2, #6
 8002c7a:	711a      	strb	r2, [r3, #4]
 8002c7c:	e016      	b.n	8002cac <Tx_Verify+0x4dc>
 8002c7e:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <Tx_Verify+0x648>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	711a      	strb	r2, [r3, #4]
 8002c84:	e012      	b.n	8002cac <Tx_Verify+0x4dc>
 8002c86:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <Tx_Verify+0x648>)
 8002c88:	2208      	movs	r2, #8
 8002c8a:	711a      	strb	r2, [r3, #4]
 8002c8c:	e00e      	b.n	8002cac <Tx_Verify+0x4dc>
 8002c8e:	4b62      	ldr	r3, [pc, #392]	; (8002e18 <Tx_Verify+0x648>)
 8002c90:	2209      	movs	r2, #9
 8002c92:	711a      	strb	r2, [r3, #4]
 8002c94:	e00a      	b.n	8002cac <Tx_Verify+0x4dc>
 8002c96:	4b60      	ldr	r3, [pc, #384]	; (8002e18 <Tx_Verify+0x648>)
 8002c98:	220a      	movs	r2, #10
 8002c9a:	711a      	strb	r2, [r3, #4]
 8002c9c:	e006      	b.n	8002cac <Tx_Verify+0x4dc>
 8002c9e:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <Tx_Verify+0x648>)
 8002ca0:	220b      	movs	r2, #11
 8002ca2:	711a      	strb	r2, [r3, #4]
 8002ca4:	e002      	b.n	8002cac <Tx_Verify+0x4dc>
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <Tx_Verify+0x648>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	711a      	strb	r2, [r3, #4]
 8002cac:	bf00      	nop
	__FREQ_TO_BUFFER(txData[5], perMsg[RTC_MSG]);
 8002cae:	4b5b      	ldr	r3, [pc, #364]	; (8002e1c <Tx_Verify+0x64c>)
 8002cb0:	88db      	ldrh	r3, [r3, #6]
 8002cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb6:	f000 8082 	beq.w	8002dbe <Tx_Verify+0x5ee>
 8002cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cbe:	f300 80af 	bgt.w	8002e20 <Tx_Verify+0x650>
 8002cc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cc6:	d07e      	beq.n	8002dc6 <Tx_Verify+0x5f6>
 8002cc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ccc:	f300 80a8 	bgt.w	8002e20 <Tx_Verify+0x650>
 8002cd0:	2bc8      	cmp	r3, #200	; 0xc8
 8002cd2:	d07c      	beq.n	8002dce <Tx_Verify+0x5fe>
 8002cd4:	2bc8      	cmp	r3, #200	; 0xc8
 8002cd6:	f300 80a3 	bgt.w	8002e20 <Tx_Verify+0x650>
 8002cda:	2b32      	cmp	r3, #50	; 0x32
 8002cdc:	dc6c      	bgt.n	8002db8 <Tx_Verify+0x5e8>
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	f2c0 809e 	blt.w	8002e20 <Tx_Verify+0x650>
 8002ce4:	3b02      	subs	r3, #2
 8002ce6:	2b30      	cmp	r3, #48	; 0x30
 8002ce8:	f200 809a 	bhi.w	8002e20 <Tx_Verify+0x650>
 8002cec:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <Tx_Verify+0x524>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002e0f 	.word	0x08002e0f
 8002cf8:	08002e07 	.word	0x08002e07
 8002cfc:	08002e21 	.word	0x08002e21
 8002d00:	08002dff 	.word	0x08002dff
 8002d04:	08002e21 	.word	0x08002e21
 8002d08:	08002e21 	.word	0x08002e21
 8002d0c:	08002e21 	.word	0x08002e21
 8002d10:	08002e21 	.word	0x08002e21
 8002d14:	08002df7 	.word	0x08002df7
 8002d18:	08002e21 	.word	0x08002e21
 8002d1c:	08002e21 	.word	0x08002e21
 8002d20:	08002e21 	.word	0x08002e21
 8002d24:	08002e21 	.word	0x08002e21
 8002d28:	08002e21 	.word	0x08002e21
 8002d2c:	08002e21 	.word	0x08002e21
 8002d30:	08002e21 	.word	0x08002e21
 8002d34:	08002e21 	.word	0x08002e21
 8002d38:	08002e21 	.word	0x08002e21
 8002d3c:	08002def 	.word	0x08002def
 8002d40:	08002e21 	.word	0x08002e21
 8002d44:	08002e21 	.word	0x08002e21
 8002d48:	08002e21 	.word	0x08002e21
 8002d4c:	08002e21 	.word	0x08002e21
 8002d50:	08002e21 	.word	0x08002e21
 8002d54:	08002e21 	.word	0x08002e21
 8002d58:	08002e21 	.word	0x08002e21
 8002d5c:	08002e21 	.word	0x08002e21
 8002d60:	08002e21 	.word	0x08002e21
 8002d64:	08002e21 	.word	0x08002e21
 8002d68:	08002e21 	.word	0x08002e21
 8002d6c:	08002e21 	.word	0x08002e21
 8002d70:	08002e21 	.word	0x08002e21
 8002d74:	08002e21 	.word	0x08002e21
 8002d78:	08002e21 	.word	0x08002e21
 8002d7c:	08002e21 	.word	0x08002e21
 8002d80:	08002e21 	.word	0x08002e21
 8002d84:	08002e21 	.word	0x08002e21
 8002d88:	08002e21 	.word	0x08002e21
 8002d8c:	08002de7 	.word	0x08002de7
 8002d90:	08002e21 	.word	0x08002e21
 8002d94:	08002e21 	.word	0x08002e21
 8002d98:	08002e21 	.word	0x08002e21
 8002d9c:	08002e21 	.word	0x08002e21
 8002da0:	08002e21 	.word	0x08002e21
 8002da4:	08002e21 	.word	0x08002e21
 8002da8:	08002e21 	.word	0x08002e21
 8002dac:	08002e21 	.word	0x08002e21
 8002db0:	08002e21 	.word	0x08002e21
 8002db4:	08002ddf 	.word	0x08002ddf
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d00c      	beq.n	8002dd6 <Tx_Verify+0x606>
 8002dbc:	e030      	b.n	8002e20 <Tx_Verify+0x650>
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <Tx_Verify+0x648>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	715a      	strb	r2, [r3, #5]
 8002dc4:	e02f      	b.n	8002e26 <Tx_Verify+0x656>
 8002dc6:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <Tx_Verify+0x648>)
 8002dc8:	2202      	movs	r2, #2
 8002dca:	715a      	strb	r2, [r3, #5]
 8002dcc:	e02b      	b.n	8002e26 <Tx_Verify+0x656>
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <Tx_Verify+0x648>)
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	715a      	strb	r2, [r3, #5]
 8002dd4:	e027      	b.n	8002e26 <Tx_Verify+0x656>
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <Tx_Verify+0x648>)
 8002dd8:	2204      	movs	r2, #4
 8002dda:	715a      	strb	r2, [r3, #5]
 8002ddc:	e023      	b.n	8002e26 <Tx_Verify+0x656>
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <Tx_Verify+0x648>)
 8002de0:	2205      	movs	r2, #5
 8002de2:	715a      	strb	r2, [r3, #5]
 8002de4:	e01f      	b.n	8002e26 <Tx_Verify+0x656>
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <Tx_Verify+0x648>)
 8002de8:	2206      	movs	r2, #6
 8002dea:	715a      	strb	r2, [r3, #5]
 8002dec:	e01b      	b.n	8002e26 <Tx_Verify+0x656>
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <Tx_Verify+0x648>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	715a      	strb	r2, [r3, #5]
 8002df4:	e017      	b.n	8002e26 <Tx_Verify+0x656>
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <Tx_Verify+0x648>)
 8002df8:	2208      	movs	r2, #8
 8002dfa:	715a      	strb	r2, [r3, #5]
 8002dfc:	e013      	b.n	8002e26 <Tx_Verify+0x656>
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <Tx_Verify+0x648>)
 8002e00:	2209      	movs	r2, #9
 8002e02:	715a      	strb	r2, [r3, #5]
 8002e04:	e00f      	b.n	8002e26 <Tx_Verify+0x656>
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <Tx_Verify+0x648>)
 8002e08:	220a      	movs	r2, #10
 8002e0a:	715a      	strb	r2, [r3, #5]
 8002e0c:	e00b      	b.n	8002e26 <Tx_Verify+0x656>
 8002e0e:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <Tx_Verify+0x648>)
 8002e10:	220b      	movs	r2, #11
 8002e12:	715a      	strb	r2, [r3, #5]
 8002e14:	e007      	b.n	8002e26 <Tx_Verify+0x656>
 8002e16:	bf00      	nop
 8002e18:	20000588 	.word	0x20000588
 8002e1c:	20003794 	.word	0x20003794
 8002e20:	4bb7      	ldr	r3, [pc, #732]	; (8003100 <Tx_Verify+0x930>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	715a      	strb	r2, [r3, #5]
 8002e26:	bf00      	nop
	__FREQ_TO_BUFFER(txData[6], perMsg[PDM_SAVE]);
 8002e28:	4bb6      	ldr	r3, [pc, #728]	; (8003104 <Tx_Verify+0x934>)
 8002e2a:	89db      	ldrh	r3, [r3, #14]
 8002e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e30:	f000 8081 	beq.w	8002f36 <Tx_Verify+0x766>
 8002e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e38:	f300 80a9 	bgt.w	8002f8e <Tx_Verify+0x7be>
 8002e3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e40:	d07d      	beq.n	8002f3e <Tx_Verify+0x76e>
 8002e42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e46:	f300 80a2 	bgt.w	8002f8e <Tx_Verify+0x7be>
 8002e4a:	2bc8      	cmp	r3, #200	; 0xc8
 8002e4c:	d07b      	beq.n	8002f46 <Tx_Verify+0x776>
 8002e4e:	2bc8      	cmp	r3, #200	; 0xc8
 8002e50:	f300 809d 	bgt.w	8002f8e <Tx_Verify+0x7be>
 8002e54:	2b32      	cmp	r3, #50	; 0x32
 8002e56:	dc6b      	bgt.n	8002f30 <Tx_Verify+0x760>
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	f2c0 8098 	blt.w	8002f8e <Tx_Verify+0x7be>
 8002e5e:	3b02      	subs	r3, #2
 8002e60:	2b30      	cmp	r3, #48	; 0x30
 8002e62:	f200 8094 	bhi.w	8002f8e <Tx_Verify+0x7be>
 8002e66:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <Tx_Verify+0x69c>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002f87 	.word	0x08002f87
 8002e70:	08002f7f 	.word	0x08002f7f
 8002e74:	08002f8f 	.word	0x08002f8f
 8002e78:	08002f77 	.word	0x08002f77
 8002e7c:	08002f8f 	.word	0x08002f8f
 8002e80:	08002f8f 	.word	0x08002f8f
 8002e84:	08002f8f 	.word	0x08002f8f
 8002e88:	08002f8f 	.word	0x08002f8f
 8002e8c:	08002f6f 	.word	0x08002f6f
 8002e90:	08002f8f 	.word	0x08002f8f
 8002e94:	08002f8f 	.word	0x08002f8f
 8002e98:	08002f8f 	.word	0x08002f8f
 8002e9c:	08002f8f 	.word	0x08002f8f
 8002ea0:	08002f8f 	.word	0x08002f8f
 8002ea4:	08002f8f 	.word	0x08002f8f
 8002ea8:	08002f8f 	.word	0x08002f8f
 8002eac:	08002f8f 	.word	0x08002f8f
 8002eb0:	08002f8f 	.word	0x08002f8f
 8002eb4:	08002f67 	.word	0x08002f67
 8002eb8:	08002f8f 	.word	0x08002f8f
 8002ebc:	08002f8f 	.word	0x08002f8f
 8002ec0:	08002f8f 	.word	0x08002f8f
 8002ec4:	08002f8f 	.word	0x08002f8f
 8002ec8:	08002f8f 	.word	0x08002f8f
 8002ecc:	08002f8f 	.word	0x08002f8f
 8002ed0:	08002f8f 	.word	0x08002f8f
 8002ed4:	08002f8f 	.word	0x08002f8f
 8002ed8:	08002f8f 	.word	0x08002f8f
 8002edc:	08002f8f 	.word	0x08002f8f
 8002ee0:	08002f8f 	.word	0x08002f8f
 8002ee4:	08002f8f 	.word	0x08002f8f
 8002ee8:	08002f8f 	.word	0x08002f8f
 8002eec:	08002f8f 	.word	0x08002f8f
 8002ef0:	08002f8f 	.word	0x08002f8f
 8002ef4:	08002f8f 	.word	0x08002f8f
 8002ef8:	08002f8f 	.word	0x08002f8f
 8002efc:	08002f8f 	.word	0x08002f8f
 8002f00:	08002f8f 	.word	0x08002f8f
 8002f04:	08002f5f 	.word	0x08002f5f
 8002f08:	08002f8f 	.word	0x08002f8f
 8002f0c:	08002f8f 	.word	0x08002f8f
 8002f10:	08002f8f 	.word	0x08002f8f
 8002f14:	08002f8f 	.word	0x08002f8f
 8002f18:	08002f8f 	.word	0x08002f8f
 8002f1c:	08002f8f 	.word	0x08002f8f
 8002f20:	08002f8f 	.word	0x08002f8f
 8002f24:	08002f8f 	.word	0x08002f8f
 8002f28:	08002f8f 	.word	0x08002f8f
 8002f2c:	08002f57 	.word	0x08002f57
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	d00c      	beq.n	8002f4e <Tx_Verify+0x77e>
 8002f34:	e02b      	b.n	8002f8e <Tx_Verify+0x7be>
 8002f36:	4b72      	ldr	r3, [pc, #456]	; (8003100 <Tx_Verify+0x930>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	719a      	strb	r2, [r3, #6]
 8002f3c:	e02a      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f3e:	4b70      	ldr	r3, [pc, #448]	; (8003100 <Tx_Verify+0x930>)
 8002f40:	2202      	movs	r2, #2
 8002f42:	719a      	strb	r2, [r3, #6]
 8002f44:	e026      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f46:	4b6e      	ldr	r3, [pc, #440]	; (8003100 <Tx_Verify+0x930>)
 8002f48:	2203      	movs	r2, #3
 8002f4a:	719a      	strb	r2, [r3, #6]
 8002f4c:	e022      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f4e:	4b6c      	ldr	r3, [pc, #432]	; (8003100 <Tx_Verify+0x930>)
 8002f50:	2204      	movs	r2, #4
 8002f52:	719a      	strb	r2, [r3, #6]
 8002f54:	e01e      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f56:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <Tx_Verify+0x930>)
 8002f58:	2205      	movs	r2, #5
 8002f5a:	719a      	strb	r2, [r3, #6]
 8002f5c:	e01a      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f5e:	4b68      	ldr	r3, [pc, #416]	; (8003100 <Tx_Verify+0x930>)
 8002f60:	2206      	movs	r2, #6
 8002f62:	719a      	strb	r2, [r3, #6]
 8002f64:	e016      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f66:	4b66      	ldr	r3, [pc, #408]	; (8003100 <Tx_Verify+0x930>)
 8002f68:	2207      	movs	r2, #7
 8002f6a:	719a      	strb	r2, [r3, #6]
 8002f6c:	e012      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f6e:	4b64      	ldr	r3, [pc, #400]	; (8003100 <Tx_Verify+0x930>)
 8002f70:	2208      	movs	r2, #8
 8002f72:	719a      	strb	r2, [r3, #6]
 8002f74:	e00e      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f76:	4b62      	ldr	r3, [pc, #392]	; (8003100 <Tx_Verify+0x930>)
 8002f78:	2209      	movs	r2, #9
 8002f7a:	719a      	strb	r2, [r3, #6]
 8002f7c:	e00a      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f7e:	4b60      	ldr	r3, [pc, #384]	; (8003100 <Tx_Verify+0x930>)
 8002f80:	220a      	movs	r2, #10
 8002f82:	719a      	strb	r2, [r3, #6]
 8002f84:	e006      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f86:	4b5e      	ldr	r3, [pc, #376]	; (8003100 <Tx_Verify+0x930>)
 8002f88:	220b      	movs	r2, #11
 8002f8a:	719a      	strb	r2, [r3, #6]
 8002f8c:	e002      	b.n	8002f94 <Tx_Verify+0x7c4>
 8002f8e:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <Tx_Verify+0x930>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	719a      	strb	r2, [r3, #6]
 8002f94:	bf00      	nop
	__FREQ_TO_BUFFER(txData[7], perMsg[ECU_SAVE]);
 8002f96:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <Tx_Verify+0x934>)
 8002f98:	899b      	ldrh	r3, [r3, #12]
 8002f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f9e:	f000 8082 	beq.w	80030a6 <Tx_Verify+0x8d6>
 8002fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa6:	f300 80af 	bgt.w	8003108 <Tx_Verify+0x938>
 8002faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fae:	d07e      	beq.n	80030ae <Tx_Verify+0x8de>
 8002fb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fb4:	f300 80a8 	bgt.w	8003108 <Tx_Verify+0x938>
 8002fb8:	2bc8      	cmp	r3, #200	; 0xc8
 8002fba:	d07c      	beq.n	80030b6 <Tx_Verify+0x8e6>
 8002fbc:	2bc8      	cmp	r3, #200	; 0xc8
 8002fbe:	f300 80a3 	bgt.w	8003108 <Tx_Verify+0x938>
 8002fc2:	2b32      	cmp	r3, #50	; 0x32
 8002fc4:	dc6c      	bgt.n	80030a0 <Tx_Verify+0x8d0>
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	f2c0 809e 	blt.w	8003108 <Tx_Verify+0x938>
 8002fcc:	3b02      	subs	r3, #2
 8002fce:	2b30      	cmp	r3, #48	; 0x30
 8002fd0:	f200 809a 	bhi.w	8003108 <Tx_Verify+0x938>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <Tx_Verify+0x80c>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	080030f7 	.word	0x080030f7
 8002fe0:	080030ef 	.word	0x080030ef
 8002fe4:	08003109 	.word	0x08003109
 8002fe8:	080030e7 	.word	0x080030e7
 8002fec:	08003109 	.word	0x08003109
 8002ff0:	08003109 	.word	0x08003109
 8002ff4:	08003109 	.word	0x08003109
 8002ff8:	08003109 	.word	0x08003109
 8002ffc:	080030df 	.word	0x080030df
 8003000:	08003109 	.word	0x08003109
 8003004:	08003109 	.word	0x08003109
 8003008:	08003109 	.word	0x08003109
 800300c:	08003109 	.word	0x08003109
 8003010:	08003109 	.word	0x08003109
 8003014:	08003109 	.word	0x08003109
 8003018:	08003109 	.word	0x08003109
 800301c:	08003109 	.word	0x08003109
 8003020:	08003109 	.word	0x08003109
 8003024:	080030d7 	.word	0x080030d7
 8003028:	08003109 	.word	0x08003109
 800302c:	08003109 	.word	0x08003109
 8003030:	08003109 	.word	0x08003109
 8003034:	08003109 	.word	0x08003109
 8003038:	08003109 	.word	0x08003109
 800303c:	08003109 	.word	0x08003109
 8003040:	08003109 	.word	0x08003109
 8003044:	08003109 	.word	0x08003109
 8003048:	08003109 	.word	0x08003109
 800304c:	08003109 	.word	0x08003109
 8003050:	08003109 	.word	0x08003109
 8003054:	08003109 	.word	0x08003109
 8003058:	08003109 	.word	0x08003109
 800305c:	08003109 	.word	0x08003109
 8003060:	08003109 	.word	0x08003109
 8003064:	08003109 	.word	0x08003109
 8003068:	08003109 	.word	0x08003109
 800306c:	08003109 	.word	0x08003109
 8003070:	08003109 	.word	0x08003109
 8003074:	080030cf 	.word	0x080030cf
 8003078:	08003109 	.word	0x08003109
 800307c:	08003109 	.word	0x08003109
 8003080:	08003109 	.word	0x08003109
 8003084:	08003109 	.word	0x08003109
 8003088:	08003109 	.word	0x08003109
 800308c:	08003109 	.word	0x08003109
 8003090:	08003109 	.word	0x08003109
 8003094:	08003109 	.word	0x08003109
 8003098:	08003109 	.word	0x08003109
 800309c:	080030c7 	.word	0x080030c7
 80030a0:	2b64      	cmp	r3, #100	; 0x64
 80030a2:	d00c      	beq.n	80030be <Tx_Verify+0x8ee>
 80030a4:	e030      	b.n	8003108 <Tx_Verify+0x938>
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <Tx_Verify+0x930>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	71da      	strb	r2, [r3, #7]
 80030ac:	e02f      	b.n	800310e <Tx_Verify+0x93e>
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <Tx_Verify+0x930>)
 80030b0:	2202      	movs	r2, #2
 80030b2:	71da      	strb	r2, [r3, #7]
 80030b4:	e02b      	b.n	800310e <Tx_Verify+0x93e>
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <Tx_Verify+0x930>)
 80030b8:	2203      	movs	r2, #3
 80030ba:	71da      	strb	r2, [r3, #7]
 80030bc:	e027      	b.n	800310e <Tx_Verify+0x93e>
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <Tx_Verify+0x930>)
 80030c0:	2204      	movs	r2, #4
 80030c2:	71da      	strb	r2, [r3, #7]
 80030c4:	e023      	b.n	800310e <Tx_Verify+0x93e>
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <Tx_Verify+0x930>)
 80030c8:	2205      	movs	r2, #5
 80030ca:	71da      	strb	r2, [r3, #7]
 80030cc:	e01f      	b.n	800310e <Tx_Verify+0x93e>
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <Tx_Verify+0x930>)
 80030d0:	2206      	movs	r2, #6
 80030d2:	71da      	strb	r2, [r3, #7]
 80030d4:	e01b      	b.n	800310e <Tx_Verify+0x93e>
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <Tx_Verify+0x930>)
 80030d8:	2207      	movs	r2, #7
 80030da:	71da      	strb	r2, [r3, #7]
 80030dc:	e017      	b.n	800310e <Tx_Verify+0x93e>
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <Tx_Verify+0x930>)
 80030e0:	2208      	movs	r2, #8
 80030e2:	71da      	strb	r2, [r3, #7]
 80030e4:	e013      	b.n	800310e <Tx_Verify+0x93e>
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <Tx_Verify+0x930>)
 80030e8:	2209      	movs	r2, #9
 80030ea:	71da      	strb	r2, [r3, #7]
 80030ec:	e00f      	b.n	800310e <Tx_Verify+0x93e>
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <Tx_Verify+0x930>)
 80030f0:	220a      	movs	r2, #10
 80030f2:	71da      	strb	r2, [r3, #7]
 80030f4:	e00b      	b.n	800310e <Tx_Verify+0x93e>
 80030f6:	4b02      	ldr	r3, [pc, #8]	; (8003100 <Tx_Verify+0x930>)
 80030f8:	220b      	movs	r2, #11
 80030fa:	71da      	strb	r2, [r3, #7]
 80030fc:	e007      	b.n	800310e <Tx_Verify+0x93e>
 80030fe:	bf00      	nop
 8003100:	20000588 	.word	0x20000588
 8003104:	20003794 	.word	0x20003794
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <Tx_Verify+0x9d8>)
 800310a:	2200      	movs	r2, #0
 800310c:	71da      	strb	r2, [r3, #7]
 800310e:	bf00      	nop

	if(flagDatalogger == DL_SAVE)
 8003110:	4b26      	ldr	r3, [pc, #152]	; (80031ac <Tx_Verify+0x9dc>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10a      	bne.n	800312e <Tx_Verify+0x95e>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <Tx_Verify+0x9e0>)
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <Tx_Verify+0x9e0>)
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	b2d9      	uxtb	r1, r3
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <Tx_Verify+0x9e4>)
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <Tx_Verify+0x9e8>)
 8003128:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <Tx_Verify+0x9d8>)
 800312a:	f002 fee1 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	if((accCAN[VERIFY_MSG] >= perCAN[VERIFY_MSG]) && (perCAN[VERIFY_MSG] != MSG_DISABLED))
 800312e:	4b23      	ldr	r3, [pc, #140]	; (80031bc <Tx_Verify+0x9ec>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <Tx_Verify+0x9f0>)
 8003134:	8912      	ldrh	r2, [r2, #8]
 8003136:	4293      	cmp	r3, r2
 8003138:	d331      	bcc.n	800319e <Tx_Verify+0x9ce>
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <Tx_Verify+0x9f0>)
 800313c:	891b      	ldrh	r3, [r3, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d02d      	beq.n	800319e <Tx_Verify+0x9ce>
	{
		accCAN[VERIFY_MSG] -= perCAN[VERIFY_MSG];
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <Tx_Verify+0x9ec>)
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <Tx_Verify+0x9f0>)
 8003148:	8912      	ldrh	r2, [r2, #8]
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <Tx_Verify+0x9ec>)
 800314e:	6113      	str	r3, [r2, #16]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <Tx_Verify+0x9f4>)
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <Tx_Verify+0x9d8>)
 8003154:	4916      	ldr	r1, [pc, #88]	; (80031b0 <Tx_Verify+0x9e0>)
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f004 fc12 	bl	8007980 <HAL_CAN_AddTxMessage>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <Tx_Verify+0x9a2>
			verifyCAN |= 1;
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <Tx_Verify+0x9f8>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	b2da      	uxtb	r2, r3
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <Tx_Verify+0x9f8>)
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e006      	b.n	8003180 <Tx_Verify+0x9b0>
		else
			verifyCAN &= 0x02;
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <Tx_Verify+0x9f8>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	b2da      	uxtb	r2, r3
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <Tx_Verify+0x9f8>)
 800317e:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	e002      	b.n	800318c <Tx_Verify+0x9bc>
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	3301      	adds	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f004 fcd2 	bl	8007b36 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003192:	4603      	mov	r3, r0
 8003194:	2b03      	cmp	r3, #3
 8003196:	d002      	beq.n	800319e <Tx_Verify+0x9ce>
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d9f3      	bls.n	8003186 <Tx_Verify+0x9b6>
	}
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000588 	.word	0x20000588
 80031ac:	2000376a 	.word	0x2000376a
 80031b0:	200005b0 	.word	0x200005b0
 80031b4:	20002700 	.word	0x20002700
 80031b8:	20001698 	.word	0x20001698
 80031bc:	200037ac 	.word	0x200037ac
 80031c0:	20003788 	.word	0x20003788
 80031c4:	20000590 	.word	0x20000590
 80031c8:	200037e8 	.word	0x200037e8

080031cc <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	6078      	str	r0, [r7, #4]
	uint16_t buffer[3];

	txHeader.IDE = CAN_ID_STD;
 80031d4:	4b48      	ldr	r3, [pc, #288]	; (80032f8 <Tx_Beacon+0x12c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80031da:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <Tx_Beacon+0x12c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80031e0:	4b45      	ldr	r3, [pc, #276]	; (80032f8 <Tx_Beacon+0x12c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = CAN_DAQ_FILTER | BEACON_ID;
 80031e6:	4b44      	ldr	r3, [pc, #272]	; (80032f8 <Tx_Beacon+0x12c>)
 80031e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031ec:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 5;
 80031ee:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <Tx_Beacon+0x12c>)
 80031f0:	2205      	movs	r2, #5
 80031f2:	611a      	str	r2, [r3, #16]

	buffer[0] = accLap / 60000;
 80031f4:	4b41      	ldr	r3, [pc, #260]	; (80032fc <Tx_Beacon+0x130>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a41      	ldr	r2, [pc, #260]	; (8003300 <Tx_Beacon+0x134>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0b9b      	lsrs	r3, r3, #14
 8003200:	b29b      	uxth	r3, r3
 8003202:	813b      	strh	r3, [r7, #8]
	buffer[1] = accLap / 1000;
 8003204:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <Tx_Beacon+0x130>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a3e      	ldr	r2, [pc, #248]	; (8003304 <Tx_Beacon+0x138>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	b29b      	uxth	r3, r3
 8003212:	817b      	strh	r3, [r7, #10]
	buffer[2] = accLap % 1000;
 8003214:	4b39      	ldr	r3, [pc, #228]	; (80032fc <Tx_Beacon+0x130>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <Tx_Beacon+0x138>)
 800321a:	fba3 1302 	umull	r1, r3, r3, r2
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	b29b      	uxth	r3, r3
 800322c:	81bb      	strh	r3, [r7, #12]

	accLap = 0;
 800322e:	4b33      	ldr	r3, [pc, #204]	; (80032fc <Tx_Beacon+0x130>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

	txData[0] = lapNumber;
 8003234:	4b34      	ldr	r3, [pc, #208]	; (8003308 <Tx_Beacon+0x13c>)
 8003236:	781a      	ldrb	r2, [r3, #0]
 8003238:	4b34      	ldr	r3, [pc, #208]	; (800330c <Tx_Beacon+0x140>)
 800323a:	701a      	strb	r2, [r3, #0]
	txData[1] = buffer[0] & 0xff;
 800323c:	893b      	ldrh	r3, [r7, #8]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <Tx_Beacon+0x140>)
 8003242:	705a      	strb	r2, [r3, #1]
	txData[2] = buffer[1] & 0xff;
 8003244:	897b      	ldrh	r3, [r7, #10]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b30      	ldr	r3, [pc, #192]	; (800330c <Tx_Beacon+0x140>)
 800324a:	709a      	strb	r2, [r3, #2]
	txData[3] = buffer[2] >> 8;
 800324c:	89bb      	ldrh	r3, [r7, #12]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	b29b      	uxth	r3, r3
 8003252:	b2da      	uxtb	r2, r3
 8003254:	4b2d      	ldr	r3, [pc, #180]	; (800330c <Tx_Beacon+0x140>)
 8003256:	70da      	strb	r2, [r3, #3]
	txData[4] = buffer[2] & 0xff;
 8003258:	89bb      	ldrh	r3, [r7, #12]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <Tx_Beacon+0x140>)
 800325e:	711a      	strb	r2, [r3, #4]

	if(flagDatalogger == DL_SAVE)
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <Tx_Beacon+0x144>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d10a      	bne.n	800327e <Tx_Beacon+0xb2>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8003268:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <Tx_Beacon+0x12c>)
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <Tx_Beacon+0x12c>)
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	b2d9      	uxtb	r1, r3
 8003272:	4b28      	ldr	r3, [pc, #160]	; (8003314 <Tx_Beacon+0x148>)
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	4b28      	ldr	r3, [pc, #160]	; (8003318 <Tx_Beacon+0x14c>)
 8003278:	4a24      	ldr	r2, [pc, #144]	; (800330c <Tx_Beacon+0x140>)
 800327a:	f002 fe39 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	if((accCAN[BEACON_MSG] >= perCAN[BEACON_MSG]) && (perCAN[BEACON_MSG] != MSG_DISABLED))
 800327e:	4b27      	ldr	r3, [pc, #156]	; (800331c <Tx_Beacon+0x150>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4a27      	ldr	r2, [pc, #156]	; (8003320 <Tx_Beacon+0x154>)
 8003284:	8952      	ldrh	r2, [r2, #10]
 8003286:	4293      	cmp	r3, r2
 8003288:	d331      	bcc.n	80032ee <Tx_Beacon+0x122>
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <Tx_Beacon+0x154>)
 800328c:	895b      	ldrh	r3, [r3, #10]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d02d      	beq.n	80032ee <Tx_Beacon+0x122>
	{
		accCAN[BEACON_MSG] -= perCAN[BEACON_MSG];
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <Tx_Beacon+0x150>)
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <Tx_Beacon+0x154>)
 8003298:	8952      	ldrh	r2, [r2, #10]
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <Tx_Beacon+0x150>)
 800329e:	6153      	str	r3, [r2, #20]
		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80032a0:	4b20      	ldr	r3, [pc, #128]	; (8003324 <Tx_Beacon+0x158>)
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <Tx_Beacon+0x140>)
 80032a4:	4914      	ldr	r1, [pc, #80]	; (80032f8 <Tx_Beacon+0x12c>)
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f004 fb6a 	bl	8007980 <HAL_CAN_AddTxMessage>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d107      	bne.n	80032c2 <Tx_Beacon+0xf6>
			verifyCAN |= 1;
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <Tx_Beacon+0x15c>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <Tx_Beacon+0x15c>)
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e006      	b.n	80032d0 <Tx_Beacon+0x104>
		else
			verifyCAN &= 0x02;
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <Tx_Beacon+0x15c>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <Tx_Beacon+0x15c>)
 80032ce:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e002      	b.n	80032dc <Tx_Beacon+0x110>
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	3301      	adds	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f004 fc2a 	bl	8007b36 <HAL_CAN_GetTxMailboxesFreeLevel>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d002      	beq.n	80032ee <Tx_Beacon+0x122>
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d9f3      	bls.n	80032d6 <Tx_Beacon+0x10a>
	}
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200005b0 	.word	0x200005b0
 80032fc:	200037e4 	.word	0x200037e4
 8003300:	45e7b273 	.word	0x45e7b273
 8003304:	10624dd3 	.word	0x10624dd3
 8003308:	200005c8 	.word	0x200005c8
 800330c:	20000588 	.word	0x20000588
 8003310:	2000376a 	.word	0x2000376a
 8003314:	20002700 	.word	0x20002700
 8003318:	20001698 	.word	0x20001698
 800331c:	200037ac 	.word	0x200037ac
 8003320:	20003788 	.word	0x20003788
 8003324:	20000590 	.word	0x20000590
 8003328:	200037e8 	.word	0x200037e8

0800332c <Save_PDM>:

static void Save_PDM()
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
	uint8_t id = 0, length = 0, buffer[8];
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
 8003336:	2300      	movs	r3, #0
 8003338:	73bb      	strb	r3, [r7, #14]

	if(flagDatalogger != DL_SAVE)
 800333a:	4b8f      	ldr	r3, [pc, #572]	; (8003578 <Save_PDM+0x24c>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	f040 8115 	bne.w	800356e <Save_PDM+0x242>
		return;

	id = PDM_FIRST_ID;
 8003344:	230a      	movs	r3, #10
 8003346:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003348:	2308      	movs	r3, #8
 800334a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[0] << 8;
 800334c:	2300      	movs	r3, #0
 800334e:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[0] & 0xff;
 8003350:	4b8a      	ldr	r3, [pc, #552]	; (800357c <Save_PDM+0x250>)
 8003352:	889b      	ldrh	r3, [r3, #4]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[1] << 8;
 8003358:	2300      	movs	r3, #0
 800335a:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[1] & 0xff;
 800335c:	4b87      	ldr	r3, [pc, #540]	; (800357c <Save_PDM+0x250>)
 800335e:	88db      	ldrh	r3, [r3, #6]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[2] << 8;
 8003364:	2300      	movs	r3, #0
 8003366:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[2] & 0xff;
 8003368:	4b84      	ldr	r3, [pc, #528]	; (800357c <Save_PDM+0x250>)
 800336a:	891b      	ldrh	r3, [r3, #8]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[3] << 8;
 8003370:	2300      	movs	r3, #0
 8003372:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[3] & 0xff;
 8003374:	4b81      	ldr	r3, [pc, #516]	; (800357c <Save_PDM+0x250>)
 8003376:	895b      	ldrh	r3, [r3, #10]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 800337c:	7bf8      	ldrb	r0, [r7, #15]
 800337e:	1d3a      	adds	r2, r7, #4
 8003380:	7bb9      	ldrb	r1, [r7, #14]
 8003382:	4b7f      	ldr	r3, [pc, #508]	; (8003580 <Save_PDM+0x254>)
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	4b7f      	ldr	r3, [pc, #508]	; (8003584 <Save_PDM+0x258>)
 8003388:	f002 fdb2 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 800338c:	230b      	movs	r3, #11
 800338e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003390:	2308      	movs	r3, #8
 8003392:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[4] << 8;
 8003394:	2300      	movs	r3, #0
 8003396:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[4] & 0xff;
 8003398:	4b78      	ldr	r3, [pc, #480]	; (800357c <Save_PDM+0x250>)
 800339a:	899b      	ldrh	r3, [r3, #12]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[5] << 8;
 80033a0:	2300      	movs	r3, #0
 80033a2:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[5] & 0xff;
 80033a4:	4b75      	ldr	r3, [pc, #468]	; (800357c <Save_PDM+0x250>)
 80033a6:	89db      	ldrh	r3, [r3, #14]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[6] << 8;
 80033ac:	2300      	movs	r3, #0
 80033ae:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[6] & 0xff;
 80033b0:	4b72      	ldr	r3, [pc, #456]	; (800357c <Save_PDM+0x250>)
 80033b2:	8a1b      	ldrh	r3, [r3, #16]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[7] << 8;
 80033b8:	2300      	movs	r3, #0
 80033ba:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[7] & 0xff;
 80033bc:	4b6f      	ldr	r3, [pc, #444]	; (800357c <Save_PDM+0x250>)
 80033be:	8a5b      	ldrh	r3, [r3, #18]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80033c4:	7bf8      	ldrb	r0, [r7, #15]
 80033c6:	1d3a      	adds	r2, r7, #4
 80033c8:	7bb9      	ldrb	r1, [r7, #14]
 80033ca:	4b6d      	ldr	r3, [pc, #436]	; (8003580 <Save_PDM+0x254>)
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <Save_PDM+0x258>)
 80033d0:	f002 fd8e 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 80033d4:	230c      	movs	r3, #12
 80033d6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80033d8:	2308      	movs	r3, #8
 80033da:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[8] << 8;
 80033dc:	2300      	movs	r3, #0
 80033de:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[8] & 0xff;
 80033e0:	4b66      	ldr	r3, [pc, #408]	; (800357c <Save_PDM+0x250>)
 80033e2:	8a9b      	ldrh	r3, [r3, #20]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[9] << 8;
 80033e8:	2300      	movs	r3, #0
 80033ea:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[9] & 0xff;
 80033ec:	4b63      	ldr	r3, [pc, #396]	; (800357c <Save_PDM+0x250>)
 80033ee:	8adb      	ldrh	r3, [r3, #22]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[10] << 8;
 80033f4:	2300      	movs	r3, #0
 80033f6:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[10] & 0xff;
 80033f8:	4b60      	ldr	r3, [pc, #384]	; (800357c <Save_PDM+0x250>)
 80033fa:	8b1b      	ldrh	r3, [r3, #24]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[11] << 8;
 8003400:	2300      	movs	r3, #0
 8003402:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[11] & 0xff;
 8003404:	4b5d      	ldr	r3, [pc, #372]	; (800357c <Save_PDM+0x250>)
 8003406:	8b5b      	ldrh	r3, [r3, #26]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 800340c:	7bf8      	ldrb	r0, [r7, #15]
 800340e:	1d3a      	adds	r2, r7, #4
 8003410:	7bb9      	ldrb	r1, [r7, #14]
 8003412:	4b5b      	ldr	r3, [pc, #364]	; (8003580 <Save_PDM+0x254>)
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	4b5b      	ldr	r3, [pc, #364]	; (8003584 <Save_PDM+0x258>)
 8003418:	f002 fd6a 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 800341c:	230d      	movs	r3, #13
 800341e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003420:	2308      	movs	r3, #8
 8003422:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[12] << 8;
 8003424:	2300      	movs	r3, #0
 8003426:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[12] & 0xff;
 8003428:	4b54      	ldr	r3, [pc, #336]	; (800357c <Save_PDM+0x250>)
 800342a:	8b9b      	ldrh	r3, [r3, #28]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[13] << 8;
 8003430:	2300      	movs	r3, #0
 8003432:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[13] & 0xff;
 8003434:	4b51      	ldr	r3, [pc, #324]	; (800357c <Save_PDM+0x250>)
 8003436:	8bdb      	ldrh	r3, [r3, #30]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[14] << 8;
 800343c:	2300      	movs	r3, #0
 800343e:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[14] & 0xff;
 8003440:	4b4e      	ldr	r3, [pc, #312]	; (800357c <Save_PDM+0x250>)
 8003442:	8c1b      	ldrh	r3, [r3, #32]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[15] << 8;
 8003448:	2300      	movs	r3, #0
 800344a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[15] & 0xff;
 800344c:	4b4b      	ldr	r3, [pc, #300]	; (800357c <Save_PDM+0x250>)
 800344e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003450:	b2db      	uxtb	r3, r3
 8003452:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003454:	7bf8      	ldrb	r0, [r7, #15]
 8003456:	1d3a      	adds	r2, r7, #4
 8003458:	7bb9      	ldrb	r1, [r7, #14]
 800345a:	4b49      	ldr	r3, [pc, #292]	; (8003580 <Save_PDM+0x254>)
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	4b49      	ldr	r3, [pc, #292]	; (8003584 <Save_PDM+0x258>)
 8003460:	f002 fd46 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 8003464:	230e      	movs	r3, #14
 8003466:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003468:	2308      	movs	r3, #8
 800346a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Tempetature_Buffer[0] << 8;
 800346c:	2300      	movs	r3, #0
 800346e:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Tempetature_Buffer[0] & 0xff;
 8003470:	4b42      	ldr	r3, [pc, #264]	; (800357c <Save_PDM+0x250>)
 8003472:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003474:	b2db      	uxtb	r3, r3
 8003476:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Tempetature_Buffer[1] << 8;
 8003478:	2300      	movs	r3, #0
 800347a:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Tempetature_Buffer[1] & 0xff;
 800347c:	4b3f      	ldr	r3, [pc, #252]	; (800357c <Save_PDM+0x250>)
 800347e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003480:	b2db      	uxtb	r3, r3
 8003482:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Tempetature_Buffer[2] << 8;
 8003484:	2300      	movs	r3, #0
 8003486:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Tempetature_Buffer[2] & 0xff;
 8003488:	4b3c      	ldr	r3, [pc, #240]	; (800357c <Save_PDM+0x250>)
 800348a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800348c:	b2db      	uxtb	r3, r3
 800348e:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Tempetature_Buffer[3] << 8;
 8003490:	2300      	movs	r3, #0
 8003492:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Tempetature_Buffer[3] & 0xff;
 8003494:	4b39      	ldr	r3, [pc, #228]	; (800357c <Save_PDM+0x250>)
 8003496:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003498:	b2db      	uxtb	r3, r3
 800349a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 800349c:	7bf8      	ldrb	r0, [r7, #15]
 800349e:	1d3a      	adds	r2, r7, #4
 80034a0:	7bb9      	ldrb	r1, [r7, #14]
 80034a2:	4b37      	ldr	r3, [pc, #220]	; (8003580 <Save_PDM+0x254>)
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	4b37      	ldr	r3, [pc, #220]	; (8003584 <Save_PDM+0x258>)
 80034a8:	f002 fd22 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 80034ac:	230f      	movs	r3, #15
 80034ae:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80034b0:	2308      	movs	r3, #8
 80034b2:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Tempetature_Buffer[4] << 8;
 80034b4:	2300      	movs	r3, #0
 80034b6:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Tempetature_Buffer[4] & 0xff;
 80034b8:	4b30      	ldr	r3, [pc, #192]	; (800357c <Save_PDM+0x250>)
 80034ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Tempetature_Buffer[5] << 8;
 80034c0:	2300      	movs	r3, #0
 80034c2:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Tempetature_Buffer[5] & 0xff;
 80034c4:	4b2d      	ldr	r3, [pc, #180]	; (800357c <Save_PDM+0x250>)
 80034c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Tempetature_Buffer[6] << 8;
 80034cc:	2300      	movs	r3, #0
 80034ce:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Tempetature_Buffer[6] & 0xff;
 80034d0:	4b2a      	ldr	r3, [pc, #168]	; (800357c <Save_PDM+0x250>)
 80034d2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Tempetature_Buffer[7] << 8;
 80034d8:	2300      	movs	r3, #0
 80034da:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Tempetature_Buffer[7] & 0xff;
 80034dc:	4b27      	ldr	r3, [pc, #156]	; (800357c <Save_PDM+0x250>)
 80034de:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80034e4:	7bf8      	ldrb	r0, [r7, #15]
 80034e6:	1d3a      	adds	r2, r7, #4
 80034e8:	7bb9      	ldrb	r1, [r7, #14]
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <Save_PDM+0x254>)
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <Save_PDM+0x258>)
 80034f0:	f002 fcfe 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 80034f4:	2310      	movs	r3, #16
 80034f6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80034f8:	2308      	movs	r3, #8
 80034fa:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Duty_Cycle_Buffer[0] << 8;
 80034fc:	2300      	movs	r3, #0
 80034fe:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Duty_Cycle_Buffer[0] & 0xff;
 8003500:	4b1e      	ldr	r3, [pc, #120]	; (800357c <Save_PDM+0x250>)
 8003502:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003504:	b2db      	uxtb	r3, r3
 8003506:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Duty_Cycle_Buffer[1] << 8;
 8003508:	2300      	movs	r3, #0
 800350a:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Duty_Cycle_Buffer[1] & 0xff;
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <Save_PDM+0x250>)
 800350e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003510:	b2db      	uxtb	r3, r3
 8003512:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Duty_Cycle_Buffer[2] << 8;
 8003514:	2300      	movs	r3, #0
 8003516:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Duty_Cycle_Buffer[2] & 0xff;
 8003518:	4b18      	ldr	r3, [pc, #96]	; (800357c <Save_PDM+0x250>)
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	b2db      	uxtb	r3, r3
 800351e:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Duty_Cycle_Buffer[3] << 8;
 8003520:	2300      	movs	r3, #0
 8003522:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Duty_Cycle_Buffer[3] & 0xff;
 8003524:	4b15      	ldr	r3, [pc, #84]	; (800357c <Save_PDM+0x250>)
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b2db      	uxtb	r3, r3
 800352a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 800352c:	7bf8      	ldrb	r0, [r7, #15]
 800352e:	1d3a      	adds	r2, r7, #4
 8003530:	7bb9      	ldrb	r1, [r7, #14]
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <Save_PDM+0x254>)
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	4b13      	ldr	r3, [pc, #76]	; (8003584 <Save_PDM+0x258>)
 8003538:	f002 fcda 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 800353c:	2311      	movs	r3, #17
 800353e:	73fb      	strb	r3, [r7, #15]
	length = 4;
 8003540:	2304      	movs	r3, #4
 8003542:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Input_Voltage << 8;
 8003544:	2300      	movs	r3, #0
 8003546:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Input_Voltage & 0xff;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <Save_PDM+0x250>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Output_Verify << 8;
 8003550:	2300      	movs	r3, #0
 8003552:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Output_Verify & 0xff;
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <Save_PDM+0x250>)
 8003556:	885b      	ldrh	r3, [r3, #2]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	71fb      	strb	r3, [r7, #7]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 800355c:	7bf8      	ldrb	r0, [r7, #15]
 800355e:	1d3a      	adds	r2, r7, #4
 8003560:	7bb9      	ldrb	r1, [r7, #14]
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <Save_PDM+0x254>)
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <Save_PDM+0x258>)
 8003568:	f002 fcc2 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>
 800356c:	e000      	b.n	8003570 <Save_PDM+0x244>
		return;
 800356e:	bf00      	nop
}
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2000376a 	.word	0x2000376a
 800357c:	20000650 	.word	0x20000650
 8003580:	20002700 	.word	0x20002700
 8003584:	20001698 	.word	0x20001698

08003588 <Save_ECU>:

static void Save_ECU()
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af02      	add	r7, sp, #8
	uint8_t id = 0, length = 0, buffer[8];
 800358e:	2300      	movs	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]
 8003592:	2300      	movs	r3, #0
 8003594:	73bb      	strb	r3, [r7, #14]

	if(flagDatalogger != DL_SAVE)
 8003596:	4b7a      	ldr	r3, [pc, #488]	; (8003780 <Save_ECU+0x1f8>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	f040 80eb 	bne.w	8003776 <Save_ECU+0x1ee>
		return;

	id = ECU_FIRST_ID;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80035a4:	2308      	movs	r3, #8
 80035a6:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.rpm >> 8;
 80035a8:	4b76      	ldr	r3, [pc, #472]	; (8003784 <Save_ECU+0x1fc>)
 80035aa:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80035ae:	121b      	asrs	r3, r3, #8
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.rpm & 0xff;
 80035b6:	4b73      	ldr	r3, [pc, #460]	; (8003784 <Save_ECU+0x1fc>)
 80035b8:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.tps >> 8;
 80035c0:	4b70      	ldr	r3, [pc, #448]	; (8003784 <Save_ECU+0x1fc>)
 80035c2:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80035c6:	121b      	asrs	r3, r3, #8
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.tps & 0xff;
 80035ce:	4b6d      	ldr	r3, [pc, #436]	; (8003784 <Save_ECU+0x1fc>)
 80035d0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.iat >> 8;
 80035d8:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <Save_ECU+0x1fc>)
 80035da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80035de:	121b      	asrs	r3, r3, #8
 80035e0:	b21b      	sxth	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.iat & 0xff;
 80035e6:	4b67      	ldr	r3, [pc, #412]	; (8003784 <Save_ECU+0x1fc>)
 80035e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.ect >> 8;
 80035f0:	4b64      	ldr	r3, [pc, #400]	; (8003784 <Save_ECU+0x1fc>)
 80035f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80035f6:	121b      	asrs	r3, r3, #8
 80035f8:	b21b      	sxth	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.ect & 0xff;
 80035fe:	4b61      	ldr	r3, [pc, #388]	; (8003784 <Save_ECU+0x1fc>)
 8003600:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8003604:	b2db      	uxtb	r3, r3
 8003606:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003608:	7bf8      	ldrb	r0, [r7, #15]
 800360a:	1d3a      	adds	r2, r7, #4
 800360c:	7bb9      	ldrb	r1, [r7, #14]
 800360e:	4b5e      	ldr	r3, [pc, #376]	; (8003788 <Save_ECU+0x200>)
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	4b5e      	ldr	r3, [pc, #376]	; (800378c <Save_ECU+0x204>)
 8003614:	f002 fc6c 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 8003618:	2302      	movs	r3, #2
 800361a:	73fb      	strb	r3, [r7, #15]
	length = 8;
 800361c:	2308      	movs	r3, #8
 800361e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.map >> 8;
 8003620:	4b58      	ldr	r3, [pc, #352]	; (8003784 <Save_ECU+0x1fc>)
 8003622:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003626:	121b      	asrs	r3, r3, #8
 8003628:	b21b      	sxth	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.map & 0xff;
 800362e:	4b55      	ldr	r3, [pc, #340]	; (8003784 <Save_ECU+0x1fc>)
 8003630:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003634:	b2db      	uxtb	r3, r3
 8003636:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.fuel_pressure >> 8;
 8003638:	4b52      	ldr	r3, [pc, #328]	; (8003784 <Save_ECU+0x1fc>)
 800363a:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800363e:	121b      	asrs	r3, r3, #8
 8003640:	b21b      	sxth	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.fuel_pressure & 0xff;
 8003646:	4b4f      	ldr	r3, [pc, #316]	; (8003784 <Save_ECU+0x1fc>)
 8003648:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800364c:	b2db      	uxtb	r3, r3
 800364e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.oil_pressure >> 8;
 8003650:	4b4c      	ldr	r3, [pc, #304]	; (8003784 <Save_ECU+0x1fc>)
 8003652:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8003656:	121b      	asrs	r3, r3, #8
 8003658:	b21b      	sxth	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.oil_pressure & 0xff;
 800365e:	4b49      	ldr	r3, [pc, #292]	; (8003784 <Save_ECU+0x1fc>)
 8003660:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8003664:	b2db      	uxtb	r3, r3
 8003666:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.coolant_pressure >> 8;
 8003668:	4b46      	ldr	r3, [pc, #280]	; (8003784 <Save_ECU+0x1fc>)
 800366a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800366e:	121b      	asrs	r3, r3, #8
 8003670:	b21b      	sxth	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.coolant_pressure & 0xff;
 8003676:	4b43      	ldr	r3, [pc, #268]	; (8003784 <Save_ECU+0x1fc>)
 8003678:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800367c:	b2db      	uxtb	r3, r3
 800367e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003680:	7bf8      	ldrb	r0, [r7, #15]
 8003682:	1d3a      	adds	r2, r7, #4
 8003684:	7bb9      	ldrb	r1, [r7, #14]
 8003686:	4b40      	ldr	r3, [pc, #256]	; (8003788 <Save_ECU+0x200>)
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	4b40      	ldr	r3, [pc, #256]	; (800378c <Save_ECU+0x204>)
 800368c:	f002 fc30 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 8003690:	2303      	movs	r3, #3
 8003692:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003694:	2308      	movs	r3, #8
 8003696:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.lambda >> 8;
 8003698:	4b3a      	ldr	r3, [pc, #232]	; (8003784 <Save_ECU+0x1fc>)
 800369a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800369e:	121b      	asrs	r3, r3, #8
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.lambda & 0xff;
 80036a6:	4b37      	ldr	r3, [pc, #220]	; (8003784 <Save_ECU+0x1fc>)
 80036a8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.oil_temperature >> 8;
 80036b0:	4b34      	ldr	r3, [pc, #208]	; (8003784 <Save_ECU+0x1fc>)
 80036b2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80036b6:	121b      	asrs	r3, r3, #8
 80036b8:	b21b      	sxth	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.oil_temperature & 0xff;
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <Save_ECU+0x1fc>)
 80036c0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.wheel_speed_fl;
 80036c8:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <Save_ECU+0x1fc>)
 80036ca:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.wheel_speed_fr;
 80036d2:	4b2c      	ldr	r3, [pc, #176]	; (8003784 <Save_ECU+0x1fc>)
 80036d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.wheel_speed_rl;
 80036dc:	4b29      	ldr	r3, [pc, #164]	; (8003784 <Save_ECU+0x1fc>)
 80036de:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.wheel_speed_rr;
 80036e6:	4b27      	ldr	r3, [pc, #156]	; (8003784 <Save_ECU+0x1fc>)
 80036e8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80036f0:	7bf8      	ldrb	r0, [r7, #15]
 80036f2:	1d3a      	adds	r2, r7, #4
 80036f4:	7bb9      	ldrb	r1, [r7, #14]
 80036f6:	4b24      	ldr	r3, [pc, #144]	; (8003788 <Save_ECU+0x200>)
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <Save_ECU+0x204>)
 80036fc:	f002 fbf8 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 8003700:	2304      	movs	r3, #4
 8003702:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003704:	2308      	movs	r3, #8
 8003706:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.battery_voltage >> 8;
 8003708:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <Save_ECU+0x1fc>)
 800370a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800370e:	121b      	asrs	r3, r3, #8
 8003710:	b21b      	sxth	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.battery_voltage & 0xff;
 8003716:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <Save_ECU+0x1fc>)
 8003718:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.total_fuel_flow >> 8;
 8003720:	4b18      	ldr	r3, [pc, #96]	; (8003784 <Save_ECU+0x1fc>)
 8003722:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003726:	121b      	asrs	r3, r3, #8
 8003728:	b21b      	sxth	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.total_fuel_flow & 0xff;
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <Save_ECU+0x1fc>)
 8003730:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.gear & 0xff;
 8003738:	4b12      	ldr	r3, [pc, #72]	; (8003784 <Save_ECU+0x1fc>)
 800373a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800373e:	b2db      	uxtb	r3, r3
 8003740:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.electro_fan & 0xff;
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <Save_ECU+0x1fc>)
 8003744:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.injection_bank_a_time >> 8;
 800374c:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <Save_ECU+0x1fc>)
 800374e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003752:	121b      	asrs	r3, r3, #8
 8003754:	b21b      	sxth	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.injection_bank_a_time & 0xff;
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <Save_ECU+0x1fc>)
 800375c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003764:	7bf8      	ldrb	r0, [r7, #15]
 8003766:	1d3a      	adds	r2, r7, #4
 8003768:	7bb9      	ldrb	r1, [r7, #14]
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <Save_ECU+0x200>)
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <Save_ECU+0x204>)
 8003770:	f002 fbbe 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>

	return;
 8003774:	e000      	b.n	8003778 <Save_ECU+0x1f0>
		return;
 8003776:	bf00      	nop
}
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	2000376a 	.word	0x2000376a
 8003784:	200005f4 	.word	0x200005f4
 8003788:	20002700 	.word	0x20002700
 800378c:	20001698 	.word	0x20001698

08003790 <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08e      	sub	sp, #56	; 0x38
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
 800379c:	2300      	movs	r3, #0
 800379e:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 80037a0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 80037a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80037aa:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80037b0:	2301      	movs	r3, #1
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	0b5b      	lsrs	r3, r3, #13
 80037b8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	b29b      	uxth	r3, r3
 80037c0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	0b5b      	lsrs	r3, r3, #13
 80037c6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 80037dc:	230e      	movs	r3, #14
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f003 ffa6 	bl	8007738 <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 80037ec:	2300      	movs	r3, #0
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80037f8:	2301      	movs	r3, #1
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	0b5b      	lsrs	r3, r3, #13
 8003800:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 8003802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	b29b      	uxth	r3, r3
 8003808:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	0b5b      	lsrs	r3, r3, #13
 800380e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	b29b      	uxth	r3, r3
 8003816:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 800381c:	2301      	movs	r3, #1
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 8003820:	2301      	movs	r3, #1
 8003822:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 8003824:	230f      	movs	r3, #15
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8003828:	f107 0308 	add.w	r3, r7, #8
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f003 ff82 	bl	8007738 <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT600, 2, CAN_RX_FIFO0);
 8003834:	2300      	movs	r3, #0
 8003836:	2202      	movs	r2, #2
 8003838:	f240 2181 	movw	r1, #641	; 0x281
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fc feb9 	bl	80005b4 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 3, CAN_RX_FIFO0);
 8003842:	2200      	movs	r2, #0
 8003844:	2103      	movs	r1, #3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe fc18 	bl	800207c <PDM_CAN_FilterConfig>

	HAL_CAN_Start(hcan);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f004 f853 	bl	80078f8 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003852:	2102      	movs	r1, #2
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f004 fab5 	bl	8007dc4 <HAL_CAN_ActivateNotification>
}
 800385a:	bf00      	nop
 800385c:	3738      	adds	r7, #56	; 0x38
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	2b07      	cmp	r3, #7
 8003874:	d830      	bhi.n	80038d8 <Principal_Transmit_Msg+0x74>
 8003876:	a201      	add	r2, pc, #4	; (adr r2, 800387c <Principal_Transmit_Msg+0x18>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	0800389d 	.word	0x0800389d
 8003880:	080038a5 	.word	0x080038a5
 8003884:	080038ad 	.word	0x080038ad
 8003888:	080038bd 	.word	0x080038bd
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038c5 	.word	0x080038c5
 8003894:	080038cd 	.word	0x080038cd
 8003898:	080038d3 	.word	0x080038d3
	{
		case ANALOG_1_4:
			Tx_Analog_1_4(hcan);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7fe fcdd 	bl	800225c <Tx_Analog_1_4>
			break;
 80038a2:	e01a      	b.n	80038da <Principal_Transmit_Msg+0x76>

		case ANALOG_5_8:
			Tx_Analog_5_8(hcan);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fe fd87 	bl	80023b8 <Tx_Analog_5_8>
			break;
 80038aa:	e016      	b.n	80038da <Principal_Transmit_Msg+0x76>

		case ANALOG_9_12:
			Tx_Analog_9_12(hcan);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7fe fe31 	bl	8002514 <Tx_Analog_9_12>
			break;
 80038b2:	e012      	b.n	80038da <Principal_Transmit_Msg+0x76>

		case VERIFY_MSG:
			Tx_Verify(hcan);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fe ff8b 	bl	80027d0 <Tx_Verify>
			break;
 80038ba:	e00e      	b.n	80038da <Principal_Transmit_Msg+0x76>

		case RTC_MSG:
			Tx_RTC(hcan);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7fe fedf 	bl	8002680 <Tx_RTC>
			break;
 80038c2:	e00a      	b.n	80038da <Principal_Transmit_Msg+0x76>

		case BEACON_MSG:
			Tx_Beacon(hcan);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff fc81 	bl	80031cc <Tx_Beacon>
			break;
 80038ca:	e006      	b.n	80038da <Principal_Transmit_Msg+0x76>

		case ECU_SAVE:
			Save_ECU();
 80038cc:	f7ff fe5c 	bl	8003588 <Save_ECU>
			break;
 80038d0:	e003      	b.n	80038da <Principal_Transmit_Msg+0x76>

		case PDM_SAVE:
			Save_PDM();
 80038d2:	f7ff fd2b 	bl	800332c <Save_PDM>
			break;
 80038d6:	e000      	b.n	80038da <Principal_Transmit_Msg+0x76>

		default:
			return;
 80038d8:	bf00      	nop
	}
}
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <Load_EEPROM>:
 */

#include "principal.h"

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af04      	add	r7, sp, #16
 80038e6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal;

	retVal = HAL_I2C_Mem_Read(hi2c, 0xA0, 0x0000, 1, buffer, EEPROM_BUFFER_SIZE, 5);
 80038e8:	2305      	movs	r3, #5
 80038ea:	9302      	str	r3, [sp, #8]
 80038ec:	2311      	movs	r3, #17
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2301      	movs	r3, #1
 80038f8:	2200      	movs	r2, #0
 80038fa:	21a0      	movs	r1, #160	; 0xa0
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f005 fd9d 	bl	800943c <HAL_I2C_Mem_Read>
 8003902:	4603      	mov	r3, r0
 8003904:	77fb      	strb	r3, [r7, #31]

//	retVal = HAL_I2C_Master_Transmit(hi2c, 0xA0, 0x00, 1, 5);

	if(retVal != HAL_OK)
 8003906:	7ffb      	ldrb	r3, [r7, #31]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <Load_EEPROM+0x30>
		return retVal;
 800390c:	7ffb      	ldrb	r3, [r7, #31]
 800390e:	e3f3      	b.n	80040f8 <Load_EEPROM+0x818>
//	else
//		retVal = HAL_I2C_Master_Receive(hi2c, 0xA1, buffer, EEPROM_BUFFER_SIZE, 5);

	__BUFFER_TO_FREQ(buffer[0], perMsg[ANALOG_1_4]);
 8003910:	7b3b      	ldrb	r3, [r7, #12]
 8003912:	3b01      	subs	r3, #1
 8003914:	2b0a      	cmp	r3, #10
 8003916:	d847      	bhi.n	80039a8 <Load_EEPROM+0xc8>
 8003918:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <Load_EEPROM+0x40>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	0800394d 	.word	0x0800394d
 8003924:	08003957 	.word	0x08003957
 8003928:	08003961 	.word	0x08003961
 800392c:	08003969 	.word	0x08003969
 8003930:	08003971 	.word	0x08003971
 8003934:	08003979 	.word	0x08003979
 8003938:	08003981 	.word	0x08003981
 800393c:	08003989 	.word	0x08003989
 8003940:	08003991 	.word	0x08003991
 8003944:	08003999 	.word	0x08003999
 8003948:	080039a1 	.word	0x080039a1
 800394c:	4ba8      	ldr	r3, [pc, #672]	; (8003bf0 <Load_EEPROM+0x310>)
 800394e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003952:	801a      	strh	r2, [r3, #0]
 8003954:	e02b      	b.n	80039ae <Load_EEPROM+0xce>
 8003956:	4ba6      	ldr	r3, [pc, #664]	; (8003bf0 <Load_EEPROM+0x310>)
 8003958:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	e026      	b.n	80039ae <Load_EEPROM+0xce>
 8003960:	4ba3      	ldr	r3, [pc, #652]	; (8003bf0 <Load_EEPROM+0x310>)
 8003962:	22c8      	movs	r2, #200	; 0xc8
 8003964:	801a      	strh	r2, [r3, #0]
 8003966:	e022      	b.n	80039ae <Load_EEPROM+0xce>
 8003968:	4ba1      	ldr	r3, [pc, #644]	; (8003bf0 <Load_EEPROM+0x310>)
 800396a:	2264      	movs	r2, #100	; 0x64
 800396c:	801a      	strh	r2, [r3, #0]
 800396e:	e01e      	b.n	80039ae <Load_EEPROM+0xce>
 8003970:	4b9f      	ldr	r3, [pc, #636]	; (8003bf0 <Load_EEPROM+0x310>)
 8003972:	2232      	movs	r2, #50	; 0x32
 8003974:	801a      	strh	r2, [r3, #0]
 8003976:	e01a      	b.n	80039ae <Load_EEPROM+0xce>
 8003978:	4b9d      	ldr	r3, [pc, #628]	; (8003bf0 <Load_EEPROM+0x310>)
 800397a:	2228      	movs	r2, #40	; 0x28
 800397c:	801a      	strh	r2, [r3, #0]
 800397e:	e016      	b.n	80039ae <Load_EEPROM+0xce>
 8003980:	4b9b      	ldr	r3, [pc, #620]	; (8003bf0 <Load_EEPROM+0x310>)
 8003982:	2214      	movs	r2, #20
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	e012      	b.n	80039ae <Load_EEPROM+0xce>
 8003988:	4b99      	ldr	r3, [pc, #612]	; (8003bf0 <Load_EEPROM+0x310>)
 800398a:	220a      	movs	r2, #10
 800398c:	801a      	strh	r2, [r3, #0]
 800398e:	e00e      	b.n	80039ae <Load_EEPROM+0xce>
 8003990:	4b97      	ldr	r3, [pc, #604]	; (8003bf0 <Load_EEPROM+0x310>)
 8003992:	2205      	movs	r2, #5
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	e00a      	b.n	80039ae <Load_EEPROM+0xce>
 8003998:	4b95      	ldr	r3, [pc, #596]	; (8003bf0 <Load_EEPROM+0x310>)
 800399a:	2203      	movs	r2, #3
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	e006      	b.n	80039ae <Load_EEPROM+0xce>
 80039a0:	4b93      	ldr	r3, [pc, #588]	; (8003bf0 <Load_EEPROM+0x310>)
 80039a2:	2202      	movs	r2, #2
 80039a4:	801a      	strh	r2, [r3, #0]
 80039a6:	e002      	b.n	80039ae <Load_EEPROM+0xce>
 80039a8:	4b91      	ldr	r3, [pc, #580]	; (8003bf0 <Load_EEPROM+0x310>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	801a      	strh	r2, [r3, #0]
 80039ae:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[1], perMsg[ANALOG_5_8]);
 80039b0:	7b7b      	ldrb	r3, [r7, #13]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	2b0a      	cmp	r3, #10
 80039b6:	d847      	bhi.n	8003a48 <Load_EEPROM+0x168>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <Load_EEPROM+0xe0>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	080039f7 	.word	0x080039f7
 80039c8:	08003a01 	.word	0x08003a01
 80039cc:	08003a09 	.word	0x08003a09
 80039d0:	08003a11 	.word	0x08003a11
 80039d4:	08003a19 	.word	0x08003a19
 80039d8:	08003a21 	.word	0x08003a21
 80039dc:	08003a29 	.word	0x08003a29
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003a39 	.word	0x08003a39
 80039e8:	08003a41 	.word	0x08003a41
 80039ec:	4b80      	ldr	r3, [pc, #512]	; (8003bf0 <Load_EEPROM+0x310>)
 80039ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039f2:	805a      	strh	r2, [r3, #2]
 80039f4:	e02b      	b.n	8003a4e <Load_EEPROM+0x16e>
 80039f6:	4b7e      	ldr	r3, [pc, #504]	; (8003bf0 <Load_EEPROM+0x310>)
 80039f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039fc:	805a      	strh	r2, [r3, #2]
 80039fe:	e026      	b.n	8003a4e <Load_EEPROM+0x16e>
 8003a00:	4b7b      	ldr	r3, [pc, #492]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a02:	22c8      	movs	r2, #200	; 0xc8
 8003a04:	805a      	strh	r2, [r3, #2]
 8003a06:	e022      	b.n	8003a4e <Load_EEPROM+0x16e>
 8003a08:	4b79      	ldr	r3, [pc, #484]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a0a:	2264      	movs	r2, #100	; 0x64
 8003a0c:	805a      	strh	r2, [r3, #2]
 8003a0e:	e01e      	b.n	8003a4e <Load_EEPROM+0x16e>
 8003a10:	4b77      	ldr	r3, [pc, #476]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a12:	2232      	movs	r2, #50	; 0x32
 8003a14:	805a      	strh	r2, [r3, #2]
 8003a16:	e01a      	b.n	8003a4e <Load_EEPROM+0x16e>
 8003a18:	4b75      	ldr	r3, [pc, #468]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a1a:	2228      	movs	r2, #40	; 0x28
 8003a1c:	805a      	strh	r2, [r3, #2]
 8003a1e:	e016      	b.n	8003a4e <Load_EEPROM+0x16e>
 8003a20:	4b73      	ldr	r3, [pc, #460]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a22:	2214      	movs	r2, #20
 8003a24:	805a      	strh	r2, [r3, #2]
 8003a26:	e012      	b.n	8003a4e <Load_EEPROM+0x16e>
 8003a28:	4b71      	ldr	r3, [pc, #452]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a2a:	220a      	movs	r2, #10
 8003a2c:	805a      	strh	r2, [r3, #2]
 8003a2e:	e00e      	b.n	8003a4e <Load_EEPROM+0x16e>
 8003a30:	4b6f      	ldr	r3, [pc, #444]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a32:	2205      	movs	r2, #5
 8003a34:	805a      	strh	r2, [r3, #2]
 8003a36:	e00a      	b.n	8003a4e <Load_EEPROM+0x16e>
 8003a38:	4b6d      	ldr	r3, [pc, #436]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	805a      	strh	r2, [r3, #2]
 8003a3e:	e006      	b.n	8003a4e <Load_EEPROM+0x16e>
 8003a40:	4b6b      	ldr	r3, [pc, #428]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a42:	2202      	movs	r2, #2
 8003a44:	805a      	strh	r2, [r3, #2]
 8003a46:	e002      	b.n	8003a4e <Load_EEPROM+0x16e>
 8003a48:	4b69      	ldr	r3, [pc, #420]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	805a      	strh	r2, [r3, #2]
 8003a4e:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[2], perMsg[ANALOG_9_12]);
 8003a50:	7bbb      	ldrb	r3, [r7, #14]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	2b0a      	cmp	r3, #10
 8003a56:	d847      	bhi.n	8003ae8 <Load_EEPROM+0x208>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <Load_EEPROM+0x180>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a8d 	.word	0x08003a8d
 8003a64:	08003a97 	.word	0x08003a97
 8003a68:	08003aa1 	.word	0x08003aa1
 8003a6c:	08003aa9 	.word	0x08003aa9
 8003a70:	08003ab1 	.word	0x08003ab1
 8003a74:	08003ab9 	.word	0x08003ab9
 8003a78:	08003ac1 	.word	0x08003ac1
 8003a7c:	08003ac9 	.word	0x08003ac9
 8003a80:	08003ad1 	.word	0x08003ad1
 8003a84:	08003ad9 	.word	0x08003ad9
 8003a88:	08003ae1 	.word	0x08003ae1
 8003a8c:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a92:	809a      	strh	r2, [r3, #4]
 8003a94:	e02b      	b.n	8003aee <Load_EEPROM+0x20e>
 8003a96:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <Load_EEPROM+0x310>)
 8003a98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a9c:	809a      	strh	r2, [r3, #4]
 8003a9e:	e026      	b.n	8003aee <Load_EEPROM+0x20e>
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <Load_EEPROM+0x310>)
 8003aa2:	22c8      	movs	r2, #200	; 0xc8
 8003aa4:	809a      	strh	r2, [r3, #4]
 8003aa6:	e022      	b.n	8003aee <Load_EEPROM+0x20e>
 8003aa8:	4b51      	ldr	r3, [pc, #324]	; (8003bf0 <Load_EEPROM+0x310>)
 8003aaa:	2264      	movs	r2, #100	; 0x64
 8003aac:	809a      	strh	r2, [r3, #4]
 8003aae:	e01e      	b.n	8003aee <Load_EEPROM+0x20e>
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <Load_EEPROM+0x310>)
 8003ab2:	2232      	movs	r2, #50	; 0x32
 8003ab4:	809a      	strh	r2, [r3, #4]
 8003ab6:	e01a      	b.n	8003aee <Load_EEPROM+0x20e>
 8003ab8:	4b4d      	ldr	r3, [pc, #308]	; (8003bf0 <Load_EEPROM+0x310>)
 8003aba:	2228      	movs	r2, #40	; 0x28
 8003abc:	809a      	strh	r2, [r3, #4]
 8003abe:	e016      	b.n	8003aee <Load_EEPROM+0x20e>
 8003ac0:	4b4b      	ldr	r3, [pc, #300]	; (8003bf0 <Load_EEPROM+0x310>)
 8003ac2:	2214      	movs	r2, #20
 8003ac4:	809a      	strh	r2, [r3, #4]
 8003ac6:	e012      	b.n	8003aee <Load_EEPROM+0x20e>
 8003ac8:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <Load_EEPROM+0x310>)
 8003aca:	220a      	movs	r2, #10
 8003acc:	809a      	strh	r2, [r3, #4]
 8003ace:	e00e      	b.n	8003aee <Load_EEPROM+0x20e>
 8003ad0:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <Load_EEPROM+0x310>)
 8003ad2:	2205      	movs	r2, #5
 8003ad4:	809a      	strh	r2, [r3, #4]
 8003ad6:	e00a      	b.n	8003aee <Load_EEPROM+0x20e>
 8003ad8:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <Load_EEPROM+0x310>)
 8003ada:	2203      	movs	r2, #3
 8003adc:	809a      	strh	r2, [r3, #4]
 8003ade:	e006      	b.n	8003aee <Load_EEPROM+0x20e>
 8003ae0:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <Load_EEPROM+0x310>)
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	809a      	strh	r2, [r3, #4]
 8003ae6:	e002      	b.n	8003aee <Load_EEPROM+0x20e>
 8003ae8:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <Load_EEPROM+0x310>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	809a      	strh	r2, [r3, #4]
 8003aee:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[3], perMsg[RTC_MSG]);
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	2b0a      	cmp	r3, #10
 8003af6:	d847      	bhi.n	8003b88 <Load_EEPROM+0x2a8>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <Load_EEPROM+0x220>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b37 	.word	0x08003b37
 8003b08:	08003b41 	.word	0x08003b41
 8003b0c:	08003b49 	.word	0x08003b49
 8003b10:	08003b51 	.word	0x08003b51
 8003b14:	08003b59 	.word	0x08003b59
 8003b18:	08003b61 	.word	0x08003b61
 8003b1c:	08003b69 	.word	0x08003b69
 8003b20:	08003b71 	.word	0x08003b71
 8003b24:	08003b79 	.word	0x08003b79
 8003b28:	08003b81 	.word	0x08003b81
 8003b2c:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b32:	80da      	strh	r2, [r3, #6]
 8003b34:	e02b      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b36:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b3c:	80da      	strh	r2, [r3, #6]
 8003b3e:	e026      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b42:	22c8      	movs	r2, #200	; 0xc8
 8003b44:	80da      	strh	r2, [r3, #6]
 8003b46:	e022      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b48:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b4a:	2264      	movs	r2, #100	; 0x64
 8003b4c:	80da      	strh	r2, [r3, #6]
 8003b4e:	e01e      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b52:	2232      	movs	r2, #50	; 0x32
 8003b54:	80da      	strh	r2, [r3, #6]
 8003b56:	e01a      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b5a:	2228      	movs	r2, #40	; 0x28
 8003b5c:	80da      	strh	r2, [r3, #6]
 8003b5e:	e016      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b60:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b62:	2214      	movs	r2, #20
 8003b64:	80da      	strh	r2, [r3, #6]
 8003b66:	e012      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b6a:	220a      	movs	r2, #10
 8003b6c:	80da      	strh	r2, [r3, #6]
 8003b6e:	e00e      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b70:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b72:	2205      	movs	r2, #5
 8003b74:	80da      	strh	r2, [r3, #6]
 8003b76:	e00a      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	80da      	strh	r2, [r3, #6]
 8003b7e:	e006      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b80:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b82:	2202      	movs	r2, #2
 8003b84:	80da      	strh	r2, [r3, #6]
 8003b86:	e002      	b.n	8003b8e <Load_EEPROM+0x2ae>
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <Load_EEPROM+0x310>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	80da      	strh	r2, [r3, #6]
 8003b8e:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[4], perMsg[VERIFY_MSG]);
 8003b90:	7c3b      	ldrb	r3, [r7, #16]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	2b0a      	cmp	r3, #10
 8003b96:	d849      	bhi.n	8003c2c <Load_EEPROM+0x34c>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <Load_EEPROM+0x2c0>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bcd 	.word	0x08003bcd
 8003ba4:	08003bd7 	.word	0x08003bd7
 8003ba8:	08003be1 	.word	0x08003be1
 8003bac:	08003be9 	.word	0x08003be9
 8003bb0:	08003bf5 	.word	0x08003bf5
 8003bb4:	08003bfd 	.word	0x08003bfd
 8003bb8:	08003c05 	.word	0x08003c05
 8003bbc:	08003c0d 	.word	0x08003c0d
 8003bc0:	08003c15 	.word	0x08003c15
 8003bc4:	08003c1d 	.word	0x08003c1d
 8003bc8:	08003c25 	.word	0x08003c25
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <Load_EEPROM+0x310>)
 8003bce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bd2:	811a      	strh	r2, [r3, #8]
 8003bd4:	e02d      	b.n	8003c32 <Load_EEPROM+0x352>
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <Load_EEPROM+0x310>)
 8003bd8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bdc:	811a      	strh	r2, [r3, #8]
 8003bde:	e028      	b.n	8003c32 <Load_EEPROM+0x352>
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <Load_EEPROM+0x310>)
 8003be2:	22c8      	movs	r2, #200	; 0xc8
 8003be4:	811a      	strh	r2, [r3, #8]
 8003be6:	e024      	b.n	8003c32 <Load_EEPROM+0x352>
 8003be8:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <Load_EEPROM+0x310>)
 8003bea:	2264      	movs	r2, #100	; 0x64
 8003bec:	811a      	strh	r2, [r3, #8]
 8003bee:	e020      	b.n	8003c32 <Load_EEPROM+0x352>
 8003bf0:	20003794 	.word	0x20003794
 8003bf4:	4ba7      	ldr	r3, [pc, #668]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003bf6:	2232      	movs	r2, #50	; 0x32
 8003bf8:	811a      	strh	r2, [r3, #8]
 8003bfa:	e01a      	b.n	8003c32 <Load_EEPROM+0x352>
 8003bfc:	4ba5      	ldr	r3, [pc, #660]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003bfe:	2228      	movs	r2, #40	; 0x28
 8003c00:	811a      	strh	r2, [r3, #8]
 8003c02:	e016      	b.n	8003c32 <Load_EEPROM+0x352>
 8003c04:	4ba3      	ldr	r3, [pc, #652]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c06:	2214      	movs	r2, #20
 8003c08:	811a      	strh	r2, [r3, #8]
 8003c0a:	e012      	b.n	8003c32 <Load_EEPROM+0x352>
 8003c0c:	4ba1      	ldr	r3, [pc, #644]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c0e:	220a      	movs	r2, #10
 8003c10:	811a      	strh	r2, [r3, #8]
 8003c12:	e00e      	b.n	8003c32 <Load_EEPROM+0x352>
 8003c14:	4b9f      	ldr	r3, [pc, #636]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c16:	2205      	movs	r2, #5
 8003c18:	811a      	strh	r2, [r3, #8]
 8003c1a:	e00a      	b.n	8003c32 <Load_EEPROM+0x352>
 8003c1c:	4b9d      	ldr	r3, [pc, #628]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c1e:	2203      	movs	r2, #3
 8003c20:	811a      	strh	r2, [r3, #8]
 8003c22:	e006      	b.n	8003c32 <Load_EEPROM+0x352>
 8003c24:	4b9b      	ldr	r3, [pc, #620]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c26:	2202      	movs	r2, #2
 8003c28:	811a      	strh	r2, [r3, #8]
 8003c2a:	e002      	b.n	8003c32 <Load_EEPROM+0x352>
 8003c2c:	4b99      	ldr	r3, [pc, #612]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	811a      	strh	r2, [r3, #8]
 8003c32:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[5], perMsg[ECU_SAVE]);
 8003c34:	7c7b      	ldrb	r3, [r7, #17]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	2b0a      	cmp	r3, #10
 8003c3a:	d847      	bhi.n	8003ccc <Load_EEPROM+0x3ec>
 8003c3c:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <Load_EEPROM+0x364>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c7b 	.word	0x08003c7b
 8003c4c:	08003c85 	.word	0x08003c85
 8003c50:	08003c8d 	.word	0x08003c8d
 8003c54:	08003c95 	.word	0x08003c95
 8003c58:	08003c9d 	.word	0x08003c9d
 8003c5c:	08003ca5 	.word	0x08003ca5
 8003c60:	08003cad 	.word	0x08003cad
 8003c64:	08003cb5 	.word	0x08003cb5
 8003c68:	08003cbd 	.word	0x08003cbd
 8003c6c:	08003cc5 	.word	0x08003cc5
 8003c70:	4b88      	ldr	r3, [pc, #544]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c76:	819a      	strh	r2, [r3, #12]
 8003c78:	e02b      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003c7a:	4b86      	ldr	r3, [pc, #536]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c80:	819a      	strh	r2, [r3, #12]
 8003c82:	e026      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003c84:	4b83      	ldr	r3, [pc, #524]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c86:	22c8      	movs	r2, #200	; 0xc8
 8003c88:	819a      	strh	r2, [r3, #12]
 8003c8a:	e022      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003c8c:	4b81      	ldr	r3, [pc, #516]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c8e:	2264      	movs	r2, #100	; 0x64
 8003c90:	819a      	strh	r2, [r3, #12]
 8003c92:	e01e      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003c94:	4b7f      	ldr	r3, [pc, #508]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c96:	2232      	movs	r2, #50	; 0x32
 8003c98:	819a      	strh	r2, [r3, #12]
 8003c9a:	e01a      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003c9c:	4b7d      	ldr	r3, [pc, #500]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003c9e:	2228      	movs	r2, #40	; 0x28
 8003ca0:	819a      	strh	r2, [r3, #12]
 8003ca2:	e016      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003ca4:	4b7b      	ldr	r3, [pc, #492]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003ca6:	2214      	movs	r2, #20
 8003ca8:	819a      	strh	r2, [r3, #12]
 8003caa:	e012      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003cac:	4b79      	ldr	r3, [pc, #484]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003cae:	220a      	movs	r2, #10
 8003cb0:	819a      	strh	r2, [r3, #12]
 8003cb2:	e00e      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003cb4:	4b77      	ldr	r3, [pc, #476]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	819a      	strh	r2, [r3, #12]
 8003cba:	e00a      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003cbc:	4b75      	ldr	r3, [pc, #468]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	819a      	strh	r2, [r3, #12]
 8003cc2:	e006      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003cc4:	4b73      	ldr	r3, [pc, #460]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	819a      	strh	r2, [r3, #12]
 8003cca:	e002      	b.n	8003cd2 <Load_EEPROM+0x3f2>
 8003ccc:	4b71      	ldr	r3, [pc, #452]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	819a      	strh	r2, [r3, #12]
 8003cd2:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[6], perMsg[PDM_SAVE]);
 8003cd4:	7cbb      	ldrb	r3, [r7, #18]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	2b0a      	cmp	r3, #10
 8003cda:	d847      	bhi.n	8003d6c <Load_EEPROM+0x48c>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <Load_EEPROM+0x404>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d11 	.word	0x08003d11
 8003ce8:	08003d1b 	.word	0x08003d1b
 8003cec:	08003d25 	.word	0x08003d25
 8003cf0:	08003d2d 	.word	0x08003d2d
 8003cf4:	08003d35 	.word	0x08003d35
 8003cf8:	08003d3d 	.word	0x08003d3d
 8003cfc:	08003d45 	.word	0x08003d45
 8003d00:	08003d4d 	.word	0x08003d4d
 8003d04:	08003d55 	.word	0x08003d55
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003d65 	.word	0x08003d65
 8003d10:	4b60      	ldr	r3, [pc, #384]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d16:	81da      	strh	r2, [r3, #14]
 8003d18:	e02b      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d1a:	4b5e      	ldr	r3, [pc, #376]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d20:	81da      	strh	r2, [r3, #14]
 8003d22:	e026      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d24:	4b5b      	ldr	r3, [pc, #364]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d26:	22c8      	movs	r2, #200	; 0xc8
 8003d28:	81da      	strh	r2, [r3, #14]
 8003d2a:	e022      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d2c:	4b59      	ldr	r3, [pc, #356]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d2e:	2264      	movs	r2, #100	; 0x64
 8003d30:	81da      	strh	r2, [r3, #14]
 8003d32:	e01e      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d34:	4b57      	ldr	r3, [pc, #348]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d36:	2232      	movs	r2, #50	; 0x32
 8003d38:	81da      	strh	r2, [r3, #14]
 8003d3a:	e01a      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d3c:	4b55      	ldr	r3, [pc, #340]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d3e:	2228      	movs	r2, #40	; 0x28
 8003d40:	81da      	strh	r2, [r3, #14]
 8003d42:	e016      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d44:	4b53      	ldr	r3, [pc, #332]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d46:	2214      	movs	r2, #20
 8003d48:	81da      	strh	r2, [r3, #14]
 8003d4a:	e012      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d4c:	4b51      	ldr	r3, [pc, #324]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d4e:	220a      	movs	r2, #10
 8003d50:	81da      	strh	r2, [r3, #14]
 8003d52:	e00e      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d54:	4b4f      	ldr	r3, [pc, #316]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d56:	2205      	movs	r2, #5
 8003d58:	81da      	strh	r2, [r3, #14]
 8003d5a:	e00a      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d5e:	2203      	movs	r2, #3
 8003d60:	81da      	strh	r2, [r3, #14]
 8003d62:	e006      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d64:	4b4b      	ldr	r3, [pc, #300]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d66:	2202      	movs	r2, #2
 8003d68:	81da      	strh	r2, [r3, #14]
 8003d6a:	e002      	b.n	8003d72 <Load_EEPROM+0x492>
 8003d6c:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <Load_EEPROM+0x5b4>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	81da      	strh	r2, [r3, #14]
 8003d72:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[7], perCAN[ANALOG_1_4]);
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	2b0a      	cmp	r3, #10
 8003d7a:	d847      	bhi.n	8003e0c <Load_EEPROM+0x52c>
 8003d7c:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <Load_EEPROM+0x4a4>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	08003dbb 	.word	0x08003dbb
 8003d8c:	08003dc5 	.word	0x08003dc5
 8003d90:	08003dcd 	.word	0x08003dcd
 8003d94:	08003dd5 	.word	0x08003dd5
 8003d98:	08003ddd 	.word	0x08003ddd
 8003d9c:	08003de5 	.word	0x08003de5
 8003da0:	08003ded 	.word	0x08003ded
 8003da4:	08003df5 	.word	0x08003df5
 8003da8:	08003dfd 	.word	0x08003dfd
 8003dac:	08003e05 	.word	0x08003e05
 8003db0:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003db2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003db6:	801a      	strh	r2, [r3, #0]
 8003db8:	e02b      	b.n	8003e12 <Load_EEPROM+0x532>
 8003dba:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003dbc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003dc0:	801a      	strh	r2, [r3, #0]
 8003dc2:	e026      	b.n	8003e12 <Load_EEPROM+0x532>
 8003dc4:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003dc6:	22c8      	movs	r2, #200	; 0xc8
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	e022      	b.n	8003e12 <Load_EEPROM+0x532>
 8003dcc:	4b32      	ldr	r3, [pc, #200]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003dce:	2264      	movs	r2, #100	; 0x64
 8003dd0:	801a      	strh	r2, [r3, #0]
 8003dd2:	e01e      	b.n	8003e12 <Load_EEPROM+0x532>
 8003dd4:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003dd6:	2232      	movs	r2, #50	; 0x32
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	e01a      	b.n	8003e12 <Load_EEPROM+0x532>
 8003ddc:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003dde:	2228      	movs	r2, #40	; 0x28
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	e016      	b.n	8003e12 <Load_EEPROM+0x532>
 8003de4:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003de6:	2214      	movs	r2, #20
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	e012      	b.n	8003e12 <Load_EEPROM+0x532>
 8003dec:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003dee:	220a      	movs	r2, #10
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	e00e      	b.n	8003e12 <Load_EEPROM+0x532>
 8003df4:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003df6:	2205      	movs	r2, #5
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e00a      	b.n	8003e12 <Load_EEPROM+0x532>
 8003dfc:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003dfe:	2203      	movs	r2, #3
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	e006      	b.n	8003e12 <Load_EEPROM+0x532>
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003e06:	2202      	movs	r2, #2
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	e002      	b.n	8003e12 <Load_EEPROM+0x532>
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	801a      	strh	r2, [r3, #0]
 8003e12:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[8], perCAN[ANALOG_5_8]);
 8003e14:	7d3b      	ldrb	r3, [r7, #20]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	2b0a      	cmp	r3, #10
 8003e1a:	d84b      	bhi.n	8003eb4 <Load_EEPROM+0x5d4>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <Load_EEPROM+0x544>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e51 	.word	0x08003e51
 8003e28:	08003e5b 	.word	0x08003e5b
 8003e2c:	08003e65 	.word	0x08003e65
 8003e30:	08003e6d 	.word	0x08003e6d
 8003e34:	08003e75 	.word	0x08003e75
 8003e38:	08003e7d 	.word	0x08003e7d
 8003e3c:	08003e85 	.word	0x08003e85
 8003e40:	08003e8d 	.word	0x08003e8d
 8003e44:	08003e9d 	.word	0x08003e9d
 8003e48:	08003ea5 	.word	0x08003ea5
 8003e4c:	08003ead 	.word	0x08003ead
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003e52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e56:	805a      	strh	r2, [r3, #2]
 8003e58:	e02f      	b.n	8003eba <Load_EEPROM+0x5da>
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003e5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e60:	805a      	strh	r2, [r3, #2]
 8003e62:	e02a      	b.n	8003eba <Load_EEPROM+0x5da>
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003e66:	22c8      	movs	r2, #200	; 0xc8
 8003e68:	805a      	strh	r2, [r3, #2]
 8003e6a:	e026      	b.n	8003eba <Load_EEPROM+0x5da>
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003e6e:	2264      	movs	r2, #100	; 0x64
 8003e70:	805a      	strh	r2, [r3, #2]
 8003e72:	e022      	b.n	8003eba <Load_EEPROM+0x5da>
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003e76:	2232      	movs	r2, #50	; 0x32
 8003e78:	805a      	strh	r2, [r3, #2]
 8003e7a:	e01e      	b.n	8003eba <Load_EEPROM+0x5da>
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003e7e:	2228      	movs	r2, #40	; 0x28
 8003e80:	805a      	strh	r2, [r3, #2]
 8003e82:	e01a      	b.n	8003eba <Load_EEPROM+0x5da>
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003e86:	2214      	movs	r2, #20
 8003e88:	805a      	strh	r2, [r3, #2]
 8003e8a:	e016      	b.n	8003eba <Load_EEPROM+0x5da>
 8003e8c:	4b02      	ldr	r3, [pc, #8]	; (8003e98 <Load_EEPROM+0x5b8>)
 8003e8e:	220a      	movs	r2, #10
 8003e90:	805a      	strh	r2, [r3, #2]
 8003e92:	e012      	b.n	8003eba <Load_EEPROM+0x5da>
 8003e94:	20003794 	.word	0x20003794
 8003e98:	20003788 	.word	0x20003788
 8003e9c:	4b98      	ldr	r3, [pc, #608]	; (8004100 <Load_EEPROM+0x820>)
 8003e9e:	2205      	movs	r2, #5
 8003ea0:	805a      	strh	r2, [r3, #2]
 8003ea2:	e00a      	b.n	8003eba <Load_EEPROM+0x5da>
 8003ea4:	4b96      	ldr	r3, [pc, #600]	; (8004100 <Load_EEPROM+0x820>)
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	805a      	strh	r2, [r3, #2]
 8003eaa:	e006      	b.n	8003eba <Load_EEPROM+0x5da>
 8003eac:	4b94      	ldr	r3, [pc, #592]	; (8004100 <Load_EEPROM+0x820>)
 8003eae:	2202      	movs	r2, #2
 8003eb0:	805a      	strh	r2, [r3, #2]
 8003eb2:	e002      	b.n	8003eba <Load_EEPROM+0x5da>
 8003eb4:	4b92      	ldr	r3, [pc, #584]	; (8004100 <Load_EEPROM+0x820>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	805a      	strh	r2, [r3, #2]
 8003eba:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[9], perCAN[ANALOG_9_12]);
 8003ebc:	7d7b      	ldrb	r3, [r7, #21]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	2b0a      	cmp	r3, #10
 8003ec2:	d847      	bhi.n	8003f54 <Load_EEPROM+0x674>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <Load_EEPROM+0x5ec>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	08003f03 	.word	0x08003f03
 8003ed4:	08003f0d 	.word	0x08003f0d
 8003ed8:	08003f15 	.word	0x08003f15
 8003edc:	08003f1d 	.word	0x08003f1d
 8003ee0:	08003f25 	.word	0x08003f25
 8003ee4:	08003f2d 	.word	0x08003f2d
 8003ee8:	08003f35 	.word	0x08003f35
 8003eec:	08003f3d 	.word	0x08003f3d
 8003ef0:	08003f45 	.word	0x08003f45
 8003ef4:	08003f4d 	.word	0x08003f4d
 8003ef8:	4b81      	ldr	r3, [pc, #516]	; (8004100 <Load_EEPROM+0x820>)
 8003efa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003efe:	809a      	strh	r2, [r3, #4]
 8003f00:	e02b      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f02:	4b7f      	ldr	r3, [pc, #508]	; (8004100 <Load_EEPROM+0x820>)
 8003f04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f08:	809a      	strh	r2, [r3, #4]
 8003f0a:	e026      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f0c:	4b7c      	ldr	r3, [pc, #496]	; (8004100 <Load_EEPROM+0x820>)
 8003f0e:	22c8      	movs	r2, #200	; 0xc8
 8003f10:	809a      	strh	r2, [r3, #4]
 8003f12:	e022      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f14:	4b7a      	ldr	r3, [pc, #488]	; (8004100 <Load_EEPROM+0x820>)
 8003f16:	2264      	movs	r2, #100	; 0x64
 8003f18:	809a      	strh	r2, [r3, #4]
 8003f1a:	e01e      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f1c:	4b78      	ldr	r3, [pc, #480]	; (8004100 <Load_EEPROM+0x820>)
 8003f1e:	2232      	movs	r2, #50	; 0x32
 8003f20:	809a      	strh	r2, [r3, #4]
 8003f22:	e01a      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f24:	4b76      	ldr	r3, [pc, #472]	; (8004100 <Load_EEPROM+0x820>)
 8003f26:	2228      	movs	r2, #40	; 0x28
 8003f28:	809a      	strh	r2, [r3, #4]
 8003f2a:	e016      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f2c:	4b74      	ldr	r3, [pc, #464]	; (8004100 <Load_EEPROM+0x820>)
 8003f2e:	2214      	movs	r2, #20
 8003f30:	809a      	strh	r2, [r3, #4]
 8003f32:	e012      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f34:	4b72      	ldr	r3, [pc, #456]	; (8004100 <Load_EEPROM+0x820>)
 8003f36:	220a      	movs	r2, #10
 8003f38:	809a      	strh	r2, [r3, #4]
 8003f3a:	e00e      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f3c:	4b70      	ldr	r3, [pc, #448]	; (8004100 <Load_EEPROM+0x820>)
 8003f3e:	2205      	movs	r2, #5
 8003f40:	809a      	strh	r2, [r3, #4]
 8003f42:	e00a      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f44:	4b6e      	ldr	r3, [pc, #440]	; (8004100 <Load_EEPROM+0x820>)
 8003f46:	2203      	movs	r2, #3
 8003f48:	809a      	strh	r2, [r3, #4]
 8003f4a:	e006      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f4c:	4b6c      	ldr	r3, [pc, #432]	; (8004100 <Load_EEPROM+0x820>)
 8003f4e:	2202      	movs	r2, #2
 8003f50:	809a      	strh	r2, [r3, #4]
 8003f52:	e002      	b.n	8003f5a <Load_EEPROM+0x67a>
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <Load_EEPROM+0x820>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	809a      	strh	r2, [r3, #4]
 8003f5a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[10], perCAN[RTC_MSG]);
 8003f5c:	7dbb      	ldrb	r3, [r7, #22]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	2b0a      	cmp	r3, #10
 8003f62:	d847      	bhi.n	8003ff4 <Load_EEPROM+0x714>
 8003f64:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <Load_EEPROM+0x68c>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f99 	.word	0x08003f99
 8003f70:	08003fa3 	.word	0x08003fa3
 8003f74:	08003fad 	.word	0x08003fad
 8003f78:	08003fb5 	.word	0x08003fb5
 8003f7c:	08003fbd 	.word	0x08003fbd
 8003f80:	08003fc5 	.word	0x08003fc5
 8003f84:	08003fcd 	.word	0x08003fcd
 8003f88:	08003fd5 	.word	0x08003fd5
 8003f8c:	08003fdd 	.word	0x08003fdd
 8003f90:	08003fe5 	.word	0x08003fe5
 8003f94:	08003fed 	.word	0x08003fed
 8003f98:	4b59      	ldr	r3, [pc, #356]	; (8004100 <Load_EEPROM+0x820>)
 8003f9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f9e:	80da      	strh	r2, [r3, #6]
 8003fa0:	e02b      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003fa2:	4b57      	ldr	r3, [pc, #348]	; (8004100 <Load_EEPROM+0x820>)
 8003fa4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003fa8:	80da      	strh	r2, [r3, #6]
 8003faa:	e026      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003fac:	4b54      	ldr	r3, [pc, #336]	; (8004100 <Load_EEPROM+0x820>)
 8003fae:	22c8      	movs	r2, #200	; 0xc8
 8003fb0:	80da      	strh	r2, [r3, #6]
 8003fb2:	e022      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003fb4:	4b52      	ldr	r3, [pc, #328]	; (8004100 <Load_EEPROM+0x820>)
 8003fb6:	2264      	movs	r2, #100	; 0x64
 8003fb8:	80da      	strh	r2, [r3, #6]
 8003fba:	e01e      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003fbc:	4b50      	ldr	r3, [pc, #320]	; (8004100 <Load_EEPROM+0x820>)
 8003fbe:	2232      	movs	r2, #50	; 0x32
 8003fc0:	80da      	strh	r2, [r3, #6]
 8003fc2:	e01a      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003fc4:	4b4e      	ldr	r3, [pc, #312]	; (8004100 <Load_EEPROM+0x820>)
 8003fc6:	2228      	movs	r2, #40	; 0x28
 8003fc8:	80da      	strh	r2, [r3, #6]
 8003fca:	e016      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003fcc:	4b4c      	ldr	r3, [pc, #304]	; (8004100 <Load_EEPROM+0x820>)
 8003fce:	2214      	movs	r2, #20
 8003fd0:	80da      	strh	r2, [r3, #6]
 8003fd2:	e012      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003fd4:	4b4a      	ldr	r3, [pc, #296]	; (8004100 <Load_EEPROM+0x820>)
 8003fd6:	220a      	movs	r2, #10
 8003fd8:	80da      	strh	r2, [r3, #6]
 8003fda:	e00e      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003fdc:	4b48      	ldr	r3, [pc, #288]	; (8004100 <Load_EEPROM+0x820>)
 8003fde:	2205      	movs	r2, #5
 8003fe0:	80da      	strh	r2, [r3, #6]
 8003fe2:	e00a      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003fe4:	4b46      	ldr	r3, [pc, #280]	; (8004100 <Load_EEPROM+0x820>)
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	80da      	strh	r2, [r3, #6]
 8003fea:	e006      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003fec:	4b44      	ldr	r3, [pc, #272]	; (8004100 <Load_EEPROM+0x820>)
 8003fee:	2202      	movs	r2, #2
 8003ff0:	80da      	strh	r2, [r3, #6]
 8003ff2:	e002      	b.n	8003ffa <Load_EEPROM+0x71a>
 8003ff4:	4b42      	ldr	r3, [pc, #264]	; (8004100 <Load_EEPROM+0x820>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	80da      	strh	r2, [r3, #6]
 8003ffa:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[10], perCAN[VERIFY_MSG]);
 8003ffc:	7dbb      	ldrb	r3, [r7, #22]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	2b0a      	cmp	r3, #10
 8004002:	d847      	bhi.n	8004094 <Load_EEPROM+0x7b4>
 8004004:	a201      	add	r2, pc, #4	; (adr r2, 800400c <Load_EEPROM+0x72c>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	08004039 	.word	0x08004039
 8004010:	08004043 	.word	0x08004043
 8004014:	0800404d 	.word	0x0800404d
 8004018:	08004055 	.word	0x08004055
 800401c:	0800405d 	.word	0x0800405d
 8004020:	08004065 	.word	0x08004065
 8004024:	0800406d 	.word	0x0800406d
 8004028:	08004075 	.word	0x08004075
 800402c:	0800407d 	.word	0x0800407d
 8004030:	08004085 	.word	0x08004085
 8004034:	0800408d 	.word	0x0800408d
 8004038:	4b31      	ldr	r3, [pc, #196]	; (8004100 <Load_EEPROM+0x820>)
 800403a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800403e:	811a      	strh	r2, [r3, #8]
 8004040:	e02b      	b.n	800409a <Load_EEPROM+0x7ba>
 8004042:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <Load_EEPROM+0x820>)
 8004044:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004048:	811a      	strh	r2, [r3, #8]
 800404a:	e026      	b.n	800409a <Load_EEPROM+0x7ba>
 800404c:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <Load_EEPROM+0x820>)
 800404e:	22c8      	movs	r2, #200	; 0xc8
 8004050:	811a      	strh	r2, [r3, #8]
 8004052:	e022      	b.n	800409a <Load_EEPROM+0x7ba>
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <Load_EEPROM+0x820>)
 8004056:	2264      	movs	r2, #100	; 0x64
 8004058:	811a      	strh	r2, [r3, #8]
 800405a:	e01e      	b.n	800409a <Load_EEPROM+0x7ba>
 800405c:	4b28      	ldr	r3, [pc, #160]	; (8004100 <Load_EEPROM+0x820>)
 800405e:	2232      	movs	r2, #50	; 0x32
 8004060:	811a      	strh	r2, [r3, #8]
 8004062:	e01a      	b.n	800409a <Load_EEPROM+0x7ba>
 8004064:	4b26      	ldr	r3, [pc, #152]	; (8004100 <Load_EEPROM+0x820>)
 8004066:	2228      	movs	r2, #40	; 0x28
 8004068:	811a      	strh	r2, [r3, #8]
 800406a:	e016      	b.n	800409a <Load_EEPROM+0x7ba>
 800406c:	4b24      	ldr	r3, [pc, #144]	; (8004100 <Load_EEPROM+0x820>)
 800406e:	2214      	movs	r2, #20
 8004070:	811a      	strh	r2, [r3, #8]
 8004072:	e012      	b.n	800409a <Load_EEPROM+0x7ba>
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <Load_EEPROM+0x820>)
 8004076:	220a      	movs	r2, #10
 8004078:	811a      	strh	r2, [r3, #8]
 800407a:	e00e      	b.n	800409a <Load_EEPROM+0x7ba>
 800407c:	4b20      	ldr	r3, [pc, #128]	; (8004100 <Load_EEPROM+0x820>)
 800407e:	2205      	movs	r2, #5
 8004080:	811a      	strh	r2, [r3, #8]
 8004082:	e00a      	b.n	800409a <Load_EEPROM+0x7ba>
 8004084:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <Load_EEPROM+0x820>)
 8004086:	2203      	movs	r2, #3
 8004088:	811a      	strh	r2, [r3, #8]
 800408a:	e006      	b.n	800409a <Load_EEPROM+0x7ba>
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <Load_EEPROM+0x820>)
 800408e:	2202      	movs	r2, #2
 8004090:	811a      	strh	r2, [r3, #8]
 8004092:	e002      	b.n	800409a <Load_EEPROM+0x7ba>
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <Load_EEPROM+0x820>)
 8004096:	2200      	movs	r2, #0
 8004098:	811a      	strh	r2, [r3, #8]
 800409a:	bf00      	nop

	inputConfig 	 = buffer[12];
 800409c:	7e3a      	ldrb	r2, [r7, #24]
 800409e:	4b19      	ldr	r3, [pc, #100]	; (8004104 <Load_EEPROM+0x824>)
 80040a0:	701a      	strb	r2, [r3, #0]
	thresholdBeacon	 = buffer[13] << 8;
 80040a2:	7e7b      	ldrb	r3, [r7, #25]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	b21a      	sxth	r2, r3
 80040a8:	4b17      	ldr	r3, [pc, #92]	; (8004108 <Load_EEPROM+0x828>)
 80040aa:	801a      	strh	r2, [r3, #0]
	thresholdBeacon |= buffer[14] & 0xff;
 80040ac:	7ebb      	ldrb	r3, [r7, #26]
 80040ae:	b21a      	sxth	r2, r3
 80040b0:	4b15      	ldr	r3, [pc, #84]	; (8004108 <Load_EEPROM+0x828>)
 80040b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	b21a      	sxth	r2, r3
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <Load_EEPROM+0x828>)
 80040bc:	801a      	strh	r2, [r3, #0]
	thresholdRPM	 = buffer[15] << 8;
 80040be:	7efb      	ldrb	r3, [r7, #27]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	b21a      	sxth	r2, r3
 80040c4:	4b11      	ldr	r3, [pc, #68]	; (800410c <Load_EEPROM+0x82c>)
 80040c6:	801a      	strh	r2, [r3, #0]
	thresholdRPM	|= buffer[16] & 0xff;
 80040c8:	7f3b      	ldrb	r3, [r7, #28]
 80040ca:	b21a      	sxth	r2, r3
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <Load_EEPROM+0x82c>)
 80040ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	b21a      	sxth	r2, r3
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <Load_EEPROM+0x82c>)
 80040d8:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	 = buffer[17] << 8;
 80040da:	7f7b      	ldrb	r3, [r7, #29]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	b21a      	sxth	r2, r3
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <Load_EEPROM+0x830>)
 80040e2:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	|= buffer[18] & 0xff;
 80040e4:	7fbb      	ldrb	r3, [r7, #30]
 80040e6:	b21a      	sxth	r2, r3
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <Load_EEPROM+0x830>)
 80040ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	b21a      	sxth	r2, r3
 80040f2:	4b07      	ldr	r3, [pc, #28]	; (8004110 <Load_EEPROM+0x830>)
 80040f4:	801a      	strh	r2, [r3, #0]

	return retVal;
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20003788 	.word	0x20003788
 8004104:	2000376c 	.word	0x2000376c
 8004108:	20001692 	.word	0x20001692
 800410c:	20001694 	.word	0x20001694
 8004110:	20001696 	.word	0x20001696

08004114 <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	; 0x30
 8004118:	af04      	add	r7, sp, #16
 800411a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];

	__FREQ_TO_BUFFER(buffer[0], perMsg[ANALOG_1_4]);
 800411c:	4ba9      	ldr	r3, [pc, #676]	; (80043c4 <Save_EEPROM+0x2b0>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004124:	f000 8081 	beq.w	800422a <Save_EEPROM+0x116>
 8004128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800412c:	f300 809e 	bgt.w	800426c <Save_EEPROM+0x158>
 8004130:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004134:	d07c      	beq.n	8004230 <Save_EEPROM+0x11c>
 8004136:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800413a:	f300 8097 	bgt.w	800426c <Save_EEPROM+0x158>
 800413e:	2bc8      	cmp	r3, #200	; 0xc8
 8004140:	d079      	beq.n	8004236 <Save_EEPROM+0x122>
 8004142:	2bc8      	cmp	r3, #200	; 0xc8
 8004144:	f300 8092 	bgt.w	800426c <Save_EEPROM+0x158>
 8004148:	2b32      	cmp	r3, #50	; 0x32
 800414a:	dc6b      	bgt.n	8004224 <Save_EEPROM+0x110>
 800414c:	2b02      	cmp	r3, #2
 800414e:	f2c0 808d 	blt.w	800426c <Save_EEPROM+0x158>
 8004152:	3b02      	subs	r3, #2
 8004154:	2b30      	cmp	r3, #48	; 0x30
 8004156:	f200 8089 	bhi.w	800426c <Save_EEPROM+0x158>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <Save_EEPROM+0x4c>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004267 	.word	0x08004267
 8004164:	08004261 	.word	0x08004261
 8004168:	0800426d 	.word	0x0800426d
 800416c:	0800425b 	.word	0x0800425b
 8004170:	0800426d 	.word	0x0800426d
 8004174:	0800426d 	.word	0x0800426d
 8004178:	0800426d 	.word	0x0800426d
 800417c:	0800426d 	.word	0x0800426d
 8004180:	08004255 	.word	0x08004255
 8004184:	0800426d 	.word	0x0800426d
 8004188:	0800426d 	.word	0x0800426d
 800418c:	0800426d 	.word	0x0800426d
 8004190:	0800426d 	.word	0x0800426d
 8004194:	0800426d 	.word	0x0800426d
 8004198:	0800426d 	.word	0x0800426d
 800419c:	0800426d 	.word	0x0800426d
 80041a0:	0800426d 	.word	0x0800426d
 80041a4:	0800426d 	.word	0x0800426d
 80041a8:	0800424f 	.word	0x0800424f
 80041ac:	0800426d 	.word	0x0800426d
 80041b0:	0800426d 	.word	0x0800426d
 80041b4:	0800426d 	.word	0x0800426d
 80041b8:	0800426d 	.word	0x0800426d
 80041bc:	0800426d 	.word	0x0800426d
 80041c0:	0800426d 	.word	0x0800426d
 80041c4:	0800426d 	.word	0x0800426d
 80041c8:	0800426d 	.word	0x0800426d
 80041cc:	0800426d 	.word	0x0800426d
 80041d0:	0800426d 	.word	0x0800426d
 80041d4:	0800426d 	.word	0x0800426d
 80041d8:	0800426d 	.word	0x0800426d
 80041dc:	0800426d 	.word	0x0800426d
 80041e0:	0800426d 	.word	0x0800426d
 80041e4:	0800426d 	.word	0x0800426d
 80041e8:	0800426d 	.word	0x0800426d
 80041ec:	0800426d 	.word	0x0800426d
 80041f0:	0800426d 	.word	0x0800426d
 80041f4:	0800426d 	.word	0x0800426d
 80041f8:	08004249 	.word	0x08004249
 80041fc:	0800426d 	.word	0x0800426d
 8004200:	0800426d 	.word	0x0800426d
 8004204:	0800426d 	.word	0x0800426d
 8004208:	0800426d 	.word	0x0800426d
 800420c:	0800426d 	.word	0x0800426d
 8004210:	0800426d 	.word	0x0800426d
 8004214:	0800426d 	.word	0x0800426d
 8004218:	0800426d 	.word	0x0800426d
 800421c:	0800426d 	.word	0x0800426d
 8004220:	08004243 	.word	0x08004243
 8004224:	2b64      	cmp	r3, #100	; 0x64
 8004226:	d009      	beq.n	800423c <Save_EEPROM+0x128>
 8004228:	e020      	b.n	800426c <Save_EEPROM+0x158>
 800422a:	2301      	movs	r3, #1
 800422c:	733b      	strb	r3, [r7, #12]
 800422e:	e01f      	b.n	8004270 <Save_EEPROM+0x15c>
 8004230:	2302      	movs	r3, #2
 8004232:	733b      	strb	r3, [r7, #12]
 8004234:	e01c      	b.n	8004270 <Save_EEPROM+0x15c>
 8004236:	2303      	movs	r3, #3
 8004238:	733b      	strb	r3, [r7, #12]
 800423a:	e019      	b.n	8004270 <Save_EEPROM+0x15c>
 800423c:	2304      	movs	r3, #4
 800423e:	733b      	strb	r3, [r7, #12]
 8004240:	e016      	b.n	8004270 <Save_EEPROM+0x15c>
 8004242:	2305      	movs	r3, #5
 8004244:	733b      	strb	r3, [r7, #12]
 8004246:	e013      	b.n	8004270 <Save_EEPROM+0x15c>
 8004248:	2306      	movs	r3, #6
 800424a:	733b      	strb	r3, [r7, #12]
 800424c:	e010      	b.n	8004270 <Save_EEPROM+0x15c>
 800424e:	2307      	movs	r3, #7
 8004250:	733b      	strb	r3, [r7, #12]
 8004252:	e00d      	b.n	8004270 <Save_EEPROM+0x15c>
 8004254:	2308      	movs	r3, #8
 8004256:	733b      	strb	r3, [r7, #12]
 8004258:	e00a      	b.n	8004270 <Save_EEPROM+0x15c>
 800425a:	2309      	movs	r3, #9
 800425c:	733b      	strb	r3, [r7, #12]
 800425e:	e007      	b.n	8004270 <Save_EEPROM+0x15c>
 8004260:	230a      	movs	r3, #10
 8004262:	733b      	strb	r3, [r7, #12]
 8004264:	e004      	b.n	8004270 <Save_EEPROM+0x15c>
 8004266:	230b      	movs	r3, #11
 8004268:	733b      	strb	r3, [r7, #12]
 800426a:	e001      	b.n	8004270 <Save_EEPROM+0x15c>
 800426c:	2300      	movs	r3, #0
 800426e:	733b      	strb	r3, [r7, #12]
 8004270:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[1], perMsg[ANALOG_5_8]);
 8004272:	4b54      	ldr	r3, [pc, #336]	; (80043c4 <Save_EEPROM+0x2b0>)
 8004274:	885b      	ldrh	r3, [r3, #2]
 8004276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800427a:	f000 8082 	beq.w	8004382 <Save_EEPROM+0x26e>
 800427e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004282:	f300 80a1 	bgt.w	80043c8 <Save_EEPROM+0x2b4>
 8004286:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800428a:	d07d      	beq.n	8004388 <Save_EEPROM+0x274>
 800428c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004290:	f300 809a 	bgt.w	80043c8 <Save_EEPROM+0x2b4>
 8004294:	2bc8      	cmp	r3, #200	; 0xc8
 8004296:	d07a      	beq.n	800438e <Save_EEPROM+0x27a>
 8004298:	2bc8      	cmp	r3, #200	; 0xc8
 800429a:	f300 8095 	bgt.w	80043c8 <Save_EEPROM+0x2b4>
 800429e:	2b32      	cmp	r3, #50	; 0x32
 80042a0:	dc6c      	bgt.n	800437c <Save_EEPROM+0x268>
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	f2c0 8090 	blt.w	80043c8 <Save_EEPROM+0x2b4>
 80042a8:	3b02      	subs	r3, #2
 80042aa:	2b30      	cmp	r3, #48	; 0x30
 80042ac:	f200 808c 	bhi.w	80043c8 <Save_EEPROM+0x2b4>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <Save_EEPROM+0x1a4>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080043bf 	.word	0x080043bf
 80042bc:	080043b9 	.word	0x080043b9
 80042c0:	080043c9 	.word	0x080043c9
 80042c4:	080043b3 	.word	0x080043b3
 80042c8:	080043c9 	.word	0x080043c9
 80042cc:	080043c9 	.word	0x080043c9
 80042d0:	080043c9 	.word	0x080043c9
 80042d4:	080043c9 	.word	0x080043c9
 80042d8:	080043ad 	.word	0x080043ad
 80042dc:	080043c9 	.word	0x080043c9
 80042e0:	080043c9 	.word	0x080043c9
 80042e4:	080043c9 	.word	0x080043c9
 80042e8:	080043c9 	.word	0x080043c9
 80042ec:	080043c9 	.word	0x080043c9
 80042f0:	080043c9 	.word	0x080043c9
 80042f4:	080043c9 	.word	0x080043c9
 80042f8:	080043c9 	.word	0x080043c9
 80042fc:	080043c9 	.word	0x080043c9
 8004300:	080043a7 	.word	0x080043a7
 8004304:	080043c9 	.word	0x080043c9
 8004308:	080043c9 	.word	0x080043c9
 800430c:	080043c9 	.word	0x080043c9
 8004310:	080043c9 	.word	0x080043c9
 8004314:	080043c9 	.word	0x080043c9
 8004318:	080043c9 	.word	0x080043c9
 800431c:	080043c9 	.word	0x080043c9
 8004320:	080043c9 	.word	0x080043c9
 8004324:	080043c9 	.word	0x080043c9
 8004328:	080043c9 	.word	0x080043c9
 800432c:	080043c9 	.word	0x080043c9
 8004330:	080043c9 	.word	0x080043c9
 8004334:	080043c9 	.word	0x080043c9
 8004338:	080043c9 	.word	0x080043c9
 800433c:	080043c9 	.word	0x080043c9
 8004340:	080043c9 	.word	0x080043c9
 8004344:	080043c9 	.word	0x080043c9
 8004348:	080043c9 	.word	0x080043c9
 800434c:	080043c9 	.word	0x080043c9
 8004350:	080043a1 	.word	0x080043a1
 8004354:	080043c9 	.word	0x080043c9
 8004358:	080043c9 	.word	0x080043c9
 800435c:	080043c9 	.word	0x080043c9
 8004360:	080043c9 	.word	0x080043c9
 8004364:	080043c9 	.word	0x080043c9
 8004368:	080043c9 	.word	0x080043c9
 800436c:	080043c9 	.word	0x080043c9
 8004370:	080043c9 	.word	0x080043c9
 8004374:	080043c9 	.word	0x080043c9
 8004378:	0800439b 	.word	0x0800439b
 800437c:	2b64      	cmp	r3, #100	; 0x64
 800437e:	d009      	beq.n	8004394 <Save_EEPROM+0x280>
 8004380:	e022      	b.n	80043c8 <Save_EEPROM+0x2b4>
 8004382:	2301      	movs	r3, #1
 8004384:	737b      	strb	r3, [r7, #13]
 8004386:	e021      	b.n	80043cc <Save_EEPROM+0x2b8>
 8004388:	2302      	movs	r3, #2
 800438a:	737b      	strb	r3, [r7, #13]
 800438c:	e01e      	b.n	80043cc <Save_EEPROM+0x2b8>
 800438e:	2303      	movs	r3, #3
 8004390:	737b      	strb	r3, [r7, #13]
 8004392:	e01b      	b.n	80043cc <Save_EEPROM+0x2b8>
 8004394:	2304      	movs	r3, #4
 8004396:	737b      	strb	r3, [r7, #13]
 8004398:	e018      	b.n	80043cc <Save_EEPROM+0x2b8>
 800439a:	2305      	movs	r3, #5
 800439c:	737b      	strb	r3, [r7, #13]
 800439e:	e015      	b.n	80043cc <Save_EEPROM+0x2b8>
 80043a0:	2306      	movs	r3, #6
 80043a2:	737b      	strb	r3, [r7, #13]
 80043a4:	e012      	b.n	80043cc <Save_EEPROM+0x2b8>
 80043a6:	2307      	movs	r3, #7
 80043a8:	737b      	strb	r3, [r7, #13]
 80043aa:	e00f      	b.n	80043cc <Save_EEPROM+0x2b8>
 80043ac:	2308      	movs	r3, #8
 80043ae:	737b      	strb	r3, [r7, #13]
 80043b0:	e00c      	b.n	80043cc <Save_EEPROM+0x2b8>
 80043b2:	2309      	movs	r3, #9
 80043b4:	737b      	strb	r3, [r7, #13]
 80043b6:	e009      	b.n	80043cc <Save_EEPROM+0x2b8>
 80043b8:	230a      	movs	r3, #10
 80043ba:	737b      	strb	r3, [r7, #13]
 80043bc:	e006      	b.n	80043cc <Save_EEPROM+0x2b8>
 80043be:	230b      	movs	r3, #11
 80043c0:	737b      	strb	r3, [r7, #13]
 80043c2:	e003      	b.n	80043cc <Save_EEPROM+0x2b8>
 80043c4:	20003794 	.word	0x20003794
 80043c8:	2300      	movs	r3, #0
 80043ca:	737b      	strb	r3, [r7, #13]
 80043cc:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[2], perMsg[ANALOG_9_12]);
 80043ce:	4baa      	ldr	r3, [pc, #680]	; (8004678 <Save_EEPROM+0x564>)
 80043d0:	889b      	ldrh	r3, [r3, #4]
 80043d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d6:	f000 8082 	beq.w	80044de <Save_EEPROM+0x3ca>
 80043da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043de:	f300 809f 	bgt.w	8004520 <Save_EEPROM+0x40c>
 80043e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043e6:	d07d      	beq.n	80044e4 <Save_EEPROM+0x3d0>
 80043e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043ec:	f300 8098 	bgt.w	8004520 <Save_EEPROM+0x40c>
 80043f0:	2bc8      	cmp	r3, #200	; 0xc8
 80043f2:	d07a      	beq.n	80044ea <Save_EEPROM+0x3d6>
 80043f4:	2bc8      	cmp	r3, #200	; 0xc8
 80043f6:	f300 8093 	bgt.w	8004520 <Save_EEPROM+0x40c>
 80043fa:	2b32      	cmp	r3, #50	; 0x32
 80043fc:	dc6c      	bgt.n	80044d8 <Save_EEPROM+0x3c4>
 80043fe:	2b02      	cmp	r3, #2
 8004400:	f2c0 808e 	blt.w	8004520 <Save_EEPROM+0x40c>
 8004404:	3b02      	subs	r3, #2
 8004406:	2b30      	cmp	r3, #48	; 0x30
 8004408:	f200 808a 	bhi.w	8004520 <Save_EEPROM+0x40c>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <Save_EEPROM+0x300>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	0800451b 	.word	0x0800451b
 8004418:	08004515 	.word	0x08004515
 800441c:	08004521 	.word	0x08004521
 8004420:	0800450f 	.word	0x0800450f
 8004424:	08004521 	.word	0x08004521
 8004428:	08004521 	.word	0x08004521
 800442c:	08004521 	.word	0x08004521
 8004430:	08004521 	.word	0x08004521
 8004434:	08004509 	.word	0x08004509
 8004438:	08004521 	.word	0x08004521
 800443c:	08004521 	.word	0x08004521
 8004440:	08004521 	.word	0x08004521
 8004444:	08004521 	.word	0x08004521
 8004448:	08004521 	.word	0x08004521
 800444c:	08004521 	.word	0x08004521
 8004450:	08004521 	.word	0x08004521
 8004454:	08004521 	.word	0x08004521
 8004458:	08004521 	.word	0x08004521
 800445c:	08004503 	.word	0x08004503
 8004460:	08004521 	.word	0x08004521
 8004464:	08004521 	.word	0x08004521
 8004468:	08004521 	.word	0x08004521
 800446c:	08004521 	.word	0x08004521
 8004470:	08004521 	.word	0x08004521
 8004474:	08004521 	.word	0x08004521
 8004478:	08004521 	.word	0x08004521
 800447c:	08004521 	.word	0x08004521
 8004480:	08004521 	.word	0x08004521
 8004484:	08004521 	.word	0x08004521
 8004488:	08004521 	.word	0x08004521
 800448c:	08004521 	.word	0x08004521
 8004490:	08004521 	.word	0x08004521
 8004494:	08004521 	.word	0x08004521
 8004498:	08004521 	.word	0x08004521
 800449c:	08004521 	.word	0x08004521
 80044a0:	08004521 	.word	0x08004521
 80044a4:	08004521 	.word	0x08004521
 80044a8:	08004521 	.word	0x08004521
 80044ac:	080044fd 	.word	0x080044fd
 80044b0:	08004521 	.word	0x08004521
 80044b4:	08004521 	.word	0x08004521
 80044b8:	08004521 	.word	0x08004521
 80044bc:	08004521 	.word	0x08004521
 80044c0:	08004521 	.word	0x08004521
 80044c4:	08004521 	.word	0x08004521
 80044c8:	08004521 	.word	0x08004521
 80044cc:	08004521 	.word	0x08004521
 80044d0:	08004521 	.word	0x08004521
 80044d4:	080044f7 	.word	0x080044f7
 80044d8:	2b64      	cmp	r3, #100	; 0x64
 80044da:	d009      	beq.n	80044f0 <Save_EEPROM+0x3dc>
 80044dc:	e020      	b.n	8004520 <Save_EEPROM+0x40c>
 80044de:	2301      	movs	r3, #1
 80044e0:	73bb      	strb	r3, [r7, #14]
 80044e2:	e01f      	b.n	8004524 <Save_EEPROM+0x410>
 80044e4:	2302      	movs	r3, #2
 80044e6:	73bb      	strb	r3, [r7, #14]
 80044e8:	e01c      	b.n	8004524 <Save_EEPROM+0x410>
 80044ea:	2303      	movs	r3, #3
 80044ec:	73bb      	strb	r3, [r7, #14]
 80044ee:	e019      	b.n	8004524 <Save_EEPROM+0x410>
 80044f0:	2304      	movs	r3, #4
 80044f2:	73bb      	strb	r3, [r7, #14]
 80044f4:	e016      	b.n	8004524 <Save_EEPROM+0x410>
 80044f6:	2305      	movs	r3, #5
 80044f8:	73bb      	strb	r3, [r7, #14]
 80044fa:	e013      	b.n	8004524 <Save_EEPROM+0x410>
 80044fc:	2306      	movs	r3, #6
 80044fe:	73bb      	strb	r3, [r7, #14]
 8004500:	e010      	b.n	8004524 <Save_EEPROM+0x410>
 8004502:	2307      	movs	r3, #7
 8004504:	73bb      	strb	r3, [r7, #14]
 8004506:	e00d      	b.n	8004524 <Save_EEPROM+0x410>
 8004508:	2308      	movs	r3, #8
 800450a:	73bb      	strb	r3, [r7, #14]
 800450c:	e00a      	b.n	8004524 <Save_EEPROM+0x410>
 800450e:	2309      	movs	r3, #9
 8004510:	73bb      	strb	r3, [r7, #14]
 8004512:	e007      	b.n	8004524 <Save_EEPROM+0x410>
 8004514:	230a      	movs	r3, #10
 8004516:	73bb      	strb	r3, [r7, #14]
 8004518:	e004      	b.n	8004524 <Save_EEPROM+0x410>
 800451a:	230b      	movs	r3, #11
 800451c:	73bb      	strb	r3, [r7, #14]
 800451e:	e001      	b.n	8004524 <Save_EEPROM+0x410>
 8004520:	2300      	movs	r3, #0
 8004522:	73bb      	strb	r3, [r7, #14]
 8004524:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[3], perMsg[RTC_MSG]);
 8004526:	4b54      	ldr	r3, [pc, #336]	; (8004678 <Save_EEPROM+0x564>)
 8004528:	88db      	ldrh	r3, [r3, #6]
 800452a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800452e:	f000 8082 	beq.w	8004636 <Save_EEPROM+0x522>
 8004532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004536:	f300 80a1 	bgt.w	800467c <Save_EEPROM+0x568>
 800453a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800453e:	d07d      	beq.n	800463c <Save_EEPROM+0x528>
 8004540:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004544:	f300 809a 	bgt.w	800467c <Save_EEPROM+0x568>
 8004548:	2bc8      	cmp	r3, #200	; 0xc8
 800454a:	d07a      	beq.n	8004642 <Save_EEPROM+0x52e>
 800454c:	2bc8      	cmp	r3, #200	; 0xc8
 800454e:	f300 8095 	bgt.w	800467c <Save_EEPROM+0x568>
 8004552:	2b32      	cmp	r3, #50	; 0x32
 8004554:	dc6c      	bgt.n	8004630 <Save_EEPROM+0x51c>
 8004556:	2b02      	cmp	r3, #2
 8004558:	f2c0 8090 	blt.w	800467c <Save_EEPROM+0x568>
 800455c:	3b02      	subs	r3, #2
 800455e:	2b30      	cmp	r3, #48	; 0x30
 8004560:	f200 808c 	bhi.w	800467c <Save_EEPROM+0x568>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <Save_EEPROM+0x458>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	08004673 	.word	0x08004673
 8004570:	0800466d 	.word	0x0800466d
 8004574:	0800467d 	.word	0x0800467d
 8004578:	08004667 	.word	0x08004667
 800457c:	0800467d 	.word	0x0800467d
 8004580:	0800467d 	.word	0x0800467d
 8004584:	0800467d 	.word	0x0800467d
 8004588:	0800467d 	.word	0x0800467d
 800458c:	08004661 	.word	0x08004661
 8004590:	0800467d 	.word	0x0800467d
 8004594:	0800467d 	.word	0x0800467d
 8004598:	0800467d 	.word	0x0800467d
 800459c:	0800467d 	.word	0x0800467d
 80045a0:	0800467d 	.word	0x0800467d
 80045a4:	0800467d 	.word	0x0800467d
 80045a8:	0800467d 	.word	0x0800467d
 80045ac:	0800467d 	.word	0x0800467d
 80045b0:	0800467d 	.word	0x0800467d
 80045b4:	0800465b 	.word	0x0800465b
 80045b8:	0800467d 	.word	0x0800467d
 80045bc:	0800467d 	.word	0x0800467d
 80045c0:	0800467d 	.word	0x0800467d
 80045c4:	0800467d 	.word	0x0800467d
 80045c8:	0800467d 	.word	0x0800467d
 80045cc:	0800467d 	.word	0x0800467d
 80045d0:	0800467d 	.word	0x0800467d
 80045d4:	0800467d 	.word	0x0800467d
 80045d8:	0800467d 	.word	0x0800467d
 80045dc:	0800467d 	.word	0x0800467d
 80045e0:	0800467d 	.word	0x0800467d
 80045e4:	0800467d 	.word	0x0800467d
 80045e8:	0800467d 	.word	0x0800467d
 80045ec:	0800467d 	.word	0x0800467d
 80045f0:	0800467d 	.word	0x0800467d
 80045f4:	0800467d 	.word	0x0800467d
 80045f8:	0800467d 	.word	0x0800467d
 80045fc:	0800467d 	.word	0x0800467d
 8004600:	0800467d 	.word	0x0800467d
 8004604:	08004655 	.word	0x08004655
 8004608:	0800467d 	.word	0x0800467d
 800460c:	0800467d 	.word	0x0800467d
 8004610:	0800467d 	.word	0x0800467d
 8004614:	0800467d 	.word	0x0800467d
 8004618:	0800467d 	.word	0x0800467d
 800461c:	0800467d 	.word	0x0800467d
 8004620:	0800467d 	.word	0x0800467d
 8004624:	0800467d 	.word	0x0800467d
 8004628:	0800467d 	.word	0x0800467d
 800462c:	0800464f 	.word	0x0800464f
 8004630:	2b64      	cmp	r3, #100	; 0x64
 8004632:	d009      	beq.n	8004648 <Save_EEPROM+0x534>
 8004634:	e022      	b.n	800467c <Save_EEPROM+0x568>
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
 800463a:	e021      	b.n	8004680 <Save_EEPROM+0x56c>
 800463c:	2302      	movs	r3, #2
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	e01e      	b.n	8004680 <Save_EEPROM+0x56c>
 8004642:	2303      	movs	r3, #3
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	e01b      	b.n	8004680 <Save_EEPROM+0x56c>
 8004648:	2304      	movs	r3, #4
 800464a:	73fb      	strb	r3, [r7, #15]
 800464c:	e018      	b.n	8004680 <Save_EEPROM+0x56c>
 800464e:	2305      	movs	r3, #5
 8004650:	73fb      	strb	r3, [r7, #15]
 8004652:	e015      	b.n	8004680 <Save_EEPROM+0x56c>
 8004654:	2306      	movs	r3, #6
 8004656:	73fb      	strb	r3, [r7, #15]
 8004658:	e012      	b.n	8004680 <Save_EEPROM+0x56c>
 800465a:	2307      	movs	r3, #7
 800465c:	73fb      	strb	r3, [r7, #15]
 800465e:	e00f      	b.n	8004680 <Save_EEPROM+0x56c>
 8004660:	2308      	movs	r3, #8
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	e00c      	b.n	8004680 <Save_EEPROM+0x56c>
 8004666:	2309      	movs	r3, #9
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	e009      	b.n	8004680 <Save_EEPROM+0x56c>
 800466c:	230a      	movs	r3, #10
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	e006      	b.n	8004680 <Save_EEPROM+0x56c>
 8004672:	230b      	movs	r3, #11
 8004674:	73fb      	strb	r3, [r7, #15]
 8004676:	e003      	b.n	8004680 <Save_EEPROM+0x56c>
 8004678:	20003794 	.word	0x20003794
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[4], perMsg[VERIFY_MSG]);
 8004682:	4baa      	ldr	r3, [pc, #680]	; (800492c <Save_EEPROM+0x818>)
 8004684:	891b      	ldrh	r3, [r3, #8]
 8004686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800468a:	f000 8082 	beq.w	8004792 <Save_EEPROM+0x67e>
 800468e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004692:	f300 809f 	bgt.w	80047d4 <Save_EEPROM+0x6c0>
 8004696:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800469a:	d07d      	beq.n	8004798 <Save_EEPROM+0x684>
 800469c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046a0:	f300 8098 	bgt.w	80047d4 <Save_EEPROM+0x6c0>
 80046a4:	2bc8      	cmp	r3, #200	; 0xc8
 80046a6:	d07a      	beq.n	800479e <Save_EEPROM+0x68a>
 80046a8:	2bc8      	cmp	r3, #200	; 0xc8
 80046aa:	f300 8093 	bgt.w	80047d4 <Save_EEPROM+0x6c0>
 80046ae:	2b32      	cmp	r3, #50	; 0x32
 80046b0:	dc6c      	bgt.n	800478c <Save_EEPROM+0x678>
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	f2c0 808e 	blt.w	80047d4 <Save_EEPROM+0x6c0>
 80046b8:	3b02      	subs	r3, #2
 80046ba:	2b30      	cmp	r3, #48	; 0x30
 80046bc:	f200 808a 	bhi.w	80047d4 <Save_EEPROM+0x6c0>
 80046c0:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <Save_EEPROM+0x5b4>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080047cf 	.word	0x080047cf
 80046cc:	080047c9 	.word	0x080047c9
 80046d0:	080047d5 	.word	0x080047d5
 80046d4:	080047c3 	.word	0x080047c3
 80046d8:	080047d5 	.word	0x080047d5
 80046dc:	080047d5 	.word	0x080047d5
 80046e0:	080047d5 	.word	0x080047d5
 80046e4:	080047d5 	.word	0x080047d5
 80046e8:	080047bd 	.word	0x080047bd
 80046ec:	080047d5 	.word	0x080047d5
 80046f0:	080047d5 	.word	0x080047d5
 80046f4:	080047d5 	.word	0x080047d5
 80046f8:	080047d5 	.word	0x080047d5
 80046fc:	080047d5 	.word	0x080047d5
 8004700:	080047d5 	.word	0x080047d5
 8004704:	080047d5 	.word	0x080047d5
 8004708:	080047d5 	.word	0x080047d5
 800470c:	080047d5 	.word	0x080047d5
 8004710:	080047b7 	.word	0x080047b7
 8004714:	080047d5 	.word	0x080047d5
 8004718:	080047d5 	.word	0x080047d5
 800471c:	080047d5 	.word	0x080047d5
 8004720:	080047d5 	.word	0x080047d5
 8004724:	080047d5 	.word	0x080047d5
 8004728:	080047d5 	.word	0x080047d5
 800472c:	080047d5 	.word	0x080047d5
 8004730:	080047d5 	.word	0x080047d5
 8004734:	080047d5 	.word	0x080047d5
 8004738:	080047d5 	.word	0x080047d5
 800473c:	080047d5 	.word	0x080047d5
 8004740:	080047d5 	.word	0x080047d5
 8004744:	080047d5 	.word	0x080047d5
 8004748:	080047d5 	.word	0x080047d5
 800474c:	080047d5 	.word	0x080047d5
 8004750:	080047d5 	.word	0x080047d5
 8004754:	080047d5 	.word	0x080047d5
 8004758:	080047d5 	.word	0x080047d5
 800475c:	080047d5 	.word	0x080047d5
 8004760:	080047b1 	.word	0x080047b1
 8004764:	080047d5 	.word	0x080047d5
 8004768:	080047d5 	.word	0x080047d5
 800476c:	080047d5 	.word	0x080047d5
 8004770:	080047d5 	.word	0x080047d5
 8004774:	080047d5 	.word	0x080047d5
 8004778:	080047d5 	.word	0x080047d5
 800477c:	080047d5 	.word	0x080047d5
 8004780:	080047d5 	.word	0x080047d5
 8004784:	080047d5 	.word	0x080047d5
 8004788:	080047ab 	.word	0x080047ab
 800478c:	2b64      	cmp	r3, #100	; 0x64
 800478e:	d009      	beq.n	80047a4 <Save_EEPROM+0x690>
 8004790:	e020      	b.n	80047d4 <Save_EEPROM+0x6c0>
 8004792:	2301      	movs	r3, #1
 8004794:	743b      	strb	r3, [r7, #16]
 8004796:	e01f      	b.n	80047d8 <Save_EEPROM+0x6c4>
 8004798:	2302      	movs	r3, #2
 800479a:	743b      	strb	r3, [r7, #16]
 800479c:	e01c      	b.n	80047d8 <Save_EEPROM+0x6c4>
 800479e:	2303      	movs	r3, #3
 80047a0:	743b      	strb	r3, [r7, #16]
 80047a2:	e019      	b.n	80047d8 <Save_EEPROM+0x6c4>
 80047a4:	2304      	movs	r3, #4
 80047a6:	743b      	strb	r3, [r7, #16]
 80047a8:	e016      	b.n	80047d8 <Save_EEPROM+0x6c4>
 80047aa:	2305      	movs	r3, #5
 80047ac:	743b      	strb	r3, [r7, #16]
 80047ae:	e013      	b.n	80047d8 <Save_EEPROM+0x6c4>
 80047b0:	2306      	movs	r3, #6
 80047b2:	743b      	strb	r3, [r7, #16]
 80047b4:	e010      	b.n	80047d8 <Save_EEPROM+0x6c4>
 80047b6:	2307      	movs	r3, #7
 80047b8:	743b      	strb	r3, [r7, #16]
 80047ba:	e00d      	b.n	80047d8 <Save_EEPROM+0x6c4>
 80047bc:	2308      	movs	r3, #8
 80047be:	743b      	strb	r3, [r7, #16]
 80047c0:	e00a      	b.n	80047d8 <Save_EEPROM+0x6c4>
 80047c2:	2309      	movs	r3, #9
 80047c4:	743b      	strb	r3, [r7, #16]
 80047c6:	e007      	b.n	80047d8 <Save_EEPROM+0x6c4>
 80047c8:	230a      	movs	r3, #10
 80047ca:	743b      	strb	r3, [r7, #16]
 80047cc:	e004      	b.n	80047d8 <Save_EEPROM+0x6c4>
 80047ce:	230b      	movs	r3, #11
 80047d0:	743b      	strb	r3, [r7, #16]
 80047d2:	e001      	b.n	80047d8 <Save_EEPROM+0x6c4>
 80047d4:	2300      	movs	r3, #0
 80047d6:	743b      	strb	r3, [r7, #16]
 80047d8:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[5], perMsg[ECU_SAVE]);
 80047da:	4b54      	ldr	r3, [pc, #336]	; (800492c <Save_EEPROM+0x818>)
 80047dc:	899b      	ldrh	r3, [r3, #12]
 80047de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047e2:	f000 8082 	beq.w	80048ea <Save_EEPROM+0x7d6>
 80047e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ea:	f300 80a1 	bgt.w	8004930 <Save_EEPROM+0x81c>
 80047ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047f2:	d07d      	beq.n	80048f0 <Save_EEPROM+0x7dc>
 80047f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047f8:	f300 809a 	bgt.w	8004930 <Save_EEPROM+0x81c>
 80047fc:	2bc8      	cmp	r3, #200	; 0xc8
 80047fe:	d07a      	beq.n	80048f6 <Save_EEPROM+0x7e2>
 8004800:	2bc8      	cmp	r3, #200	; 0xc8
 8004802:	f300 8095 	bgt.w	8004930 <Save_EEPROM+0x81c>
 8004806:	2b32      	cmp	r3, #50	; 0x32
 8004808:	dc6c      	bgt.n	80048e4 <Save_EEPROM+0x7d0>
 800480a:	2b02      	cmp	r3, #2
 800480c:	f2c0 8090 	blt.w	8004930 <Save_EEPROM+0x81c>
 8004810:	3b02      	subs	r3, #2
 8004812:	2b30      	cmp	r3, #48	; 0x30
 8004814:	f200 808c 	bhi.w	8004930 <Save_EEPROM+0x81c>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <Save_EEPROM+0x70c>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004927 	.word	0x08004927
 8004824:	08004921 	.word	0x08004921
 8004828:	08004931 	.word	0x08004931
 800482c:	0800491b 	.word	0x0800491b
 8004830:	08004931 	.word	0x08004931
 8004834:	08004931 	.word	0x08004931
 8004838:	08004931 	.word	0x08004931
 800483c:	08004931 	.word	0x08004931
 8004840:	08004915 	.word	0x08004915
 8004844:	08004931 	.word	0x08004931
 8004848:	08004931 	.word	0x08004931
 800484c:	08004931 	.word	0x08004931
 8004850:	08004931 	.word	0x08004931
 8004854:	08004931 	.word	0x08004931
 8004858:	08004931 	.word	0x08004931
 800485c:	08004931 	.word	0x08004931
 8004860:	08004931 	.word	0x08004931
 8004864:	08004931 	.word	0x08004931
 8004868:	0800490f 	.word	0x0800490f
 800486c:	08004931 	.word	0x08004931
 8004870:	08004931 	.word	0x08004931
 8004874:	08004931 	.word	0x08004931
 8004878:	08004931 	.word	0x08004931
 800487c:	08004931 	.word	0x08004931
 8004880:	08004931 	.word	0x08004931
 8004884:	08004931 	.word	0x08004931
 8004888:	08004931 	.word	0x08004931
 800488c:	08004931 	.word	0x08004931
 8004890:	08004931 	.word	0x08004931
 8004894:	08004931 	.word	0x08004931
 8004898:	08004931 	.word	0x08004931
 800489c:	08004931 	.word	0x08004931
 80048a0:	08004931 	.word	0x08004931
 80048a4:	08004931 	.word	0x08004931
 80048a8:	08004931 	.word	0x08004931
 80048ac:	08004931 	.word	0x08004931
 80048b0:	08004931 	.word	0x08004931
 80048b4:	08004931 	.word	0x08004931
 80048b8:	08004909 	.word	0x08004909
 80048bc:	08004931 	.word	0x08004931
 80048c0:	08004931 	.word	0x08004931
 80048c4:	08004931 	.word	0x08004931
 80048c8:	08004931 	.word	0x08004931
 80048cc:	08004931 	.word	0x08004931
 80048d0:	08004931 	.word	0x08004931
 80048d4:	08004931 	.word	0x08004931
 80048d8:	08004931 	.word	0x08004931
 80048dc:	08004931 	.word	0x08004931
 80048e0:	08004903 	.word	0x08004903
 80048e4:	2b64      	cmp	r3, #100	; 0x64
 80048e6:	d009      	beq.n	80048fc <Save_EEPROM+0x7e8>
 80048e8:	e022      	b.n	8004930 <Save_EEPROM+0x81c>
 80048ea:	2301      	movs	r3, #1
 80048ec:	747b      	strb	r3, [r7, #17]
 80048ee:	e021      	b.n	8004934 <Save_EEPROM+0x820>
 80048f0:	2302      	movs	r3, #2
 80048f2:	747b      	strb	r3, [r7, #17]
 80048f4:	e01e      	b.n	8004934 <Save_EEPROM+0x820>
 80048f6:	2303      	movs	r3, #3
 80048f8:	747b      	strb	r3, [r7, #17]
 80048fa:	e01b      	b.n	8004934 <Save_EEPROM+0x820>
 80048fc:	2304      	movs	r3, #4
 80048fe:	747b      	strb	r3, [r7, #17]
 8004900:	e018      	b.n	8004934 <Save_EEPROM+0x820>
 8004902:	2305      	movs	r3, #5
 8004904:	747b      	strb	r3, [r7, #17]
 8004906:	e015      	b.n	8004934 <Save_EEPROM+0x820>
 8004908:	2306      	movs	r3, #6
 800490a:	747b      	strb	r3, [r7, #17]
 800490c:	e012      	b.n	8004934 <Save_EEPROM+0x820>
 800490e:	2307      	movs	r3, #7
 8004910:	747b      	strb	r3, [r7, #17]
 8004912:	e00f      	b.n	8004934 <Save_EEPROM+0x820>
 8004914:	2308      	movs	r3, #8
 8004916:	747b      	strb	r3, [r7, #17]
 8004918:	e00c      	b.n	8004934 <Save_EEPROM+0x820>
 800491a:	2309      	movs	r3, #9
 800491c:	747b      	strb	r3, [r7, #17]
 800491e:	e009      	b.n	8004934 <Save_EEPROM+0x820>
 8004920:	230a      	movs	r3, #10
 8004922:	747b      	strb	r3, [r7, #17]
 8004924:	e006      	b.n	8004934 <Save_EEPROM+0x820>
 8004926:	230b      	movs	r3, #11
 8004928:	747b      	strb	r3, [r7, #17]
 800492a:	e003      	b.n	8004934 <Save_EEPROM+0x820>
 800492c:	20003794 	.word	0x20003794
 8004930:	2300      	movs	r3, #0
 8004932:	747b      	strb	r3, [r7, #17]
 8004934:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[6], perMsg[PDM_SAVE]);
 8004936:	4baa      	ldr	r3, [pc, #680]	; (8004be0 <Save_EEPROM+0xacc>)
 8004938:	89db      	ldrh	r3, [r3, #14]
 800493a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800493e:	f000 8082 	beq.w	8004a46 <Save_EEPROM+0x932>
 8004942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004946:	f300 809f 	bgt.w	8004a88 <Save_EEPROM+0x974>
 800494a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800494e:	d07d      	beq.n	8004a4c <Save_EEPROM+0x938>
 8004950:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004954:	f300 8098 	bgt.w	8004a88 <Save_EEPROM+0x974>
 8004958:	2bc8      	cmp	r3, #200	; 0xc8
 800495a:	d07a      	beq.n	8004a52 <Save_EEPROM+0x93e>
 800495c:	2bc8      	cmp	r3, #200	; 0xc8
 800495e:	f300 8093 	bgt.w	8004a88 <Save_EEPROM+0x974>
 8004962:	2b32      	cmp	r3, #50	; 0x32
 8004964:	dc6c      	bgt.n	8004a40 <Save_EEPROM+0x92c>
 8004966:	2b02      	cmp	r3, #2
 8004968:	f2c0 808e 	blt.w	8004a88 <Save_EEPROM+0x974>
 800496c:	3b02      	subs	r3, #2
 800496e:	2b30      	cmp	r3, #48	; 0x30
 8004970:	f200 808a 	bhi.w	8004a88 <Save_EEPROM+0x974>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <Save_EEPROM+0x868>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	08004a83 	.word	0x08004a83
 8004980:	08004a7d 	.word	0x08004a7d
 8004984:	08004a89 	.word	0x08004a89
 8004988:	08004a77 	.word	0x08004a77
 800498c:	08004a89 	.word	0x08004a89
 8004990:	08004a89 	.word	0x08004a89
 8004994:	08004a89 	.word	0x08004a89
 8004998:	08004a89 	.word	0x08004a89
 800499c:	08004a71 	.word	0x08004a71
 80049a0:	08004a89 	.word	0x08004a89
 80049a4:	08004a89 	.word	0x08004a89
 80049a8:	08004a89 	.word	0x08004a89
 80049ac:	08004a89 	.word	0x08004a89
 80049b0:	08004a89 	.word	0x08004a89
 80049b4:	08004a89 	.word	0x08004a89
 80049b8:	08004a89 	.word	0x08004a89
 80049bc:	08004a89 	.word	0x08004a89
 80049c0:	08004a89 	.word	0x08004a89
 80049c4:	08004a6b 	.word	0x08004a6b
 80049c8:	08004a89 	.word	0x08004a89
 80049cc:	08004a89 	.word	0x08004a89
 80049d0:	08004a89 	.word	0x08004a89
 80049d4:	08004a89 	.word	0x08004a89
 80049d8:	08004a89 	.word	0x08004a89
 80049dc:	08004a89 	.word	0x08004a89
 80049e0:	08004a89 	.word	0x08004a89
 80049e4:	08004a89 	.word	0x08004a89
 80049e8:	08004a89 	.word	0x08004a89
 80049ec:	08004a89 	.word	0x08004a89
 80049f0:	08004a89 	.word	0x08004a89
 80049f4:	08004a89 	.word	0x08004a89
 80049f8:	08004a89 	.word	0x08004a89
 80049fc:	08004a89 	.word	0x08004a89
 8004a00:	08004a89 	.word	0x08004a89
 8004a04:	08004a89 	.word	0x08004a89
 8004a08:	08004a89 	.word	0x08004a89
 8004a0c:	08004a89 	.word	0x08004a89
 8004a10:	08004a89 	.word	0x08004a89
 8004a14:	08004a65 	.word	0x08004a65
 8004a18:	08004a89 	.word	0x08004a89
 8004a1c:	08004a89 	.word	0x08004a89
 8004a20:	08004a89 	.word	0x08004a89
 8004a24:	08004a89 	.word	0x08004a89
 8004a28:	08004a89 	.word	0x08004a89
 8004a2c:	08004a89 	.word	0x08004a89
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	08004a89 	.word	0x08004a89
 8004a38:	08004a89 	.word	0x08004a89
 8004a3c:	08004a5f 	.word	0x08004a5f
 8004a40:	2b64      	cmp	r3, #100	; 0x64
 8004a42:	d009      	beq.n	8004a58 <Save_EEPROM+0x944>
 8004a44:	e020      	b.n	8004a88 <Save_EEPROM+0x974>
 8004a46:	2301      	movs	r3, #1
 8004a48:	74bb      	strb	r3, [r7, #18]
 8004a4a:	e01f      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	74bb      	strb	r3, [r7, #18]
 8004a50:	e01c      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a52:	2303      	movs	r3, #3
 8004a54:	74bb      	strb	r3, [r7, #18]
 8004a56:	e019      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	74bb      	strb	r3, [r7, #18]
 8004a5c:	e016      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a5e:	2305      	movs	r3, #5
 8004a60:	74bb      	strb	r3, [r7, #18]
 8004a62:	e013      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a64:	2306      	movs	r3, #6
 8004a66:	74bb      	strb	r3, [r7, #18]
 8004a68:	e010      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a6a:	2307      	movs	r3, #7
 8004a6c:	74bb      	strb	r3, [r7, #18]
 8004a6e:	e00d      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a70:	2308      	movs	r3, #8
 8004a72:	74bb      	strb	r3, [r7, #18]
 8004a74:	e00a      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a76:	2309      	movs	r3, #9
 8004a78:	74bb      	strb	r3, [r7, #18]
 8004a7a:	e007      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a7c:	230a      	movs	r3, #10
 8004a7e:	74bb      	strb	r3, [r7, #18]
 8004a80:	e004      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a82:	230b      	movs	r3, #11
 8004a84:	74bb      	strb	r3, [r7, #18]
 8004a86:	e001      	b.n	8004a8c <Save_EEPROM+0x978>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	74bb      	strb	r3, [r7, #18]
 8004a8c:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[7], perCAN[ANALOG_1_4]);
 8004a8e:	4b55      	ldr	r3, [pc, #340]	; (8004be4 <Save_EEPROM+0xad0>)
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a96:	f000 8082 	beq.w	8004b9e <Save_EEPROM+0xa8a>
 8004a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a9e:	f300 80a3 	bgt.w	8004be8 <Save_EEPROM+0xad4>
 8004aa2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004aa6:	d07d      	beq.n	8004ba4 <Save_EEPROM+0xa90>
 8004aa8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004aac:	f300 809c 	bgt.w	8004be8 <Save_EEPROM+0xad4>
 8004ab0:	2bc8      	cmp	r3, #200	; 0xc8
 8004ab2:	d07a      	beq.n	8004baa <Save_EEPROM+0xa96>
 8004ab4:	2bc8      	cmp	r3, #200	; 0xc8
 8004ab6:	f300 8097 	bgt.w	8004be8 <Save_EEPROM+0xad4>
 8004aba:	2b32      	cmp	r3, #50	; 0x32
 8004abc:	dc6c      	bgt.n	8004b98 <Save_EEPROM+0xa84>
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	f2c0 8092 	blt.w	8004be8 <Save_EEPROM+0xad4>
 8004ac4:	3b02      	subs	r3, #2
 8004ac6:	2b30      	cmp	r3, #48	; 0x30
 8004ac8:	f200 808e 	bhi.w	8004be8 <Save_EEPROM+0xad4>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <Save_EEPROM+0x9c0>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004bdb 	.word	0x08004bdb
 8004ad8:	08004bd5 	.word	0x08004bd5
 8004adc:	08004be9 	.word	0x08004be9
 8004ae0:	08004bcf 	.word	0x08004bcf
 8004ae4:	08004be9 	.word	0x08004be9
 8004ae8:	08004be9 	.word	0x08004be9
 8004aec:	08004be9 	.word	0x08004be9
 8004af0:	08004be9 	.word	0x08004be9
 8004af4:	08004bc9 	.word	0x08004bc9
 8004af8:	08004be9 	.word	0x08004be9
 8004afc:	08004be9 	.word	0x08004be9
 8004b00:	08004be9 	.word	0x08004be9
 8004b04:	08004be9 	.word	0x08004be9
 8004b08:	08004be9 	.word	0x08004be9
 8004b0c:	08004be9 	.word	0x08004be9
 8004b10:	08004be9 	.word	0x08004be9
 8004b14:	08004be9 	.word	0x08004be9
 8004b18:	08004be9 	.word	0x08004be9
 8004b1c:	08004bc3 	.word	0x08004bc3
 8004b20:	08004be9 	.word	0x08004be9
 8004b24:	08004be9 	.word	0x08004be9
 8004b28:	08004be9 	.word	0x08004be9
 8004b2c:	08004be9 	.word	0x08004be9
 8004b30:	08004be9 	.word	0x08004be9
 8004b34:	08004be9 	.word	0x08004be9
 8004b38:	08004be9 	.word	0x08004be9
 8004b3c:	08004be9 	.word	0x08004be9
 8004b40:	08004be9 	.word	0x08004be9
 8004b44:	08004be9 	.word	0x08004be9
 8004b48:	08004be9 	.word	0x08004be9
 8004b4c:	08004be9 	.word	0x08004be9
 8004b50:	08004be9 	.word	0x08004be9
 8004b54:	08004be9 	.word	0x08004be9
 8004b58:	08004be9 	.word	0x08004be9
 8004b5c:	08004be9 	.word	0x08004be9
 8004b60:	08004be9 	.word	0x08004be9
 8004b64:	08004be9 	.word	0x08004be9
 8004b68:	08004be9 	.word	0x08004be9
 8004b6c:	08004bbd 	.word	0x08004bbd
 8004b70:	08004be9 	.word	0x08004be9
 8004b74:	08004be9 	.word	0x08004be9
 8004b78:	08004be9 	.word	0x08004be9
 8004b7c:	08004be9 	.word	0x08004be9
 8004b80:	08004be9 	.word	0x08004be9
 8004b84:	08004be9 	.word	0x08004be9
 8004b88:	08004be9 	.word	0x08004be9
 8004b8c:	08004be9 	.word	0x08004be9
 8004b90:	08004be9 	.word	0x08004be9
 8004b94:	08004bb7 	.word	0x08004bb7
 8004b98:	2b64      	cmp	r3, #100	; 0x64
 8004b9a:	d009      	beq.n	8004bb0 <Save_EEPROM+0xa9c>
 8004b9c:	e024      	b.n	8004be8 <Save_EEPROM+0xad4>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	74fb      	strb	r3, [r7, #19]
 8004ba2:	e023      	b.n	8004bec <Save_EEPROM+0xad8>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	74fb      	strb	r3, [r7, #19]
 8004ba8:	e020      	b.n	8004bec <Save_EEPROM+0xad8>
 8004baa:	2303      	movs	r3, #3
 8004bac:	74fb      	strb	r3, [r7, #19]
 8004bae:	e01d      	b.n	8004bec <Save_EEPROM+0xad8>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	74fb      	strb	r3, [r7, #19]
 8004bb4:	e01a      	b.n	8004bec <Save_EEPROM+0xad8>
 8004bb6:	2305      	movs	r3, #5
 8004bb8:	74fb      	strb	r3, [r7, #19]
 8004bba:	e017      	b.n	8004bec <Save_EEPROM+0xad8>
 8004bbc:	2306      	movs	r3, #6
 8004bbe:	74fb      	strb	r3, [r7, #19]
 8004bc0:	e014      	b.n	8004bec <Save_EEPROM+0xad8>
 8004bc2:	2307      	movs	r3, #7
 8004bc4:	74fb      	strb	r3, [r7, #19]
 8004bc6:	e011      	b.n	8004bec <Save_EEPROM+0xad8>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	74fb      	strb	r3, [r7, #19]
 8004bcc:	e00e      	b.n	8004bec <Save_EEPROM+0xad8>
 8004bce:	2309      	movs	r3, #9
 8004bd0:	74fb      	strb	r3, [r7, #19]
 8004bd2:	e00b      	b.n	8004bec <Save_EEPROM+0xad8>
 8004bd4:	230a      	movs	r3, #10
 8004bd6:	74fb      	strb	r3, [r7, #19]
 8004bd8:	e008      	b.n	8004bec <Save_EEPROM+0xad8>
 8004bda:	230b      	movs	r3, #11
 8004bdc:	74fb      	strb	r3, [r7, #19]
 8004bde:	e005      	b.n	8004bec <Save_EEPROM+0xad8>
 8004be0:	20003794 	.word	0x20003794
 8004be4:	20003788 	.word	0x20003788
 8004be8:	2300      	movs	r3, #0
 8004bea:	74fb      	strb	r3, [r7, #19]
 8004bec:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[8], perCAN[ANALOG_5_8]);
 8004bee:	4baa      	ldr	r3, [pc, #680]	; (8004e98 <Save_EEPROM+0xd84>)
 8004bf0:	885b      	ldrh	r3, [r3, #2]
 8004bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bf6:	f000 8082 	beq.w	8004cfe <Save_EEPROM+0xbea>
 8004bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bfe:	f300 809f 	bgt.w	8004d40 <Save_EEPROM+0xc2c>
 8004c02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c06:	d07d      	beq.n	8004d04 <Save_EEPROM+0xbf0>
 8004c08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c0c:	f300 8098 	bgt.w	8004d40 <Save_EEPROM+0xc2c>
 8004c10:	2bc8      	cmp	r3, #200	; 0xc8
 8004c12:	d07a      	beq.n	8004d0a <Save_EEPROM+0xbf6>
 8004c14:	2bc8      	cmp	r3, #200	; 0xc8
 8004c16:	f300 8093 	bgt.w	8004d40 <Save_EEPROM+0xc2c>
 8004c1a:	2b32      	cmp	r3, #50	; 0x32
 8004c1c:	dc6c      	bgt.n	8004cf8 <Save_EEPROM+0xbe4>
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	f2c0 808e 	blt.w	8004d40 <Save_EEPROM+0xc2c>
 8004c24:	3b02      	subs	r3, #2
 8004c26:	2b30      	cmp	r3, #48	; 0x30
 8004c28:	f200 808a 	bhi.w	8004d40 <Save_EEPROM+0xc2c>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <Save_EEPROM+0xb20>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004d3b 	.word	0x08004d3b
 8004c38:	08004d35 	.word	0x08004d35
 8004c3c:	08004d41 	.word	0x08004d41
 8004c40:	08004d2f 	.word	0x08004d2f
 8004c44:	08004d41 	.word	0x08004d41
 8004c48:	08004d41 	.word	0x08004d41
 8004c4c:	08004d41 	.word	0x08004d41
 8004c50:	08004d41 	.word	0x08004d41
 8004c54:	08004d29 	.word	0x08004d29
 8004c58:	08004d41 	.word	0x08004d41
 8004c5c:	08004d41 	.word	0x08004d41
 8004c60:	08004d41 	.word	0x08004d41
 8004c64:	08004d41 	.word	0x08004d41
 8004c68:	08004d41 	.word	0x08004d41
 8004c6c:	08004d41 	.word	0x08004d41
 8004c70:	08004d41 	.word	0x08004d41
 8004c74:	08004d41 	.word	0x08004d41
 8004c78:	08004d41 	.word	0x08004d41
 8004c7c:	08004d23 	.word	0x08004d23
 8004c80:	08004d41 	.word	0x08004d41
 8004c84:	08004d41 	.word	0x08004d41
 8004c88:	08004d41 	.word	0x08004d41
 8004c8c:	08004d41 	.word	0x08004d41
 8004c90:	08004d41 	.word	0x08004d41
 8004c94:	08004d41 	.word	0x08004d41
 8004c98:	08004d41 	.word	0x08004d41
 8004c9c:	08004d41 	.word	0x08004d41
 8004ca0:	08004d41 	.word	0x08004d41
 8004ca4:	08004d41 	.word	0x08004d41
 8004ca8:	08004d41 	.word	0x08004d41
 8004cac:	08004d41 	.word	0x08004d41
 8004cb0:	08004d41 	.word	0x08004d41
 8004cb4:	08004d41 	.word	0x08004d41
 8004cb8:	08004d41 	.word	0x08004d41
 8004cbc:	08004d41 	.word	0x08004d41
 8004cc0:	08004d41 	.word	0x08004d41
 8004cc4:	08004d41 	.word	0x08004d41
 8004cc8:	08004d41 	.word	0x08004d41
 8004ccc:	08004d1d 	.word	0x08004d1d
 8004cd0:	08004d41 	.word	0x08004d41
 8004cd4:	08004d41 	.word	0x08004d41
 8004cd8:	08004d41 	.word	0x08004d41
 8004cdc:	08004d41 	.word	0x08004d41
 8004ce0:	08004d41 	.word	0x08004d41
 8004ce4:	08004d41 	.word	0x08004d41
 8004ce8:	08004d41 	.word	0x08004d41
 8004cec:	08004d41 	.word	0x08004d41
 8004cf0:	08004d41 	.word	0x08004d41
 8004cf4:	08004d17 	.word	0x08004d17
 8004cf8:	2b64      	cmp	r3, #100	; 0x64
 8004cfa:	d009      	beq.n	8004d10 <Save_EEPROM+0xbfc>
 8004cfc:	e020      	b.n	8004d40 <Save_EEPROM+0xc2c>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	753b      	strb	r3, [r7, #20]
 8004d02:	e01f      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d04:	2302      	movs	r3, #2
 8004d06:	753b      	strb	r3, [r7, #20]
 8004d08:	e01c      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	753b      	strb	r3, [r7, #20]
 8004d0e:	e019      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d10:	2304      	movs	r3, #4
 8004d12:	753b      	strb	r3, [r7, #20]
 8004d14:	e016      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d16:	2305      	movs	r3, #5
 8004d18:	753b      	strb	r3, [r7, #20]
 8004d1a:	e013      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d1c:	2306      	movs	r3, #6
 8004d1e:	753b      	strb	r3, [r7, #20]
 8004d20:	e010      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d22:	2307      	movs	r3, #7
 8004d24:	753b      	strb	r3, [r7, #20]
 8004d26:	e00d      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	753b      	strb	r3, [r7, #20]
 8004d2c:	e00a      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d2e:	2309      	movs	r3, #9
 8004d30:	753b      	strb	r3, [r7, #20]
 8004d32:	e007      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d34:	230a      	movs	r3, #10
 8004d36:	753b      	strb	r3, [r7, #20]
 8004d38:	e004      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d3a:	230b      	movs	r3, #11
 8004d3c:	753b      	strb	r3, [r7, #20]
 8004d3e:	e001      	b.n	8004d44 <Save_EEPROM+0xc30>
 8004d40:	2300      	movs	r3, #0
 8004d42:	753b      	strb	r3, [r7, #20]
 8004d44:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[9], perCAN[ANALOG_9_12]);
 8004d46:	4b54      	ldr	r3, [pc, #336]	; (8004e98 <Save_EEPROM+0xd84>)
 8004d48:	889b      	ldrh	r3, [r3, #4]
 8004d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d4e:	f000 8082 	beq.w	8004e56 <Save_EEPROM+0xd42>
 8004d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d56:	f300 80a1 	bgt.w	8004e9c <Save_EEPROM+0xd88>
 8004d5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d5e:	d07d      	beq.n	8004e5c <Save_EEPROM+0xd48>
 8004d60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d64:	f300 809a 	bgt.w	8004e9c <Save_EEPROM+0xd88>
 8004d68:	2bc8      	cmp	r3, #200	; 0xc8
 8004d6a:	d07a      	beq.n	8004e62 <Save_EEPROM+0xd4e>
 8004d6c:	2bc8      	cmp	r3, #200	; 0xc8
 8004d6e:	f300 8095 	bgt.w	8004e9c <Save_EEPROM+0xd88>
 8004d72:	2b32      	cmp	r3, #50	; 0x32
 8004d74:	dc6c      	bgt.n	8004e50 <Save_EEPROM+0xd3c>
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	f2c0 8090 	blt.w	8004e9c <Save_EEPROM+0xd88>
 8004d7c:	3b02      	subs	r3, #2
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	f200 808c 	bhi.w	8004e9c <Save_EEPROM+0xd88>
 8004d84:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <Save_EEPROM+0xc78>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004e93 	.word	0x08004e93
 8004d90:	08004e8d 	.word	0x08004e8d
 8004d94:	08004e9d 	.word	0x08004e9d
 8004d98:	08004e87 	.word	0x08004e87
 8004d9c:	08004e9d 	.word	0x08004e9d
 8004da0:	08004e9d 	.word	0x08004e9d
 8004da4:	08004e9d 	.word	0x08004e9d
 8004da8:	08004e9d 	.word	0x08004e9d
 8004dac:	08004e81 	.word	0x08004e81
 8004db0:	08004e9d 	.word	0x08004e9d
 8004db4:	08004e9d 	.word	0x08004e9d
 8004db8:	08004e9d 	.word	0x08004e9d
 8004dbc:	08004e9d 	.word	0x08004e9d
 8004dc0:	08004e9d 	.word	0x08004e9d
 8004dc4:	08004e9d 	.word	0x08004e9d
 8004dc8:	08004e9d 	.word	0x08004e9d
 8004dcc:	08004e9d 	.word	0x08004e9d
 8004dd0:	08004e9d 	.word	0x08004e9d
 8004dd4:	08004e7b 	.word	0x08004e7b
 8004dd8:	08004e9d 	.word	0x08004e9d
 8004ddc:	08004e9d 	.word	0x08004e9d
 8004de0:	08004e9d 	.word	0x08004e9d
 8004de4:	08004e9d 	.word	0x08004e9d
 8004de8:	08004e9d 	.word	0x08004e9d
 8004dec:	08004e9d 	.word	0x08004e9d
 8004df0:	08004e9d 	.word	0x08004e9d
 8004df4:	08004e9d 	.word	0x08004e9d
 8004df8:	08004e9d 	.word	0x08004e9d
 8004dfc:	08004e9d 	.word	0x08004e9d
 8004e00:	08004e9d 	.word	0x08004e9d
 8004e04:	08004e9d 	.word	0x08004e9d
 8004e08:	08004e9d 	.word	0x08004e9d
 8004e0c:	08004e9d 	.word	0x08004e9d
 8004e10:	08004e9d 	.word	0x08004e9d
 8004e14:	08004e9d 	.word	0x08004e9d
 8004e18:	08004e9d 	.word	0x08004e9d
 8004e1c:	08004e9d 	.word	0x08004e9d
 8004e20:	08004e9d 	.word	0x08004e9d
 8004e24:	08004e75 	.word	0x08004e75
 8004e28:	08004e9d 	.word	0x08004e9d
 8004e2c:	08004e9d 	.word	0x08004e9d
 8004e30:	08004e9d 	.word	0x08004e9d
 8004e34:	08004e9d 	.word	0x08004e9d
 8004e38:	08004e9d 	.word	0x08004e9d
 8004e3c:	08004e9d 	.word	0x08004e9d
 8004e40:	08004e9d 	.word	0x08004e9d
 8004e44:	08004e9d 	.word	0x08004e9d
 8004e48:	08004e9d 	.word	0x08004e9d
 8004e4c:	08004e6f 	.word	0x08004e6f
 8004e50:	2b64      	cmp	r3, #100	; 0x64
 8004e52:	d009      	beq.n	8004e68 <Save_EEPROM+0xd54>
 8004e54:	e022      	b.n	8004e9c <Save_EEPROM+0xd88>
 8004e56:	2301      	movs	r3, #1
 8004e58:	757b      	strb	r3, [r7, #21]
 8004e5a:	e021      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	757b      	strb	r3, [r7, #21]
 8004e60:	e01e      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e62:	2303      	movs	r3, #3
 8004e64:	757b      	strb	r3, [r7, #21]
 8004e66:	e01b      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	757b      	strb	r3, [r7, #21]
 8004e6c:	e018      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e6e:	2305      	movs	r3, #5
 8004e70:	757b      	strb	r3, [r7, #21]
 8004e72:	e015      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e74:	2306      	movs	r3, #6
 8004e76:	757b      	strb	r3, [r7, #21]
 8004e78:	e012      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e7a:	2307      	movs	r3, #7
 8004e7c:	757b      	strb	r3, [r7, #21]
 8004e7e:	e00f      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e80:	2308      	movs	r3, #8
 8004e82:	757b      	strb	r3, [r7, #21]
 8004e84:	e00c      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e86:	2309      	movs	r3, #9
 8004e88:	757b      	strb	r3, [r7, #21]
 8004e8a:	e009      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e8c:	230a      	movs	r3, #10
 8004e8e:	757b      	strb	r3, [r7, #21]
 8004e90:	e006      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e92:	230b      	movs	r3, #11
 8004e94:	757b      	strb	r3, [r7, #21]
 8004e96:	e003      	b.n	8004ea0 <Save_EEPROM+0xd8c>
 8004e98:	20003788 	.word	0x20003788
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	757b      	strb	r3, [r7, #21]
 8004ea0:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[10], perCAN[RTC_MSG]);
 8004ea2:	4bc8      	ldr	r3, [pc, #800]	; (80051c4 <Save_EEPROM+0x10b0>)
 8004ea4:	88db      	ldrh	r3, [r3, #6]
 8004ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eaa:	f000 8082 	beq.w	8004fb2 <Save_EEPROM+0xe9e>
 8004eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb2:	f300 809f 	bgt.w	8004ff4 <Save_EEPROM+0xee0>
 8004eb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004eba:	d07d      	beq.n	8004fb8 <Save_EEPROM+0xea4>
 8004ebc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ec0:	f300 8098 	bgt.w	8004ff4 <Save_EEPROM+0xee0>
 8004ec4:	2bc8      	cmp	r3, #200	; 0xc8
 8004ec6:	d07a      	beq.n	8004fbe <Save_EEPROM+0xeaa>
 8004ec8:	2bc8      	cmp	r3, #200	; 0xc8
 8004eca:	f300 8093 	bgt.w	8004ff4 <Save_EEPROM+0xee0>
 8004ece:	2b32      	cmp	r3, #50	; 0x32
 8004ed0:	dc6c      	bgt.n	8004fac <Save_EEPROM+0xe98>
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	f2c0 808e 	blt.w	8004ff4 <Save_EEPROM+0xee0>
 8004ed8:	3b02      	subs	r3, #2
 8004eda:	2b30      	cmp	r3, #48	; 0x30
 8004edc:	f200 808a 	bhi.w	8004ff4 <Save_EEPROM+0xee0>
 8004ee0:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <Save_EEPROM+0xdd4>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004fef 	.word	0x08004fef
 8004eec:	08004fe9 	.word	0x08004fe9
 8004ef0:	08004ff5 	.word	0x08004ff5
 8004ef4:	08004fe3 	.word	0x08004fe3
 8004ef8:	08004ff5 	.word	0x08004ff5
 8004efc:	08004ff5 	.word	0x08004ff5
 8004f00:	08004ff5 	.word	0x08004ff5
 8004f04:	08004ff5 	.word	0x08004ff5
 8004f08:	08004fdd 	.word	0x08004fdd
 8004f0c:	08004ff5 	.word	0x08004ff5
 8004f10:	08004ff5 	.word	0x08004ff5
 8004f14:	08004ff5 	.word	0x08004ff5
 8004f18:	08004ff5 	.word	0x08004ff5
 8004f1c:	08004ff5 	.word	0x08004ff5
 8004f20:	08004ff5 	.word	0x08004ff5
 8004f24:	08004ff5 	.word	0x08004ff5
 8004f28:	08004ff5 	.word	0x08004ff5
 8004f2c:	08004ff5 	.word	0x08004ff5
 8004f30:	08004fd7 	.word	0x08004fd7
 8004f34:	08004ff5 	.word	0x08004ff5
 8004f38:	08004ff5 	.word	0x08004ff5
 8004f3c:	08004ff5 	.word	0x08004ff5
 8004f40:	08004ff5 	.word	0x08004ff5
 8004f44:	08004ff5 	.word	0x08004ff5
 8004f48:	08004ff5 	.word	0x08004ff5
 8004f4c:	08004ff5 	.word	0x08004ff5
 8004f50:	08004ff5 	.word	0x08004ff5
 8004f54:	08004ff5 	.word	0x08004ff5
 8004f58:	08004ff5 	.word	0x08004ff5
 8004f5c:	08004ff5 	.word	0x08004ff5
 8004f60:	08004ff5 	.word	0x08004ff5
 8004f64:	08004ff5 	.word	0x08004ff5
 8004f68:	08004ff5 	.word	0x08004ff5
 8004f6c:	08004ff5 	.word	0x08004ff5
 8004f70:	08004ff5 	.word	0x08004ff5
 8004f74:	08004ff5 	.word	0x08004ff5
 8004f78:	08004ff5 	.word	0x08004ff5
 8004f7c:	08004ff5 	.word	0x08004ff5
 8004f80:	08004fd1 	.word	0x08004fd1
 8004f84:	08004ff5 	.word	0x08004ff5
 8004f88:	08004ff5 	.word	0x08004ff5
 8004f8c:	08004ff5 	.word	0x08004ff5
 8004f90:	08004ff5 	.word	0x08004ff5
 8004f94:	08004ff5 	.word	0x08004ff5
 8004f98:	08004ff5 	.word	0x08004ff5
 8004f9c:	08004ff5 	.word	0x08004ff5
 8004fa0:	08004ff5 	.word	0x08004ff5
 8004fa4:	08004ff5 	.word	0x08004ff5
 8004fa8:	08004fcb 	.word	0x08004fcb
 8004fac:	2b64      	cmp	r3, #100	; 0x64
 8004fae:	d009      	beq.n	8004fc4 <Save_EEPROM+0xeb0>
 8004fb0:	e020      	b.n	8004ff4 <Save_EEPROM+0xee0>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75bb      	strb	r3, [r7, #22]
 8004fb6:	e01f      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	75bb      	strb	r3, [r7, #22]
 8004fbc:	e01c      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	75bb      	strb	r3, [r7, #22]
 8004fc2:	e019      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	75bb      	strb	r3, [r7, #22]
 8004fc8:	e016      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004fca:	2305      	movs	r3, #5
 8004fcc:	75bb      	strb	r3, [r7, #22]
 8004fce:	e013      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004fd0:	2306      	movs	r3, #6
 8004fd2:	75bb      	strb	r3, [r7, #22]
 8004fd4:	e010      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004fd6:	2307      	movs	r3, #7
 8004fd8:	75bb      	strb	r3, [r7, #22]
 8004fda:	e00d      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004fdc:	2308      	movs	r3, #8
 8004fde:	75bb      	strb	r3, [r7, #22]
 8004fe0:	e00a      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004fe2:	2309      	movs	r3, #9
 8004fe4:	75bb      	strb	r3, [r7, #22]
 8004fe6:	e007      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004fe8:	230a      	movs	r3, #10
 8004fea:	75bb      	strb	r3, [r7, #22]
 8004fec:	e004      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004fee:	230b      	movs	r3, #11
 8004ff0:	75bb      	strb	r3, [r7, #22]
 8004ff2:	e001      	b.n	8004ff8 <Save_EEPROM+0xee4>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	75bb      	strb	r3, [r7, #22]
 8004ff8:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[10], perCAN[VERIFY_MSG]);
 8004ffa:	4b72      	ldr	r3, [pc, #456]	; (80051c4 <Save_EEPROM+0x10b0>)
 8004ffc:	891b      	ldrh	r3, [r3, #8]
 8004ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005002:	f000 8082 	beq.w	800510a <Save_EEPROM+0xff6>
 8005006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800500a:	f300 809f 	bgt.w	800514c <Save_EEPROM+0x1038>
 800500e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005012:	d07d      	beq.n	8005110 <Save_EEPROM+0xffc>
 8005014:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005018:	f300 8098 	bgt.w	800514c <Save_EEPROM+0x1038>
 800501c:	2bc8      	cmp	r3, #200	; 0xc8
 800501e:	d07a      	beq.n	8005116 <Save_EEPROM+0x1002>
 8005020:	2bc8      	cmp	r3, #200	; 0xc8
 8005022:	f300 8093 	bgt.w	800514c <Save_EEPROM+0x1038>
 8005026:	2b32      	cmp	r3, #50	; 0x32
 8005028:	dc6c      	bgt.n	8005104 <Save_EEPROM+0xff0>
 800502a:	2b02      	cmp	r3, #2
 800502c:	f2c0 808e 	blt.w	800514c <Save_EEPROM+0x1038>
 8005030:	3b02      	subs	r3, #2
 8005032:	2b30      	cmp	r3, #48	; 0x30
 8005034:	f200 808a 	bhi.w	800514c <Save_EEPROM+0x1038>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <Save_EEPROM+0xf2c>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005147 	.word	0x08005147
 8005044:	08005141 	.word	0x08005141
 8005048:	0800514d 	.word	0x0800514d
 800504c:	0800513b 	.word	0x0800513b
 8005050:	0800514d 	.word	0x0800514d
 8005054:	0800514d 	.word	0x0800514d
 8005058:	0800514d 	.word	0x0800514d
 800505c:	0800514d 	.word	0x0800514d
 8005060:	08005135 	.word	0x08005135
 8005064:	0800514d 	.word	0x0800514d
 8005068:	0800514d 	.word	0x0800514d
 800506c:	0800514d 	.word	0x0800514d
 8005070:	0800514d 	.word	0x0800514d
 8005074:	0800514d 	.word	0x0800514d
 8005078:	0800514d 	.word	0x0800514d
 800507c:	0800514d 	.word	0x0800514d
 8005080:	0800514d 	.word	0x0800514d
 8005084:	0800514d 	.word	0x0800514d
 8005088:	0800512f 	.word	0x0800512f
 800508c:	0800514d 	.word	0x0800514d
 8005090:	0800514d 	.word	0x0800514d
 8005094:	0800514d 	.word	0x0800514d
 8005098:	0800514d 	.word	0x0800514d
 800509c:	0800514d 	.word	0x0800514d
 80050a0:	0800514d 	.word	0x0800514d
 80050a4:	0800514d 	.word	0x0800514d
 80050a8:	0800514d 	.word	0x0800514d
 80050ac:	0800514d 	.word	0x0800514d
 80050b0:	0800514d 	.word	0x0800514d
 80050b4:	0800514d 	.word	0x0800514d
 80050b8:	0800514d 	.word	0x0800514d
 80050bc:	0800514d 	.word	0x0800514d
 80050c0:	0800514d 	.word	0x0800514d
 80050c4:	0800514d 	.word	0x0800514d
 80050c8:	0800514d 	.word	0x0800514d
 80050cc:	0800514d 	.word	0x0800514d
 80050d0:	0800514d 	.word	0x0800514d
 80050d4:	0800514d 	.word	0x0800514d
 80050d8:	08005129 	.word	0x08005129
 80050dc:	0800514d 	.word	0x0800514d
 80050e0:	0800514d 	.word	0x0800514d
 80050e4:	0800514d 	.word	0x0800514d
 80050e8:	0800514d 	.word	0x0800514d
 80050ec:	0800514d 	.word	0x0800514d
 80050f0:	0800514d 	.word	0x0800514d
 80050f4:	0800514d 	.word	0x0800514d
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	0800514d 	.word	0x0800514d
 8005100:	08005123 	.word	0x08005123
 8005104:	2b64      	cmp	r3, #100	; 0x64
 8005106:	d009      	beq.n	800511c <Save_EEPROM+0x1008>
 8005108:	e020      	b.n	800514c <Save_EEPROM+0x1038>
 800510a:	2301      	movs	r3, #1
 800510c:	75bb      	strb	r3, [r7, #22]
 800510e:	e01f      	b.n	8005150 <Save_EEPROM+0x103c>
 8005110:	2302      	movs	r3, #2
 8005112:	75bb      	strb	r3, [r7, #22]
 8005114:	e01c      	b.n	8005150 <Save_EEPROM+0x103c>
 8005116:	2303      	movs	r3, #3
 8005118:	75bb      	strb	r3, [r7, #22]
 800511a:	e019      	b.n	8005150 <Save_EEPROM+0x103c>
 800511c:	2304      	movs	r3, #4
 800511e:	75bb      	strb	r3, [r7, #22]
 8005120:	e016      	b.n	8005150 <Save_EEPROM+0x103c>
 8005122:	2305      	movs	r3, #5
 8005124:	75bb      	strb	r3, [r7, #22]
 8005126:	e013      	b.n	8005150 <Save_EEPROM+0x103c>
 8005128:	2306      	movs	r3, #6
 800512a:	75bb      	strb	r3, [r7, #22]
 800512c:	e010      	b.n	8005150 <Save_EEPROM+0x103c>
 800512e:	2307      	movs	r3, #7
 8005130:	75bb      	strb	r3, [r7, #22]
 8005132:	e00d      	b.n	8005150 <Save_EEPROM+0x103c>
 8005134:	2308      	movs	r3, #8
 8005136:	75bb      	strb	r3, [r7, #22]
 8005138:	e00a      	b.n	8005150 <Save_EEPROM+0x103c>
 800513a:	2309      	movs	r3, #9
 800513c:	75bb      	strb	r3, [r7, #22]
 800513e:	e007      	b.n	8005150 <Save_EEPROM+0x103c>
 8005140:	230a      	movs	r3, #10
 8005142:	75bb      	strb	r3, [r7, #22]
 8005144:	e004      	b.n	8005150 <Save_EEPROM+0x103c>
 8005146:	230b      	movs	r3, #11
 8005148:	75bb      	strb	r3, [r7, #22]
 800514a:	e001      	b.n	8005150 <Save_EEPROM+0x103c>
 800514c:	2300      	movs	r3, #0
 800514e:	75bb      	strb	r3, [r7, #22]
 8005150:	bf00      	nop

	buffer[12] = inputConfig;
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <Save_EEPROM+0x10b4>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	763b      	strb	r3, [r7, #24]
	buffer[13] = thresholdBeacon >> 8;
 8005158:	4b1c      	ldr	r3, [pc, #112]	; (80051cc <Save_EEPROM+0x10b8>)
 800515a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800515e:	121b      	asrs	r3, r3, #8
 8005160:	b21b      	sxth	r3, r3
 8005162:	b2db      	uxtb	r3, r3
 8005164:	767b      	strb	r3, [r7, #25]
	buffer[14] = thresholdBeacon & 0xff;
 8005166:	4b19      	ldr	r3, [pc, #100]	; (80051cc <Save_EEPROM+0x10b8>)
 8005168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	76bb      	strb	r3, [r7, #26]
	buffer[15] = thresholdRPM >> 8;
 8005170:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <Save_EEPROM+0x10bc>)
 8005172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005176:	121b      	asrs	r3, r3, #8
 8005178:	b21b      	sxth	r3, r3
 800517a:	b2db      	uxtb	r3, r3
 800517c:	76fb      	strb	r3, [r7, #27]
	buffer[16] = thresholdRPM & 0xff;
 800517e:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <Save_EEPROM+0x10bc>)
 8005180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	773b      	strb	r3, [r7, #28]
	buffer[17] = thresholdSpeed >> 8;
 8005188:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <Save_EEPROM+0x10c0>)
 800518a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800518e:	121b      	asrs	r3, r3, #8
 8005190:	b21b      	sxth	r3, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	777b      	strb	r3, [r7, #29]
	buffer[18] = thresholdSpeed & 0xff;
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <Save_EEPROM+0x10c0>)
 8005198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	77bb      	strb	r3, [r7, #30]

	return HAL_I2C_Mem_Write(hi2c, 0xA0, 0x0000, 1, buffer, EEPROM_BUFFER_SIZE, 5);
 80051a0:	2305      	movs	r3, #5
 80051a2:	9302      	str	r3, [sp, #8]
 80051a4:	2311      	movs	r3, #17
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	f107 030c 	add.w	r3, r7, #12
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	2301      	movs	r3, #1
 80051b0:	2200      	movs	r2, #0
 80051b2:	21a0      	movs	r1, #160	; 0xa0
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f004 f847 	bl	8009248 <HAL_I2C_Mem_Write>
 80051ba:	4603      	mov	r3, r0

//	return HAL_I2C_Master_Transmit(hi2c, 0xA0, buffer, EEPROM_BUFFER_SIZE, 5);
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20003788 	.word	0x20003788
 80051c8:	2000376c 	.word	0x2000376c
 80051cc:	20001692 	.word	0x20001692
 80051d0:	20001694 	.word	0x20001694
 80051d4:	20001696 	.word	0x20001696

080051d8 <Principal_Init>:

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 80051e4:	68b8      	ldr	r0, [r7, #8]
 80051e6:	f7fe fb7b 	bl	80038e0 <Load_EEPROM>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 80051f0:	f000 fcde 	bl	8005bb0 <Principal_Hard_Code_Config>

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 80051f4:	2101      	movs	r1, #1
 80051f6:	4813      	ldr	r0, [pc, #76]	; (8005244 <Principal_Init+0x6c>)
 80051f8:	f007 fd8a 	bl	800cd10 <HAL_RTCEx_BKUPRead>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8005202:	4293      	cmp	r3, r2
 8005204:	d103      	bne.n	800520e <Principal_Init+0x36>
		flagRTC = RTC_OK;
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <Principal_Init+0x70>)
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e002      	b.n	8005214 <Principal_Init+0x3c>
	else
		flagRTC = RTC_LOST;
 800520e:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <Principal_Init+0x70>)
 8005210:	2201      	movs	r2, #1
 8005212:	701a      	strb	r2, [r3, #0]

	Principal_Datalogger_Init(&fatfsStruct);
 8005214:	480d      	ldr	r0, [pc, #52]	; (800524c <Principal_Init+0x74>)
 8005216:	f000 fd1b 	bl	8005c50 <Principal_Datalogger_Init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[6], 7);
 800521a:	2207      	movs	r2, #7
 800521c:	490c      	ldr	r1, [pc, #48]	; (8005250 <Principal_Init+0x78>)
 800521e:	480d      	ldr	r0, [pc, #52]	; (8005254 <Principal_Init+0x7c>)
 8005220:	f001 fdb0 	bl	8006d84 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 6);
 8005224:	2206      	movs	r2, #6
 8005226:	490c      	ldr	r1, [pc, #48]	; (8005258 <Principal_Init+0x80>)
 8005228:	480c      	ldr	r0, [pc, #48]	; (800525c <Principal_Init+0x84>)
 800522a:	f001 fdab 	bl	8006d84 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f009 fc54 	bl	800eadc <HAL_TIM_Base_Start_IT>

	Principal_CAN_Start(hcan);
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f7fe faab 	bl	8003790 <Principal_CAN_Start>
}
 800523a:	bf00      	nop
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	200003cc 	.word	0x200003cc
 8005248:	2000376b 	.word	0x2000376b
 800524c:	200016c8 	.word	0x200016c8
 8005250:	200005d8 	.word	0x200005d8
 8005254:	200001f4 	.word	0x200001f4
 8005258:	200005cc 	.word	0x200005cc
 800525c:	2000023c 	.word	0x2000023c

08005260 <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data, uint32_t length)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
	HAL_SD_StateTypeDef retVal = HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	75fb      	strb	r3, [r7, #23]

	switch(data[0])
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b03      	cmp	r3, #3
 8005276:	f200 847e 	bhi.w	8005b76 <Principal_Receive_Config+0x916>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <Principal_Receive_Config+0x20>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	08005291 	.word	0x08005291
 8005284:	08005725 	.word	0x08005725
 8005288:	08005a85 	.word	0x08005a85
 800528c:	08005b03 	.word	0x08005b03
	{
		case 0:
			if(length != 8)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b08      	cmp	r3, #8
 8005294:	f040 8471 	bne.w	8005b7a <Principal_Receive_Config+0x91a>
				break;

			__BUFFER_TO_FREQ(data[1], perMsg[ANALOG_1_4]);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	3301      	adds	r3, #1
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	3b01      	subs	r3, #1
 80052a0:	2b0a      	cmp	r3, #10
 80052a2:	d847      	bhi.n	8005334 <Principal_Receive_Config+0xd4>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <Principal_Receive_Config+0x4c>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052e3 	.word	0x080052e3
 80052b4:	080052ed 	.word	0x080052ed
 80052b8:	080052f5 	.word	0x080052f5
 80052bc:	080052fd 	.word	0x080052fd
 80052c0:	08005305 	.word	0x08005305
 80052c4:	0800530d 	.word	0x0800530d
 80052c8:	08005315 	.word	0x08005315
 80052cc:	0800531d 	.word	0x0800531d
 80052d0:	08005325 	.word	0x08005325
 80052d4:	0800532d 	.word	0x0800532d
 80052d8:	4ba8      	ldr	r3, [pc, #672]	; (800557c <Principal_Receive_Config+0x31c>)
 80052da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052de:	801a      	strh	r2, [r3, #0]
 80052e0:	e02b      	b.n	800533a <Principal_Receive_Config+0xda>
 80052e2:	4ba6      	ldr	r3, [pc, #664]	; (800557c <Principal_Receive_Config+0x31c>)
 80052e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80052e8:	801a      	strh	r2, [r3, #0]
 80052ea:	e026      	b.n	800533a <Principal_Receive_Config+0xda>
 80052ec:	4ba3      	ldr	r3, [pc, #652]	; (800557c <Principal_Receive_Config+0x31c>)
 80052ee:	22c8      	movs	r2, #200	; 0xc8
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	e022      	b.n	800533a <Principal_Receive_Config+0xda>
 80052f4:	4ba1      	ldr	r3, [pc, #644]	; (800557c <Principal_Receive_Config+0x31c>)
 80052f6:	2264      	movs	r2, #100	; 0x64
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	e01e      	b.n	800533a <Principal_Receive_Config+0xda>
 80052fc:	4b9f      	ldr	r3, [pc, #636]	; (800557c <Principal_Receive_Config+0x31c>)
 80052fe:	2232      	movs	r2, #50	; 0x32
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	e01a      	b.n	800533a <Principal_Receive_Config+0xda>
 8005304:	4b9d      	ldr	r3, [pc, #628]	; (800557c <Principal_Receive_Config+0x31c>)
 8005306:	2228      	movs	r2, #40	; 0x28
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	e016      	b.n	800533a <Principal_Receive_Config+0xda>
 800530c:	4b9b      	ldr	r3, [pc, #620]	; (800557c <Principal_Receive_Config+0x31c>)
 800530e:	2214      	movs	r2, #20
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e012      	b.n	800533a <Principal_Receive_Config+0xda>
 8005314:	4b99      	ldr	r3, [pc, #612]	; (800557c <Principal_Receive_Config+0x31c>)
 8005316:	220a      	movs	r2, #10
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	e00e      	b.n	800533a <Principal_Receive_Config+0xda>
 800531c:	4b97      	ldr	r3, [pc, #604]	; (800557c <Principal_Receive_Config+0x31c>)
 800531e:	2205      	movs	r2, #5
 8005320:	801a      	strh	r2, [r3, #0]
 8005322:	e00a      	b.n	800533a <Principal_Receive_Config+0xda>
 8005324:	4b95      	ldr	r3, [pc, #596]	; (800557c <Principal_Receive_Config+0x31c>)
 8005326:	2203      	movs	r2, #3
 8005328:	801a      	strh	r2, [r3, #0]
 800532a:	e006      	b.n	800533a <Principal_Receive_Config+0xda>
 800532c:	4b93      	ldr	r3, [pc, #588]	; (800557c <Principal_Receive_Config+0x31c>)
 800532e:	2202      	movs	r2, #2
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e002      	b.n	800533a <Principal_Receive_Config+0xda>
 8005334:	4b91      	ldr	r3, [pc, #580]	; (800557c <Principal_Receive_Config+0x31c>)
 8005336:	2200      	movs	r2, #0
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perMsg[ANALOG_5_8]);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	3302      	adds	r3, #2
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	3b01      	subs	r3, #1
 8005344:	2b0a      	cmp	r3, #10
 8005346:	d847      	bhi.n	80053d8 <Principal_Receive_Config+0x178>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <Principal_Receive_Config+0xf0>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	0800537d 	.word	0x0800537d
 8005354:	08005387 	.word	0x08005387
 8005358:	08005391 	.word	0x08005391
 800535c:	08005399 	.word	0x08005399
 8005360:	080053a1 	.word	0x080053a1
 8005364:	080053a9 	.word	0x080053a9
 8005368:	080053b1 	.word	0x080053b1
 800536c:	080053b9 	.word	0x080053b9
 8005370:	080053c1 	.word	0x080053c1
 8005374:	080053c9 	.word	0x080053c9
 8005378:	080053d1 	.word	0x080053d1
 800537c:	4b7f      	ldr	r3, [pc, #508]	; (800557c <Principal_Receive_Config+0x31c>)
 800537e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005382:	805a      	strh	r2, [r3, #2]
 8005384:	e02b      	b.n	80053de <Principal_Receive_Config+0x17e>
 8005386:	4b7d      	ldr	r3, [pc, #500]	; (800557c <Principal_Receive_Config+0x31c>)
 8005388:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800538c:	805a      	strh	r2, [r3, #2]
 800538e:	e026      	b.n	80053de <Principal_Receive_Config+0x17e>
 8005390:	4b7a      	ldr	r3, [pc, #488]	; (800557c <Principal_Receive_Config+0x31c>)
 8005392:	22c8      	movs	r2, #200	; 0xc8
 8005394:	805a      	strh	r2, [r3, #2]
 8005396:	e022      	b.n	80053de <Principal_Receive_Config+0x17e>
 8005398:	4b78      	ldr	r3, [pc, #480]	; (800557c <Principal_Receive_Config+0x31c>)
 800539a:	2264      	movs	r2, #100	; 0x64
 800539c:	805a      	strh	r2, [r3, #2]
 800539e:	e01e      	b.n	80053de <Principal_Receive_Config+0x17e>
 80053a0:	4b76      	ldr	r3, [pc, #472]	; (800557c <Principal_Receive_Config+0x31c>)
 80053a2:	2232      	movs	r2, #50	; 0x32
 80053a4:	805a      	strh	r2, [r3, #2]
 80053a6:	e01a      	b.n	80053de <Principal_Receive_Config+0x17e>
 80053a8:	4b74      	ldr	r3, [pc, #464]	; (800557c <Principal_Receive_Config+0x31c>)
 80053aa:	2228      	movs	r2, #40	; 0x28
 80053ac:	805a      	strh	r2, [r3, #2]
 80053ae:	e016      	b.n	80053de <Principal_Receive_Config+0x17e>
 80053b0:	4b72      	ldr	r3, [pc, #456]	; (800557c <Principal_Receive_Config+0x31c>)
 80053b2:	2214      	movs	r2, #20
 80053b4:	805a      	strh	r2, [r3, #2]
 80053b6:	e012      	b.n	80053de <Principal_Receive_Config+0x17e>
 80053b8:	4b70      	ldr	r3, [pc, #448]	; (800557c <Principal_Receive_Config+0x31c>)
 80053ba:	220a      	movs	r2, #10
 80053bc:	805a      	strh	r2, [r3, #2]
 80053be:	e00e      	b.n	80053de <Principal_Receive_Config+0x17e>
 80053c0:	4b6e      	ldr	r3, [pc, #440]	; (800557c <Principal_Receive_Config+0x31c>)
 80053c2:	2205      	movs	r2, #5
 80053c4:	805a      	strh	r2, [r3, #2]
 80053c6:	e00a      	b.n	80053de <Principal_Receive_Config+0x17e>
 80053c8:	4b6c      	ldr	r3, [pc, #432]	; (800557c <Principal_Receive_Config+0x31c>)
 80053ca:	2203      	movs	r2, #3
 80053cc:	805a      	strh	r2, [r3, #2]
 80053ce:	e006      	b.n	80053de <Principal_Receive_Config+0x17e>
 80053d0:	4b6a      	ldr	r3, [pc, #424]	; (800557c <Principal_Receive_Config+0x31c>)
 80053d2:	2202      	movs	r2, #2
 80053d4:	805a      	strh	r2, [r3, #2]
 80053d6:	e002      	b.n	80053de <Principal_Receive_Config+0x17e>
 80053d8:	4b68      	ldr	r3, [pc, #416]	; (800557c <Principal_Receive_Config+0x31c>)
 80053da:	2200      	movs	r2, #0
 80053dc:	805a      	strh	r2, [r3, #2]
 80053de:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perMsg[ANALOG_9_12]);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3303      	adds	r3, #3
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	2b0a      	cmp	r3, #10
 80053ea:	d847      	bhi.n	800547c <Principal_Receive_Config+0x21c>
 80053ec:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <Principal_Receive_Config+0x194>)
 80053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f2:	bf00      	nop
 80053f4:	08005421 	.word	0x08005421
 80053f8:	0800542b 	.word	0x0800542b
 80053fc:	08005435 	.word	0x08005435
 8005400:	0800543d 	.word	0x0800543d
 8005404:	08005445 	.word	0x08005445
 8005408:	0800544d 	.word	0x0800544d
 800540c:	08005455 	.word	0x08005455
 8005410:	0800545d 	.word	0x0800545d
 8005414:	08005465 	.word	0x08005465
 8005418:	0800546d 	.word	0x0800546d
 800541c:	08005475 	.word	0x08005475
 8005420:	4b56      	ldr	r3, [pc, #344]	; (800557c <Principal_Receive_Config+0x31c>)
 8005422:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005426:	809a      	strh	r2, [r3, #4]
 8005428:	e02b      	b.n	8005482 <Principal_Receive_Config+0x222>
 800542a:	4b54      	ldr	r3, [pc, #336]	; (800557c <Principal_Receive_Config+0x31c>)
 800542c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005430:	809a      	strh	r2, [r3, #4]
 8005432:	e026      	b.n	8005482 <Principal_Receive_Config+0x222>
 8005434:	4b51      	ldr	r3, [pc, #324]	; (800557c <Principal_Receive_Config+0x31c>)
 8005436:	22c8      	movs	r2, #200	; 0xc8
 8005438:	809a      	strh	r2, [r3, #4]
 800543a:	e022      	b.n	8005482 <Principal_Receive_Config+0x222>
 800543c:	4b4f      	ldr	r3, [pc, #316]	; (800557c <Principal_Receive_Config+0x31c>)
 800543e:	2264      	movs	r2, #100	; 0x64
 8005440:	809a      	strh	r2, [r3, #4]
 8005442:	e01e      	b.n	8005482 <Principal_Receive_Config+0x222>
 8005444:	4b4d      	ldr	r3, [pc, #308]	; (800557c <Principal_Receive_Config+0x31c>)
 8005446:	2232      	movs	r2, #50	; 0x32
 8005448:	809a      	strh	r2, [r3, #4]
 800544a:	e01a      	b.n	8005482 <Principal_Receive_Config+0x222>
 800544c:	4b4b      	ldr	r3, [pc, #300]	; (800557c <Principal_Receive_Config+0x31c>)
 800544e:	2228      	movs	r2, #40	; 0x28
 8005450:	809a      	strh	r2, [r3, #4]
 8005452:	e016      	b.n	8005482 <Principal_Receive_Config+0x222>
 8005454:	4b49      	ldr	r3, [pc, #292]	; (800557c <Principal_Receive_Config+0x31c>)
 8005456:	2214      	movs	r2, #20
 8005458:	809a      	strh	r2, [r3, #4]
 800545a:	e012      	b.n	8005482 <Principal_Receive_Config+0x222>
 800545c:	4b47      	ldr	r3, [pc, #284]	; (800557c <Principal_Receive_Config+0x31c>)
 800545e:	220a      	movs	r2, #10
 8005460:	809a      	strh	r2, [r3, #4]
 8005462:	e00e      	b.n	8005482 <Principal_Receive_Config+0x222>
 8005464:	4b45      	ldr	r3, [pc, #276]	; (800557c <Principal_Receive_Config+0x31c>)
 8005466:	2205      	movs	r2, #5
 8005468:	809a      	strh	r2, [r3, #4]
 800546a:	e00a      	b.n	8005482 <Principal_Receive_Config+0x222>
 800546c:	4b43      	ldr	r3, [pc, #268]	; (800557c <Principal_Receive_Config+0x31c>)
 800546e:	2203      	movs	r2, #3
 8005470:	809a      	strh	r2, [r3, #4]
 8005472:	e006      	b.n	8005482 <Principal_Receive_Config+0x222>
 8005474:	4b41      	ldr	r3, [pc, #260]	; (800557c <Principal_Receive_Config+0x31c>)
 8005476:	2202      	movs	r2, #2
 8005478:	809a      	strh	r2, [r3, #4]
 800547a:	e002      	b.n	8005482 <Principal_Receive_Config+0x222>
 800547c:	4b3f      	ldr	r3, [pc, #252]	; (800557c <Principal_Receive_Config+0x31c>)
 800547e:	2200      	movs	r2, #0
 8005480:	809a      	strh	r2, [r3, #4]
 8005482:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perMsg[RTC_MSG]);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	3304      	adds	r3, #4
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	2b0a      	cmp	r3, #10
 800548e:	d847      	bhi.n	8005520 <Principal_Receive_Config+0x2c0>
 8005490:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <Principal_Receive_Config+0x238>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080054c5 	.word	0x080054c5
 800549c:	080054cf 	.word	0x080054cf
 80054a0:	080054d9 	.word	0x080054d9
 80054a4:	080054e1 	.word	0x080054e1
 80054a8:	080054e9 	.word	0x080054e9
 80054ac:	080054f1 	.word	0x080054f1
 80054b0:	080054f9 	.word	0x080054f9
 80054b4:	08005501 	.word	0x08005501
 80054b8:	08005509 	.word	0x08005509
 80054bc:	08005511 	.word	0x08005511
 80054c0:	08005519 	.word	0x08005519
 80054c4:	4b2d      	ldr	r3, [pc, #180]	; (800557c <Principal_Receive_Config+0x31c>)
 80054c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054ca:	80da      	strh	r2, [r3, #6]
 80054cc:	e02b      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 80054ce:	4b2b      	ldr	r3, [pc, #172]	; (800557c <Principal_Receive_Config+0x31c>)
 80054d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80054d4:	80da      	strh	r2, [r3, #6]
 80054d6:	e026      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 80054d8:	4b28      	ldr	r3, [pc, #160]	; (800557c <Principal_Receive_Config+0x31c>)
 80054da:	22c8      	movs	r2, #200	; 0xc8
 80054dc:	80da      	strh	r2, [r3, #6]
 80054de:	e022      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 80054e0:	4b26      	ldr	r3, [pc, #152]	; (800557c <Principal_Receive_Config+0x31c>)
 80054e2:	2264      	movs	r2, #100	; 0x64
 80054e4:	80da      	strh	r2, [r3, #6]
 80054e6:	e01e      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 80054e8:	4b24      	ldr	r3, [pc, #144]	; (800557c <Principal_Receive_Config+0x31c>)
 80054ea:	2232      	movs	r2, #50	; 0x32
 80054ec:	80da      	strh	r2, [r3, #6]
 80054ee:	e01a      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 80054f0:	4b22      	ldr	r3, [pc, #136]	; (800557c <Principal_Receive_Config+0x31c>)
 80054f2:	2228      	movs	r2, #40	; 0x28
 80054f4:	80da      	strh	r2, [r3, #6]
 80054f6:	e016      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 80054f8:	4b20      	ldr	r3, [pc, #128]	; (800557c <Principal_Receive_Config+0x31c>)
 80054fa:	2214      	movs	r2, #20
 80054fc:	80da      	strh	r2, [r3, #6]
 80054fe:	e012      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 8005500:	4b1e      	ldr	r3, [pc, #120]	; (800557c <Principal_Receive_Config+0x31c>)
 8005502:	220a      	movs	r2, #10
 8005504:	80da      	strh	r2, [r3, #6]
 8005506:	e00e      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 8005508:	4b1c      	ldr	r3, [pc, #112]	; (800557c <Principal_Receive_Config+0x31c>)
 800550a:	2205      	movs	r2, #5
 800550c:	80da      	strh	r2, [r3, #6]
 800550e:	e00a      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <Principal_Receive_Config+0x31c>)
 8005512:	2203      	movs	r2, #3
 8005514:	80da      	strh	r2, [r3, #6]
 8005516:	e006      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 8005518:	4b18      	ldr	r3, [pc, #96]	; (800557c <Principal_Receive_Config+0x31c>)
 800551a:	2202      	movs	r2, #2
 800551c:	80da      	strh	r2, [r3, #6]
 800551e:	e002      	b.n	8005526 <Principal_Receive_Config+0x2c6>
 8005520:	4b16      	ldr	r3, [pc, #88]	; (800557c <Principal_Receive_Config+0x31c>)
 8005522:	2200      	movs	r2, #0
 8005524:	80da      	strh	r2, [r3, #6]
 8005526:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perMsg[VERIFY_MSG]);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	3305      	adds	r3, #5
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	3b01      	subs	r3, #1
 8005530:	2b0a      	cmp	r3, #10
 8005532:	d849      	bhi.n	80055c8 <Principal_Receive_Config+0x368>
 8005534:	a201      	add	r2, pc, #4	; (adr r2, 800553c <Principal_Receive_Config+0x2dc>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	08005569 	.word	0x08005569
 8005540:	08005573 	.word	0x08005573
 8005544:	08005581 	.word	0x08005581
 8005548:	08005589 	.word	0x08005589
 800554c:	08005591 	.word	0x08005591
 8005550:	08005599 	.word	0x08005599
 8005554:	080055a1 	.word	0x080055a1
 8005558:	080055a9 	.word	0x080055a9
 800555c:	080055b1 	.word	0x080055b1
 8005560:	080055b9 	.word	0x080055b9
 8005564:	080055c1 	.word	0x080055c1
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <Principal_Receive_Config+0x31c>)
 800556a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800556e:	811a      	strh	r2, [r3, #8]
 8005570:	e02d      	b.n	80055ce <Principal_Receive_Config+0x36e>
 8005572:	4b02      	ldr	r3, [pc, #8]	; (800557c <Principal_Receive_Config+0x31c>)
 8005574:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005578:	811a      	strh	r2, [r3, #8]
 800557a:	e028      	b.n	80055ce <Principal_Receive_Config+0x36e>
 800557c:	20003794 	.word	0x20003794
 8005580:	4ba8      	ldr	r3, [pc, #672]	; (8005824 <Principal_Receive_Config+0x5c4>)
 8005582:	22c8      	movs	r2, #200	; 0xc8
 8005584:	811a      	strh	r2, [r3, #8]
 8005586:	e022      	b.n	80055ce <Principal_Receive_Config+0x36e>
 8005588:	4ba6      	ldr	r3, [pc, #664]	; (8005824 <Principal_Receive_Config+0x5c4>)
 800558a:	2264      	movs	r2, #100	; 0x64
 800558c:	811a      	strh	r2, [r3, #8]
 800558e:	e01e      	b.n	80055ce <Principal_Receive_Config+0x36e>
 8005590:	4ba4      	ldr	r3, [pc, #656]	; (8005824 <Principal_Receive_Config+0x5c4>)
 8005592:	2232      	movs	r2, #50	; 0x32
 8005594:	811a      	strh	r2, [r3, #8]
 8005596:	e01a      	b.n	80055ce <Principal_Receive_Config+0x36e>
 8005598:	4ba2      	ldr	r3, [pc, #648]	; (8005824 <Principal_Receive_Config+0x5c4>)
 800559a:	2228      	movs	r2, #40	; 0x28
 800559c:	811a      	strh	r2, [r3, #8]
 800559e:	e016      	b.n	80055ce <Principal_Receive_Config+0x36e>
 80055a0:	4ba0      	ldr	r3, [pc, #640]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80055a2:	2214      	movs	r2, #20
 80055a4:	811a      	strh	r2, [r3, #8]
 80055a6:	e012      	b.n	80055ce <Principal_Receive_Config+0x36e>
 80055a8:	4b9e      	ldr	r3, [pc, #632]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80055aa:	220a      	movs	r2, #10
 80055ac:	811a      	strh	r2, [r3, #8]
 80055ae:	e00e      	b.n	80055ce <Principal_Receive_Config+0x36e>
 80055b0:	4b9c      	ldr	r3, [pc, #624]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80055b2:	2205      	movs	r2, #5
 80055b4:	811a      	strh	r2, [r3, #8]
 80055b6:	e00a      	b.n	80055ce <Principal_Receive_Config+0x36e>
 80055b8:	4b9a      	ldr	r3, [pc, #616]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80055ba:	2203      	movs	r2, #3
 80055bc:	811a      	strh	r2, [r3, #8]
 80055be:	e006      	b.n	80055ce <Principal_Receive_Config+0x36e>
 80055c0:	4b98      	ldr	r3, [pc, #608]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80055c2:	2202      	movs	r2, #2
 80055c4:	811a      	strh	r2, [r3, #8]
 80055c6:	e002      	b.n	80055ce <Principal_Receive_Config+0x36e>
 80055c8:	4b96      	ldr	r3, [pc, #600]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	811a      	strh	r2, [r3, #8]
 80055ce:	bf00      	nop
			__BUFFER_TO_FREQ(data[6], perMsg[ECU_SAVE]);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	3306      	adds	r3, #6
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	2b0a      	cmp	r3, #10
 80055da:	d847      	bhi.n	800566c <Principal_Receive_Config+0x40c>
 80055dc:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <Principal_Receive_Config+0x384>)
 80055de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e2:	bf00      	nop
 80055e4:	08005611 	.word	0x08005611
 80055e8:	0800561b 	.word	0x0800561b
 80055ec:	08005625 	.word	0x08005625
 80055f0:	0800562d 	.word	0x0800562d
 80055f4:	08005635 	.word	0x08005635
 80055f8:	0800563d 	.word	0x0800563d
 80055fc:	08005645 	.word	0x08005645
 8005600:	0800564d 	.word	0x0800564d
 8005604:	08005655 	.word	0x08005655
 8005608:	0800565d 	.word	0x0800565d
 800560c:	08005665 	.word	0x08005665
 8005610:	4b84      	ldr	r3, [pc, #528]	; (8005824 <Principal_Receive_Config+0x5c4>)
 8005612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005616:	819a      	strh	r2, [r3, #12]
 8005618:	e02b      	b.n	8005672 <Principal_Receive_Config+0x412>
 800561a:	4b82      	ldr	r3, [pc, #520]	; (8005824 <Principal_Receive_Config+0x5c4>)
 800561c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005620:	819a      	strh	r2, [r3, #12]
 8005622:	e026      	b.n	8005672 <Principal_Receive_Config+0x412>
 8005624:	4b7f      	ldr	r3, [pc, #508]	; (8005824 <Principal_Receive_Config+0x5c4>)
 8005626:	22c8      	movs	r2, #200	; 0xc8
 8005628:	819a      	strh	r2, [r3, #12]
 800562a:	e022      	b.n	8005672 <Principal_Receive_Config+0x412>
 800562c:	4b7d      	ldr	r3, [pc, #500]	; (8005824 <Principal_Receive_Config+0x5c4>)
 800562e:	2264      	movs	r2, #100	; 0x64
 8005630:	819a      	strh	r2, [r3, #12]
 8005632:	e01e      	b.n	8005672 <Principal_Receive_Config+0x412>
 8005634:	4b7b      	ldr	r3, [pc, #492]	; (8005824 <Principal_Receive_Config+0x5c4>)
 8005636:	2232      	movs	r2, #50	; 0x32
 8005638:	819a      	strh	r2, [r3, #12]
 800563a:	e01a      	b.n	8005672 <Principal_Receive_Config+0x412>
 800563c:	4b79      	ldr	r3, [pc, #484]	; (8005824 <Principal_Receive_Config+0x5c4>)
 800563e:	2228      	movs	r2, #40	; 0x28
 8005640:	819a      	strh	r2, [r3, #12]
 8005642:	e016      	b.n	8005672 <Principal_Receive_Config+0x412>
 8005644:	4b77      	ldr	r3, [pc, #476]	; (8005824 <Principal_Receive_Config+0x5c4>)
 8005646:	2214      	movs	r2, #20
 8005648:	819a      	strh	r2, [r3, #12]
 800564a:	e012      	b.n	8005672 <Principal_Receive_Config+0x412>
 800564c:	4b75      	ldr	r3, [pc, #468]	; (8005824 <Principal_Receive_Config+0x5c4>)
 800564e:	220a      	movs	r2, #10
 8005650:	819a      	strh	r2, [r3, #12]
 8005652:	e00e      	b.n	8005672 <Principal_Receive_Config+0x412>
 8005654:	4b73      	ldr	r3, [pc, #460]	; (8005824 <Principal_Receive_Config+0x5c4>)
 8005656:	2205      	movs	r2, #5
 8005658:	819a      	strh	r2, [r3, #12]
 800565a:	e00a      	b.n	8005672 <Principal_Receive_Config+0x412>
 800565c:	4b71      	ldr	r3, [pc, #452]	; (8005824 <Principal_Receive_Config+0x5c4>)
 800565e:	2203      	movs	r2, #3
 8005660:	819a      	strh	r2, [r3, #12]
 8005662:	e006      	b.n	8005672 <Principal_Receive_Config+0x412>
 8005664:	4b6f      	ldr	r3, [pc, #444]	; (8005824 <Principal_Receive_Config+0x5c4>)
 8005666:	2202      	movs	r2, #2
 8005668:	819a      	strh	r2, [r3, #12]
 800566a:	e002      	b.n	8005672 <Principal_Receive_Config+0x412>
 800566c:	4b6d      	ldr	r3, [pc, #436]	; (8005824 <Principal_Receive_Config+0x5c4>)
 800566e:	2200      	movs	r2, #0
 8005670:	819a      	strh	r2, [r3, #12]
 8005672:	bf00      	nop
			__BUFFER_TO_FREQ(data[7], perMsg[PDM_SAVE]);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	3307      	adds	r3, #7
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	3b01      	subs	r3, #1
 800567c:	2b0a      	cmp	r3, #10
 800567e:	d847      	bhi.n	8005710 <Principal_Receive_Config+0x4b0>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <Principal_Receive_Config+0x428>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	080056b5 	.word	0x080056b5
 800568c:	080056bf 	.word	0x080056bf
 8005690:	080056c9 	.word	0x080056c9
 8005694:	080056d1 	.word	0x080056d1
 8005698:	080056d9 	.word	0x080056d9
 800569c:	080056e1 	.word	0x080056e1
 80056a0:	080056e9 	.word	0x080056e9
 80056a4:	080056f1 	.word	0x080056f1
 80056a8:	080056f9 	.word	0x080056f9
 80056ac:	08005701 	.word	0x08005701
 80056b0:	08005709 	.word	0x08005709
 80056b4:	4b5b      	ldr	r3, [pc, #364]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80056b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056ba:	81da      	strh	r2, [r3, #14]
 80056bc:	e02b      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 80056be:	4b59      	ldr	r3, [pc, #356]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80056c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056c4:	81da      	strh	r2, [r3, #14]
 80056c6:	e026      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 80056c8:	4b56      	ldr	r3, [pc, #344]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80056ca:	22c8      	movs	r2, #200	; 0xc8
 80056cc:	81da      	strh	r2, [r3, #14]
 80056ce:	e022      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 80056d0:	4b54      	ldr	r3, [pc, #336]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80056d2:	2264      	movs	r2, #100	; 0x64
 80056d4:	81da      	strh	r2, [r3, #14]
 80056d6:	e01e      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 80056d8:	4b52      	ldr	r3, [pc, #328]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80056da:	2232      	movs	r2, #50	; 0x32
 80056dc:	81da      	strh	r2, [r3, #14]
 80056de:	e01a      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 80056e0:	4b50      	ldr	r3, [pc, #320]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80056e2:	2228      	movs	r2, #40	; 0x28
 80056e4:	81da      	strh	r2, [r3, #14]
 80056e6:	e016      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 80056e8:	4b4e      	ldr	r3, [pc, #312]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80056ea:	2214      	movs	r2, #20
 80056ec:	81da      	strh	r2, [r3, #14]
 80056ee:	e012      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 80056f0:	4b4c      	ldr	r3, [pc, #304]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80056f2:	220a      	movs	r2, #10
 80056f4:	81da      	strh	r2, [r3, #14]
 80056f6:	e00e      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 80056f8:	4b4a      	ldr	r3, [pc, #296]	; (8005824 <Principal_Receive_Config+0x5c4>)
 80056fa:	2205      	movs	r2, #5
 80056fc:	81da      	strh	r2, [r3, #14]
 80056fe:	e00a      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 8005700:	4b48      	ldr	r3, [pc, #288]	; (8005824 <Principal_Receive_Config+0x5c4>)
 8005702:	2203      	movs	r2, #3
 8005704:	81da      	strh	r2, [r3, #14]
 8005706:	e006      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 8005708:	4b46      	ldr	r3, [pc, #280]	; (8005824 <Principal_Receive_Config+0x5c4>)
 800570a:	2202      	movs	r2, #2
 800570c:	81da      	strh	r2, [r3, #14]
 800570e:	e002      	b.n	8005716 <Principal_Receive_Config+0x4b6>
 8005710:	4b44      	ldr	r3, [pc, #272]	; (8005824 <Principal_Receive_Config+0x5c4>)
 8005712:	2200      	movs	r2, #0
 8005714:	81da      	strh	r2, [r3, #14]
 8005716:	bf00      	nop

			retVal = Save_EEPROM(hi2c);
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7fe fcfb 	bl	8004114 <Save_EEPROM>
 800571e:	4603      	mov	r3, r0
 8005720:	75fb      	strb	r3, [r7, #23]
			break;
 8005722:	e231      	b.n	8005b88 <Principal_Receive_Config+0x928>

		case 1:
			if(length != 7)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b07      	cmp	r3, #7
 8005728:	f040 8229 	bne.w	8005b7e <Principal_Receive_Config+0x91e>
				break;

			__BUFFER_TO_FREQ(data[1], perCAN[ANALOG_1_4]);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	3301      	adds	r3, #1
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	3b01      	subs	r3, #1
 8005734:	2b0a      	cmp	r3, #10
 8005736:	d847      	bhi.n	80057c8 <Principal_Receive_Config+0x568>
 8005738:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <Principal_Receive_Config+0x4e0>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	0800576d 	.word	0x0800576d
 8005744:	08005777 	.word	0x08005777
 8005748:	08005781 	.word	0x08005781
 800574c:	08005789 	.word	0x08005789
 8005750:	08005791 	.word	0x08005791
 8005754:	08005799 	.word	0x08005799
 8005758:	080057a1 	.word	0x080057a1
 800575c:	080057a9 	.word	0x080057a9
 8005760:	080057b1 	.word	0x080057b1
 8005764:	080057b9 	.word	0x080057b9
 8005768:	080057c1 	.word	0x080057c1
 800576c:	4b2e      	ldr	r3, [pc, #184]	; (8005828 <Principal_Receive_Config+0x5c8>)
 800576e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e02b      	b.n	80057ce <Principal_Receive_Config+0x56e>
 8005776:	4b2c      	ldr	r3, [pc, #176]	; (8005828 <Principal_Receive_Config+0x5c8>)
 8005778:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	e026      	b.n	80057ce <Principal_Receive_Config+0x56e>
 8005780:	4b29      	ldr	r3, [pc, #164]	; (8005828 <Principal_Receive_Config+0x5c8>)
 8005782:	22c8      	movs	r2, #200	; 0xc8
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	e022      	b.n	80057ce <Principal_Receive_Config+0x56e>
 8005788:	4b27      	ldr	r3, [pc, #156]	; (8005828 <Principal_Receive_Config+0x5c8>)
 800578a:	2264      	movs	r2, #100	; 0x64
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e01e      	b.n	80057ce <Principal_Receive_Config+0x56e>
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <Principal_Receive_Config+0x5c8>)
 8005792:	2232      	movs	r2, #50	; 0x32
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	e01a      	b.n	80057ce <Principal_Receive_Config+0x56e>
 8005798:	4b23      	ldr	r3, [pc, #140]	; (8005828 <Principal_Receive_Config+0x5c8>)
 800579a:	2228      	movs	r2, #40	; 0x28
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	e016      	b.n	80057ce <Principal_Receive_Config+0x56e>
 80057a0:	4b21      	ldr	r3, [pc, #132]	; (8005828 <Principal_Receive_Config+0x5c8>)
 80057a2:	2214      	movs	r2, #20
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	e012      	b.n	80057ce <Principal_Receive_Config+0x56e>
 80057a8:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <Principal_Receive_Config+0x5c8>)
 80057aa:	220a      	movs	r2, #10
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e00e      	b.n	80057ce <Principal_Receive_Config+0x56e>
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <Principal_Receive_Config+0x5c8>)
 80057b2:	2205      	movs	r2, #5
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	e00a      	b.n	80057ce <Principal_Receive_Config+0x56e>
 80057b8:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <Principal_Receive_Config+0x5c8>)
 80057ba:	2203      	movs	r2, #3
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e006      	b.n	80057ce <Principal_Receive_Config+0x56e>
 80057c0:	4b19      	ldr	r3, [pc, #100]	; (8005828 <Principal_Receive_Config+0x5c8>)
 80057c2:	2202      	movs	r2, #2
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e002      	b.n	80057ce <Principal_Receive_Config+0x56e>
 80057c8:	4b17      	ldr	r3, [pc, #92]	; (8005828 <Principal_Receive_Config+0x5c8>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perCAN[ANALOG_5_8]);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	3302      	adds	r3, #2
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	2b0a      	cmp	r3, #10
 80057da:	d84b      	bhi.n	8005874 <Principal_Receive_Config+0x614>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <Principal_Receive_Config+0x584>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	08005811 	.word	0x08005811
 80057e8:	0800581b 	.word	0x0800581b
 80057ec:	0800582d 	.word	0x0800582d
 80057f0:	08005835 	.word	0x08005835
 80057f4:	0800583d 	.word	0x0800583d
 80057f8:	08005845 	.word	0x08005845
 80057fc:	0800584d 	.word	0x0800584d
 8005800:	08005855 	.word	0x08005855
 8005804:	0800585d 	.word	0x0800585d
 8005808:	08005865 	.word	0x08005865
 800580c:	0800586d 	.word	0x0800586d
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <Principal_Receive_Config+0x5c8>)
 8005812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005816:	805a      	strh	r2, [r3, #2]
 8005818:	e02f      	b.n	800587a <Principal_Receive_Config+0x61a>
 800581a:	4b03      	ldr	r3, [pc, #12]	; (8005828 <Principal_Receive_Config+0x5c8>)
 800581c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005820:	805a      	strh	r2, [r3, #2]
 8005822:	e02a      	b.n	800587a <Principal_Receive_Config+0x61a>
 8005824:	20003794 	.word	0x20003794
 8005828:	20003788 	.word	0x20003788
 800582c:	4b93      	ldr	r3, [pc, #588]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800582e:	22c8      	movs	r2, #200	; 0xc8
 8005830:	805a      	strh	r2, [r3, #2]
 8005832:	e022      	b.n	800587a <Principal_Receive_Config+0x61a>
 8005834:	4b91      	ldr	r3, [pc, #580]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005836:	2264      	movs	r2, #100	; 0x64
 8005838:	805a      	strh	r2, [r3, #2]
 800583a:	e01e      	b.n	800587a <Principal_Receive_Config+0x61a>
 800583c:	4b8f      	ldr	r3, [pc, #572]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800583e:	2232      	movs	r2, #50	; 0x32
 8005840:	805a      	strh	r2, [r3, #2]
 8005842:	e01a      	b.n	800587a <Principal_Receive_Config+0x61a>
 8005844:	4b8d      	ldr	r3, [pc, #564]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005846:	2228      	movs	r2, #40	; 0x28
 8005848:	805a      	strh	r2, [r3, #2]
 800584a:	e016      	b.n	800587a <Principal_Receive_Config+0x61a>
 800584c:	4b8b      	ldr	r3, [pc, #556]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800584e:	2214      	movs	r2, #20
 8005850:	805a      	strh	r2, [r3, #2]
 8005852:	e012      	b.n	800587a <Principal_Receive_Config+0x61a>
 8005854:	4b89      	ldr	r3, [pc, #548]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005856:	220a      	movs	r2, #10
 8005858:	805a      	strh	r2, [r3, #2]
 800585a:	e00e      	b.n	800587a <Principal_Receive_Config+0x61a>
 800585c:	4b87      	ldr	r3, [pc, #540]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800585e:	2205      	movs	r2, #5
 8005860:	805a      	strh	r2, [r3, #2]
 8005862:	e00a      	b.n	800587a <Principal_Receive_Config+0x61a>
 8005864:	4b85      	ldr	r3, [pc, #532]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005866:	2203      	movs	r2, #3
 8005868:	805a      	strh	r2, [r3, #2]
 800586a:	e006      	b.n	800587a <Principal_Receive_Config+0x61a>
 800586c:	4b83      	ldr	r3, [pc, #524]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800586e:	2202      	movs	r2, #2
 8005870:	805a      	strh	r2, [r3, #2]
 8005872:	e002      	b.n	800587a <Principal_Receive_Config+0x61a>
 8005874:	4b81      	ldr	r3, [pc, #516]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005876:	2200      	movs	r2, #0
 8005878:	805a      	strh	r2, [r3, #2]
 800587a:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perCAN[ANALOG_9_12]);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	3303      	adds	r3, #3
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	3b01      	subs	r3, #1
 8005884:	2b0a      	cmp	r3, #10
 8005886:	d847      	bhi.n	8005918 <Principal_Receive_Config+0x6b8>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <Principal_Receive_Config+0x630>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058bd 	.word	0x080058bd
 8005894:	080058c7 	.word	0x080058c7
 8005898:	080058d1 	.word	0x080058d1
 800589c:	080058d9 	.word	0x080058d9
 80058a0:	080058e1 	.word	0x080058e1
 80058a4:	080058e9 	.word	0x080058e9
 80058a8:	080058f1 	.word	0x080058f1
 80058ac:	080058f9 	.word	0x080058f9
 80058b0:	08005901 	.word	0x08005901
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005911 	.word	0x08005911
 80058bc:	4b6f      	ldr	r3, [pc, #444]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80058be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058c2:	809a      	strh	r2, [r3, #4]
 80058c4:	e02b      	b.n	800591e <Principal_Receive_Config+0x6be>
 80058c6:	4b6d      	ldr	r3, [pc, #436]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80058c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058cc:	809a      	strh	r2, [r3, #4]
 80058ce:	e026      	b.n	800591e <Principal_Receive_Config+0x6be>
 80058d0:	4b6a      	ldr	r3, [pc, #424]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80058d2:	22c8      	movs	r2, #200	; 0xc8
 80058d4:	809a      	strh	r2, [r3, #4]
 80058d6:	e022      	b.n	800591e <Principal_Receive_Config+0x6be>
 80058d8:	4b68      	ldr	r3, [pc, #416]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80058da:	2264      	movs	r2, #100	; 0x64
 80058dc:	809a      	strh	r2, [r3, #4]
 80058de:	e01e      	b.n	800591e <Principal_Receive_Config+0x6be>
 80058e0:	4b66      	ldr	r3, [pc, #408]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80058e2:	2232      	movs	r2, #50	; 0x32
 80058e4:	809a      	strh	r2, [r3, #4]
 80058e6:	e01a      	b.n	800591e <Principal_Receive_Config+0x6be>
 80058e8:	4b64      	ldr	r3, [pc, #400]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80058ea:	2228      	movs	r2, #40	; 0x28
 80058ec:	809a      	strh	r2, [r3, #4]
 80058ee:	e016      	b.n	800591e <Principal_Receive_Config+0x6be>
 80058f0:	4b62      	ldr	r3, [pc, #392]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80058f2:	2214      	movs	r2, #20
 80058f4:	809a      	strh	r2, [r3, #4]
 80058f6:	e012      	b.n	800591e <Principal_Receive_Config+0x6be>
 80058f8:	4b60      	ldr	r3, [pc, #384]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80058fa:	220a      	movs	r2, #10
 80058fc:	809a      	strh	r2, [r3, #4]
 80058fe:	e00e      	b.n	800591e <Principal_Receive_Config+0x6be>
 8005900:	4b5e      	ldr	r3, [pc, #376]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005902:	2205      	movs	r2, #5
 8005904:	809a      	strh	r2, [r3, #4]
 8005906:	e00a      	b.n	800591e <Principal_Receive_Config+0x6be>
 8005908:	4b5c      	ldr	r3, [pc, #368]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800590a:	2203      	movs	r2, #3
 800590c:	809a      	strh	r2, [r3, #4]
 800590e:	e006      	b.n	800591e <Principal_Receive_Config+0x6be>
 8005910:	4b5a      	ldr	r3, [pc, #360]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005912:	2202      	movs	r2, #2
 8005914:	809a      	strh	r2, [r3, #4]
 8005916:	e002      	b.n	800591e <Principal_Receive_Config+0x6be>
 8005918:	4b58      	ldr	r3, [pc, #352]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800591a:	2200      	movs	r2, #0
 800591c:	809a      	strh	r2, [r3, #4]
 800591e:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perCAN[RTC_MSG]);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	3304      	adds	r3, #4
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	3b01      	subs	r3, #1
 8005928:	2b0a      	cmp	r3, #10
 800592a:	d847      	bhi.n	80059bc <Principal_Receive_Config+0x75c>
 800592c:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <Principal_Receive_Config+0x6d4>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005961 	.word	0x08005961
 8005938:	0800596b 	.word	0x0800596b
 800593c:	08005975 	.word	0x08005975
 8005940:	0800597d 	.word	0x0800597d
 8005944:	08005985 	.word	0x08005985
 8005948:	0800598d 	.word	0x0800598d
 800594c:	08005995 	.word	0x08005995
 8005950:	0800599d 	.word	0x0800599d
 8005954:	080059a5 	.word	0x080059a5
 8005958:	080059ad 	.word	0x080059ad
 800595c:	080059b5 	.word	0x080059b5
 8005960:	4b46      	ldr	r3, [pc, #280]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005966:	80da      	strh	r2, [r3, #6]
 8005968:	e02b      	b.n	80059c2 <Principal_Receive_Config+0x762>
 800596a:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800596c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005970:	80da      	strh	r2, [r3, #6]
 8005972:	e026      	b.n	80059c2 <Principal_Receive_Config+0x762>
 8005974:	4b41      	ldr	r3, [pc, #260]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005976:	22c8      	movs	r2, #200	; 0xc8
 8005978:	80da      	strh	r2, [r3, #6]
 800597a:	e022      	b.n	80059c2 <Principal_Receive_Config+0x762>
 800597c:	4b3f      	ldr	r3, [pc, #252]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800597e:	2264      	movs	r2, #100	; 0x64
 8005980:	80da      	strh	r2, [r3, #6]
 8005982:	e01e      	b.n	80059c2 <Principal_Receive_Config+0x762>
 8005984:	4b3d      	ldr	r3, [pc, #244]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005986:	2232      	movs	r2, #50	; 0x32
 8005988:	80da      	strh	r2, [r3, #6]
 800598a:	e01a      	b.n	80059c2 <Principal_Receive_Config+0x762>
 800598c:	4b3b      	ldr	r3, [pc, #236]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800598e:	2228      	movs	r2, #40	; 0x28
 8005990:	80da      	strh	r2, [r3, #6]
 8005992:	e016      	b.n	80059c2 <Principal_Receive_Config+0x762>
 8005994:	4b39      	ldr	r3, [pc, #228]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005996:	2214      	movs	r2, #20
 8005998:	80da      	strh	r2, [r3, #6]
 800599a:	e012      	b.n	80059c2 <Principal_Receive_Config+0x762>
 800599c:	4b37      	ldr	r3, [pc, #220]	; (8005a7c <Principal_Receive_Config+0x81c>)
 800599e:	220a      	movs	r2, #10
 80059a0:	80da      	strh	r2, [r3, #6]
 80059a2:	e00e      	b.n	80059c2 <Principal_Receive_Config+0x762>
 80059a4:	4b35      	ldr	r3, [pc, #212]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80059a6:	2205      	movs	r2, #5
 80059a8:	80da      	strh	r2, [r3, #6]
 80059aa:	e00a      	b.n	80059c2 <Principal_Receive_Config+0x762>
 80059ac:	4b33      	ldr	r3, [pc, #204]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80059ae:	2203      	movs	r2, #3
 80059b0:	80da      	strh	r2, [r3, #6]
 80059b2:	e006      	b.n	80059c2 <Principal_Receive_Config+0x762>
 80059b4:	4b31      	ldr	r3, [pc, #196]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80059b6:	2202      	movs	r2, #2
 80059b8:	80da      	strh	r2, [r3, #6]
 80059ba:	e002      	b.n	80059c2 <Principal_Receive_Config+0x762>
 80059bc:	4b2f      	ldr	r3, [pc, #188]	; (8005a7c <Principal_Receive_Config+0x81c>)
 80059be:	2200      	movs	r2, #0
 80059c0:	80da      	strh	r2, [r3, #6]
 80059c2:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perCAN[VERIFY_MSG]);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	3305      	adds	r3, #5
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	2b0a      	cmp	r3, #10
 80059ce:	d847      	bhi.n	8005a60 <Principal_Receive_Config+0x800>
 80059d0:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <Principal_Receive_Config+0x778>)
 80059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d6:	bf00      	nop
 80059d8:	08005a05 	.word	0x08005a05
 80059dc:	08005a0f 	.word	0x08005a0f
 80059e0:	08005a19 	.word	0x08005a19
 80059e4:	08005a21 	.word	0x08005a21
 80059e8:	08005a29 	.word	0x08005a29
 80059ec:	08005a31 	.word	0x08005a31
 80059f0:	08005a39 	.word	0x08005a39
 80059f4:	08005a41 	.word	0x08005a41
 80059f8:	08005a49 	.word	0x08005a49
 80059fc:	08005a51 	.word	0x08005a51
 8005a00:	08005a59 	.word	0x08005a59
 8005a04:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a0a:	811a      	strh	r2, [r3, #8]
 8005a0c:	e02b      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a14:	811a      	strh	r2, [r3, #8]
 8005a16:	e026      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a18:	4b18      	ldr	r3, [pc, #96]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a1a:	22c8      	movs	r2, #200	; 0xc8
 8005a1c:	811a      	strh	r2, [r3, #8]
 8005a1e:	e022      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a20:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a22:	2264      	movs	r2, #100	; 0x64
 8005a24:	811a      	strh	r2, [r3, #8]
 8005a26:	e01e      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a28:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a2a:	2232      	movs	r2, #50	; 0x32
 8005a2c:	811a      	strh	r2, [r3, #8]
 8005a2e:	e01a      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a30:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a32:	2228      	movs	r2, #40	; 0x28
 8005a34:	811a      	strh	r2, [r3, #8]
 8005a36:	e016      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a38:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a3a:	2214      	movs	r2, #20
 8005a3c:	811a      	strh	r2, [r3, #8]
 8005a3e:	e012      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a40:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a42:	220a      	movs	r2, #10
 8005a44:	811a      	strh	r2, [r3, #8]
 8005a46:	e00e      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a4a:	2205      	movs	r2, #5
 8005a4c:	811a      	strh	r2, [r3, #8]
 8005a4e:	e00a      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a52:	2203      	movs	r2, #3
 8005a54:	811a      	strh	r2, [r3, #8]
 8005a56:	e006      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a58:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	811a      	strh	r2, [r3, #8]
 8005a5e:	e002      	b.n	8005a66 <Principal_Receive_Config+0x806>
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <Principal_Receive_Config+0x81c>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	811a      	strh	r2, [r3, #8]
 8005a66:	bf00      	nop
			inputConfig = data[6];
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	799a      	ldrb	r2, [r3, #6]
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <Principal_Receive_Config+0x820>)
 8005a6e:	701a      	strb	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7fe fb4f 	bl	8004114 <Save_EEPROM>
 8005a76:	4603      	mov	r3, r0
 8005a78:	75fb      	strb	r3, [r7, #23]
			break;
 8005a7a:	e085      	b.n	8005b88 <Principal_Receive_Config+0x928>
 8005a7c:	20003788 	.word	0x20003788
 8005a80:	2000376c 	.word	0x2000376c

		case 2:
			if(length != 7)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b07      	cmp	r3, #7
 8005a88:	d17b      	bne.n	8005b82 <Principal_Receive_Config+0x922>
				break;

			thresholdBeacon  = data[1] << 8;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	b21a      	sxth	r2, r3
 8005a94:	4b3f      	ldr	r3, [pc, #252]	; (8005b94 <Principal_Receive_Config+0x934>)
 8005a96:	801a      	strh	r2, [r3, #0]
			thresholdBeacon |= data[2] & 0xff;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	3302      	adds	r3, #2
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	b21a      	sxth	r2, r3
 8005aa0:	4b3c      	ldr	r3, [pc, #240]	; (8005b94 <Principal_Receive_Config+0x934>)
 8005aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	b21a      	sxth	r2, r3
 8005aaa:	4b3a      	ldr	r3, [pc, #232]	; (8005b94 <Principal_Receive_Config+0x934>)
 8005aac:	801a      	strh	r2, [r3, #0]
			thresholdRPM	 = data[3] << 8;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	3303      	adds	r3, #3
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	b21a      	sxth	r2, r3
 8005ab8:	4b37      	ldr	r3, [pc, #220]	; (8005b98 <Principal_Receive_Config+0x938>)
 8005aba:	801a      	strh	r2, [r3, #0]
			thresholdRPM	|= data[4] & 0xff;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	b21a      	sxth	r2, r3
 8005ac4:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <Principal_Receive_Config+0x938>)
 8005ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	b21a      	sxth	r2, r3
 8005ace:	4b32      	ldr	r3, [pc, #200]	; (8005b98 <Principal_Receive_Config+0x938>)
 8005ad0:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	 = data[5] << 8;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	3305      	adds	r3, #5
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	b21a      	sxth	r2, r3
 8005adc:	4b2f      	ldr	r3, [pc, #188]	; (8005b9c <Principal_Receive_Config+0x93c>)
 8005ade:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	|= data[6] & 0xff;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	3306      	adds	r3, #6
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	b21a      	sxth	r2, r3
 8005ae8:	4b2c      	ldr	r3, [pc, #176]	; (8005b9c <Principal_Receive_Config+0x93c>)
 8005aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	b21a      	sxth	r2, r3
 8005af2:	4b2a      	ldr	r3, [pc, #168]	; (8005b9c <Principal_Receive_Config+0x93c>)
 8005af4:	801a      	strh	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7fe fb0c 	bl	8004114 <Save_EEPROM>
 8005afc:	4603      	mov	r3, r0
 8005afe:	75fb      	strb	r3, [r7, #23]
			break;
 8005b00:	e042      	b.n	8005b88 <Principal_Receive_Config+0x928>

		case 3:
			if(length != 7)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b07      	cmp	r3, #7
 8005b06:	d13e      	bne.n	8005b86 <Principal_Receive_Config+0x926>
				break;

			rtcDate.Year	= data[1];
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	785a      	ldrb	r2, [r3, #1]
 8005b0c:	4b24      	ldr	r3, [pc, #144]	; (8005ba0 <Principal_Receive_Config+0x940>)
 8005b0e:	70da      	strb	r2, [r3, #3]
			rtcDate.Month	= data[2];
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	789a      	ldrb	r2, [r3, #2]
 8005b14:	4b22      	ldr	r3, [pc, #136]	; (8005ba0 <Principal_Receive_Config+0x940>)
 8005b16:	705a      	strb	r2, [r3, #1]
			rtcDate.Date	= data[3];
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	78da      	ldrb	r2, [r3, #3]
 8005b1c:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <Principal_Receive_Config+0x940>)
 8005b1e:	709a      	strb	r2, [r3, #2]
			rtcTime.Hours	= data[4];
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	791a      	ldrb	r2, [r3, #4]
 8005b24:	4b1f      	ldr	r3, [pc, #124]	; (8005ba4 <Principal_Receive_Config+0x944>)
 8005b26:	701a      	strb	r2, [r3, #0]
			rtcTime.Minutes = data[5];
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	795a      	ldrb	r2, [r3, #5]
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <Principal_Receive_Config+0x944>)
 8005b2e:	705a      	strb	r2, [r3, #1]
			rtcTime.Seconds = data[6];
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	799a      	ldrb	r2, [r3, #6]
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <Principal_Receive_Config+0x944>)
 8005b36:	709a      	strb	r2, [r3, #2]

			if((HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN) == HAL_OK)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4919      	ldr	r1, [pc, #100]	; (8005ba0 <Principal_Receive_Config+0x940>)
 8005b3c:	481a      	ldr	r0, [pc, #104]	; (8005ba8 <Principal_Receive_Config+0x948>)
 8005b3e:	f006 ff47 	bl	800c9d0 <HAL_RTC_SetDate>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d113      	bne.n	8005b70 <Principal_Receive_Config+0x910>
				&& (HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN) == HAL_OK))
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4916      	ldr	r1, [pc, #88]	; (8005ba4 <Principal_Receive_Config+0x944>)
 8005b4c:	4816      	ldr	r0, [pc, #88]	; (8005ba8 <Principal_Receive_Config+0x948>)
 8005b4e:	f006 fe24 	bl	800c79a <HAL_RTC_SetTime>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10b      	bne.n	8005b70 <Principal_Receive_Config+0x910>
			{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);
 8005b58:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4812      	ldr	r0, [pc, #72]	; (8005ba8 <Principal_Receive_Config+0x948>)
 8005b60:	f007 f8bc 	bl	800ccdc <HAL_RTCEx_BKUPWrite>
				flagRTC = RTC_OK;
 8005b64:	4b11      	ldr	r3, [pc, #68]	; (8005bac <Principal_Receive_Config+0x94c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
				retVal = HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	75fb      	strb	r3, [r7, #23]
			}
			else
				retVal = HAL_ERROR;

			break;
 8005b6e:	e00b      	b.n	8005b88 <Principal_Receive_Config+0x928>
				retVal = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
			break;
 8005b74:	e008      	b.n	8005b88 <Principal_Receive_Config+0x928>

		default:
			break;
 8005b76:	bf00      	nop
 8005b78:	e006      	b.n	8005b88 <Principal_Receive_Config+0x928>
				break;
 8005b7a:	bf00      	nop
 8005b7c:	e004      	b.n	8005b88 <Principal_Receive_Config+0x928>
				break;
 8005b7e:	bf00      	nop
 8005b80:	e002      	b.n	8005b88 <Principal_Receive_Config+0x928>
				break;
 8005b82:	bf00      	nop
 8005b84:	e000      	b.n	8005b88 <Principal_Receive_Config+0x928>
				break;
 8005b86:	bf00      	nop
	}

	return retVal;
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20001692 	.word	0x20001692
 8005b98:	20001694 	.word	0x20001694
 8005b9c:	20001696 	.word	0x20001696
 8005ba0:	20003770 	.word	0x20003770
 8005ba4:	20003774 	.word	0x20003774
 8005ba8:	200003cc 	.word	0x200003cc
 8005bac:	2000376b 	.word	0x2000376b

08005bb0 <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
	perMsg[ANALOG_1_4] = MSG_FREQ_250HZ;
 8005bb4:	4b1f      	ldr	r3, [pc, #124]	; (8005c34 <Principal_Hard_Code_Config+0x84>)
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	801a      	strh	r2, [r3, #0]
	perMsg[ANALOG_5_8] = MSG_FREQ_500HZ;
 8005bba:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <Principal_Hard_Code_Config+0x84>)
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	805a      	strh	r2, [r3, #2]
	perMsg[ANALOG_9_12] = MSG_DISABLED;
 8005bc0:	4b1c      	ldr	r3, [pc, #112]	; (8005c34 <Principal_Hard_Code_Config+0x84>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	809a      	strh	r2, [r3, #4]
	perMsg[RTC_MSG] = MSG_FREQ_2HZ;
 8005bc6:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <Principal_Hard_Code_Config+0x84>)
 8005bc8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005bcc:	80da      	strh	r2, [r3, #6]
	perMsg[VERIFY_MSG] = MSG_FREQ_5HZ;
 8005bce:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <Principal_Hard_Code_Config+0x84>)
 8005bd0:	22c8      	movs	r2, #200	; 0xc8
 8005bd2:	811a      	strh	r2, [r3, #8]
	perMsg[BEACON_MSG] = MSG_FREQ_10HZ;
 8005bd4:	4b17      	ldr	r3, [pc, #92]	; (8005c34 <Principal_Hard_Code_Config+0x84>)
 8005bd6:	2264      	movs	r2, #100	; 0x64
 8005bd8:	815a      	strh	r2, [r3, #10]
	perMsg[ECU_SAVE] = MSG_FREQ_100HZ;
 8005bda:	4b16      	ldr	r3, [pc, #88]	; (8005c34 <Principal_Hard_Code_Config+0x84>)
 8005bdc:	220a      	movs	r2, #10
 8005bde:	819a      	strh	r2, [r3, #12]
	perMsg[PDM_SAVE] = MSG_FREQ_100HZ;
 8005be0:	4b14      	ldr	r3, [pc, #80]	; (8005c34 <Principal_Hard_Code_Config+0x84>)
 8005be2:	220a      	movs	r2, #10
 8005be4:	81da      	strh	r2, [r3, #14]

	perCAN[ANALOG_1_4] = MSG_FREQ_10HZ;
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <Principal_Hard_Code_Config+0x88>)
 8005be8:	2264      	movs	r2, #100	; 0x64
 8005bea:	801a      	strh	r2, [r3, #0]
	perCAN[ANALOG_5_8] = MSG_FREQ_10HZ;
 8005bec:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <Principal_Hard_Code_Config+0x88>)
 8005bee:	2264      	movs	r2, #100	; 0x64
 8005bf0:	805a      	strh	r2, [r3, #2]
	perCAN[ANALOG_9_12] = MSG_DISABLED;
 8005bf2:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <Principal_Hard_Code_Config+0x88>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	809a      	strh	r2, [r3, #4]
	perCAN[RTC_MSG] = MSG_FREQ_2HZ;
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <Principal_Hard_Code_Config+0x88>)
 8005bfa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005bfe:	80da      	strh	r2, [r3, #6]
	perCAN[VERIFY_MSG] = MSG_FREQ_5HZ;
 8005c00:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <Principal_Hard_Code_Config+0x88>)
 8005c02:	22c8      	movs	r2, #200	; 0xc8
 8005c04:	811a      	strh	r2, [r3, #8]
	perCAN[BEACON_MSG] = MSG_FREQ_5HZ;
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <Principal_Hard_Code_Config+0x88>)
 8005c08:	22c8      	movs	r2, #200	; 0xc8
 8005c0a:	815a      	strh	r2, [r3, #10]

	inputConfig = INPUT_BEACON_PIN_0 | INPUT_DATALOGGER_PIN_1;
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <Principal_Hard_Code_Config+0x8c>)
 8005c0e:	2202      	movs	r2, #2
 8005c10:	701a      	strb	r2, [r3, #0]

	thresholdBeacon = 1000;
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <Principal_Hard_Code_Config+0x90>)
 8005c14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c18:	801a      	strh	r2, [r3, #0]
	thresholdRPM = 7000;
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <Principal_Hard_Code_Config+0x94>)
 8005c1c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005c20:	801a      	strh	r2, [r3, #0]
	thresholdSpeed = 1;
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <Principal_Hard_Code_Config+0x98>)
 8005c24:	2201      	movs	r2, #1
 8005c26:	801a      	strh	r2, [r3, #0]

	Save_EEPROM(&hi2c1);
 8005c28:	4808      	ldr	r0, [pc, #32]	; (8005c4c <Principal_Hard_Code_Config+0x9c>)
 8005c2a:	f7fe fa73 	bl	8004114 <Save_EEPROM>
}
 8005c2e:	bf00      	nop
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20003794 	.word	0x20003794
 8005c38:	20003788 	.word	0x20003788
 8005c3c:	2000376c 	.word	0x2000376c
 8005c40:	20001692 	.word	0x20001692
 8005c44:	20001694 	.word	0x20001694
 8005c48:	20001696 	.word	0x20001696
 8005c4c:	2000036c 	.word	0x2000036c

08005c50 <Principal_Datalogger_Init>:
#include "string.h"

FRESULT res[5];

FRESULT Principal_Datalogger_Init(FATFS* fatfs_struct)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	FRESULT retVal = FR_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005c5c:	2180      	movs	r1, #128	; 0x80
 8005c5e:	4813      	ldr	r0, [pc, #76]	; (8005cac <Principal_Datalogger_Init+0x5c>)
 8005c60:	f003 f94a 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d104      	bne.n	8005c74 <Principal_Datalogger_Init+0x24>
	{
		flagDatalogger = DL_NO_CARD;
 8005c6a:	4b11      	ldr	r3, [pc, #68]	; (8005cb0 <Principal_Datalogger_Init+0x60>)
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e017      	b.n	8005ca4 <Principal_Datalogger_Init+0x54>
	}

	BSP_SD_Init();
 8005c74:	f00b fb04 	bl	8011280 <BSP_SD_Init>

	retVal = f_mount(fatfs_struct, SDPath, 1);
 8005c78:	2201      	movs	r2, #1
 8005c7a:	490e      	ldr	r1, [pc, #56]	; (8005cb4 <Principal_Datalogger_Init+0x64>)
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f010 fd09 	bl	8016694 <f_mount>
 8005c82:	4603      	mov	r3, r0
 8005c84:	73fb      	strb	r3, [r7, #15]

	flagDatalogger = DL_NO_SAVE;
 8005c86:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <Principal_Datalogger_Init+0x60>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <Principal_Datalogger_Init+0x52>
	{
		flagDatalogger = DL_ERROR;
 8005c92:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <Principal_Datalogger_Init+0x60>)
 8005c94:	2204      	movs	r2, #4
 8005c96:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 8005c98:	2200      	movs	r2, #0
 8005c9a:	4906      	ldr	r1, [pc, #24]	; (8005cb4 <Principal_Datalogger_Init+0x64>)
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	f010 fcf9 	bl	8016694 <f_mount>
	}

	return retVal;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40020800 	.word	0x40020800
 8005cb0:	2000376a 	.word	0x2000376a
 8005cb4:	200037f8 	.word	0x200037f8

08005cb8 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start(char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 8005cb8:	b5b0      	push	{r4, r5, r7, lr}
 8005cba:	b092      	sub	sp, #72	; 0x48
 8005cbc:	af06      	add	r7, sp, #24
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005ccc:	2180      	movs	r1, #128	; 0x80
 8005cce:	4864      	ldr	r0, [pc, #400]	; (8005e60 <Principal_Datalogger_Start+0x1a8>)
 8005cd0:	f003 f912 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d104      	bne.n	8005ce4 <Principal_Datalogger_Start+0x2c>
	{
		flagDatalogger = DL_NO_CARD;
 8005cda:	4b62      	ldr	r3, [pc, #392]	; (8005e64 <Principal_Datalogger_Start+0x1ac>)
 8005cdc:	2202      	movs	r2, #2
 8005cde:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0b9      	b.n	8005e58 <Principal_Datalogger_Start+0x1a0>
	}

	if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ce8:	485f      	ldr	r0, [pc, #380]	; (8005e68 <Principal_Datalogger_Start+0x1b0>)
 8005cea:	f003 f905 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d02f      	beq.n	8005d54 <Principal_Datalogger_Start+0x9c>
			|| (flagRTC != RTC_OK)
 8005cf4:	4b5d      	ldr	r3, [pc, #372]	; (8005e6c <Principal_Datalogger_Start+0x1b4>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d12b      	bne.n	8005d54 <Principal_Datalogger_Start+0x9c>
			|| ((flagDatalogger != DL_BUT_PRESS)
 8005cfc:	4b59      	ldr	r3, [pc, #356]	; (8005e64 <Principal_Datalogger_Start+0x1ac>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d029      	beq.n	8005d58 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.rpm < thresholdRPM)
 8005d04:	4b5a      	ldr	r3, [pc, #360]	; (8005e70 <Principal_Datalogger_Start+0x1b8>)
 8005d06:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8005d0a:	4b5a      	ldr	r3, [pc, #360]	; (8005e74 <Principal_Datalogger_Start+0x1bc>)
 8005d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	da21      	bge.n	8005d58 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_fl < thresholdSpeed)
 8005d14:	4b56      	ldr	r3, [pc, #344]	; (8005e70 <Principal_Datalogger_Start+0x1b8>)
 8005d16:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 8005d1a:	4b57      	ldr	r3, [pc, #348]	; (8005e78 <Principal_Datalogger_Start+0x1c0>)
 8005d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	da19      	bge.n	8005d58 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_fr < thresholdSpeed)
 8005d24:	4b52      	ldr	r3, [pc, #328]	; (8005e70 <Principal_Datalogger_Start+0x1b8>)
 8005d26:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005d2a:	4b53      	ldr	r3, [pc, #332]	; (8005e78 <Principal_Datalogger_Start+0x1c0>)
 8005d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	da11      	bge.n	8005d58 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_rl < thresholdSpeed)
 8005d34:	4b4e      	ldr	r3, [pc, #312]	; (8005e70 <Principal_Datalogger_Start+0x1b8>)
 8005d36:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8005d3a:	4b4f      	ldr	r3, [pc, #316]	; (8005e78 <Principal_Datalogger_Start+0x1c0>)
 8005d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	da09      	bge.n	8005d58 <Principal_Datalogger_Start+0xa0>
			&& (ecuData.wheel_speed_rr < thresholdSpeed)))
 8005d44:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <Principal_Datalogger_Start+0x1b8>)
 8005d46:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8005d4a:	4b4b      	ldr	r3, [pc, #300]	; (8005e78 <Principal_Datalogger_Start+0x1c0>)
 8005d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	da01      	bge.n	8005d58 <Principal_Datalogger_Start+0xa0>
		return FR_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e07f      	b.n	8005e58 <Principal_Datalogger_Start+0x1a0>

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	dataloggerBufferPosition = 0;
 8005d58:	4b48      	ldr	r3, [pc, #288]	; (8005e7c <Principal_Datalogger_Start+0x1c4>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	801a      	strh	r2, [r3, #0]
	memset(dataloggerBuffer, '\0', DATALOGGER_BUFFER_SIZE);
 8005d5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d62:	2100      	movs	r1, #0
 8005d64:	4846      	ldr	r0, [pc, #280]	; (8005e80 <Principal_Datalogger_Start+0x1c8>)
 8005d66:	f012 f8df 	bl	8017f28 <memset>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005d6a:	f107 0314 	add.w	r3, r7, #20
 8005d6e:	2200      	movs	r2, #0
 8005d70:	4619      	mov	r1, r3
 8005d72:	4844      	ldr	r0, [pc, #272]	; (8005e84 <Principal_Datalogger_Start+0x1cc>)
 8005d74:	f006 fdce 	bl	800c914 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005d78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4840      	ldr	r0, [pc, #256]	; (8005e84 <Principal_Datalogger_Start+0x1cc>)
 8005d82:	f006 fecc 	bl	800cb1e <HAL_RTC_GetDate>

	sprintf(dir, "%02d_%02d_%02d", sDate.Year, sDate.Month, sDate.Date);
 8005d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005d90:	4619      	mov	r1, r3
 8005d92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	493b      	ldr	r1, [pc, #236]	; (8005e88 <Principal_Datalogger_Start+0x1d0>)
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f012 f8cb 	bl	8017f38 <siprintf>

	sprintf(file, "%s/%02d_%02d_%02d_%02d_%02d_%02d.sd", dir, sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005da6:	461d      	mov	r5, r3
 8005da8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005dac:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8005db0:	7d39      	ldrb	r1, [r7, #20]
 8005db2:	7d78      	ldrb	r0, [r7, #21]
 8005db4:	7dbc      	ldrb	r4, [r7, #22]
 8005db6:	9404      	str	r4, [sp, #16]
 8005db8:	9003      	str	r0, [sp, #12]
 8005dba:	9102      	str	r1, [sp, #8]
 8005dbc:	9201      	str	r2, [sp, #4]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4931      	ldr	r1, [pc, #196]	; (8005e8c <Principal_Datalogger_Start+0x1d4>)
 8005dc6:	68b8      	ldr	r0, [r7, #8]
 8005dc8:	f012 f8b6 	bl	8017f38 <siprintf>

	retVal = f_mkdir(dir);
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f011 f8e3 	bl	8016f98 <f_mkdir>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[0] = retVal;
 8005dd8:	4a2d      	ldr	r2, [pc, #180]	; (8005e90 <Principal_Datalogger_Start+0x1d8>)
 8005dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dde:	7013      	strb	r3, [r2, #0]

	if((retVal != FR_OK) && (retVal != FR_EXIST))
 8005de0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d009      	beq.n	8005dfc <Principal_Datalogger_Start+0x144>
 8005de8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d005      	beq.n	8005dfc <Principal_Datalogger_Start+0x144>
	{
		flagDatalogger = DL_ERROR;
 8005df0:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <Principal_Datalogger_Start+0x1ac>)
 8005df2:	2204      	movs	r2, #4
 8005df4:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dfa:	e02d      	b.n	8005e58 <Principal_Datalogger_Start+0x1a0>
	}

	retVal = f_opendir(dir_struct, dir);
 8005dfc:	68f9      	ldr	r1, [r7, #12]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f011 f857 	bl	8016eb2 <f_opendir>
 8005e04:	4603      	mov	r3, r0
 8005e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[1] = retVal;
 8005e0a:	4a21      	ldr	r2, [pc, #132]	; (8005e90 <Principal_Datalogger_Start+0x1d8>)
 8005e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e10:	7053      	strb	r3, [r2, #1]

	if(retVal != FR_OK)
 8005e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <Principal_Datalogger_Start+0x16e>
	{
		flagDatalogger = DL_ERROR;
 8005e1a:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <Principal_Datalogger_Start+0x1ac>)
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e24:	e018      	b.n	8005e58 <Principal_Datalogger_Start+0x1a0>
	}

	retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 8005e26:	220a      	movs	r2, #10
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	6838      	ldr	r0, [r7, #0]
 8005e2c:	f010 fc76 	bl	801671c <f_open>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[2] = retVal;
 8005e36:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <Principal_Datalogger_Start+0x1d8>)
 8005e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e3c:	7093      	strb	r3, [r2, #2]

	if(retVal == FR_OK)
 8005e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <Principal_Datalogger_Start+0x196>
		flagDatalogger = DL_SAVE;
 8005e46:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <Principal_Datalogger_Start+0x1ac>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	e002      	b.n	8005e54 <Principal_Datalogger_Start+0x19c>
	else
		flagDatalogger = DL_ERROR;
 8005e4e:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <Principal_Datalogger_Start+0x1ac>)
 8005e50:	2204      	movs	r2, #4
 8005e52:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005e54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3730      	adds	r7, #48	; 0x30
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e60:	40020800 	.word	0x40020800
 8005e64:	2000376a 	.word	0x2000376a
 8005e68:	40020000 	.word	0x40020000
 8005e6c:	2000376b 	.word	0x2000376b
 8005e70:	200005f4 	.word	0x200005f4
 8005e74:	20001694 	.word	0x20001694
 8005e78:	20001696 	.word	0x20001696
 8005e7c:	20001690 	.word	0x20001690
 8005e80:	20000690 	.word	0x20000690
 8005e84:	200003cc 	.word	0x200003cc
 8005e88:	0801882c 	.word	0x0801882c
 8005e8c:	0801883c 	.word	0x0801883c
 8005e90:	20000578 	.word	0x20000578

08005e94 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish(DIR* dir_struct, FIL* file_struct)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	FRESULT retVal = FR_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]

	retVal = f_close(file_struct);
 8005ea2:	6838      	ldr	r0, [r7, #0]
 8005ea4:	f010 ffe5 	bl	8016e72 <f_close>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]
	f_closedir(dir_struct);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f011 f85b 	bl	8016f68 <f_closedir>

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005eb2:	2180      	movs	r1, #128	; 0x80
 8005eb4:	480b      	ldr	r0, [pc, #44]	; (8005ee4 <Principal_Datalogger_Finish+0x50>)
 8005eb6:	f003 f81f 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d108      	bne.n	8005ed2 <Principal_Datalogger_Finish+0x3e>
	{
		f_mount(0, SDPath, 0);
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	4909      	ldr	r1, [pc, #36]	; (8005ee8 <Principal_Datalogger_Finish+0x54>)
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f010 fbe5 	bl	8016694 <f_mount>
		flagDatalogger = DL_NO_CARD;
 8005eca:	4b08      	ldr	r3, [pc, #32]	; (8005eec <Principal_Datalogger_Finish+0x58>)
 8005ecc:	2202      	movs	r2, #2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	e002      	b.n	8005ed8 <Principal_Datalogger_Finish+0x44>
	}

	else
		flagDatalogger = DL_NO_SAVE;
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <Principal_Datalogger_Finish+0x58>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40020800 	.word	0x40020800
 8005ee8:	200037f8 	.word	0x200037f8
 8005eec:	2000376a 	.word	0x2000376a

08005ef0 <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, DIR* dir_struct, FIL* file_struct)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	607a      	str	r2, [r7, #4]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	460b      	mov	r3, r1
 8005efe:	72fb      	strb	r3, [r7, #11]
//	uint8_t buffer[5 + data_length];
	UINT byte;
	FRESULT verify[2];

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005f00:	2180      	movs	r1, #128	; 0x80
 8005f02:	484f      	ldr	r0, [pc, #316]	; (8006040 <Principal_Datalogger_Save_Buffer+0x150>)
 8005f04:	f002 fff8 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d104      	bne.n	8005f18 <Principal_Datalogger_Save_Buffer+0x28>
	{
		Principal_Datalogger_Finish(dir_struct, file_struct);
 8005f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f10:	6838      	ldr	r0, [r7, #0]
 8005f12:	f7ff ffbf 	bl	8005e94 <Principal_Datalogger_Finish>
		return;
 8005f16:	e08f      	b.n	8006038 <Principal_Datalogger_Save_Buffer+0x148>
	}

	else if(HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f1c:	4849      	ldr	r0, [pc, #292]	; (8006044 <Principal_Datalogger_Save_Buffer+0x154>)
 8005f1e:	f002 ffeb 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	f000 8086 	beq.w	8006036 <Principal_Datalogger_Save_Buffer+0x146>
//	buffer[1] = 'L';
//	buffer[2] = data_id & 0xff;
//	buffer[3] = data_length;
//	buffer[4] = accDatalogger[0];

	dataloggerBuffer[dataloggerBufferPosition++] = 'D';
 8005f2a:	4b47      	ldr	r3, [pc, #284]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	b291      	uxth	r1, r2
 8005f32:	4a45      	ldr	r2, [pc, #276]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f34:	8011      	strh	r1, [r2, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	4b44      	ldr	r3, [pc, #272]	; (800604c <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f3a:	2144      	movs	r1, #68	; 0x44
 8005f3c:	5499      	strb	r1, [r3, r2]
	dataloggerBuffer[dataloggerBufferPosition++] = 'L';
 8005f3e:	4b42      	ldr	r3, [pc, #264]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	b291      	uxth	r1, r2
 8005f46:	4a40      	ldr	r2, [pc, #256]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f48:	8011      	strh	r1, [r2, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4b3f      	ldr	r3, [pc, #252]	; (800604c <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f4e:	214c      	movs	r1, #76	; 0x4c
 8005f50:	5499      	strb	r1, [r3, r2]
	dataloggerBuffer[dataloggerBufferPosition++] = data_id & 0xff;
 8005f52:	4b3d      	ldr	r3, [pc, #244]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	b291      	uxth	r1, r2
 8005f5a:	4a3b      	ldr	r2, [pc, #236]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f5c:	8011      	strh	r1, [r2, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	b2d9      	uxtb	r1, r3
 8005f64:	4b39      	ldr	r3, [pc, #228]	; (800604c <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f66:	5499      	strb	r1, [r3, r2]
	dataloggerBuffer[dataloggerBufferPosition++] = data_length;
 8005f68:	4b37      	ldr	r3, [pc, #220]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	b291      	uxth	r1, r2
 8005f70:	4a35      	ldr	r2, [pc, #212]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f72:	8011      	strh	r1, [r2, #0]
 8005f74:	4619      	mov	r1, r3
 8005f76:	4a35      	ldr	r2, [pc, #212]	; (800604c <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f78:	7afb      	ldrb	r3, [r7, #11]
 8005f7a:	5453      	strb	r3, [r2, r1]
	dataloggerBuffer[dataloggerBufferPosition++] = accDatalogger[0];
 8005f7c:	4b34      	ldr	r3, [pc, #208]	; (8006050 <Principal_Datalogger_Save_Buffer+0x160>)
 8005f7e:	6819      	ldr	r1, [r3, #0]
 8005f80:	4b31      	ldr	r3, [pc, #196]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	b290      	uxth	r0, r2
 8005f88:	4a2f      	ldr	r2, [pc, #188]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005f8a:	8010      	strh	r0, [r2, #0]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	b2c9      	uxtb	r1, r1
 8005f90:	4b2e      	ldr	r3, [pc, #184]	; (800604c <Principal_Datalogger_Save_Buffer+0x15c>)
 8005f92:	5499      	strb	r1, [r3, r2]

	accDatalogger[0] = 0;
 8005f94:	4b2e      	ldr	r3, [pc, #184]	; (8006050 <Principal_Datalogger_Save_Buffer+0x160>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]
//
//	memcpy(dataloggerBuffer + dataloggerBufferPosition, buffer, 5 + data_length);
//
//	dataloggerBufferPosition += (5 + data_length);

	for(uint8_t i = 0; i < data_length; i++, dataloggerBufferPosition++)
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	77fb      	strb	r3, [r7, #31]
 8005f9e:	e010      	b.n	8005fc2 <Principal_Datalogger_Save_Buffer+0xd2>
		dataloggerBuffer[dataloggerBufferPosition] = data_buffer[i];
 8005fa0:	7ffb      	ldrb	r3, [r7, #31]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	4a28      	ldr	r2, [pc, #160]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fa8:	8812      	ldrh	r2, [r2, #0]
 8005faa:	7819      	ldrb	r1, [r3, #0]
 8005fac:	4b27      	ldr	r3, [pc, #156]	; (800604c <Principal_Datalogger_Save_Buffer+0x15c>)
 8005fae:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < data_length; i++, dataloggerBufferPosition++)
 8005fb0:	7ffb      	ldrb	r3, [r7, #31]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	4b24      	ldr	r3, [pc, #144]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	4b22      	ldr	r3, [pc, #136]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	7ffa      	ldrb	r2, [r7, #31]
 8005fc4:	7afb      	ldrb	r3, [r7, #11]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d3ea      	bcc.n	8005fa0 <Principal_Datalogger_Save_Buffer+0xb0>

	if(dataloggerBufferPosition > DATALOGGER_SAVE_THR)
 8005fca:	4b1f      	ldr	r3, [pc, #124]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	f640 72f3 	movw	r2, #4083	; 0xff3
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d930      	bls.n	8006038 <Principal_Datalogger_Save_Buffer+0x148>
	{
		dataloggerBufferPosition++;
 8005fd6:	4b1c      	ldr	r3, [pc, #112]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fe0:	801a      	strh	r2, [r3, #0]

		verify[0] = f_write(file_struct, dataloggerBuffer, dataloggerBufferPosition, &byte);
 8005fe2:	4b19      	ldr	r3, [pc, #100]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f107 0318 	add.w	r3, r7, #24
 8005fec:	4917      	ldr	r1, [pc, #92]	; (800604c <Principal_Datalogger_Save_Buffer+0x15c>)
 8005fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff0:	f010 fd2d 	bl	8016a4e <f_write>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	753b      	strb	r3, [r7, #20]
		verify[1] = f_sync(file_struct);
 8005ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ffa:	f010 febc 	bl	8016d76 <f_sync>
 8005ffe:	4603      	mov	r3, r0
 8006000:	757b      	strb	r3, [r7, #21]

		res[3] = verify[0];
 8006002:	7d3a      	ldrb	r2, [r7, #20]
 8006004:	4b13      	ldr	r3, [pc, #76]	; (8006054 <Principal_Datalogger_Save_Buffer+0x164>)
 8006006:	70da      	strb	r2, [r3, #3]
		res[4] = verify[1];
 8006008:	7d7a      	ldrb	r2, [r7, #21]
 800600a:	4b12      	ldr	r3, [pc, #72]	; (8006054 <Principal_Datalogger_Save_Buffer+0x164>)
 800600c:	711a      	strb	r2, [r3, #4]

		if((verify[0] == FR_OK) && (verify[1] == FR_OK) && (dataloggerBufferPosition == byte))
 800600e:	7d3b      	ldrb	r3, [r7, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10c      	bne.n	800602e <Principal_Datalogger_Save_Buffer+0x13e>
 8006014:	7d7b      	ldrb	r3, [r7, #21]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <Principal_Datalogger_Save_Buffer+0x13e>
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	429a      	cmp	r2, r3
 8006024:	d103      	bne.n	800602e <Principal_Datalogger_Save_Buffer+0x13e>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 8006026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006028:	6838      	ldr	r0, [r7, #0]
 800602a:	f7ff ff33 	bl	8005e94 <Principal_Datalogger_Finish>

		dataloggerBufferPosition = 0;
 800602e:	4b06      	ldr	r3, [pc, #24]	; (8006048 <Principal_Datalogger_Save_Buffer+0x158>)
 8006030:	2200      	movs	r2, #0
 8006032:	801a      	strh	r2, [r3, #0]
 8006034:	e000      	b.n	8006038 <Principal_Datalogger_Save_Buffer+0x148>
		return;
 8006036:	bf00      	nop
	}
}
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40020800 	.word	0x40020800
 8006044:	40020000 	.word	0x40020000
 8006048:	20001690 	.word	0x20001690
 800604c:	20000690 	.word	0x20000690
 8006050:	200037a4 	.word	0x200037a4
 8006054:	20000578 	.word	0x20000578

08006058 <Principal_Datalogger_Button>:

void Principal_Datalogger_Button(DIR* dir_struct, FIL* file_struct)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
	if(accDatalogger[1] == 0)
 8006062:	4b12      	ldr	r3, [pc, #72]	; (80060ac <Principal_Datalogger_Button+0x54>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d11b      	bne.n	80060a2 <Principal_Datalogger_Button+0x4a>
	{
		accDatalogger[1] = BUTTON_COOLDOWN;
 800606a:	4b10      	ldr	r3, [pc, #64]	; (80060ac <Principal_Datalogger_Button+0x54>)
 800606c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006070:	605a      	str	r2, [r3, #4]

		if((flagDatalogger == DL_NO_SAVE) && (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET))
 8006072:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <Principal_Datalogger_Button+0x58>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <Principal_Datalogger_Button+0x3a>
 800607a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800607e:	480d      	ldr	r0, [pc, #52]	; (80060b4 <Principal_Datalogger_Button+0x5c>)
 8006080:	f002 ff3a 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <Principal_Datalogger_Button+0x3a>
			flagDatalogger = DL_BUT_PRESS;
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <Principal_Datalogger_Button+0x58>)
 800608c:	2203      	movs	r2, #3
 800608e:	701a      	strb	r2, [r3, #0]

		else if(flagDatalogger == DL_SAVE)
			Principal_Datalogger_Finish(dir_struct, file_struct);
	}
}
 8006090:	e007      	b.n	80060a2 <Principal_Datalogger_Button+0x4a>
		else if(flagDatalogger == DL_SAVE)
 8006092:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <Principal_Datalogger_Button+0x58>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d103      	bne.n	80060a2 <Principal_Datalogger_Button+0x4a>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff fef9 	bl	8005e94 <Principal_Datalogger_Finish>
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	200037a4 	.word	0x200037a4
 80060b0:	2000376a 	.word	0x2000376a
 80060b4:	40020000 	.word	0x40020000

080060b8 <Principal_Card_Detection>:

void Principal_Card_Detection(FATFS* fatfs_struct, DIR* dir_struct, FIL* file_struct)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 80060c4:	2180      	movs	r1, #128	; 0x80
 80060c6:	4811      	ldr	r0, [pc, #68]	; (800610c <Principal_Card_Detection+0x54>)
 80060c8:	f002 ff16 	bl	8008ef8 <HAL_GPIO_ReadPin>
 80060cc:	4603      	mov	r3, r0
 80060ce:	75fb      	strb	r3, [r7, #23]

	if((cd_pin == GPIO_PIN_SET) && ((flagDatalogger == DL_SAVE) || (flagDatalogger == DL_ERROR)))
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10c      	bne.n	80060f0 <Principal_Card_Detection+0x38>
 80060d6:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <Principal_Card_Detection+0x58>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d003      	beq.n	80060e6 <Principal_Card_Detection+0x2e>
 80060de:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <Principal_Card_Detection+0x58>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d104      	bne.n	80060f0 <Principal_Card_Detection+0x38>
		Principal_Datalogger_Finish(dir_struct, file_struct);
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	68b8      	ldr	r0, [r7, #8]
 80060ea:	f7ff fed3 	bl	8005e94 <Principal_Datalogger_Finish>

	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
		Principal_Datalogger_Init(fatfs_struct);
}
 80060ee:	e009      	b.n	8006104 <Principal_Card_Detection+0x4c>
	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <Principal_Card_Detection+0x4c>
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <Principal_Card_Detection+0x58>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d102      	bne.n	8006104 <Principal_Card_Detection+0x4c>
		Principal_Datalogger_Init(fatfs_struct);
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7ff fda6 	bl	8005c50 <Principal_Datalogger_Init>
}
 8006104:	bf00      	nop
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40020800 	.word	0x40020800
 8006110:	2000376a 	.word	0x2000376a

08006114 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
	if(accLap < thresholdBeacon)
 8006118:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <Principal_Beacon_Detect+0x30>)
 800611a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800611e:	461a      	mov	r2, r3
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <Principal_Beacon_Detect+0x34>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d80a      	bhi.n	800613e <Principal_Beacon_Detect+0x2a>
		return;

	lapNumber++;
 8006128:	4b08      	ldr	r3, [pc, #32]	; (800614c <Principal_Beacon_Detect+0x38>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	b2da      	uxtb	r2, r3
 8006130:	4b06      	ldr	r3, [pc, #24]	; (800614c <Principal_Beacon_Detect+0x38>)
 8006132:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, BEACON_MSG);
 8006134:	2105      	movs	r1, #5
 8006136:	4806      	ldr	r0, [pc, #24]	; (8006150 <Principal_Beacon_Detect+0x3c>)
 8006138:	f7fd fb94 	bl	8003864 <Principal_Transmit_Msg>
 800613c:	e000      	b.n	8006140 <Principal_Beacon_Detect+0x2c>
		return;
 800613e:	bf00      	nop
}
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20001692 	.word	0x20001692
 8006148:	200037e4 	.word	0x200037e4
 800614c:	200005c8 	.word	0x200005c8
 8006150:	20000344 	.word	0x20000344

08006154 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af02      	add	r7, sp, #8
 800615a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 800615c:	4b32      	ldr	r3, [pc, #200]	; (8006228 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800615e:	4a33      	ldr	r2, [pc, #204]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8006160:	2100      	movs	r1, #0
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f001 fd1c 	bl	8007ba0 <HAL_CAN_GetRxMessage>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d14f      	bne.n	800620e <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
	{
		verifyCAN |= 2;
 800616e:	4b30      	ldr	r3, [pc, #192]	; (8006230 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	f043 0302 	orr.w	r3, r3, #2
 8006176:	b2da      	uxtb	r2, r3
 8006178:	4b2d      	ldr	r3, [pc, #180]	; (8006230 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800617a:	701a      	strb	r2, [r3, #0]

		if((rxHeader.IDE == CAN_ID_STD) && ((rxHeader.StdId & CAN_DAQ_MASK) == CAN_DAQ_FILTER) && (flagDatalogger == DL_SAVE))
 800617c:	4b2b      	ldr	r3, [pc, #172]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d116      	bne.n	80061b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 8006184:	4b29      	ldr	r3, [pc, #164]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800618c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006190:	d10f      	bne.n	80061b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 8006192:	4b28      	ldr	r3, [pc, #160]	; (8006234 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d10b      	bne.n	80061b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
			Principal_Datalogger_Save_Buffer(rxHeader.StdId, rxHeader.DLC, rxData, &dirStruct, &fileStruct);
 800619a:	4b24      	ldr	r3, [pc, #144]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	4b23      	ldr	r3, [pc, #140]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	b2d9      	uxtb	r1, r3
 80061a4:	4b24      	ldr	r3, [pc, #144]	; (8006238 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	4b24      	ldr	r3, [pc, #144]	; (800623c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 80061aa:	4a1f      	ldr	r2, [pc, #124]	; (8006228 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80061ac:	f7ff fea0 	bl	8005ef0 <Principal_Datalogger_Save_Buffer>
 80061b0:	e035      	b.n	800621e <HAL_CAN_RxFifo0MsgPendingCallback+0xca>

		else if(((rxHeader.ExtId & 0x1FFFF000) == 0x1E35C000) && (rxHeader.IDE == CAN_ID_EXT))
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4b22      	ldr	r3, [pc, #136]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	4a22      	ldr	r2, [pc, #136]	; (8006244 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d10d      	bne.n	80061dc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 80061c0:	4b1a      	ldr	r3, [pc, #104]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d109      	bne.n	80061dc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			PDM_CAN_Process_Data(rxHeader.ExtId, rxHeader.DLC, rxData, &pdmReadings);
 80061c8:	4b18      	ldr	r3, [pc, #96]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061ca:	6858      	ldr	r0, [r3, #4]
 80061cc:	4b17      	ldr	r3, [pc, #92]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	b2d9      	uxtb	r1, r3
 80061d2:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80061d4:	4a14      	ldr	r2, [pc, #80]	; (8006228 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80061d6:	f7fb ff83 	bl	80020e0 <PDM_CAN_Process_Data>
 80061da:	e020      	b.n	800621e <HAL_CAN_RxFifo0MsgPendingCallback+0xca>

		else if((rxHeader.ExtId == CONFIG_ID) && (rxHeader.IDE == CAN_ID_EXT))
 80061dc:	4b13      	ldr	r3, [pc, #76]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10b      	bne.n	80061fc <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 80061e4:	4b11      	ldr	r3, [pc, #68]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d107      	bne.n	80061fc <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
			Principal_Receive_Config(&hi2c1, rxData, rxHeader.DLC);
 80061ec:	4b0f      	ldr	r3, [pc, #60]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	461a      	mov	r2, r3
 80061f2:	490d      	ldr	r1, [pc, #52]	; (8006228 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80061f4:	4815      	ldr	r0, [pc, #84]	; (800624c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 80061f6:	f7ff f833 	bl	8005260 <Principal_Receive_Config>
 80061fa:	e010      	b.n	800621e <HAL_CAN_RxFifo0MsgPendingCallback+0xca>

		else
			FT_CAN_ReceiveData(rxHeader.ExtId, rxHeader.DLC, rxData, &ecuData);
 80061fc:	4b0b      	ldr	r3, [pc, #44]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80061fe:	6858      	ldr	r0, [r3, #4]
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8006202:	6919      	ldr	r1, [r3, #16]
 8006204:	4b12      	ldr	r3, [pc, #72]	; (8006250 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8006206:	4a08      	ldr	r2, [pc, #32]	; (8006228 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8006208:	f7fa fc86 	bl	8000b18 <FT_CAN_ReceiveData>
	}

	else
		verifyCAN &= 1;
}
 800620c:	e007      	b.n	800621e <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
		verifyCAN &= 1;
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	b2da      	uxtb	r2, r3
 8006218:	4b05      	ldr	r3, [pc, #20]	; (8006230 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800621a:	701a      	strb	r2, [r3, #0]
}
 800621c:	e7ff      	b.n	800621e <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000580 	.word	0x20000580
 800622c:	20000594 	.word	0x20000594
 8006230:	200037e8 	.word	0x200037e8
 8006234:	2000376a 	.word	0x2000376a
 8006238:	20002700 	.word	0x20002700
 800623c:	20001698 	.word	0x20001698
 8006240:	1ffff000 	.word	0x1ffff000
 8006244:	1e35c000 	.word	0x1e35c000
 8006248:	20000650 	.word	0x20000650
 800624c:	2000036c 	.word	0x2000036c
 8006250:	200005f4 	.word	0x200005f4

08006254 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXTI0_Pin)
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006264:	d111      	bne.n	800628a <HAL_GPIO_EXTI_Callback+0x36>
	{
		if((inputConfig & 0x01) == 0)
 8006266:	4b16      	ldr	r3, [pc, #88]	; (80062c0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_GPIO_EXTI_Callback+0x22>
			Principal_Beacon_Detect();
 8006272:	f7ff ff4f 	bl	8006114 <Principal_Beacon_Detect>

		if((inputConfig & 0x02) == 0)
 8006276:	4b12      	ldr	r3, [pc, #72]	; (80062c0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d103      	bne.n	800628a <HAL_GPIO_EXTI_Callback+0x36>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 8006282:	4910      	ldr	r1, [pc, #64]	; (80062c4 <HAL_GPIO_EXTI_Callback+0x70>)
 8006284:	4810      	ldr	r0, [pc, #64]	; (80062c8 <HAL_GPIO_EXTI_Callback+0x74>)
 8006286:	f7ff fee7 	bl	8006058 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006290:	d111      	bne.n	80062b6 <HAL_GPIO_EXTI_Callback+0x62>
	{
		if((inputConfig & 0x01) == 1)
 8006292:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <HAL_GPIO_EXTI_Callback+0x4e>
			Principal_Beacon_Detect();
 800629e:	f7ff ff39 	bl	8006114 <Principal_Beacon_Detect>

		if((inputConfig & 0x02) == 2)
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_EXTI_Callback+0x62>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 80062ae:	4905      	ldr	r1, [pc, #20]	; (80062c4 <HAL_GPIO_EXTI_Callback+0x70>)
 80062b0:	4805      	ldr	r0, [pc, #20]	; (80062c8 <HAL_GPIO_EXTI_Callback+0x74>)
 80062b2:	f7ff fed1 	bl	8006058 <Principal_Datalogger_Button>
	}
}
 80062b6:	bf00      	nop
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	2000376c 	.word	0x2000376c
 80062c4:	20002700 	.word	0x20002700
 80062c8:	20001698 	.word	0x20001698

080062cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a30      	ldr	r2, [pc, #192]	; (800639c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d158      	bne.n	8006390 <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		accDatalogger[0]++;
 80062de:	4b30      	ldr	r3, [pc, #192]	; (80063a0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	4a2e      	ldr	r2, [pc, #184]	; (80063a0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80062e6:	6013      	str	r3, [r2, #0]
		if(accDatalogger[1] > 0) accDatalogger[1]--;
 80062e8:	4b2d      	ldr	r3, [pc, #180]	; (80063a0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <HAL_TIM_PeriodElapsedCallback+0x2e>
 80062f0:	4b2b      	ldr	r3, [pc, #172]	; (80063a0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	4a2a      	ldr	r2, [pc, #168]	; (80063a0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80062f8:	6053      	str	r3, [r2, #4]

		accCAN[ANALOG_1_4]++;
 80062fa:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3301      	adds	r3, #1
 8006300:	4a28      	ldr	r2, [pc, #160]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006302:	6013      	str	r3, [r2, #0]
		accCAN[ANALOG_5_8]++;
 8006304:	4b27      	ldr	r3, [pc, #156]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	3301      	adds	r3, #1
 800630a:	4a26      	ldr	r2, [pc, #152]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800630c:	6053      	str	r3, [r2, #4]
		accCAN[ANALOG_9_12]++;
 800630e:	4b25      	ldr	r3, [pc, #148]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	3301      	adds	r3, #1
 8006314:	4a23      	ldr	r2, [pc, #140]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006316:	6093      	str	r3, [r2, #8]
		accCAN[RTC_MSG]++;
 8006318:	4b22      	ldr	r3, [pc, #136]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	3301      	adds	r3, #1
 800631e:	4a21      	ldr	r2, [pc, #132]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006320:	60d3      	str	r3, [r2, #12]
		accCAN[VERIFY_MSG]++;
 8006322:	4b20      	ldr	r3, [pc, #128]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	3301      	adds	r3, #1
 8006328:	4a1e      	ldr	r2, [pc, #120]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800632a:	6113      	str	r3, [r2, #16]
		accCAN[BEACON_MSG]++;
 800632c:	4b1d      	ldr	r3, [pc, #116]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	3301      	adds	r3, #1
 8006332:	4a1c      	ldr	r2, [pc, #112]	; (80063a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8006334:	6153      	str	r3, [r2, #20]

		accMsg[ANALOG_1_4]++;
 8006336:	4b1c      	ldr	r3, [pc, #112]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800633e:	6013      	str	r3, [r2, #0]
		accMsg[ANALOG_5_8]++;
 8006340:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	3301      	adds	r3, #1
 8006346:	4a18      	ldr	r2, [pc, #96]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006348:	6053      	str	r3, [r2, #4]
		accMsg[ANALOG_9_12]++;
 800634a:	4b17      	ldr	r3, [pc, #92]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	3301      	adds	r3, #1
 8006350:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006352:	6093      	str	r3, [r2, #8]
		accMsg[RTC_MSG]++;
 8006354:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	4a13      	ldr	r2, [pc, #76]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800635c:	60d3      	str	r3, [r2, #12]
		accMsg[VERIFY_MSG]++;
 800635e:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	3301      	adds	r3, #1
 8006364:	4a10      	ldr	r2, [pc, #64]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006366:	6113      	str	r3, [r2, #16]
		accMsg[BEACON_MSG]++;
 8006368:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	3301      	adds	r3, #1
 800636e:	4a0e      	ldr	r2, [pc, #56]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006370:	6153      	str	r3, [r2, #20]
		accMsg[ECU_SAVE]++;
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	3301      	adds	r3, #1
 8006378:	4a0b      	ldr	r2, [pc, #44]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800637a:	6193      	str	r3, [r2, #24]
		accMsg[PDM_SAVE]++;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	3301      	adds	r3, #1
 8006382:	4a09      	ldr	r2, [pc, #36]	; (80063a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8006384:	61d3      	str	r3, [r2, #28]

		accLap++;
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3301      	adds	r3, #1
 800638c:	4a07      	ldr	r2, [pc, #28]	; (80063ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800638e:	6013      	str	r3, [r2, #0]
	}
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	40001400 	.word	0x40001400
 80063a0:	200037a4 	.word	0x200037a4
 80063a4:	200037ac 	.word	0x200037ac
 80063a8:	200037c4 	.word	0x200037c4
 80063ac:	200037e4 	.word	0x200037e4

080063b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063b6:	2300      	movs	r3, #0
 80063b8:	607b      	str	r3, [r7, #4]
 80063ba:	4b10      	ldr	r3, [pc, #64]	; (80063fc <HAL_MspInit+0x4c>)
 80063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063be:	4a0f      	ldr	r2, [pc, #60]	; (80063fc <HAL_MspInit+0x4c>)
 80063c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063c4:	6453      	str	r3, [r2, #68]	; 0x44
 80063c6:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <HAL_MspInit+0x4c>)
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ce:	607b      	str	r3, [r7, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063d2:	2300      	movs	r3, #0
 80063d4:	603b      	str	r3, [r7, #0]
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <HAL_MspInit+0x4c>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	4a08      	ldr	r2, [pc, #32]	; (80063fc <HAL_MspInit+0x4c>)
 80063dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e0:	6413      	str	r3, [r2, #64]	; 0x40
 80063e2:	4b06      	ldr	r3, [pc, #24]	; (80063fc <HAL_MspInit+0x4c>)
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40023800 	.word	0x40023800

08006400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08e      	sub	sp, #56	; 0x38
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	605a      	str	r2, [r3, #4]
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	60da      	str	r2, [r3, #12]
 8006416:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a79      	ldr	r2, [pc, #484]	; (8006604 <HAL_ADC_MspInit+0x204>)
 800641e:	4293      	cmp	r3, r2
 8006420:	f040 808d 	bne.w	800653e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006424:	2300      	movs	r3, #0
 8006426:	623b      	str	r3, [r7, #32]
 8006428:	4b77      	ldr	r3, [pc, #476]	; (8006608 <HAL_ADC_MspInit+0x208>)
 800642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642c:	4a76      	ldr	r2, [pc, #472]	; (8006608 <HAL_ADC_MspInit+0x208>)
 800642e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006432:	6453      	str	r3, [r2, #68]	; 0x44
 8006434:	4b74      	ldr	r3, [pc, #464]	; (8006608 <HAL_ADC_MspInit+0x208>)
 8006436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	4b70      	ldr	r3, [pc, #448]	; (8006608 <HAL_ADC_MspInit+0x208>)
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	4a6f      	ldr	r2, [pc, #444]	; (8006608 <HAL_ADC_MspInit+0x208>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	6313      	str	r3, [r2, #48]	; 0x30
 8006450:	4b6d      	ldr	r3, [pc, #436]	; (8006608 <HAL_ADC_MspInit+0x208>)
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800645c:	2300      	movs	r3, #0
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	4b69      	ldr	r3, [pc, #420]	; (8006608 <HAL_ADC_MspInit+0x208>)
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	4a68      	ldr	r2, [pc, #416]	; (8006608 <HAL_ADC_MspInit+0x208>)
 8006466:	f043 0304 	orr.w	r3, r3, #4
 800646a:	6313      	str	r3, [r2, #48]	; 0x30
 800646c:	4b66      	ldr	r3, [pc, #408]	; (8006608 <HAL_ADC_MspInit+0x208>)
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	4b62      	ldr	r3, [pc, #392]	; (8006608 <HAL_ADC_MspInit+0x208>)
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	4a61      	ldr	r2, [pc, #388]	; (8006608 <HAL_ADC_MspInit+0x208>)
 8006482:	f043 0302 	orr.w	r3, r3, #2
 8006486:	6313      	str	r3, [r2, #48]	; 0x30
 8006488:	4b5f      	ldr	r3, [pc, #380]	; (8006608 <HAL_ADC_MspInit+0x208>)
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006494:	23c0      	movs	r3, #192	; 0xc0
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006498:	2303      	movs	r3, #3
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649c:	2300      	movs	r3, #0
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a4:	4619      	mov	r1, r3
 80064a6:	4859      	ldr	r0, [pc, #356]	; (800660c <HAL_ADC_MspInit+0x20c>)
 80064a8:	f002 fb92 	bl	8008bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80064ac:	2330      	movs	r3, #48	; 0x30
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064b0:	2303      	movs	r3, #3
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064bc:	4619      	mov	r1, r3
 80064be:	4854      	ldr	r0, [pc, #336]	; (8006610 <HAL_ADC_MspInit+0x210>)
 80064c0:	f002 fb86 	bl	8008bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064c4:	2303      	movs	r3, #3
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064c8:	2303      	movs	r3, #3
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d4:	4619      	mov	r1, r3
 80064d6:	484f      	ldr	r0, [pc, #316]	; (8006614 <HAL_ADC_MspInit+0x214>)
 80064d8:	f002 fb7a 	bl	8008bd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80064dc:	4b4e      	ldr	r3, [pc, #312]	; (8006618 <HAL_ADC_MspInit+0x218>)
 80064de:	4a4f      	ldr	r2, [pc, #316]	; (800661c <HAL_ADC_MspInit+0x21c>)
 80064e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80064e2:	4b4d      	ldr	r3, [pc, #308]	; (8006618 <HAL_ADC_MspInit+0x218>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064e8:	4b4b      	ldr	r3, [pc, #300]	; (8006618 <HAL_ADC_MspInit+0x218>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064ee:	4b4a      	ldr	r3, [pc, #296]	; (8006618 <HAL_ADC_MspInit+0x218>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80064f4:	4b48      	ldr	r3, [pc, #288]	; (8006618 <HAL_ADC_MspInit+0x218>)
 80064f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80064fc:	4b46      	ldr	r3, [pc, #280]	; (8006618 <HAL_ADC_MspInit+0x218>)
 80064fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006502:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006504:	4b44      	ldr	r3, [pc, #272]	; (8006618 <HAL_ADC_MspInit+0x218>)
 8006506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800650a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800650c:	4b42      	ldr	r3, [pc, #264]	; (8006618 <HAL_ADC_MspInit+0x218>)
 800650e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006512:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006514:	4b40      	ldr	r3, [pc, #256]	; (8006618 <HAL_ADC_MspInit+0x218>)
 8006516:	2200      	movs	r2, #0
 8006518:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800651a:	4b3f      	ldr	r3, [pc, #252]	; (8006618 <HAL_ADC_MspInit+0x218>)
 800651c:	2200      	movs	r2, #0
 800651e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006520:	483d      	ldr	r0, [pc, #244]	; (8006618 <HAL_ADC_MspInit+0x218>)
 8006522:	f001 ffb7 	bl	8008494 <HAL_DMA_Init>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800652c:	f7fb fb90 	bl	8001c50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a39      	ldr	r2, [pc, #228]	; (8006618 <HAL_ADC_MspInit+0x218>)
 8006534:	639a      	str	r2, [r3, #56]	; 0x38
 8006536:	4a38      	ldr	r2, [pc, #224]	; (8006618 <HAL_ADC_MspInit+0x218>)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800653c:	e05d      	b.n	80065fa <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a37      	ldr	r2, [pc, #220]	; (8006620 <HAL_ADC_MspInit+0x220>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d158      	bne.n	80065fa <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006548:	2300      	movs	r3, #0
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	4b2e      	ldr	r3, [pc, #184]	; (8006608 <HAL_ADC_MspInit+0x208>)
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	4a2d      	ldr	r2, [pc, #180]	; (8006608 <HAL_ADC_MspInit+0x208>)
 8006552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006556:	6453      	str	r3, [r2, #68]	; 0x44
 8006558:	4b2b      	ldr	r3, [pc, #172]	; (8006608 <HAL_ADC_MspInit+0x208>)
 800655a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	4b27      	ldr	r3, [pc, #156]	; (8006608 <HAL_ADC_MspInit+0x208>)
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	4a26      	ldr	r2, [pc, #152]	; (8006608 <HAL_ADC_MspInit+0x208>)
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	6313      	str	r3, [r2, #48]	; 0x30
 8006574:	4b24      	ldr	r3, [pc, #144]	; (8006608 <HAL_ADC_MspInit+0x208>)
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006580:	233f      	movs	r3, #63	; 0x3f
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006584:	2303      	movs	r3, #3
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006588:	2300      	movs	r3, #0
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800658c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006590:	4619      	mov	r1, r3
 8006592:	481e      	ldr	r0, [pc, #120]	; (800660c <HAL_ADC_MspInit+0x20c>)
 8006594:	f002 fb1c 	bl	8008bd0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006598:	4b22      	ldr	r3, [pc, #136]	; (8006624 <HAL_ADC_MspInit+0x224>)
 800659a:	4a23      	ldr	r2, [pc, #140]	; (8006628 <HAL_ADC_MspInit+0x228>)
 800659c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800659e:	4b21      	ldr	r3, [pc, #132]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065a4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065a6:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80065ac:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80065b2:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065b8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80065ba:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065c0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80065c2:	4b18      	ldr	r3, [pc, #96]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065c8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80065ca:	4b16      	ldr	r3, [pc, #88]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065d0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80065d2:	4b14      	ldr	r3, [pc, #80]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065da:	2200      	movs	r2, #0
 80065dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80065de:	4811      	ldr	r0, [pc, #68]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065e0:	f001 ff58 	bl	8008494 <HAL_DMA_Init>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 80065ea:	f7fb fb31 	bl	8001c50 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a0c      	ldr	r2, [pc, #48]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38
 80065f4:	4a0b      	ldr	r2, [pc, #44]	; (8006624 <HAL_ADC_MspInit+0x224>)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80065fa:	bf00      	nop
 80065fc:	3738      	adds	r7, #56	; 0x38
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40012000 	.word	0x40012000
 8006608:	40023800 	.word	0x40023800
 800660c:	40020000 	.word	0x40020000
 8006610:	40020800 	.word	0x40020800
 8006614:	40020400 	.word	0x40020400
 8006618:	20000284 	.word	0x20000284
 800661c:	40026410 	.word	0x40026410
 8006620:	40012100 	.word	0x40012100
 8006624:	200002e4 	.word	0x200002e4
 8006628:	40026440 	.word	0x40026440

0800662c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08a      	sub	sp, #40	; 0x28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006634:	f107 0314 	add.w	r3, r7, #20
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	609a      	str	r2, [r3, #8]
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <HAL_CAN_MspInit+0x94>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d134      	bne.n	80066b8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <HAL_CAN_MspInit+0x98>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <HAL_CAN_MspInit+0x98>)
 8006658:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800665c:	6413      	str	r3, [r2, #64]	; 0x40
 800665e:	4b19      	ldr	r3, [pc, #100]	; (80066c4 <HAL_CAN_MspInit+0x98>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	4b15      	ldr	r3, [pc, #84]	; (80066c4 <HAL_CAN_MspInit+0x98>)
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	4a14      	ldr	r2, [pc, #80]	; (80066c4 <HAL_CAN_MspInit+0x98>)
 8006674:	f043 0302 	orr.w	r3, r3, #2
 8006678:	6313      	str	r3, [r2, #48]	; 0x30
 800667a:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <HAL_CAN_MspInit+0x98>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800668a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800668c:	2302      	movs	r3, #2
 800668e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006694:	2303      	movs	r3, #3
 8006696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006698:	2309      	movs	r3, #9
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800669c:	f107 0314 	add.w	r3, r7, #20
 80066a0:	4619      	mov	r1, r3
 80066a2:	4809      	ldr	r0, [pc, #36]	; (80066c8 <HAL_CAN_MspInit+0x9c>)
 80066a4:	f002 fa94 	bl	8008bd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 80066a8:	2200      	movs	r2, #0
 80066aa:	2102      	movs	r1, #2
 80066ac:	2014      	movs	r0, #20
 80066ae:	f001 feba 	bl	8008426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80066b2:	2014      	movs	r0, #20
 80066b4:	f001 fed3 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80066b8:	bf00      	nop
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40006400 	.word	0x40006400
 80066c4:	40023800 	.word	0x40023800
 80066c8:	40020400 	.word	0x40020400

080066cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	; 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	605a      	str	r2, [r3, #4]
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	60da      	str	r2, [r3, #12]
 80066e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a19      	ldr	r2, [pc, #100]	; (8006750 <HAL_I2C_MspInit+0x84>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d12b      	bne.n	8006746 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ee:	2300      	movs	r3, #0
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	4b18      	ldr	r3, [pc, #96]	; (8006754 <HAL_I2C_MspInit+0x88>)
 80066f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f6:	4a17      	ldr	r2, [pc, #92]	; (8006754 <HAL_I2C_MspInit+0x88>)
 80066f8:	f043 0302 	orr.w	r3, r3, #2
 80066fc:	6313      	str	r3, [r2, #48]	; 0x30
 80066fe:	4b15      	ldr	r3, [pc, #84]	; (8006754 <HAL_I2C_MspInit+0x88>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800670a:	23c0      	movs	r3, #192	; 0xc0
 800670c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800670e:	2312      	movs	r3, #18
 8006710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006712:	2300      	movs	r3, #0
 8006714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006716:	2303      	movs	r3, #3
 8006718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800671a:	2304      	movs	r3, #4
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800671e:	f107 0314 	add.w	r3, r7, #20
 8006722:	4619      	mov	r1, r3
 8006724:	480c      	ldr	r0, [pc, #48]	; (8006758 <HAL_I2C_MspInit+0x8c>)
 8006726:	f002 fa53 	bl	8008bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <HAL_I2C_MspInit+0x88>)
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	4a08      	ldr	r2, [pc, #32]	; (8006754 <HAL_I2C_MspInit+0x88>)
 8006734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006738:	6413      	str	r3, [r2, #64]	; 0x40
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <HAL_I2C_MspInit+0x88>)
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006746:	bf00      	nop
 8006748:	3728      	adds	r7, #40	; 0x28
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40005400 	.word	0x40005400
 8006754:	40023800 	.word	0x40023800
 8006758:	40020400 	.word	0x40020400

0800675c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b09a      	sub	sp, #104	; 0x68
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006764:	f107 030c 	add.w	r3, r7, #12
 8006768:	225c      	movs	r2, #92	; 0x5c
 800676a:	2100      	movs	r1, #0
 800676c:	4618      	mov	r0, r3
 800676e:	f011 fbdb 	bl	8017f28 <memset>
  if(hrtc->Instance==RTC)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a0c      	ldr	r2, [pc, #48]	; (80067a8 <HAL_RTC_MspInit+0x4c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d111      	bne.n	80067a0 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800677c:	2320      	movs	r3, #32
 800677e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006784:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006786:	f107 030c 	add.w	r3, r7, #12
 800678a:	4618      	mov	r0, r3
 800678c:	f004 ff7c 	bl	800b688 <HAL_RCCEx_PeriphCLKConfig>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8006796:	f7fb fa5b 	bl	8001c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800679a:	4b04      	ldr	r3, [pc, #16]	; (80067ac <HAL_RTC_MspInit+0x50>)
 800679c:	2201      	movs	r2, #1
 800679e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80067a0:	bf00      	nop
 80067a2:	3768      	adds	r7, #104	; 0x68
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	40002800 	.word	0x40002800
 80067ac:	42470e3c 	.word	0x42470e3c

080067b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067b8:	f107 0314 	add.w	r3, r7, #20
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	605a      	str	r2, [r3, #4]
 80067c2:	609a      	str	r2, [r3, #8]
 80067c4:	60da      	str	r2, [r3, #12]
 80067c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a68      	ldr	r2, [pc, #416]	; (8006970 <HAL_SD_MspInit+0x1c0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	f040 80c9 	bne.w	8006966 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	4b66      	ldr	r3, [pc, #408]	; (8006974 <HAL_SD_MspInit+0x1c4>)
 80067da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067dc:	4a65      	ldr	r2, [pc, #404]	; (8006974 <HAL_SD_MspInit+0x1c4>)
 80067de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067e2:	6453      	str	r3, [r2, #68]	; 0x44
 80067e4:	4b63      	ldr	r3, [pc, #396]	; (8006974 <HAL_SD_MspInit+0x1c4>)
 80067e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	4b5f      	ldr	r3, [pc, #380]	; (8006974 <HAL_SD_MspInit+0x1c4>)
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	4a5e      	ldr	r2, [pc, #376]	; (8006974 <HAL_SD_MspInit+0x1c4>)
 80067fa:	f043 0304 	orr.w	r3, r3, #4
 80067fe:	6313      	str	r3, [r2, #48]	; 0x30
 8006800:	4b5c      	ldr	r3, [pc, #368]	; (8006974 <HAL_SD_MspInit+0x1c4>)
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800680c:	2300      	movs	r3, #0
 800680e:	60bb      	str	r3, [r7, #8]
 8006810:	4b58      	ldr	r3, [pc, #352]	; (8006974 <HAL_SD_MspInit+0x1c4>)
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	4a57      	ldr	r2, [pc, #348]	; (8006974 <HAL_SD_MspInit+0x1c4>)
 8006816:	f043 0308 	orr.w	r3, r3, #8
 800681a:	6313      	str	r3, [r2, #48]	; 0x30
 800681c:	4b55      	ldr	r3, [pc, #340]	; (8006974 <HAL_SD_MspInit+0x1c4>)
 800681e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006828:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800682c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800682e:	2302      	movs	r3, #2
 8006830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006832:	2300      	movs	r3, #0
 8006834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006836:	2303      	movs	r3, #3
 8006838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800683a:	230c      	movs	r3, #12
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800683e:	f107 0314 	add.w	r3, r7, #20
 8006842:	4619      	mov	r1, r3
 8006844:	484c      	ldr	r0, [pc, #304]	; (8006978 <HAL_SD_MspInit+0x1c8>)
 8006846:	f002 f9c3 	bl	8008bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800684a:	2304      	movs	r3, #4
 800684c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800684e:	2302      	movs	r3, #2
 8006850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006852:	2300      	movs	r3, #0
 8006854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006856:	2303      	movs	r3, #3
 8006858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800685a:	230c      	movs	r3, #12
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800685e:	f107 0314 	add.w	r3, r7, #20
 8006862:	4619      	mov	r1, r3
 8006864:	4845      	ldr	r0, [pc, #276]	; (800697c <HAL_SD_MspInit+0x1cc>)
 8006866:	f002 f9b3 	bl	8008bd0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800686a:	4b45      	ldr	r3, [pc, #276]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 800686c:	4a45      	ldr	r2, [pc, #276]	; (8006984 <HAL_SD_MspInit+0x1d4>)
 800686e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006870:	4b43      	ldr	r3, [pc, #268]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 8006872:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006876:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006878:	4b41      	ldr	r3, [pc, #260]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 800687a:	2200      	movs	r2, #0
 800687c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800687e:	4b40      	ldr	r3, [pc, #256]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 8006880:	2200      	movs	r2, #0
 8006882:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006884:	4b3e      	ldr	r3, [pc, #248]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 8006886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800688a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800688c:	4b3c      	ldr	r3, [pc, #240]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 800688e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006892:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006894:	4b3a      	ldr	r3, [pc, #232]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 8006896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800689a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800689c:	4b38      	ldr	r3, [pc, #224]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 800689e:	2220      	movs	r2, #32
 80068a0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80068a2:	4b37      	ldr	r3, [pc, #220]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80068a8:	4b35      	ldr	r3, [pc, #212]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 80068aa:	2204      	movs	r2, #4
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80068ae:	4b34      	ldr	r3, [pc, #208]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 80068b0:	2203      	movs	r2, #3
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80068b4:	4b32      	ldr	r3, [pc, #200]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 80068b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80068ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80068bc:	4b30      	ldr	r3, [pc, #192]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 80068be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80068c4:	482e      	ldr	r0, [pc, #184]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 80068c6:	f001 fde5 	bl	8008494 <HAL_DMA_Init>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80068d0:	f7fb f9be 	bl	8001c50 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a2a      	ldr	r2, [pc, #168]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
 80068da:	4a29      	ldr	r2, [pc, #164]	; (8006980 <HAL_SD_MspInit+0x1d0>)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80068e0:	4b29      	ldr	r3, [pc, #164]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 80068e2:	4a2a      	ldr	r2, [pc, #168]	; (800698c <HAL_SD_MspInit+0x1dc>)
 80068e4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80068e6:	4b28      	ldr	r3, [pc, #160]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 80068e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068ec:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068ee:	4b26      	ldr	r3, [pc, #152]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 80068f0:	2240      	movs	r2, #64	; 0x40
 80068f2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068f4:	4b24      	ldr	r3, [pc, #144]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068fa:	4b23      	ldr	r3, [pc, #140]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 80068fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006900:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006902:	4b21      	ldr	r3, [pc, #132]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 8006904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006908:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800690a:	4b1f      	ldr	r3, [pc, #124]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 800690c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006910:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006912:	4b1d      	ldr	r3, [pc, #116]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 8006914:	2220      	movs	r2, #32
 8006916:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 800691a:	2200      	movs	r2, #0
 800691c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800691e:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 8006920:	2204      	movs	r2, #4
 8006922:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006924:	4b18      	ldr	r3, [pc, #96]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 8006926:	2203      	movs	r2, #3
 8006928:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800692a:	4b17      	ldr	r3, [pc, #92]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 800692c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006930:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 8006934:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006938:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800693a:	4813      	ldr	r0, [pc, #76]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 800693c:	f001 fdaa 	bl	8008494 <HAL_DMA_Init>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8006946:	f7fb f983 	bl	8001c50 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a0e      	ldr	r2, [pc, #56]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 800694e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006950:	4a0d      	ldr	r2, [pc, #52]	; (8006988 <HAL_SD_MspInit+0x1d8>)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006956:	2200      	movs	r2, #0
 8006958:	2100      	movs	r1, #0
 800695a:	2031      	movs	r0, #49	; 0x31
 800695c:	f001 fd63 	bl	8008426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006960:	2031      	movs	r0, #49	; 0x31
 8006962:	f001 fd7c 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006966:	bf00      	nop
 8006968:	3728      	adds	r7, #40	; 0x28
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40012c00 	.word	0x40012c00
 8006974:	40023800 	.word	0x40023800
 8006978:	40020800 	.word	0x40020800
 800697c:	40020c00 	.word	0x40020c00
 8006980:	20000470 	.word	0x20000470
 8006984:	40026458 	.word	0x40026458
 8006988:	200004d0 	.word	0x200004d0
 800698c:	400264a0 	.word	0x400264a0

08006990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a0e      	ldr	r2, [pc, #56]	; (80069d8 <HAL_TIM_Base_MspInit+0x48>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d115      	bne.n	80069ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <HAL_TIM_Base_MspInit+0x4c>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	4a0c      	ldr	r2, [pc, #48]	; (80069dc <HAL_TIM_Base_MspInit+0x4c>)
 80069ac:	f043 0320 	orr.w	r3, r3, #32
 80069b0:	6413      	str	r3, [r2, #64]	; 0x40
 80069b2:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <HAL_TIM_Base_MspInit+0x4c>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80069be:	2200      	movs	r2, #0
 80069c0:	2100      	movs	r1, #0
 80069c2:	2037      	movs	r0, #55	; 0x37
 80069c4:	f001 fd2f 	bl	8008426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80069c8:	2037      	movs	r0, #55	; 0x37
 80069ca:	f001 fd48 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40001400 	.word	0x40001400
 80069dc:	40023800 	.word	0x40023800

080069e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80069e4:	e7fe      	b.n	80069e4 <NMI_Handler+0x4>

080069e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069e6:	b480      	push	{r7}
 80069e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069ea:	e7fe      	b.n	80069ea <HardFault_Handler+0x4>

080069ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069f0:	e7fe      	b.n	80069f0 <MemManage_Handler+0x4>

080069f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069f2:	b480      	push	{r7}
 80069f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069f6:	e7fe      	b.n	80069f6 <BusFault_Handler+0x4>

080069f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069fc:	e7fe      	b.n	80069fc <UsageFault_Handler+0x4>

080069fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069fe:	b480      	push	{r7}
 8006a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a02:	bf00      	nop
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a10:	bf00      	nop
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a1e:	bf00      	nop
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a2c:	f000 f922 	bl	8006c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a30:	bf00      	nop
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006a38:	4802      	ldr	r0, [pc, #8]	; (8006a44 <CAN1_RX0_IRQHandler+0x10>)
 8006a3a:	f001 f9e9 	bl	8007e10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006a3e:	bf00      	nop
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000344 	.word	0x20000344

08006a48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8006a4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006a50:	f002 fa9e 	bl	8008f90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8006a54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a58:	f002 fa9a 	bl	8008f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006a5c:	bf00      	nop
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006a64:	4802      	ldr	r0, [pc, #8]	; (8006a70 <SDIO_IRQHandler+0x10>)
 8006a66:	f006 ff3f 	bl	800d8e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006a6a:	bf00      	nop
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	200003ec 	.word	0x200003ec

08006a74 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006a78:	4802      	ldr	r0, [pc, #8]	; (8006a84 <TIM7_IRQHandler+0x10>)
 8006a7a:	f008 f89f 	bl	800ebbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006a7e:	bf00      	nop
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000530 	.word	0x20000530

08006a88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006a8c:	4802      	ldr	r0, [pc, #8]	; (8006a98 <DMA2_Stream0_IRQHandler+0x10>)
 8006a8e:	f001 fe29 	bl	80086e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006a92:	bf00      	nop
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000284 	.word	0x20000284

08006a9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006aa0:	4802      	ldr	r0, [pc, #8]	; (8006aac <DMA2_Stream2_IRQHandler+0x10>)
 8006aa2:	f001 fe1f 	bl	80086e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006aa6:	bf00      	nop
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200002e4 	.word	0x200002e4

08006ab0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006ab4:	4802      	ldr	r0, [pc, #8]	; (8006ac0 <DMA2_Stream3_IRQHandler+0x10>)
 8006ab6:	f001 fe15 	bl	80086e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000470 	.word	0x20000470

08006ac4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006ac8:	4802      	ldr	r0, [pc, #8]	; (8006ad4 <OTG_FS_IRQHandler+0x10>)
 8006aca:	f003 fbe1 	bl	800a290 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006ace:	bf00      	nop
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20003eec 	.word	0x20003eec

08006ad8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006adc:	4802      	ldr	r0, [pc, #8]	; (8006ae8 <DMA2_Stream6_IRQHandler+0x10>)
 8006ade:	f001 fe01 	bl	80086e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006ae2:	bf00      	nop
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200004d0 	.word	0x200004d0

08006aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006af4:	4a14      	ldr	r2, [pc, #80]	; (8006b48 <_sbrk+0x5c>)
 8006af6:	4b15      	ldr	r3, [pc, #84]	; (8006b4c <_sbrk+0x60>)
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b00:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <_sbrk+0x64>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b08:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <_sbrk+0x64>)
 8006b0a:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <_sbrk+0x68>)
 8006b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b0e:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <_sbrk+0x64>)
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4413      	add	r3, r2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d207      	bcs.n	8006b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b1c:	f011 f9da 	bl	8017ed4 <__errno>
 8006b20:	4603      	mov	r3, r0
 8006b22:	220c      	movs	r2, #12
 8006b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b26:	f04f 33ff 	mov.w	r3, #4294967295
 8006b2a:	e009      	b.n	8006b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b2c:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <_sbrk+0x64>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b32:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <_sbrk+0x64>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4413      	add	r3, r2
 8006b3a:	4a05      	ldr	r2, [pc, #20]	; (8006b50 <_sbrk+0x64>)
 8006b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20020000 	.word	0x20020000
 8006b4c:	00006000 	.word	0x00006000
 8006b50:	200037ec 	.word	0x200037ec
 8006b54:	20004580 	.word	0x20004580

08006b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b5c:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <SystemInit+0x20>)
 8006b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b62:	4a05      	ldr	r2, [pc, #20]	; (8006b78 <SystemInit+0x20>)
 8006b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b6c:	bf00      	nop
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	e000ed00 	.word	0xe000ed00

08006b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b80:	480d      	ldr	r0, [pc, #52]	; (8006bb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006b82:	490e      	ldr	r1, [pc, #56]	; (8006bbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006b84:	4a0e      	ldr	r2, [pc, #56]	; (8006bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b88:	e002      	b.n	8006b90 <LoopCopyDataInit>

08006b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b8e:	3304      	adds	r3, #4

08006b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b94:	d3f9      	bcc.n	8006b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b96:	4a0b      	ldr	r2, [pc, #44]	; (8006bc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006b98:	4c0b      	ldr	r4, [pc, #44]	; (8006bc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b9c:	e001      	b.n	8006ba2 <LoopFillZerobss>

08006b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ba0:	3204      	adds	r2, #4

08006ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ba4:	d3fb      	bcc.n	8006b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006ba6:	f7ff ffd7 	bl	8006b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006baa:	f011 f999 	bl	8017ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bae:	f7fa fb89 	bl	80012c4 <main>
  bx  lr    
 8006bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006bbc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006bc0:	08018dc8 	.word	0x08018dc8
  ldr r2, =_sbss
 8006bc4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006bc8:	2000457c 	.word	0x2000457c

08006bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bcc:	e7fe      	b.n	8006bcc <ADC_IRQHandler>
	...

08006bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <HAL_Init+0x40>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a0d      	ldr	r2, [pc, #52]	; (8006c10 <HAL_Init+0x40>)
 8006bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <HAL_Init+0x40>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0a      	ldr	r2, [pc, #40]	; (8006c10 <HAL_Init+0x40>)
 8006be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bec:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <HAL_Init+0x40>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a07      	ldr	r2, [pc, #28]	; (8006c10 <HAL_Init+0x40>)
 8006bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bf8:	2003      	movs	r0, #3
 8006bfa:	f001 fc09 	bl	8008410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bfe:	200f      	movs	r0, #15
 8006c00:	f000 f808 	bl	8006c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c04:	f7ff fbd4 	bl	80063b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40023c00 	.word	0x40023c00

08006c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <HAL_InitTick+0x54>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <HAL_InitTick+0x58>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	4619      	mov	r1, r3
 8006c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 fc21 	bl	800847a <HAL_SYSTICK_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e00e      	b.n	8006c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b0f      	cmp	r3, #15
 8006c46:	d80a      	bhi.n	8006c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c48:	2200      	movs	r2, #0
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	f001 fbe9 	bl	8008426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c54:	4a06      	ldr	r2, [pc, #24]	; (8006c70 <HAL_InitTick+0x5c>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e000      	b.n	8006c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000000 	.word	0x20000000
 8006c6c:	20000008 	.word	0x20000008
 8006c70:	20000004 	.word	0x20000004

08006c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c78:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <HAL_IncTick+0x20>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <HAL_IncTick+0x24>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4413      	add	r3, r2
 8006c84:	4a04      	ldr	r2, [pc, #16]	; (8006c98 <HAL_IncTick+0x24>)
 8006c86:	6013      	str	r3, [r2, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000008 	.word	0x20000008
 8006c98:	200037f0 	.word	0x200037f0

08006c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8006ca0:	4b03      	ldr	r3, [pc, #12]	; (8006cb0 <HAL_GetTick+0x14>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	200037f0 	.word	0x200037f0

08006cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cbc:	f7ff ffee 	bl	8006c9c <HAL_GetTick>
 8006cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ccc:	d005      	beq.n	8006cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cce:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <HAL_Delay+0x44>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cda:	bf00      	nop
 8006cdc:	f7ff ffde 	bl	8006c9c <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d8f7      	bhi.n	8006cdc <HAL_Delay+0x28>
  {
  }
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000008 	.word	0x20000008

08006cfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e033      	b.n	8006d7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d109      	bne.n	8006d2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fb70 	bl	8006400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d118      	bne.n	8006d6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006d42:	f023 0302 	bic.w	r3, r3, #2
 8006d46:	f043 0202 	orr.w	r2, r3, #2
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa78 	bl	8007244 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	f043 0201 	orr.w	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
 8006d6a:	e001      	b.n	8006d70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d101      	bne.n	8006da2 <HAL_ADC_Start_DMA+0x1e>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e0e9      	b.n	8006f76 <HAL_ADC_Start_DMA+0x1f2>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d018      	beq.n	8006dea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0201 	orr.w	r2, r2, #1
 8006dc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006dc8:	4b6d      	ldr	r3, [pc, #436]	; (8006f80 <HAL_ADC_Start_DMA+0x1fc>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a6d      	ldr	r2, [pc, #436]	; (8006f84 <HAL_ADC_Start_DMA+0x200>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	0c9a      	lsrs	r2, r3, #18
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	4413      	add	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ddc:	e002      	b.n	8006de4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f9      	bne.n	8006dde <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df8:	d107      	bne.n	8006e0a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e08:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	f040 80a1 	bne.w	8006f5c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d007      	beq.n	8006e4c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e58:	d106      	bne.n	8006e68 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	f023 0206 	bic.w	r2, r3, #6
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44
 8006e66:	e002      	b.n	8006e6e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e76:	4b44      	ldr	r3, [pc, #272]	; (8006f88 <HAL_ADC_Start_DMA+0x204>)
 8006e78:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	4a43      	ldr	r2, [pc, #268]	; (8006f8c <HAL_ADC_Start_DMA+0x208>)
 8006e80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	4a42      	ldr	r2, [pc, #264]	; (8006f90 <HAL_ADC_Start_DMA+0x20c>)
 8006e88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	4a41      	ldr	r2, [pc, #260]	; (8006f94 <HAL_ADC_Start_DMA+0x210>)
 8006e90:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006e9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006eaa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	334c      	adds	r3, #76	; 0x4c
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f001 fb90 	bl	80085f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d12a      	bne.n	8006f32 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a2d      	ldr	r2, [pc, #180]	; (8006f98 <HAL_ADC_Start_DMA+0x214>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d015      	beq.n	8006f12 <HAL_ADC_Start_DMA+0x18e>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a2c      	ldr	r2, [pc, #176]	; (8006f9c <HAL_ADC_Start_DMA+0x218>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d105      	bne.n	8006efc <HAL_ADC_Start_DMA+0x178>
 8006ef0:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <HAL_ADC_Start_DMA+0x204>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a27      	ldr	r2, [pc, #156]	; (8006fa0 <HAL_ADC_Start_DMA+0x21c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d136      	bne.n	8006f74 <HAL_ADC_Start_DMA+0x1f0>
 8006f06:	4b20      	ldr	r3, [pc, #128]	; (8006f88 <HAL_ADC_Start_DMA+0x204>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f003 0310 	and.w	r3, r3, #16
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d130      	bne.n	8006f74 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d129      	bne.n	8006f74 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f2e:	609a      	str	r2, [r3, #8]
 8006f30:	e020      	b.n	8006f74 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a18      	ldr	r2, [pc, #96]	; (8006f98 <HAL_ADC_Start_DMA+0x214>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d11b      	bne.n	8006f74 <HAL_ADC_Start_DMA+0x1f0>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d114      	bne.n	8006f74 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f58:	609a      	str	r2, [r3, #8]
 8006f5a:	e00b      	b.n	8006f74 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	f043 0210 	orr.w	r2, r3, #16
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6c:	f043 0201 	orr.w	r2, r3, #1
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000000 	.word	0x20000000
 8006f84:	431bde83 	.word	0x431bde83
 8006f88:	40012300 	.word	0x40012300
 8006f8c:	0800743d 	.word	0x0800743d
 8006f90:	080074f7 	.word	0x080074f7
 8006f94:	08007513 	.word	0x08007513
 8006f98:	40012000 	.word	0x40012000
 8006f9c:	40012100 	.word	0x40012100
 8006fa0:	40012200 	.word	0x40012200

08006fa4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_ADC_ConfigChannel+0x1c>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e113      	b.n	8007224 <HAL_ADC_ConfigChannel+0x244>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b09      	cmp	r3, #9
 800700a:	d925      	bls.n	8007058 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68d9      	ldr	r1, [r3, #12]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	4613      	mov	r3, r2
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	4413      	add	r3, r2
 8007020:	3b1e      	subs	r3, #30
 8007022:	2207      	movs	r2, #7
 8007024:	fa02 f303 	lsl.w	r3, r2, r3
 8007028:	43da      	mvns	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	400a      	ands	r2, r1
 8007030:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68d9      	ldr	r1, [r3, #12]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	4618      	mov	r0, r3
 8007044:	4603      	mov	r3, r0
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	4403      	add	r3, r0
 800704a:	3b1e      	subs	r3, #30
 800704c:	409a      	lsls	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	60da      	str	r2, [r3, #12]
 8007056:	e022      	b.n	800709e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6919      	ldr	r1, [r3, #16]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	4613      	mov	r3, r2
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4413      	add	r3, r2
 800706c:	2207      	movs	r2, #7
 800706e:	fa02 f303 	lsl.w	r3, r2, r3
 8007072:	43da      	mvns	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	400a      	ands	r2, r1
 800707a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6919      	ldr	r1, [r3, #16]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	4618      	mov	r0, r3
 800708e:	4603      	mov	r3, r0
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	4403      	add	r3, r0
 8007094:	409a      	lsls	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b06      	cmp	r3, #6
 80070a4:	d824      	bhi.n	80070f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	3b05      	subs	r3, #5
 80070b8:	221f      	movs	r2, #31
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	43da      	mvns	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	400a      	ands	r2, r1
 80070c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	4618      	mov	r0, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	3b05      	subs	r3, #5
 80070e2:	fa00 f203 	lsl.w	r2, r0, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	635a      	str	r2, [r3, #52]	; 0x34
 80070ee:	e04c      	b.n	800718a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	2b0c      	cmp	r3, #12
 80070f6:	d824      	bhi.n	8007142 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	3b23      	subs	r3, #35	; 0x23
 800710a:	221f      	movs	r2, #31
 800710c:	fa02 f303 	lsl.w	r3, r2, r3
 8007110:	43da      	mvns	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	400a      	ands	r2, r1
 8007118:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	4618      	mov	r0, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	3b23      	subs	r3, #35	; 0x23
 8007134:	fa00 f203 	lsl.w	r2, r0, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	631a      	str	r2, [r3, #48]	; 0x30
 8007140:	e023      	b.n	800718a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	3b41      	subs	r3, #65	; 0x41
 8007154:	221f      	movs	r2, #31
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	43da      	mvns	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	400a      	ands	r2, r1
 8007162:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	4618      	mov	r0, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	3b41      	subs	r3, #65	; 0x41
 800717e:	fa00 f203 	lsl.w	r2, r0, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800718a:	4b29      	ldr	r3, [pc, #164]	; (8007230 <HAL_ADC_ConfigChannel+0x250>)
 800718c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a28      	ldr	r2, [pc, #160]	; (8007234 <HAL_ADC_ConfigChannel+0x254>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d10f      	bne.n	80071b8 <HAL_ADC_ConfigChannel+0x1d8>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b12      	cmp	r3, #18
 800719e:	d10b      	bne.n	80071b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1d      	ldr	r2, [pc, #116]	; (8007234 <HAL_ADC_ConfigChannel+0x254>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d12b      	bne.n	800721a <HAL_ADC_ConfigChannel+0x23a>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <HAL_ADC_ConfigChannel+0x258>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <HAL_ADC_ConfigChannel+0x1f4>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b11      	cmp	r3, #17
 80071d2:	d122      	bne.n	800721a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a11      	ldr	r2, [pc, #68]	; (8007238 <HAL_ADC_ConfigChannel+0x258>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d111      	bne.n	800721a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80071f6:	4b11      	ldr	r3, [pc, #68]	; (800723c <HAL_ADC_ConfigChannel+0x25c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a11      	ldr	r2, [pc, #68]	; (8007240 <HAL_ADC_ConfigChannel+0x260>)
 80071fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007200:	0c9a      	lsrs	r2, r3, #18
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800720c:	e002      	b.n	8007214 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	3b01      	subs	r3, #1
 8007212:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f9      	bne.n	800720e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	40012300 	.word	0x40012300
 8007234:	40012000 	.word	0x40012000
 8007238:	10000012 	.word	0x10000012
 800723c:	20000000 	.word	0x20000000
 8007240:	431bde83 	.word	0x431bde83

08007244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800724c:	4b79      	ldr	r3, [pc, #484]	; (8007434 <ADC_Init+0x1f0>)
 800724e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	431a      	orrs	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6859      	ldr	r1, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	021a      	lsls	r2, r3, #8
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800729c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6859      	ldr	r1, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689a      	ldr	r2, [r3, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6899      	ldr	r1, [r3, #8]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d6:	4a58      	ldr	r2, [pc, #352]	; (8007438 <ADC_Init+0x1f4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d022      	beq.n	8007322 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6899      	ldr	r1, [r3, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800730c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6899      	ldr	r1, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	609a      	str	r2, [r3, #8]
 8007320:	e00f      	b.n	8007342 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007340:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0202 	bic.w	r2, r2, #2
 8007350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6899      	ldr	r1, [r3, #8]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	7e1b      	ldrb	r3, [r3, #24]
 800735c:	005a      	lsls	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01b      	beq.n	80073a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800737e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800738e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6859      	ldr	r1, [r3, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	3b01      	subs	r3, #1
 800739c:	035a      	lsls	r2, r3, #13
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
 80073a6:	e007      	b.n	80073b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80073c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	051a      	lsls	r2, r3, #20
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6899      	ldr	r1, [r3, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073fa:	025a      	lsls	r2, r3, #9
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6899      	ldr	r1, [r3, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	029a      	lsls	r2, r3, #10
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	609a      	str	r2, [r3, #8]
}
 8007428:	bf00      	nop
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	40012300 	.word	0x40012300
 8007438:	0f000001 	.word	0x0f000001

0800743c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007452:	2b00      	cmp	r3, #0
 8007454:	d13c      	bne.n	80074d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d12b      	bne.n	80074c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007474:	2b00      	cmp	r3, #0
 8007476:	d127      	bne.n	80074c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007482:	2b00      	cmp	r3, #0
 8007484:	d006      	beq.n	8007494 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007490:	2b00      	cmp	r3, #0
 8007492:	d119      	bne.n	80074c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 0220 	bic.w	r2, r2, #32
 80074a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	f043 0201 	orr.w	r2, r3, #1
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f7ff fd6b 	bl	8006fa4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80074ce:	e00e      	b.n	80074ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	f003 0310 	and.w	r3, r3, #16
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f7ff fd75 	bl	8006fcc <HAL_ADC_ErrorCallback>
}
 80074e2:	e004      	b.n	80074ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
}
 80074ee:	bf00      	nop
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b084      	sub	sp, #16
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7ff fd57 	bl	8006fb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800750a:	bf00      	nop
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2240      	movs	r2, #64	; 0x40
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	f043 0204 	orr.w	r2, r3, #4
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff fd4a 	bl	8006fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007538:	bf00      	nop
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e0ed      	b.n	800772e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d102      	bne.n	8007564 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff f864 	bl	800662c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0201 	orr.w	r2, r2, #1
 8007572:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007574:	f7ff fb92 	bl	8006c9c <HAL_GetTick>
 8007578:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800757a:	e012      	b.n	80075a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800757c:	f7ff fb8e 	bl	8006c9c <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b0a      	cmp	r3, #10
 8007588:	d90b      	bls.n	80075a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2205      	movs	r2, #5
 800759a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e0c5      	b.n	800772e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0e5      	beq.n	800757c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0202 	bic.w	r2, r2, #2
 80075be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075c0:	f7ff fb6c 	bl	8006c9c <HAL_GetTick>
 80075c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80075c6:	e012      	b.n	80075ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80075c8:	f7ff fb68 	bl	8006c9c <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b0a      	cmp	r3, #10
 80075d4:	d90b      	bls.n	80075ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2205      	movs	r2, #5
 80075e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e09f      	b.n	800772e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e5      	bne.n	80075c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	7e1b      	ldrb	r3, [r3, #24]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d108      	bne.n	8007616 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	e007      	b.n	8007626 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007624:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7e5b      	ldrb	r3, [r3, #25]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d108      	bne.n	8007640 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	e007      	b.n	8007650 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800764e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	7e9b      	ldrb	r3, [r3, #26]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d108      	bne.n	800766a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0220 	orr.w	r2, r2, #32
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e007      	b.n	800767a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0220 	bic.w	r2, r2, #32
 8007678:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	7edb      	ldrb	r3, [r3, #27]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d108      	bne.n	8007694 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0210 	bic.w	r2, r2, #16
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	e007      	b.n	80076a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0210 	orr.w	r2, r2, #16
 80076a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	7f1b      	ldrb	r3, [r3, #28]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d108      	bne.n	80076be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0208 	orr.w	r2, r2, #8
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	e007      	b.n	80076ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0208 	bic.w	r2, r2, #8
 80076cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	7f5b      	ldrb	r3, [r3, #29]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d108      	bne.n	80076e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0204 	orr.w	r2, r2, #4
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	e007      	b.n	80076f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0204 	bic.w	r2, r2, #4
 80076f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	431a      	orrs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	ea42 0103 	orr.w	r1, r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	1e5a      	subs	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800774e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007750:	7cfb      	ldrb	r3, [r7, #19]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d003      	beq.n	800775e <HAL_CAN_ConfigFilter+0x26>
 8007756:	7cfb      	ldrb	r3, [r7, #19]
 8007758:	2b02      	cmp	r3, #2
 800775a:	f040 80be 	bne.w	80078da <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800775e:	4b65      	ldr	r3, [pc, #404]	; (80078f4 <HAL_CAN_ConfigFilter+0x1bc>)
 8007760:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007768:	f043 0201 	orr.w	r2, r3, #1
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007778:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	431a      	orrs	r2, r3
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	2201      	movs	r2, #1
 80077a0:	fa02 f303 	lsl.w	r3, r2, r3
 80077a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	43db      	mvns	r3, r3
 80077b0:	401a      	ands	r2, r3
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d123      	bne.n	8007808 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	43db      	mvns	r3, r3
 80077ca:	401a      	ands	r2, r3
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80077e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	3248      	adds	r2, #72	; 0x48
 80077e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80077fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80077fe:	6979      	ldr	r1, [r7, #20]
 8007800:	3348      	adds	r3, #72	; 0x48
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	440b      	add	r3, r1
 8007806:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d122      	bne.n	8007856 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	431a      	orrs	r2, r3
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007830:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	3248      	adds	r2, #72	; 0x48
 8007836:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800784a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800784c:	6979      	ldr	r1, [r7, #20]
 800784e:	3348      	adds	r3, #72	; 0x48
 8007850:	00db      	lsls	r3, r3, #3
 8007852:	440b      	add	r3, r1
 8007854:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d109      	bne.n	8007872 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	43db      	mvns	r3, r3
 8007868:	401a      	ands	r2, r3
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007870:	e007      	b.n	8007882 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	431a      	orrs	r2, r3
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	43db      	mvns	r3, r3
 8007894:	401a      	ands	r2, r3
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800789c:	e007      	b.n	80078ae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d107      	bne.n	80078c6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	431a      	orrs	r2, r3
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078cc:	f023 0201 	bic.w	r2, r3, #1
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e006      	b.n	80078e8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
  }
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	40006400 	.word	0x40006400

080078f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	d12e      	bne.n	800796a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0201 	bic.w	r2, r2, #1
 8007922:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007924:	f7ff f9ba 	bl	8006c9c <HAL_GetTick>
 8007928:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800792a:	e012      	b.n	8007952 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800792c:	f7ff f9b6 	bl	8006c9c <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b0a      	cmp	r3, #10
 8007938:	d90b      	bls.n	8007952 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2205      	movs	r2, #5
 800794a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e012      	b.n	8007978 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e5      	bne.n	800792c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	e006      	b.n	8007978 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
  }
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007980:	b480      	push	{r7}
 8007982:	b089      	sub	sp, #36	; 0x24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007994:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800799e:	7ffb      	ldrb	r3, [r7, #31]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d003      	beq.n	80079ac <HAL_CAN_AddTxMessage+0x2c>
 80079a4:	7ffb      	ldrb	r3, [r7, #31]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	f040 80b8 	bne.w	8007b1c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d105      	bne.n	80079cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 80a0 	beq.w	8007b0c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	0e1b      	lsrs	r3, r3, #24
 80079d0:	f003 0303 	and.w	r3, r3, #3
 80079d4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d907      	bls.n	80079ec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e09e      	b.n	8007b2a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80079ec:	2201      	movs	r2, #1
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	409a      	lsls	r2, r3
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10d      	bne.n	8007a1a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007a08:	68f9      	ldr	r1, [r7, #12]
 8007a0a:	6809      	ldr	r1, [r1, #0]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	3318      	adds	r3, #24
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	440b      	add	r3, r1
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	e00f      	b.n	8007a3a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a24:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a2a:	68f9      	ldr	r1, [r7, #12]
 8007a2c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007a2e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	3318      	adds	r3, #24
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	440b      	add	r3, r1
 8007a38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6819      	ldr	r1, [r3, #0]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	691a      	ldr	r2, [r3, #16]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	3318      	adds	r3, #24
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	440b      	add	r3, r1
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	7d1b      	ldrb	r3, [r3, #20]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d111      	bne.n	8007a7a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	3318      	adds	r3, #24
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	4413      	add	r3, r2
 8007a62:	3304      	adds	r3, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	6811      	ldr	r1, [r2, #0]
 8007a6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	3318      	adds	r3, #24
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	440b      	add	r3, r1
 8007a76:	3304      	adds	r3, #4
 8007a78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3307      	adds	r3, #7
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	061a      	lsls	r2, r3, #24
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3306      	adds	r3, #6
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	041b      	lsls	r3, r3, #16
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3305      	adds	r3, #5
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	4313      	orrs	r3, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	3204      	adds	r2, #4
 8007a9a:	7812      	ldrb	r2, [r2, #0]
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	6811      	ldr	r1, [r2, #0]
 8007aa2:	ea43 0200 	orr.w	r2, r3, r0
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	440b      	add	r3, r1
 8007aac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007ab0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3303      	adds	r3, #3
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	061a      	lsls	r2, r3, #24
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3302      	adds	r3, #2
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	041b      	lsls	r3, r3, #16
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	021b      	lsls	r3, r3, #8
 8007acc:	4313      	orrs	r3, r2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	7812      	ldrb	r2, [r2, #0]
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	6811      	ldr	r1, [r2, #0]
 8007ad8:	ea43 0200 	orr.w	r2, r3, r0
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	440b      	add	r3, r1
 8007ae2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007ae6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	3318      	adds	r3, #24
 8007af0:	011b      	lsls	r3, r3, #4
 8007af2:	4413      	add	r3, r2
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	6811      	ldr	r1, [r2, #0]
 8007afa:	f043 0201 	orr.w	r2, r3, #1
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	3318      	adds	r3, #24
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	440b      	add	r3, r1
 8007b06:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e00e      	b.n	8007b2a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e006      	b.n	8007b2a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
  }
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3724      	adds	r7, #36	; 0x24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b48:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d002      	beq.n	8007b56 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007b50:	7afb      	ldrb	r3, [r7, #11]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d11d      	bne.n	8007b92 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3301      	adds	r3, #1
 8007b68:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007b92:	68fb      	ldr	r3, [r7, #12]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bb4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d003      	beq.n	8007bc4 <HAL_CAN_GetRxMessage+0x24>
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	f040 80f3 	bne.w	8007daa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10e      	bne.n	8007be8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0303 	and.w	r3, r3, #3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d116      	bne.n	8007c06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e0e7      	b.n	8007db8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d107      	bne.n	8007c06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e0d8      	b.n	8007db8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	331b      	adds	r3, #27
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	4413      	add	r3, r2
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0204 	and.w	r2, r3, #4
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10c      	bne.n	8007c3e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	331b      	adds	r3, #27
 8007c2c:	011b      	lsls	r3, r3, #4
 8007c2e:	4413      	add	r3, r2
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	0d5b      	lsrs	r3, r3, #21
 8007c34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	e00b      	b.n	8007c56 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	331b      	adds	r3, #27
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	4413      	add	r3, r2
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	08db      	lsrs	r3, r3, #3
 8007c4e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	331b      	adds	r3, #27
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	4413      	add	r3, r2
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0202 	and.w	r2, r3, #2
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	331b      	adds	r3, #27
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	4413      	add	r3, r2
 8007c78:	3304      	adds	r3, #4
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 020f 	and.w	r2, r3, #15
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	331b      	adds	r3, #27
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	4413      	add	r3, r2
 8007c90:	3304      	adds	r3, #4
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	0a1b      	lsrs	r3, r3, #8
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	331b      	adds	r3, #27
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3304      	adds	r3, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	0c1b      	lsrs	r3, r3, #16
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	0a1a      	lsrs	r2, r3, #8
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	0c1a      	lsrs	r2, r3, #16
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	b2d2      	uxtb	r2, r2
 8007cfc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	0e1a      	lsrs	r2, r3, #24
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	3303      	adds	r3, #3
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	b2d2      	uxtb	r2, r2
 8007d2e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	011b      	lsls	r3, r3, #4
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	0a1a      	lsrs	r2, r3, #8
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	3305      	adds	r3, #5
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	0c1a      	lsrs	r2, r3, #16
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	3306      	adds	r3, #6
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	0e1a      	lsrs	r2, r3, #24
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	3307      	adds	r3, #7
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d108      	bne.n	8007d96 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0220 	orr.w	r2, r2, #32
 8007d92:	60da      	str	r2, [r3, #12]
 8007d94:	e007      	b.n	8007da6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0220 	orr.w	r2, r2, #32
 8007da4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e006      	b.n	8007db8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
  }
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007dd4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d002      	beq.n	8007de2 <HAL_CAN_ActivateNotification+0x1e>
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d109      	bne.n	8007df6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6959      	ldr	r1, [r3, #20]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e006      	b.n	8007e04 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
  }
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08a      	sub	sp, #40	; 0x28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d07c      	beq.n	8007f50 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d023      	beq.n	8007ea8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2201      	movs	r2, #1
 8007e66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f983 	bl	800817e <HAL_CAN_TxMailbox0CompleteCallback>
 8007e78:	e016      	b.n	8007ea8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8c:	e00c      	b.n	8007ea8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea0:	e002      	b.n	8007ea8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f989 	bl	80081ba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d024      	beq.n	8007efc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f963 	bl	8008192 <HAL_CAN_TxMailbox1CompleteCallback>
 8007ecc:	e016      	b.n	8007efc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee0:	e00c      	b.n	8007efc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d004      	beq.n	8007ef6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef4:	e002      	b.n	8007efc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f969 	bl	80081ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d024      	beq.n	8007f50 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007f0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f943 	bl	80081a6 <HAL_CAN_TxMailbox2CompleteCallback>
 8007f20:	e016      	b.n	8007f50 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
 8007f34:	e00c      	b.n	8007f50 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
 8007f48:	e002      	b.n	8007f50 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f949 	bl	80081e2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	f003 0308 	and.w	r3, r3, #8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00c      	beq.n	8007f74 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2210      	movs	r2, #16
 8007f72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00b      	beq.n	8007f96 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f003 0308 	and.w	r3, r3, #8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d006      	beq.n	8007f96 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f930 	bl	80081f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d009      	beq.n	8007fb4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7fe f8d0 	bl	8006154 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f003 0310 	and.w	r3, r3, #16
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d007      	beq.n	8007fd8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2210      	movs	r2, #16
 8007fd6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	f003 0320 	and.w	r3, r3, #32
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00b      	beq.n	8007ffa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f003 0308 	and.w	r3, r3, #8
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d006      	beq.n	8007ffa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f912 	bl	800821e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b00      	cmp	r3, #0
 8008002:	d009      	beq.n	8008018 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0303 	and.w	r3, r3, #3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f8f9 	bl	800820a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b00      	cmp	r3, #0
 800802a:	d006      	beq.n	800803a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2210      	movs	r2, #16
 8008032:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f8fc 	bl	8008232 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d006      	beq.n	800805c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2208      	movs	r2, #8
 8008054:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f8f5 	bl	8008246 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d07b      	beq.n	800815e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b00      	cmp	r3, #0
 800806e:	d072      	beq.n	8008156 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008076:	2b00      	cmp	r3, #0
 8008078:	d008      	beq.n	800808c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	f043 0301 	orr.w	r3, r3, #1
 800808a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008092:	2b00      	cmp	r3, #0
 8008094:	d008      	beq.n	80080a8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	f043 0302 	orr.w	r3, r3, #2
 80080a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d008      	beq.n	80080c4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	f043 0304 	orr.w	r3, r3, #4
 80080c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d043      	beq.n	8008156 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d03e      	beq.n	8008156 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080de:	2b60      	cmp	r3, #96	; 0x60
 80080e0:	d02b      	beq.n	800813a <HAL_CAN_IRQHandler+0x32a>
 80080e2:	2b60      	cmp	r3, #96	; 0x60
 80080e4:	d82e      	bhi.n	8008144 <HAL_CAN_IRQHandler+0x334>
 80080e6:	2b50      	cmp	r3, #80	; 0x50
 80080e8:	d022      	beq.n	8008130 <HAL_CAN_IRQHandler+0x320>
 80080ea:	2b50      	cmp	r3, #80	; 0x50
 80080ec:	d82a      	bhi.n	8008144 <HAL_CAN_IRQHandler+0x334>
 80080ee:	2b40      	cmp	r3, #64	; 0x40
 80080f0:	d019      	beq.n	8008126 <HAL_CAN_IRQHandler+0x316>
 80080f2:	2b40      	cmp	r3, #64	; 0x40
 80080f4:	d826      	bhi.n	8008144 <HAL_CAN_IRQHandler+0x334>
 80080f6:	2b30      	cmp	r3, #48	; 0x30
 80080f8:	d010      	beq.n	800811c <HAL_CAN_IRQHandler+0x30c>
 80080fa:	2b30      	cmp	r3, #48	; 0x30
 80080fc:	d822      	bhi.n	8008144 <HAL_CAN_IRQHandler+0x334>
 80080fe:	2b10      	cmp	r3, #16
 8008100:	d002      	beq.n	8008108 <HAL_CAN_IRQHandler+0x2f8>
 8008102:	2b20      	cmp	r3, #32
 8008104:	d005      	beq.n	8008112 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008106:	e01d      	b.n	8008144 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	f043 0308 	orr.w	r3, r3, #8
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008110:	e019      	b.n	8008146 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	f043 0310 	orr.w	r3, r3, #16
 8008118:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800811a:	e014      	b.n	8008146 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	f043 0320 	orr.w	r3, r3, #32
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008124:	e00f      	b.n	8008146 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800812e:	e00a      	b.n	8008146 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008136:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008138:	e005      	b.n	8008146 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008142:	e000      	b.n	8008146 <HAL_CAN_IRQHandler+0x336>
            break;
 8008144:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	699a      	ldr	r2, [r3, #24]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008154:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2204      	movs	r2, #4
 800815c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f872 	bl	800825a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008176:	bf00      	nop
 8008178:	3728      	adds	r7, #40	; 0x28
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800817e:	b480      	push	{r7}
 8008180:	b083      	sub	sp, #12
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008262:	bf00      	nop
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008280:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <__NVIC_SetPriorityGrouping+0x44>)
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800828c:	4013      	ands	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800829c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082a2:	4a04      	ldr	r2, [pc, #16]	; (80082b4 <__NVIC_SetPriorityGrouping+0x44>)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	60d3      	str	r3, [r2, #12]
}
 80082a8:	bf00      	nop
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	e000ed00 	.word	0xe000ed00

080082b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80082b8:	b480      	push	{r7}
 80082ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082bc:	4b04      	ldr	r3, [pc, #16]	; (80082d0 <__NVIC_GetPriorityGrouping+0x18>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	0a1b      	lsrs	r3, r3, #8
 80082c2:	f003 0307 	and.w	r3, r3, #7
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	e000ed00 	.word	0xe000ed00

080082d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	db0b      	blt.n	80082fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	f003 021f 	and.w	r2, r3, #31
 80082ec:	4907      	ldr	r1, [pc, #28]	; (800830c <__NVIC_EnableIRQ+0x38>)
 80082ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082f2:	095b      	lsrs	r3, r3, #5
 80082f4:	2001      	movs	r0, #1
 80082f6:	fa00 f202 	lsl.w	r2, r0, r2
 80082fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	e000e100 	.word	0xe000e100

08008310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	4603      	mov	r3, r0
 8008318:	6039      	str	r1, [r7, #0]
 800831a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800831c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008320:	2b00      	cmp	r3, #0
 8008322:	db0a      	blt.n	800833a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	b2da      	uxtb	r2, r3
 8008328:	490c      	ldr	r1, [pc, #48]	; (800835c <__NVIC_SetPriority+0x4c>)
 800832a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800832e:	0112      	lsls	r2, r2, #4
 8008330:	b2d2      	uxtb	r2, r2
 8008332:	440b      	add	r3, r1
 8008334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008338:	e00a      	b.n	8008350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	b2da      	uxtb	r2, r3
 800833e:	4908      	ldr	r1, [pc, #32]	; (8008360 <__NVIC_SetPriority+0x50>)
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	f003 030f 	and.w	r3, r3, #15
 8008346:	3b04      	subs	r3, #4
 8008348:	0112      	lsls	r2, r2, #4
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	440b      	add	r3, r1
 800834e:	761a      	strb	r2, [r3, #24]
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	e000e100 	.word	0xe000e100
 8008360:	e000ed00 	.word	0xe000ed00

08008364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008364:	b480      	push	{r7}
 8008366:	b089      	sub	sp, #36	; 0x24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f1c3 0307 	rsb	r3, r3, #7
 800837e:	2b04      	cmp	r3, #4
 8008380:	bf28      	it	cs
 8008382:	2304      	movcs	r3, #4
 8008384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	3304      	adds	r3, #4
 800838a:	2b06      	cmp	r3, #6
 800838c:	d902      	bls.n	8008394 <NVIC_EncodePriority+0x30>
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	3b03      	subs	r3, #3
 8008392:	e000      	b.n	8008396 <NVIC_EncodePriority+0x32>
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008398:	f04f 32ff 	mov.w	r2, #4294967295
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	fa02 f303 	lsl.w	r3, r2, r3
 80083a2:	43da      	mvns	r2, r3
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	401a      	ands	r2, r3
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083ac:	f04f 31ff 	mov.w	r1, #4294967295
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	fa01 f303 	lsl.w	r3, r1, r3
 80083b6:	43d9      	mvns	r1, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083bc:	4313      	orrs	r3, r2
         );
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3724      	adds	r7, #36	; 0x24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
	...

080083cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083dc:	d301      	bcc.n	80083e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083de:	2301      	movs	r3, #1
 80083e0:	e00f      	b.n	8008402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083e2:	4a0a      	ldr	r2, [pc, #40]	; (800840c <SysTick_Config+0x40>)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083ea:	210f      	movs	r1, #15
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	f7ff ff8e 	bl	8008310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083f4:	4b05      	ldr	r3, [pc, #20]	; (800840c <SysTick_Config+0x40>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083fa:	4b04      	ldr	r3, [pc, #16]	; (800840c <SysTick_Config+0x40>)
 80083fc:	2207      	movs	r2, #7
 80083fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	e000e010 	.word	0xe000e010

08008410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff ff29 	bl	8008270 <__NVIC_SetPriorityGrouping>
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008426:	b580      	push	{r7, lr}
 8008428:	b086      	sub	sp, #24
 800842a:	af00      	add	r7, sp, #0
 800842c:	4603      	mov	r3, r0
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
 8008432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008434:	2300      	movs	r3, #0
 8008436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008438:	f7ff ff3e 	bl	80082b8 <__NVIC_GetPriorityGrouping>
 800843c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	6978      	ldr	r0, [r7, #20]
 8008444:	f7ff ff8e 	bl	8008364 <NVIC_EncodePriority>
 8008448:	4602      	mov	r2, r0
 800844a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff ff5d 	bl	8008310 <__NVIC_SetPriority>
}
 8008456:	bf00      	nop
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	4603      	mov	r3, r0
 8008466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800846c:	4618      	mov	r0, r3
 800846e:	f7ff ff31 	bl	80082d4 <__NVIC_EnableIRQ>
}
 8008472:	bf00      	nop
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff ffa2 	bl	80083cc <SysTick_Config>
 8008488:	4603      	mov	r3, r0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80084a0:	f7fe fbfc 	bl	8006c9c <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e099      	b.n	80085e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084d0:	e00f      	b.n	80084f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084d2:	f7fe fbe3 	bl	8006c9c <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b05      	cmp	r3, #5
 80084de:	d908      	bls.n	80084f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2203      	movs	r2, #3
 80084ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e078      	b.n	80085e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e8      	bne.n	80084d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4b38      	ldr	r3, [pc, #224]	; (80085ec <HAL_DMA_Init+0x158>)
 800850c:	4013      	ands	r3, r2
 800850e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800851e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800852a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008536:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	4313      	orrs	r3, r2
 8008542:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	2b04      	cmp	r3, #4
 800854a:	d107      	bne.n	800855c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	4313      	orrs	r3, r2
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4313      	orrs	r3, r2
 800855a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f023 0307 	bic.w	r3, r3, #7
 8008572:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	4313      	orrs	r3, r2
 800857c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008582:	2b04      	cmp	r3, #4
 8008584:	d117      	bne.n	80085b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00e      	beq.n	80085b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa9d 	bl	8008ad8 <DMA_CheckFifoParam>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d008      	beq.n	80085b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2240      	movs	r2, #64	; 0x40
 80085a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80085b2:	2301      	movs	r3, #1
 80085b4:	e016      	b.n	80085e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa54 	bl	8008a6c <DMA_CalcBaseAndBitshift>
 80085c4:	4603      	mov	r3, r0
 80085c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085cc:	223f      	movs	r2, #63	; 0x3f
 80085ce:	409a      	lsls	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	f010803f 	.word	0xf010803f

080085f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008606:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_DMA_Start_IT+0x26>
 8008612:	2302      	movs	r3, #2
 8008614:	e040      	b.n	8008698 <HAL_DMA_Start_IT+0xa8>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b01      	cmp	r3, #1
 8008628:	d12f      	bne.n	800868a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2202      	movs	r2, #2
 800862e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 f9e6 	bl	8008a10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008648:	223f      	movs	r2, #63	; 0x3f
 800864a:	409a      	lsls	r2, r3
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0216 	orr.w	r2, r2, #22
 800865e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0208 	orr.w	r2, r2, #8
 8008676:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	e005      	b.n	8008696 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008692:	2302      	movs	r3, #2
 8008694:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008696:	7dfb      	ldrb	r3, [r7, #23]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d004      	beq.n	80086be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2280      	movs	r2, #128	; 0x80
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e00c      	b.n	80086d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2205      	movs	r2, #5
 80086c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0201 	bic.w	r2, r2, #1
 80086d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80086f0:	4b8e      	ldr	r3, [pc, #568]	; (800892c <HAL_DMA_IRQHandler+0x248>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a8e      	ldr	r2, [pc, #568]	; (8008930 <HAL_DMA_IRQHandler+0x24c>)
 80086f6:	fba2 2303 	umull	r2, r3, r2, r3
 80086fa:	0a9b      	lsrs	r3, r3, #10
 80086fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008702:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870e:	2208      	movs	r2, #8
 8008710:	409a      	lsls	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4013      	ands	r3, r2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d01a      	beq.n	8008750 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d013      	beq.n	8008750 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0204 	bic.w	r2, r2, #4
 8008736:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800873c:	2208      	movs	r2, #8
 800873e:	409a      	lsls	r2, r3
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008748:	f043 0201 	orr.w	r2, r3, #1
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008754:	2201      	movs	r2, #1
 8008756:	409a      	lsls	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4013      	ands	r3, r2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d012      	beq.n	8008786 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00b      	beq.n	8008786 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008772:	2201      	movs	r2, #1
 8008774:	409a      	lsls	r2, r3
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877e:	f043 0202 	orr.w	r2, r3, #2
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878a:	2204      	movs	r2, #4
 800878c:	409a      	lsls	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4013      	ands	r3, r2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d012      	beq.n	80087bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a8:	2204      	movs	r2, #4
 80087aa:	409a      	lsls	r2, r3
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b4:	f043 0204 	orr.w	r2, r3, #4
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087c0:	2210      	movs	r2, #16
 80087c2:	409a      	lsls	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4013      	ands	r3, r2
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d043      	beq.n	8008854 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d03c      	beq.n	8008854 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087de:	2210      	movs	r2, #16
 80087e0:	409a      	lsls	r2, r3
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d018      	beq.n	8008826 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d108      	bne.n	8008814 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	2b00      	cmp	r3, #0
 8008808:	d024      	beq.n	8008854 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4798      	blx	r3
 8008812:	e01f      	b.n	8008854 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01b      	beq.n	8008854 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	4798      	blx	r3
 8008824:	e016      	b.n	8008854 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008830:	2b00      	cmp	r3, #0
 8008832:	d107      	bne.n	8008844 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0208 	bic.w	r2, r2, #8
 8008842:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008858:	2220      	movs	r2, #32
 800885a:	409a      	lsls	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4013      	ands	r3, r2
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 808f 	beq.w	8008984 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 8087 	beq.w	8008984 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887a:	2220      	movs	r2, #32
 800887c:	409a      	lsls	r2, r3
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b05      	cmp	r3, #5
 800888c:	d136      	bne.n	80088fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0216 	bic.w	r2, r2, #22
 800889c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	695a      	ldr	r2, [r3, #20]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d103      	bne.n	80088be <HAL_DMA_IRQHandler+0x1da>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d007      	beq.n	80088ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0208 	bic.w	r2, r2, #8
 80088cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d2:	223f      	movs	r2, #63	; 0x3f
 80088d4:	409a      	lsls	r2, r3
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d07e      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	4798      	blx	r3
        }
        return;
 80088fa:	e079      	b.n	80089f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d01d      	beq.n	8008946 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10d      	bne.n	8008934 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891c:	2b00      	cmp	r3, #0
 800891e:	d031      	beq.n	8008984 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	4798      	blx	r3
 8008928:	e02c      	b.n	8008984 <HAL_DMA_IRQHandler+0x2a0>
 800892a:	bf00      	nop
 800892c:	20000000 	.word	0x20000000
 8008930:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d023      	beq.n	8008984 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	4798      	blx	r3
 8008944:	e01e      	b.n	8008984 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10f      	bne.n	8008974 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 0210 	bic.w	r2, r2, #16
 8008962:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008988:	2b00      	cmp	r3, #0
 800898a:	d032      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d022      	beq.n	80089de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2205      	movs	r2, #5
 800899c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0201 	bic.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	3301      	adds	r3, #1
 80089b4:	60bb      	str	r3, [r7, #8]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d307      	bcc.n	80089cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1f2      	bne.n	80089b0 <HAL_DMA_IRQHandler+0x2cc>
 80089ca:	e000      	b.n	80089ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80089cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d005      	beq.n	80089f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	4798      	blx	r3
 80089ee:	e000      	b.n	80089f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80089f0:	bf00      	nop
    }
  }
}
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	2b40      	cmp	r3, #64	; 0x40
 8008a3c:	d108      	bne.n	8008a50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008a4e:	e007      	b.n	8008a60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	60da      	str	r2, [r3, #12]
}
 8008a60:	bf00      	nop
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	3b10      	subs	r3, #16
 8008a7c:	4a14      	ldr	r2, [pc, #80]	; (8008ad0 <DMA_CalcBaseAndBitshift+0x64>)
 8008a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a82:	091b      	lsrs	r3, r3, #4
 8008a84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008a86:	4a13      	ldr	r2, [pc, #76]	; (8008ad4 <DMA_CalcBaseAndBitshift+0x68>)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d909      	bls.n	8008aae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	1d1a      	adds	r2, r3, #4
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	659a      	str	r2, [r3, #88]	; 0x58
 8008aac:	e007      	b.n	8008abe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	aaaaaaab 	.word	0xaaaaaaab
 8008ad4:	08018904 	.word	0x08018904

08008ad8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d11f      	bne.n	8008b32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d856      	bhi.n	8008ba6 <DMA_CheckFifoParam+0xce>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <DMA_CheckFifoParam+0x28>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b11 	.word	0x08008b11
 8008b04:	08008b23 	.word	0x08008b23
 8008b08:	08008b11 	.word	0x08008b11
 8008b0c:	08008ba7 	.word	0x08008ba7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d046      	beq.n	8008baa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b20:	e043      	b.n	8008baa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b2a:	d140      	bne.n	8008bae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b30:	e03d      	b.n	8008bae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b3a:	d121      	bne.n	8008b80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d837      	bhi.n	8008bb2 <DMA_CheckFifoParam+0xda>
 8008b42:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <DMA_CheckFifoParam+0x70>)
 8008b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b48:	08008b59 	.word	0x08008b59
 8008b4c:	08008b5f 	.word	0x08008b5f
 8008b50:	08008b59 	.word	0x08008b59
 8008b54:	08008b71 	.word	0x08008b71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b5c:	e030      	b.n	8008bc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d025      	beq.n	8008bb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b6e:	e022      	b.n	8008bb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b78:	d11f      	bne.n	8008bba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008b7e:	e01c      	b.n	8008bba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d903      	bls.n	8008b8e <DMA_CheckFifoParam+0xb6>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d003      	beq.n	8008b94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008b8c:	e018      	b.n	8008bc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
      break;
 8008b92:	e015      	b.n	8008bc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00e      	beq.n	8008bbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba4:	e00b      	b.n	8008bbe <DMA_CheckFifoParam+0xe6>
      break;
 8008ba6:	bf00      	nop
 8008ba8:	e00a      	b.n	8008bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8008baa:	bf00      	nop
 8008bac:	e008      	b.n	8008bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8008bae:	bf00      	nop
 8008bb0:	e006      	b.n	8008bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8008bb2:	bf00      	nop
 8008bb4:	e004      	b.n	8008bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8008bb6:	bf00      	nop
 8008bb8:	e002      	b.n	8008bc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8008bba:	bf00      	nop
 8008bbc:	e000      	b.n	8008bc0 <DMA_CheckFifoParam+0xe8>
      break;
 8008bbe:	bf00      	nop
    }
  } 
  
  return status; 
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop

08008bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b089      	sub	sp, #36	; 0x24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008be6:	2300      	movs	r3, #0
 8008be8:	61fb      	str	r3, [r7, #28]
 8008bea:	e165      	b.n	8008eb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008bec:	2201      	movs	r2, #1
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	f040 8154 	bne.w	8008eb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d005      	beq.n	8008c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d130      	bne.n	8008c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	2203      	movs	r2, #3
 8008c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c32:	43db      	mvns	r3, r3
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	4013      	ands	r3, r2
 8008c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c58:	2201      	movs	r2, #1
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c60:	43db      	mvns	r3, r3
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	4013      	ands	r3, r2
 8008c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	091b      	lsrs	r3, r3, #4
 8008c6e:	f003 0201 	and.w	r2, r3, #1
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	fa02 f303 	lsl.w	r3, r2, r3
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f003 0303 	and.w	r3, r3, #3
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d017      	beq.n	8008cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f003 0303 	and.w	r3, r3, #3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d123      	bne.n	8008d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	08da      	lsrs	r2, r3, #3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3208      	adds	r2, #8
 8008cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	220f      	movs	r2, #15
 8008ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce8:	43db      	mvns	r3, r3
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	4013      	ands	r3, r2
 8008cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	691a      	ldr	r2, [r3, #16]
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	08da      	lsrs	r2, r3, #3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3208      	adds	r2, #8
 8008d0e:	69b9      	ldr	r1, [r7, #24]
 8008d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	005b      	lsls	r3, r3, #1
 8008d1e:	2203      	movs	r2, #3
 8008d20:	fa02 f303 	lsl.w	r3, r2, r3
 8008d24:	43db      	mvns	r3, r3
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f003 0203 	and.w	r2, r3, #3
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 80ae 	beq.w	8008eb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d56:	2300      	movs	r3, #0
 8008d58:	60fb      	str	r3, [r7, #12]
 8008d5a:	4b5d      	ldr	r3, [pc, #372]	; (8008ed0 <HAL_GPIO_Init+0x300>)
 8008d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5e:	4a5c      	ldr	r2, [pc, #368]	; (8008ed0 <HAL_GPIO_Init+0x300>)
 8008d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d64:	6453      	str	r3, [r2, #68]	; 0x44
 8008d66:	4b5a      	ldr	r3, [pc, #360]	; (8008ed0 <HAL_GPIO_Init+0x300>)
 8008d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d72:	4a58      	ldr	r2, [pc, #352]	; (8008ed4 <HAL_GPIO_Init+0x304>)
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	089b      	lsrs	r3, r3, #2
 8008d78:	3302      	adds	r3, #2
 8008d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	f003 0303 	and.w	r3, r3, #3
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	220f      	movs	r2, #15
 8008d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8e:	43db      	mvns	r3, r3
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	4013      	ands	r3, r2
 8008d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a4f      	ldr	r2, [pc, #316]	; (8008ed8 <HAL_GPIO_Init+0x308>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d025      	beq.n	8008dea <HAL_GPIO_Init+0x21a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a4e      	ldr	r2, [pc, #312]	; (8008edc <HAL_GPIO_Init+0x30c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d01f      	beq.n	8008de6 <HAL_GPIO_Init+0x216>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a4d      	ldr	r2, [pc, #308]	; (8008ee0 <HAL_GPIO_Init+0x310>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d019      	beq.n	8008de2 <HAL_GPIO_Init+0x212>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a4c      	ldr	r2, [pc, #304]	; (8008ee4 <HAL_GPIO_Init+0x314>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d013      	beq.n	8008dde <HAL_GPIO_Init+0x20e>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a4b      	ldr	r2, [pc, #300]	; (8008ee8 <HAL_GPIO_Init+0x318>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00d      	beq.n	8008dda <HAL_GPIO_Init+0x20a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a4a      	ldr	r2, [pc, #296]	; (8008eec <HAL_GPIO_Init+0x31c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d007      	beq.n	8008dd6 <HAL_GPIO_Init+0x206>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a49      	ldr	r2, [pc, #292]	; (8008ef0 <HAL_GPIO_Init+0x320>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d101      	bne.n	8008dd2 <HAL_GPIO_Init+0x202>
 8008dce:	2306      	movs	r3, #6
 8008dd0:	e00c      	b.n	8008dec <HAL_GPIO_Init+0x21c>
 8008dd2:	2307      	movs	r3, #7
 8008dd4:	e00a      	b.n	8008dec <HAL_GPIO_Init+0x21c>
 8008dd6:	2305      	movs	r3, #5
 8008dd8:	e008      	b.n	8008dec <HAL_GPIO_Init+0x21c>
 8008dda:	2304      	movs	r3, #4
 8008ddc:	e006      	b.n	8008dec <HAL_GPIO_Init+0x21c>
 8008dde:	2303      	movs	r3, #3
 8008de0:	e004      	b.n	8008dec <HAL_GPIO_Init+0x21c>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e002      	b.n	8008dec <HAL_GPIO_Init+0x21c>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <HAL_GPIO_Init+0x21c>
 8008dea:	2300      	movs	r3, #0
 8008dec:	69fa      	ldr	r2, [r7, #28]
 8008dee:	f002 0203 	and.w	r2, r2, #3
 8008df2:	0092      	lsls	r2, r2, #2
 8008df4:	4093      	lsls	r3, r2
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008dfc:	4935      	ldr	r1, [pc, #212]	; (8008ed4 <HAL_GPIO_Init+0x304>)
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	089b      	lsrs	r3, r3, #2
 8008e02:	3302      	adds	r3, #2
 8008e04:	69ba      	ldr	r2, [r7, #24]
 8008e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e0a:	4b3a      	ldr	r3, [pc, #232]	; (8008ef4 <HAL_GPIO_Init+0x324>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	43db      	mvns	r3, r3
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	4013      	ands	r3, r2
 8008e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008e2e:	4a31      	ldr	r2, [pc, #196]	; (8008ef4 <HAL_GPIO_Init+0x324>)
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008e34:	4b2f      	ldr	r3, [pc, #188]	; (8008ef4 <HAL_GPIO_Init+0x324>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	43db      	mvns	r3, r3
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	4013      	ands	r3, r2
 8008e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e58:	4a26      	ldr	r2, [pc, #152]	; (8008ef4 <HAL_GPIO_Init+0x324>)
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e5e:	4b25      	ldr	r3, [pc, #148]	; (8008ef4 <HAL_GPIO_Init+0x324>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	43db      	mvns	r3, r3
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e82:	4a1c      	ldr	r2, [pc, #112]	; (8008ef4 <HAL_GPIO_Init+0x324>)
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e88:	4b1a      	ldr	r3, [pc, #104]	; (8008ef4 <HAL_GPIO_Init+0x324>)
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	43db      	mvns	r3, r3
 8008e92:	69ba      	ldr	r2, [r7, #24]
 8008e94:	4013      	ands	r3, r2
 8008e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008eac:	4a11      	ldr	r2, [pc, #68]	; (8008ef4 <HAL_GPIO_Init+0x324>)
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	61fb      	str	r3, [r7, #28]
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	2b0f      	cmp	r3, #15
 8008ebc:	f67f ae96 	bls.w	8008bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ec0:	bf00      	nop
 8008ec2:	bf00      	nop
 8008ec4:	3724      	adds	r7, #36	; 0x24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40023800 	.word	0x40023800
 8008ed4:	40013800 	.word	0x40013800
 8008ed8:	40020000 	.word	0x40020000
 8008edc:	40020400 	.word	0x40020400
 8008ee0:	40020800 	.word	0x40020800
 8008ee4:	40020c00 	.word	0x40020c00
 8008ee8:	40021000 	.word	0x40021000
 8008eec:	40021400 	.word	0x40021400
 8008ef0:	40021800 	.word	0x40021800
 8008ef4:	40013c00 	.word	0x40013c00

08008ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691a      	ldr	r2, [r3, #16]
 8008f08:	887b      	ldrh	r3, [r7, #2]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f10:	2301      	movs	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
 8008f14:	e001      	b.n	8008f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	807b      	strh	r3, [r7, #2]
 8008f34:	4613      	mov	r3, r2
 8008f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f38:	787b      	ldrb	r3, [r7, #1]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f3e:	887a      	ldrh	r2, [r7, #2]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f44:	e003      	b.n	8008f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f46:	887b      	ldrh	r3, [r7, #2]
 8008f48:	041a      	lsls	r2, r3, #16
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	619a      	str	r2, [r3, #24]
}
 8008f4e:	bf00      	nop
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f6c:	887a      	ldrh	r2, [r7, #2]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4013      	ands	r3, r2
 8008f72:	041a      	lsls	r2, r3, #16
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	43d9      	mvns	r1, r3
 8008f78:	887b      	ldrh	r3, [r7, #2]
 8008f7a:	400b      	ands	r3, r1
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	619a      	str	r2, [r3, #24]
}
 8008f82:	bf00      	nop
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
	...

08008f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008f9a:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f9c:	695a      	ldr	r2, [r3, #20]
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d006      	beq.n	8008fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008fa6:	4a05      	ldr	r2, [pc, #20]	; (8008fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008fa8:	88fb      	ldrh	r3, [r7, #6]
 8008faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008fac:	88fb      	ldrh	r3, [r7, #6]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fd f950 	bl	8006254 <HAL_GPIO_EXTI_Callback>
  }
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40013c00 	.word	0x40013c00

08008fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e12b      	b.n	800922a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d106      	bne.n	8008fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7fd fb70 	bl	80066cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2224      	movs	r2, #36	; 0x24
 8008ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f022 0201 	bic.w	r2, r2, #1
 8009002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009024:	f002 fb1c 	bl	800b660 <HAL_RCC_GetPCLK1Freq>
 8009028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	4a81      	ldr	r2, [pc, #516]	; (8009234 <HAL_I2C_Init+0x274>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d807      	bhi.n	8009044 <HAL_I2C_Init+0x84>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4a80      	ldr	r2, [pc, #512]	; (8009238 <HAL_I2C_Init+0x278>)
 8009038:	4293      	cmp	r3, r2
 800903a:	bf94      	ite	ls
 800903c:	2301      	movls	r3, #1
 800903e:	2300      	movhi	r3, #0
 8009040:	b2db      	uxtb	r3, r3
 8009042:	e006      	b.n	8009052 <HAL_I2C_Init+0x92>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a7d      	ldr	r2, [pc, #500]	; (800923c <HAL_I2C_Init+0x27c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	bf94      	ite	ls
 800904c:	2301      	movls	r3, #1
 800904e:	2300      	movhi	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e0e7      	b.n	800922a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4a78      	ldr	r2, [pc, #480]	; (8009240 <HAL_I2C_Init+0x280>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	0c9b      	lsrs	r3, r3, #18
 8009064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	4a6a      	ldr	r2, [pc, #424]	; (8009234 <HAL_I2C_Init+0x274>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d802      	bhi.n	8009094 <HAL_I2C_Init+0xd4>
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	3301      	adds	r3, #1
 8009092:	e009      	b.n	80090a8 <HAL_I2C_Init+0xe8>
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800909a:	fb02 f303 	mul.w	r3, r2, r3
 800909e:	4a69      	ldr	r2, [pc, #420]	; (8009244 <HAL_I2C_Init+0x284>)
 80090a0:	fba2 2303 	umull	r2, r3, r2, r3
 80090a4:	099b      	lsrs	r3, r3, #6
 80090a6:	3301      	adds	r3, #1
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	6812      	ldr	r2, [r2, #0]
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80090ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	495c      	ldr	r1, [pc, #368]	; (8009234 <HAL_I2C_Init+0x274>)
 80090c4:	428b      	cmp	r3, r1
 80090c6:	d819      	bhi.n	80090fc <HAL_I2C_Init+0x13c>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	1e59      	subs	r1, r3, #1
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80090d6:	1c59      	adds	r1, r3, #1
 80090d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80090dc:	400b      	ands	r3, r1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00a      	beq.n	80090f8 <HAL_I2C_Init+0x138>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	1e59      	subs	r1, r3, #1
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80090f0:	3301      	adds	r3, #1
 80090f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090f6:	e051      	b.n	800919c <HAL_I2C_Init+0x1dc>
 80090f8:	2304      	movs	r3, #4
 80090fa:	e04f      	b.n	800919c <HAL_I2C_Init+0x1dc>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d111      	bne.n	8009128 <HAL_I2C_Init+0x168>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	1e58      	subs	r0, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6859      	ldr	r1, [r3, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	440b      	add	r3, r1
 8009112:	fbb0 f3f3 	udiv	r3, r0, r3
 8009116:	3301      	adds	r3, #1
 8009118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800911c:	2b00      	cmp	r3, #0
 800911e:	bf0c      	ite	eq
 8009120:	2301      	moveq	r3, #1
 8009122:	2300      	movne	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	e012      	b.n	800914e <HAL_I2C_Init+0x18e>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	1e58      	subs	r0, r3, #1
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6859      	ldr	r1, [r3, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	0099      	lsls	r1, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	fbb0 f3f3 	udiv	r3, r0, r3
 800913e:	3301      	adds	r3, #1
 8009140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009144:	2b00      	cmp	r3, #0
 8009146:	bf0c      	ite	eq
 8009148:	2301      	moveq	r3, #1
 800914a:	2300      	movne	r3, #0
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <HAL_I2C_Init+0x196>
 8009152:	2301      	movs	r3, #1
 8009154:	e022      	b.n	800919c <HAL_I2C_Init+0x1dc>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10e      	bne.n	800917c <HAL_I2C_Init+0x1bc>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	1e58      	subs	r0, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6859      	ldr	r1, [r3, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	005b      	lsls	r3, r3, #1
 800916a:	440b      	add	r3, r1
 800916c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009170:	3301      	adds	r3, #1
 8009172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800917a:	e00f      	b.n	800919c <HAL_I2C_Init+0x1dc>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	1e58      	subs	r0, r3, #1
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6859      	ldr	r1, [r3, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	0099      	lsls	r1, r3, #2
 800918c:	440b      	add	r3, r1
 800918e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009192:	3301      	adds	r3, #1
 8009194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	6809      	ldr	r1, [r1, #0]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	69da      	ldr	r2, [r3, #28]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80091ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6911      	ldr	r1, [r2, #16]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	68d2      	ldr	r2, [r2, #12]
 80091d6:	4311      	orrs	r1, r2
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	6812      	ldr	r2, [r2, #0]
 80091dc:	430b      	orrs	r3, r1
 80091de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	695a      	ldr	r2, [r3, #20]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	431a      	orrs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2220      	movs	r2, #32
 8009216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	000186a0 	.word	0x000186a0
 8009238:	001e847f 	.word	0x001e847f
 800923c:	003d08ff 	.word	0x003d08ff
 8009240:	431bde83 	.word	0x431bde83
 8009244:	10624dd3 	.word	0x10624dd3

08009248 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af02      	add	r7, sp, #8
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	4608      	mov	r0, r1
 8009252:	4611      	mov	r1, r2
 8009254:	461a      	mov	r2, r3
 8009256:	4603      	mov	r3, r0
 8009258:	817b      	strh	r3, [r7, #10]
 800925a:	460b      	mov	r3, r1
 800925c:	813b      	strh	r3, [r7, #8]
 800925e:	4613      	mov	r3, r2
 8009260:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009262:	f7fd fd1b 	bl	8006c9c <HAL_GetTick>
 8009266:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b20      	cmp	r3, #32
 8009272:	f040 80d9 	bne.w	8009428 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	2319      	movs	r3, #25
 800927c:	2201      	movs	r2, #1
 800927e:	496d      	ldr	r1, [pc, #436]	; (8009434 <HAL_I2C_Mem_Write+0x1ec>)
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 fc7f 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800928c:	2302      	movs	r3, #2
 800928e:	e0cc      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009296:	2b01      	cmp	r3, #1
 8009298:	d101      	bne.n	800929e <HAL_I2C_Mem_Write+0x56>
 800929a:	2302      	movs	r3, #2
 800929c:	e0c5      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d007      	beq.n	80092c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2221      	movs	r2, #33	; 0x21
 80092d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2240      	movs	r2, #64	; 0x40
 80092e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a3a      	ldr	r2, [r7, #32]
 80092ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4a4d      	ldr	r2, [pc, #308]	; (8009438 <HAL_I2C_Mem_Write+0x1f0>)
 8009304:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009306:	88f8      	ldrh	r0, [r7, #6]
 8009308:	893a      	ldrh	r2, [r7, #8]
 800930a:	8979      	ldrh	r1, [r7, #10]
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	4603      	mov	r3, r0
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fab6 	bl	8009888 <I2C_RequestMemoryWrite>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d052      	beq.n	80093c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e081      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 fd00 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00d      	beq.n	8009352 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933a:	2b04      	cmp	r3, #4
 800933c:	d107      	bne.n	800934e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800934c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e06b      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	781a      	ldrb	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936c:	3b01      	subs	r3, #1
 800936e:	b29a      	uxth	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009378:	b29b      	uxth	r3, r3
 800937a:	3b01      	subs	r3, #1
 800937c:	b29a      	uxth	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	f003 0304 	and.w	r3, r3, #4
 800938c:	2b04      	cmp	r3, #4
 800938e:	d11b      	bne.n	80093c8 <HAL_I2C_Mem_Write+0x180>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009394:	2b00      	cmp	r3, #0
 8009396:	d017      	beq.n	80093c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	781a      	ldrb	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093be:	b29b      	uxth	r3, r3
 80093c0:	3b01      	subs	r3, #1
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1aa      	bne.n	8009326 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 fcec 	bl	8009db2 <I2C_WaitOnBTFFlagUntilTimeout>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00d      	beq.n	80093fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d107      	bne.n	80093f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e016      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800940a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2220      	movs	r2, #32
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	e000      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009428:	2302      	movs	r3, #2
  }
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	00100002 	.word	0x00100002
 8009438:	ffff0000 	.word	0xffff0000

0800943c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08c      	sub	sp, #48	; 0x30
 8009440:	af02      	add	r7, sp, #8
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	4608      	mov	r0, r1
 8009446:	4611      	mov	r1, r2
 8009448:	461a      	mov	r2, r3
 800944a:	4603      	mov	r3, r0
 800944c:	817b      	strh	r3, [r7, #10]
 800944e:	460b      	mov	r3, r1
 8009450:	813b      	strh	r3, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009456:	f7fd fc21 	bl	8006c9c <HAL_GetTick>
 800945a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b20      	cmp	r3, #32
 8009466:	f040 8208 	bne.w	800987a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	2319      	movs	r3, #25
 8009470:	2201      	movs	r2, #1
 8009472:	497b      	ldr	r1, [pc, #492]	; (8009660 <HAL_I2C_Mem_Read+0x224>)
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 fb85 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009480:	2302      	movs	r3, #2
 8009482:	e1fb      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800948a:	2b01      	cmp	r3, #1
 800948c:	d101      	bne.n	8009492 <HAL_I2C_Mem_Read+0x56>
 800948e:	2302      	movs	r3, #2
 8009490:	e1f4      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d007      	beq.n	80094b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f042 0201 	orr.w	r2, r2, #1
 80094b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2222      	movs	r2, #34	; 0x22
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2240      	movs	r2, #64	; 0x40
 80094d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4a5b      	ldr	r2, [pc, #364]	; (8009664 <HAL_I2C_Mem_Read+0x228>)
 80094f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094fa:	88f8      	ldrh	r0, [r7, #6]
 80094fc:	893a      	ldrh	r2, [r7, #8]
 80094fe:	8979      	ldrh	r1, [r7, #10]
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	4603      	mov	r3, r0
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 fa52 	bl	80099b4 <I2C_RequestMemoryRead>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e1b0      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d113      	bne.n	800954a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009522:	2300      	movs	r3, #0
 8009524:	623b      	str	r3, [r7, #32]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	623b      	str	r3, [r7, #32]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	623b      	str	r3, [r7, #32]
 8009536:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	e184      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954e:	2b01      	cmp	r3, #1
 8009550:	d11b      	bne.n	800958a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009562:	2300      	movs	r3, #0
 8009564:	61fb      	str	r3, [r7, #28]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	61fb      	str	r3, [r7, #28]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	e164      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800958e:	2b02      	cmp	r3, #2
 8009590:	d11b      	bne.n	80095ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095b2:	2300      	movs	r3, #0
 80095b4:	61bb      	str	r3, [r7, #24]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	61bb      	str	r3, [r7, #24]
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	e144      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095ca:	2300      	movs	r3, #0
 80095cc:	617b      	str	r3, [r7, #20]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	617b      	str	r3, [r7, #20]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80095e0:	e138      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	f200 80f1 	bhi.w	80097ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d123      	bne.n	800963c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 fc1b 	bl	8009e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e139      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	691a      	ldr	r2, [r3, #16]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009624:	3b01      	subs	r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009630:	b29b      	uxth	r3, r3
 8009632:	3b01      	subs	r3, #1
 8009634:	b29a      	uxth	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	855a      	strh	r2, [r3, #42]	; 0x2a
 800963a:	e10b      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009640:	2b02      	cmp	r3, #2
 8009642:	d14e      	bne.n	80096e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	2200      	movs	r2, #0
 800964c:	4906      	ldr	r1, [pc, #24]	; (8009668 <HAL_I2C_Mem_Read+0x22c>)
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 fa98 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d008      	beq.n	800966c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e10e      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
 800965e:	bf00      	nop
 8009660:	00100002 	.word	0x00100002
 8009664:	ffff0000 	.word	0xffff0000
 8009668:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800967a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	691a      	ldr	r2, [r3, #16]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	b2d2      	uxtb	r2, r2
 8009688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ca:	3b01      	subs	r3, #1
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096e0:	e0b8      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	2200      	movs	r2, #0
 80096ea:	4966      	ldr	r1, [pc, #408]	; (8009884 <HAL_I2C_Mem_Read+0x448>)
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fa49 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e0bf      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800970a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009734:	b29b      	uxth	r3, r3
 8009736:	3b01      	subs	r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	2200      	movs	r2, #0
 8009746:	494f      	ldr	r1, [pc, #316]	; (8009884 <HAL_I2C_Mem_Read+0x448>)
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 fa1b 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e091      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	691a      	ldr	r2, [r3, #16]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009784:	3b01      	subs	r3, #1
 8009786:	b29a      	uxth	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009790:	b29b      	uxth	r3, r3
 8009792:	3b01      	subs	r3, #1
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	691a      	ldr	r2, [r3, #16]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a4:	b2d2      	uxtb	r2, r2
 80097a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b6:	3b01      	subs	r3, #1
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	3b01      	subs	r3, #1
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097cc:	e042      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fb2e 	bl	8009e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e04c      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	691a      	ldr	r2, [r3, #16]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	b2d2      	uxtb	r2, r2
 80097ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980a:	b29b      	uxth	r3, r3
 800980c:	3b01      	subs	r3, #1
 800980e:	b29a      	uxth	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	2b04      	cmp	r3, #4
 8009820:	d118      	bne.n	8009854 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	691a      	ldr	r2, [r3, #16]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	b2d2      	uxtb	r2, r2
 800982e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800983e:	3b01      	subs	r3, #1
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800984a:	b29b      	uxth	r3, r3
 800984c:	3b01      	subs	r3, #1
 800984e:	b29a      	uxth	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009858:	2b00      	cmp	r3, #0
 800985a:	f47f aec2 	bne.w	80095e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2220      	movs	r2, #32
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	e000      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800987a:	2302      	movs	r3, #2
  }
}
 800987c:	4618      	mov	r0, r3
 800987e:	3728      	adds	r7, #40	; 0x28
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	00010004 	.word	0x00010004

08009888 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b088      	sub	sp, #32
 800988c:	af02      	add	r7, sp, #8
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	4608      	mov	r0, r1
 8009892:	4611      	mov	r1, r2
 8009894:	461a      	mov	r2, r3
 8009896:	4603      	mov	r3, r0
 8009898:	817b      	strh	r3, [r7, #10]
 800989a:	460b      	mov	r3, r1
 800989c:	813b      	strh	r3, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 f960 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00d      	beq.n	80098e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d8:	d103      	bne.n	80098e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e05f      	b.n	80099a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098e6:	897b      	ldrh	r3, [r7, #10]
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	461a      	mov	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	6a3a      	ldr	r2, [r7, #32]
 80098fa:	492d      	ldr	r1, [pc, #180]	; (80099b0 <I2C_RequestMemoryWrite+0x128>)
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f998 	bl	8009c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e04c      	b.n	80099a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800990c:	2300      	movs	r3, #0
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009924:	6a39      	ldr	r1, [r7, #32]
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 fa02 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00d      	beq.n	800994e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009936:	2b04      	cmp	r3, #4
 8009938:	d107      	bne.n	800994a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009948:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e02b      	b.n	80099a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800994e:	88fb      	ldrh	r3, [r7, #6]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d105      	bne.n	8009960 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009954:	893b      	ldrh	r3, [r7, #8]
 8009956:	b2da      	uxtb	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	611a      	str	r2, [r3, #16]
 800995e:	e021      	b.n	80099a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009960:	893b      	ldrh	r3, [r7, #8]
 8009962:	0a1b      	lsrs	r3, r3, #8
 8009964:	b29b      	uxth	r3, r3
 8009966:	b2da      	uxtb	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800996e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009970:	6a39      	ldr	r1, [r7, #32]
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 f9dc 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00d      	beq.n	800999a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	2b04      	cmp	r3, #4
 8009984:	d107      	bne.n	8009996 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009994:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e005      	b.n	80099a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800999a:	893b      	ldrh	r3, [r7, #8]
 800999c:	b2da      	uxtb	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	00010002 	.word	0x00010002

080099b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af02      	add	r7, sp, #8
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	4608      	mov	r0, r1
 80099be:	4611      	mov	r1, r2
 80099c0:	461a      	mov	r2, r3
 80099c2:	4603      	mov	r3, r0
 80099c4:	817b      	strh	r3, [r7, #10]
 80099c6:	460b      	mov	r3, r1
 80099c8:	813b      	strh	r3, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 f8c2 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00d      	beq.n	8009a22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a14:	d103      	bne.n	8009a1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e0aa      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a22:	897b      	ldrh	r3, [r7, #10]
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	461a      	mov	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	6a3a      	ldr	r2, [r7, #32]
 8009a36:	4952      	ldr	r1, [pc, #328]	; (8009b80 <I2C_RequestMemoryRead+0x1cc>)
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 f8fa 	bl	8009c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e097      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a48:	2300      	movs	r3, #0
 8009a4a:	617b      	str	r3, [r7, #20]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a60:	6a39      	ldr	r1, [r7, #32]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 f964 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00d      	beq.n	8009a8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d107      	bne.n	8009a86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e076      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d105      	bne.n	8009a9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a90:	893b      	ldrh	r3, [r7, #8]
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	611a      	str	r2, [r3, #16]
 8009a9a:	e021      	b.n	8009ae0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a9c:	893b      	ldrh	r3, [r7, #8]
 8009a9e:	0a1b      	lsrs	r3, r3, #8
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aac:	6a39      	ldr	r1, [r7, #32]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 f93e 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00d      	beq.n	8009ad6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d107      	bne.n	8009ad2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e050      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ad6:	893b      	ldrh	r3, [r7, #8]
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae2:	6a39      	ldr	r1, [r7, #32]
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f923 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00d      	beq.n	8009b0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af4:	2b04      	cmp	r3, #4
 8009af6:	d107      	bne.n	8009b08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e035      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 f82b 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00d      	beq.n	8009b50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b42:	d103      	bne.n	8009b4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e013      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b50:	897b      	ldrh	r3, [r7, #10]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f043 0301 	orr.w	r3, r3, #1
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	6a3a      	ldr	r2, [r7, #32]
 8009b64:	4906      	ldr	r1, [pc, #24]	; (8009b80 <I2C_RequestMemoryRead+0x1cc>)
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f000 f863 	bl	8009c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e000      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3718      	adds	r7, #24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	00010002 	.word	0x00010002

08009b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	603b      	str	r3, [r7, #0]
 8009b90:	4613      	mov	r3, r2
 8009b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b94:	e025      	b.n	8009be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9c:	d021      	beq.n	8009be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b9e:	f7fd f87d 	bl	8006c9c <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d302      	bcc.n	8009bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d116      	bne.n	8009be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bce:	f043 0220 	orr.w	r2, r3, #32
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e023      	b.n	8009c2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	0c1b      	lsrs	r3, r3, #16
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d10d      	bne.n	8009c08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	43da      	mvns	r2, r3
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bf0c      	ite	eq
 8009bfe:	2301      	moveq	r3, #1
 8009c00:	2300      	movne	r3, #0
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	e00c      	b.n	8009c22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	43da      	mvns	r2, r3
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	4013      	ands	r3, r2
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bf0c      	ite	eq
 8009c1a:	2301      	moveq	r3, #1
 8009c1c:	2300      	movne	r3, #0
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	461a      	mov	r2, r3
 8009c22:	79fb      	ldrb	r3, [r7, #7]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d0b6      	beq.n	8009b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
 8009c3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c40:	e051      	b.n	8009ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c50:	d123      	bne.n	8009c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2220      	movs	r2, #32
 8009c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	f043 0204 	orr.w	r2, r3, #4
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e046      	b.n	8009d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca0:	d021      	beq.n	8009ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ca2:	f7fc fffb 	bl	8006c9c <HAL_GetTick>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d302      	bcc.n	8009cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d116      	bne.n	8009ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2220      	movs	r2, #32
 8009cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd2:	f043 0220 	orr.w	r2, r3, #32
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e020      	b.n	8009d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	0c1b      	lsrs	r3, r3, #16
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d10c      	bne.n	8009d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	43da      	mvns	r2, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	bf14      	ite	ne
 8009d02:	2301      	movne	r3, #1
 8009d04:	2300      	moveq	r3, #0
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	e00b      	b.n	8009d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	43da      	mvns	r2, r3
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	4013      	ands	r3, r2
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bf14      	ite	ne
 8009d1c:	2301      	movne	r3, #1
 8009d1e:	2300      	moveq	r3, #0
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d18d      	bne.n	8009c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d3c:	e02d      	b.n	8009d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f000 f8ce 	bl	8009ee0 <I2C_IsAcknowledgeFailed>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e02d      	b.n	8009daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d54:	d021      	beq.n	8009d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d56:	f7fc ffa1 	bl	8006c9c <HAL_GetTick>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d302      	bcc.n	8009d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d116      	bne.n	8009d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	f043 0220 	orr.w	r2, r3, #32
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e007      	b.n	8009daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009da4:	2b80      	cmp	r3, #128	; 0x80
 8009da6:	d1ca      	bne.n	8009d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009dbe:	e02d      	b.n	8009e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f88d 	bl	8009ee0 <I2C_IsAcknowledgeFailed>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e02d      	b.n	8009e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd6:	d021      	beq.n	8009e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dd8:	f7fc ff60 	bl	8006c9c <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d302      	bcc.n	8009dee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d116      	bne.n	8009e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e08:	f043 0220 	orr.w	r2, r3, #32
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e007      	b.n	8009e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	f003 0304 	and.w	r3, r3, #4
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	d1ca      	bne.n	8009dc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e40:	e042      	b.n	8009ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	f003 0310 	and.w	r3, r3, #16
 8009e4c:	2b10      	cmp	r3, #16
 8009e4e:	d119      	bne.n	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f06f 0210 	mvn.w	r2, #16
 8009e58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2220      	movs	r2, #32
 8009e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e029      	b.n	8009ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e84:	f7fc ff0a 	bl	8006c9c <HAL_GetTick>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d302      	bcc.n	8009e9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d116      	bne.n	8009ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb4:	f043 0220 	orr.w	r2, r3, #32
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e007      	b.n	8009ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed2:	2b40      	cmp	r3, #64	; 0x40
 8009ed4:	d1b5      	bne.n	8009e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ef6:	d11b      	bne.n	8009f30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1c:	f043 0204 	orr.w	r2, r3, #4
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e000      	b.n	8009f32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e034      	b.n	8009fba <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009f58:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f245 5255 	movw	r2, #21845	; 0x5555
 8009f62:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	6852      	ldr	r2, [r2, #4]
 8009f6c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6892      	ldr	r2, [r2, #8]
 8009f76:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009f78:	f7fc fe90 	bl	8006c9c <HAL_GetTick>
 8009f7c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009f7e:	e00f      	b.n	8009fa0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009f80:	f7fc fe8c 	bl	8006c9c <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b31      	cmp	r3, #49	; 0x31
 8009f8c:	d908      	bls.n	8009fa0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e00c      	b.n	8009fba <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f003 0303 	and.w	r3, r3, #3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e8      	bne.n	8009f80 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009fb6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009fd2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fe4:	b08f      	sub	sp, #60	; 0x3c
 8009fe6:	af0a      	add	r7, sp, #40	; 0x28
 8009fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e116      	b.n	800a222 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f00d fbd0 	bl	80177b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2203      	movs	r2, #3
 800a018:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a024:	2b00      	cmp	r3, #0
 800a026:	d102      	bne.n	800a02e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4618      	mov	r0, r3
 800a034:	f005 feab 	bl	800fd8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	603b      	str	r3, [r7, #0]
 800a03e:	687e      	ldr	r6, [r7, #4]
 800a040:	466d      	mov	r5, sp
 800a042:	f106 0410 	add.w	r4, r6, #16
 800a046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a04a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a04c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a04e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a052:	e885 0003 	stmia.w	r5, {r0, r1}
 800a056:	1d33      	adds	r3, r6, #4
 800a058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a05a:	6838      	ldr	r0, [r7, #0]
 800a05c:	f005 fd82 	bl	800fb64 <USB_CoreInit>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d005      	beq.n	800a072 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2202      	movs	r2, #2
 800a06a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e0d7      	b.n	800a222 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2100      	movs	r1, #0
 800a078:	4618      	mov	r0, r3
 800a07a:	f005 fe99 	bl	800fdb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
 800a082:	e04a      	b.n	800a11a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a084:	7bfa      	ldrb	r2, [r7, #15]
 800a086:	6879      	ldr	r1, [r7, #4]
 800a088:	4613      	mov	r3, r2
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	1a9b      	subs	r3, r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	440b      	add	r3, r1
 800a092:	333d      	adds	r3, #61	; 0x3d
 800a094:	2201      	movs	r2, #1
 800a096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a098:	7bfa      	ldrb	r2, [r7, #15]
 800a09a:	6879      	ldr	r1, [r7, #4]
 800a09c:	4613      	mov	r3, r2
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	1a9b      	subs	r3, r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	440b      	add	r3, r1
 800a0a6:	333c      	adds	r3, #60	; 0x3c
 800a0a8:	7bfa      	ldrb	r2, [r7, #15]
 800a0aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a0ac:	7bfa      	ldrb	r2, [r7, #15]
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	b298      	uxth	r0, r3
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	1a9b      	subs	r3, r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	440b      	add	r3, r1
 800a0be:	3342      	adds	r3, #66	; 0x42
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a0c4:	7bfa      	ldrb	r2, [r7, #15]
 800a0c6:	6879      	ldr	r1, [r7, #4]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	00db      	lsls	r3, r3, #3
 800a0cc:	1a9b      	subs	r3, r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	440b      	add	r3, r1
 800a0d2:	333f      	adds	r3, #63	; 0x3f
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a0d8:	7bfa      	ldrb	r2, [r7, #15]
 800a0da:	6879      	ldr	r1, [r7, #4]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	1a9b      	subs	r3, r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	440b      	add	r3, r1
 800a0e6:	3344      	adds	r3, #68	; 0x44
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a0ec:	7bfa      	ldrb	r2, [r7, #15]
 800a0ee:	6879      	ldr	r1, [r7, #4]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	1a9b      	subs	r3, r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	440b      	add	r3, r1
 800a0fa:	3348      	adds	r3, #72	; 0x48
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a100:	7bfa      	ldrb	r2, [r7, #15]
 800a102:	6879      	ldr	r1, [r7, #4]
 800a104:	4613      	mov	r3, r2
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	1a9b      	subs	r3, r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	440b      	add	r3, r1
 800a10e:	3350      	adds	r3, #80	; 0x50
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a114:	7bfb      	ldrb	r3, [r7, #15]
 800a116:	3301      	adds	r3, #1
 800a118:	73fb      	strb	r3, [r7, #15]
 800a11a:	7bfa      	ldrb	r2, [r7, #15]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d3af      	bcc.n	800a084 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]
 800a128:	e044      	b.n	800a1b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a12a:	7bfa      	ldrb	r2, [r7, #15]
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	4613      	mov	r3, r2
 800a130:	00db      	lsls	r3, r3, #3
 800a132:	1a9b      	subs	r3, r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	440b      	add	r3, r1
 800a138:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a140:	7bfa      	ldrb	r2, [r7, #15]
 800a142:	6879      	ldr	r1, [r7, #4]
 800a144:	4613      	mov	r3, r2
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	1a9b      	subs	r3, r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	440b      	add	r3, r1
 800a14e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a152:	7bfa      	ldrb	r2, [r7, #15]
 800a154:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a156:	7bfa      	ldrb	r2, [r7, #15]
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	4613      	mov	r3, r2
 800a15c:	00db      	lsls	r3, r3, #3
 800a15e:	1a9b      	subs	r3, r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	440b      	add	r3, r1
 800a164:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a168:	2200      	movs	r2, #0
 800a16a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a16c:	7bfa      	ldrb	r2, [r7, #15]
 800a16e:	6879      	ldr	r1, [r7, #4]
 800a170:	4613      	mov	r3, r2
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	1a9b      	subs	r3, r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a17e:	2200      	movs	r2, #0
 800a180:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a182:	7bfa      	ldrb	r2, [r7, #15]
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	4613      	mov	r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	1a9b      	subs	r3, r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	440b      	add	r3, r1
 800a190:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a198:	7bfa      	ldrb	r2, [r7, #15]
 800a19a:	6879      	ldr	r1, [r7, #4]
 800a19c:	4613      	mov	r3, r2
 800a19e:	00db      	lsls	r3, r3, #3
 800a1a0:	1a9b      	subs	r3, r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	440b      	add	r3, r1
 800a1a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	73fb      	strb	r3, [r7, #15]
 800a1b4:	7bfa      	ldrb	r2, [r7, #15]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d3b5      	bcc.n	800a12a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	687e      	ldr	r6, [r7, #4]
 800a1c6:	466d      	mov	r5, sp
 800a1c8:	f106 0410 	add.w	r4, r6, #16
 800a1cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a1d8:	e885 0003 	stmia.w	r5, {r0, r1}
 800a1dc:	1d33      	adds	r3, r6, #4
 800a1de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1e0:	6838      	ldr	r0, [r7, #0]
 800a1e2:	f005 fe31 	bl	800fe48 <USB_DevInit>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d005      	beq.n	800a1f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e014      	b.n	800a222 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d102      	bne.n	800a216 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f001 f8bf 	bl	800b394 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f006 fea0 	bl	8010f60 <USB_DevDisconnect>

  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a22a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d101      	bne.n	800a246 <HAL_PCD_Start+0x1c>
 800a242:	2302      	movs	r3, #2
 800a244:	e020      	b.n	800a288 <HAL_PCD_Start+0x5e>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a252:	2b01      	cmp	r3, #1
 800a254:	d109      	bne.n	800a26a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d005      	beq.n	800a26a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a262:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4618      	mov	r0, r3
 800a270:	f005 fd7c 	bl	800fd6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4618      	mov	r0, r3
 800a27a:	f006 fe50 	bl	8010f1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a290:	b590      	push	{r4, r7, lr}
 800a292:	b08d      	sub	sp, #52	; 0x34
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f006 ff0e 	bl	80110c8 <USB_GetMode>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f040 83ca 	bne.w	800aa48 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f006 fe72 	bl	8010fa2 <USB_ReadInterrupts>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 83c0 	beq.w	800aa46 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f006 fe69 	bl	8010fa2 <USB_ReadInterrupts>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d107      	bne.n	800a2ea <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	695a      	ldr	r2, [r3, #20]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f002 0202 	and.w	r2, r2, #2
 800a2e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f006 fe57 	bl	8010fa2 <USB_ReadInterrupts>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f003 0310 	and.w	r3, r3, #16
 800a2fa:	2b10      	cmp	r3, #16
 800a2fc:	d161      	bne.n	800a3c2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	699a      	ldr	r2, [r3, #24]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f022 0210 	bic.w	r2, r2, #16
 800a30c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	f003 020f 	and.w	r2, r3, #15
 800a31a:	4613      	mov	r3, r2
 800a31c:	00db      	lsls	r3, r3, #3
 800a31e:	1a9b      	subs	r3, r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	4413      	add	r3, r2
 800a32a:	3304      	adds	r3, #4
 800a32c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	0c5b      	lsrs	r3, r3, #17
 800a332:	f003 030f 	and.w	r3, r3, #15
 800a336:	2b02      	cmp	r3, #2
 800a338:	d124      	bne.n	800a384 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a33a:	69ba      	ldr	r2, [r7, #24]
 800a33c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a340:	4013      	ands	r3, r2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d035      	beq.n	800a3b2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	091b      	lsrs	r3, r3, #4
 800a34e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a354:	b29b      	uxth	r3, r3
 800a356:	461a      	mov	r2, r3
 800a358:	6a38      	ldr	r0, [r7, #32]
 800a35a:	f006 fc8e 	bl	8010c7a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	091b      	lsrs	r3, r3, #4
 800a366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a36a:	441a      	add	r2, r3
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	699a      	ldr	r2, [r3, #24]
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	091b      	lsrs	r3, r3, #4
 800a378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a37c:	441a      	add	r2, r3
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	619a      	str	r2, [r3, #24]
 800a382:	e016      	b.n	800a3b2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	0c5b      	lsrs	r3, r3, #17
 800a388:	f003 030f 	and.w	r3, r3, #15
 800a38c:	2b06      	cmp	r3, #6
 800a38e:	d110      	bne.n	800a3b2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a396:	2208      	movs	r2, #8
 800a398:	4619      	mov	r1, r3
 800a39a:	6a38      	ldr	r0, [r7, #32]
 800a39c:	f006 fc6d 	bl	8010c7a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	699a      	ldr	r2, [r3, #24]
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	091b      	lsrs	r3, r3, #4
 800a3a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3ac:	441a      	add	r2, r3
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	699a      	ldr	r2, [r3, #24]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f042 0210 	orr.w	r2, r2, #16
 800a3c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f006 fdeb 	bl	8010fa2 <USB_ReadInterrupts>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a3d6:	d16e      	bne.n	800a4b6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f006 fdf1 	bl	8010fc8 <USB_ReadDevAllOutEpInterrupt>
 800a3e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a3e8:	e062      	b.n	800a4b0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d057      	beq.n	800a4a4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f006 fe16 	bl	8011030 <USB_ReadDevOutEPInterrupt>
 800a404:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f003 0301 	and.w	r3, r3, #1
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00c      	beq.n	800a42a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41c:	461a      	mov	r2, r3
 800a41e:	2301      	movs	r3, #1
 800a420:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fe0b 	bl	800b040 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f003 0308 	and.w	r3, r3, #8
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00c      	beq.n	800a44e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	015a      	lsls	r2, r3, #5
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	4413      	add	r3, r2
 800a43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a440:	461a      	mov	r2, r3
 800a442:	2308      	movs	r3, #8
 800a444:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a446:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 ff05 	bl	800b258 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b00      	cmp	r3, #0
 800a456:	d008      	beq.n	800a46a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a464:	461a      	mov	r2, r3
 800a466:	2310      	movs	r3, #16
 800a468:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f003 0320 	and.w	r3, r3, #32
 800a470:	2b00      	cmp	r3, #0
 800a472:	d008      	beq.n	800a486 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a480:	461a      	mov	r2, r3
 800a482:	2320      	movs	r3, #32
 800a484:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d009      	beq.n	800a4a4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49c:	461a      	mov	r2, r3
 800a49e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	085b      	lsrs	r3, r3, #1
 800a4ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d199      	bne.n	800a3ea <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f006 fd71 	bl	8010fa2 <USB_ReadInterrupts>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a4ca:	f040 80c0 	bne.w	800a64e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f006 fd92 	bl	8010ffc <USB_ReadDevAllInEpInterrupt>
 800a4d8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a4de:	e0b2      	b.n	800a646 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 80a7 	beq.w	800a63a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f2:	b2d2      	uxtb	r2, r2
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f006 fdb8 	bl	801106c <USB_ReadDevInEPInterrupt>
 800a4fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	2b00      	cmp	r3, #0
 800a506:	d057      	beq.n	800a5b8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	f003 030f 	and.w	r3, r3, #15
 800a50e:	2201      	movs	r2, #1
 800a510:	fa02 f303 	lsl.w	r3, r2, r3
 800a514:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a51c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	43db      	mvns	r3, r3
 800a522:	69f9      	ldr	r1, [r7, #28]
 800a524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a528:	4013      	ands	r3, r2
 800a52a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a538:	461a      	mov	r2, r3
 800a53a:	2301      	movs	r3, #1
 800a53c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d132      	bne.n	800a5ac <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a546:	6879      	ldr	r1, [r7, #4]
 800a548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a54a:	4613      	mov	r3, r2
 800a54c:	00db      	lsls	r3, r3, #3
 800a54e:	1a9b      	subs	r3, r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	440b      	add	r3, r1
 800a554:	3348      	adds	r3, #72	; 0x48
 800a556:	6819      	ldr	r1, [r3, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a55c:	4613      	mov	r3, r2
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	1a9b      	subs	r3, r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4403      	add	r3, r0
 800a566:	3344      	adds	r3, #68	; 0x44
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4419      	add	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a570:	4613      	mov	r3, r2
 800a572:	00db      	lsls	r3, r3, #3
 800a574:	1a9b      	subs	r3, r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4403      	add	r3, r0
 800a57a:	3348      	adds	r3, #72	; 0x48
 800a57c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	2b00      	cmp	r3, #0
 800a582:	d113      	bne.n	800a5ac <HAL_PCD_IRQHandler+0x31c>
 800a584:	6879      	ldr	r1, [r7, #4]
 800a586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a588:	4613      	mov	r3, r2
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	1a9b      	subs	r3, r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	440b      	add	r3, r1
 800a592:	3350      	adds	r3, #80	; 0x50
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d108      	bne.n	800a5ac <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	f006 fdc0 	bl	801112c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f00d f98d 	bl	80178d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f003 0308 	and.w	r3, r3, #8
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d008      	beq.n	800a5d4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f003 0310 	and.w	r3, r3, #16
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d008      	beq.n	800a5f0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	2310      	movs	r3, #16
 800a5ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d008      	beq.n	800a60c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	015a      	lsls	r2, r3, #5
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	4413      	add	r3, r2
 800a602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a606:	461a      	mov	r2, r3
 800a608:	2340      	movs	r3, #64	; 0x40
 800a60a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d008      	beq.n	800a628 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a622:	461a      	mov	r2, r3
 800a624:	2302      	movs	r3, #2
 800a626:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fc75 	bl	800af24 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	3301      	adds	r3, #1
 800a63e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	085b      	lsrs	r3, r3, #1
 800a644:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f47f af49 	bne.w	800a4e0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4618      	mov	r0, r3
 800a654:	f006 fca5 	bl	8010fa2 <USB_ReadInterrupts>
 800a658:	4603      	mov	r3, r0
 800a65a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a65e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a662:	d122      	bne.n	800a6aa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	69fa      	ldr	r2, [r7, #28]
 800a66e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a672:	f023 0301 	bic.w	r3, r3, #1
 800a676:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d108      	bne.n	800a694 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a68a:	2100      	movs	r1, #0
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f00d fb8f 	bl	8017db0 <HAL_PCDEx_LPM_Callback>
 800a692:	e002      	b.n	800a69a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f00d f993 	bl	80179c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	695a      	ldr	r2, [r3, #20]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a6a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f006 fc77 	bl	8010fa2 <USB_ReadInterrupts>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6be:	d112      	bne.n	800a6e6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d102      	bne.n	800a6d6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f00d f94f 	bl	8017974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	695a      	ldr	r2, [r3, #20]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a6e4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f006 fc59 	bl	8010fa2 <USB_ReadInterrupts>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6fa:	d121      	bne.n	800a740 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	695a      	ldr	r2, [r3, #20]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a70a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a712:	2b00      	cmp	r3, #0
 800a714:	d111      	bne.n	800a73a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a724:	089b      	lsrs	r3, r3, #2
 800a726:	f003 020f 	and.w	r2, r3, #15
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a730:	2101      	movs	r1, #1
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f00d fb3c 	bl	8017db0 <HAL_PCDEx_LPM_Callback>
 800a738:	e002      	b.n	800a740 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f00d f91a 	bl	8017974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4618      	mov	r0, r3
 800a746:	f006 fc2c 	bl	8010fa2 <USB_ReadInterrupts>
 800a74a:	4603      	mov	r3, r0
 800a74c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a754:	f040 80c7 	bne.w	800a8e6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	69fa      	ldr	r2, [r7, #28]
 800a762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a766:	f023 0301 	bic.w	r3, r3, #1
 800a76a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2110      	movs	r1, #16
 800a772:	4618      	mov	r0, r3
 800a774:	f005 fcc6 	bl	8010104 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a778:	2300      	movs	r3, #0
 800a77a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a77c:	e056      	b.n	800a82c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a78a:	461a      	mov	r2, r3
 800a78c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a790:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	69fa      	ldr	r2, [r7, #28]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7b0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b4:	015a      	lsls	r2, r3, #5
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7c2:	0151      	lsls	r1, r2, #5
 800a7c4:	69fa      	ldr	r2, [r7, #28]
 800a7c6:	440a      	add	r2, r1
 800a7c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7de:	461a      	mov	r2, r3
 800a7e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	015a      	lsls	r2, r3, #5
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7f6:	0151      	lsls	r1, r2, #5
 800a7f8:	69fa      	ldr	r2, [r7, #28]
 800a7fa:	440a      	add	r2, r1
 800a7fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a804:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	015a      	lsls	r2, r3, #5
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	4413      	add	r3, r2
 800a80e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a816:	0151      	lsls	r1, r2, #5
 800a818:	69fa      	ldr	r2, [r7, #28]
 800a81a:	440a      	add	r2, r1
 800a81c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a820:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a824:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a828:	3301      	adds	r3, #1
 800a82a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a832:	429a      	cmp	r2, r3
 800a834:	d3a3      	bcc.n	800a77e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	69fa      	ldr	r2, [r7, #28]
 800a840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a844:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a848:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d016      	beq.n	800a880 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a85c:	69fa      	ldr	r2, [r7, #28]
 800a85e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a862:	f043 030b 	orr.w	r3, r3, #11
 800a866:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a872:	69fa      	ldr	r2, [r7, #28]
 800a874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a878:	f043 030b 	orr.w	r3, r3, #11
 800a87c:	6453      	str	r3, [r2, #68]	; 0x44
 800a87e:	e015      	b.n	800a8ac <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a886:	695b      	ldr	r3, [r3, #20]
 800a888:	69fa      	ldr	r2, [r7, #28]
 800a88a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a88e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a892:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a896:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	69fa      	ldr	r2, [r7, #28]
 800a8a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8a6:	f043 030b 	orr.w	r3, r3, #11
 800a8aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69fa      	ldr	r2, [r7, #28]
 800a8b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a8be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	f006 fc2b 	bl	801112c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	695a      	ldr	r2, [r3, #20]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a8e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f006 fb59 	bl	8010fa2 <USB_ReadInterrupts>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8fa:	d124      	bne.n	800a946 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4618      	mov	r0, r3
 800a902:	f006 fbef 	bl	80110e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f005 fc57 	bl	80101be <USB_GetDevSpeed>
 800a910:	4603      	mov	r3, r0
 800a912:	461a      	mov	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681c      	ldr	r4, [r3, #0]
 800a91c:	f000 fe94 	bl	800b648 <HAL_RCC_GetHCLKFreq>
 800a920:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a926:	b2db      	uxtb	r3, r3
 800a928:	461a      	mov	r2, r3
 800a92a:	4620      	mov	r0, r4
 800a92c:	f005 f97c 	bl	800fc28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f00c fff6 	bl	8017922 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	695a      	ldr	r2, [r3, #20]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a944:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f006 fb29 	bl	8010fa2 <USB_ReadInterrupts>
 800a950:	4603      	mov	r3, r0
 800a952:	f003 0308 	and.w	r3, r3, #8
 800a956:	2b08      	cmp	r3, #8
 800a958:	d10a      	bne.n	800a970 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f00c ffd3 	bl	8017906 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	695a      	ldr	r2, [r3, #20]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f002 0208 	and.w	r2, r2, #8
 800a96e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4618      	mov	r0, r3
 800a976:	f006 fb14 	bl	8010fa2 <USB_ReadInterrupts>
 800a97a:	4603      	mov	r3, r0
 800a97c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a984:	d10f      	bne.n	800a9a6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f00d f835 	bl	8017a00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	695a      	ldr	r2, [r3, #20]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a9a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f006 faf9 	bl	8010fa2 <USB_ReadInterrupts>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9ba:	d10f      	bne.n	800a9dc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f00d f808 	bl	80179dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	695a      	ldr	r2, [r3, #20]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a9da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f006 fade 	bl	8010fa2 <USB_ReadInterrupts>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9f0:	d10a      	bne.n	800aa08 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f00d f816 	bl	8017a24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	695a      	ldr	r2, [r3, #20]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800aa06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f006 fac8 	bl	8010fa2 <USB_ReadInterrupts>
 800aa12:	4603      	mov	r3, r0
 800aa14:	f003 0304 	and.w	r3, r3, #4
 800aa18:	2b04      	cmp	r3, #4
 800aa1a:	d115      	bne.n	800aa48 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	f003 0304 	and.w	r3, r3, #4
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f00d f806 	bl	8017a40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6859      	ldr	r1, [r3, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	69ba      	ldr	r2, [r7, #24]
 800aa40:	430a      	orrs	r2, r1
 800aa42:	605a      	str	r2, [r3, #4]
 800aa44:	e000      	b.n	800aa48 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800aa46:	bf00      	nop
    }
  }
}
 800aa48:	3734      	adds	r7, #52	; 0x34
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd90      	pop	{r4, r7, pc}

0800aa4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	460b      	mov	r3, r1
 800aa58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d101      	bne.n	800aa68 <HAL_PCD_SetAddress+0x1a>
 800aa64:	2302      	movs	r3, #2
 800aa66:	e013      	b.n	800aa90 <HAL_PCD_SetAddress+0x42>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	78fa      	ldrb	r2, [r7, #3]
 800aa74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	78fa      	ldrb	r2, [r7, #3]
 800aa7e:	4611      	mov	r1, r2
 800aa80:	4618      	mov	r0, r3
 800aa82:	f006 fa26 	bl	8010ed2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	4608      	mov	r0, r1
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	70fb      	strb	r3, [r7, #3]
 800aaaa:	460b      	mov	r3, r1
 800aaac:	803b      	strh	r3, [r7, #0]
 800aaae:	4613      	mov	r3, r2
 800aab0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	da0f      	bge.n	800aade <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aabe:	78fb      	ldrb	r3, [r7, #3]
 800aac0:	f003 020f 	and.w	r2, r3, #15
 800aac4:	4613      	mov	r3, r2
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	1a9b      	subs	r3, r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	3338      	adds	r3, #56	; 0x38
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	4413      	add	r3, r2
 800aad2:	3304      	adds	r3, #4
 800aad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2201      	movs	r2, #1
 800aada:	705a      	strb	r2, [r3, #1]
 800aadc:	e00f      	b.n	800aafe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aade:	78fb      	ldrb	r3, [r7, #3]
 800aae0:	f003 020f 	and.w	r2, r3, #15
 800aae4:	4613      	mov	r3, r2
 800aae6:	00db      	lsls	r3, r3, #3
 800aae8:	1a9b      	subs	r3, r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800aafe:	78fb      	ldrb	r3, [r7, #3]
 800ab00:	f003 030f 	and.w	r3, r3, #15
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ab0a:	883a      	ldrh	r2, [r7, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	78ba      	ldrb	r2, [r7, #2]
 800ab14:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	785b      	ldrb	r3, [r3, #1]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d004      	beq.n	800ab28 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ab28:	78bb      	ldrb	r3, [r7, #2]
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d102      	bne.n	800ab34 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d101      	bne.n	800ab42 <HAL_PCD_EP_Open+0xaa>
 800ab3e:	2302      	movs	r3, #2
 800ab40:	e00e      	b.n	800ab60 <HAL_PCD_EP_Open+0xc8>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68f9      	ldr	r1, [r7, #12]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f005 fb59 	bl	8010208 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ab5e:	7afb      	ldrb	r3, [r7, #11]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	460b      	mov	r3, r1
 800ab72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ab74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	da0f      	bge.n	800ab9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	f003 020f 	and.w	r2, r3, #15
 800ab82:	4613      	mov	r3, r2
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	1a9b      	subs	r3, r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	3338      	adds	r3, #56	; 0x38
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	4413      	add	r3, r2
 800ab90:	3304      	adds	r3, #4
 800ab92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2201      	movs	r2, #1
 800ab98:	705a      	strb	r2, [r3, #1]
 800ab9a:	e00f      	b.n	800abbc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab9c:	78fb      	ldrb	r3, [r7, #3]
 800ab9e:	f003 020f 	and.w	r2, r3, #15
 800aba2:	4613      	mov	r3, r2
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	1a9b      	subs	r3, r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	4413      	add	r3, r2
 800abb2:	3304      	adds	r3, #4
 800abb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800abbc:	78fb      	ldrb	r3, [r7, #3]
 800abbe:	f003 030f 	and.w	r3, r3, #15
 800abc2:	b2da      	uxtb	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d101      	bne.n	800abd6 <HAL_PCD_EP_Close+0x6e>
 800abd2:	2302      	movs	r3, #2
 800abd4:	e00e      	b.n	800abf4 <HAL_PCD_EP_Close+0x8c>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68f9      	ldr	r1, [r7, #12]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f005 fb97 	bl	8010318 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	607a      	str	r2, [r7, #4]
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac0c:	7afb      	ldrb	r3, [r7, #11]
 800ac0e:	f003 020f 	and.w	r2, r3, #15
 800ac12:	4613      	mov	r3, r2
 800ac14:	00db      	lsls	r3, r3, #3
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	4413      	add	r3, r2
 800ac22:	3304      	adds	r3, #4
 800ac24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2200      	movs	r2, #0
 800ac36:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac3e:	7afb      	ldrb	r3, [r7, #11]
 800ac40:	f003 030f 	and.w	r3, r3, #15
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d102      	bne.n	800ac58 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ac58:	7afb      	ldrb	r3, [r7, #11]
 800ac5a:	f003 030f 	and.w	r3, r3, #15
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d109      	bne.n	800ac76 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6818      	ldr	r0, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6979      	ldr	r1, [r7, #20]
 800ac70:	f005 fe72 	bl	8010958 <USB_EP0StartXfer>
 800ac74:	e008      	b.n	800ac88 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	461a      	mov	r2, r3
 800ac82:	6979      	ldr	r1, [r7, #20]
 800ac84:	f005 fc24 	bl	80104d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ac9e:	78fb      	ldrb	r3, [r7, #3]
 800aca0:	f003 020f 	and.w	r2, r3, #15
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	4613      	mov	r3, r2
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	1a9b      	subs	r3, r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	440b      	add	r3, r1
 800acb0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800acb4:	681b      	ldr	r3, [r3, #0]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b086      	sub	sp, #24
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	603b      	str	r3, [r7, #0]
 800acce:	460b      	mov	r3, r1
 800acd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acd2:	7afb      	ldrb	r3, [r7, #11]
 800acd4:	f003 020f 	and.w	r2, r3, #15
 800acd8:	4613      	mov	r3, r2
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	1a9b      	subs	r3, r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	3338      	adds	r3, #56	; 0x38
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4413      	add	r3, r2
 800ace6:	3304      	adds	r3, #4
 800ace8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2200      	movs	r2, #0
 800acfa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2201      	movs	r2, #1
 800ad00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad02:	7afb      	ldrb	r3, [r7, #11]
 800ad04:	f003 030f 	and.w	r3, r3, #15
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d102      	bne.n	800ad1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ad1c:	7afb      	ldrb	r3, [r7, #11]
 800ad1e:	f003 030f 	and.w	r3, r3, #15
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d109      	bne.n	800ad3a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	461a      	mov	r2, r3
 800ad32:	6979      	ldr	r1, [r7, #20]
 800ad34:	f005 fe10 	bl	8010958 <USB_EP0StartXfer>
 800ad38:	e008      	b.n	800ad4c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6818      	ldr	r0, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	461a      	mov	r2, r3
 800ad46:	6979      	ldr	r1, [r7, #20]
 800ad48:	f005 fbc2 	bl	80104d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	460b      	mov	r3, r1
 800ad60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	f003 020f 	and.w	r2, r3, #15
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d901      	bls.n	800ad74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e050      	b.n	800ae16 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ad74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	da0f      	bge.n	800ad9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	f003 020f 	and.w	r2, r3, #15
 800ad82:	4613      	mov	r3, r2
 800ad84:	00db      	lsls	r3, r3, #3
 800ad86:	1a9b      	subs	r3, r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	3338      	adds	r3, #56	; 0x38
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	4413      	add	r3, r2
 800ad90:	3304      	adds	r3, #4
 800ad92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2201      	movs	r2, #1
 800ad98:	705a      	strb	r2, [r3, #1]
 800ad9a:	e00d      	b.n	800adb8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ad9c:	78fa      	ldrb	r2, [r7, #3]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	00db      	lsls	r3, r3, #3
 800ada2:	1a9b      	subs	r3, r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	4413      	add	r3, r2
 800adae:	3304      	adds	r3, #4
 800adb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2201      	movs	r2, #1
 800adbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800adbe:	78fb      	ldrb	r3, [r7, #3]
 800adc0:	f003 030f 	and.w	r3, r3, #15
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800add0:	2b01      	cmp	r3, #1
 800add2:	d101      	bne.n	800add8 <HAL_PCD_EP_SetStall+0x82>
 800add4:	2302      	movs	r3, #2
 800add6:	e01e      	b.n	800ae16 <HAL_PCD_EP_SetStall+0xc0>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68f9      	ldr	r1, [r7, #12]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f005 ff9f 	bl	8010d2a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800adec:	78fb      	ldrb	r3, [r7, #3]
 800adee:	f003 030f 	and.w	r3, r3, #15
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10a      	bne.n	800ae0c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6818      	ldr	r0, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	b2d9      	uxtb	r1, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ae06:	461a      	mov	r2, r3
 800ae08:	f006 f990 	bl	801112c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	460b      	mov	r3, r1
 800ae28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ae2a:	78fb      	ldrb	r3, [r7, #3]
 800ae2c:	f003 020f 	and.w	r2, r3, #15
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d901      	bls.n	800ae3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e042      	b.n	800aec2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	da0f      	bge.n	800ae64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae44:	78fb      	ldrb	r3, [r7, #3]
 800ae46:	f003 020f 	and.w	r2, r3, #15
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	1a9b      	subs	r3, r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	3338      	adds	r3, #56	; 0x38
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	4413      	add	r3, r2
 800ae58:	3304      	adds	r3, #4
 800ae5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	705a      	strb	r2, [r3, #1]
 800ae62:	e00f      	b.n	800ae84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	f003 020f 	and.w	r2, r3, #15
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	00db      	lsls	r3, r3, #3
 800ae6e:	1a9b      	subs	r3, r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	4413      	add	r3, r2
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae8a:	78fb      	ldrb	r3, [r7, #3]
 800ae8c:	f003 030f 	and.w	r3, r3, #15
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d101      	bne.n	800aea4 <HAL_PCD_EP_ClrStall+0x86>
 800aea0:	2302      	movs	r3, #2
 800aea2:	e00e      	b.n	800aec2 <HAL_PCD_EP_ClrStall+0xa4>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	68f9      	ldr	r1, [r7, #12]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f005 ffa7 	bl	8010e06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b082      	sub	sp, #8
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d101      	bne.n	800aee4 <HAL_PCD_EP_Flush+0x1a>
 800aee0:	2302      	movs	r3, #2
 800aee2:	e01b      	b.n	800af1c <HAL_PCD_EP_Flush+0x52>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800aeec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	da09      	bge.n	800af08 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	78fb      	ldrb	r3, [r7, #3]
 800aefa:	f003 030f 	and.w	r3, r3, #15
 800aefe:	4619      	mov	r1, r3
 800af00:	4610      	mov	r0, r2
 800af02:	f005 f8ff 	bl	8010104 <USB_FlushTxFifo>
 800af06:	e004      	b.n	800af12 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f005 f91d 	bl	801014c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08a      	sub	sp, #40	; 0x28
 800af28:	af02      	add	r7, sp, #8
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	4613      	mov	r3, r2
 800af3c:	00db      	lsls	r3, r3, #3
 800af3e:	1a9b      	subs	r3, r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	3338      	adds	r3, #56	; 0x38
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	4413      	add	r3, r2
 800af48:	3304      	adds	r3, #4
 800af4a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	699a      	ldr	r2, [r3, #24]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	429a      	cmp	r2, r3
 800af56:	d901      	bls.n	800af5c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	e06c      	b.n	800b036 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	695a      	ldr	r2, [r3, #20]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	69fa      	ldr	r2, [r7, #28]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d902      	bls.n	800af78 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	3303      	adds	r3, #3
 800af7c:	089b      	lsrs	r3, r3, #2
 800af7e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800af80:	e02b      	b.n	800afda <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	695a      	ldr	r2, [r3, #20]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	69fa      	ldr	r2, [r7, #28]
 800af94:	429a      	cmp	r2, r3
 800af96:	d902      	bls.n	800af9e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	3303      	adds	r3, #3
 800afa2:	089b      	lsrs	r3, r3, #2
 800afa4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	68d9      	ldr	r1, [r3, #12]
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	b2da      	uxtb	r2, r3
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	4603      	mov	r3, r0
 800afbc:	6978      	ldr	r0, [r7, #20]
 800afbe:	f005 fe1e 	bl	8010bfe <USB_WritePacket>

    ep->xfer_buff  += len;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	68da      	ldr	r2, [r3, #12]
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	441a      	add	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	699a      	ldr	r2, [r3, #24]
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	441a      	add	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	015a      	lsls	r2, r3, #5
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	4413      	add	r3, r2
 800afe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	b29b      	uxth	r3, r3
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	429a      	cmp	r2, r3
 800afee:	d809      	bhi.n	800b004 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	699a      	ldr	r2, [r3, #24]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800aff8:	429a      	cmp	r2, r3
 800affa:	d203      	bcs.n	800b004 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1be      	bne.n	800af82 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	695a      	ldr	r2, [r3, #20]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d811      	bhi.n	800b034 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	f003 030f 	and.w	r3, r3, #15
 800b016:	2201      	movs	r2, #1
 800b018:	fa02 f303 	lsl.w	r3, r2, r3
 800b01c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	43db      	mvns	r3, r3
 800b02a:	6939      	ldr	r1, [r7, #16]
 800b02c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b030:	4013      	ands	r3, r2
 800b032:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
	...

0800b040 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	333c      	adds	r3, #60	; 0x3c
 800b058:	3304      	adds	r3, #4
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	015a      	lsls	r2, r3, #5
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	4413      	add	r3, r2
 800b066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	2b01      	cmp	r3, #1
 800b074:	f040 80a0 	bne.w	800b1b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	f003 0308 	and.w	r3, r3, #8
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d015      	beq.n	800b0ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	4a72      	ldr	r2, [pc, #456]	; (800b250 <PCD_EP_OutXfrComplete_int+0x210>)
 800b086:	4293      	cmp	r3, r2
 800b088:	f240 80dd 	bls.w	800b246 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 80d7 	beq.w	800b246 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	4413      	add	r3, r2
 800b0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0aa:	6093      	str	r3, [r2, #8]
 800b0ac:	e0cb      	b.n	800b246 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	f003 0320 	and.w	r3, r3, #32
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d009      	beq.n	800b0cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	015a      	lsls	r2, r3, #5
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	4413      	add	r3, r2
 800b0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	2320      	movs	r3, #32
 800b0c8:	6093      	str	r3, [r2, #8]
 800b0ca:	e0bc      	b.n	800b246 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f040 80b7 	bne.w	800b246 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	4a5d      	ldr	r2, [pc, #372]	; (800b250 <PCD_EP_OutXfrComplete_int+0x210>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d90f      	bls.n	800b100 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	015a      	lsls	r2, r3, #5
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0fc:	6093      	str	r3, [r2, #8]
 800b0fe:	e0a2      	b.n	800b246 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800b100:	6879      	ldr	r1, [r7, #4]
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	4613      	mov	r3, r2
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	1a9b      	subs	r3, r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	440b      	add	r3, r1
 800b10e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b112:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	0159      	lsls	r1, r3, #5
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	440b      	add	r3, r1
 800b11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800b126:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	4613      	mov	r3, r2
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	1a9b      	subs	r3, r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4403      	add	r3, r0
 800b136:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b13a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800b13c:	6879      	ldr	r1, [r7, #4]
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	4613      	mov	r3, r2
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	1a9b      	subs	r3, r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	440b      	add	r3, r1
 800b14a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b14e:	6819      	ldr	r1, [r3, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	4613      	mov	r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	1a9b      	subs	r3, r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4403      	add	r3, r0
 800b15e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4419      	add	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	4613      	mov	r3, r2
 800b16c:	00db      	lsls	r3, r3, #3
 800b16e:	1a9b      	subs	r3, r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4403      	add	r3, r0
 800b174:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b178:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d114      	bne.n	800b1aa <PCD_EP_OutXfrComplete_int+0x16a>
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	4613      	mov	r3, r2
 800b186:	00db      	lsls	r3, r3, #3
 800b188:	1a9b      	subs	r3, r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	440b      	add	r3, r1
 800b18e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d108      	bne.n	800b1aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6818      	ldr	r0, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	f005 ffc1 	bl	801112c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f00c fb73 	bl	801789c <HAL_PCD_DataOutStageCallback>
 800b1b6:	e046      	b.n	800b246 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	4a26      	ldr	r2, [pc, #152]	; (800b254 <PCD_EP_OutXfrComplete_int+0x214>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d124      	bne.n	800b20a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1dc:	6093      	str	r3, [r2, #8]
 800b1de:	e032      	b.n	800b246 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f003 0320 	and.w	r3, r3, #32
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d008      	beq.n	800b1fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	015a      	lsls	r2, r3, #5
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	4619      	mov	r1, r3
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f00c fb4a 	bl	801789c <HAL_PCD_DataOutStageCallback>
 800b208:	e01d      	b.n	800b246 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d114      	bne.n	800b23a <PCD_EP_OutXfrComplete_int+0x1fa>
 800b210:	6879      	ldr	r1, [r7, #4]
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	4613      	mov	r3, r2
 800b216:	00db      	lsls	r3, r3, #3
 800b218:	1a9b      	subs	r3, r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	440b      	add	r3, r1
 800b21e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d108      	bne.n	800b23a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b232:	461a      	mov	r2, r3
 800b234:	2100      	movs	r1, #0
 800b236:	f005 ff79 	bl	801112c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f00c fb2b 	bl	801789c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3718      	adds	r7, #24
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	4f54300a 	.word	0x4f54300a
 800b254:	4f54310a 	.word	0x4f54310a

0800b258 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	333c      	adds	r3, #60	; 0x3c
 800b270:	3304      	adds	r3, #4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	015a      	lsls	r2, r3, #5
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	4413      	add	r3, r2
 800b27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	4a15      	ldr	r2, [pc, #84]	; (800b2e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d90e      	bls.n	800b2ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b294:	2b00      	cmp	r3, #0
 800b296:	d009      	beq.n	800b2ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	015a      	lsls	r2, r3, #5
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	4413      	add	r3, r2
 800b2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f00c fae3 	bl	8017878 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	4a0a      	ldr	r2, [pc, #40]	; (800b2e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d90c      	bls.n	800b2d4 <PCD_EP_OutSetupPacket_int+0x7c>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d108      	bne.n	800b2d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	f005 ff2c 	bl	801112c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	4f54300a 	.word	0x4f54300a

0800b2e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d107      	bne.n	800b312 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b302:	883b      	ldrh	r3, [r7, #0]
 800b304:	0419      	lsls	r1, r3, #16
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	430a      	orrs	r2, r1
 800b30e:	629a      	str	r2, [r3, #40]	; 0x28
 800b310:	e028      	b.n	800b364 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b318:	0c1b      	lsrs	r3, r3, #16
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	4413      	add	r3, r2
 800b31e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
 800b324:	e00d      	b.n	800b342 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	3340      	adds	r3, #64	; 0x40
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	0c1b      	lsrs	r3, r3, #16
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	4413      	add	r3, r2
 800b33a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	3301      	adds	r3, #1
 800b340:	73fb      	strb	r3, [r7, #15]
 800b342:	7bfa      	ldrb	r2, [r7, #15]
 800b344:	78fb      	ldrb	r3, [r7, #3]
 800b346:	3b01      	subs	r3, #1
 800b348:	429a      	cmp	r2, r3
 800b34a:	d3ec      	bcc.n	800b326 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b34c:	883b      	ldrh	r3, [r7, #0]
 800b34e:	0418      	lsls	r0, r3, #16
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6819      	ldr	r1, [r3, #0]
 800b354:	78fb      	ldrb	r3, [r7, #3]
 800b356:	3b01      	subs	r3, #1
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	4302      	orrs	r2, r0
 800b35c:	3340      	adds	r3, #64	; 0x40
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	440b      	add	r3, r1
 800b362:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	460b      	mov	r3, r1
 800b37c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	887a      	ldrh	r2, [r7, #2]
 800b384:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3c6:	f043 0303 	orr.w	r3, r3, #3
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	603b      	str	r3, [r7, #0]
 800b3ea:	4b20      	ldr	r3, [pc, #128]	; (800b46c <HAL_PWREx_EnableOverDrive+0x90>)
 800b3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ee:	4a1f      	ldr	r2, [pc, #124]	; (800b46c <HAL_PWREx_EnableOverDrive+0x90>)
 800b3f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3f4:	6413      	str	r3, [r2, #64]	; 0x40
 800b3f6:	4b1d      	ldr	r3, [pc, #116]	; (800b46c <HAL_PWREx_EnableOverDrive+0x90>)
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b402:	4b1b      	ldr	r3, [pc, #108]	; (800b470 <HAL_PWREx_EnableOverDrive+0x94>)
 800b404:	2201      	movs	r2, #1
 800b406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b408:	f7fb fc48 	bl	8006c9c <HAL_GetTick>
 800b40c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b40e:	e009      	b.n	800b424 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b410:	f7fb fc44 	bl	8006c9c <HAL_GetTick>
 800b414:	4602      	mov	r2, r0
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b41e:	d901      	bls.n	800b424 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b420:	2303      	movs	r3, #3
 800b422:	e01f      	b.n	800b464 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b424:	4b13      	ldr	r3, [pc, #76]	; (800b474 <HAL_PWREx_EnableOverDrive+0x98>)
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b42c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b430:	d1ee      	bne.n	800b410 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b432:	4b11      	ldr	r3, [pc, #68]	; (800b478 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b434:	2201      	movs	r2, #1
 800b436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b438:	f7fb fc30 	bl	8006c9c <HAL_GetTick>
 800b43c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b43e:	e009      	b.n	800b454 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b440:	f7fb fc2c 	bl	8006c9c <HAL_GetTick>
 800b444:	4602      	mov	r2, r0
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b44e:	d901      	bls.n	800b454 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b450:	2303      	movs	r3, #3
 800b452:	e007      	b.n	800b464 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b454:	4b07      	ldr	r3, [pc, #28]	; (800b474 <HAL_PWREx_EnableOverDrive+0x98>)
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b45c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b460:	d1ee      	bne.n	800b440 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	40023800 	.word	0x40023800
 800b470:	420e0040 	.word	0x420e0040
 800b474:	40007000 	.word	0x40007000
 800b478:	420e0044 	.word	0x420e0044

0800b47c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e0cc      	b.n	800b62a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b490:	4b68      	ldr	r3, [pc, #416]	; (800b634 <HAL_RCC_ClockConfig+0x1b8>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f003 030f 	and.w	r3, r3, #15
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d90c      	bls.n	800b4b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b49e:	4b65      	ldr	r3, [pc, #404]	; (800b634 <HAL_RCC_ClockConfig+0x1b8>)
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	b2d2      	uxtb	r2, r2
 800b4a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4a6:	4b63      	ldr	r3, [pc, #396]	; (800b634 <HAL_RCC_ClockConfig+0x1b8>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 030f 	and.w	r3, r3, #15
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d001      	beq.n	800b4b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e0b8      	b.n	800b62a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 0302 	and.w	r3, r3, #2
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d020      	beq.n	800b506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f003 0304 	and.w	r3, r3, #4
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d005      	beq.n	800b4dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4d0:	4b59      	ldr	r3, [pc, #356]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	4a58      	ldr	r2, [pc, #352]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b4d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b4da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 0308 	and.w	r3, r3, #8
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d005      	beq.n	800b4f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4e8:	4b53      	ldr	r3, [pc, #332]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	4a52      	ldr	r2, [pc, #328]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b4ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b4f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4f4:	4b50      	ldr	r3, [pc, #320]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	494d      	ldr	r1, [pc, #308]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b502:	4313      	orrs	r3, r2
 800b504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d044      	beq.n	800b59c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d107      	bne.n	800b52a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b51a:	4b47      	ldr	r3, [pc, #284]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b522:	2b00      	cmp	r3, #0
 800b524:	d119      	bne.n	800b55a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e07f      	b.n	800b62a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d003      	beq.n	800b53a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b536:	2b03      	cmp	r3, #3
 800b538:	d107      	bne.n	800b54a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b53a:	4b3f      	ldr	r3, [pc, #252]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d109      	bne.n	800b55a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	e06f      	b.n	800b62a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b54a:	4b3b      	ldr	r3, [pc, #236]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 0302 	and.w	r3, r3, #2
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e067      	b.n	800b62a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b55a:	4b37      	ldr	r3, [pc, #220]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	f023 0203 	bic.w	r2, r3, #3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	4934      	ldr	r1, [pc, #208]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b568:	4313      	orrs	r3, r2
 800b56a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b56c:	f7fb fb96 	bl	8006c9c <HAL_GetTick>
 800b570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b572:	e00a      	b.n	800b58a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b574:	f7fb fb92 	bl	8006c9c <HAL_GetTick>
 800b578:	4602      	mov	r2, r0
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b582:	4293      	cmp	r3, r2
 800b584:	d901      	bls.n	800b58a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b586:	2303      	movs	r3, #3
 800b588:	e04f      	b.n	800b62a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b58a:	4b2b      	ldr	r3, [pc, #172]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f003 020c 	and.w	r2, r3, #12
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	429a      	cmp	r2, r3
 800b59a:	d1eb      	bne.n	800b574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b59c:	4b25      	ldr	r3, [pc, #148]	; (800b634 <HAL_RCC_ClockConfig+0x1b8>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 030f 	and.w	r3, r3, #15
 800b5a4:	683a      	ldr	r2, [r7, #0]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d20c      	bcs.n	800b5c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5aa:	4b22      	ldr	r3, [pc, #136]	; (800b634 <HAL_RCC_ClockConfig+0x1b8>)
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	b2d2      	uxtb	r2, r2
 800b5b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5b2:	4b20      	ldr	r3, [pc, #128]	; (800b634 <HAL_RCC_ClockConfig+0x1b8>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f003 030f 	and.w	r3, r3, #15
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d001      	beq.n	800b5c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e032      	b.n	800b62a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d008      	beq.n	800b5e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5d0:	4b19      	ldr	r3, [pc, #100]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	4916      	ldr	r1, [pc, #88]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f003 0308 	and.w	r3, r3, #8
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d009      	beq.n	800b602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b5ee:	4b12      	ldr	r3, [pc, #72]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	00db      	lsls	r3, r3, #3
 800b5fc:	490e      	ldr	r1, [pc, #56]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b5fe:	4313      	orrs	r3, r2
 800b600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b602:	f000 fb6b 	bl	800bcdc <HAL_RCC_GetSysClockFreq>
 800b606:	4602      	mov	r2, r0
 800b608:	4b0b      	ldr	r3, [pc, #44]	; (800b638 <HAL_RCC_ClockConfig+0x1bc>)
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	091b      	lsrs	r3, r3, #4
 800b60e:	f003 030f 	and.w	r3, r3, #15
 800b612:	490a      	ldr	r1, [pc, #40]	; (800b63c <HAL_RCC_ClockConfig+0x1c0>)
 800b614:	5ccb      	ldrb	r3, [r1, r3]
 800b616:	fa22 f303 	lsr.w	r3, r2, r3
 800b61a:	4a09      	ldr	r2, [pc, #36]	; (800b640 <HAL_RCC_ClockConfig+0x1c4>)
 800b61c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b61e:	4b09      	ldr	r3, [pc, #36]	; (800b644 <HAL_RCC_ClockConfig+0x1c8>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4618      	mov	r0, r3
 800b624:	f7fb faf6 	bl	8006c14 <HAL_InitTick>

  return HAL_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	40023c00 	.word	0x40023c00
 800b638:	40023800 	.word	0x40023800
 800b63c:	080188ec 	.word	0x080188ec
 800b640:	20000000 	.word	0x20000000
 800b644:	20000004 	.word	0x20000004

0800b648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b648:	b480      	push	{r7}
 800b64a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b64c:	4b03      	ldr	r3, [pc, #12]	; (800b65c <HAL_RCC_GetHCLKFreq+0x14>)
 800b64e:	681b      	ldr	r3, [r3, #0]
}
 800b650:	4618      	mov	r0, r3
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	20000000 	.word	0x20000000

0800b660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b664:	f7ff fff0 	bl	800b648 <HAL_RCC_GetHCLKFreq>
 800b668:	4602      	mov	r2, r0
 800b66a:	4b05      	ldr	r3, [pc, #20]	; (800b680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	0a9b      	lsrs	r3, r3, #10
 800b670:	f003 0307 	and.w	r3, r3, #7
 800b674:	4903      	ldr	r1, [pc, #12]	; (800b684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b676:	5ccb      	ldrb	r3, [r1, r3]
 800b678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	40023800 	.word	0x40023800
 800b684:	080188fc 	.word	0x080188fc

0800b688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08c      	sub	sp, #48	; 0x30
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800b694:	2300      	movs	r3, #0
 800b696:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d010      	beq.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800b6c0:	4b6f      	ldr	r3, [pc, #444]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6c6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ce:	496c      	ldr	r1, [pc, #432]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 0302 	and.w	r3, r3, #2
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d010      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800b6ee:	4b64      	ldr	r3, [pc, #400]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6f4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fc:	4960      	ldr	r1, [pc, #384]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6fe:	4313      	orrs	r3, r2
 800b700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d101      	bne.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800b70c:	2301      	movs	r3, #1
 800b70e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 0304 	and.w	r3, r3, #4
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d017      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b71c:	4b58      	ldr	r3, [pc, #352]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b71e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72a:	4955      	ldr	r1, [pc, #340]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b72c:	4313      	orrs	r3, r2
 800b72e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b73a:	d101      	bne.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800b73c:	2301      	movs	r3, #1
 800b73e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b744:	2b00      	cmp	r3, #0
 800b746:	d101      	bne.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800b748:	2301      	movs	r3, #1
 800b74a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 0308 	and.w	r3, r3, #8
 800b754:	2b00      	cmp	r3, #0
 800b756:	d017      	beq.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b758:	4b49      	ldr	r3, [pc, #292]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b75a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b75e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b766:	4946      	ldr	r1, [pc, #280]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b768:	4313      	orrs	r3, r2
 800b76a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b776:	d101      	bne.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800b778:	2301      	movs	r3, #1
 800b77a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800b784:	2301      	movs	r3, #1
 800b786:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 0320 	and.w	r3, r3, #32
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 808a 	beq.w	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b796:	2300      	movs	r3, #0
 800b798:	60bb      	str	r3, [r7, #8]
 800b79a:	4b39      	ldr	r3, [pc, #228]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	4a38      	ldr	r2, [pc, #224]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b7a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7a4:	6413      	str	r3, [r2, #64]	; 0x40
 800b7a6:	4b36      	ldr	r3, [pc, #216]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7ae:	60bb      	str	r3, [r7, #8]
 800b7b0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b7b2:	4b34      	ldr	r3, [pc, #208]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a33      	ldr	r2, [pc, #204]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b7b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b7be:	f7fb fa6d 	bl	8006c9c <HAL_GetTick>
 800b7c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b7c4:	e008      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b7c6:	f7fb fa69 	bl	8006c9c <HAL_GetTick>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d901      	bls.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e278      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b7d8:	4b2a      	ldr	r3, [pc, #168]	; (800b884 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0f0      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b7e4:	4b26      	ldr	r3, [pc, #152]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b7e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7ec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b7ee:	6a3b      	ldr	r3, [r7, #32]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d02f      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7fc:	6a3a      	ldr	r2, [r7, #32]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d028      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b802:	4b1f      	ldr	r3, [pc, #124]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b80a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b80c:	4b1e      	ldr	r3, [pc, #120]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b80e:	2201      	movs	r2, #1
 800b810:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b812:	4b1d      	ldr	r3, [pc, #116]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b814:	2200      	movs	r2, #0
 800b816:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b818:	4a19      	ldr	r2, [pc, #100]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b81a:	6a3b      	ldr	r3, [r7, #32]
 800b81c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b81e:	4b18      	ldr	r3, [pc, #96]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b01      	cmp	r3, #1
 800b828:	d114      	bne.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b82a:	f7fb fa37 	bl	8006c9c <HAL_GetTick>
 800b82e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b830:	e00a      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b832:	f7fb fa33 	bl	8006c9c <HAL_GetTick>
 800b836:	4602      	mov	r2, r0
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b840:	4293      	cmp	r3, r2
 800b842:	d901      	bls.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800b844:	2303      	movs	r3, #3
 800b846:	e240      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b848:	4b0d      	ldr	r3, [pc, #52]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b84a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84c:	f003 0302 	and.w	r3, r3, #2
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0ee      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b85c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b860:	d114      	bne.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x204>
 800b862:	4b07      	ldr	r3, [pc, #28]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b876:	4902      	ldr	r1, [pc, #8]	; (800b880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b878:	4313      	orrs	r3, r2
 800b87a:	608b      	str	r3, [r1, #8]
 800b87c:	e00c      	b.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b87e:	bf00      	nop
 800b880:	40023800 	.word	0x40023800
 800b884:	40007000 	.word	0x40007000
 800b888:	42470e40 	.word	0x42470e40
 800b88c:	4b4a      	ldr	r3, [pc, #296]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	4a49      	ldr	r2, [pc, #292]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b892:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b896:	6093      	str	r3, [r2, #8]
 800b898:	4b47      	ldr	r3, [pc, #284]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b89a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8a4:	4944      	ldr	r1, [pc, #272]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 0310 	and.w	r3, r3, #16
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d004      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b8bc:	4b3f      	ldr	r3, [pc, #252]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800b8be:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00a      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800b8cc:	4b3a      	ldr	r3, [pc, #232]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8da:	4937      	ldr	r1, [pc, #220]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00a      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b8ee:	4b32      	ldr	r3, [pc, #200]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8f4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8fc:	492e      	ldr	r1, [pc, #184]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d011      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b910:	4b29      	ldr	r3, [pc, #164]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b916:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b91e:	4926      	ldr	r1, [pc, #152]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b920:	4313      	orrs	r3, r2
 800b922:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b92e:	d101      	bne.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b930:	2301      	movs	r3, #1
 800b932:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00a      	beq.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b940:	4b1d      	ldr	r3, [pc, #116]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b946:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b94e:	491a      	ldr	r1, [pc, #104]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b950:	4313      	orrs	r3, r2
 800b952:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d011      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b962:	4b15      	ldr	r3, [pc, #84]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b968:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b970:	4911      	ldr	r1, [pc, #68]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b972:	4313      	orrs	r3, r2
 800b974:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b97c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b980:	d101      	bne.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b982:	2301      	movs	r3, #1
 800b984:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d005      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b994:	f040 80ff 	bne.w	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b998:	4b09      	ldr	r3, [pc, #36]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b99e:	f7fb f97d 	bl	8006c9c <HAL_GetTick>
 800b9a2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b9a4:	e00e      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b9a6:	f7fb f979 	bl	8006c9c <HAL_GetTick>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d907      	bls.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e188      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b9b8:	40023800 	.word	0x40023800
 800b9bc:	424711e0 	.word	0x424711e0
 800b9c0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b9c4:	4b7e      	ldr	r3, [pc, #504]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1ea      	bne.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d003      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d009      	beq.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d028      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d124      	bne.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b9f8:	4b71      	ldr	r3, [pc, #452]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b9fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9fe:	0c1b      	lsrs	r3, r3, #16
 800ba00:	f003 0303 	and.w	r3, r3, #3
 800ba04:	3301      	adds	r3, #1
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ba0a:	4b6d      	ldr	r3, [pc, #436]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba10:	0e1b      	lsrs	r3, r3, #24
 800ba12:	f003 030f 	and.w	r3, r3, #15
 800ba16:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	019b      	lsls	r3, r3, #6
 800ba22:	431a      	orrs	r2, r3
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	085b      	lsrs	r3, r3, #1
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	041b      	lsls	r3, r3, #16
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	061b      	lsls	r3, r3, #24
 800ba32:	431a      	orrs	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	071b      	lsls	r3, r3, #28
 800ba3a:	4961      	ldr	r1, [pc, #388]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 0304 	and.w	r3, r3, #4
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba56:	d00a      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d035      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba6c:	d130      	bne.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800ba6e:	4b54      	ldr	r3, [pc, #336]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba74:	0c1b      	lsrs	r3, r3, #16
 800ba76:	f003 0303 	and.w	r3, r3, #3
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	005b      	lsls	r3, r3, #1
 800ba7e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ba80:	4b4f      	ldr	r3, [pc, #316]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba86:	0f1b      	lsrs	r3, r3, #28
 800ba88:	f003 0307 	and.w	r3, r3, #7
 800ba8c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	685a      	ldr	r2, [r3, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	019b      	lsls	r3, r3, #6
 800ba98:	431a      	orrs	r2, r3
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	085b      	lsrs	r3, r3, #1
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	041b      	lsls	r3, r3, #16
 800baa2:	431a      	orrs	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	061b      	lsls	r3, r3, #24
 800baaa:	431a      	orrs	r2, r3
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	071b      	lsls	r3, r3, #28
 800bab0:	4943      	ldr	r1, [pc, #268]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bab2:	4313      	orrs	r3, r2
 800bab4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bab8:	4b41      	ldr	r3, [pc, #260]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800baba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800babe:	f023 021f 	bic.w	r2, r3, #31
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac6:	3b01      	subs	r3, #1
 800bac8:	493d      	ldr	r1, [pc, #244]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800baca:	4313      	orrs	r3, r2
 800bacc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d029      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bae4:	d124      	bne.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bae6:	4b36      	ldr	r3, [pc, #216]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baec:	0c1b      	lsrs	r3, r3, #16
 800baee:	f003 0303 	and.w	r3, r3, #3
 800baf2:	3301      	adds	r3, #1
 800baf4:	005b      	lsls	r3, r3, #1
 800baf6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800baf8:	4b31      	ldr	r3, [pc, #196]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bafa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bafe:	0f1b      	lsrs	r3, r3, #28
 800bb00:	f003 0307 	and.w	r3, r3, #7
 800bb04:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	019b      	lsls	r3, r3, #6
 800bb10:	431a      	orrs	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	085b      	lsrs	r3, r3, #1
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	041b      	lsls	r3, r3, #16
 800bb1c:	431a      	orrs	r2, r3
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	061b      	lsls	r3, r3, #24
 800bb22:	431a      	orrs	r2, r3
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	071b      	lsls	r3, r3, #28
 800bb28:	4925      	ldr	r1, [pc, #148]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d016      	beq.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685a      	ldr	r2, [r3, #4]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	019b      	lsls	r3, r3, #6
 800bb46:	431a      	orrs	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	085b      	lsrs	r3, r3, #1
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	041b      	lsls	r3, r3, #16
 800bb52:	431a      	orrs	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	061b      	lsls	r3, r3, #24
 800bb5a:	431a      	orrs	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	071b      	lsls	r3, r3, #28
 800bb62:	4917      	ldr	r1, [pc, #92]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bb64:	4313      	orrs	r3, r2
 800bb66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bb6a:	4b16      	ldr	r3, [pc, #88]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bb70:	f7fb f894 	bl	8006c9c <HAL_GetTick>
 800bb74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb76:	e008      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bb78:	f7fb f890 	bl	8006c9c <HAL_GetTick>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d901      	bls.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e09f      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb8a:	4b0d      	ldr	r3, [pc, #52]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d0f0      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	f040 8095 	bne.w	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bb9e:	4b0a      	ldr	r3, [pc, #40]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800bba0:	2200      	movs	r2, #0
 800bba2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bba4:	f7fb f87a 	bl	8006c9c <HAL_GetTick>
 800bba8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bbaa:	e00f      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bbac:	f7fb f876 	bl	8006c9c <HAL_GetTick>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d908      	bls.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e085      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x642>
 800bbbe:	bf00      	nop
 800bbc0:	40023800 	.word	0x40023800
 800bbc4:	42470068 	.word	0x42470068
 800bbc8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bbcc:	4b41      	ldr	r3, [pc, #260]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbd8:	d0e8      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f003 0304 	and.w	r3, r3, #4
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x566>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d009      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d02b      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d127      	bne.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800bc02:	4b34      	ldr	r3, [pc, #208]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc08:	0c1b      	lsrs	r3, r3, #16
 800bc0a:	f003 0303 	and.w	r3, r3, #3
 800bc0e:	3301      	adds	r3, #1
 800bc10:	005b      	lsls	r3, r3, #1
 800bc12:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	699a      	ldr	r2, [r3, #24]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	69db      	ldr	r3, [r3, #28]
 800bc1c:	019b      	lsls	r3, r3, #6
 800bc1e:	431a      	orrs	r2, r3
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	085b      	lsrs	r3, r3, #1
 800bc24:	3b01      	subs	r3, #1
 800bc26:	041b      	lsls	r3, r3, #16
 800bc28:	431a      	orrs	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2e:	061b      	lsls	r3, r3, #24
 800bc30:	4928      	ldr	r1, [pc, #160]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc32:	4313      	orrs	r3, r2
 800bc34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bc38:	4b26      	ldr	r3, [pc, #152]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc3e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc46:	3b01      	subs	r3, #1
 800bc48:	021b      	lsls	r3, r3, #8
 800bc4a:	4922      	ldr	r1, [pc, #136]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d01d      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc66:	d118      	bne.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bc68:	4b1a      	ldr	r3, [pc, #104]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc6e:	0e1b      	lsrs	r3, r3, #24
 800bc70:	f003 030f 	and.w	r3, r3, #15
 800bc74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	699a      	ldr	r2, [r3, #24]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	69db      	ldr	r3, [r3, #28]
 800bc7e:	019b      	lsls	r3, r3, #6
 800bc80:	431a      	orrs	r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6a1b      	ldr	r3, [r3, #32]
 800bc86:	085b      	lsrs	r3, r3, #1
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	041b      	lsls	r3, r3, #16
 800bc8c:	431a      	orrs	r2, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	061b      	lsls	r3, r3, #24
 800bc92:	4910      	ldr	r1, [pc, #64]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc94:	4313      	orrs	r3, r2
 800bc96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bc9a:	4b0f      	ldr	r3, [pc, #60]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bca0:	f7fa fffc 	bl	8006c9c <HAL_GetTick>
 800bca4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bca6:	e008      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bca8:	f7fa fff8 	bl	8006c9c <HAL_GetTick>
 800bcac:	4602      	mov	r2, r0
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	2b02      	cmp	r3, #2
 800bcb4:	d901      	bls.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e007      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bcba:	4b06      	ldr	r3, [pc, #24]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcc6:	d1ef      	bne.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3730      	adds	r7, #48	; 0x30
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	40023800 	.word	0x40023800
 800bcd8:	42470070 	.word	0x42470070

0800bcdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bcdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bce0:	b0ae      	sub	sp, #184	; 0xb8
 800bce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bce4:	2300      	movs	r3, #0
 800bce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800bcea:	2300      	movs	r3, #0
 800bcec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bd02:	4bcb      	ldr	r3, [pc, #812]	; (800c030 <HAL_RCC_GetSysClockFreq+0x354>)
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f003 030c 	and.w	r3, r3, #12
 800bd0a:	2b0c      	cmp	r3, #12
 800bd0c:	f200 8206 	bhi.w	800c11c <HAL_RCC_GetSysClockFreq+0x440>
 800bd10:	a201      	add	r2, pc, #4	; (adr r2, 800bd18 <HAL_RCC_GetSysClockFreq+0x3c>)
 800bd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd16:	bf00      	nop
 800bd18:	0800bd4d 	.word	0x0800bd4d
 800bd1c:	0800c11d 	.word	0x0800c11d
 800bd20:	0800c11d 	.word	0x0800c11d
 800bd24:	0800c11d 	.word	0x0800c11d
 800bd28:	0800bd55 	.word	0x0800bd55
 800bd2c:	0800c11d 	.word	0x0800c11d
 800bd30:	0800c11d 	.word	0x0800c11d
 800bd34:	0800c11d 	.word	0x0800c11d
 800bd38:	0800bd5d 	.word	0x0800bd5d
 800bd3c:	0800c11d 	.word	0x0800c11d
 800bd40:	0800c11d 	.word	0x0800c11d
 800bd44:	0800c11d 	.word	0x0800c11d
 800bd48:	0800bf4d 	.word	0x0800bf4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bd4c:	4bb9      	ldr	r3, [pc, #740]	; (800c034 <HAL_RCC_GetSysClockFreq+0x358>)
 800bd4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800bd52:	e1e7      	b.n	800c124 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bd54:	4bb8      	ldr	r3, [pc, #736]	; (800c038 <HAL_RCC_GetSysClockFreq+0x35c>)
 800bd56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800bd5a:	e1e3      	b.n	800c124 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bd5c:	4bb4      	ldr	r3, [pc, #720]	; (800c030 <HAL_RCC_GetSysClockFreq+0x354>)
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bd68:	4bb1      	ldr	r3, [pc, #708]	; (800c030 <HAL_RCC_GetSysClockFreq+0x354>)
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d071      	beq.n	800be58 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd74:	4bae      	ldr	r3, [pc, #696]	; (800c030 <HAL_RCC_GetSysClockFreq+0x354>)
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	099b      	lsrs	r3, r3, #6
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd80:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800bd84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd90:	2300      	movs	r3, #0
 800bd92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bd9a:	4622      	mov	r2, r4
 800bd9c:	462b      	mov	r3, r5
 800bd9e:	f04f 0000 	mov.w	r0, #0
 800bda2:	f04f 0100 	mov.w	r1, #0
 800bda6:	0159      	lsls	r1, r3, #5
 800bda8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bdac:	0150      	lsls	r0, r2, #5
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	1a51      	subs	r1, r2, r1
 800bdb6:	6439      	str	r1, [r7, #64]	; 0x40
 800bdb8:	4629      	mov	r1, r5
 800bdba:	eb63 0301 	sbc.w	r3, r3, r1
 800bdbe:	647b      	str	r3, [r7, #68]	; 0x44
 800bdc0:	f04f 0200 	mov.w	r2, #0
 800bdc4:	f04f 0300 	mov.w	r3, #0
 800bdc8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800bdcc:	4649      	mov	r1, r9
 800bdce:	018b      	lsls	r3, r1, #6
 800bdd0:	4641      	mov	r1, r8
 800bdd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bdd6:	4641      	mov	r1, r8
 800bdd8:	018a      	lsls	r2, r1, #6
 800bdda:	4641      	mov	r1, r8
 800bddc:	1a51      	subs	r1, r2, r1
 800bdde:	63b9      	str	r1, [r7, #56]	; 0x38
 800bde0:	4649      	mov	r1, r9
 800bde2:	eb63 0301 	sbc.w	r3, r3, r1
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bde8:	f04f 0200 	mov.w	r2, #0
 800bdec:	f04f 0300 	mov.w	r3, #0
 800bdf0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800bdf4:	4649      	mov	r1, r9
 800bdf6:	00cb      	lsls	r3, r1, #3
 800bdf8:	4641      	mov	r1, r8
 800bdfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bdfe:	4641      	mov	r1, r8
 800be00:	00ca      	lsls	r2, r1, #3
 800be02:	4610      	mov	r0, r2
 800be04:	4619      	mov	r1, r3
 800be06:	4603      	mov	r3, r0
 800be08:	4622      	mov	r2, r4
 800be0a:	189b      	adds	r3, r3, r2
 800be0c:	633b      	str	r3, [r7, #48]	; 0x30
 800be0e:	462b      	mov	r3, r5
 800be10:	460a      	mov	r2, r1
 800be12:	eb42 0303 	adc.w	r3, r2, r3
 800be16:	637b      	str	r3, [r7, #52]	; 0x34
 800be18:	f04f 0200 	mov.w	r2, #0
 800be1c:	f04f 0300 	mov.w	r3, #0
 800be20:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800be24:	4629      	mov	r1, r5
 800be26:	024b      	lsls	r3, r1, #9
 800be28:	4621      	mov	r1, r4
 800be2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800be2e:	4621      	mov	r1, r4
 800be30:	024a      	lsls	r2, r1, #9
 800be32:	4610      	mov	r0, r2
 800be34:	4619      	mov	r1, r3
 800be36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be3a:	2200      	movs	r2, #0
 800be3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be44:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800be48:	f7f4 fa32 	bl	80002b0 <__aeabi_uldivmod>
 800be4c:	4602      	mov	r2, r0
 800be4e:	460b      	mov	r3, r1
 800be50:	4613      	mov	r3, r2
 800be52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be56:	e067      	b.n	800bf28 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be58:	4b75      	ldr	r3, [pc, #468]	; (800c030 <HAL_RCC_GetSysClockFreq+0x354>)
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	099b      	lsrs	r3, r3, #6
 800be5e:	2200      	movs	r2, #0
 800be60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be64:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800be68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be70:	67bb      	str	r3, [r7, #120]	; 0x78
 800be72:	2300      	movs	r3, #0
 800be74:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be76:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800be7a:	4622      	mov	r2, r4
 800be7c:	462b      	mov	r3, r5
 800be7e:	f04f 0000 	mov.w	r0, #0
 800be82:	f04f 0100 	mov.w	r1, #0
 800be86:	0159      	lsls	r1, r3, #5
 800be88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800be8c:	0150      	lsls	r0, r2, #5
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4621      	mov	r1, r4
 800be94:	1a51      	subs	r1, r2, r1
 800be96:	62b9      	str	r1, [r7, #40]	; 0x28
 800be98:	4629      	mov	r1, r5
 800be9a:	eb63 0301 	sbc.w	r3, r3, r1
 800be9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bea0:	f04f 0200 	mov.w	r2, #0
 800bea4:	f04f 0300 	mov.w	r3, #0
 800bea8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800beac:	4649      	mov	r1, r9
 800beae:	018b      	lsls	r3, r1, #6
 800beb0:	4641      	mov	r1, r8
 800beb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800beb6:	4641      	mov	r1, r8
 800beb8:	018a      	lsls	r2, r1, #6
 800beba:	4641      	mov	r1, r8
 800bebc:	ebb2 0a01 	subs.w	sl, r2, r1
 800bec0:	4649      	mov	r1, r9
 800bec2:	eb63 0b01 	sbc.w	fp, r3, r1
 800bec6:	f04f 0200 	mov.w	r2, #0
 800beca:	f04f 0300 	mov.w	r3, #0
 800bece:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bed2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bed6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800beda:	4692      	mov	sl, r2
 800bedc:	469b      	mov	fp, r3
 800bede:	4623      	mov	r3, r4
 800bee0:	eb1a 0303 	adds.w	r3, sl, r3
 800bee4:	623b      	str	r3, [r7, #32]
 800bee6:	462b      	mov	r3, r5
 800bee8:	eb4b 0303 	adc.w	r3, fp, r3
 800beec:	627b      	str	r3, [r7, #36]	; 0x24
 800beee:	f04f 0200 	mov.w	r2, #0
 800bef2:	f04f 0300 	mov.w	r3, #0
 800bef6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800befa:	4629      	mov	r1, r5
 800befc:	028b      	lsls	r3, r1, #10
 800befe:	4621      	mov	r1, r4
 800bf00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bf04:	4621      	mov	r1, r4
 800bf06:	028a      	lsls	r2, r1, #10
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf10:	2200      	movs	r2, #0
 800bf12:	673b      	str	r3, [r7, #112]	; 0x70
 800bf14:	677a      	str	r2, [r7, #116]	; 0x74
 800bf16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800bf1a:	f7f4 f9c9 	bl	80002b0 <__aeabi_uldivmod>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	4613      	mov	r3, r2
 800bf24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bf28:	4b41      	ldr	r3, [pc, #260]	; (800c030 <HAL_RCC_GetSysClockFreq+0x354>)
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	0c1b      	lsrs	r3, r3, #16
 800bf2e:	f003 0303 	and.w	r3, r3, #3
 800bf32:	3301      	adds	r3, #1
 800bf34:	005b      	lsls	r3, r3, #1
 800bf36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800bf3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf42:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800bf4a:	e0eb      	b.n	800c124 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bf4c:	4b38      	ldr	r3, [pc, #224]	; (800c030 <HAL_RCC_GetSysClockFreq+0x354>)
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bf58:	4b35      	ldr	r3, [pc, #212]	; (800c030 <HAL_RCC_GetSysClockFreq+0x354>)
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d06b      	beq.n	800c03c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf64:	4b32      	ldr	r3, [pc, #200]	; (800c030 <HAL_RCC_GetSysClockFreq+0x354>)
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	099b      	lsrs	r3, r3, #6
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf76:	663b      	str	r3, [r7, #96]	; 0x60
 800bf78:	2300      	movs	r3, #0
 800bf7a:	667b      	str	r3, [r7, #100]	; 0x64
 800bf7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800bf80:	4622      	mov	r2, r4
 800bf82:	462b      	mov	r3, r5
 800bf84:	f04f 0000 	mov.w	r0, #0
 800bf88:	f04f 0100 	mov.w	r1, #0
 800bf8c:	0159      	lsls	r1, r3, #5
 800bf8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf92:	0150      	lsls	r0, r2, #5
 800bf94:	4602      	mov	r2, r0
 800bf96:	460b      	mov	r3, r1
 800bf98:	4621      	mov	r1, r4
 800bf9a:	1a51      	subs	r1, r2, r1
 800bf9c:	61b9      	str	r1, [r7, #24]
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	eb63 0301 	sbc.w	r3, r3, r1
 800bfa4:	61fb      	str	r3, [r7, #28]
 800bfa6:	f04f 0200 	mov.w	r2, #0
 800bfaa:	f04f 0300 	mov.w	r3, #0
 800bfae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800bfb2:	4659      	mov	r1, fp
 800bfb4:	018b      	lsls	r3, r1, #6
 800bfb6:	4651      	mov	r1, sl
 800bfb8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bfbc:	4651      	mov	r1, sl
 800bfbe:	018a      	lsls	r2, r1, #6
 800bfc0:	4651      	mov	r1, sl
 800bfc2:	ebb2 0801 	subs.w	r8, r2, r1
 800bfc6:	4659      	mov	r1, fp
 800bfc8:	eb63 0901 	sbc.w	r9, r3, r1
 800bfcc:	f04f 0200 	mov.w	r2, #0
 800bfd0:	f04f 0300 	mov.w	r3, #0
 800bfd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bfd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bfdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bfe0:	4690      	mov	r8, r2
 800bfe2:	4699      	mov	r9, r3
 800bfe4:	4623      	mov	r3, r4
 800bfe6:	eb18 0303 	adds.w	r3, r8, r3
 800bfea:	613b      	str	r3, [r7, #16]
 800bfec:	462b      	mov	r3, r5
 800bfee:	eb49 0303 	adc.w	r3, r9, r3
 800bff2:	617b      	str	r3, [r7, #20]
 800bff4:	f04f 0200 	mov.w	r2, #0
 800bff8:	f04f 0300 	mov.w	r3, #0
 800bffc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c000:	4629      	mov	r1, r5
 800c002:	024b      	lsls	r3, r1, #9
 800c004:	4621      	mov	r1, r4
 800c006:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c00a:	4621      	mov	r1, r4
 800c00c:	024a      	lsls	r2, r1, #9
 800c00e:	4610      	mov	r0, r2
 800c010:	4619      	mov	r1, r3
 800c012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c016:	2200      	movs	r2, #0
 800c018:	65bb      	str	r3, [r7, #88]	; 0x58
 800c01a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c01c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c020:	f7f4 f946 	bl	80002b0 <__aeabi_uldivmod>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	4613      	mov	r3, r2
 800c02a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c02e:	e065      	b.n	800c0fc <HAL_RCC_GetSysClockFreq+0x420>
 800c030:	40023800 	.word	0x40023800
 800c034:	00f42400 	.word	0x00f42400
 800c038:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c03c:	4b3d      	ldr	r3, [pc, #244]	; (800c134 <HAL_RCC_GetSysClockFreq+0x458>)
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	099b      	lsrs	r3, r3, #6
 800c042:	2200      	movs	r2, #0
 800c044:	4618      	mov	r0, r3
 800c046:	4611      	mov	r1, r2
 800c048:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c04c:	653b      	str	r3, [r7, #80]	; 0x50
 800c04e:	2300      	movs	r3, #0
 800c050:	657b      	str	r3, [r7, #84]	; 0x54
 800c052:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800c056:	4642      	mov	r2, r8
 800c058:	464b      	mov	r3, r9
 800c05a:	f04f 0000 	mov.w	r0, #0
 800c05e:	f04f 0100 	mov.w	r1, #0
 800c062:	0159      	lsls	r1, r3, #5
 800c064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c068:	0150      	lsls	r0, r2, #5
 800c06a:	4602      	mov	r2, r0
 800c06c:	460b      	mov	r3, r1
 800c06e:	4641      	mov	r1, r8
 800c070:	1a51      	subs	r1, r2, r1
 800c072:	60b9      	str	r1, [r7, #8]
 800c074:	4649      	mov	r1, r9
 800c076:	eb63 0301 	sbc.w	r3, r3, r1
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	f04f 0200 	mov.w	r2, #0
 800c080:	f04f 0300 	mov.w	r3, #0
 800c084:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c088:	4659      	mov	r1, fp
 800c08a:	018b      	lsls	r3, r1, #6
 800c08c:	4651      	mov	r1, sl
 800c08e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c092:	4651      	mov	r1, sl
 800c094:	018a      	lsls	r2, r1, #6
 800c096:	4651      	mov	r1, sl
 800c098:	1a54      	subs	r4, r2, r1
 800c09a:	4659      	mov	r1, fp
 800c09c:	eb63 0501 	sbc.w	r5, r3, r1
 800c0a0:	f04f 0200 	mov.w	r2, #0
 800c0a4:	f04f 0300 	mov.w	r3, #0
 800c0a8:	00eb      	lsls	r3, r5, #3
 800c0aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c0ae:	00e2      	lsls	r2, r4, #3
 800c0b0:	4614      	mov	r4, r2
 800c0b2:	461d      	mov	r5, r3
 800c0b4:	4643      	mov	r3, r8
 800c0b6:	18e3      	adds	r3, r4, r3
 800c0b8:	603b      	str	r3, [r7, #0]
 800c0ba:	464b      	mov	r3, r9
 800c0bc:	eb45 0303 	adc.w	r3, r5, r3
 800c0c0:	607b      	str	r3, [r7, #4]
 800c0c2:	f04f 0200 	mov.w	r2, #0
 800c0c6:	f04f 0300 	mov.w	r3, #0
 800c0ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	028b      	lsls	r3, r1, #10
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c0d8:	4621      	mov	r1, r4
 800c0da:	028a      	lsls	r2, r1, #10
 800c0dc:	4610      	mov	r0, r2
 800c0de:	4619      	mov	r1, r3
 800c0e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c0ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c0ee:	f7f4 f8df 	bl	80002b0 <__aeabi_uldivmod>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	; (800c134 <HAL_RCC_GetSysClockFreq+0x458>)
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	0f1b      	lsrs	r3, r3, #28
 800c102:	f003 0307 	and.w	r3, r3, #7
 800c106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800c10a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c10e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c112:	fbb2 f3f3 	udiv	r3, r2, r3
 800c116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c11a:	e003      	b.n	800c124 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c11c:	4b06      	ldr	r3, [pc, #24]	; (800c138 <HAL_RCC_GetSysClockFreq+0x45c>)
 800c11e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c122:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	37b8      	adds	r7, #184	; 0xb8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c132:	bf00      	nop
 800c134:	40023800 	.word	0x40023800
 800c138:	00f42400 	.word	0x00f42400

0800c13c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d101      	bne.n	800c14e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e28d      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 8083 	beq.w	800c262 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c15c:	4b94      	ldr	r3, [pc, #592]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	f003 030c 	and.w	r3, r3, #12
 800c164:	2b04      	cmp	r3, #4
 800c166:	d019      	beq.n	800c19c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c168:	4b91      	ldr	r3, [pc, #580]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c170:	2b08      	cmp	r3, #8
 800c172:	d106      	bne.n	800c182 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c174:	4b8e      	ldr	r3, [pc, #568]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c17c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c180:	d00c      	beq.n	800c19c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c182:	4b8b      	ldr	r3, [pc, #556]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c18a:	2b0c      	cmp	r3, #12
 800c18c:	d112      	bne.n	800c1b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c18e:	4b88      	ldr	r3, [pc, #544]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c19a:	d10b      	bne.n	800c1b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c19c:	4b84      	ldr	r3, [pc, #528]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d05b      	beq.n	800c260 <HAL_RCC_OscConfig+0x124>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d157      	bne.n	800c260 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e25a      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1bc:	d106      	bne.n	800c1cc <HAL_RCC_OscConfig+0x90>
 800c1be:	4b7c      	ldr	r3, [pc, #496]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a7b      	ldr	r2, [pc, #492]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c1c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	e01d      	b.n	800c208 <HAL_RCC_OscConfig+0xcc>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1d4:	d10c      	bne.n	800c1f0 <HAL_RCC_OscConfig+0xb4>
 800c1d6:	4b76      	ldr	r3, [pc, #472]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a75      	ldr	r2, [pc, #468]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c1dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	4b73      	ldr	r3, [pc, #460]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a72      	ldr	r2, [pc, #456]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c1e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	e00b      	b.n	800c208 <HAL_RCC_OscConfig+0xcc>
 800c1f0:	4b6f      	ldr	r3, [pc, #444]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a6e      	ldr	r2, [pc, #440]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c1f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1fa:	6013      	str	r3, [r2, #0]
 800c1fc:	4b6c      	ldr	r3, [pc, #432]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a6b      	ldr	r2, [pc, #428]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d013      	beq.n	800c238 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c210:	f7fa fd44 	bl	8006c9c <HAL_GetTick>
 800c214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c216:	e008      	b.n	800c22a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c218:	f7fa fd40 	bl	8006c9c <HAL_GetTick>
 800c21c:	4602      	mov	r2, r0
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	2b64      	cmp	r3, #100	; 0x64
 800c224:	d901      	bls.n	800c22a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c226:	2303      	movs	r3, #3
 800c228:	e21f      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c22a:	4b61      	ldr	r3, [pc, #388]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0f0      	beq.n	800c218 <HAL_RCC_OscConfig+0xdc>
 800c236:	e014      	b.n	800c262 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c238:	f7fa fd30 	bl	8006c9c <HAL_GetTick>
 800c23c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c23e:	e008      	b.n	800c252 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c240:	f7fa fd2c 	bl	8006c9c <HAL_GetTick>
 800c244:	4602      	mov	r2, r0
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	2b64      	cmp	r3, #100	; 0x64
 800c24c:	d901      	bls.n	800c252 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e20b      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c252:	4b57      	ldr	r3, [pc, #348]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1f0      	bne.n	800c240 <HAL_RCC_OscConfig+0x104>
 800c25e:	e000      	b.n	800c262 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f003 0302 	and.w	r3, r3, #2
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d06f      	beq.n	800c34e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c26e:	4b50      	ldr	r3, [pc, #320]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	f003 030c 	and.w	r3, r3, #12
 800c276:	2b00      	cmp	r3, #0
 800c278:	d017      	beq.n	800c2aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c27a:	4b4d      	ldr	r3, [pc, #308]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c282:	2b08      	cmp	r3, #8
 800c284:	d105      	bne.n	800c292 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c286:	4b4a      	ldr	r3, [pc, #296]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00b      	beq.n	800c2aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c292:	4b47      	ldr	r3, [pc, #284]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c29a:	2b0c      	cmp	r3, #12
 800c29c:	d11c      	bne.n	800c2d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c29e:	4b44      	ldr	r3, [pc, #272]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d116      	bne.n	800c2d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c2aa:	4b41      	ldr	r3, [pc, #260]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 0302 	and.w	r3, r3, #2
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d005      	beq.n	800c2c2 <HAL_RCC_OscConfig+0x186>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d001      	beq.n	800c2c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e1d3      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2c2:	4b3b      	ldr	r3, [pc, #236]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	00db      	lsls	r3, r3, #3
 800c2d0:	4937      	ldr	r1, [pc, #220]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c2d6:	e03a      	b.n	800c34e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d020      	beq.n	800c322 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c2e0:	4b34      	ldr	r3, [pc, #208]	; (800c3b4 <HAL_RCC_OscConfig+0x278>)
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2e6:	f7fa fcd9 	bl	8006c9c <HAL_GetTick>
 800c2ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c2ec:	e008      	b.n	800c300 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c2ee:	f7fa fcd5 	bl	8006c9c <HAL_GetTick>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d901      	bls.n	800c300 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e1b4      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c300:	4b2b      	ldr	r3, [pc, #172]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0302 	and.w	r3, r3, #2
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d0f0      	beq.n	800c2ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c30c:	4b28      	ldr	r3, [pc, #160]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	00db      	lsls	r3, r3, #3
 800c31a:	4925      	ldr	r1, [pc, #148]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c31c:	4313      	orrs	r3, r2
 800c31e:	600b      	str	r3, [r1, #0]
 800c320:	e015      	b.n	800c34e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c322:	4b24      	ldr	r3, [pc, #144]	; (800c3b4 <HAL_RCC_OscConfig+0x278>)
 800c324:	2200      	movs	r2, #0
 800c326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c328:	f7fa fcb8 	bl	8006c9c <HAL_GetTick>
 800c32c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c32e:	e008      	b.n	800c342 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c330:	f7fa fcb4 	bl	8006c9c <HAL_GetTick>
 800c334:	4602      	mov	r2, r0
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d901      	bls.n	800c342 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	e193      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c342:	4b1b      	ldr	r3, [pc, #108]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f003 0302 	and.w	r3, r3, #2
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1f0      	bne.n	800c330 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 0308 	and.w	r3, r3, #8
 800c356:	2b00      	cmp	r3, #0
 800c358:	d036      	beq.n	800c3c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d016      	beq.n	800c390 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c362:	4b15      	ldr	r3, [pc, #84]	; (800c3b8 <HAL_RCC_OscConfig+0x27c>)
 800c364:	2201      	movs	r2, #1
 800c366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c368:	f7fa fc98 	bl	8006c9c <HAL_GetTick>
 800c36c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c36e:	e008      	b.n	800c382 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c370:	f7fa fc94 	bl	8006c9c <HAL_GetTick>
 800c374:	4602      	mov	r2, r0
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d901      	bls.n	800c382 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c37e:	2303      	movs	r3, #3
 800c380:	e173      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c382:	4b0b      	ldr	r3, [pc, #44]	; (800c3b0 <HAL_RCC_OscConfig+0x274>)
 800c384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c386:	f003 0302 	and.w	r3, r3, #2
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d0f0      	beq.n	800c370 <HAL_RCC_OscConfig+0x234>
 800c38e:	e01b      	b.n	800c3c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c390:	4b09      	ldr	r3, [pc, #36]	; (800c3b8 <HAL_RCC_OscConfig+0x27c>)
 800c392:	2200      	movs	r2, #0
 800c394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c396:	f7fa fc81 	bl	8006c9c <HAL_GetTick>
 800c39a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c39c:	e00e      	b.n	800c3bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c39e:	f7fa fc7d 	bl	8006c9c <HAL_GetTick>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	1ad3      	subs	r3, r2, r3
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d907      	bls.n	800c3bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c3ac:	2303      	movs	r3, #3
 800c3ae:	e15c      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
 800c3b0:	40023800 	.word	0x40023800
 800c3b4:	42470000 	.word	0x42470000
 800c3b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3bc:	4b8a      	ldr	r3, [pc, #552]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c3be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3c0:	f003 0302 	and.w	r3, r3, #2
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1ea      	bne.n	800c39e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 0304 	and.w	r3, r3, #4
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 8097 	beq.w	800c504 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c3da:	4b83      	ldr	r3, [pc, #524]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10f      	bne.n	800c406 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60bb      	str	r3, [r7, #8]
 800c3ea:	4b7f      	ldr	r3, [pc, #508]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ee:	4a7e      	ldr	r2, [pc, #504]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c3f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3f4:	6413      	str	r3, [r2, #64]	; 0x40
 800c3f6:	4b7c      	ldr	r3, [pc, #496]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3fe:	60bb      	str	r3, [r7, #8]
 800c400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c402:	2301      	movs	r3, #1
 800c404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c406:	4b79      	ldr	r3, [pc, #484]	; (800c5ec <HAL_RCC_OscConfig+0x4b0>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d118      	bne.n	800c444 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c412:	4b76      	ldr	r3, [pc, #472]	; (800c5ec <HAL_RCC_OscConfig+0x4b0>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a75      	ldr	r2, [pc, #468]	; (800c5ec <HAL_RCC_OscConfig+0x4b0>)
 800c418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c41c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c41e:	f7fa fc3d 	bl	8006c9c <HAL_GetTick>
 800c422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c424:	e008      	b.n	800c438 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c426:	f7fa fc39 	bl	8006c9c <HAL_GetTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	2b02      	cmp	r3, #2
 800c432:	d901      	bls.n	800c438 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c434:	2303      	movs	r3, #3
 800c436:	e118      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c438:	4b6c      	ldr	r3, [pc, #432]	; (800c5ec <HAL_RCC_OscConfig+0x4b0>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c440:	2b00      	cmp	r3, #0
 800c442:	d0f0      	beq.n	800c426 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d106      	bne.n	800c45a <HAL_RCC_OscConfig+0x31e>
 800c44c:	4b66      	ldr	r3, [pc, #408]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c450:	4a65      	ldr	r2, [pc, #404]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c452:	f043 0301 	orr.w	r3, r3, #1
 800c456:	6713      	str	r3, [r2, #112]	; 0x70
 800c458:	e01c      	b.n	800c494 <HAL_RCC_OscConfig+0x358>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	2b05      	cmp	r3, #5
 800c460:	d10c      	bne.n	800c47c <HAL_RCC_OscConfig+0x340>
 800c462:	4b61      	ldr	r3, [pc, #388]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c466:	4a60      	ldr	r2, [pc, #384]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c468:	f043 0304 	orr.w	r3, r3, #4
 800c46c:	6713      	str	r3, [r2, #112]	; 0x70
 800c46e:	4b5e      	ldr	r3, [pc, #376]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c472:	4a5d      	ldr	r2, [pc, #372]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c474:	f043 0301 	orr.w	r3, r3, #1
 800c478:	6713      	str	r3, [r2, #112]	; 0x70
 800c47a:	e00b      	b.n	800c494 <HAL_RCC_OscConfig+0x358>
 800c47c:	4b5a      	ldr	r3, [pc, #360]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c480:	4a59      	ldr	r2, [pc, #356]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c482:	f023 0301 	bic.w	r3, r3, #1
 800c486:	6713      	str	r3, [r2, #112]	; 0x70
 800c488:	4b57      	ldr	r3, [pc, #348]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c48c:	4a56      	ldr	r2, [pc, #344]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c48e:	f023 0304 	bic.w	r3, r3, #4
 800c492:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d015      	beq.n	800c4c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c49c:	f7fa fbfe 	bl	8006c9c <HAL_GetTick>
 800c4a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4a2:	e00a      	b.n	800c4ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4a4:	f7fa fbfa 	bl	8006c9c <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d901      	bls.n	800c4ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e0d7      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4ba:	4b4b      	ldr	r3, [pc, #300]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4be:	f003 0302 	and.w	r3, r3, #2
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d0ee      	beq.n	800c4a4 <HAL_RCC_OscConfig+0x368>
 800c4c6:	e014      	b.n	800c4f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4c8:	f7fa fbe8 	bl	8006c9c <HAL_GetTick>
 800c4cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c4ce:	e00a      	b.n	800c4e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4d0:	f7fa fbe4 	bl	8006c9c <HAL_GetTick>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d901      	bls.n	800c4e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e0c1      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c4e6:	4b40      	ldr	r3, [pc, #256]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ea:	f003 0302 	and.w	r3, r3, #2
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1ee      	bne.n	800c4d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c4f2:	7dfb      	ldrb	r3, [r7, #23]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d105      	bne.n	800c504 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c4f8:	4b3b      	ldr	r3, [pc, #236]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fc:	4a3a      	ldr	r2, [pc, #232]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c4fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c502:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	699b      	ldr	r3, [r3, #24]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 80ad 	beq.w	800c668 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c50e:	4b36      	ldr	r3, [pc, #216]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	f003 030c 	and.w	r3, r3, #12
 800c516:	2b08      	cmp	r3, #8
 800c518:	d060      	beq.n	800c5dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	699b      	ldr	r3, [r3, #24]
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d145      	bne.n	800c5ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c522:	4b33      	ldr	r3, [pc, #204]	; (800c5f0 <HAL_RCC_OscConfig+0x4b4>)
 800c524:	2200      	movs	r2, #0
 800c526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c528:	f7fa fbb8 	bl	8006c9c <HAL_GetTick>
 800c52c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c52e:	e008      	b.n	800c542 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c530:	f7fa fbb4 	bl	8006c9c <HAL_GetTick>
 800c534:	4602      	mov	r2, r0
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d901      	bls.n	800c542 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c53e:	2303      	movs	r3, #3
 800c540:	e093      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c542:	4b29      	ldr	r3, [pc, #164]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1f0      	bne.n	800c530 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	69da      	ldr	r2, [r3, #28]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	431a      	orrs	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55c:	019b      	lsls	r3, r3, #6
 800c55e:	431a      	orrs	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c564:	085b      	lsrs	r3, r3, #1
 800c566:	3b01      	subs	r3, #1
 800c568:	041b      	lsls	r3, r3, #16
 800c56a:	431a      	orrs	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c570:	061b      	lsls	r3, r3, #24
 800c572:	431a      	orrs	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c578:	071b      	lsls	r3, r3, #28
 800c57a:	491b      	ldr	r1, [pc, #108]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c57c:	4313      	orrs	r3, r2
 800c57e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c580:	4b1b      	ldr	r3, [pc, #108]	; (800c5f0 <HAL_RCC_OscConfig+0x4b4>)
 800c582:	2201      	movs	r2, #1
 800c584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c586:	f7fa fb89 	bl	8006c9c <HAL_GetTick>
 800c58a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c58c:	e008      	b.n	800c5a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c58e:	f7fa fb85 	bl	8006c9c <HAL_GetTick>
 800c592:	4602      	mov	r2, r0
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d901      	bls.n	800c5a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c59c:	2303      	movs	r3, #3
 800c59e:	e064      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5a0:	4b11      	ldr	r3, [pc, #68]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d0f0      	beq.n	800c58e <HAL_RCC_OscConfig+0x452>
 800c5ac:	e05c      	b.n	800c668 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c5ae:	4b10      	ldr	r3, [pc, #64]	; (800c5f0 <HAL_RCC_OscConfig+0x4b4>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5b4:	f7fa fb72 	bl	8006c9c <HAL_GetTick>
 800c5b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5ba:	e008      	b.n	800c5ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c5bc:	f7fa fb6e 	bl	8006c9c <HAL_GetTick>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d901      	bls.n	800c5ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	e04d      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5ce:	4b06      	ldr	r3, [pc, #24]	; (800c5e8 <HAL_RCC_OscConfig+0x4ac>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1f0      	bne.n	800c5bc <HAL_RCC_OscConfig+0x480>
 800c5da:	e045      	b.n	800c668 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	699b      	ldr	r3, [r3, #24]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d107      	bne.n	800c5f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e040      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
 800c5e8:	40023800 	.word	0x40023800
 800c5ec:	40007000 	.word	0x40007000
 800c5f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c5f4:	4b1f      	ldr	r3, [pc, #124]	; (800c674 <HAL_RCC_OscConfig+0x538>)
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	699b      	ldr	r3, [r3, #24]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d030      	beq.n	800c664 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d129      	bne.n	800c664 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d122      	bne.n	800c664 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c624:	4013      	ands	r3, r2
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c62a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d119      	bne.n	800c664 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63a:	085b      	lsrs	r3, r3, #1
 800c63c:	3b01      	subs	r3, #1
 800c63e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c640:	429a      	cmp	r2, r3
 800c642:	d10f      	bne.n	800c664 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c650:	429a      	cmp	r2, r3
 800c652:	d107      	bne.n	800c664 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c65e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c660:	429a      	cmp	r2, r3
 800c662:	d001      	beq.n	800c668 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	e000      	b.n	800c66a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3718      	adds	r7, #24
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	40023800 	.word	0x40023800

0800c678 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d101      	bne.n	800c68a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e083      	b.n	800c792 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	7f5b      	ldrb	r3, [r3, #29]
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b00      	cmp	r3, #0
 800c692:	d105      	bne.n	800c6a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7fa f85e 	bl	800675c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2202      	movs	r2, #2
 800c6a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	22ca      	movs	r2, #202	; 0xca
 800c6ac:	625a      	str	r2, [r3, #36]	; 0x24
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2253      	movs	r2, #83	; 0x53
 800c6b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 faa8 	bl	800cc0c <RTC_EnterInitMode>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d008      	beq.n	800c6d4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	22ff      	movs	r2, #255	; 0xff
 800c6c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2204      	movs	r2, #4
 800c6ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e05e      	b.n	800c792 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	6812      	ldr	r2, [r2, #0]
 800c6de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6e6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	6899      	ldr	r1, [r3, #8]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	431a      	orrs	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	695b      	ldr	r3, [r3, #20]
 800c6fc:	431a      	orrs	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	430a      	orrs	r2, r1
 800c704:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	68d2      	ldr	r2, [r2, #12]
 800c70e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	6919      	ldr	r1, [r3, #16]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	041a      	lsls	r2, r3, #16
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	430a      	orrs	r2, r1
 800c722:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68da      	ldr	r2, [r3, #12]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c732:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	f003 0320 	and.w	r3, r3, #32
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10e      	bne.n	800c760 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 fa3a 	bl	800cbbc <HAL_RTC_WaitForSynchro>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d008      	beq.n	800c760 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	22ff      	movs	r2, #255	; 0xff
 800c754:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2204      	movs	r2, #4
 800c75a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	e018      	b.n	800c792 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c76e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	699a      	ldr	r2, [r3, #24]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	430a      	orrs	r2, r1
 800c780:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	22ff      	movs	r2, #255	; 0xff
 800c788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c790:	2300      	movs	r3, #0
  }
}
 800c792:	4618      	mov	r0, r3
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c79a:	b590      	push	{r4, r7, lr}
 800c79c:	b087      	sub	sp, #28
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	60b9      	str	r1, [r7, #8]
 800c7a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	7f1b      	ldrb	r3, [r3, #28]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d101      	bne.n	800c7b6 <HAL_RTC_SetTime+0x1c>
 800c7b2:	2302      	movs	r3, #2
 800c7b4:	e0aa      	b.n	800c90c <HAL_RTC_SetTime+0x172>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d126      	bne.n	800c816 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d102      	bne.n	800c7dc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f000 fa3f 	bl	800cc64 <RTC_ByteToBcd2>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	785b      	ldrb	r3, [r3, #1]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f000 fa38 	bl	800cc64 <RTC_ByteToBcd2>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c7f8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	789b      	ldrb	r3, [r3, #2]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 fa30 	bl	800cc64 <RTC_ByteToBcd2>
 800c804:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c806:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	78db      	ldrb	r3, [r3, #3]
 800c80e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c810:	4313      	orrs	r3, r2
 800c812:	617b      	str	r3, [r7, #20]
 800c814:	e018      	b.n	800c848 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c820:	2b00      	cmp	r3, #0
 800c822:	d102      	bne.n	800c82a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2200      	movs	r2, #0
 800c828:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	785b      	ldrb	r3, [r3, #1]
 800c834:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c836:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c83c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	78db      	ldrb	r3, [r3, #3]
 800c842:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c844:	4313      	orrs	r3, r2
 800c846:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	22ca      	movs	r2, #202	; 0xca
 800c84e:	625a      	str	r2, [r3, #36]	; 0x24
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2253      	movs	r2, #83	; 0x53
 800c856:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f000 f9d7 	bl	800cc0c <RTC_EnterInitMode>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00b      	beq.n	800c87c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	22ff      	movs	r2, #255	; 0xff
 800c86a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2204      	movs	r2, #4
 800c870:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2200      	movs	r2, #0
 800c876:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	e047      	b.n	800c90c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c886:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c88a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	689a      	ldr	r2, [r3, #8]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c89a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6899      	ldr	r1, [r3, #8]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	68da      	ldr	r2, [r3, #12]
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	431a      	orrs	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	68da      	ldr	r2, [r3, #12]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c8c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	f003 0320 	and.w	r3, r3, #32
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d111      	bne.n	800c8f6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c8d2:	68f8      	ldr	r0, [r7, #12]
 800c8d4:	f000 f972 	bl	800cbbc <HAL_RTC_WaitForSynchro>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00b      	beq.n	800c8f6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	22ff      	movs	r2, #255	; 0xff
 800c8e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e00a      	b.n	800c90c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	22ff      	movs	r2, #255	; 0xff
 800c8fc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2201      	movs	r2, #1
 800c902:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c90a:	2300      	movs	r3, #0
  }
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	371c      	adds	r7, #28
 800c910:	46bd      	mov	sp, r7
 800c912:	bd90      	pop	{r4, r7, pc}

0800c914 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c920:	2300      	movs	r3, #0
 800c922:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c946:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c94a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	0c1b      	lsrs	r3, r3, #16
 800c950:	b2db      	uxtb	r3, r3
 800c952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c956:	b2da      	uxtb	r2, r3
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	0a1b      	lsrs	r3, r3, #8
 800c960:	b2db      	uxtb	r3, r3
 800c962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c966:	b2da      	uxtb	r2, r3
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c974:	b2da      	uxtb	r2, r3
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	0c1b      	lsrs	r3, r3, #16
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c984:	b2da      	uxtb	r2, r3
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d11a      	bne.n	800c9c6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	4618      	mov	r0, r3
 800c996:	f000 f983 	bl	800cca0 <RTC_Bcd2ToByte>
 800c99a:	4603      	mov	r3, r0
 800c99c:	461a      	mov	r2, r3
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	785b      	ldrb	r3, [r3, #1]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f97a 	bl	800cca0 <RTC_Bcd2ToByte>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	789b      	ldrb	r3, [r3, #2]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 f971 	bl	800cca0 <RTC_Bcd2ToByte>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c9d0:	b590      	push	{r4, r7, lr}
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	7f1b      	ldrb	r3, [r3, #28]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d101      	bne.n	800c9ec <HAL_RTC_SetDate+0x1c>
 800c9e8:	2302      	movs	r3, #2
 800c9ea:	e094      	b.n	800cb16 <HAL_RTC_SetDate+0x146>
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2202      	movs	r2, #2
 800c9f6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10e      	bne.n	800ca1c <HAL_RTC_SetDate+0x4c>
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	785b      	ldrb	r3, [r3, #1]
 800ca02:	f003 0310 	and.w	r3, r3, #16
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d008      	beq.n	800ca1c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	785b      	ldrb	r3, [r3, #1]
 800ca0e:	f023 0310 	bic.w	r3, r3, #16
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	330a      	adds	r3, #10
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d11c      	bne.n	800ca5c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	78db      	ldrb	r3, [r3, #3]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f000 f91c 	bl	800cc64 <RTC_ByteToBcd2>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	785b      	ldrb	r3, [r3, #1]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 f915 	bl	800cc64 <RTC_ByteToBcd2>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ca3e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	789b      	ldrb	r3, [r3, #2]
 800ca44:	4618      	mov	r0, r3
 800ca46:	f000 f90d 	bl	800cc64 <RTC_ByteToBcd2>
 800ca4a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ca4c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ca56:	4313      	orrs	r3, r2
 800ca58:	617b      	str	r3, [r7, #20]
 800ca5a:	e00e      	b.n	800ca7a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	78db      	ldrb	r3, [r3, #3]
 800ca60:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	785b      	ldrb	r3, [r3, #1]
 800ca66:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ca68:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800ca6e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ca76:	4313      	orrs	r3, r2
 800ca78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	22ca      	movs	r2, #202	; 0xca
 800ca80:	625a      	str	r2, [r3, #36]	; 0x24
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2253      	movs	r2, #83	; 0x53
 800ca88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f000 f8be 	bl	800cc0c <RTC_EnterInitMode>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00b      	beq.n	800caae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	22ff      	movs	r2, #255	; 0xff
 800ca9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2204      	movs	r2, #4
 800caa2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2200      	movs	r2, #0
 800caa8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800caaa:	2301      	movs	r3, #1
 800caac:	e033      	b.n	800cb16 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cab8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cabc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68da      	ldr	r2, [r3, #12]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cacc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	f003 0320 	and.w	r3, r3, #32
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d111      	bne.n	800cb00 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f000 f86d 	bl	800cbbc <HAL_RTC_WaitForSynchro>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00b      	beq.n	800cb00 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	22ff      	movs	r2, #255	; 0xff
 800caee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2204      	movs	r2, #4
 800caf4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2200      	movs	r2, #0
 800cafa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cafc:	2301      	movs	r3, #1
 800cafe:	e00a      	b.n	800cb16 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	22ff      	movs	r2, #255	; 0xff
 800cb06:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2200      	movs	r2, #0
 800cb12:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800cb14:	2300      	movs	r3, #0
  }
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	371c      	adds	r7, #28
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd90      	pop	{r4, r7, pc}

0800cb1e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b086      	sub	sp, #24
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	60f8      	str	r0, [r7, #12]
 800cb26:	60b9      	str	r1, [r7, #8]
 800cb28:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cb38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cb3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	0c1b      	lsrs	r3, r3, #16
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	0a1b      	lsrs	r3, r3, #8
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	f003 031f 	and.w	r3, r3, #31
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	0b5b      	lsrs	r3, r3, #13
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	f003 0307 	and.w	r3, r3, #7
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d11a      	bne.n	800cbb2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	78db      	ldrb	r3, [r3, #3]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 f88d 	bl	800cca0 <RTC_Bcd2ToByte>
 800cb86:	4603      	mov	r3, r0
 800cb88:	461a      	mov	r2, r3
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	785b      	ldrb	r3, [r3, #1]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 f884 	bl	800cca0 <RTC_Bcd2ToByte>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	789b      	ldrb	r3, [r3, #2]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 f87b 	bl	800cca0 <RTC_Bcd2ToByte>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	461a      	mov	r2, r3
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68da      	ldr	r2, [r3, #12]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cbd6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cbd8:	f7fa f860 	bl	8006c9c <HAL_GetTick>
 800cbdc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cbde:	e009      	b.n	800cbf4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cbe0:	f7fa f85c 	bl	8006c9c <HAL_GetTick>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbee:	d901      	bls.n	800cbf4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cbf0:	2303      	movs	r3, #3
 800cbf2:	e007      	b.n	800cc04 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	f003 0320 	and.w	r3, r3, #32
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d0ee      	beq.n	800cbe0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc14:	2300      	movs	r3, #0
 800cc16:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d119      	bne.n	800cc5a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc2e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cc30:	f7fa f834 	bl	8006c9c <HAL_GetTick>
 800cc34:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cc36:	e009      	b.n	800cc4c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cc38:	f7fa f830 	bl	8006c9c <HAL_GetTick>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc46:	d901      	bls.n	800cc4c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800cc48:	2303      	movs	r3, #3
 800cc4a:	e007      	b.n	800cc5c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d0ee      	beq.n	800cc38 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800cc72:	e005      	b.n	800cc80 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	3301      	adds	r3, #1
 800cc78:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800cc7a:	79fb      	ldrb	r3, [r7, #7]
 800cc7c:	3b0a      	subs	r3, #10
 800cc7e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	2b09      	cmp	r3, #9
 800cc84:	d8f6      	bhi.n	800cc74 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	011b      	lsls	r3, r3, #4
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	79fb      	ldrb	r3, [r7, #7]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	b2db      	uxtb	r3, r3
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ccae:	79fb      	ldrb	r3, [r7, #7]
 800ccb0:	091b      	lsrs	r3, r3, #4
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4413      	add	r3, r2
 800ccbc:	005b      	lsls	r3, r3, #1
 800ccbe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	f003 030f 	and.w	r3, r3, #15
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	4413      	add	r3, r2
 800ccce:	b2db      	uxtb	r3, r3
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b087      	sub	sp, #28
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800cce8:	2300      	movs	r3, #0
 800ccea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	3350      	adds	r3, #80	; 0x50
 800ccf2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	601a      	str	r2, [r3, #0]
}
 800cd04:	bf00      	nop
 800cd06:	371c      	adds	r7, #28
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3350      	adds	r3, #80	; 0x50
 800cd24:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e022      	b.n	800cd98 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d105      	bne.n	800cd6a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7f9 fd23 	bl	80067b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2203      	movs	r2, #3
 800cd6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f814 	bl	800cda0 <HAL_SD_InitCard>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d001      	beq.n	800cd82 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e00a      	b.n	800cd98 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2201      	movs	r2, #1
 800cd92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cda0:	b5b0      	push	{r4, r5, r7, lr}
 800cda2:	b08e      	sub	sp, #56	; 0x38
 800cda4:	af04      	add	r7, sp, #16
 800cda6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cdac:	2300      	movs	r3, #0
 800cdae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cdbc:	2376      	movs	r3, #118	; 0x76
 800cdbe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681d      	ldr	r5, [r3, #0]
 800cdc4:	466c      	mov	r4, sp
 800cdc6:	f107 0314 	add.w	r3, r7, #20
 800cdca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cdce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cdd2:	f107 0308 	add.w	r3, r7, #8
 800cdd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdd8:	4628      	mov	r0, r5
 800cdda:	f002 f94f 	bl	800f07c <SDIO_Init>
 800cdde:	4603      	mov	r3, r0
 800cde0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cde4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cdec:	2301      	movs	r3, #1
 800cdee:	e04c      	b.n	800ce8a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cdf0:	4b28      	ldr	r3, [pc, #160]	; (800ce94 <HAL_SD_InitCard+0xf4>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f002 f987 	bl	800f10e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ce00:	4b24      	ldr	r3, [pc, #144]	; (800ce94 <HAL_SD_InitCard+0xf4>)
 800ce02:	2201      	movs	r2, #1
 800ce04:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f001 fb54 	bl	800e4b4 <SD_PowerON>
 800ce0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce0e:	6a3b      	ldr	r3, [r7, #32]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00b      	beq.n	800ce2c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	431a      	orrs	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e02e      	b.n	800ce8a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f001 fa73 	bl	800e318 <SD_InitCard>
 800ce32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce34:	6a3b      	ldr	r3, [r7, #32]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00b      	beq.n	800ce52 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	431a      	orrs	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e01b      	b.n	800ce8a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f002 f9ea 	bl	800f234 <SDMMC_CmdBlockLength>
 800ce60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00f      	beq.n	800ce88 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a0a      	ldr	r2, [pc, #40]	; (800ce98 <HAL_SD_InitCard+0xf8>)
 800ce6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce74:	6a3b      	ldr	r3, [r7, #32]
 800ce76:	431a      	orrs	r2, r3
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ce84:	2301      	movs	r3, #1
 800ce86:	e000      	b.n	800ce8a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3728      	adds	r7, #40	; 0x28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bdb0      	pop	{r4, r5, r7, pc}
 800ce92:	bf00      	nop
 800ce94:	422580a0 	.word	0x422580a0
 800ce98:	004005ff 	.word	0x004005ff

0800ce9c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b092      	sub	sp, #72	; 0x48
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
 800cea8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ceaa:	f7f9 fef7 	bl	8006c9c <HAL_GetTick>
 800ceae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d107      	bne.n	800cece <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	e1bd      	b.n	800d24a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	f040 81b0 	bne.w	800d23c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	441a      	add	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d907      	bls.n	800cf00 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	e1a4      	b.n	800d24a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2203      	movs	r2, #3
 800cf04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d002      	beq.n	800cf1e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1a:	025b      	lsls	r3, r3, #9
 800cf1c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf1e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf22:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	025b      	lsls	r3, r3, #9
 800cf28:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cf2a:	2390      	movs	r3, #144	; 0x90
 800cf2c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cf2e:	2302      	movs	r3, #2
 800cf30:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800cf36:	2301      	movs	r3, #1
 800cf38:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f107 0214 	add.w	r2, r7, #20
 800cf42:	4611      	mov	r1, r2
 800cf44:	4618      	mov	r0, r3
 800cf46:	f002 f949 	bl	800f1dc <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d90a      	bls.n	800cf66 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2202      	movs	r2, #2
 800cf54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f002 f9ad 	bl	800f2bc <SDMMC_CmdReadMultiBlock>
 800cf62:	6478      	str	r0, [r7, #68]	; 0x44
 800cf64:	e009      	b.n	800cf7a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf72:	4618      	mov	r0, r3
 800cf74:	f002 f980 	bl	800f278 <SDMMC_CmdReadSingleBlock>
 800cf78:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d012      	beq.n	800cfa6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a7a      	ldr	r2, [pc, #488]	; (800d170 <HAL_SD_ReadBlocks+0x2d4>)
 800cf86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e151      	b.n	800d24a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800cfaa:	e061      	b.n	800d070 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d03c      	beq.n	800d034 <HAL_SD_ReadBlocks+0x198>
 800cfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d039      	beq.n	800d034 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	643b      	str	r3, [r7, #64]	; 0x40
 800cfc4:	e033      	b.n	800d02e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f002 f881 	bl	800f0d2 <SDIO_ReadFIFO>
 800cfd0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfdc:	3301      	adds	r3, #1
 800cfde:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cfe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe8:	0a1b      	lsrs	r3, r3, #8
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff2:	3301      	adds	r3, #1
 800cff4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff8:	3b01      	subs	r3, #1
 800cffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffe:	0c1b      	lsrs	r3, r3, #16
 800d000:	b2da      	uxtb	r2, r3
 800d002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d004:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d008:	3301      	adds	r3, #1
 800d00a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d00e:	3b01      	subs	r3, #1
 800d010:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	0e1b      	lsrs	r3, r3, #24
 800d016:	b2da      	uxtb	r2, r3
 800d018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d01a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d01e:	3301      	adds	r3, #1
 800d020:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d024:	3b01      	subs	r3, #1
 800d026:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800d028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d02a:	3301      	adds	r3, #1
 800d02c:	643b      	str	r3, [r7, #64]	; 0x40
 800d02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d030:	2b07      	cmp	r3, #7
 800d032:	d9c8      	bls.n	800cfc6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d034:	f7f9 fe32 	bl	8006c9c <HAL_GetTick>
 800d038:	4602      	mov	r2, r0
 800d03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d040:	429a      	cmp	r2, r3
 800d042:	d902      	bls.n	800d04a <HAL_SD_ReadBlocks+0x1ae>
 800d044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d046:	2b00      	cmp	r3, #0
 800d048:	d112      	bne.n	800d070 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a48      	ldr	r2, [pc, #288]	; (800d170 <HAL_SD_ReadBlocks+0x2d4>)
 800d050:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d056:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2201      	movs	r2, #1
 800d062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2200      	movs	r2, #0
 800d06a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d06c:	2303      	movs	r3, #3
 800d06e:	e0ec      	b.n	800d24a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d076:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d096      	beq.n	800cfac <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d022      	beq.n	800d0d2 <HAL_SD_ReadBlocks+0x236>
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d91f      	bls.n	800d0d2 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d096:	2b03      	cmp	r3, #3
 800d098:	d01b      	beq.n	800d0d2 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f002 f972 	bl	800f388 <SDMMC_CmdStopTransfer>
 800d0a4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d0a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d012      	beq.n	800d0d2 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a2f      	ldr	r2, [pc, #188]	; (800d170 <HAL_SD_ReadBlocks+0x2d4>)
 800d0b2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ba:	431a      	orrs	r2, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e0bb      	b.n	800d24a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d8:	f003 0308 	and.w	r3, r3, #8
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d012      	beq.n	800d106 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a22      	ldr	r2, [pc, #136]	; (800d170 <HAL_SD_ReadBlocks+0x2d4>)
 800d0e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ec:	f043 0208 	orr.w	r2, r3, #8
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	e0a1      	b.n	800d24a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d10c:	f003 0302 	and.w	r3, r3, #2
 800d110:	2b00      	cmp	r3, #0
 800d112:	d012      	beq.n	800d13a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a15      	ldr	r2, [pc, #84]	; (800d170 <HAL_SD_ReadBlocks+0x2d4>)
 800d11a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d120:	f043 0202 	orr.w	r2, r3, #2
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	e087      	b.n	800d24a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d140:	f003 0320 	and.w	r3, r3, #32
 800d144:	2b00      	cmp	r3, #0
 800d146:	d064      	beq.n	800d212 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a08      	ldr	r2, [pc, #32]	; (800d170 <HAL_SD_ReadBlocks+0x2d4>)
 800d14e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d154:	f043 0220 	orr.w	r2, r3, #32
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2200      	movs	r2, #0
 800d168:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	e06d      	b.n	800d24a <HAL_SD_ReadBlocks+0x3ae>
 800d16e:	bf00      	nop
 800d170:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4618      	mov	r0, r3
 800d17a:	f001 ffaa 	bl	800f0d2 <SDIO_ReadFIFO>
 800d17e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	b2da      	uxtb	r2, r3
 800d184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d186:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d18a:	3301      	adds	r3, #1
 800d18c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d190:	3b01      	subs	r3, #1
 800d192:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	0a1b      	lsrs	r3, r3, #8
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d19c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ac:	0c1b      	lsrs	r3, r3, #16
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	0e1b      	lsrs	r3, r3, #24
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d1d6:	f7f9 fd61 	bl	8006c9c <HAL_GetTick>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1de:	1ad3      	subs	r3, r2, r3
 800d1e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d902      	bls.n	800d1ec <HAL_SD_ReadBlocks+0x350>
 800d1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d112      	bne.n	800d212 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a18      	ldr	r2, [pc, #96]	; (800d254 <HAL_SD_ReadBlocks+0x3b8>)
 800d1f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2200      	movs	r2, #0
 800d20c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d20e:	2301      	movs	r3, #1
 800d210:	e01b      	b.n	800d24a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d002      	beq.n	800d226 <HAL_SD_ReadBlocks+0x38a>
 800d220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1a6      	bne.n	800d174 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f240 523a 	movw	r2, #1338	; 0x53a
 800d22e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d238:	2300      	movs	r3, #0
 800d23a:	e006      	b.n	800d24a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d240:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d248:	2301      	movs	r3, #1
  }
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3748      	adds	r7, #72	; 0x48
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop
 800d254:	004005ff 	.word	0x004005ff

0800d258 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b092      	sub	sp, #72	; 0x48
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
 800d264:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d266:	f7f9 fd19 	bl	8006c9c <HAL_GetTick>
 800d26a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d107      	bne.n	800d28a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d286:	2301      	movs	r3, #1
 800d288:	e165      	b.n	800d556 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2b01      	cmp	r3, #1
 800d294:	f040 8158 	bne.w	800d548 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2200      	movs	r2, #0
 800d29c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d29e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	441a      	add	r2, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d907      	bls.n	800d2bc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e14c      	b.n	800d556 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2203      	movs	r2, #3
 800d2c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d002      	beq.n	800d2da <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d6:	025b      	lsls	r3, r3, #9
 800d2d8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2da:	f04f 33ff 	mov.w	r3, #4294967295
 800d2de:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	025b      	lsls	r3, r3, #9
 800d2e4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d2e6:	2390      	movs	r3, #144	; 0x90
 800d2e8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f107 0218 	add.w	r2, r7, #24
 800d2fe:	4611      	mov	r1, r2
 800d300:	4618      	mov	r0, r3
 800d302:	f001 ff6b 	bl	800f1dc <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d90a      	bls.n	800d322 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2220      	movs	r2, #32
 800d310:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d318:	4618      	mov	r0, r3
 800d31a:	f002 f813 	bl	800f344 <SDMMC_CmdWriteMultiBlock>
 800d31e:	6478      	str	r0, [r7, #68]	; 0x44
 800d320:	e009      	b.n	800d336 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2210      	movs	r2, #16
 800d326:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d32e:	4618      	mov	r0, r3
 800d330:	f001 ffe6 	bl	800f300 <SDMMC_CmdWriteSingleBlock>
 800d334:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d012      	beq.n	800d362 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a87      	ldr	r2, [pc, #540]	; (800d560 <HAL_SD_WriteBlocks+0x308>)
 800d342:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d34a:	431a      	orrs	r2, r3
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2201      	movs	r2, #1
 800d354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2200      	movs	r2, #0
 800d35c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
 800d360:	e0f9      	b.n	800d556 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d366:	e065      	b.n	800d434 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d36e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d372:	2b00      	cmp	r3, #0
 800d374:	d040      	beq.n	800d3f8 <HAL_SD_WriteBlocks+0x1a0>
 800d376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d03d      	beq.n	800d3f8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d37c:	2300      	movs	r3, #0
 800d37e:	643b      	str	r3, [r7, #64]	; 0x40
 800d380:	e037      	b.n	800d3f2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d38a:	3301      	adds	r3, #1
 800d38c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d390:	3b01      	subs	r3, #1
 800d392:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	021a      	lsls	r2, r3, #8
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	4313      	orrs	r3, r2
 800d39e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	041a      	lsls	r2, r3, #16
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d3be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	061a      	lsls	r2, r3, #24
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f107 0214 	add.w	r2, r7, #20
 800d3e4:	4611      	mov	r1, r2
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f001 fe80 	bl	800f0ec <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d3ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	643b      	str	r3, [r7, #64]	; 0x40
 800d3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3f4:	2b07      	cmp	r3, #7
 800d3f6:	d9c4      	bls.n	800d382 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d3f8:	f7f9 fc50 	bl	8006c9c <HAL_GetTick>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d404:	429a      	cmp	r2, r3
 800d406:	d902      	bls.n	800d40e <HAL_SD_WriteBlocks+0x1b6>
 800d408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d112      	bne.n	800d434 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a53      	ldr	r2, [pc, #332]	; (800d560 <HAL_SD_WriteBlocks+0x308>)
 800d414:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d41c:	431a      	orrs	r2, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d430:	2303      	movs	r3, #3
 800d432:	e090      	b.n	800d556 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d43a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d092      	beq.n	800d368 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d022      	beq.n	800d496 <HAL_SD_WriteBlocks+0x23e>
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	2b01      	cmp	r3, #1
 800d454:	d91f      	bls.n	800d496 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d45a:	2b03      	cmp	r3, #3
 800d45c:	d01b      	beq.n	800d496 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4618      	mov	r0, r3
 800d464:	f001 ff90 	bl	800f388 <SDMMC_CmdStopTransfer>
 800d468:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d012      	beq.n	800d496 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a3a      	ldr	r2, [pc, #232]	; (800d560 <HAL_SD_WriteBlocks+0x308>)
 800d476:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d47e:	431a      	orrs	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d492:	2301      	movs	r3, #1
 800d494:	e05f      	b.n	800d556 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49c:	f003 0308 	and.w	r3, r3, #8
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d012      	beq.n	800d4ca <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a2d      	ldr	r2, [pc, #180]	; (800d560 <HAL_SD_WriteBlocks+0x308>)
 800d4aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b0:	f043 0208 	orr.w	r2, r3, #8
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e045      	b.n	800d556 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d0:	f003 0302 	and.w	r3, r3, #2
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d012      	beq.n	800d4fe <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a20      	ldr	r2, [pc, #128]	; (800d560 <HAL_SD_WriteBlocks+0x308>)
 800d4de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e4:	f043 0202 	orr.w	r2, r3, #2
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e02b      	b.n	800d556 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d504:	f003 0310 	and.w	r3, r3, #16
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d012      	beq.n	800d532 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a13      	ldr	r2, [pc, #76]	; (800d560 <HAL_SD_WriteBlocks+0x308>)
 800d512:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d518:	f043 0210 	orr.w	r2, r3, #16
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2201      	movs	r2, #1
 800d524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	e011      	b.n	800d556 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f240 523a 	movw	r2, #1338	; 0x53a
 800d53a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d544:	2300      	movs	r3, #0
 800d546:	e006      	b.n	800d556 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d554:	2301      	movs	r3, #1
  }
}
 800d556:	4618      	mov	r0, r3
 800d558:	3748      	adds	r7, #72	; 0x48
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	004005ff 	.word	0x004005ff

0800d564 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08c      	sub	sp, #48	; 0x30
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d107      	bne.n	800d58c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d580:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e0be      	b.n	800d70a <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b01      	cmp	r3, #1
 800d596:	f040 80b7 	bne.w	800d708 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d5a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	441a      	add	r2, r3
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d907      	bls.n	800d5be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e0a5      	b.n	800d70a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2203      	movs	r2, #3
 800d5c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d5dc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e2:	4a4c      	ldr	r2, [pc, #304]	; (800d714 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800d5e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ea:	4a4b      	ldr	r2, [pc, #300]	; (800d718 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800d5ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60e:	689a      	ldr	r2, [r3, #8]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	430a      	orrs	r2, r1
 800d618:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	3380      	adds	r3, #128	; 0x80
 800d624:	4619      	mov	r1, r3
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	025b      	lsls	r3, r3, #9
 800d62c:	089b      	lsrs	r3, r3, #2
 800d62e:	f7fa ffdf 	bl	80085f0 <HAL_DMA_Start_IT>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d017      	beq.n	800d668 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d646:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a33      	ldr	r2, [pc, #204]	; (800d71c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d64e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d654:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	e050      	b.n	800d70a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d668:	4b2d      	ldr	r3, [pc, #180]	; (800d720 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d66a:	2201      	movs	r2, #1
 800d66c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d672:	2b01      	cmp	r3, #1
 800d674:	d002      	beq.n	800d67c <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800d676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d678:	025b      	lsls	r3, r3, #9
 800d67a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d67c:	f04f 33ff 	mov.w	r3, #4294967295
 800d680:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	025b      	lsls	r3, r3, #9
 800d686:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d688:	2390      	movs	r3, #144	; 0x90
 800d68a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d68c:	2302      	movs	r3, #2
 800d68e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d690:	2300      	movs	r3, #0
 800d692:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d694:	2301      	movs	r3, #1
 800d696:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f107 0210 	add.w	r2, r7, #16
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f001 fd9a 	bl	800f1dc <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d90a      	bls.n	800d6c4 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2282      	movs	r2, #130	; 0x82
 800d6b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f001 fdfe 	bl	800f2bc <SDMMC_CmdReadMultiBlock>
 800d6c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d6c2:	e009      	b.n	800d6d8 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2281      	movs	r2, #129	; 0x81
 800d6c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f001 fdd1 	bl	800f278 <SDMMC_CmdReadSingleBlock>
 800d6d6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d012      	beq.n	800d704 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a0e      	ldr	r2, [pc, #56]	; (800d71c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d6e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	431a      	orrs	r2, r3
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d700:	2301      	movs	r3, #1
 800d702:	e002      	b.n	800d70a <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	e000      	b.n	800d70a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d708:	2302      	movs	r3, #2
  }
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3730      	adds	r7, #48	; 0x30
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	0800e127 	.word	0x0800e127
 800d718:	0800e199 	.word	0x0800e199
 800d71c:	004005ff 	.word	0x004005ff
 800d720:	4225858c 	.word	0x4225858c

0800d724 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b08c      	sub	sp, #48	; 0x30
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
 800d730:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d107      	bne.n	800d74c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d740:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	e0c1      	b.n	800d8d0 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d752:	b2db      	uxtb	r3, r3
 800d754:	2b01      	cmp	r3, #1
 800d756:	f040 80ba 	bne.w	800d8ce <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	441a      	add	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d907      	bls.n	800d77e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d772:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d77a:	2301      	movs	r3, #1
 800d77c:	e0a8      	b.n	800d8d0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2203      	movs	r2, #3
 800d782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2200      	movs	r2, #0
 800d78c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f042 021a 	orr.w	r2, r2, #26
 800d79c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a2:	4a4d      	ldr	r2, [pc, #308]	; (800d8d8 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800d7a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7aa:	4a4c      	ldr	r2, [pc, #304]	; (800d8dc <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800d7ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d002      	beq.n	800d7c4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	025b      	lsls	r3, r3, #9
 800d7c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d90a      	bls.n	800d7e0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	22a0      	movs	r2, #160	; 0xa0
 800d7ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f001 fdb4 	bl	800f344 <SDMMC_CmdWriteMultiBlock>
 800d7dc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d7de:	e009      	b.n	800d7f4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2290      	movs	r2, #144	; 0x90
 800d7e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f001 fd87 	bl	800f300 <SDMMC_CmdWriteSingleBlock>
 800d7f2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d012      	beq.n	800d820 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4a38      	ldr	r2, [pc, #224]	; (800d8e0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800d800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	431a      	orrs	r2, r3
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2201      	movs	r2, #1
 800d812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2200      	movs	r2, #0
 800d81a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	e057      	b.n	800d8d0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d820:	4b30      	ldr	r3, [pc, #192]	; (800d8e4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d822:	2201      	movs	r2, #1
 800d824:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82a:	2240      	movs	r2, #64	; 0x40
 800d82c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d83e:	689a      	ldr	r2, [r3, #8]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	430a      	orrs	r2, r1
 800d848:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d84e:	68b9      	ldr	r1, [r7, #8]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	3380      	adds	r3, #128	; 0x80
 800d856:	461a      	mov	r2, r3
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	025b      	lsls	r3, r3, #9
 800d85c:	089b      	lsrs	r3, r3, #2
 800d85e:	f7fa fec7 	bl	80085f0 <HAL_DMA_Start_IT>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d01a      	beq.n	800d89e <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f022 021a 	bic.w	r2, r2, #26
 800d876:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a18      	ldr	r2, [pc, #96]	; (800d8e0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800d87e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d884:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2201      	movs	r2, #1
 800d890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	e018      	b.n	800d8d0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d89e:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	025b      	lsls	r3, r3, #9
 800d8a8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d8aa:	2390      	movs	r3, #144	; 0x90
 800d8ac:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f107 0210 	add.w	r2, r7, #16
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f001 fc89 	bl	800f1dc <SDIO_ConfigData>

      return HAL_OK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	e000      	b.n	800d8d0 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800d8ce:	2302      	movs	r3, #2
  }
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3730      	adds	r7, #48	; 0x30
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	0800e0fd 	.word	0x0800e0fd
 800d8dc:	0800e199 	.word	0x0800e199
 800d8e0:	004005ff 	.word	0x004005ff
 800d8e4:	4225858c 	.word	0x4225858c

0800d8e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d900:	2b00      	cmp	r3, #0
 800d902:	d008      	beq.n	800d916 <HAL_SD_IRQHandler+0x2e>
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f003 0308 	and.w	r3, r3, #8
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 ffef 	bl	800e8f2 <SD_Read_IT>
 800d914:	e155      	b.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d920:	2b00      	cmp	r3, #0
 800d922:	f000 808f 	beq.w	800da44 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d92e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	6812      	ldr	r2, [r2, #0]
 800d93a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d93e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d942:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f022 0201 	bic.w	r2, r2, #1
 800d952:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f003 0308 	and.w	r3, r3, #8
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d039      	beq.n	800d9d2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f003 0302 	and.w	r3, r3, #2
 800d964:	2b00      	cmp	r3, #0
 800d966:	d104      	bne.n	800d972 <HAL_SD_IRQHandler+0x8a>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f003 0320 	and.w	r3, r3, #32
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d011      	beq.n	800d996 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4618      	mov	r0, r3
 800d978:	f001 fd06 	bl	800f388 <SDMMC_CmdStopTransfer>
 800d97c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d008      	beq.n	800d996 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	431a      	orrs	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 f91f 	bl	800dbd4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f240 523a 	movw	r2, #1338	; 0x53a
 800d99e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d104      	bne.n	800d9c2 <HAL_SD_IRQHandler+0xda>
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f003 0302 	and.w	r3, r3, #2
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d003      	beq.n	800d9ca <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f003 fce8 	bl	8011398 <HAL_SD_RxCpltCallback>
 800d9c8:	e0fb      	b.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f003 fcda 	bl	8011384 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d9d0:	e0f7      	b.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 80f2 	beq.w	800dbc2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f003 0320 	and.w	r3, r3, #32
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d011      	beq.n	800da0c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f001 fccb 	bl	800f388 <SDMMC_CmdStopTransfer>
 800d9f2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d008      	beq.n	800da0c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	431a      	orrs	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 f8e4 	bl	800dbd4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f003 0301 	and.w	r3, r3, #1
 800da12:	2b00      	cmp	r3, #0
 800da14:	f040 80d5 	bne.w	800dbc2 <HAL_SD_IRQHandler+0x2da>
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f003 0302 	and.w	r3, r3, #2
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f040 80cf 	bne.w	800dbc2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f022 0208 	bic.w	r2, r2, #8
 800da32:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f003 fca1 	bl	8011384 <HAL_SD_TxCpltCallback>
}
 800da42:	e0be      	b.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d008      	beq.n	800da64 <HAL_SD_IRQHandler+0x17c>
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f003 0308 	and.w	r3, r3, #8
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d003      	beq.n	800da64 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 ff99 	bl	800e994 <SD_Write_IT>
 800da62:	e0ae      	b.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da6a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f000 80a7 	beq.w	800dbc2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7a:	f003 0302 	and.w	r3, r3, #2
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d005      	beq.n	800da8e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da86:	f043 0202 	orr.w	r2, r3, #2
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da94:	f003 0308 	and.w	r3, r3, #8
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d005      	beq.n	800daa8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa0:	f043 0208 	orr.w	r2, r3, #8
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daae:	f003 0320 	and.w	r3, r3, #32
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d005      	beq.n	800dac2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daba:	f043 0220 	orr.w	r2, r3, #32
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac8:	f003 0310 	and.w	r3, r3, #16
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d005      	beq.n	800dadc <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad4:	f043 0210 	orr.w	r2, r3, #16
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f240 523a 	movw	r2, #1338	; 0x53a
 800dae4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800daf4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f001 fc44 	bl	800f388 <SDMMC_CmdStopTransfer>
 800db00:	4602      	mov	r2, r0
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db06:	431a      	orrs	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f003 0308 	and.w	r3, r3, #8
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00a      	beq.n	800db2c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2201      	movs	r2, #1
 800db1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 f855 	bl	800dbd4 <HAL_SD_ErrorCallback>
}
 800db2a:	e04a      	b.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db32:	2b00      	cmp	r3, #0
 800db34:	d045      	beq.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f003 0310 	and.w	r3, r3, #16
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d104      	bne.n	800db4a <HAL_SD_IRQHandler+0x262>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f003 0320 	and.w	r3, r3, #32
 800db46:	2b00      	cmp	r3, #0
 800db48:	d011      	beq.n	800db6e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db4e:	4a1f      	ldr	r2, [pc, #124]	; (800dbcc <HAL_SD_IRQHandler+0x2e4>)
 800db50:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db56:	4618      	mov	r0, r3
 800db58:	f7fa fda2 	bl	80086a0 <HAL_DMA_Abort_IT>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d02f      	beq.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db66:	4618      	mov	r0, r3
 800db68:	f000 fb68 	bl	800e23c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800db6c:	e029      	b.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f003 0301 	and.w	r3, r3, #1
 800db74:	2b00      	cmp	r3, #0
 800db76:	d104      	bne.n	800db82 <HAL_SD_IRQHandler+0x29a>
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f003 0302 	and.w	r3, r3, #2
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d011      	beq.n	800dba6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db86:	4a12      	ldr	r2, [pc, #72]	; (800dbd0 <HAL_SD_IRQHandler+0x2e8>)
 800db88:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fa fd86 	bl	80086a0 <HAL_DMA_Abort_IT>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d013      	beq.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db9e:	4618      	mov	r0, r3
 800dba0:	f000 fb83 	bl	800e2aa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dba4:	e00d      	b.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f003 fbd8 	bl	8011370 <HAL_SD_AbortCallback>
}
 800dbc0:	e7ff      	b.n	800dbc2 <HAL_SD_IRQHandler+0x2da>
 800dbc2:	bf00      	nop
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	0800e23d 	.word	0x0800e23d
 800dbd0:	0800e2ab 	.word	0x0800e2ab

0800dbd4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dbdc:	bf00      	nop
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbf6:	0f9b      	lsrs	r3, r3, #30
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc02:	0e9b      	lsrs	r3, r3, #26
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	f003 030f 	and.w	r3, r3, #15
 800dc0a:	b2da      	uxtb	r2, r3
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc14:	0e1b      	lsrs	r3, r3, #24
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	f003 0303 	and.w	r3, r3, #3
 800dc1c:	b2da      	uxtb	r2, r3
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc26:	0c1b      	lsrs	r3, r3, #16
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc32:	0a1b      	lsrs	r3, r3, #8
 800dc34:	b2da      	uxtb	r2, r3
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc48:	0d1b      	lsrs	r3, r3, #20
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc54:	0c1b      	lsrs	r3, r3, #16
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	f003 030f 	and.w	r3, r3, #15
 800dc5c:	b2da      	uxtb	r2, r3
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc66:	0bdb      	lsrs	r3, r3, #15
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	f003 0301 	and.w	r3, r3, #1
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc78:	0b9b      	lsrs	r3, r3, #14
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	f003 0301 	and.w	r3, r3, #1
 800dc80:	b2da      	uxtb	r2, r3
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc8a:	0b5b      	lsrs	r3, r3, #13
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	f003 0301 	and.w	r3, r3, #1
 800dc92:	b2da      	uxtb	r2, r3
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc9c:	0b1b      	lsrs	r3, r3, #12
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	f003 0301 	and.w	r3, r3, #1
 800dca4:	b2da      	uxtb	r2, r3
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	2200      	movs	r2, #0
 800dcae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d163      	bne.n	800dd80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcbc:	009a      	lsls	r2, r3, #2
 800dcbe:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800dcc8:	0f92      	lsrs	r2, r2, #30
 800dcca:	431a      	orrs	r2, r3
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcd4:	0edb      	lsrs	r3, r3, #27
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	f003 0307 	and.w	r3, r3, #7
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dce6:	0e1b      	lsrs	r3, r3, #24
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	f003 0307 	and.w	r3, r3, #7
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcf8:	0d5b      	lsrs	r3, r3, #21
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 0307 	and.w	r3, r3, #7
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd0a:	0c9b      	lsrs	r3, r3, #18
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	f003 0307 	and.w	r3, r3, #7
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd1c:	0bdb      	lsrs	r3, r3, #15
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	f003 0307 	and.w	r3, r3, #7
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	691b      	ldr	r3, [r3, #16]
 800dd2e:	1c5a      	adds	r2, r3, #1
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	7e1b      	ldrb	r3, [r3, #24]
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	f003 0307 	and.w	r3, r3, #7
 800dd3e:	3302      	adds	r3, #2
 800dd40:	2201      	movs	r2, #1
 800dd42:	fa02 f303 	lsl.w	r3, r2, r3
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800dd4a:	fb03 f202 	mul.w	r2, r3, r2
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	7a1b      	ldrb	r3, [r3, #8]
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	f003 030f 	and.w	r3, r3, #15
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	409a      	lsls	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800dd6c:	0a52      	lsrs	r2, r2, #9
 800dd6e:	fb03 f202 	mul.w	r2, r3, r2
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd7c:	661a      	str	r2, [r3, #96]	; 0x60
 800dd7e:	e031      	b.n	800dde4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d11d      	bne.n	800ddc4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd8c:	041b      	lsls	r3, r3, #16
 800dd8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd96:	0c1b      	lsrs	r3, r3, #16
 800dd98:	431a      	orrs	r2, r3
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	691b      	ldr	r3, [r3, #16]
 800dda2:	3301      	adds	r3, #1
 800dda4:	029a      	lsls	r2, r3, #10
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ddb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	661a      	str	r2, [r3, #96]	; 0x60
 800ddc2:	e00f      	b.n	800dde4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4a58      	ldr	r2, [pc, #352]	; (800df2c <HAL_SD_GetCardCSD+0x344>)
 800ddca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dde0:	2301      	movs	r3, #1
 800dde2:	e09d      	b.n	800df20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde8:	0b9b      	lsrs	r3, r3, #14
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	f003 0301 	and.w	r3, r3, #1
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddfa:	09db      	lsrs	r3, r3, #7
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de02:	b2da      	uxtb	r2, r3
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de12:	b2da      	uxtb	r2, r3
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de1c:	0fdb      	lsrs	r3, r3, #31
 800de1e:	b2da      	uxtb	r2, r3
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de28:	0f5b      	lsrs	r3, r3, #29
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	f003 0303 	and.w	r3, r3, #3
 800de30:	b2da      	uxtb	r2, r3
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de3a:	0e9b      	lsrs	r3, r3, #26
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	f003 0307 	and.w	r3, r3, #7
 800de42:	b2da      	uxtb	r2, r3
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de4c:	0d9b      	lsrs	r3, r3, #22
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	f003 030f 	and.w	r3, r3, #15
 800de54:	b2da      	uxtb	r2, r3
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de5e:	0d5b      	lsrs	r3, r3, #21
 800de60:	b2db      	uxtb	r3, r3
 800de62:	f003 0301 	and.w	r3, r3, #1
 800de66:	b2da      	uxtb	r2, r3
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de7a:	0c1b      	lsrs	r3, r3, #16
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	b2da      	uxtb	r2, r3
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de8e:	0bdb      	lsrs	r3, r3, #15
 800de90:	b2db      	uxtb	r3, r3
 800de92:	f003 0301 	and.w	r3, r3, #1
 800de96:	b2da      	uxtb	r2, r3
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dea2:	0b9b      	lsrs	r3, r3, #14
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	f003 0301 	and.w	r3, r3, #1
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deb6:	0b5b      	lsrs	r3, r3, #13
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	f003 0301 	and.w	r3, r3, #1
 800debe:	b2da      	uxtb	r2, r3
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deca:	0b1b      	lsrs	r3, r3, #12
 800decc:	b2db      	uxtb	r3, r3
 800dece:	f003 0301 	and.w	r3, r3, #1
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dede:	0a9b      	lsrs	r3, r3, #10
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	f003 0303 	and.w	r3, r3, #3
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800def2:	0a1b      	lsrs	r3, r3, #8
 800def4:	b2db      	uxtb	r3, r3
 800def6:	f003 0303 	and.w	r3, r3, #3
 800defa:	b2da      	uxtb	r2, r3
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df06:	085b      	lsrs	r3, r3, #1
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2201      	movs	r2, #1
 800df1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800df1e:	2300      	movs	r3, #0
}
 800df20:	4618      	mov	r0, r3
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	004005ff 	.word	0x004005ff

0800df30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800df7a:	2300      	movs	r3, #0
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800df88:	b5b0      	push	{r4, r5, r7, lr}
 800df8a:	b08e      	sub	sp, #56	; 0x38
 800df8c:	af04      	add	r7, sp, #16
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800df92:	2300      	movs	r3, #0
 800df94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2203      	movs	r2, #3
 800df9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfa4:	2b03      	cmp	r3, #3
 800dfa6:	d02e      	beq.n	800e006 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfae:	d106      	bne.n	800dfbe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	639a      	str	r2, [r3, #56]	; 0x38
 800dfbc:	e029      	b.n	800e012 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfc4:	d10a      	bne.n	800dfdc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fb2a 	bl	800e620 <SD_WideBus_Enable>
 800dfcc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfd2:	6a3b      	ldr	r3, [r7, #32]
 800dfd4:	431a      	orrs	r2, r3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	639a      	str	r2, [r3, #56]	; 0x38
 800dfda:	e01a      	b.n	800e012 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10a      	bne.n	800dff8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fb67 	bl	800e6b6 <SD_WideBus_Disable>
 800dfe8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfee:	6a3b      	ldr	r3, [r7, #32]
 800dff0:	431a      	orrs	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	639a      	str	r2, [r3, #56]	; 0x38
 800dff6:	e00c      	b.n	800e012 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	639a      	str	r2, [r3, #56]	; 0x38
 800e004:	e005      	b.n	800e012 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00b      	beq.n	800e032 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a26      	ldr	r2, [pc, #152]	; (800e0b8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e020:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2201      	movs	r2, #1
 800e026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e030:	e01f      	b.n	800e072 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	695b      	ldr	r3, [r3, #20]
 800e04c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681d      	ldr	r5, [r3, #0]
 800e058:	466c      	mov	r4, sp
 800e05a:	f107 0314 	add.w	r3, r7, #20
 800e05e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e062:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e066:	f107 0308 	add.w	r3, r7, #8
 800e06a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e06c:	4628      	mov	r0, r5
 800e06e:	f001 f805 	bl	800f07c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e07a:	4618      	mov	r0, r3
 800e07c:	f001 f8da 	bl	800f234 <SDMMC_CmdBlockLength>
 800e080:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00c      	beq.n	800e0a2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a0a      	ldr	r2, [pc, #40]	; (800e0b8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e08e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e094:	6a3b      	ldr	r3, [r7, #32]
 800e096:	431a      	orrs	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e09c:	2301      	movs	r3, #1
 800e09e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e0aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3728      	adds	r7, #40	; 0x28
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bdb0      	pop	{r4, r5, r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	004005ff 	.word	0x004005ff

0800e0bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b086      	sub	sp, #24
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e0c8:	f107 030c 	add.w	r3, r7, #12
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 fa7e 	bl	800e5d0 <SD_SendStatus>
 800e0d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d005      	beq.n	800e0e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	431a      	orrs	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	0a5b      	lsrs	r3, r3, #9
 800e0ec:	f003 030f 	and.w	r3, r3, #15
 800e0f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e0f2:	693b      	ldr	r3, [r7, #16]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3718      	adds	r7, #24
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e108:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e118:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e11a:	bf00      	nop
 800e11c:	3714      	adds	r7, #20
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr

0800e126 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b084      	sub	sp, #16
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e132:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e138:	2b82      	cmp	r3, #130	; 0x82
 800e13a:	d111      	bne.n	800e160 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4618      	mov	r0, r3
 800e142:	f001 f921 	bl	800f388 <SDMMC_CmdStopTransfer>
 800e146:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d008      	beq.n	800e160 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	431a      	orrs	r2, r3
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f7ff fd3a 	bl	800dbd4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f022 0208 	bic.w	r2, r2, #8
 800e16e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f240 523a 	movw	r2, #1338	; 0x53a
 800e178:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2201      	movs	r2, #1
 800e17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2200      	movs	r2, #0
 800e186:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f003 f905 	bl	8011398 <HAL_SD_RxCpltCallback>
#endif
}
 800e18e:	bf00      	nop
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
	...

0800e198 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b086      	sub	sp, #24
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7fa fc26 	bl	80089f8 <HAL_DMA_GetError>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b02      	cmp	r3, #2
 800e1b0:	d03e      	beq.n	800e230 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1c0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d002      	beq.n	800e1ce <SD_DMAError+0x36>
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d12d      	bne.n	800e22a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4a19      	ldr	r2, [pc, #100]	; (800e238 <SD_DMAError+0xa0>)
 800e1d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e1e4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e1f2:	6978      	ldr	r0, [r7, #20]
 800e1f4:	f7ff ff62 	bl	800e0bc <HAL_SD_GetCardState>
 800e1f8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	2b06      	cmp	r3, #6
 800e1fe:	d002      	beq.n	800e206 <SD_DMAError+0x6e>
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	2b05      	cmp	r3, #5
 800e204:	d10a      	bne.n	800e21c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f001 f8bc 	bl	800f388 <SDMMC_CmdStopTransfer>
 800e210:	4602      	mov	r2, r0
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e216:	431a      	orrs	r2, r3
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	2200      	movs	r2, #0
 800e228:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e22a:	6978      	ldr	r0, [r7, #20]
 800e22c:	f7ff fcd2 	bl	800dbd4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e230:	bf00      	nop
 800e232:	3718      	adds	r7, #24
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	004005ff 	.word	0x004005ff

0800e23c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e248:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f240 523a 	movw	r2, #1338	; 0x53a
 800e252:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f7ff ff31 	bl	800e0bc <HAL_SD_GetCardState>
 800e25a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2201      	movs	r2, #1
 800e260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2200      	movs	r2, #0
 800e268:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	2b06      	cmp	r3, #6
 800e26e:	d002      	beq.n	800e276 <SD_DMATxAbort+0x3a>
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	2b05      	cmp	r3, #5
 800e274:	d10a      	bne.n	800e28c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f001 f884 	bl	800f388 <SDMMC_CmdStopTransfer>
 800e280:	4602      	mov	r2, r0
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e286:	431a      	orrs	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e290:	2b00      	cmp	r3, #0
 800e292:	d103      	bne.n	800e29c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f003 f86b 	bl	8011370 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e29a:	e002      	b.n	800e2a2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f7ff fc99 	bl	800dbd4 <HAL_SD_ErrorCallback>
}
 800e2a2:	bf00      	nop
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b084      	sub	sp, #16
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f240 523a 	movw	r2, #1338	; 0x53a
 800e2c0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f7ff fefa 	bl	800e0bc <HAL_SD_GetCardState>
 800e2c8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	2b06      	cmp	r3, #6
 800e2dc:	d002      	beq.n	800e2e4 <SD_DMARxAbort+0x3a>
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	2b05      	cmp	r3, #5
 800e2e2:	d10a      	bne.n	800e2fa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f001 f84d 	bl	800f388 <SDMMC_CmdStopTransfer>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f4:	431a      	orrs	r2, r3
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d103      	bne.n	800e30a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f003 f834 	bl	8011370 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e308:	e002      	b.n	800e310 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e30a:	68f8      	ldr	r0, [r7, #12]
 800e30c:	f7ff fc62 	bl	800dbd4 <HAL_SD_ErrorCallback>
}
 800e310:	bf00      	nop
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e318:	b5b0      	push	{r4, r5, r7, lr}
 800e31a:	b094      	sub	sp, #80	; 0x50
 800e31c:	af04      	add	r7, sp, #16
 800e31e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e320:	2301      	movs	r3, #1
 800e322:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 feff 	bl	800f12c <SDIO_GetPowerState>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d102      	bne.n	800e33a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e334:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e338:	e0b8      	b.n	800e4ac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e33e:	2b03      	cmp	r3, #3
 800e340:	d02f      	beq.n	800e3a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4618      	mov	r0, r3
 800e348:	f001 f928 	bl	800f59c <SDMMC_CmdSendCID>
 800e34c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e350:	2b00      	cmp	r3, #0
 800e352:	d001      	beq.n	800e358 <SD_InitCard+0x40>
    {
      return errorstate;
 800e354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e356:	e0a9      	b.n	800e4ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2100      	movs	r1, #0
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 ff29 	bl	800f1b6 <SDIO_GetResponse>
 800e364:	4602      	mov	r2, r0
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2104      	movs	r1, #4
 800e370:	4618      	mov	r0, r3
 800e372:	f000 ff20 	bl	800f1b6 <SDIO_GetResponse>
 800e376:	4602      	mov	r2, r0
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2108      	movs	r1, #8
 800e382:	4618      	mov	r0, r3
 800e384:	f000 ff17 	bl	800f1b6 <SDIO_GetResponse>
 800e388:	4602      	mov	r2, r0
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	210c      	movs	r1, #12
 800e394:	4618      	mov	r0, r3
 800e396:	f000 ff0e 	bl	800f1b6 <SDIO_GetResponse>
 800e39a:	4602      	mov	r2, r0
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3a6:	2b03      	cmp	r3, #3
 800e3a8:	d00d      	beq.n	800e3c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f107 020e 	add.w	r2, r7, #14
 800e3b2:	4611      	mov	r1, r2
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f001 f92e 	bl	800f616 <SDMMC_CmdSetRelAdd>
 800e3ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <SD_InitCard+0xae>
    {
      return errorstate;
 800e3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c4:	e072      	b.n	800e4ac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ca:	2b03      	cmp	r3, #3
 800e3cc:	d036      	beq.n	800e43c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e3ce:	89fb      	ldrh	r3, [r7, #14]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3de:	041b      	lsls	r3, r3, #16
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	f001 f8f8 	bl	800f5d8 <SDMMC_CmdSendCSD>
 800e3e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f2:	e05b      	b.n	800e4ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f000 fedb 	bl	800f1b6 <SDIO_GetResponse>
 800e400:	4602      	mov	r2, r0
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2104      	movs	r1, #4
 800e40c:	4618      	mov	r0, r3
 800e40e:	f000 fed2 	bl	800f1b6 <SDIO_GetResponse>
 800e412:	4602      	mov	r2, r0
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2108      	movs	r1, #8
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 fec9 	bl	800f1b6 <SDIO_GetResponse>
 800e424:	4602      	mov	r2, r0
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	210c      	movs	r1, #12
 800e430:	4618      	mov	r0, r3
 800e432:	f000 fec0 	bl	800f1b6 <SDIO_GetResponse>
 800e436:	4602      	mov	r2, r0
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2104      	movs	r1, #4
 800e442:	4618      	mov	r0, r3
 800e444:	f000 feb7 	bl	800f1b6 <SDIO_GetResponse>
 800e448:	4603      	mov	r3, r0
 800e44a:	0d1a      	lsrs	r2, r3, #20
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e450:	f107 0310 	add.w	r3, r7, #16
 800e454:	4619      	mov	r1, r3
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7ff fbc6 	bl	800dbe8 <HAL_SD_GetCardCSD>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d002      	beq.n	800e468 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e462:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e466:	e021      	b.n	800e4ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6819      	ldr	r1, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e470:	041b      	lsls	r3, r3, #16
 800e472:	2200      	movs	r2, #0
 800e474:	461c      	mov	r4, r3
 800e476:	4615      	mov	r5, r2
 800e478:	4622      	mov	r2, r4
 800e47a:	462b      	mov	r3, r5
 800e47c:	4608      	mov	r0, r1
 800e47e:	f000 ffa5 	bl	800f3cc <SDMMC_CmdSelDesel>
 800e482:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <SD_InitCard+0x176>
  {
    return errorstate;
 800e48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48c:	e00e      	b.n	800e4ac <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681d      	ldr	r5, [r3, #0]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	466c      	mov	r4, sp
 800e496:	f103 0210 	add.w	r2, r3, #16
 800e49a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e49c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e4a0:	3304      	adds	r3, #4
 800e4a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	f000 fde9 	bl	800f07c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e4aa:	2300      	movs	r3, #0
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3740      	adds	r7, #64	; 0x40
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bdb0      	pop	{r4, r5, r7, pc}

0800e4b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	617b      	str	r3, [r7, #20]
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f000 ffa0 	bl	800f412 <SDMMC_CmdGoIdleState>
 800e4d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <SD_PowerON+0x2a>
  {
    return errorstate;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	e072      	b.n	800e5c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f000 ffb3 	bl	800f44e <SDMMC_CmdOperCond>
 800e4e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00d      	beq.n	800e50c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f000 ff89 	bl	800f412 <SDMMC_CmdGoIdleState>
 800e500:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d004      	beq.n	800e512 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	e05b      	b.n	800e5c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2201      	movs	r2, #1
 800e510:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e516:	2b01      	cmp	r3, #1
 800e518:	d137      	bne.n	800e58a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2100      	movs	r1, #0
 800e520:	4618      	mov	r0, r3
 800e522:	f000 ffb3 	bl	800f48c <SDMMC_CmdAppCommand>
 800e526:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d02d      	beq.n	800e58a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e52e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e532:	e047      	b.n	800e5c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2100      	movs	r1, #0
 800e53a:	4618      	mov	r0, r3
 800e53c:	f000 ffa6 	bl	800f48c <SDMMC_CmdAppCommand>
 800e540:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d001      	beq.n	800e54c <SD_PowerON+0x98>
    {
      return errorstate;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	e03b      	b.n	800e5c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	491e      	ldr	r1, [pc, #120]	; (800e5cc <SD_PowerON+0x118>)
 800e552:	4618      	mov	r0, r3
 800e554:	f000 ffbc 	bl	800f4d0 <SDMMC_CmdAppOperCommand>
 800e558:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e560:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e564:	e02e      	b.n	800e5c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2100      	movs	r1, #0
 800e56c:	4618      	mov	r0, r3
 800e56e:	f000 fe22 	bl	800f1b6 <SDIO_GetResponse>
 800e572:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	0fdb      	lsrs	r3, r3, #31
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d101      	bne.n	800e580 <SD_PowerON+0xcc>
 800e57c:	2301      	movs	r3, #1
 800e57e:	e000      	b.n	800e582 <SD_PowerON+0xce>
 800e580:	2300      	movs	r3, #0
 800e582:	613b      	str	r3, [r7, #16]

    count++;
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	3301      	adds	r3, #1
 800e588:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e590:	4293      	cmp	r3, r2
 800e592:	d802      	bhi.n	800e59a <SD_PowerON+0xe6>
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d0cc      	beq.n	800e534 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d902      	bls.n	800e5aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e5a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e5a8:	e00c      	b.n	800e5c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d003      	beq.n	800e5bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	645a      	str	r2, [r3, #68]	; 0x44
 800e5ba:	e002      	b.n	800e5c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	c1100000 	.word	0xc1100000

0800e5d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d102      	bne.n	800e5e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e5e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e5e4:	e018      	b.n	800e618 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5ee:	041b      	lsls	r3, r3, #16
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	4610      	mov	r0, r2
 800e5f4:	f001 f830 	bl	800f658 <SDMMC_CmdSendStatus>
 800e5f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d001      	beq.n	800e604 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	e009      	b.n	800e618 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2100      	movs	r1, #0
 800e60a:	4618      	mov	r0, r3
 800e60c:	f000 fdd3 	bl	800f1b6 <SDIO_GetResponse>
 800e610:	4602      	mov	r2, r0
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3710      	adds	r7, #16
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e628:	2300      	movs	r3, #0
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	2300      	movs	r3, #0
 800e62e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	2100      	movs	r1, #0
 800e636:	4618      	mov	r0, r3
 800e638:	f000 fdbd 	bl	800f1b6 <SDIO_GetResponse>
 800e63c:	4603      	mov	r3, r0
 800e63e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e646:	d102      	bne.n	800e64e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e64c:	e02f      	b.n	800e6ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e64e:	f107 030c 	add.w	r3, r7, #12
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 f879 	bl	800e74c <SD_FindSCR>
 800e65a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	e023      	b.n	800e6ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d01c      	beq.n	800e6aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e678:	041b      	lsls	r3, r3, #16
 800e67a:	4619      	mov	r1, r3
 800e67c:	4610      	mov	r0, r2
 800e67e:	f000 ff05 	bl	800f48c <SDMMC_CmdAppCommand>
 800e682:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d001      	beq.n	800e68e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	e00f      	b.n	800e6ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2102      	movs	r1, #2
 800e694:	4618      	mov	r0, r3
 800e696:	f000 ff3e 	bl	800f516 <SDMMC_CmdBusWidth>
 800e69a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	e003      	b.n	800e6ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	e001      	b.n	800e6ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e6aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3718      	adds	r7, #24
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b086      	sub	sp, #24
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e6be:	2300      	movs	r3, #0
 800e6c0:	60fb      	str	r3, [r7, #12]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f000 fd72 	bl	800f1b6 <SDIO_GetResponse>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6dc:	d102      	bne.n	800e6e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e6de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6e2:	e02f      	b.n	800e744 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e6e4:	f107 030c 	add.w	r3, r7, #12
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 f82e 	bl	800e74c <SD_FindSCR>
 800e6f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d001      	beq.n	800e6fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	e023      	b.n	800e744 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e702:	2b00      	cmp	r3, #0
 800e704:	d01c      	beq.n	800e740 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e70e:	041b      	lsls	r3, r3, #16
 800e710:	4619      	mov	r1, r3
 800e712:	4610      	mov	r0, r2
 800e714:	f000 feba 	bl	800f48c <SDMMC_CmdAppCommand>
 800e718:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	e00f      	b.n	800e744 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2100      	movs	r1, #0
 800e72a:	4618      	mov	r0, r3
 800e72c:	f000 fef3 	bl	800f516 <SDMMC_CmdBusWidth>
 800e730:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	e003      	b.n	800e744 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e73c:	2300      	movs	r3, #0
 800e73e:	e001      	b.n	800e744 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e740:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e744:	4618      	mov	r0, r3
 800e746:	3718      	adds	r7, #24
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e74c:	b590      	push	{r4, r7, lr}
 800e74e:	b08f      	sub	sp, #60	; 0x3c
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e756:	f7f8 faa1 	bl	8006c9c <HAL_GetTick>
 800e75a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e75c:	2300      	movs	r3, #0
 800e75e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e760:	2300      	movs	r3, #0
 800e762:	60bb      	str	r3, [r7, #8]
 800e764:	2300      	movs	r3, #0
 800e766:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2108      	movs	r1, #8
 800e772:	4618      	mov	r0, r3
 800e774:	f000 fd5e 	bl	800f234 <SDMMC_CmdBlockLength>
 800e778:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d001      	beq.n	800e784 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e782:	e0b2      	b.n	800e8ea <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e78c:	041b      	lsls	r3, r3, #16
 800e78e:	4619      	mov	r1, r3
 800e790:	4610      	mov	r0, r2
 800e792:	f000 fe7b 	bl	800f48c <SDMMC_CmdAppCommand>
 800e796:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a0:	e0a3      	b.n	800e8ea <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e7a8:	2308      	movs	r3, #8
 800e7aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e7ac:	2330      	movs	r3, #48	; 0x30
 800e7ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e7b0:	2302      	movs	r3, #2
 800e7b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f107 0210 	add.w	r2, r7, #16
 800e7c4:	4611      	mov	r1, r2
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 fd08 	bl	800f1dc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f000 fec2 	bl	800f55a <SDMMC_CmdSendSCR>
 800e7d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d02a      	beq.n	800e834 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e0:	e083      	b.n	800e8ea <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d00f      	beq.n	800e810 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6819      	ldr	r1, [r3, #0]
 800e7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	f107 0208 	add.w	r2, r7, #8
 800e7fc:	18d4      	adds	r4, r2, r3
 800e7fe:	4608      	mov	r0, r1
 800e800:	f000 fc67 	bl	800f0d2 <SDIO_ReadFIFO>
 800e804:	4603      	mov	r3, r0
 800e806:	6023      	str	r3, [r4, #0]
      index++;
 800e808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e80a:	3301      	adds	r3, #1
 800e80c:	637b      	str	r3, [r7, #52]	; 0x34
 800e80e:	e006      	b.n	800e81e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d012      	beq.n	800e844 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e81e:	f7f8 fa3d 	bl	8006c9c <HAL_GetTick>
 800e822:	4602      	mov	r2, r0
 800e824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82c:	d102      	bne.n	800e834 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e82e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e832:	e05a      	b.n	800e8ea <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e83a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d0cf      	beq.n	800e7e2 <SD_FindSCR+0x96>
 800e842:	e000      	b.n	800e846 <SD_FindSCR+0xfa>
      break;
 800e844:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e84c:	f003 0308 	and.w	r3, r3, #8
 800e850:	2b00      	cmp	r3, #0
 800e852:	d005      	beq.n	800e860 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2208      	movs	r2, #8
 800e85a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e85c:	2308      	movs	r3, #8
 800e85e:	e044      	b.n	800e8ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e866:	f003 0302 	and.w	r3, r3, #2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d005      	beq.n	800e87a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2202      	movs	r2, #2
 800e874:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e876:	2302      	movs	r3, #2
 800e878:	e037      	b.n	800e8ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e880:	f003 0320 	and.w	r3, r3, #32
 800e884:	2b00      	cmp	r3, #0
 800e886:	d005      	beq.n	800e894 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2220      	movs	r2, #32
 800e88e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e890:	2320      	movs	r3, #32
 800e892:	e02a      	b.n	800e8ea <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f240 523a 	movw	r2, #1338	; 0x53a
 800e89c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	061a      	lsls	r2, r3, #24
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	021b      	lsls	r3, r3, #8
 800e8a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e8aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	0a1b      	lsrs	r3, r3, #8
 800e8b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e8b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	0e1b      	lsrs	r3, r3, #24
 800e8ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	601a      	str	r2, [r3, #0]
    scr++;
 800e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	061a      	lsls	r2, r3, #24
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	021b      	lsls	r3, r3, #8
 800e8ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e8d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	0a1b      	lsrs	r3, r3, #8
 800e8d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e8dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	0e1b      	lsrs	r3, r3, #24
 800e8e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	373c      	adds	r7, #60	; 0x3c
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd90      	pop	{r4, r7, pc}

0800e8f2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b086      	sub	sp, #24
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8fe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e904:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d03f      	beq.n	800e98c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e90c:	2300      	movs	r3, #0
 800e90e:	617b      	str	r3, [r7, #20]
 800e910:	e033      	b.n	800e97a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4618      	mov	r0, r3
 800e918:	f000 fbdb 	bl	800f0d2 <SDIO_ReadFIFO>
 800e91c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	b2da      	uxtb	r2, r3
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3301      	adds	r3, #1
 800e92a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	3b01      	subs	r3, #1
 800e930:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	0a1b      	lsrs	r3, r3, #8
 800e936:	b2da      	uxtb	r2, r3
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	3301      	adds	r3, #1
 800e940:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	3b01      	subs	r3, #1
 800e946:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	0c1b      	lsrs	r3, r3, #16
 800e94c:	b2da      	uxtb	r2, r3
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	3301      	adds	r3, #1
 800e956:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	0e1b      	lsrs	r3, r3, #24
 800e962:	b2da      	uxtb	r2, r3
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	3301      	adds	r3, #1
 800e96c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	3b01      	subs	r3, #1
 800e972:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	3301      	adds	r3, #1
 800e978:	617b      	str	r3, [r7, #20]
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2b07      	cmp	r3, #7
 800e97e:	d9c8      	bls.n	800e912 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	693a      	ldr	r2, [r7, #16]
 800e98a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e98c:	bf00      	nop
 800e98e:	3718      	adds	r7, #24
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a1b      	ldr	r3, [r3, #32]
 800e9a0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d043      	beq.n	800ea36 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	617b      	str	r3, [r7, #20]
 800e9b2:	e037      	b.n	800ea24 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	021a      	lsls	r2, r3, #8
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	041a      	lsls	r2, r3, #16
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	3b01      	subs	r3, #1
 800e9f4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	061a      	lsls	r2, r3, #24
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	3301      	adds	r3, #1
 800ea06:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	3b01      	subs	r3, #1
 800ea0c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f107 0208 	add.w	r2, r7, #8
 800ea16:	4611      	mov	r1, r2
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 fb67 	bl	800f0ec <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	3301      	adds	r3, #1
 800ea22:	617b      	str	r3, [r7, #20]
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	2b07      	cmp	r3, #7
 800ea28:	d9c4      	bls.n	800e9b4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	693a      	ldr	r2, [r7, #16]
 800ea34:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ea36:	bf00      	nop
 800ea38:	3718      	adds	r7, #24
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b082      	sub	sp, #8
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d101      	bne.n	800ea50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	e041      	b.n	800ead4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d106      	bne.n	800ea6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f7f7 ff93 	bl	8006990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2202      	movs	r2, #2
 800ea6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	3304      	adds	r3, #4
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	f000 f9cd 	bl	800ee1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2201      	movs	r2, #1
 800ea86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2201      	movs	r2, #1
 800ea96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2201      	movs	r2, #1
 800eaae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2201      	movs	r2, #1
 800eab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2201      	movs	r2, #1
 800eabe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2201      	movs	r2, #1
 800eace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d001      	beq.n	800eaf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e04e      	b.n	800eb92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2202      	movs	r2, #2
 800eaf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68da      	ldr	r2, [r3, #12]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f042 0201 	orr.w	r2, r2, #1
 800eb0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4a23      	ldr	r2, [pc, #140]	; (800eba0 <HAL_TIM_Base_Start_IT+0xc4>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d022      	beq.n	800eb5c <HAL_TIM_Base_Start_IT+0x80>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb1e:	d01d      	beq.n	800eb5c <HAL_TIM_Base_Start_IT+0x80>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a1f      	ldr	r2, [pc, #124]	; (800eba4 <HAL_TIM_Base_Start_IT+0xc8>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d018      	beq.n	800eb5c <HAL_TIM_Base_Start_IT+0x80>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4a1e      	ldr	r2, [pc, #120]	; (800eba8 <HAL_TIM_Base_Start_IT+0xcc>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d013      	beq.n	800eb5c <HAL_TIM_Base_Start_IT+0x80>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a1c      	ldr	r2, [pc, #112]	; (800ebac <HAL_TIM_Base_Start_IT+0xd0>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d00e      	beq.n	800eb5c <HAL_TIM_Base_Start_IT+0x80>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a1b      	ldr	r2, [pc, #108]	; (800ebb0 <HAL_TIM_Base_Start_IT+0xd4>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d009      	beq.n	800eb5c <HAL_TIM_Base_Start_IT+0x80>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a19      	ldr	r2, [pc, #100]	; (800ebb4 <HAL_TIM_Base_Start_IT+0xd8>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d004      	beq.n	800eb5c <HAL_TIM_Base_Start_IT+0x80>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4a18      	ldr	r2, [pc, #96]	; (800ebb8 <HAL_TIM_Base_Start_IT+0xdc>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d111      	bne.n	800eb80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	689b      	ldr	r3, [r3, #8]
 800eb62:	f003 0307 	and.w	r3, r3, #7
 800eb66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2b06      	cmp	r3, #6
 800eb6c:	d010      	beq.n	800eb90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f042 0201 	orr.w	r2, r2, #1
 800eb7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb7e:	e007      	b.n	800eb90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f042 0201 	orr.w	r2, r2, #1
 800eb8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3714      	adds	r7, #20
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop
 800eba0:	40010000 	.word	0x40010000
 800eba4:	40000400 	.word	0x40000400
 800eba8:	40000800 	.word	0x40000800
 800ebac:	40000c00 	.word	0x40000c00
 800ebb0:	40010400 	.word	0x40010400
 800ebb4:	40014000 	.word	0x40014000
 800ebb8:	40001800 	.word	0x40001800

0800ebbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	691b      	ldr	r3, [r3, #16]
 800ebca:	f003 0302 	and.w	r3, r3, #2
 800ebce:	2b02      	cmp	r3, #2
 800ebd0:	d122      	bne.n	800ec18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	f003 0302 	and.w	r3, r3, #2
 800ebdc:	2b02      	cmp	r3, #2
 800ebde:	d11b      	bne.n	800ec18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f06f 0202 	mvn.w	r2, #2
 800ebe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2201      	movs	r2, #1
 800ebee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	699b      	ldr	r3, [r3, #24]
 800ebf6:	f003 0303 	and.w	r3, r3, #3
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d003      	beq.n	800ec06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 f8ee 	bl	800ede0 <HAL_TIM_IC_CaptureCallback>
 800ec04:	e005      	b.n	800ec12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 f8e0 	bl	800edcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 f8f1 	bl	800edf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2200      	movs	r2, #0
 800ec16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	691b      	ldr	r3, [r3, #16]
 800ec1e:	f003 0304 	and.w	r3, r3, #4
 800ec22:	2b04      	cmp	r3, #4
 800ec24:	d122      	bne.n	800ec6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	f003 0304 	and.w	r3, r3, #4
 800ec30:	2b04      	cmp	r3, #4
 800ec32:	d11b      	bne.n	800ec6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f06f 0204 	mvn.w	r2, #4
 800ec3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2202      	movs	r2, #2
 800ec42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	699b      	ldr	r3, [r3, #24]
 800ec4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d003      	beq.n	800ec5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f8c4 	bl	800ede0 <HAL_TIM_IC_CaptureCallback>
 800ec58:	e005      	b.n	800ec66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 f8b6 	bl	800edcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f8c7 	bl	800edf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	691b      	ldr	r3, [r3, #16]
 800ec72:	f003 0308 	and.w	r3, r3, #8
 800ec76:	2b08      	cmp	r3, #8
 800ec78:	d122      	bne.n	800ecc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	f003 0308 	and.w	r3, r3, #8
 800ec84:	2b08      	cmp	r3, #8
 800ec86:	d11b      	bne.n	800ecc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f06f 0208 	mvn.w	r2, #8
 800ec90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2204      	movs	r2, #4
 800ec96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	69db      	ldr	r3, [r3, #28]
 800ec9e:	f003 0303 	and.w	r3, r3, #3
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d003      	beq.n	800ecae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f000 f89a 	bl	800ede0 <HAL_TIM_IC_CaptureCallback>
 800ecac:	e005      	b.n	800ecba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 f88c 	bl	800edcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 f89d 	bl	800edf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	691b      	ldr	r3, [r3, #16]
 800ecc6:	f003 0310 	and.w	r3, r3, #16
 800ecca:	2b10      	cmp	r3, #16
 800eccc:	d122      	bne.n	800ed14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	f003 0310 	and.w	r3, r3, #16
 800ecd8:	2b10      	cmp	r3, #16
 800ecda:	d11b      	bne.n	800ed14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f06f 0210 	mvn.w	r2, #16
 800ece4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2208      	movs	r2, #8
 800ecea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	69db      	ldr	r3, [r3, #28]
 800ecf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d003      	beq.n	800ed02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f000 f870 	bl	800ede0 <HAL_TIM_IC_CaptureCallback>
 800ed00:	e005      	b.n	800ed0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f862 	bl	800edcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 f873 	bl	800edf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	691b      	ldr	r3, [r3, #16]
 800ed1a:	f003 0301 	and.w	r3, r3, #1
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d10e      	bne.n	800ed40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	f003 0301 	and.w	r3, r3, #1
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d107      	bne.n	800ed40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f06f 0201 	mvn.w	r2, #1
 800ed38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7f7 fac6 	bl	80062cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed4a:	2b80      	cmp	r3, #128	; 0x80
 800ed4c:	d10e      	bne.n	800ed6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed58:	2b80      	cmp	r3, #128	; 0x80
 800ed5a:	d107      	bne.n	800ed6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ed64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 f97e 	bl	800f068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed76:	2b40      	cmp	r3, #64	; 0x40
 800ed78:	d10e      	bne.n	800ed98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed84:	2b40      	cmp	r3, #64	; 0x40
 800ed86:	d107      	bne.n	800ed98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 f838 	bl	800ee08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	691b      	ldr	r3, [r3, #16]
 800ed9e:	f003 0320 	and.w	r3, r3, #32
 800eda2:	2b20      	cmp	r3, #32
 800eda4:	d10e      	bne.n	800edc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	f003 0320 	and.w	r3, r3, #32
 800edb0:	2b20      	cmp	r3, #32
 800edb2:	d107      	bne.n	800edc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f06f 0220 	mvn.w	r2, #32
 800edbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f948 	bl	800f054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800edd4:	bf00      	nop
 800edd6:	370c      	adds	r7, #12
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ede8:	bf00      	nop
 800edea:	370c      	adds	r7, #12
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800edfc:	bf00      	nop
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4a40      	ldr	r2, [pc, #256]	; (800ef30 <TIM_Base_SetConfig+0x114>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d013      	beq.n	800ee5c <TIM_Base_SetConfig+0x40>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee3a:	d00f      	beq.n	800ee5c <TIM_Base_SetConfig+0x40>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4a3d      	ldr	r2, [pc, #244]	; (800ef34 <TIM_Base_SetConfig+0x118>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d00b      	beq.n	800ee5c <TIM_Base_SetConfig+0x40>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4a3c      	ldr	r2, [pc, #240]	; (800ef38 <TIM_Base_SetConfig+0x11c>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d007      	beq.n	800ee5c <TIM_Base_SetConfig+0x40>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	4a3b      	ldr	r2, [pc, #236]	; (800ef3c <TIM_Base_SetConfig+0x120>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d003      	beq.n	800ee5c <TIM_Base_SetConfig+0x40>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4a3a      	ldr	r2, [pc, #232]	; (800ef40 <TIM_Base_SetConfig+0x124>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d108      	bne.n	800ee6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	68fa      	ldr	r2, [r7, #12]
 800ee6a:	4313      	orrs	r3, r2
 800ee6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	4a2f      	ldr	r2, [pc, #188]	; (800ef30 <TIM_Base_SetConfig+0x114>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d02b      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee7c:	d027      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4a2c      	ldr	r2, [pc, #176]	; (800ef34 <TIM_Base_SetConfig+0x118>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d023      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	4a2b      	ldr	r2, [pc, #172]	; (800ef38 <TIM_Base_SetConfig+0x11c>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d01f      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	4a2a      	ldr	r2, [pc, #168]	; (800ef3c <TIM_Base_SetConfig+0x120>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d01b      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	4a29      	ldr	r2, [pc, #164]	; (800ef40 <TIM_Base_SetConfig+0x124>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d017      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	4a28      	ldr	r2, [pc, #160]	; (800ef44 <TIM_Base_SetConfig+0x128>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d013      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4a27      	ldr	r2, [pc, #156]	; (800ef48 <TIM_Base_SetConfig+0x12c>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d00f      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	4a26      	ldr	r2, [pc, #152]	; (800ef4c <TIM_Base_SetConfig+0x130>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d00b      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	4a25      	ldr	r2, [pc, #148]	; (800ef50 <TIM_Base_SetConfig+0x134>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d007      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4a24      	ldr	r2, [pc, #144]	; (800ef54 <TIM_Base_SetConfig+0x138>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d003      	beq.n	800eece <TIM_Base_SetConfig+0xb2>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	4a23      	ldr	r2, [pc, #140]	; (800ef58 <TIM_Base_SetConfig+0x13c>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d108      	bne.n	800eee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	68fa      	ldr	r2, [r7, #12]
 800eedc:	4313      	orrs	r3, r2
 800eede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	695b      	ldr	r3, [r3, #20]
 800eeea:	4313      	orrs	r3, r2
 800eeec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	689a      	ldr	r2, [r3, #8]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a0a      	ldr	r2, [pc, #40]	; (800ef30 <TIM_Base_SetConfig+0x114>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d003      	beq.n	800ef14 <TIM_Base_SetConfig+0xf8>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a0c      	ldr	r2, [pc, #48]	; (800ef40 <TIM_Base_SetConfig+0x124>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d103      	bne.n	800ef1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	691a      	ldr	r2, [r3, #16]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	615a      	str	r2, [r3, #20]
}
 800ef22:	bf00      	nop
 800ef24:	3714      	adds	r7, #20
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop
 800ef30:	40010000 	.word	0x40010000
 800ef34:	40000400 	.word	0x40000400
 800ef38:	40000800 	.word	0x40000800
 800ef3c:	40000c00 	.word	0x40000c00
 800ef40:	40010400 	.word	0x40010400
 800ef44:	40014000 	.word	0x40014000
 800ef48:	40014400 	.word	0x40014400
 800ef4c:	40014800 	.word	0x40014800
 800ef50:	40001800 	.word	0x40001800
 800ef54:	40001c00 	.word	0x40001c00
 800ef58:	40002000 	.word	0x40002000

0800ef5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b085      	sub	sp, #20
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d101      	bne.n	800ef74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef70:	2302      	movs	r3, #2
 800ef72:	e05a      	b.n	800f02a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2202      	movs	r2, #2
 800ef80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	689b      	ldr	r3, [r3, #8]
 800ef92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	4313      	orrs	r3, r2
 800efa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4a21      	ldr	r2, [pc, #132]	; (800f038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d022      	beq.n	800effe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efc0:	d01d      	beq.n	800effe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4a1d      	ldr	r2, [pc, #116]	; (800f03c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d018      	beq.n	800effe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4a1b      	ldr	r2, [pc, #108]	; (800f040 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d013      	beq.n	800effe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	4a1a      	ldr	r2, [pc, #104]	; (800f044 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d00e      	beq.n	800effe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a18      	ldr	r2, [pc, #96]	; (800f048 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d009      	beq.n	800effe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4a17      	ldr	r2, [pc, #92]	; (800f04c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d004      	beq.n	800effe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a15      	ldr	r2, [pc, #84]	; (800f050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d10c      	bne.n	800f018 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	68ba      	ldr	r2, [r7, #8]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	68ba      	ldr	r2, [r7, #8]
 800f016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2201      	movs	r2, #1
 800f01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3714      	adds	r7, #20
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	40010000 	.word	0x40010000
 800f03c:	40000400 	.word	0x40000400
 800f040:	40000800 	.word	0x40000800
 800f044:	40000c00 	.word	0x40000c00
 800f048:	40010400 	.word	0x40010400
 800f04c:	40014000 	.word	0x40014000
 800f050:	40001800 	.word	0x40001800

0800f054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f05c:	bf00      	nop
 800f05e:	370c      	adds	r7, #12
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr

0800f068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f068:	b480      	push	{r7}
 800f06a:	b083      	sub	sp, #12
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f070:	bf00      	nop
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f07c:	b084      	sub	sp, #16
 800f07e:	b480      	push	{r7}
 800f080:	b085      	sub	sp, #20
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
 800f086:	f107 001c 	add.w	r0, r7, #28
 800f08a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f08e:	2300      	movs	r3, #0
 800f090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f092:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f094:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f096:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f09a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f09e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f0a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f0a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f0b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f0ba:	68fa      	ldr	r2, [r7, #12]
 800f0bc:	431a      	orrs	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f0c2:	2300      	movs	r3, #0
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3714      	adds	r7, #20
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	b004      	add	sp, #16
 800f0d0:	4770      	bx	lr

0800f0d2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f0d2:	b480      	push	{r7}
 800f0d4:	b083      	sub	sp, #12
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	370c      	adds	r7, #12
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr

0800f0ec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr

0800f10e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f10e:	b580      	push	{r7, lr}
 800f110:	b082      	sub	sp, #8
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2203      	movs	r2, #3
 800f11a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f11c:	2002      	movs	r0, #2
 800f11e:	f7f7 fdc9 	bl	8006cb4 <HAL_Delay>
  
  return HAL_OK;
 800f122:	2300      	movs	r3, #0
}
 800f124:	4618      	mov	r0, r3
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f003 0303 	and.w	r3, r3, #3
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	370c      	adds	r7, #12
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f166:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f16c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f172:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	4313      	orrs	r3, r2
 800f178:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f182:	f023 030f 	bic.w	r3, r3, #15
 800f186:	68fa      	ldr	r2, [r7, #12]
 800f188:	431a      	orrs	r2, r3
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3714      	adds	r7, #20
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	691b      	ldr	r3, [r3, #16]
 800f1a8:	b2db      	uxtb	r3, r3
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	370c      	adds	r7, #12
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f1b6:	b480      	push	{r7}
 800f1b8:	b085      	sub	sp, #20
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	3314      	adds	r3, #20
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
}  
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3714      	adds	r7, #20
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	685a      	ldr	r2, [r3, #4]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f202:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f208:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f20e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f210:	68fa      	ldr	r2, [r7, #12]
 800f212:	4313      	orrs	r3, r2
 800f214:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f21a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	431a      	orrs	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f226:	2300      	movs	r3, #0

}
 800f228:	4618      	mov	r0, r3
 800f22a:	3714      	adds	r7, #20
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b088      	sub	sp, #32
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f242:	2310      	movs	r3, #16
 800f244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f246:	2340      	movs	r3, #64	; 0x40
 800f248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f24a:	2300      	movs	r3, #0
 800f24c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f254:	f107 0308 	add.w	r3, r7, #8
 800f258:	4619      	mov	r1, r3
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7ff ff74 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f260:	f241 3288 	movw	r2, #5000	; 0x1388
 800f264:	2110      	movs	r1, #16
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 fa44 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f26c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f26e:	69fb      	ldr	r3, [r7, #28]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3720      	adds	r7, #32
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b088      	sub	sp, #32
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f286:	2311      	movs	r3, #17
 800f288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f28a:	2340      	movs	r3, #64	; 0x40
 800f28c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f28e:	2300      	movs	r3, #0
 800f290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f296:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f298:	f107 0308 	add.w	r3, r7, #8
 800f29c:	4619      	mov	r1, r3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7ff ff52 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f2a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2a8:	2111      	movs	r1, #17
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 fa22 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f2b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2b2:	69fb      	ldr	r3, [r7, #28]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3720      	adds	r7, #32
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b088      	sub	sp, #32
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f2ca:	2312      	movs	r3, #18
 800f2cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f2ce:	2340      	movs	r3, #64	; 0x40
 800f2d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f2d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f2dc:	f107 0308 	add.w	r3, r7, #8
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7ff ff30 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f2e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2ec:	2112      	movs	r1, #18
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 fa00 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f2f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2f6:	69fb      	ldr	r3, [r7, #28]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3720      	adds	r7, #32
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b088      	sub	sp, #32
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f30e:	2318      	movs	r3, #24
 800f310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f312:	2340      	movs	r3, #64	; 0x40
 800f314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f316:	2300      	movs	r3, #0
 800f318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f31e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f320:	f107 0308 	add.w	r3, r7, #8
 800f324:	4619      	mov	r1, r3
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f7ff ff0e 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f32c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f330:	2118      	movs	r1, #24
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 f9de 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f33a:	69fb      	ldr	r3, [r7, #28]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3720      	adds	r7, #32
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b088      	sub	sp, #32
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f352:	2319      	movs	r3, #25
 800f354:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f356:	2340      	movs	r3, #64	; 0x40
 800f358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f35a:	2300      	movs	r3, #0
 800f35c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f35e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f362:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f364:	f107 0308 	add.w	r3, r7, #8
 800f368:	4619      	mov	r1, r3
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f7ff feec 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f370:	f241 3288 	movw	r2, #5000	; 0x1388
 800f374:	2119      	movs	r1, #25
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 f9bc 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f37c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f37e:	69fb      	ldr	r3, [r7, #28]
}
 800f380:	4618      	mov	r0, r3
 800f382:	3720      	adds	r7, #32
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b088      	sub	sp, #32
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f390:	2300      	movs	r3, #0
 800f392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f394:	230c      	movs	r3, #12
 800f396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f398:	2340      	movs	r3, #64	; 0x40
 800f39a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f39c:	2300      	movs	r3, #0
 800f39e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f3a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f3a6:	f107 0308 	add.w	r3, r7, #8
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f7ff fecb 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f3b2:	4a05      	ldr	r2, [pc, #20]	; (800f3c8 <SDMMC_CmdStopTransfer+0x40>)
 800f3b4:	210c      	movs	r1, #12
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f000 f99c 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f3bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3be:	69fb      	ldr	r3, [r7, #28]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3720      	adds	r7, #32
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	05f5e100 	.word	0x05f5e100

0800f3cc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b08a      	sub	sp, #40	; 0x28
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f3dc:	2307      	movs	r3, #7
 800f3de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f3e0:	2340      	movs	r3, #64	; 0x40
 800f3e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f3e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3ec:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f3ee:	f107 0310 	add.w	r3, r7, #16
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f7ff fea7 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f3fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3fe:	2107      	movs	r1, #7
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	f000 f977 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f406:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3728      	adds	r7, #40	; 0x28
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b088      	sub	sp, #32
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f41a:	2300      	movs	r3, #0
 800f41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f41e:	2300      	movs	r3, #0
 800f420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f422:	2300      	movs	r3, #0
 800f424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f426:	2300      	movs	r3, #0
 800f428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f42e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f430:	f107 0308 	add.w	r3, r7, #8
 800f434:	4619      	mov	r1, r3
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff fe86 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 f92d 	bl	800f69c <SDMMC_GetCmdError>
 800f442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f444:	69fb      	ldr	r3, [r7, #28]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3720      	adds	r7, #32
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f44e:	b580      	push	{r7, lr}
 800f450:	b088      	sub	sp, #32
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f456:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f45a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f45c:	2308      	movs	r3, #8
 800f45e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f460:	2340      	movs	r3, #64	; 0x40
 800f462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f464:	2300      	movs	r3, #0
 800f466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f46c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f46e:	f107 0308 	add.w	r3, r7, #8
 800f472:	4619      	mov	r1, r3
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7ff fe67 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 fb24 	bl	800fac8 <SDMMC_GetCmdResp7>
 800f480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f482:	69fb      	ldr	r3, [r7, #28]
}
 800f484:	4618      	mov	r0, r3
 800f486:	3720      	adds	r7, #32
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b088      	sub	sp, #32
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f49a:	2337      	movs	r3, #55	; 0x37
 800f49c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f49e:	2340      	movs	r3, #64	; 0x40
 800f4a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f4a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f4ac:	f107 0308 	add.w	r3, r7, #8
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7ff fe48 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f4b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4bc:	2137      	movs	r1, #55	; 0x37
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 f918 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f4c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4c6:	69fb      	ldr	r3, [r7, #28]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3720      	adds	r7, #32
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b088      	sub	sp, #32
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f4e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f4e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f4e6:	2329      	movs	r3, #41	; 0x29
 800f4e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f4ea:	2340      	movs	r3, #64	; 0x40
 800f4ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f4f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f4f8:	f107 0308 	add.w	r3, r7, #8
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7ff fe22 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 fa2b 	bl	800f960 <SDMMC_GetCmdResp3>
 800f50a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f50c:	69fb      	ldr	r3, [r7, #28]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3720      	adds	r7, #32
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b088      	sub	sp, #32
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f524:	2306      	movs	r3, #6
 800f526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f528:	2340      	movs	r3, #64	; 0x40
 800f52a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f52c:	2300      	movs	r3, #0
 800f52e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f534:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f536:	f107 0308 	add.w	r3, r7, #8
 800f53a:	4619      	mov	r1, r3
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7ff fe03 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f542:	f241 3288 	movw	r2, #5000	; 0x1388
 800f546:	2106      	movs	r1, #6
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f000 f8d3 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f54e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f550:	69fb      	ldr	r3, [r7, #28]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3720      	adds	r7, #32
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b088      	sub	sp, #32
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f562:	2300      	movs	r3, #0
 800f564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f566:	2333      	movs	r3, #51	; 0x33
 800f568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f56a:	2340      	movs	r3, #64	; 0x40
 800f56c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f56e:	2300      	movs	r3, #0
 800f570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f576:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f578:	f107 0308 	add.w	r3, r7, #8
 800f57c:	4619      	mov	r1, r3
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f7ff fde2 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f584:	f241 3288 	movw	r2, #5000	; 0x1388
 800f588:	2133      	movs	r1, #51	; 0x33
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 f8b2 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f592:	69fb      	ldr	r3, [r7, #28]
}
 800f594:	4618      	mov	r0, r3
 800f596:	3720      	adds	r7, #32
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b088      	sub	sp, #32
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f5a8:	2302      	movs	r3, #2
 800f5aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f5ac:	23c0      	movs	r3, #192	; 0xc0
 800f5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f5b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f5ba:	f107 0308 	add.w	r3, r7, #8
 800f5be:	4619      	mov	r1, r3
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7ff fdc1 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 f982 	bl	800f8d0 <SDMMC_GetCmdResp2>
 800f5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5ce:	69fb      	ldr	r3, [r7, #28]
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3720      	adds	r7, #32
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b088      	sub	sp, #32
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f5e6:	2309      	movs	r3, #9
 800f5e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f5ea:	23c0      	movs	r3, #192	; 0xc0
 800f5ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f5f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f5f8:	f107 0308 	add.w	r3, r7, #8
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f7ff fda2 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f000 f963 	bl	800f8d0 <SDMMC_GetCmdResp2>
 800f60a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f60c:	69fb      	ldr	r3, [r7, #28]
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3720      	adds	r7, #32
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}

0800f616 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f616:	b580      	push	{r7, lr}
 800f618:	b088      	sub	sp, #32
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
 800f61e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f620:	2300      	movs	r3, #0
 800f622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f624:	2303      	movs	r3, #3
 800f626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f628:	2340      	movs	r3, #64	; 0x40
 800f62a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f62c:	2300      	movs	r3, #0
 800f62e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f634:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f636:	f107 0308 	add.w	r3, r7, #8
 800f63a:	4619      	mov	r1, r3
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff fd83 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f642:	683a      	ldr	r2, [r7, #0]
 800f644:	2103      	movs	r1, #3
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 f9c8 	bl	800f9dc <SDMMC_GetCmdResp6>
 800f64c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f64e:	69fb      	ldr	r3, [r7, #28]
}
 800f650:	4618      	mov	r0, r3
 800f652:	3720      	adds	r7, #32
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b088      	sub	sp, #32
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f666:	230d      	movs	r3, #13
 800f668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f66a:	2340      	movs	r3, #64	; 0x40
 800f66c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f66e:	2300      	movs	r3, #0
 800f670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f676:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f678:	f107 0308 	add.w	r3, r7, #8
 800f67c:	4619      	mov	r1, r3
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f7ff fd62 	bl	800f148 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800f684:	f241 3288 	movw	r2, #5000	; 0x1388
 800f688:	210d      	movs	r1, #13
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 f832 	bl	800f6f4 <SDMMC_GetCmdResp1>
 800f690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f692:	69fb      	ldr	r3, [r7, #28]
}
 800f694:	4618      	mov	r0, r3
 800f696:	3720      	adds	r7, #32
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b085      	sub	sp, #20
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f6a4:	4b11      	ldr	r3, [pc, #68]	; (800f6ec <SDMMC_GetCmdError+0x50>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4a11      	ldr	r2, [pc, #68]	; (800f6f0 <SDMMC_GetCmdError+0x54>)
 800f6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f6ae:	0a5b      	lsrs	r3, r3, #9
 800f6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6b4:	fb02 f303 	mul.w	r3, r2, r3
 800f6b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	1e5a      	subs	r2, r3, #1
 800f6be:	60fa      	str	r2, [r7, #12]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d102      	bne.n	800f6ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f6c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f6c8:	e009      	b.n	800f6de <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d0f1      	beq.n	800f6ba <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	22c5      	movs	r2, #197	; 0xc5
 800f6da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3714      	adds	r7, #20
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop
 800f6ec:	20000000 	.word	0x20000000
 800f6f0:	10624dd3 	.word	0x10624dd3

0800f6f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b088      	sub	sp, #32
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	60f8      	str	r0, [r7, #12]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	607a      	str	r2, [r7, #4]
 800f700:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f702:	4b70      	ldr	r3, [pc, #448]	; (800f8c4 <SDMMC_GetCmdResp1+0x1d0>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4a70      	ldr	r2, [pc, #448]	; (800f8c8 <SDMMC_GetCmdResp1+0x1d4>)
 800f708:	fba2 2303 	umull	r2, r3, r2, r3
 800f70c:	0a5a      	lsrs	r2, r3, #9
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	fb02 f303 	mul.w	r3, r2, r3
 800f714:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	1e5a      	subs	r2, r3, #1
 800f71a:	61fa      	str	r2, [r7, #28]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d102      	bne.n	800f726 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f720:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f724:	e0c9      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f72a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f732:	2b00      	cmp	r3, #0
 800f734:	d0ef      	beq.n	800f716 <SDMMC_GetCmdResp1+0x22>
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d1ea      	bne.n	800f716 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f744:	f003 0304 	and.w	r3, r3, #4
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d004      	beq.n	800f756 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	2204      	movs	r2, #4
 800f750:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f752:	2304      	movs	r3, #4
 800f754:	e0b1      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f75a:	f003 0301 	and.w	r3, r3, #1
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d004      	beq.n	800f76c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2201      	movs	r2, #1
 800f766:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f768:	2301      	movs	r3, #1
 800f76a:	e0a6      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	22c5      	movs	r2, #197	; 0xc5
 800f770:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f772:	68f8      	ldr	r0, [r7, #12]
 800f774:	f7ff fd12 	bl	800f19c <SDIO_GetCommandResponse>
 800f778:	4603      	mov	r3, r0
 800f77a:	461a      	mov	r2, r3
 800f77c:	7afb      	ldrb	r3, [r7, #11]
 800f77e:	4293      	cmp	r3, r2
 800f780:	d001      	beq.n	800f786 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f782:	2301      	movs	r3, #1
 800f784:	e099      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f786:	2100      	movs	r1, #0
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f7ff fd14 	bl	800f1b6 <SDIO_GetResponse>
 800f78e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f790:	697a      	ldr	r2, [r7, #20]
 800f792:	4b4e      	ldr	r3, [pc, #312]	; (800f8cc <SDMMC_GetCmdResp1+0x1d8>)
 800f794:	4013      	ands	r3, r2
 800f796:	2b00      	cmp	r3, #0
 800f798:	d101      	bne.n	800f79e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f79a:	2300      	movs	r3, #0
 800f79c:	e08d      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	da02      	bge.n	800f7aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f7a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f7a8:	e087      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d001      	beq.n	800f7b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f7b4:	2340      	movs	r3, #64	; 0x40
 800f7b6:	e080      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d001      	beq.n	800f7c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f7c2:	2380      	movs	r3, #128	; 0x80
 800f7c4:	e079      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d002      	beq.n	800f7d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f7d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f7d4:	e071      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d002      	beq.n	800f7e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f7e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7e4:	e069      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d002      	beq.n	800f7f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f7f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7f4:	e061      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d002      	beq.n	800f806 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f800:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f804:	e059      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d002      	beq.n	800f816 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f814:	e051      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d002      	beq.n	800f826 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f824:	e049      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f830:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f834:	e041      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d002      	beq.n	800f846 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f844:	e039      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d002      	beq.n	800f856 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f854:	e031      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d002      	beq.n	800f866 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f860:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f864:	e029      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f870:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f874:	e021      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d002      	beq.n	800f886 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f880:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f884:	e019      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d002      	beq.n	800f896 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f890:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f894:	e011      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f8a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f8a4:	e009      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f003 0308 	and.w	r3, r3, #8
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d002      	beq.n	800f8b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f8b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f8b4:	e001      	b.n	800f8ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f8b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3720      	adds	r7, #32
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	20000000 	.word	0x20000000
 800f8c8:	10624dd3 	.word	0x10624dd3
 800f8cc:	fdffe008 	.word	0xfdffe008

0800f8d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b085      	sub	sp, #20
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f8d8:	4b1f      	ldr	r3, [pc, #124]	; (800f958 <SDMMC_GetCmdResp2+0x88>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4a1f      	ldr	r2, [pc, #124]	; (800f95c <SDMMC_GetCmdResp2+0x8c>)
 800f8de:	fba2 2303 	umull	r2, r3, r2, r3
 800f8e2:	0a5b      	lsrs	r3, r3, #9
 800f8e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8e8:	fb02 f303 	mul.w	r3, r2, r3
 800f8ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	1e5a      	subs	r2, r3, #1
 800f8f2:	60fa      	str	r2, [r7, #12]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d102      	bne.n	800f8fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f8f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f8fc:	e026      	b.n	800f94c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f902:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d0ef      	beq.n	800f8ee <SDMMC_GetCmdResp2+0x1e>
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f914:	2b00      	cmp	r3, #0
 800f916:	d1ea      	bne.n	800f8ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f91c:	f003 0304 	and.w	r3, r3, #4
 800f920:	2b00      	cmp	r3, #0
 800f922:	d004      	beq.n	800f92e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2204      	movs	r2, #4
 800f928:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f92a:	2304      	movs	r3, #4
 800f92c:	e00e      	b.n	800f94c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f932:	f003 0301 	and.w	r3, r3, #1
 800f936:	2b00      	cmp	r3, #0
 800f938:	d004      	beq.n	800f944 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2201      	movs	r2, #1
 800f93e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f940:	2301      	movs	r3, #1
 800f942:	e003      	b.n	800f94c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	22c5      	movs	r2, #197	; 0xc5
 800f948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3714      	adds	r7, #20
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr
 800f958:	20000000 	.word	0x20000000
 800f95c:	10624dd3 	.word	0x10624dd3

0800f960 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f968:	4b1a      	ldr	r3, [pc, #104]	; (800f9d4 <SDMMC_GetCmdResp3+0x74>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a1a      	ldr	r2, [pc, #104]	; (800f9d8 <SDMMC_GetCmdResp3+0x78>)
 800f96e:	fba2 2303 	umull	r2, r3, r2, r3
 800f972:	0a5b      	lsrs	r3, r3, #9
 800f974:	f241 3288 	movw	r2, #5000	; 0x1388
 800f978:	fb02 f303 	mul.w	r3, r2, r3
 800f97c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	1e5a      	subs	r2, r3, #1
 800f982:	60fa      	str	r2, [r7, #12]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d102      	bne.n	800f98e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f988:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f98c:	e01b      	b.n	800f9c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f992:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d0ef      	beq.n	800f97e <SDMMC_GetCmdResp3+0x1e>
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d1ea      	bne.n	800f97e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9ac:	f003 0304 	and.w	r3, r3, #4
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d004      	beq.n	800f9be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2204      	movs	r2, #4
 800f9b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f9ba:	2304      	movs	r3, #4
 800f9bc:	e003      	b.n	800f9c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	22c5      	movs	r2, #197	; 0xc5
 800f9c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f9c4:	2300      	movs	r3, #0
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3714      	adds	r7, #20
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop
 800f9d4:	20000000 	.word	0x20000000
 800f9d8:	10624dd3 	.word	0x10624dd3

0800f9dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b088      	sub	sp, #32
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	607a      	str	r2, [r7, #4]
 800f9e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f9ea:	4b35      	ldr	r3, [pc, #212]	; (800fac0 <SDMMC_GetCmdResp6+0xe4>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4a35      	ldr	r2, [pc, #212]	; (800fac4 <SDMMC_GetCmdResp6+0xe8>)
 800f9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f9f4:	0a5b      	lsrs	r3, r3, #9
 800f9f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9fa:	fb02 f303 	mul.w	r3, r2, r3
 800f9fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	1e5a      	subs	r2, r3, #1
 800fa04:	61fa      	str	r2, [r7, #28]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d102      	bne.n	800fa10 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fa0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa0e:	e052      	b.n	800fab6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa14:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fa16:	69bb      	ldr	r3, [r7, #24]
 800fa18:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d0ef      	beq.n	800fa00 <SDMMC_GetCmdResp6+0x24>
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1ea      	bne.n	800fa00 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa2e:	f003 0304 	and.w	r3, r3, #4
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d004      	beq.n	800fa40 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2204      	movs	r2, #4
 800fa3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fa3c:	2304      	movs	r3, #4
 800fa3e:	e03a      	b.n	800fab6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa44:	f003 0301 	and.w	r3, r3, #1
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d004      	beq.n	800fa56 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa52:	2301      	movs	r3, #1
 800fa54:	e02f      	b.n	800fab6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fa56:	68f8      	ldr	r0, [r7, #12]
 800fa58:	f7ff fba0 	bl	800f19c <SDIO_GetCommandResponse>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	461a      	mov	r2, r3
 800fa60:	7afb      	ldrb	r3, [r7, #11]
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d001      	beq.n	800fa6a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa66:	2301      	movs	r3, #1
 800fa68:	e025      	b.n	800fab6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	22c5      	movs	r2, #197	; 0xc5
 800fa6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fa70:	2100      	movs	r1, #0
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f7ff fb9f 	bl	800f1b6 <SDIO_GetResponse>
 800fa78:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d106      	bne.n	800fa92 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	0c1b      	lsrs	r3, r3, #16
 800fa88:	b29a      	uxth	r2, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	e011      	b.n	800fab6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d002      	beq.n	800faa2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fa9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800faa0:	e009      	b.n	800fab6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d002      	beq.n	800fab2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800faac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fab0:	e001      	b.n	800fab6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3720      	adds	r7, #32
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	20000000 	.word	0x20000000
 800fac4:	10624dd3 	.word	0x10624dd3

0800fac8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fad0:	4b22      	ldr	r3, [pc, #136]	; (800fb5c <SDMMC_GetCmdResp7+0x94>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a22      	ldr	r2, [pc, #136]	; (800fb60 <SDMMC_GetCmdResp7+0x98>)
 800fad6:	fba2 2303 	umull	r2, r3, r2, r3
 800fada:	0a5b      	lsrs	r3, r3, #9
 800fadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fae0:	fb02 f303 	mul.w	r3, r2, r3
 800fae4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	1e5a      	subs	r2, r3, #1
 800faea:	60fa      	str	r2, [r7, #12]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d102      	bne.n	800faf6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800faf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800faf4:	e02c      	b.n	800fb50 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fafa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d0ef      	beq.n	800fae6 <SDMMC_GetCmdResp7+0x1e>
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d1ea      	bne.n	800fae6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb14:	f003 0304 	and.w	r3, r3, #4
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d004      	beq.n	800fb26 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2204      	movs	r2, #4
 800fb20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb22:	2304      	movs	r3, #4
 800fb24:	e014      	b.n	800fb50 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb2a:	f003 0301 	and.w	r3, r3, #1
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d004      	beq.n	800fb3c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2201      	movs	r2, #1
 800fb36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e009      	b.n	800fb50 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d002      	beq.n	800fb4e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2240      	movs	r2, #64	; 0x40
 800fb4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fb4e:	2300      	movs	r3, #0
  
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3714      	adds	r7, #20
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr
 800fb5c:	20000000 	.word	0x20000000
 800fb60:	10624dd3 	.word	0x10624dd3

0800fb64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fb64:	b084      	sub	sp, #16
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b084      	sub	sp, #16
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
 800fb6e:	f107 001c 	add.w	r0, r7, #28
 800fb72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d122      	bne.n	800fbc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800fb90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68db      	ldr	r3, [r3, #12]
 800fb9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d105      	bne.n	800fbb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f001 fb16 	bl	80111e8 <USB_CoreReset>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	73fb      	strb	r3, [r7, #15]
 800fbc0:	e01a      	b.n	800fbf8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f001 fb0a 	bl	80111e8 <USB_CoreReset>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d106      	bne.n	800fbec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	639a      	str	r2, [r3, #56]	; 0x38
 800fbea:	e005      	b.n	800fbf8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d10b      	bne.n	800fc16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	689b      	ldr	r3, [r3, #8]
 800fc02:	f043 0206 	orr.w	r2, r3, #6
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	f043 0220 	orr.w	r2, r3, #32
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fc16:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3710      	adds	r7, #16
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc22:	b004      	add	sp, #16
 800fc24:	4770      	bx	lr
	...

0800fc28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b087      	sub	sp, #28
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	4613      	mov	r3, r2
 800fc34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fc36:	79fb      	ldrb	r3, [r7, #7]
 800fc38:	2b02      	cmp	r3, #2
 800fc3a:	d165      	bne.n	800fd08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	4a41      	ldr	r2, [pc, #260]	; (800fd44 <USB_SetTurnaroundTime+0x11c>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d906      	bls.n	800fc52 <USB_SetTurnaroundTime+0x2a>
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	4a40      	ldr	r2, [pc, #256]	; (800fd48 <USB_SetTurnaroundTime+0x120>)
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	d202      	bcs.n	800fc52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fc4c:	230f      	movs	r3, #15
 800fc4e:	617b      	str	r3, [r7, #20]
 800fc50:	e062      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	4a3c      	ldr	r2, [pc, #240]	; (800fd48 <USB_SetTurnaroundTime+0x120>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d306      	bcc.n	800fc68 <USB_SetTurnaroundTime+0x40>
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	4a3b      	ldr	r2, [pc, #236]	; (800fd4c <USB_SetTurnaroundTime+0x124>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d202      	bcs.n	800fc68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fc62:	230e      	movs	r3, #14
 800fc64:	617b      	str	r3, [r7, #20]
 800fc66:	e057      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	4a38      	ldr	r2, [pc, #224]	; (800fd4c <USB_SetTurnaroundTime+0x124>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d306      	bcc.n	800fc7e <USB_SetTurnaroundTime+0x56>
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	4a37      	ldr	r2, [pc, #220]	; (800fd50 <USB_SetTurnaroundTime+0x128>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d202      	bcs.n	800fc7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fc78:	230d      	movs	r3, #13
 800fc7a:	617b      	str	r3, [r7, #20]
 800fc7c:	e04c      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	4a33      	ldr	r2, [pc, #204]	; (800fd50 <USB_SetTurnaroundTime+0x128>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d306      	bcc.n	800fc94 <USB_SetTurnaroundTime+0x6c>
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	4a32      	ldr	r2, [pc, #200]	; (800fd54 <USB_SetTurnaroundTime+0x12c>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d802      	bhi.n	800fc94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fc8e:	230c      	movs	r3, #12
 800fc90:	617b      	str	r3, [r7, #20]
 800fc92:	e041      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	4a2f      	ldr	r2, [pc, #188]	; (800fd54 <USB_SetTurnaroundTime+0x12c>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d906      	bls.n	800fcaa <USB_SetTurnaroundTime+0x82>
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	4a2e      	ldr	r2, [pc, #184]	; (800fd58 <USB_SetTurnaroundTime+0x130>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d802      	bhi.n	800fcaa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fca4:	230b      	movs	r3, #11
 800fca6:	617b      	str	r3, [r7, #20]
 800fca8:	e036      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	4a2a      	ldr	r2, [pc, #168]	; (800fd58 <USB_SetTurnaroundTime+0x130>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d906      	bls.n	800fcc0 <USB_SetTurnaroundTime+0x98>
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	4a29      	ldr	r2, [pc, #164]	; (800fd5c <USB_SetTurnaroundTime+0x134>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d802      	bhi.n	800fcc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fcba:	230a      	movs	r3, #10
 800fcbc:	617b      	str	r3, [r7, #20]
 800fcbe:	e02b      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	4a26      	ldr	r2, [pc, #152]	; (800fd5c <USB_SetTurnaroundTime+0x134>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d906      	bls.n	800fcd6 <USB_SetTurnaroundTime+0xae>
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	4a25      	ldr	r2, [pc, #148]	; (800fd60 <USB_SetTurnaroundTime+0x138>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d202      	bcs.n	800fcd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fcd0:	2309      	movs	r3, #9
 800fcd2:	617b      	str	r3, [r7, #20]
 800fcd4:	e020      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	4a21      	ldr	r2, [pc, #132]	; (800fd60 <USB_SetTurnaroundTime+0x138>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d306      	bcc.n	800fcec <USB_SetTurnaroundTime+0xc4>
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	4a20      	ldr	r2, [pc, #128]	; (800fd64 <USB_SetTurnaroundTime+0x13c>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d802      	bhi.n	800fcec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fce6:	2308      	movs	r3, #8
 800fce8:	617b      	str	r3, [r7, #20]
 800fcea:	e015      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	4a1d      	ldr	r2, [pc, #116]	; (800fd64 <USB_SetTurnaroundTime+0x13c>)
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d906      	bls.n	800fd02 <USB_SetTurnaroundTime+0xda>
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	4a1c      	ldr	r2, [pc, #112]	; (800fd68 <USB_SetTurnaroundTime+0x140>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d202      	bcs.n	800fd02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fcfc:	2307      	movs	r3, #7
 800fcfe:	617b      	str	r3, [r7, #20]
 800fd00:	e00a      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fd02:	2306      	movs	r3, #6
 800fd04:	617b      	str	r3, [r7, #20]
 800fd06:	e007      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fd08:	79fb      	ldrb	r3, [r7, #7]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d102      	bne.n	800fd14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fd0e:	2309      	movs	r3, #9
 800fd10:	617b      	str	r3, [r7, #20]
 800fd12:	e001      	b.n	800fd18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fd14:	2309      	movs	r3, #9
 800fd16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	68da      	ldr	r2, [r3, #12]
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	029b      	lsls	r3, r3, #10
 800fd2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fd30:	431a      	orrs	r2, r3
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fd36:	2300      	movs	r3, #0
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	371c      	adds	r7, #28
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr
 800fd44:	00d8acbf 	.word	0x00d8acbf
 800fd48:	00e4e1c0 	.word	0x00e4e1c0
 800fd4c:	00f42400 	.word	0x00f42400
 800fd50:	01067380 	.word	0x01067380
 800fd54:	011a499f 	.word	0x011a499f
 800fd58:	01312cff 	.word	0x01312cff
 800fd5c:	014ca43f 	.word	0x014ca43f
 800fd60:	016e3600 	.word	0x016e3600
 800fd64:	01a6ab1f 	.word	0x01a6ab1f
 800fd68:	01e84800 	.word	0x01e84800

0800fd6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	689b      	ldr	r3, [r3, #8]
 800fd78:	f043 0201 	orr.w	r2, r3, #1
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	370c      	adds	r7, #12
 800fd86:	46bd      	mov	sp, r7
 800fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8c:	4770      	bx	lr

0800fd8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd8e:	b480      	push	{r7}
 800fd90:	b083      	sub	sp, #12
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	689b      	ldr	r3, [r3, #8]
 800fd9a:	f023 0201 	bic.w	r2, r3, #1
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fda2:	2300      	movs	r3, #0
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	460b      	mov	r3, r1
 800fdba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fdcc:	78fb      	ldrb	r3, [r7, #3]
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d115      	bne.n	800fdfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fdde:	2001      	movs	r0, #1
 800fde0:	f7f6 ff68 	bl	8006cb4 <HAL_Delay>
      ms++;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	3301      	adds	r3, #1
 800fde8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f001 f96c 	bl	80110c8 <USB_GetMode>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d01e      	beq.n	800fe34 <USB_SetCurrentMode+0x84>
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2b31      	cmp	r3, #49	; 0x31
 800fdfa:	d9f0      	bls.n	800fdde <USB_SetCurrentMode+0x2e>
 800fdfc:	e01a      	b.n	800fe34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fdfe:	78fb      	ldrb	r3, [r7, #3]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d115      	bne.n	800fe30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fe10:	2001      	movs	r0, #1
 800fe12:	f7f6 ff4f 	bl	8006cb4 <HAL_Delay>
      ms++;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f001 f953 	bl	80110c8 <USB_GetMode>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d005      	beq.n	800fe34 <USB_SetCurrentMode+0x84>
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2b31      	cmp	r3, #49	; 0x31
 800fe2c:	d9f0      	bls.n	800fe10 <USB_SetCurrentMode+0x60>
 800fe2e:	e001      	b.n	800fe34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fe30:	2301      	movs	r3, #1
 800fe32:	e005      	b.n	800fe40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2b32      	cmp	r3, #50	; 0x32
 800fe38:	d101      	bne.n	800fe3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	e000      	b.n	800fe40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fe3e:	2300      	movs	r3, #0
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3710      	adds	r7, #16
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe48:	b084      	sub	sp, #16
 800fe4a:	b580      	push	{r7, lr}
 800fe4c:	b086      	sub	sp, #24
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	6078      	str	r0, [r7, #4]
 800fe52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fe56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fe62:	2300      	movs	r3, #0
 800fe64:	613b      	str	r3, [r7, #16]
 800fe66:	e009      	b.n	800fe7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	3340      	adds	r3, #64	; 0x40
 800fe6e:	009b      	lsls	r3, r3, #2
 800fe70:	4413      	add	r3, r2
 800fe72:	2200      	movs	r2, #0
 800fe74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	613b      	str	r3, [r7, #16]
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	2b0e      	cmp	r3, #14
 800fe80:	d9f2      	bls.n	800fe68 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fe82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d11c      	bne.n	800fec2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	68fa      	ldr	r2, [r7, #12]
 800fe92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe96:	f043 0302 	orr.w	r3, r3, #2
 800fe9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	601a      	str	r2, [r3, #0]
 800fec0:	e005      	b.n	800fece <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fec6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fed4:	461a      	mov	r2, r3
 800fed6:	2300      	movs	r3, #0
 800fed8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fee0:	4619      	mov	r1, r3
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fee8:	461a      	mov	r2, r3
 800feea:	680b      	ldr	r3, [r1, #0]
 800feec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800feee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d10c      	bne.n	800ff0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d104      	bne.n	800ff04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fefa:	2100      	movs	r1, #0
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 f945 	bl	801018c <USB_SetDevSpeed>
 800ff02:	e008      	b.n	800ff16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ff04:	2101      	movs	r1, #1
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f940 	bl	801018c <USB_SetDevSpeed>
 800ff0c:	e003      	b.n	800ff16 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ff0e:	2103      	movs	r1, #3
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 f93b 	bl	801018c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ff16:	2110      	movs	r1, #16
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 f8f3 	bl	8010104 <USB_FlushTxFifo>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d001      	beq.n	800ff28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ff24:	2301      	movs	r3, #1
 800ff26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 f90f 	bl	801014c <USB_FlushRxFifo>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d001      	beq.n	800ff38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ff34:	2301      	movs	r3, #1
 800ff36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff3e:	461a      	mov	r2, r3
 800ff40:	2300      	movs	r3, #0
 800ff42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff56:	461a      	mov	r2, r3
 800ff58:	2300      	movs	r3, #0
 800ff5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	613b      	str	r3, [r7, #16]
 800ff60:	e043      	b.n	800ffea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	015a      	lsls	r2, r3, #5
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	4413      	add	r3, r2
 800ff6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff78:	d118      	bne.n	800ffac <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d10a      	bne.n	800ff96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	015a      	lsls	r2, r3, #5
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	4413      	add	r3, r2
 800ff88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff92:	6013      	str	r3, [r2, #0]
 800ff94:	e013      	b.n	800ffbe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	015a      	lsls	r2, r3, #5
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	4413      	add	r3, r2
 800ff9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ffa8:	6013      	str	r3, [r2, #0]
 800ffaa:	e008      	b.n	800ffbe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	015a      	lsls	r2, r3, #5
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb8:	461a      	mov	r2, r3
 800ffba:	2300      	movs	r3, #0
 800ffbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	015a      	lsls	r2, r3, #5
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffca:	461a      	mov	r2, r3
 800ffcc:	2300      	movs	r3, #0
 800ffce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	015a      	lsls	r2, r3, #5
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffdc:	461a      	mov	r2, r3
 800ffde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ffe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	613b      	str	r3, [r7, #16]
 800ffea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffec:	693a      	ldr	r2, [r7, #16]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d3b7      	bcc.n	800ff62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fff2:	2300      	movs	r3, #0
 800fff4:	613b      	str	r3, [r7, #16]
 800fff6:	e043      	b.n	8010080 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	015a      	lsls	r2, r3, #5
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	4413      	add	r3, r2
 8010000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801000a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801000e:	d118      	bne.n	8010042 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d10a      	bne.n	801002c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	015a      	lsls	r2, r3, #5
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	4413      	add	r3, r2
 801001e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010022:	461a      	mov	r2, r3
 8010024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010028:	6013      	str	r3, [r2, #0]
 801002a:	e013      	b.n	8010054 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	015a      	lsls	r2, r3, #5
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	4413      	add	r3, r2
 8010034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010038:	461a      	mov	r2, r3
 801003a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801003e:	6013      	str	r3, [r2, #0]
 8010040:	e008      	b.n	8010054 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	015a      	lsls	r2, r3, #5
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	4413      	add	r3, r2
 801004a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801004e:	461a      	mov	r2, r3
 8010050:	2300      	movs	r3, #0
 8010052:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	015a      	lsls	r2, r3, #5
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	4413      	add	r3, r2
 801005c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010060:	461a      	mov	r2, r3
 8010062:	2300      	movs	r3, #0
 8010064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	015a      	lsls	r2, r3, #5
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	4413      	add	r3, r2
 801006e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010072:	461a      	mov	r2, r3
 8010074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	3301      	adds	r3, #1
 801007e:	613b      	str	r3, [r7, #16]
 8010080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010082:	693a      	ldr	r2, [r7, #16]
 8010084:	429a      	cmp	r2, r3
 8010086:	d3b7      	bcc.n	800fff8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801008e:	691b      	ldr	r3, [r3, #16]
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801009a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80100a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80100aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d105      	bne.n	80100bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	699b      	ldr	r3, [r3, #24]
 80100b4:	f043 0210 	orr.w	r2, r3, #16
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	699a      	ldr	r2, [r3, #24]
 80100c0:	4b0f      	ldr	r3, [pc, #60]	; (8010100 <USB_DevInit+0x2b8>)
 80100c2:	4313      	orrs	r3, r2
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80100c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d005      	beq.n	80100da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	699b      	ldr	r3, [r3, #24]
 80100d2:	f043 0208 	orr.w	r2, r3, #8
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80100da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d107      	bne.n	80100f0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	699b      	ldr	r3, [r3, #24]
 80100e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80100e8:	f043 0304 	orr.w	r3, r3, #4
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80100f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3718      	adds	r7, #24
 80100f6:	46bd      	mov	sp, r7
 80100f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80100fc:	b004      	add	sp, #16
 80100fe:	4770      	bx	lr
 8010100:	803c3800 	.word	0x803c3800

08010104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010104:	b480      	push	{r7}
 8010106:	b085      	sub	sp, #20
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801010e:	2300      	movs	r3, #0
 8010110:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	019b      	lsls	r3, r3, #6
 8010116:	f043 0220 	orr.w	r2, r3, #32
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	3301      	adds	r3, #1
 8010122:	60fb      	str	r3, [r7, #12]
 8010124:	4a08      	ldr	r2, [pc, #32]	; (8010148 <USB_FlushTxFifo+0x44>)
 8010126:	4293      	cmp	r3, r2
 8010128:	d901      	bls.n	801012e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801012a:	2303      	movs	r3, #3
 801012c:	e006      	b.n	801013c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	691b      	ldr	r3, [r3, #16]
 8010132:	f003 0320 	and.w	r3, r3, #32
 8010136:	2b20      	cmp	r3, #32
 8010138:	d0f1      	beq.n	801011e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801013a:	2300      	movs	r3, #0
}
 801013c:	4618      	mov	r0, r3
 801013e:	3714      	adds	r7, #20
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr
 8010148:	00030d40 	.word	0x00030d40

0801014c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801014c:	b480      	push	{r7}
 801014e:	b085      	sub	sp, #20
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010154:	2300      	movs	r3, #0
 8010156:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2210      	movs	r2, #16
 801015c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	3301      	adds	r3, #1
 8010162:	60fb      	str	r3, [r7, #12]
 8010164:	4a08      	ldr	r2, [pc, #32]	; (8010188 <USB_FlushRxFifo+0x3c>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d901      	bls.n	801016e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801016a:	2303      	movs	r3, #3
 801016c:	e006      	b.n	801017c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	691b      	ldr	r3, [r3, #16]
 8010172:	f003 0310 	and.w	r3, r3, #16
 8010176:	2b10      	cmp	r3, #16
 8010178:	d0f1      	beq.n	801015e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801017a:	2300      	movs	r3, #0
}
 801017c:	4618      	mov	r0, r3
 801017e:	3714      	adds	r7, #20
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr
 8010188:	00030d40 	.word	0x00030d40

0801018c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801018c:	b480      	push	{r7}
 801018e:	b085      	sub	sp, #20
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	460b      	mov	r3, r1
 8010196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101a2:	681a      	ldr	r2, [r3, #0]
 80101a4:	78fb      	ldrb	r3, [r7, #3]
 80101a6:	68f9      	ldr	r1, [r7, #12]
 80101a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101ac:	4313      	orrs	r3, r2
 80101ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80101b0:	2300      	movs	r3, #0
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3714      	adds	r7, #20
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr

080101be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80101be:	b480      	push	{r7}
 80101c0:	b087      	sub	sp, #28
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	f003 0306 	and.w	r3, r3, #6
 80101d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d102      	bne.n	80101e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80101de:	2300      	movs	r3, #0
 80101e0:	75fb      	strb	r3, [r7, #23]
 80101e2:	e00a      	b.n	80101fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d002      	beq.n	80101f0 <USB_GetDevSpeed+0x32>
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	2b06      	cmp	r3, #6
 80101ee:	d102      	bne.n	80101f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80101f0:	2302      	movs	r3, #2
 80101f2:	75fb      	strb	r3, [r7, #23]
 80101f4:	e001      	b.n	80101fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80101f6:	230f      	movs	r3, #15
 80101f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80101fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	371c      	adds	r7, #28
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr

08010208 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	785b      	ldrb	r3, [r3, #1]
 8010220:	2b01      	cmp	r3, #1
 8010222:	d13a      	bne.n	801029a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801022a:	69da      	ldr	r2, [r3, #28]
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	f003 030f 	and.w	r3, r3, #15
 8010234:	2101      	movs	r1, #1
 8010236:	fa01 f303 	lsl.w	r3, r1, r3
 801023a:	b29b      	uxth	r3, r3
 801023c:	68f9      	ldr	r1, [r7, #12]
 801023e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010242:	4313      	orrs	r3, r2
 8010244:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	015a      	lsls	r2, r3, #5
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	4413      	add	r3, r2
 801024e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010258:	2b00      	cmp	r3, #0
 801025a:	d155      	bne.n	8010308 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	015a      	lsls	r2, r3, #5
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	4413      	add	r3, r2
 8010264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	78db      	ldrb	r3, [r3, #3]
 8010276:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010278:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	059b      	lsls	r3, r3, #22
 801027e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010280:	4313      	orrs	r3, r2
 8010282:	68ba      	ldr	r2, [r7, #8]
 8010284:	0151      	lsls	r1, r2, #5
 8010286:	68fa      	ldr	r2, [r7, #12]
 8010288:	440a      	add	r2, r1
 801028a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801028e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010296:	6013      	str	r3, [r2, #0]
 8010298:	e036      	b.n	8010308 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102a0:	69da      	ldr	r2, [r3, #28]
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	f003 030f 	and.w	r3, r3, #15
 80102aa:	2101      	movs	r1, #1
 80102ac:	fa01 f303 	lsl.w	r3, r1, r3
 80102b0:	041b      	lsls	r3, r3, #16
 80102b2:	68f9      	ldr	r1, [r7, #12]
 80102b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102b8:	4313      	orrs	r3, r2
 80102ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	015a      	lsls	r2, r3, #5
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	4413      	add	r3, r2
 80102c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d11a      	bne.n	8010308 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	015a      	lsls	r2, r3, #5
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	4413      	add	r3, r2
 80102da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102de:	681a      	ldr	r2, [r3, #0]
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	78db      	ldrb	r3, [r3, #3]
 80102ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80102ee:	430b      	orrs	r3, r1
 80102f0:	4313      	orrs	r3, r2
 80102f2:	68ba      	ldr	r2, [r7, #8]
 80102f4:	0151      	lsls	r1, r2, #5
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	440a      	add	r2, r1
 80102fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010306:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	3714      	adds	r7, #20
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr
	...

08010318 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010318:	b480      	push	{r7}
 801031a:	b085      	sub	sp, #20
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	785b      	ldrb	r3, [r3, #1]
 8010330:	2b01      	cmp	r3, #1
 8010332:	d161      	bne.n	80103f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	015a      	lsls	r2, r3, #5
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	4413      	add	r3, r2
 801033c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801034a:	d11f      	bne.n	801038c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	015a      	lsls	r2, r3, #5
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	4413      	add	r3, r2
 8010354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	68ba      	ldr	r2, [r7, #8]
 801035c:	0151      	lsls	r1, r2, #5
 801035e:	68fa      	ldr	r2, [r7, #12]
 8010360:	440a      	add	r2, r1
 8010362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010366:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801036a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	015a      	lsls	r2, r3, #5
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	4413      	add	r3, r2
 8010374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	68ba      	ldr	r2, [r7, #8]
 801037c:	0151      	lsls	r1, r2, #5
 801037e:	68fa      	ldr	r2, [r7, #12]
 8010380:	440a      	add	r2, r1
 8010382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801038a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	f003 030f 	and.w	r3, r3, #15
 801039c:	2101      	movs	r1, #1
 801039e:	fa01 f303 	lsl.w	r3, r1, r3
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	43db      	mvns	r3, r3
 80103a6:	68f9      	ldr	r1, [r7, #12]
 80103a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103ac:	4013      	ands	r3, r2
 80103ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103b6:	69da      	ldr	r2, [r3, #28]
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	f003 030f 	and.w	r3, r3, #15
 80103c0:	2101      	movs	r1, #1
 80103c2:	fa01 f303 	lsl.w	r3, r1, r3
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	43db      	mvns	r3, r3
 80103ca:	68f9      	ldr	r1, [r7, #12]
 80103cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103d0:	4013      	ands	r3, r2
 80103d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	015a      	lsls	r2, r3, #5
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	4413      	add	r3, r2
 80103dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	0159      	lsls	r1, r3, #5
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	440b      	add	r3, r1
 80103ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103ee:	4619      	mov	r1, r3
 80103f0:	4b35      	ldr	r3, [pc, #212]	; (80104c8 <USB_DeactivateEndpoint+0x1b0>)
 80103f2:	4013      	ands	r3, r2
 80103f4:	600b      	str	r3, [r1, #0]
 80103f6:	e060      	b.n	80104ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	015a      	lsls	r2, r3, #5
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	4413      	add	r3, r2
 8010400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801040a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801040e:	d11f      	bne.n	8010450 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	015a      	lsls	r2, r3, #5
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	4413      	add	r3, r2
 8010418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	68ba      	ldr	r2, [r7, #8]
 8010420:	0151      	lsls	r1, r2, #5
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	440a      	add	r2, r1
 8010426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801042a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801042e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	015a      	lsls	r2, r3, #5
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	4413      	add	r3, r2
 8010438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	68ba      	ldr	r2, [r7, #8]
 8010440:	0151      	lsls	r1, r2, #5
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	440a      	add	r2, r1
 8010446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801044a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801044e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	f003 030f 	and.w	r3, r3, #15
 8010460:	2101      	movs	r1, #1
 8010462:	fa01 f303 	lsl.w	r3, r1, r3
 8010466:	041b      	lsls	r3, r3, #16
 8010468:	43db      	mvns	r3, r3
 801046a:	68f9      	ldr	r1, [r7, #12]
 801046c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010470:	4013      	ands	r3, r2
 8010472:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801047a:	69da      	ldr	r2, [r3, #28]
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	f003 030f 	and.w	r3, r3, #15
 8010484:	2101      	movs	r1, #1
 8010486:	fa01 f303 	lsl.w	r3, r1, r3
 801048a:	041b      	lsls	r3, r3, #16
 801048c:	43db      	mvns	r3, r3
 801048e:	68f9      	ldr	r1, [r7, #12]
 8010490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010494:	4013      	ands	r3, r2
 8010496:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	015a      	lsls	r2, r3, #5
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	4413      	add	r3, r2
 80104a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	0159      	lsls	r1, r3, #5
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	440b      	add	r3, r1
 80104ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104b2:	4619      	mov	r1, r3
 80104b4:	4b05      	ldr	r3, [pc, #20]	; (80104cc <USB_DeactivateEndpoint+0x1b4>)
 80104b6:	4013      	ands	r3, r2
 80104b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80104ba:	2300      	movs	r3, #0
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3714      	adds	r7, #20
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr
 80104c8:	ec337800 	.word	0xec337800
 80104cc:	eff37800 	.word	0xeff37800

080104d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b08a      	sub	sp, #40	; 0x28
 80104d4:	af02      	add	r7, sp, #8
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	4613      	mov	r3, r2
 80104dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	785b      	ldrb	r3, [r3, #1]
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	f040 815c 	bne.w	80107aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	695b      	ldr	r3, [r3, #20]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d132      	bne.n	8010560 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	015a      	lsls	r2, r3, #5
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	4413      	add	r3, r2
 8010502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010506:	691b      	ldr	r3, [r3, #16]
 8010508:	69ba      	ldr	r2, [r7, #24]
 801050a:	0151      	lsls	r1, r2, #5
 801050c:	69fa      	ldr	r2, [r7, #28]
 801050e:	440a      	add	r2, r1
 8010510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010514:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010518:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801051c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	015a      	lsls	r2, r3, #5
 8010522:	69fb      	ldr	r3, [r7, #28]
 8010524:	4413      	add	r3, r2
 8010526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801052a:	691b      	ldr	r3, [r3, #16]
 801052c:	69ba      	ldr	r2, [r7, #24]
 801052e:	0151      	lsls	r1, r2, #5
 8010530:	69fa      	ldr	r2, [r7, #28]
 8010532:	440a      	add	r2, r1
 8010534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801053c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	015a      	lsls	r2, r3, #5
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	4413      	add	r3, r2
 8010546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801054a:	691b      	ldr	r3, [r3, #16]
 801054c:	69ba      	ldr	r2, [r7, #24]
 801054e:	0151      	lsls	r1, r2, #5
 8010550:	69fa      	ldr	r2, [r7, #28]
 8010552:	440a      	add	r2, r1
 8010554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010558:	0cdb      	lsrs	r3, r3, #19
 801055a:	04db      	lsls	r3, r3, #19
 801055c:	6113      	str	r3, [r2, #16]
 801055e:	e074      	b.n	801064a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	015a      	lsls	r2, r3, #5
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	4413      	add	r3, r2
 8010568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801056c:	691b      	ldr	r3, [r3, #16]
 801056e:	69ba      	ldr	r2, [r7, #24]
 8010570:	0151      	lsls	r1, r2, #5
 8010572:	69fa      	ldr	r2, [r7, #28]
 8010574:	440a      	add	r2, r1
 8010576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801057a:	0cdb      	lsrs	r3, r3, #19
 801057c:	04db      	lsls	r3, r3, #19
 801057e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	015a      	lsls	r2, r3, #5
 8010584:	69fb      	ldr	r3, [r7, #28]
 8010586:	4413      	add	r3, r2
 8010588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801058c:	691b      	ldr	r3, [r3, #16]
 801058e:	69ba      	ldr	r2, [r7, #24]
 8010590:	0151      	lsls	r1, r2, #5
 8010592:	69fa      	ldr	r2, [r7, #28]
 8010594:	440a      	add	r2, r1
 8010596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801059a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801059e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80105a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	015a      	lsls	r2, r3, #5
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	4413      	add	r3, r2
 80105ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	6959      	ldr	r1, [r3, #20]
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	689b      	ldr	r3, [r3, #8]
 80105ba:	440b      	add	r3, r1
 80105bc:	1e59      	subs	r1, r3, #1
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	689b      	ldr	r3, [r3, #8]
 80105c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80105c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80105c8:	4b9d      	ldr	r3, [pc, #628]	; (8010840 <USB_EPStartXfer+0x370>)
 80105ca:	400b      	ands	r3, r1
 80105cc:	69b9      	ldr	r1, [r7, #24]
 80105ce:	0148      	lsls	r0, r1, #5
 80105d0:	69f9      	ldr	r1, [r7, #28]
 80105d2:	4401      	add	r1, r0
 80105d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80105d8:	4313      	orrs	r3, r2
 80105da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	015a      	lsls	r2, r3, #5
 80105e0:	69fb      	ldr	r3, [r7, #28]
 80105e2:	4413      	add	r3, r2
 80105e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105e8:	691a      	ldr	r2, [r3, #16]
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	695b      	ldr	r3, [r3, #20]
 80105ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105f2:	69b9      	ldr	r1, [r7, #24]
 80105f4:	0148      	lsls	r0, r1, #5
 80105f6:	69f9      	ldr	r1, [r7, #28]
 80105f8:	4401      	add	r1, r0
 80105fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80105fe:	4313      	orrs	r3, r2
 8010600:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	78db      	ldrb	r3, [r3, #3]
 8010606:	2b01      	cmp	r3, #1
 8010608:	d11f      	bne.n	801064a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	015a      	lsls	r2, r3, #5
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	4413      	add	r3, r2
 8010612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010616:	691b      	ldr	r3, [r3, #16]
 8010618:	69ba      	ldr	r2, [r7, #24]
 801061a:	0151      	lsls	r1, r2, #5
 801061c:	69fa      	ldr	r2, [r7, #28]
 801061e:	440a      	add	r2, r1
 8010620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010624:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010628:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801062a:	69bb      	ldr	r3, [r7, #24]
 801062c:	015a      	lsls	r2, r3, #5
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	4413      	add	r3, r2
 8010632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010636:	691b      	ldr	r3, [r3, #16]
 8010638:	69ba      	ldr	r2, [r7, #24]
 801063a:	0151      	lsls	r1, r2, #5
 801063c:	69fa      	ldr	r2, [r7, #28]
 801063e:	440a      	add	r2, r1
 8010640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010644:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010648:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801064a:	79fb      	ldrb	r3, [r7, #7]
 801064c:	2b01      	cmp	r3, #1
 801064e:	d14b      	bne.n	80106e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	691b      	ldr	r3, [r3, #16]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d009      	beq.n	801066c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010658:	69bb      	ldr	r3, [r7, #24]
 801065a:	015a      	lsls	r2, r3, #5
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	4413      	add	r3, r2
 8010660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010664:	461a      	mov	r2, r3
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	691b      	ldr	r3, [r3, #16]
 801066a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	78db      	ldrb	r3, [r3, #3]
 8010670:	2b01      	cmp	r3, #1
 8010672:	d128      	bne.n	80106c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010674:	69fb      	ldr	r3, [r7, #28]
 8010676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801067a:	689b      	ldr	r3, [r3, #8]
 801067c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010680:	2b00      	cmp	r3, #0
 8010682:	d110      	bne.n	80106a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	015a      	lsls	r2, r3, #5
 8010688:	69fb      	ldr	r3, [r7, #28]
 801068a:	4413      	add	r3, r2
 801068c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	69ba      	ldr	r2, [r7, #24]
 8010694:	0151      	lsls	r1, r2, #5
 8010696:	69fa      	ldr	r2, [r7, #28]
 8010698:	440a      	add	r2, r1
 801069a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801069e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80106a2:	6013      	str	r3, [r2, #0]
 80106a4:	e00f      	b.n	80106c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	015a      	lsls	r2, r3, #5
 80106aa:	69fb      	ldr	r3, [r7, #28]
 80106ac:	4413      	add	r3, r2
 80106ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	69ba      	ldr	r2, [r7, #24]
 80106b6:	0151      	lsls	r1, r2, #5
 80106b8:	69fa      	ldr	r2, [r7, #28]
 80106ba:	440a      	add	r2, r1
 80106bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	015a      	lsls	r2, r3, #5
 80106ca:	69fb      	ldr	r3, [r7, #28]
 80106cc:	4413      	add	r3, r2
 80106ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	69ba      	ldr	r2, [r7, #24]
 80106d6:	0151      	lsls	r1, r2, #5
 80106d8:	69fa      	ldr	r2, [r7, #28]
 80106da:	440a      	add	r2, r1
 80106dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80106e4:	6013      	str	r3, [r2, #0]
 80106e6:	e12f      	b.n	8010948 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	015a      	lsls	r2, r3, #5
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	4413      	add	r3, r2
 80106f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	69ba      	ldr	r2, [r7, #24]
 80106f8:	0151      	lsls	r1, r2, #5
 80106fa:	69fa      	ldr	r2, [r7, #28]
 80106fc:	440a      	add	r2, r1
 80106fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010702:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010706:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	78db      	ldrb	r3, [r3, #3]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d015      	beq.n	801073c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	695b      	ldr	r3, [r3, #20]
 8010714:	2b00      	cmp	r3, #0
 8010716:	f000 8117 	beq.w	8010948 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801071a:	69fb      	ldr	r3, [r7, #28]
 801071c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	f003 030f 	and.w	r3, r3, #15
 801072a:	2101      	movs	r1, #1
 801072c:	fa01 f303 	lsl.w	r3, r1, r3
 8010730:	69f9      	ldr	r1, [r7, #28]
 8010732:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010736:	4313      	orrs	r3, r2
 8010738:	634b      	str	r3, [r1, #52]	; 0x34
 801073a:	e105      	b.n	8010948 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010742:	689b      	ldr	r3, [r3, #8]
 8010744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010748:	2b00      	cmp	r3, #0
 801074a:	d110      	bne.n	801076e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	015a      	lsls	r2, r3, #5
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	4413      	add	r3, r2
 8010754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	69ba      	ldr	r2, [r7, #24]
 801075c:	0151      	lsls	r1, r2, #5
 801075e:	69fa      	ldr	r2, [r7, #28]
 8010760:	440a      	add	r2, r1
 8010762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010766:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801076a:	6013      	str	r3, [r2, #0]
 801076c:	e00f      	b.n	801078e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	015a      	lsls	r2, r3, #5
 8010772:	69fb      	ldr	r3, [r7, #28]
 8010774:	4413      	add	r3, r2
 8010776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	69ba      	ldr	r2, [r7, #24]
 801077e:	0151      	lsls	r1, r2, #5
 8010780:	69fa      	ldr	r2, [r7, #28]
 8010782:	440a      	add	r2, r1
 8010784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801078c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	68d9      	ldr	r1, [r3, #12]
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	781a      	ldrb	r2, [r3, #0]
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	695b      	ldr	r3, [r3, #20]
 801079a:	b298      	uxth	r0, r3
 801079c:	79fb      	ldrb	r3, [r7, #7]
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	4603      	mov	r3, r0
 80107a2:	68f8      	ldr	r0, [r7, #12]
 80107a4:	f000 fa2b 	bl	8010bfe <USB_WritePacket>
 80107a8:	e0ce      	b.n	8010948 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	015a      	lsls	r2, r3, #5
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	4413      	add	r3, r2
 80107b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107b6:	691b      	ldr	r3, [r3, #16]
 80107b8:	69ba      	ldr	r2, [r7, #24]
 80107ba:	0151      	lsls	r1, r2, #5
 80107bc:	69fa      	ldr	r2, [r7, #28]
 80107be:	440a      	add	r2, r1
 80107c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107c4:	0cdb      	lsrs	r3, r3, #19
 80107c6:	04db      	lsls	r3, r3, #19
 80107c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	015a      	lsls	r2, r3, #5
 80107ce:	69fb      	ldr	r3, [r7, #28]
 80107d0:	4413      	add	r3, r2
 80107d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107d6:	691b      	ldr	r3, [r3, #16]
 80107d8:	69ba      	ldr	r2, [r7, #24]
 80107da:	0151      	lsls	r1, r2, #5
 80107dc:	69fa      	ldr	r2, [r7, #28]
 80107de:	440a      	add	r2, r1
 80107e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80107e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80107ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	695b      	ldr	r3, [r3, #20]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d126      	bne.n	8010844 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	015a      	lsls	r2, r3, #5
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	4413      	add	r3, r2
 80107fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010802:	691a      	ldr	r2, [r3, #16]
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801080c:	69b9      	ldr	r1, [r7, #24]
 801080e:	0148      	lsls	r0, r1, #5
 8010810:	69f9      	ldr	r1, [r7, #28]
 8010812:	4401      	add	r1, r0
 8010814:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010818:	4313      	orrs	r3, r2
 801081a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801081c:	69bb      	ldr	r3, [r7, #24]
 801081e:	015a      	lsls	r2, r3, #5
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	4413      	add	r3, r2
 8010824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010828:	691b      	ldr	r3, [r3, #16]
 801082a:	69ba      	ldr	r2, [r7, #24]
 801082c:	0151      	lsls	r1, r2, #5
 801082e:	69fa      	ldr	r2, [r7, #28]
 8010830:	440a      	add	r2, r1
 8010832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801083a:	6113      	str	r3, [r2, #16]
 801083c:	e036      	b.n	80108ac <USB_EPStartXfer+0x3dc>
 801083e:	bf00      	nop
 8010840:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	695a      	ldr	r2, [r3, #20]
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	689b      	ldr	r3, [r3, #8]
 801084c:	4413      	add	r3, r2
 801084e:	1e5a      	subs	r2, r3, #1
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	fbb2 f3f3 	udiv	r3, r2, r3
 8010858:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	015a      	lsls	r2, r3, #5
 801085e:	69fb      	ldr	r3, [r7, #28]
 8010860:	4413      	add	r3, r2
 8010862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010866:	691a      	ldr	r2, [r3, #16]
 8010868:	8afb      	ldrh	r3, [r7, #22]
 801086a:	04d9      	lsls	r1, r3, #19
 801086c:	4b39      	ldr	r3, [pc, #228]	; (8010954 <USB_EPStartXfer+0x484>)
 801086e:	400b      	ands	r3, r1
 8010870:	69b9      	ldr	r1, [r7, #24]
 8010872:	0148      	lsls	r0, r1, #5
 8010874:	69f9      	ldr	r1, [r7, #28]
 8010876:	4401      	add	r1, r0
 8010878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801087c:	4313      	orrs	r3, r2
 801087e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010880:	69bb      	ldr	r3, [r7, #24]
 8010882:	015a      	lsls	r2, r3, #5
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	4413      	add	r3, r2
 8010888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801088c:	691a      	ldr	r2, [r3, #16]
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	689b      	ldr	r3, [r3, #8]
 8010892:	8af9      	ldrh	r1, [r7, #22]
 8010894:	fb01 f303 	mul.w	r3, r1, r3
 8010898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801089c:	69b9      	ldr	r1, [r7, #24]
 801089e:	0148      	lsls	r0, r1, #5
 80108a0:	69f9      	ldr	r1, [r7, #28]
 80108a2:	4401      	add	r1, r0
 80108a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80108a8:	4313      	orrs	r3, r2
 80108aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80108ac:	79fb      	ldrb	r3, [r7, #7]
 80108ae:	2b01      	cmp	r3, #1
 80108b0:	d10d      	bne.n	80108ce <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	68db      	ldr	r3, [r3, #12]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d009      	beq.n	80108ce <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	68d9      	ldr	r1, [r3, #12]
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	015a      	lsls	r2, r3, #5
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	4413      	add	r3, r2
 80108c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108ca:	460a      	mov	r2, r1
 80108cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	78db      	ldrb	r3, [r3, #3]
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d128      	bne.n	8010928 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80108d6:	69fb      	ldr	r3, [r7, #28]
 80108d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108dc:	689b      	ldr	r3, [r3, #8]
 80108de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d110      	bne.n	8010908 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	015a      	lsls	r2, r3, #5
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	4413      	add	r3, r2
 80108ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	69ba      	ldr	r2, [r7, #24]
 80108f6:	0151      	lsls	r1, r2, #5
 80108f8:	69fa      	ldr	r2, [r7, #28]
 80108fa:	440a      	add	r2, r1
 80108fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010900:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010904:	6013      	str	r3, [r2, #0]
 8010906:	e00f      	b.n	8010928 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	015a      	lsls	r2, r3, #5
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	4413      	add	r3, r2
 8010910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	69ba      	ldr	r2, [r7, #24]
 8010918:	0151      	lsls	r1, r2, #5
 801091a:	69fa      	ldr	r2, [r7, #28]
 801091c:	440a      	add	r2, r1
 801091e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010926:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010928:	69bb      	ldr	r3, [r7, #24]
 801092a:	015a      	lsls	r2, r3, #5
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	4413      	add	r3, r2
 8010930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	69ba      	ldr	r2, [r7, #24]
 8010938:	0151      	lsls	r1, r2, #5
 801093a:	69fa      	ldr	r2, [r7, #28]
 801093c:	440a      	add	r2, r1
 801093e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010946:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	3720      	adds	r7, #32
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	1ff80000 	.word	0x1ff80000

08010958 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010958:	b480      	push	{r7}
 801095a:	b087      	sub	sp, #28
 801095c:	af00      	add	r7, sp, #0
 801095e:	60f8      	str	r0, [r7, #12]
 8010960:	60b9      	str	r1, [r7, #8]
 8010962:	4613      	mov	r3, r2
 8010964:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	785b      	ldrb	r3, [r3, #1]
 8010974:	2b01      	cmp	r3, #1
 8010976:	f040 80cd 	bne.w	8010b14 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	695b      	ldr	r3, [r3, #20]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d132      	bne.n	80109e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	015a      	lsls	r2, r3, #5
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	4413      	add	r3, r2
 801098a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801098e:	691b      	ldr	r3, [r3, #16]
 8010990:	693a      	ldr	r2, [r7, #16]
 8010992:	0151      	lsls	r1, r2, #5
 8010994:	697a      	ldr	r2, [r7, #20]
 8010996:	440a      	add	r2, r1
 8010998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801099c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80109a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80109a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	015a      	lsls	r2, r3, #5
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	4413      	add	r3, r2
 80109ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109b2:	691b      	ldr	r3, [r3, #16]
 80109b4:	693a      	ldr	r2, [r7, #16]
 80109b6:	0151      	lsls	r1, r2, #5
 80109b8:	697a      	ldr	r2, [r7, #20]
 80109ba:	440a      	add	r2, r1
 80109bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80109c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	015a      	lsls	r2, r3, #5
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	4413      	add	r3, r2
 80109ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109d2:	691b      	ldr	r3, [r3, #16]
 80109d4:	693a      	ldr	r2, [r7, #16]
 80109d6:	0151      	lsls	r1, r2, #5
 80109d8:	697a      	ldr	r2, [r7, #20]
 80109da:	440a      	add	r2, r1
 80109dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109e0:	0cdb      	lsrs	r3, r3, #19
 80109e2:	04db      	lsls	r3, r3, #19
 80109e4:	6113      	str	r3, [r2, #16]
 80109e6:	e04e      	b.n	8010a86 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	015a      	lsls	r2, r3, #5
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	4413      	add	r3, r2
 80109f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109f4:	691b      	ldr	r3, [r3, #16]
 80109f6:	693a      	ldr	r2, [r7, #16]
 80109f8:	0151      	lsls	r1, r2, #5
 80109fa:	697a      	ldr	r2, [r7, #20]
 80109fc:	440a      	add	r2, r1
 80109fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a02:	0cdb      	lsrs	r3, r3, #19
 8010a04:	04db      	lsls	r3, r3, #19
 8010a06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	015a      	lsls	r2, r3, #5
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	4413      	add	r3, r2
 8010a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a14:	691b      	ldr	r3, [r3, #16]
 8010a16:	693a      	ldr	r2, [r7, #16]
 8010a18:	0151      	lsls	r1, r2, #5
 8010a1a:	697a      	ldr	r2, [r7, #20]
 8010a1c:	440a      	add	r2, r1
 8010a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010a26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010a2a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	695a      	ldr	r2, [r3, #20]
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d903      	bls.n	8010a40 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	689a      	ldr	r2, [r3, #8]
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	015a      	lsls	r2, r3, #5
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	4413      	add	r3, r2
 8010a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a4c:	691b      	ldr	r3, [r3, #16]
 8010a4e:	693a      	ldr	r2, [r7, #16]
 8010a50:	0151      	lsls	r1, r2, #5
 8010a52:	697a      	ldr	r2, [r7, #20]
 8010a54:	440a      	add	r2, r1
 8010a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	015a      	lsls	r2, r3, #5
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	4413      	add	r3, r2
 8010a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a6c:	691a      	ldr	r2, [r3, #16]
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	695b      	ldr	r3, [r3, #20]
 8010a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a76:	6939      	ldr	r1, [r7, #16]
 8010a78:	0148      	lsls	r0, r1, #5
 8010a7a:	6979      	ldr	r1, [r7, #20]
 8010a7c:	4401      	add	r1, r0
 8010a7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010a82:	4313      	orrs	r3, r2
 8010a84:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010a86:	79fb      	ldrb	r3, [r7, #7]
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d11e      	bne.n	8010aca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	691b      	ldr	r3, [r3, #16]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d009      	beq.n	8010aa8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	015a      	lsls	r2, r3, #5
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	691b      	ldr	r3, [r3, #16]
 8010aa6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	015a      	lsls	r2, r3, #5
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	4413      	add	r3, r2
 8010ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	693a      	ldr	r2, [r7, #16]
 8010ab8:	0151      	lsls	r1, r2, #5
 8010aba:	697a      	ldr	r2, [r7, #20]
 8010abc:	440a      	add	r2, r1
 8010abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ac2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010ac6:	6013      	str	r3, [r2, #0]
 8010ac8:	e092      	b.n	8010bf0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	015a      	lsls	r2, r3, #5
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	693a      	ldr	r2, [r7, #16]
 8010ada:	0151      	lsls	r1, r2, #5
 8010adc:	697a      	ldr	r2, [r7, #20]
 8010ade:	440a      	add	r2, r1
 8010ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ae4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010ae8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	695b      	ldr	r3, [r3, #20]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d07e      	beq.n	8010bf0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	f003 030f 	and.w	r3, r3, #15
 8010b02:	2101      	movs	r1, #1
 8010b04:	fa01 f303 	lsl.w	r3, r1, r3
 8010b08:	6979      	ldr	r1, [r7, #20]
 8010b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010b0e:	4313      	orrs	r3, r2
 8010b10:	634b      	str	r3, [r1, #52]	; 0x34
 8010b12:	e06d      	b.n	8010bf0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	015a      	lsls	r2, r3, #5
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b20:	691b      	ldr	r3, [r3, #16]
 8010b22:	693a      	ldr	r2, [r7, #16]
 8010b24:	0151      	lsls	r1, r2, #5
 8010b26:	697a      	ldr	r2, [r7, #20]
 8010b28:	440a      	add	r2, r1
 8010b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b2e:	0cdb      	lsrs	r3, r3, #19
 8010b30:	04db      	lsls	r3, r3, #19
 8010b32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	015a      	lsls	r2, r3, #5
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	4413      	add	r3, r2
 8010b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b40:	691b      	ldr	r3, [r3, #16]
 8010b42:	693a      	ldr	r2, [r7, #16]
 8010b44:	0151      	lsls	r1, r2, #5
 8010b46:	697a      	ldr	r2, [r7, #20]
 8010b48:	440a      	add	r2, r1
 8010b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010b52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010b56:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	695b      	ldr	r3, [r3, #20]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d003      	beq.n	8010b68 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	689a      	ldr	r2, [r3, #8]
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	015a      	lsls	r2, r3, #5
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	4413      	add	r3, r2
 8010b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b74:	691b      	ldr	r3, [r3, #16]
 8010b76:	693a      	ldr	r2, [r7, #16]
 8010b78:	0151      	lsls	r1, r2, #5
 8010b7a:	697a      	ldr	r2, [r7, #20]
 8010b7c:	440a      	add	r2, r1
 8010b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010b86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	015a      	lsls	r2, r3, #5
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	4413      	add	r3, r2
 8010b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b94:	691a      	ldr	r2, [r3, #16]
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b9e:	6939      	ldr	r1, [r7, #16]
 8010ba0:	0148      	lsls	r0, r1, #5
 8010ba2:	6979      	ldr	r1, [r7, #20]
 8010ba4:	4401      	add	r1, r0
 8010ba6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010baa:	4313      	orrs	r3, r2
 8010bac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010bae:	79fb      	ldrb	r3, [r7, #7]
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d10d      	bne.n	8010bd0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d009      	beq.n	8010bd0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	68d9      	ldr	r1, [r3, #12]
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	015a      	lsls	r2, r3, #5
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	4413      	add	r3, r2
 8010bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bcc:	460a      	mov	r2, r1
 8010bce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	015a      	lsls	r2, r3, #5
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	693a      	ldr	r2, [r7, #16]
 8010be0:	0151      	lsls	r1, r2, #5
 8010be2:	697a      	ldr	r2, [r7, #20]
 8010be4:	440a      	add	r2, r1
 8010be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010bee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010bf0:	2300      	movs	r3, #0
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	371c      	adds	r7, #28
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr

08010bfe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010bfe:	b480      	push	{r7}
 8010c00:	b089      	sub	sp, #36	; 0x24
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	60f8      	str	r0, [r7, #12]
 8010c06:	60b9      	str	r1, [r7, #8]
 8010c08:	4611      	mov	r1, r2
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	71fb      	strb	r3, [r7, #7]
 8010c10:	4613      	mov	r3, r2
 8010c12:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010c1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d123      	bne.n	8010c6c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010c24:	88bb      	ldrh	r3, [r7, #4]
 8010c26:	3303      	adds	r3, #3
 8010c28:	089b      	lsrs	r3, r3, #2
 8010c2a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	61bb      	str	r3, [r7, #24]
 8010c30:	e018      	b.n	8010c64 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010c32:	79fb      	ldrb	r3, [r7, #7]
 8010c34:	031a      	lsls	r2, r3, #12
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	4413      	add	r3, r2
 8010c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c3e:	461a      	mov	r2, r3
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010c46:	69fb      	ldr	r3, [r7, #28]
 8010c48:	3301      	adds	r3, #1
 8010c4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	3301      	adds	r3, #1
 8010c50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	3301      	adds	r3, #1
 8010c56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010c5e:	69bb      	ldr	r3, [r7, #24]
 8010c60:	3301      	adds	r3, #1
 8010c62:	61bb      	str	r3, [r7, #24]
 8010c64:	69ba      	ldr	r2, [r7, #24]
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d3e2      	bcc.n	8010c32 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010c6c:	2300      	movs	r3, #0
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3724      	adds	r7, #36	; 0x24
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr

08010c7a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010c7a:	b480      	push	{r7}
 8010c7c:	b08b      	sub	sp, #44	; 0x2c
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	60f8      	str	r0, [r7, #12]
 8010c82:	60b9      	str	r1, [r7, #8]
 8010c84:	4613      	mov	r3, r2
 8010c86:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010c90:	88fb      	ldrh	r3, [r7, #6]
 8010c92:	089b      	lsrs	r3, r3, #2
 8010c94:	b29b      	uxth	r3, r3
 8010c96:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010c98:	88fb      	ldrh	r3, [r7, #6]
 8010c9a:	f003 0303 	and.w	r3, r3, #3
 8010c9e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	623b      	str	r3, [r7, #32]
 8010ca4:	e014      	b.n	8010cd0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010ca6:	69bb      	ldr	r3, [r7, #24]
 8010ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb0:	601a      	str	r2, [r3, #0]
    pDest++;
 8010cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cba:	3301      	adds	r3, #1
 8010cbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010cca:	6a3b      	ldr	r3, [r7, #32]
 8010ccc:	3301      	adds	r3, #1
 8010cce:	623b      	str	r3, [r7, #32]
 8010cd0:	6a3a      	ldr	r2, [r7, #32]
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d3e6      	bcc.n	8010ca6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010cd8:	8bfb      	ldrh	r3, [r7, #30]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d01e      	beq.n	8010d1c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010ce2:	69bb      	ldr	r3, [r7, #24]
 8010ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ce8:	461a      	mov	r2, r3
 8010cea:	f107 0310 	add.w	r3, r7, #16
 8010cee:	6812      	ldr	r2, [r2, #0]
 8010cf0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010cf2:	693a      	ldr	r2, [r7, #16]
 8010cf4:	6a3b      	ldr	r3, [r7, #32]
 8010cf6:	b2db      	uxtb	r3, r3
 8010cf8:	00db      	lsls	r3, r3, #3
 8010cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8010cfe:	b2da      	uxtb	r2, r3
 8010d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d02:	701a      	strb	r2, [r3, #0]
      i++;
 8010d04:	6a3b      	ldr	r3, [r7, #32]
 8010d06:	3301      	adds	r3, #1
 8010d08:	623b      	str	r3, [r7, #32]
      pDest++;
 8010d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010d10:	8bfb      	ldrh	r3, [r7, #30]
 8010d12:	3b01      	subs	r3, #1
 8010d14:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010d16:	8bfb      	ldrh	r3, [r7, #30]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d1ea      	bne.n	8010cf2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	372c      	adds	r7, #44	; 0x2c
 8010d22:	46bd      	mov	sp, r7
 8010d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d28:	4770      	bx	lr

08010d2a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010d2a:	b480      	push	{r7}
 8010d2c:	b085      	sub	sp, #20
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	6078      	str	r0, [r7, #4]
 8010d32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	785b      	ldrb	r3, [r3, #1]
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d12c      	bne.n	8010da0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	015a      	lsls	r2, r3, #5
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	db12      	blt.n	8010d7e <USB_EPSetStall+0x54>
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d00f      	beq.n	8010d7e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	015a      	lsls	r2, r3, #5
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	4413      	add	r3, r2
 8010d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	68ba      	ldr	r2, [r7, #8]
 8010d6e:	0151      	lsls	r1, r2, #5
 8010d70:	68fa      	ldr	r2, [r7, #12]
 8010d72:	440a      	add	r2, r1
 8010d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010d7c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	015a      	lsls	r2, r3, #5
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	4413      	add	r3, r2
 8010d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	68ba      	ldr	r2, [r7, #8]
 8010d8e:	0151      	lsls	r1, r2, #5
 8010d90:	68fa      	ldr	r2, [r7, #12]
 8010d92:	440a      	add	r2, r1
 8010d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010d9c:	6013      	str	r3, [r2, #0]
 8010d9e:	e02b      	b.n	8010df8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	015a      	lsls	r2, r3, #5
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	4413      	add	r3, r2
 8010da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	db12      	blt.n	8010dd8 <USB_EPSetStall+0xae>
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d00f      	beq.n	8010dd8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	015a      	lsls	r2, r3, #5
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	4413      	add	r3, r2
 8010dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	68ba      	ldr	r2, [r7, #8]
 8010dc8:	0151      	lsls	r1, r2, #5
 8010dca:	68fa      	ldr	r2, [r7, #12]
 8010dcc:	440a      	add	r2, r1
 8010dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010dd6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	015a      	lsls	r2, r3, #5
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	4413      	add	r3, r2
 8010de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	68ba      	ldr	r2, [r7, #8]
 8010de8:	0151      	lsls	r1, r2, #5
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	440a      	add	r2, r1
 8010dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010df2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010df6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010df8:	2300      	movs	r3, #0
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3714      	adds	r7, #20
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr

08010e06 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010e06:	b480      	push	{r7}
 8010e08:	b085      	sub	sp, #20
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	6078      	str	r0, [r7, #4]
 8010e0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	785b      	ldrb	r3, [r3, #1]
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	d128      	bne.n	8010e74 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	015a      	lsls	r2, r3, #5
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	4413      	add	r3, r2
 8010e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	68ba      	ldr	r2, [r7, #8]
 8010e32:	0151      	lsls	r1, r2, #5
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	440a      	add	r2, r1
 8010e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010e40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	78db      	ldrb	r3, [r3, #3]
 8010e46:	2b03      	cmp	r3, #3
 8010e48:	d003      	beq.n	8010e52 <USB_EPClearStall+0x4c>
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	78db      	ldrb	r3, [r3, #3]
 8010e4e:	2b02      	cmp	r3, #2
 8010e50:	d138      	bne.n	8010ec4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	015a      	lsls	r2, r3, #5
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	4413      	add	r3, r2
 8010e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	68ba      	ldr	r2, [r7, #8]
 8010e62:	0151      	lsls	r1, r2, #5
 8010e64:	68fa      	ldr	r2, [r7, #12]
 8010e66:	440a      	add	r2, r1
 8010e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010e70:	6013      	str	r3, [r2, #0]
 8010e72:	e027      	b.n	8010ec4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	015a      	lsls	r2, r3, #5
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	4413      	add	r3, r2
 8010e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68ba      	ldr	r2, [r7, #8]
 8010e84:	0151      	lsls	r1, r2, #5
 8010e86:	68fa      	ldr	r2, [r7, #12]
 8010e88:	440a      	add	r2, r1
 8010e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010e92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	78db      	ldrb	r3, [r3, #3]
 8010e98:	2b03      	cmp	r3, #3
 8010e9a:	d003      	beq.n	8010ea4 <USB_EPClearStall+0x9e>
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	78db      	ldrb	r3, [r3, #3]
 8010ea0:	2b02      	cmp	r3, #2
 8010ea2:	d10f      	bne.n	8010ec4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	015a      	lsls	r2, r3, #5
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	4413      	add	r3, r2
 8010eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	68ba      	ldr	r2, [r7, #8]
 8010eb4:	0151      	lsls	r1, r2, #5
 8010eb6:	68fa      	ldr	r2, [r7, #12]
 8010eb8:	440a      	add	r2, r1
 8010eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ec2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010ec4:	2300      	movs	r3, #0
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3714      	adds	r7, #20
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr

08010ed2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010ed2:	b480      	push	{r7}
 8010ed4:	b085      	sub	sp, #20
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
 8010eda:	460b      	mov	r3, r1
 8010edc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ef0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010ef4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	78fb      	ldrb	r3, [r7, #3]
 8010f00:	011b      	lsls	r3, r3, #4
 8010f02:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010f06:	68f9      	ldr	r1, [r7, #12]
 8010f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010f10:	2300      	movs	r3, #0
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3714      	adds	r7, #20
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr

08010f1e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010f1e:	b480      	push	{r7}
 8010f20:	b085      	sub	sp, #20
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	68fa      	ldr	r2, [r7, #12]
 8010f34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010f38:	f023 0303 	bic.w	r3, r3, #3
 8010f3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f4c:	f023 0302 	bic.w	r3, r3, #2
 8010f50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f52:	2300      	movs	r3, #0
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3714      	adds	r7, #20
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr

08010f60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b085      	sub	sp, #20
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010f7a:	f023 0303 	bic.w	r3, r3, #3
 8010f7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	68fa      	ldr	r2, [r7, #12]
 8010f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f8e:	f043 0302 	orr.w	r3, r3, #2
 8010f92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f94:	2300      	movs	r3, #0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3714      	adds	r7, #20
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr

08010fa2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010fa2:	b480      	push	{r7}
 8010fa4:	b085      	sub	sp, #20
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	695b      	ldr	r3, [r3, #20]
 8010fae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	699b      	ldr	r3, [r3, #24]
 8010fb4:	68fa      	ldr	r2, [r7, #12]
 8010fb6:	4013      	ands	r3, r2
 8010fb8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010fba:	68fb      	ldr	r3, [r7, #12]
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3714      	adds	r7, #20
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fda:	699b      	ldr	r3, [r3, #24]
 8010fdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fe4:	69db      	ldr	r3, [r3, #28]
 8010fe6:	68ba      	ldr	r2, [r7, #8]
 8010fe8:	4013      	ands	r3, r2
 8010fea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	0c1b      	lsrs	r3, r3, #16
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3714      	adds	r7, #20
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b085      	sub	sp, #20
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801100e:	699b      	ldr	r3, [r3, #24]
 8011010:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011018:	69db      	ldr	r3, [r3, #28]
 801101a:	68ba      	ldr	r2, [r7, #8]
 801101c:	4013      	ands	r3, r2
 801101e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	b29b      	uxth	r3, r3
}
 8011024:	4618      	mov	r0, r3
 8011026:	3714      	adds	r7, #20
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr

08011030 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011030:	b480      	push	{r7}
 8011032:	b085      	sub	sp, #20
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	460b      	mov	r3, r1
 801103a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011040:	78fb      	ldrb	r3, [r7, #3]
 8011042:	015a      	lsls	r2, r3, #5
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	4413      	add	r3, r2
 8011048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801104c:	689b      	ldr	r3, [r3, #8]
 801104e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011056:	695b      	ldr	r3, [r3, #20]
 8011058:	68ba      	ldr	r2, [r7, #8]
 801105a:	4013      	ands	r3, r2
 801105c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801105e:	68bb      	ldr	r3, [r7, #8]
}
 8011060:	4618      	mov	r0, r3
 8011062:	3714      	adds	r7, #20
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr

0801106c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801106c:	b480      	push	{r7}
 801106e:	b087      	sub	sp, #28
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	460b      	mov	r3, r1
 8011076:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011082:	691b      	ldr	r3, [r3, #16]
 8011084:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801108c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801108e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011090:	78fb      	ldrb	r3, [r7, #3]
 8011092:	f003 030f 	and.w	r3, r3, #15
 8011096:	68fa      	ldr	r2, [r7, #12]
 8011098:	fa22 f303 	lsr.w	r3, r2, r3
 801109c:	01db      	lsls	r3, r3, #7
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	693a      	ldr	r2, [r7, #16]
 80110a2:	4313      	orrs	r3, r2
 80110a4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80110a6:	78fb      	ldrb	r3, [r7, #3]
 80110a8:	015a      	lsls	r2, r3, #5
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	4413      	add	r3, r2
 80110ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	693a      	ldr	r2, [r7, #16]
 80110b6:	4013      	ands	r3, r2
 80110b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80110ba:	68bb      	ldr	r3, [r7, #8]
}
 80110bc:	4618      	mov	r0, r3
 80110be:	371c      	adds	r7, #28
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	695b      	ldr	r3, [r3, #20]
 80110d4:	f003 0301 	and.w	r3, r3, #1
}
 80110d8:	4618      	mov	r0, r3
 80110da:	370c      	adds	r7, #12
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr

080110e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b085      	sub	sp, #20
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	68fa      	ldr	r2, [r7, #12]
 80110fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011102:	f023 0307 	bic.w	r3, r3, #7
 8011106:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	68fa      	ldr	r2, [r7, #12]
 8011112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801111a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801111c:	2300      	movs	r3, #0
}
 801111e:	4618      	mov	r0, r3
 8011120:	3714      	adds	r7, #20
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr
	...

0801112c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801112c:	b480      	push	{r7}
 801112e:	b087      	sub	sp, #28
 8011130:	af00      	add	r7, sp, #0
 8011132:	60f8      	str	r0, [r7, #12]
 8011134:	460b      	mov	r3, r1
 8011136:	607a      	str	r2, [r7, #4]
 8011138:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	333c      	adds	r3, #60	; 0x3c
 8011142:	3304      	adds	r3, #4
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	4a26      	ldr	r2, [pc, #152]	; (80111e4 <USB_EP0_OutStart+0xb8>)
 801114c:	4293      	cmp	r3, r2
 801114e:	d90a      	bls.n	8011166 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801115c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011160:	d101      	bne.n	8011166 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011162:	2300      	movs	r3, #0
 8011164:	e037      	b.n	80111d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801116c:	461a      	mov	r2, r3
 801116e:	2300      	movs	r3, #0
 8011170:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011178:	691b      	ldr	r3, [r3, #16]
 801117a:	697a      	ldr	r2, [r7, #20]
 801117c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011184:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801118c:	691b      	ldr	r3, [r3, #16]
 801118e:	697a      	ldr	r2, [r7, #20]
 8011190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011194:	f043 0318 	orr.w	r3, r3, #24
 8011198:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111a0:	691b      	ldr	r3, [r3, #16]
 80111a2:	697a      	ldr	r2, [r7, #20]
 80111a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80111a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80111ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80111ae:	7afb      	ldrb	r3, [r7, #11]
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d10f      	bne.n	80111d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111ba:	461a      	mov	r2, r3
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	697a      	ldr	r2, [r7, #20]
 80111ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80111ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80111d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80111d4:	2300      	movs	r3, #0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	371c      	adds	r7, #28
 80111da:	46bd      	mov	sp, r7
 80111dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	4f54300a 	.word	0x4f54300a

080111e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b085      	sub	sp, #20
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80111f0:	2300      	movs	r3, #0
 80111f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	3301      	adds	r3, #1
 80111f8:	60fb      	str	r3, [r7, #12]
 80111fa:	4a13      	ldr	r2, [pc, #76]	; (8011248 <USB_CoreReset+0x60>)
 80111fc:	4293      	cmp	r3, r2
 80111fe:	d901      	bls.n	8011204 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8011200:	2303      	movs	r3, #3
 8011202:	e01a      	b.n	801123a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	691b      	ldr	r3, [r3, #16]
 8011208:	2b00      	cmp	r3, #0
 801120a:	daf3      	bge.n	80111f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801120c:	2300      	movs	r3, #0
 801120e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	691b      	ldr	r3, [r3, #16]
 8011214:	f043 0201 	orr.w	r2, r3, #1
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	3301      	adds	r3, #1
 8011220:	60fb      	str	r3, [r7, #12]
 8011222:	4a09      	ldr	r2, [pc, #36]	; (8011248 <USB_CoreReset+0x60>)
 8011224:	4293      	cmp	r3, r2
 8011226:	d901      	bls.n	801122c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8011228:	2303      	movs	r3, #3
 801122a:	e006      	b.n	801123a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	691b      	ldr	r3, [r3, #16]
 8011230:	f003 0301 	and.w	r3, r3, #1
 8011234:	2b01      	cmp	r3, #1
 8011236:	d0f1      	beq.n	801121c <USB_CoreReset+0x34>

  return HAL_OK;
 8011238:	2300      	movs	r3, #0
}
 801123a:	4618      	mov	r0, r3
 801123c:	3714      	adds	r7, #20
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop
 8011248:	00030d40 	.word	0x00030d40

0801124c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011250:	4904      	ldr	r1, [pc, #16]	; (8011264 <MX_FATFS_Init+0x18>)
 8011252:	4805      	ldr	r0, [pc, #20]	; (8011268 <MX_FATFS_Init+0x1c>)
 8011254:	f005 fffa 	bl	801724c <FATFS_LinkDriver>
 8011258:	4603      	mov	r3, r0
 801125a:	461a      	mov	r2, r3
 801125c:	4b03      	ldr	r3, [pc, #12]	; (801126c <MX_FATFS_Init+0x20>)
 801125e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011260:	bf00      	nop
 8011262:	bd80      	pop	{r7, pc}
 8011264:	200037f8 	.word	0x200037f8
 8011268:	0801890c 	.word	0x0801890c
 801126c:	200037f4 	.word	0x200037f4

08011270 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011270:	b480      	push	{r7}
 8011272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011274:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011276:	4618      	mov	r0, r3
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011286:	2300      	movs	r3, #0
 8011288:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801128a:	f000 f896 	bl	80113ba <BSP_SD_IsDetected>
 801128e:	4603      	mov	r3, r0
 8011290:	2b01      	cmp	r3, #1
 8011292:	d001      	beq.n	8011298 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011294:	2301      	movs	r3, #1
 8011296:	e012      	b.n	80112be <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011298:	480b      	ldr	r0, [pc, #44]	; (80112c8 <BSP_SD_Init+0x48>)
 801129a:	f7fb fd51 	bl	800cd40 <HAL_SD_Init>
 801129e:	4603      	mov	r3, r0
 80112a0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80112a2:	79fb      	ldrb	r3, [r7, #7]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d109      	bne.n	80112bc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80112a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80112ac:	4806      	ldr	r0, [pc, #24]	; (80112c8 <BSP_SD_Init+0x48>)
 80112ae:	f7fc fe6b 	bl	800df88 <HAL_SD_ConfigWideBusOperation>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d001      	beq.n	80112bc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80112b8:	2301      	movs	r3, #1
 80112ba:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80112bc:	79fb      	ldrb	r3, [r7, #7]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3708      	adds	r7, #8
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	200003ec 	.word	0x200003ec

080112cc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b086      	sub	sp, #24
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	60f8      	str	r0, [r7, #12]
 80112d4:	60b9      	str	r1, [r7, #8]
 80112d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80112d8:	2300      	movs	r3, #0
 80112da:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	68ba      	ldr	r2, [r7, #8]
 80112e0:	68f9      	ldr	r1, [r7, #12]
 80112e2:	4806      	ldr	r0, [pc, #24]	; (80112fc <BSP_SD_ReadBlocks_DMA+0x30>)
 80112e4:	f7fc f93e 	bl	800d564 <HAL_SD_ReadBlocks_DMA>
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d001      	beq.n	80112f2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80112ee:	2301      	movs	r3, #1
 80112f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80112f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3718      	adds	r7, #24
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	200003ec 	.word	0x200003ec

08011300 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b086      	sub	sp, #24
 8011304:	af00      	add	r7, sp, #0
 8011306:	60f8      	str	r0, [r7, #12]
 8011308:	60b9      	str	r1, [r7, #8]
 801130a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	68ba      	ldr	r2, [r7, #8]
 8011314:	68f9      	ldr	r1, [r7, #12]
 8011316:	4806      	ldr	r0, [pc, #24]	; (8011330 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011318:	f7fc fa04 	bl	800d724 <HAL_SD_WriteBlocks_DMA>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d001      	beq.n	8011326 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011322:	2301      	movs	r3, #1
 8011324:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011326:	7dfb      	ldrb	r3, [r7, #23]
}
 8011328:	4618      	mov	r0, r3
 801132a:	3718      	adds	r7, #24
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}
 8011330:	200003ec 	.word	0x200003ec

08011334 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011338:	4805      	ldr	r0, [pc, #20]	; (8011350 <BSP_SD_GetCardState+0x1c>)
 801133a:	f7fc febf 	bl	800e0bc <HAL_SD_GetCardState>
 801133e:	4603      	mov	r3, r0
 8011340:	2b04      	cmp	r3, #4
 8011342:	bf14      	ite	ne
 8011344:	2301      	movne	r3, #1
 8011346:	2300      	moveq	r3, #0
 8011348:	b2db      	uxtb	r3, r3
}
 801134a:	4618      	mov	r0, r3
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	200003ec 	.word	0x200003ec

08011354 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 801135c:	6879      	ldr	r1, [r7, #4]
 801135e:	4803      	ldr	r0, [pc, #12]	; (801136c <BSP_SD_GetCardInfo+0x18>)
 8011360:	f7fc fde6 	bl	800df30 <HAL_SD_GetCardInfo>
}
 8011364:	bf00      	nop
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	200003ec 	.word	0x200003ec

08011370 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011378:	f000 f818 	bl	80113ac <BSP_SD_AbortCallback>
}
 801137c:	bf00      	nop
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801138c:	f000 f9a8 	bl	80116e0 <BSP_SD_WriteCpltCallback>
}
 8011390:	bf00      	nop
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80113a0:	f000 f9aa 	bl	80116f8 <BSP_SD_ReadCpltCallback>
}
 80113a4:	bf00      	nop
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80113ac:	b480      	push	{r7}
 80113ae:	af00      	add	r7, sp, #0

}
 80113b0:	bf00      	nop
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr

080113ba <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b082      	sub	sp, #8
 80113be:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80113c0:	2301      	movs	r3, #1
 80113c2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80113c4:	f000 f80c 	bl	80113e0 <BSP_PlatformIsDetected>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d101      	bne.n	80113d2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80113ce:	2300      	movs	r3, #0
 80113d0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80113d2:	79fb      	ldrb	r3, [r7, #7]
 80113d4:	b2db      	uxtb	r3, r3
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3708      	adds	r7, #8
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
	...

080113e0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80113e6:	2301      	movs	r3, #1
 80113e8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80113ea:	2180      	movs	r1, #128	; 0x80
 80113ec:	4806      	ldr	r0, [pc, #24]	; (8011408 <BSP_PlatformIsDetected+0x28>)
 80113ee:	f7f7 fd83 	bl	8008ef8 <HAL_GPIO_ReadPin>
 80113f2:	4603      	mov	r3, r0
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d001      	beq.n	80113fc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80113f8:	2300      	movs	r3, #0
 80113fa:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80113fc:	79fb      	ldrb	r3, [r7, #7]
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3708      	adds	r7, #8
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	40020800 	.word	0x40020800

0801140c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011414:	f7f5 fc42 	bl	8006c9c <HAL_GetTick>
 8011418:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801141a:	e006      	b.n	801142a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801141c:	f7ff ff8a 	bl	8011334 <BSP_SD_GetCardState>
 8011420:	4603      	mov	r3, r0
 8011422:	2b00      	cmp	r3, #0
 8011424:	d101      	bne.n	801142a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011426:	2300      	movs	r3, #0
 8011428:	e009      	b.n	801143e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801142a:	f7f5 fc37 	bl	8006c9c <HAL_GetTick>
 801142e:	4602      	mov	r2, r0
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	429a      	cmp	r2, r3
 8011438:	d8f0      	bhi.n	801141c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801143a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801143e:	4618      	mov	r0, r3
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
	...

08011448 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	4603      	mov	r3, r0
 8011450:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011452:	4b0b      	ldr	r3, [pc, #44]	; (8011480 <SD_CheckStatus+0x38>)
 8011454:	2201      	movs	r2, #1
 8011456:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011458:	f7ff ff6c 	bl	8011334 <BSP_SD_GetCardState>
 801145c:	4603      	mov	r3, r0
 801145e:	2b00      	cmp	r3, #0
 8011460:	d107      	bne.n	8011472 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011462:	4b07      	ldr	r3, [pc, #28]	; (8011480 <SD_CheckStatus+0x38>)
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	b2db      	uxtb	r3, r3
 8011468:	f023 0301 	bic.w	r3, r3, #1
 801146c:	b2da      	uxtb	r2, r3
 801146e:	4b04      	ldr	r3, [pc, #16]	; (8011480 <SD_CheckStatus+0x38>)
 8011470:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011472:	4b03      	ldr	r3, [pc, #12]	; (8011480 <SD_CheckStatus+0x38>)
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	b2db      	uxtb	r3, r3
}
 8011478:	4618      	mov	r0, r3
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	20000009 	.word	0x20000009

08011484 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
 801148a:	4603      	mov	r3, r0
 801148c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801148e:	f7ff fef7 	bl	8011280 <BSP_SD_Init>
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	d107      	bne.n	80114a8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011498:	79fb      	ldrb	r3, [r7, #7]
 801149a:	4618      	mov	r0, r3
 801149c:	f7ff ffd4 	bl	8011448 <SD_CheckStatus>
 80114a0:	4603      	mov	r3, r0
 80114a2:	461a      	mov	r2, r3
 80114a4:	4b04      	ldr	r3, [pc, #16]	; (80114b8 <SD_initialize+0x34>)
 80114a6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80114a8:	4b03      	ldr	r3, [pc, #12]	; (80114b8 <SD_initialize+0x34>)
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	b2db      	uxtb	r3, r3
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3708      	adds	r7, #8
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	20000009 	.word	0x20000009

080114bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	4603      	mov	r3, r0
 80114c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80114c6:	79fb      	ldrb	r3, [r7, #7]
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7ff ffbd 	bl	8011448 <SD_CheckStatus>
 80114ce:	4603      	mov	r3, r0
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3708      	adds	r7, #8
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b086      	sub	sp, #24
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60b9      	str	r1, [r7, #8]
 80114e0:	607a      	str	r2, [r7, #4]
 80114e2:	603b      	str	r3, [r7, #0]
 80114e4:	4603      	mov	r3, r0
 80114e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80114e8:	2301      	movs	r3, #1
 80114ea:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80114ec:	f247 5030 	movw	r0, #30000	; 0x7530
 80114f0:	f7ff ff8c 	bl	801140c <SD_CheckStatusWithTimeout>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	da01      	bge.n	80114fe <SD_read+0x26>
  {
    return res;
 80114fa:	7dfb      	ldrb	r3, [r7, #23]
 80114fc:	e03b      	b.n	8011576 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80114fe:	683a      	ldr	r2, [r7, #0]
 8011500:	6879      	ldr	r1, [r7, #4]
 8011502:	68b8      	ldr	r0, [r7, #8]
 8011504:	f7ff fee2 	bl	80112cc <BSP_SD_ReadBlocks_DMA>
 8011508:	4603      	mov	r3, r0
 801150a:	2b00      	cmp	r3, #0
 801150c:	d132      	bne.n	8011574 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801150e:	4b1c      	ldr	r3, [pc, #112]	; (8011580 <SD_read+0xa8>)
 8011510:	2200      	movs	r2, #0
 8011512:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011514:	f7f5 fbc2 	bl	8006c9c <HAL_GetTick>
 8011518:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801151a:	bf00      	nop
 801151c:	4b18      	ldr	r3, [pc, #96]	; (8011580 <SD_read+0xa8>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d108      	bne.n	8011536 <SD_read+0x5e>
 8011524:	f7f5 fbba 	bl	8006c9c <HAL_GetTick>
 8011528:	4602      	mov	r2, r0
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	1ad3      	subs	r3, r2, r3
 801152e:	f247 522f 	movw	r2, #29999	; 0x752f
 8011532:	4293      	cmp	r3, r2
 8011534:	d9f2      	bls.n	801151c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8011536:	4b12      	ldr	r3, [pc, #72]	; (8011580 <SD_read+0xa8>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d102      	bne.n	8011544 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801153e:	2301      	movs	r3, #1
 8011540:	75fb      	strb	r3, [r7, #23]
 8011542:	e017      	b.n	8011574 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011544:	4b0e      	ldr	r3, [pc, #56]	; (8011580 <SD_read+0xa8>)
 8011546:	2200      	movs	r2, #0
 8011548:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801154a:	f7f5 fba7 	bl	8006c9c <HAL_GetTick>
 801154e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011550:	e007      	b.n	8011562 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011552:	f7ff feef 	bl	8011334 <BSP_SD_GetCardState>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d102      	bne.n	8011562 <SD_read+0x8a>
          {
            res = RES_OK;
 801155c:	2300      	movs	r3, #0
 801155e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011560:	e008      	b.n	8011574 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011562:	f7f5 fb9b 	bl	8006c9c <HAL_GetTick>
 8011566:	4602      	mov	r2, r0
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	1ad3      	subs	r3, r2, r3
 801156c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011570:	4293      	cmp	r3, r2
 8011572:	d9ee      	bls.n	8011552 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011574:	7dfb      	ldrb	r3, [r7, #23]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3718      	adds	r7, #24
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	20003800 	.word	0x20003800

08011584 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b086      	sub	sp, #24
 8011588:	af00      	add	r7, sp, #0
 801158a:	60b9      	str	r1, [r7, #8]
 801158c:	607a      	str	r2, [r7, #4]
 801158e:	603b      	str	r3, [r7, #0]
 8011590:	4603      	mov	r3, r0
 8011592:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011594:	2301      	movs	r3, #1
 8011596:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011598:	4b24      	ldr	r3, [pc, #144]	; (801162c <SD_write+0xa8>)
 801159a:	2200      	movs	r2, #0
 801159c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801159e:	f247 5030 	movw	r0, #30000	; 0x7530
 80115a2:	f7ff ff33 	bl	801140c <SD_CheckStatusWithTimeout>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	da01      	bge.n	80115b0 <SD_write+0x2c>
  {
    return res;
 80115ac:	7dfb      	ldrb	r3, [r7, #23]
 80115ae:	e038      	b.n	8011622 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80115b0:	683a      	ldr	r2, [r7, #0]
 80115b2:	6879      	ldr	r1, [r7, #4]
 80115b4:	68b8      	ldr	r0, [r7, #8]
 80115b6:	f7ff fea3 	bl	8011300 <BSP_SD_WriteBlocks_DMA>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d12f      	bne.n	8011620 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80115c0:	f7f5 fb6c 	bl	8006c9c <HAL_GetTick>
 80115c4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80115c6:	bf00      	nop
 80115c8:	4b18      	ldr	r3, [pc, #96]	; (801162c <SD_write+0xa8>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d108      	bne.n	80115e2 <SD_write+0x5e>
 80115d0:	f7f5 fb64 	bl	8006c9c <HAL_GetTick>
 80115d4:	4602      	mov	r2, r0
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	1ad3      	subs	r3, r2, r3
 80115da:	f247 522f 	movw	r2, #29999	; 0x752f
 80115de:	4293      	cmp	r3, r2
 80115e0:	d9f2      	bls.n	80115c8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80115e2:	4b12      	ldr	r3, [pc, #72]	; (801162c <SD_write+0xa8>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d102      	bne.n	80115f0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80115ea:	2301      	movs	r3, #1
 80115ec:	75fb      	strb	r3, [r7, #23]
 80115ee:	e017      	b.n	8011620 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80115f0:	4b0e      	ldr	r3, [pc, #56]	; (801162c <SD_write+0xa8>)
 80115f2:	2200      	movs	r2, #0
 80115f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80115f6:	f7f5 fb51 	bl	8006c9c <HAL_GetTick>
 80115fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80115fc:	e007      	b.n	801160e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80115fe:	f7ff fe99 	bl	8011334 <BSP_SD_GetCardState>
 8011602:	4603      	mov	r3, r0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d102      	bne.n	801160e <SD_write+0x8a>
          {
            res = RES_OK;
 8011608:	2300      	movs	r3, #0
 801160a:	75fb      	strb	r3, [r7, #23]
            break;
 801160c:	e008      	b.n	8011620 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801160e:	f7f5 fb45 	bl	8006c9c <HAL_GetTick>
 8011612:	4602      	mov	r2, r0
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	1ad3      	subs	r3, r2, r3
 8011618:	f247 522f 	movw	r2, #29999	; 0x752f
 801161c:	4293      	cmp	r3, r2
 801161e:	d9ee      	bls.n	80115fe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011620:	7dfb      	ldrb	r3, [r7, #23]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3718      	adds	r7, #24
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	200037fc 	.word	0x200037fc

08011630 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b08c      	sub	sp, #48	; 0x30
 8011634:	af00      	add	r7, sp, #0
 8011636:	4603      	mov	r3, r0
 8011638:	603a      	str	r2, [r7, #0]
 801163a:	71fb      	strb	r3, [r7, #7]
 801163c:	460b      	mov	r3, r1
 801163e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011640:	2301      	movs	r3, #1
 8011642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011646:	4b25      	ldr	r3, [pc, #148]	; (80116dc <SD_ioctl+0xac>)
 8011648:	781b      	ldrb	r3, [r3, #0]
 801164a:	b2db      	uxtb	r3, r3
 801164c:	f003 0301 	and.w	r3, r3, #1
 8011650:	2b00      	cmp	r3, #0
 8011652:	d001      	beq.n	8011658 <SD_ioctl+0x28>
 8011654:	2303      	movs	r3, #3
 8011656:	e03c      	b.n	80116d2 <SD_ioctl+0xa2>

  switch (cmd)
 8011658:	79bb      	ldrb	r3, [r7, #6]
 801165a:	2b03      	cmp	r3, #3
 801165c:	d834      	bhi.n	80116c8 <SD_ioctl+0x98>
 801165e:	a201      	add	r2, pc, #4	; (adr r2, 8011664 <SD_ioctl+0x34>)
 8011660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011664:	08011675 	.word	0x08011675
 8011668:	0801167d 	.word	0x0801167d
 801166c:	08011695 	.word	0x08011695
 8011670:	080116af 	.word	0x080116af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011674:	2300      	movs	r3, #0
 8011676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801167a:	e028      	b.n	80116ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801167c:	f107 030c 	add.w	r3, r7, #12
 8011680:	4618      	mov	r0, r3
 8011682:	f7ff fe67 	bl	8011354 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801168c:	2300      	movs	r3, #0
 801168e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011692:	e01c      	b.n	80116ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011694:	f107 030c 	add.w	r3, r7, #12
 8011698:	4618      	mov	r0, r3
 801169a:	f7ff fe5b 	bl	8011354 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a0:	b29a      	uxth	r2, r3
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80116a6:	2300      	movs	r3, #0
 80116a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80116ac:	e00f      	b.n	80116ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80116ae:	f107 030c 	add.w	r3, r7, #12
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7ff fe4e 	bl	8011354 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80116b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ba:	0a5a      	lsrs	r2, r3, #9
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80116c0:	2300      	movs	r3, #0
 80116c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80116c6:	e002      	b.n	80116ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80116c8:	2304      	movs	r3, #4
 80116ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80116ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3730      	adds	r7, #48	; 0x30
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	20000009 	.word	0x20000009

080116e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80116e0:	b480      	push	{r7}
 80116e2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80116e4:	4b03      	ldr	r3, [pc, #12]	; (80116f4 <BSP_SD_WriteCpltCallback+0x14>)
 80116e6:	2201      	movs	r2, #1
 80116e8:	601a      	str	r2, [r3, #0]
}
 80116ea:	bf00      	nop
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr
 80116f4:	200037fc 	.word	0x200037fc

080116f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80116f8:	b480      	push	{r7}
 80116fa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80116fc:	4b03      	ldr	r3, [pc, #12]	; (801170c <BSP_SD_ReadCpltCallback+0x14>)
 80116fe:	2201      	movs	r2, #1
 8011700:	601a      	str	r2, [r3, #0]
}
 8011702:	bf00      	nop
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr
 801170c:	20003800 	.word	0x20003800

08011710 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	460b      	mov	r3, r1
 801171a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801171c:	f44f 701d 	mov.w	r0, #628	; 0x274
 8011720:	f006 fb94 	bl	8017e4c <USBD_static_malloc>
 8011724:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d105      	bne.n	8011738 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2200      	movs	r2, #0
 8011730:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011734:	2302      	movs	r3, #2
 8011736:	e034      	b.n	80117a2 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	68fa      	ldr	r2, [r7, #12]
 801173c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	7c1b      	ldrb	r3, [r3, #16]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d115      	bne.n	8011774 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011748:	f44f 7300 	mov.w	r3, #512	; 0x200
 801174c:	2202      	movs	r2, #2
 801174e:	2101      	movs	r1, #1
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f006 f9ea 	bl	8017b2a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2201      	movs	r2, #1
 801175a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801175e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011762:	2202      	movs	r2, #2
 8011764:	2181      	movs	r1, #129	; 0x81
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f006 f9df 	bl	8017b2a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2201      	movs	r2, #1
 8011770:	871a      	strh	r2, [r3, #56]	; 0x38
 8011772:	e012      	b.n	801179a <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011774:	2340      	movs	r3, #64	; 0x40
 8011776:	2202      	movs	r2, #2
 8011778:	2101      	movs	r1, #1
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f006 f9d5 	bl	8017b2a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2201      	movs	r2, #1
 8011784:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011788:	2340      	movs	r3, #64	; 0x40
 801178a:	2202      	movs	r2, #2
 801178c:	2181      	movs	r1, #129	; 0x81
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f006 f9cb 	bl	8017b2a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2201      	movs	r2, #1
 8011798:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f000 f999 	bl	8011ad2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80117a0:	2300      	movs	r3, #0
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	3710      	adds	r7, #16
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}

080117aa <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80117aa:	b580      	push	{r7, lr}
 80117ac:	b082      	sub	sp, #8
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
 80117b2:	460b      	mov	r3, r1
 80117b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80117b6:	2101      	movs	r1, #1
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f006 f9dc 	bl	8017b76 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2200      	movs	r2, #0
 80117c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80117c6:	2181      	movs	r1, #129	; 0x81
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f006 f9d4 	bl	8017b76 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2200      	movs	r2, #0
 80117d2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00c      	beq.n	80117f8 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 f9d5 	bl	8011b8e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117ea:	4618      	mov	r0, r3
 80117ec:	f006 fb3c 	bl	8017e68 <USBD_static_free>
    pdev->pClassData = NULL;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2200      	movs	r2, #0
 80117f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80117f8:	2300      	movs	r3, #0
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3708      	adds	r7, #8
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
	...

08011804 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b086      	sub	sp, #24
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011814:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011816:	2300      	movs	r3, #0
 8011818:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801181a:	2300      	movs	r3, #0
 801181c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d101      	bne.n	8011828 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011824:	2303      	movs	r3, #3
 8011826:	e0db      	b.n	80119e0 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011830:	2b00      	cmp	r3, #0
 8011832:	d04e      	beq.n	80118d2 <USBD_MSC_Setup+0xce>
 8011834:	2b20      	cmp	r3, #32
 8011836:	f040 80cb 	bne.w	80119d0 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	785b      	ldrb	r3, [r3, #1]
 801183e:	2bfe      	cmp	r3, #254	; 0xfe
 8011840:	d002      	beq.n	8011848 <USBD_MSC_Setup+0x44>
 8011842:	2bff      	cmp	r3, #255	; 0xff
 8011844:	d025      	beq.n	8011892 <USBD_MSC_Setup+0x8e>
 8011846:	e03c      	b.n	80118c2 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	885b      	ldrh	r3, [r3, #2]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d119      	bne.n	8011884 <USBD_MSC_Setup+0x80>
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	88db      	ldrh	r3, [r3, #6]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d115      	bne.n	8011884 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801185e:	2b00      	cmp	r3, #0
 8011860:	da10      	bge.n	8011884 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011868:	699b      	ldr	r3, [r3, #24]
 801186a:	4798      	blx	r3
 801186c:	4603      	mov	r3, r0
 801186e:	461a      	mov	r2, r3
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	2201      	movs	r2, #1
 8011878:	4619      	mov	r1, r3
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f002 fe3d 	bl	80144fa <USBD_CtlSendData>
 8011880:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011882:	e025      	b.n	80118d0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8011884:	6839      	ldr	r1, [r7, #0]
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f002 fdc6 	bl	8014418 <USBD_CtlError>
            ret = USBD_FAIL;
 801188c:	2303      	movs	r3, #3
 801188e:	75fb      	strb	r3, [r7, #23]
          break;
 8011890:	e01e      	b.n	80118d0 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	885b      	ldrh	r3, [r3, #2]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d10c      	bne.n	80118b4 <USBD_MSC_Setup+0xb0>
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	88db      	ldrh	r3, [r3, #6]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d108      	bne.n	80118b4 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	db03      	blt.n	80118b4 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f000 f948 	bl	8011b42 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80118b2:	e00d      	b.n	80118d0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 80118b4:	6839      	ldr	r1, [r7, #0]
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f002 fdae 	bl	8014418 <USBD_CtlError>
            ret = USBD_FAIL;
 80118bc:	2303      	movs	r3, #3
 80118be:	75fb      	strb	r3, [r7, #23]
          break;
 80118c0:	e006      	b.n	80118d0 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80118c2:	6839      	ldr	r1, [r7, #0]
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f002 fda7 	bl	8014418 <USBD_CtlError>
          ret = USBD_FAIL;
 80118ca:	2303      	movs	r3, #3
 80118cc:	75fb      	strb	r3, [r7, #23]
          break;
 80118ce:	bf00      	nop
      }
      break;
 80118d0:	e085      	b.n	80119de <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	785b      	ldrb	r3, [r3, #1]
 80118d6:	2b0b      	cmp	r3, #11
 80118d8:	d871      	bhi.n	80119be <USBD_MSC_Setup+0x1ba>
 80118da:	a201      	add	r2, pc, #4	; (adr r2, 80118e0 <USBD_MSC_Setup+0xdc>)
 80118dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118e0:	08011911 	.word	0x08011911
 80118e4:	0801198d 	.word	0x0801198d
 80118e8:	080119bf 	.word	0x080119bf
 80118ec:	080119bf 	.word	0x080119bf
 80118f0:	080119bf 	.word	0x080119bf
 80118f4:	080119bf 	.word	0x080119bf
 80118f8:	080119bf 	.word	0x080119bf
 80118fc:	080119bf 	.word	0x080119bf
 8011900:	080119bf 	.word	0x080119bf
 8011904:	080119bf 	.word	0x080119bf
 8011908:	0801193b 	.word	0x0801193b
 801190c:	08011965 	.word	0x08011965
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011916:	b2db      	uxtb	r3, r3
 8011918:	2b03      	cmp	r3, #3
 801191a:	d107      	bne.n	801192c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801191c:	f107 030e 	add.w	r3, r7, #14
 8011920:	2202      	movs	r2, #2
 8011922:	4619      	mov	r1, r3
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f002 fde8 	bl	80144fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801192a:	e050      	b.n	80119ce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801192c:	6839      	ldr	r1, [r7, #0]
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f002 fd72 	bl	8014418 <USBD_CtlError>
            ret = USBD_FAIL;
 8011934:	2303      	movs	r3, #3
 8011936:	75fb      	strb	r3, [r7, #23]
          break;
 8011938:	e049      	b.n	80119ce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011940:	b2db      	uxtb	r3, r3
 8011942:	2b03      	cmp	r3, #3
 8011944:	d107      	bne.n	8011956 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	3304      	adds	r3, #4
 801194a:	2201      	movs	r2, #1
 801194c:	4619      	mov	r1, r3
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f002 fdd3 	bl	80144fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011954:	e03b      	b.n	80119ce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8011956:	6839      	ldr	r1, [r7, #0]
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f002 fd5d 	bl	8014418 <USBD_CtlError>
            ret = USBD_FAIL;
 801195e:	2303      	movs	r3, #3
 8011960:	75fb      	strb	r3, [r7, #23]
          break;
 8011962:	e034      	b.n	80119ce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801196a:	b2db      	uxtb	r3, r3
 801196c:	2b03      	cmp	r3, #3
 801196e:	d106      	bne.n	801197e <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	885b      	ldrh	r3, [r3, #2]
 8011974:	b2db      	uxtb	r3, r3
 8011976:	461a      	mov	r2, r3
 8011978:	693b      	ldr	r3, [r7, #16]
 801197a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801197c:	e027      	b.n	80119ce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801197e:	6839      	ldr	r1, [r7, #0]
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f002 fd49 	bl	8014418 <USBD_CtlError>
            ret = USBD_FAIL;
 8011986:	2303      	movs	r3, #3
 8011988:	75fb      	strb	r3, [r7, #23]
          break;
 801198a:	e020      	b.n	80119ce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011992:	b2db      	uxtb	r3, r3
 8011994:	2b03      	cmp	r3, #3
 8011996:	d119      	bne.n	80119cc <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	885b      	ldrh	r3, [r3, #2]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d115      	bne.n	80119cc <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	889b      	ldrh	r3, [r3, #4]
 80119a4:	b2db      	uxtb	r3, r3
 80119a6:	4619      	mov	r1, r3
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f006 f903 	bl	8017bb4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	889b      	ldrh	r3, [r3, #4]
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	4619      	mov	r1, r3
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 fa82 	bl	8011ec0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80119bc:	e006      	b.n	80119cc <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80119be:	6839      	ldr	r1, [r7, #0]
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f002 fd29 	bl	8014418 <USBD_CtlError>
          ret = USBD_FAIL;
 80119c6:	2303      	movs	r3, #3
 80119c8:	75fb      	strb	r3, [r7, #23]
          break;
 80119ca:	e000      	b.n	80119ce <USBD_MSC_Setup+0x1ca>
          break;
 80119cc:	bf00      	nop
      }
      break;
 80119ce:	e006      	b.n	80119de <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80119d0:	6839      	ldr	r1, [r7, #0]
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f002 fd20 	bl	8014418 <USBD_CtlError>
      ret = USBD_FAIL;
 80119d8:	2303      	movs	r3, #3
 80119da:	75fb      	strb	r3, [r7, #23]
      break;
 80119dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80119de:	7dfb      	ldrb	r3, [r7, #23]
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3718      	adds	r7, #24
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}

080119e8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	460b      	mov	r3, r1
 80119f2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80119f4:	78fb      	ldrb	r3, [r7, #3]
 80119f6:	4619      	mov	r1, r3
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f000 f8dc 	bl	8011bb6 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80119fe:	2300      	movs	r3, #0
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3708      	adds	r7, #8
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	460b      	mov	r3, r1
 8011a12:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8011a14:	78fb      	ldrb	r3, [r7, #3]
 8011a16:	4619      	mov	r1, r3
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f000 f902 	bl	8011c22 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8011a1e:	2300      	movs	r3, #0
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3708      	adds	r7, #8
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}

08011a28 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b083      	sub	sp, #12
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2220      	movs	r2, #32
 8011a34:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8011a36:	4b03      	ldr	r3, [pc, #12]	; (8011a44 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	370c      	adds	r7, #12
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr
 8011a44:	20000044 	.word	0x20000044

08011a48 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b083      	sub	sp, #12
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2220      	movs	r2, #32
 8011a54:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8011a56:	4b03      	ldr	r3, [pc, #12]	; (8011a64 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	370c      	adds	r7, #12
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr
 8011a64:	20000064 	.word	0x20000064

08011a68 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b083      	sub	sp, #12
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2220      	movs	r2, #32
 8011a74:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8011a76:	4b03      	ldr	r3, [pc, #12]	; (8011a84 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr
 8011a84:	20000084 	.word	0x20000084

08011a88 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	220a      	movs	r2, #10
 8011a94:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8011a96:	4b03      	ldr	r3, [pc, #12]	; (8011aa4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	370c      	adds	r7, #12
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa2:	4770      	bx	lr
 8011aa4:	200000a4 	.word	0x200000a4

08011aa8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d101      	bne.n	8011abc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011ab8:	2303      	movs	r3, #3
 8011aba:	e004      	b.n	8011ac6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	683a      	ldr	r2, [r7, #0]
 8011ac0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011ac4:	2300      	movs	r3, #0
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	370c      	adds	r7, #12
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr

08011ad2 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8011ad2:	b580      	push	{r7, lr}
 8011ad4:	b084      	sub	sp, #16
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ae0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d028      	beq.n	8011b3a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2200      	movs	r2, #0
 8011aec:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2200      	movs	r2, #0
 8011af2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2200      	movs	r2, #0
 8011af8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2200      	movs	r2, #0
 8011b00:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2200      	movs	r2, #0
 8011b08:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2000      	movs	r0, #0
 8011b16:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8011b18:	2101      	movs	r1, #1
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f006 f84a 	bl	8017bb4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8011b20:	2181      	movs	r1, #129	; 0x81
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f006 f846 	bl	8017bb4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011b2e:	231f      	movs	r3, #31
 8011b30:	2101      	movs	r1, #1
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f006 f907 	bl	8017d46 <USBD_LL_PrepareReceive>
 8011b38:	e000      	b.n	8011b3c <MSC_BOT_Init+0x6a>
    return;
 8011b3a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011b3c:	3710      	adds	r7, #16
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}

08011b42 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b084      	sub	sp, #16
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b50:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d016      	beq.n	8011b86 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	2201      	movs	r2, #1
 8011b62:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8011b64:	2181      	movs	r1, #129	; 0x81
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f006 f862 	bl	8017c30 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8011b6c:	2101      	movs	r1, #1
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f006 f85e 	bl	8017c30 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011b7a:	231f      	movs	r3, #31
 8011b7c:	2101      	movs	r1, #1
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f006 f8e1 	bl	8017d46 <USBD_LL_PrepareReceive>
 8011b84:	e000      	b.n	8011b88 <MSC_BOT_Reset+0x46>
    return;
 8011b86:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011b88:	3710      	adds	r7, #16
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}

08011b8e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8011b8e:	b480      	push	{r7}
 8011b90:	b085      	sub	sp, #20
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b9c:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d002      	beq.n	8011baa <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	721a      	strb	r2, [r3, #8]
  }
}
 8011baa:	bf00      	nop
 8011bac:	3714      	adds	r7, #20
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr

08011bb6 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b084      	sub	sp, #16
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bc8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d020      	beq.n	8011c12 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	7a1b      	ldrb	r3, [r3, #8]
 8011bd4:	2b02      	cmp	r3, #2
 8011bd6:	d005      	beq.n	8011be4 <MSC_BOT_DataIn+0x2e>
 8011bd8:	2b02      	cmp	r3, #2
 8011bda:	db1c      	blt.n	8011c16 <MSC_BOT_DataIn+0x60>
 8011bdc:	3b03      	subs	r3, #3
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d819      	bhi.n	8011c16 <MSC_BOT_DataIn+0x60>
 8011be2:	e011      	b.n	8011c08 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f000 f992 	bl	8011f1c <SCSI_ProcessCmd>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	da0d      	bge.n	8011c1a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011bfe:	2101      	movs	r1, #1
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f000 f8fb 	bl	8011dfc <MSC_BOT_SendCSW>
      }
      break;
 8011c06:	e008      	b.n	8011c1a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011c08:	2100      	movs	r1, #0
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f000 f8f6 	bl	8011dfc <MSC_BOT_SendCSW>
      break;
 8011c10:	e004      	b.n	8011c1c <MSC_BOT_DataIn+0x66>
    return;
 8011c12:	bf00      	nop
 8011c14:	e002      	b.n	8011c1c <MSC_BOT_DataIn+0x66>

    default:
      break;
 8011c16:	bf00      	nop
 8011c18:	e000      	b.n	8011c1c <MSC_BOT_DataIn+0x66>
      break;
 8011c1a:	bf00      	nop
  }
}
 8011c1c:	3710      	adds	r7, #16
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b084      	sub	sp, #16
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c34:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d01c      	beq.n	8011c76 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	7a1b      	ldrb	r3, [r3, #8]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d002      	beq.n	8011c4a <MSC_BOT_DataOut+0x28>
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d004      	beq.n	8011c52 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8011c48:	e018      	b.n	8011c7c <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f000 f81a 	bl	8011c84 <MSC_BOT_CBW_Decode>
      break;
 8011c50:	e014      	b.n	8011c7c <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011c5e:	461a      	mov	r2, r3
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f000 f95b 	bl	8011f1c <SCSI_ProcessCmd>
 8011c66:	4603      	mov	r3, r0
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	da06      	bge.n	8011c7a <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011c6c:	2101      	movs	r1, #1
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f000 f8c4 	bl	8011dfc <MSC_BOT_SendCSW>
      break;
 8011c74:	e001      	b.n	8011c7a <MSC_BOT_DataOut+0x58>
    return;
 8011c76:	bf00      	nop
 8011c78:	e000      	b.n	8011c7c <MSC_BOT_DataOut+0x5a>
      break;
 8011c7a:	bf00      	nop
  }
}
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}
	...

08011c84 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c92:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d077      	beq.n	8011d8a <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8011cb2:	2101      	movs	r1, #1
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f006 f867 	bl	8017d88 <USBD_LL_GetRxDataSize>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	2b1f      	cmp	r3, #31
 8011cbe:	d114      	bne.n	8011cea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8011cc6:	4a34      	ldr	r2, [pc, #208]	; (8011d98 <MSC_BOT_CBW_Decode+0x114>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d10e      	bne.n	8011cea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d809      	bhi.n	8011cea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d004      	beq.n	8011cea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011ce6:	2b10      	cmp	r3, #16
 8011ce8:	d90e      	bls.n	8011d08 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011cf0:	2320      	movs	r3, #32
 8011cf2:	2205      	movs	r2, #5
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f000 fdbc 	bl	8012872 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2202      	movs	r2, #2
 8011cfe:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f000 f8ab 	bl	8011e5c <MSC_BOT_Abort>
 8011d06:	e043      	b.n	8011d90 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011d14:	461a      	mov	r2, r3
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f000 f900 	bl	8011f1c <SCSI_ProcessCmd>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	da0c      	bge.n	8011d3c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	7a1b      	ldrb	r3, [r3, #8]
 8011d26:	2b05      	cmp	r3, #5
 8011d28:	d104      	bne.n	8011d34 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011d2a:	2101      	movs	r1, #1
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f000 f865 	bl	8011dfc <MSC_BOT_SendCSW>
 8011d32:	e02d      	b.n	8011d90 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f000 f891 	bl	8011e5c <MSC_BOT_Abort>
 8011d3a:	e029      	b.n	8011d90 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	7a1b      	ldrb	r3, [r3, #8]
 8011d40:	2b02      	cmp	r3, #2
 8011d42:	d024      	beq.n	8011d8e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	d020      	beq.n	8011d8e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011d50:	2b03      	cmp	r3, #3
 8011d52:	d01c      	beq.n	8011d8e <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d009      	beq.n	8011d70 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f103 0110 	add.w	r1, r3, #16
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	68db      	ldr	r3, [r3, #12]
 8011d66:	461a      	mov	r2, r3
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f000 f817 	bl	8011d9c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8011d6e:	e00f      	b.n	8011d90 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d104      	bne.n	8011d82 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011d78:	2100      	movs	r1, #0
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 f83e 	bl	8011dfc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8011d80:	e006      	b.n	8011d90 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f000 f86a 	bl	8011e5c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8011d88:	e002      	b.n	8011d90 <MSC_BOT_CBW_Decode+0x10c>
    return;
 8011d8a:	bf00      	nop
 8011d8c:	e000      	b.n	8011d90 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8011d8e:	bf00      	nop
    }
  }
}
 8011d90:	3710      	adds	r7, #16
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	43425355 	.word	0x43425355

08011d9c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b086      	sub	sp, #24
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	60f8      	str	r0, [r7, #12]
 8011da4:	60b9      	str	r1, [r7, #8]
 8011da6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011dae:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	4293      	cmp	r3, r2
 8011dba:	bf28      	it	cs
 8011dbc:	4613      	movcs	r3, r2
 8011dbe:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d015      	beq.n	8011df2 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	1ad2      	subs	r2, r2, r3
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8011dde:	697b      	ldr	r3, [r7, #20]
 8011de0:	2204      	movs	r2, #4
 8011de2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	68ba      	ldr	r2, [r7, #8]
 8011de8:	2181      	movs	r1, #129	; 0x81
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	f005 ff8a 	bl	8017d04 <USBD_LL_Transmit>
 8011df0:	e000      	b.n	8011df4 <MSC_BOT_SendData+0x58>
    return;
 8011df2:	bf00      	nop
}
 8011df4:	3718      	adds	r7, #24
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
	...

08011dfc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	460b      	mov	r3, r1
 8011e06:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e0e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d01b      	beq.n	8011e4e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	4a0f      	ldr	r2, [pc, #60]	; (8011e58 <MSC_BOT_SendCSW+0x5c>)
 8011e1a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	78fa      	ldrb	r2, [r7, #3]
 8011e22:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8011e32:	230d      	movs	r3, #13
 8011e34:	2181      	movs	r1, #129	; 0x81
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f005 ff64 	bl	8017d04 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011e42:	231f      	movs	r3, #31
 8011e44:	2101      	movs	r1, #1
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f005 ff7d 	bl	8017d46 <USBD_LL_PrepareReceive>
 8011e4c:	e000      	b.n	8011e50 <MSC_BOT_SendCSW+0x54>
    return;
 8011e4e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011e50:	3710      	adds	r7, #16
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
 8011e56:	bf00      	nop
 8011e58:	53425355 	.word	0x53425355

08011e5c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b084      	sub	sp, #16
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e6a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d022      	beq.n	8011eb8 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d10c      	bne.n	8011e96 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d007      	beq.n	8011e96 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d103      	bne.n	8011e96 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8011e8e:	2101      	movs	r1, #1
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f005 feae 	bl	8017bf2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011e96:	2181      	movs	r1, #129	; 0x81
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f005 feaa 	bl	8017bf2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	7a5b      	ldrb	r3, [r3, #9]
 8011ea2:	2b02      	cmp	r3, #2
 8011ea4:	d109      	bne.n	8011eba <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011ea6:	2181      	movs	r1, #129	; 0x81
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f005 fea2 	bl	8017bf2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8011eae:	2101      	movs	r1, #1
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f005 fe9e 	bl	8017bf2 <USBD_LL_StallEP>
 8011eb6:	e000      	b.n	8011eba <MSC_BOT_Abort+0x5e>
    return;
 8011eb8:	bf00      	nop
  }
}
 8011eba:	3710      	adds	r7, #16
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	460b      	mov	r3, r1
 8011eca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ed2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d019      	beq.n	8011f0e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	7a5b      	ldrb	r3, [r3, #9]
 8011ede:	2b02      	cmp	r3, #2
 8011ee0:	d108      	bne.n	8011ef4 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011ee2:	2181      	movs	r1, #129	; 0x81
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f005 fe84 	bl	8017bf2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8011eea:	2101      	movs	r1, #1
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f005 fe80 	bl	8017bf2 <USBD_LL_StallEP>
 8011ef2:	e00f      	b.n	8011f14 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8011ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	da0a      	bge.n	8011f12 <MSC_BOT_CplClrFeature+0x52>
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	7a5b      	ldrb	r3, [r3, #9]
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d006      	beq.n	8011f12 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011f04:	2101      	movs	r1, #1
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7ff ff78 	bl	8011dfc <MSC_BOT_SendCSW>
 8011f0c:	e002      	b.n	8011f14 <MSC_BOT_CplClrFeature+0x54>
    return;
 8011f0e:	bf00      	nop
 8011f10:	e000      	b.n	8011f14 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8011f12:	bf00      	nop
  }
}
 8011f14:	3710      	adds	r7, #16
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
	...

08011f1c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b086      	sub	sp, #24
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	460b      	mov	r3, r1
 8011f26:	607a      	str	r2, [r7, #4]
 8011f28:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f30:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d102      	bne.n	8011f3e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8011f38:	f04f 33ff 	mov.w	r3, #4294967295
 8011f3c:	e168      	b.n	8012210 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	2baa      	cmp	r3, #170	; 0xaa
 8011f44:	f000 8144 	beq.w	80121d0 <SCSI_ProcessCmd+0x2b4>
 8011f48:	2baa      	cmp	r3, #170	; 0xaa
 8011f4a:	f300 8153 	bgt.w	80121f4 <SCSI_ProcessCmd+0x2d8>
 8011f4e:	2ba8      	cmp	r3, #168	; 0xa8
 8011f50:	f000 812c 	beq.w	80121ac <SCSI_ProcessCmd+0x290>
 8011f54:	2ba8      	cmp	r3, #168	; 0xa8
 8011f56:	f300 814d 	bgt.w	80121f4 <SCSI_ProcessCmd+0x2d8>
 8011f5a:	2b5a      	cmp	r3, #90	; 0x5a
 8011f5c:	f300 80c0 	bgt.w	80120e0 <SCSI_ProcessCmd+0x1c4>
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	f2c0 8147 	blt.w	80121f4 <SCSI_ProcessCmd+0x2d8>
 8011f66:	2b5a      	cmp	r3, #90	; 0x5a
 8011f68:	f200 8144 	bhi.w	80121f4 <SCSI_ProcessCmd+0x2d8>
 8011f6c:	a201      	add	r2, pc, #4	; (adr r2, 8011f74 <SCSI_ProcessCmd+0x58>)
 8011f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f72:	bf00      	nop
 8011f74:	080120e7 	.word	0x080120e7
 8011f78:	080121f5 	.word	0x080121f5
 8011f7c:	080121f5 	.word	0x080121f5
 8011f80:	080120f9 	.word	0x080120f9
 8011f84:	080121f5 	.word	0x080121f5
 8011f88:	080121f5 	.word	0x080121f5
 8011f8c:	080121f5 	.word	0x080121f5
 8011f90:	080121f5 	.word	0x080121f5
 8011f94:	080121f5 	.word	0x080121f5
 8011f98:	080121f5 	.word	0x080121f5
 8011f9c:	080121f5 	.word	0x080121f5
 8011fa0:	080121f5 	.word	0x080121f5
 8011fa4:	080121f5 	.word	0x080121f5
 8011fa8:	080121f5 	.word	0x080121f5
 8011fac:	080121f5 	.word	0x080121f5
 8011fb0:	080121f5 	.word	0x080121f5
 8011fb4:	080121f5 	.word	0x080121f5
 8011fb8:	080121f5 	.word	0x080121f5
 8011fbc:	0801210b 	.word	0x0801210b
 8011fc0:	080121f5 	.word	0x080121f5
 8011fc4:	080121f5 	.word	0x080121f5
 8011fc8:	080121f5 	.word	0x080121f5
 8011fcc:	080121f5 	.word	0x080121f5
 8011fd0:	080121f5 	.word	0x080121f5
 8011fd4:	080121f5 	.word	0x080121f5
 8011fd8:	080121f5 	.word	0x080121f5
 8011fdc:	08012141 	.word	0x08012141
 8011fe0:	0801211d 	.word	0x0801211d
 8011fe4:	080121f5 	.word	0x080121f5
 8011fe8:	080121f5 	.word	0x080121f5
 8011fec:	0801212f 	.word	0x0801212f
 8011ff0:	080121f5 	.word	0x080121f5
 8011ff4:	080121f5 	.word	0x080121f5
 8011ff8:	080121f5 	.word	0x080121f5
 8011ffc:	080121f5 	.word	0x080121f5
 8012000:	08012165 	.word	0x08012165
 8012004:	080121f5 	.word	0x080121f5
 8012008:	08012177 	.word	0x08012177
 801200c:	080121f5 	.word	0x080121f5
 8012010:	080121f5 	.word	0x080121f5
 8012014:	0801219b 	.word	0x0801219b
 8012018:	080121f5 	.word	0x080121f5
 801201c:	080121bf 	.word	0x080121bf
 8012020:	080121f5 	.word	0x080121f5
 8012024:	080121f5 	.word	0x080121f5
 8012028:	080121f5 	.word	0x080121f5
 801202c:	080121f5 	.word	0x080121f5
 8012030:	080121e3 	.word	0x080121e3
 8012034:	080121f5 	.word	0x080121f5
 8012038:	080121f5 	.word	0x080121f5
 801203c:	080121f5 	.word	0x080121f5
 8012040:	080121f5 	.word	0x080121f5
 8012044:	080121f5 	.word	0x080121f5
 8012048:	080121f5 	.word	0x080121f5
 801204c:	080121f5 	.word	0x080121f5
 8012050:	080121f5 	.word	0x080121f5
 8012054:	080121f5 	.word	0x080121f5
 8012058:	080121f5 	.word	0x080121f5
 801205c:	080121f5 	.word	0x080121f5
 8012060:	080121f5 	.word	0x080121f5
 8012064:	080121f5 	.word	0x080121f5
 8012068:	080121f5 	.word	0x080121f5
 801206c:	080121f5 	.word	0x080121f5
 8012070:	080121f5 	.word	0x080121f5
 8012074:	080121f5 	.word	0x080121f5
 8012078:	080121f5 	.word	0x080121f5
 801207c:	080121f5 	.word	0x080121f5
 8012080:	080121f5 	.word	0x080121f5
 8012084:	080121f5 	.word	0x080121f5
 8012088:	080121f5 	.word	0x080121f5
 801208c:	080121f5 	.word	0x080121f5
 8012090:	080121f5 	.word	0x080121f5
 8012094:	080121f5 	.word	0x080121f5
 8012098:	080121f5 	.word	0x080121f5
 801209c:	080121f5 	.word	0x080121f5
 80120a0:	080121f5 	.word	0x080121f5
 80120a4:	080121f5 	.word	0x080121f5
 80120a8:	080121f5 	.word	0x080121f5
 80120ac:	080121f5 	.word	0x080121f5
 80120b0:	080121f5 	.word	0x080121f5
 80120b4:	080121f5 	.word	0x080121f5
 80120b8:	080121f5 	.word	0x080121f5
 80120bc:	080121f5 	.word	0x080121f5
 80120c0:	080121f5 	.word	0x080121f5
 80120c4:	080121f5 	.word	0x080121f5
 80120c8:	080121f5 	.word	0x080121f5
 80120cc:	080121f5 	.word	0x080121f5
 80120d0:	080121f5 	.word	0x080121f5
 80120d4:	080121f5 	.word	0x080121f5
 80120d8:	080121f5 	.word	0x080121f5
 80120dc:	08012153 	.word	0x08012153
 80120e0:	2b9e      	cmp	r3, #158	; 0x9e
 80120e2:	d051      	beq.n	8012188 <SCSI_ProcessCmd+0x26c>
 80120e4:	e086      	b.n	80121f4 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80120e6:	7afb      	ldrb	r3, [r7, #11]
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	4619      	mov	r1, r3
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f000 f893 	bl	8012218 <SCSI_TestUnitReady>
 80120f2:	4603      	mov	r3, r0
 80120f4:	75fb      	strb	r3, [r7, #23]
      break;
 80120f6:	e089      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80120f8:	7afb      	ldrb	r3, [r7, #11]
 80120fa:	687a      	ldr	r2, [r7, #4]
 80120fc:	4619      	mov	r1, r3
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f000 fb38 	bl	8012774 <SCSI_RequestSense>
 8012104:	4603      	mov	r3, r0
 8012106:	75fb      	strb	r3, [r7, #23]
      break;
 8012108:	e080      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801210a:	7afb      	ldrb	r3, [r7, #11]
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	4619      	mov	r1, r3
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f000 f8d1 	bl	80122b8 <SCSI_Inquiry>
 8012116:	4603      	mov	r3, r0
 8012118:	75fb      	strb	r3, [r7, #23]
      break;
 801211a:	e077      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801211c:	7afb      	ldrb	r3, [r7, #11]
 801211e:	687a      	ldr	r2, [r7, #4]
 8012120:	4619      	mov	r1, r3
 8012122:	68f8      	ldr	r0, [r7, #12]
 8012124:	f000 fbec 	bl	8012900 <SCSI_StartStopUnit>
 8012128:	4603      	mov	r3, r0
 801212a:	75fb      	strb	r3, [r7, #23]
      break;
 801212c:	e06e      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801212e:	7afb      	ldrb	r3, [r7, #11]
 8012130:	687a      	ldr	r2, [r7, #4]
 8012132:	4619      	mov	r1, r3
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f000 fc34 	bl	80129a2 <SCSI_AllowPreventRemovable>
 801213a:	4603      	mov	r3, r0
 801213c:	75fb      	strb	r3, [r7, #23]
      break;
 801213e:	e065      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8012140:	7afb      	ldrb	r3, [r7, #11]
 8012142:	687a      	ldr	r2, [r7, #4]
 8012144:	4619      	mov	r1, r3
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	f000 fabc 	bl	80126c4 <SCSI_ModeSense6>
 801214c:	4603      	mov	r3, r0
 801214e:	75fb      	strb	r3, [r7, #23]
      break;
 8012150:	e05c      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8012152:	7afb      	ldrb	r3, [r7, #11]
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	4619      	mov	r1, r3
 8012158:	68f8      	ldr	r0, [r7, #12]
 801215a:	f000 fadf 	bl	801271c <SCSI_ModeSense10>
 801215e:	4603      	mov	r3, r0
 8012160:	75fb      	strb	r3, [r7, #23]
      break;
 8012162:	e053      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012164:	7afb      	ldrb	r3, [r7, #11]
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	4619      	mov	r1, r3
 801216a:	68f8      	ldr	r0, [r7, #12]
 801216c:	f000 fa37 	bl	80125de <SCSI_ReadFormatCapacity>
 8012170:	4603      	mov	r3, r0
 8012172:	75fb      	strb	r3, [r7, #23]
      break;
 8012174:	e04a      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8012176:	7afb      	ldrb	r3, [r7, #11]
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	4619      	mov	r1, r3
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f000 f90f 	bl	80123a0 <SCSI_ReadCapacity10>
 8012182:	4603      	mov	r3, r0
 8012184:	75fb      	strb	r3, [r7, #23]
      break;
 8012186:	e041      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8012188:	7afb      	ldrb	r3, [r7, #11]
 801218a:	687a      	ldr	r2, [r7, #4]
 801218c:	4619      	mov	r1, r3
 801218e:	68f8      	ldr	r0, [r7, #12]
 8012190:	f000 f97b 	bl	801248a <SCSI_ReadCapacity16>
 8012194:	4603      	mov	r3, r0
 8012196:	75fb      	strb	r3, [r7, #23]
      break;
 8012198:	e038      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801219a:	7afb      	ldrb	r3, [r7, #11]
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	4619      	mov	r1, r3
 80121a0:	68f8      	ldr	r0, [r7, #12]
 80121a2:	f000 fc27 	bl	80129f4 <SCSI_Read10>
 80121a6:	4603      	mov	r3, r0
 80121a8:	75fb      	strb	r3, [r7, #23]
      break;
 80121aa:	e02f      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80121ac:	7afb      	ldrb	r3, [r7, #11]
 80121ae:	687a      	ldr	r2, [r7, #4]
 80121b0:	4619      	mov	r1, r3
 80121b2:	68f8      	ldr	r0, [r7, #12]
 80121b4:	f000 fcbe 	bl	8012b34 <SCSI_Read12>
 80121b8:	4603      	mov	r3, r0
 80121ba:	75fb      	strb	r3, [r7, #23]
      break;
 80121bc:	e026      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80121be:	7afb      	ldrb	r3, [r7, #11]
 80121c0:	687a      	ldr	r2, [r7, #4]
 80121c2:	4619      	mov	r1, r3
 80121c4:	68f8      	ldr	r0, [r7, #12]
 80121c6:	f000 fd60 	bl	8012c8a <SCSI_Write10>
 80121ca:	4603      	mov	r3, r0
 80121cc:	75fb      	strb	r3, [r7, #23]
      break;
 80121ce:	e01d      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80121d0:	7afb      	ldrb	r3, [r7, #11]
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	4619      	mov	r1, r3
 80121d6:	68f8      	ldr	r0, [r7, #12]
 80121d8:	f000 fe1c 	bl	8012e14 <SCSI_Write12>
 80121dc:	4603      	mov	r3, r0
 80121de:	75fb      	strb	r3, [r7, #23]
      break;
 80121e0:	e014      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80121e2:	7afb      	ldrb	r3, [r7, #11]
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	4619      	mov	r1, r3
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f000 fee8 	bl	8012fbe <SCSI_Verify10>
 80121ee:	4603      	mov	r3, r0
 80121f0:	75fb      	strb	r3, [r7, #23]
      break;
 80121f2:	e00b      	b.n	801220c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80121f4:	7af9      	ldrb	r1, [r7, #11]
 80121f6:	2320      	movs	r3, #32
 80121f8:	2205      	movs	r2, #5
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	f000 fb39 	bl	8012872 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	2202      	movs	r2, #2
 8012204:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8012206:	23ff      	movs	r3, #255	; 0xff
 8012208:	75fb      	strb	r3, [r7, #23]
      break;
 801220a:	bf00      	nop
  }

  return ret;
 801220c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3718      	adds	r7, #24
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b086      	sub	sp, #24
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	460b      	mov	r3, r1
 8012222:	607a      	str	r2, [r7, #4]
 8012224:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801222c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d102      	bne.n	801223a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8012234:	f04f 33ff 	mov.w	r3, #4294967295
 8012238:	e03a      	b.n	80122b0 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012240:	2b00      	cmp	r3, #0
 8012242:	d00a      	beq.n	801225a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801224a:	2320      	movs	r3, #32
 801224c:	2205      	movs	r2, #5
 801224e:	68f8      	ldr	r0, [r7, #12]
 8012250:	f000 fb0f 	bl	8012872 <SCSI_SenseCode>

    return -1;
 8012254:	f04f 33ff 	mov.w	r3, #4294967295
 8012258:	e02a      	b.n	80122b0 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012260:	2b02      	cmp	r3, #2
 8012262:	d10b      	bne.n	801227c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012264:	7af9      	ldrb	r1, [r7, #11]
 8012266:	233a      	movs	r3, #58	; 0x3a
 8012268:	2202      	movs	r2, #2
 801226a:	68f8      	ldr	r0, [r7, #12]
 801226c:	f000 fb01 	bl	8012872 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	2205      	movs	r2, #5
 8012274:	721a      	strb	r2, [r3, #8]
    return -1;
 8012276:	f04f 33ff 	mov.w	r3, #4294967295
 801227a:	e019      	b.n	80122b0 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012282:	689b      	ldr	r3, [r3, #8]
 8012284:	7afa      	ldrb	r2, [r7, #11]
 8012286:	4610      	mov	r0, r2
 8012288:	4798      	blx	r3
 801228a:	4603      	mov	r3, r0
 801228c:	2b00      	cmp	r3, #0
 801228e:	d00b      	beq.n	80122a8 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012290:	7af9      	ldrb	r1, [r7, #11]
 8012292:	233a      	movs	r3, #58	; 0x3a
 8012294:	2202      	movs	r2, #2
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f000 faeb 	bl	8012872 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	2205      	movs	r2, #5
 80122a0:	721a      	strb	r2, [r3, #8]

    return -1;
 80122a2:	f04f 33ff 	mov.w	r3, #4294967295
 80122a6:	e003      	b.n	80122b0 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	2200      	movs	r2, #0
 80122ac:	60da      	str	r2, [r3, #12]

  return 0;
 80122ae:	2300      	movs	r3, #0
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3718      	adds	r7, #24
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}

080122b8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b088      	sub	sp, #32
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	460b      	mov	r3, r1
 80122c2:	607a      	str	r2, [r7, #4]
 80122c4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80122cc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80122ce:	69bb      	ldr	r3, [r7, #24]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d102      	bne.n	80122da <SCSI_Inquiry+0x22>
  {
    return -1;
 80122d4:	f04f 33ff 	mov.w	r3, #4294967295
 80122d8:	e05a      	b.n	8012390 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80122da:	69bb      	ldr	r3, [r7, #24]
 80122dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d10a      	bne.n	80122fa <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80122ea:	2320      	movs	r3, #32
 80122ec:	2205      	movs	r2, #5
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f000 fabf 	bl	8012872 <SCSI_SenseCode>
    return -1;
 80122f4:	f04f 33ff 	mov.w	r3, #4294967295
 80122f8:	e04a      	b.n	8012390 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	3301      	adds	r3, #1
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	f003 0301 	and.w	r3, r3, #1
 8012304:	2b00      	cmp	r3, #0
 8012306:	d020      	beq.n	801234a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	3302      	adds	r3, #2
 801230c:	781b      	ldrb	r3, [r3, #0]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d105      	bne.n	801231e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8012312:	2206      	movs	r2, #6
 8012314:	4920      	ldr	r1, [pc, #128]	; (8012398 <SCSI_Inquiry+0xe0>)
 8012316:	69b8      	ldr	r0, [r7, #24]
 8012318:	f000 ffb4 	bl	8013284 <SCSI_UpdateBotData>
 801231c:	e037      	b.n	801238e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	3302      	adds	r3, #2
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	2b80      	cmp	r3, #128	; 0x80
 8012326:	d105      	bne.n	8012334 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8012328:	2208      	movs	r2, #8
 801232a:	491c      	ldr	r1, [pc, #112]	; (801239c <SCSI_Inquiry+0xe4>)
 801232c:	69b8      	ldr	r0, [r7, #24]
 801232e:	f000 ffa9 	bl	8013284 <SCSI_UpdateBotData>
 8012332:	e02c      	b.n	801238e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012334:	69bb      	ldr	r3, [r7, #24]
 8012336:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801233a:	2324      	movs	r3, #36	; 0x24
 801233c:	2205      	movs	r2, #5
 801233e:	68f8      	ldr	r0, [r7, #12]
 8012340:	f000 fa97 	bl	8012872 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012344:	f04f 33ff 	mov.w	r3, #4294967295
 8012348:	e022      	b.n	8012390 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012350:	69d9      	ldr	r1, [r3, #28]
 8012352:	7afa      	ldrb	r2, [r7, #11]
 8012354:	4613      	mov	r3, r2
 8012356:	00db      	lsls	r3, r3, #3
 8012358:	4413      	add	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	440b      	add	r3, r1
 801235e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	3304      	adds	r3, #4
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	b29b      	uxth	r3, r3
 8012368:	3305      	adds	r3, #5
 801236a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3304      	adds	r3, #4
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	b29b      	uxth	r3, r3
 8012374:	8bfa      	ldrh	r2, [r7, #30]
 8012376:	429a      	cmp	r2, r3
 8012378:	d303      	bcc.n	8012382 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	3304      	adds	r3, #4
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8012382:	8bfb      	ldrh	r3, [r7, #30]
 8012384:	461a      	mov	r2, r3
 8012386:	6979      	ldr	r1, [r7, #20]
 8012388:	69b8      	ldr	r0, [r7, #24]
 801238a:	f000 ff7b 	bl	8013284 <SCSI_UpdateBotData>
  }

  return 0;
 801238e:	2300      	movs	r3, #0
}
 8012390:	4618      	mov	r0, r3
 8012392:	3720      	adds	r7, #32
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	200000b0 	.word	0x200000b0
 801239c:	200000b8 	.word	0x200000b8

080123a0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b086      	sub	sp, #24
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	460b      	mov	r3, r1
 80123aa:	607a      	str	r2, [r7, #4]
 80123ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80123b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d102      	bne.n	80123c2 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 80123bc:	f04f 33ff 	mov.w	r3, #4294967295
 80123c0:	e05f      	b.n	8012482 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	697a      	ldr	r2, [r7, #20]
 80123cc:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80123d0:	697a      	ldr	r2, [r7, #20]
 80123d2:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80123d6:	7af8      	ldrb	r0, [r7, #11]
 80123d8:	4798      	blx	r3
 80123da:	4603      	mov	r3, r0
 80123dc:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80123de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d104      	bne.n	80123f0 <SCSI_ReadCapacity10+0x50>
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80123ec:	2b02      	cmp	r3, #2
 80123ee:	d108      	bne.n	8012402 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80123f0:	7af9      	ldrb	r1, [r7, #11]
 80123f2:	233a      	movs	r3, #58	; 0x3a
 80123f4:	2202      	movs	r2, #2
 80123f6:	68f8      	ldr	r0, [r7, #12]
 80123f8:	f000 fa3b 	bl	8012872 <SCSI_SenseCode>
    return -1;
 80123fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012400:	e03f      	b.n	8012482 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012408:	3b01      	subs	r3, #1
 801240a:	0e1b      	lsrs	r3, r3, #24
 801240c:	b2da      	uxtb	r2, r3
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012418:	3b01      	subs	r3, #1
 801241a:	0c1b      	lsrs	r3, r3, #16
 801241c:	b2da      	uxtb	r2, r3
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012428:	3b01      	subs	r3, #1
 801242a:	0a1b      	lsrs	r3, r3, #8
 801242c:	b2da      	uxtb	r2, r3
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012438:	b2db      	uxtb	r3, r3
 801243a:	3b01      	subs	r3, #1
 801243c:	b2da      	uxtb	r2, r3
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012448:	161b      	asrs	r3, r3, #24
 801244a:	b2da      	uxtb	r2, r3
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012456:	141b      	asrs	r3, r3, #16
 8012458:	b2da      	uxtb	r2, r3
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012464:	0a1b      	lsrs	r3, r3, #8
 8012466:	b29b      	uxth	r3, r3
 8012468:	b2da      	uxtb	r2, r3
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012474:	b2da      	uxtb	r2, r3
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	2208      	movs	r2, #8
 801247e:	60da      	str	r2, [r3, #12]

  return 0;
 8012480:	2300      	movs	r3, #0

}
 8012482:	4618      	mov	r0, r3
 8012484:	3718      	adds	r7, #24
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b088      	sub	sp, #32
 801248e:	af00      	add	r7, sp, #0
 8012490:	60f8      	str	r0, [r7, #12]
 8012492:	460b      	mov	r3, r1
 8012494:	607a      	str	r2, [r7, #4]
 8012496:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801249e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d102      	bne.n	80124ac <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 80124a6:	f04f 33ff 	mov.w	r3, #4294967295
 80124aa:	e094      	b.n	80125d6 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	69ba      	ldr	r2, [r7, #24]
 80124b6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80124ba:	69ba      	ldr	r2, [r7, #24]
 80124bc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80124c0:	7af8      	ldrb	r0, [r7, #11]
 80124c2:	4798      	blx	r3
 80124c4:	4603      	mov	r3, r0
 80124c6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80124c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d104      	bne.n	80124da <SCSI_ReadCapacity16+0x50>
 80124d0:	69bb      	ldr	r3, [r7, #24]
 80124d2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80124d6:	2b02      	cmp	r3, #2
 80124d8:	d108      	bne.n	80124ec <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80124da:	7af9      	ldrb	r1, [r7, #11]
 80124dc:	233a      	movs	r3, #58	; 0x3a
 80124de:	2202      	movs	r2, #2
 80124e0:	68f8      	ldr	r0, [r7, #12]
 80124e2:	f000 f9c6 	bl	8012872 <SCSI_SenseCode>
    return -1;
 80124e6:	f04f 33ff 	mov.w	r3, #4294967295
 80124ea:	e074      	b.n	80125d6 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	330a      	adds	r3, #10
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	330b      	adds	r3, #11
 80124f8:	781b      	ldrb	r3, [r3, #0]
 80124fa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80124fc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	330c      	adds	r3, #12
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012506:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012508:	687a      	ldr	r2, [r7, #4]
 801250a:	320d      	adds	r2, #13
 801250c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801250e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012514:	2300      	movs	r3, #0
 8012516:	77fb      	strb	r3, [r7, #31]
 8012518:	e007      	b.n	801252a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801251a:	7ffb      	ldrb	r3, [r7, #31]
 801251c:	69ba      	ldr	r2, [r7, #24]
 801251e:	4413      	add	r3, r2
 8012520:	2200      	movs	r2, #0
 8012522:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012524:	7ffb      	ldrb	r3, [r7, #31]
 8012526:	3301      	adds	r3, #1
 8012528:	77fb      	strb	r3, [r7, #31]
 801252a:	7ffa      	ldrb	r2, [r7, #31]
 801252c:	69bb      	ldr	r3, [r7, #24]
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	429a      	cmp	r2, r3
 8012532:	d3f2      	bcc.n	801251a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012534:	69bb      	ldr	r3, [r7, #24]
 8012536:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801253a:	3b01      	subs	r3, #1
 801253c:	0e1b      	lsrs	r3, r3, #24
 801253e:	b2da      	uxtb	r2, r3
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801254a:	3b01      	subs	r3, #1
 801254c:	0c1b      	lsrs	r3, r3, #16
 801254e:	b2da      	uxtb	r2, r3
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012554:	69bb      	ldr	r3, [r7, #24]
 8012556:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801255a:	3b01      	subs	r3, #1
 801255c:	0a1b      	lsrs	r3, r3, #8
 801255e:	b2da      	uxtb	r2, r3
 8012560:	69bb      	ldr	r3, [r7, #24]
 8012562:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012564:	69bb      	ldr	r3, [r7, #24]
 8012566:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801256a:	b2db      	uxtb	r3, r3
 801256c:	3b01      	subs	r3, #1
 801256e:	b2da      	uxtb	r2, r3
 8012570:	69bb      	ldr	r3, [r7, #24]
 8012572:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012574:	69bb      	ldr	r3, [r7, #24]
 8012576:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801257a:	161b      	asrs	r3, r3, #24
 801257c:	b2da      	uxtb	r2, r3
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012582:	69bb      	ldr	r3, [r7, #24]
 8012584:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012588:	141b      	asrs	r3, r3, #16
 801258a:	b2da      	uxtb	r2, r3
 801258c:	69bb      	ldr	r3, [r7, #24]
 801258e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012590:	69bb      	ldr	r3, [r7, #24]
 8012592:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012596:	0a1b      	lsrs	r3, r3, #8
 8012598:	b29b      	uxth	r3, r3
 801259a:	b2da      	uxtb	r2, r3
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80125a6:	b2da      	uxtb	r2, r3
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	330a      	adds	r3, #10
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	330b      	adds	r3, #11
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80125bc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	330c      	adds	r3, #12
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80125c6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	320d      	adds	r2, #13
 80125cc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80125ce:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80125d0:	69bb      	ldr	r3, [r7, #24]
 80125d2:	60da      	str	r2, [r3, #12]

  return 0;
 80125d4:	2300      	movs	r3, #0
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3720      	adds	r7, #32
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80125de:	b580      	push	{r7, lr}
 80125e0:	b088      	sub	sp, #32
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	60f8      	str	r0, [r7, #12]
 80125e6:	460b      	mov	r3, r1
 80125e8:	607a      	str	r2, [r7, #4]
 80125ea:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80125f2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80125f4:	69bb      	ldr	r3, [r7, #24]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d102      	bne.n	8012600 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80125fa:	f04f 33ff 	mov.w	r3, #4294967295
 80125fe:	e05c      	b.n	80126ba <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	f107 0214 	add.w	r2, r7, #20
 801260c:	f107 0110 	add.w	r1, r7, #16
 8012610:	7af8      	ldrb	r0, [r7, #11]
 8012612:	4798      	blx	r3
 8012614:	4603      	mov	r3, r0
 8012616:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d104      	bne.n	801262a <SCSI_ReadFormatCapacity+0x4c>
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012626:	2b02      	cmp	r3, #2
 8012628:	d108      	bne.n	801263c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801262a:	7af9      	ldrb	r1, [r7, #11]
 801262c:	233a      	movs	r3, #58	; 0x3a
 801262e:	2202      	movs	r2, #2
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f000 f91e 	bl	8012872 <SCSI_SenseCode>
    return -1;
 8012636:	f04f 33ff 	mov.w	r3, #4294967295
 801263a:	e03e      	b.n	80126ba <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 801263c:	2300      	movs	r3, #0
 801263e:	83fb      	strh	r3, [r7, #30]
 8012640:	e007      	b.n	8012652 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8012642:	8bfb      	ldrh	r3, [r7, #30]
 8012644:	69ba      	ldr	r2, [r7, #24]
 8012646:	4413      	add	r3, r2
 8012648:	2200      	movs	r2, #0
 801264a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801264c:	8bfb      	ldrh	r3, [r7, #30]
 801264e:	3301      	adds	r3, #1
 8012650:	83fb      	strh	r3, [r7, #30]
 8012652:	8bfb      	ldrh	r3, [r7, #30]
 8012654:	2b0b      	cmp	r3, #11
 8012656:	d9f4      	bls.n	8012642 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8012658:	69bb      	ldr	r3, [r7, #24]
 801265a:	2208      	movs	r2, #8
 801265c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801265e:	693b      	ldr	r3, [r7, #16]
 8012660:	3b01      	subs	r3, #1
 8012662:	0e1b      	lsrs	r3, r3, #24
 8012664:	b2da      	uxtb	r2, r3
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	3b01      	subs	r3, #1
 801266e:	0c1b      	lsrs	r3, r3, #16
 8012670:	b2da      	uxtb	r2, r3
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	3b01      	subs	r3, #1
 801267a:	0a1b      	lsrs	r3, r3, #8
 801267c:	b2da      	uxtb	r2, r3
 801267e:	69bb      	ldr	r3, [r7, #24]
 8012680:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	b2db      	uxtb	r3, r3
 8012686:	3b01      	subs	r3, #1
 8012688:	b2da      	uxtb	r2, r3
 801268a:	69bb      	ldr	r3, [r7, #24]
 801268c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	2202      	movs	r2, #2
 8012692:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012694:	8abb      	ldrh	r3, [r7, #20]
 8012696:	141b      	asrs	r3, r3, #16
 8012698:	b2da      	uxtb	r2, r3
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801269e:	8abb      	ldrh	r3, [r7, #20]
 80126a0:	0a1b      	lsrs	r3, r3, #8
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	b2da      	uxtb	r2, r3
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80126aa:	8abb      	ldrh	r3, [r7, #20]
 80126ac:	b2da      	uxtb	r2, r3
 80126ae:	69bb      	ldr	r3, [r7, #24]
 80126b0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80126b2:	69bb      	ldr	r3, [r7, #24]
 80126b4:	220c      	movs	r2, #12
 80126b6:	60da      	str	r2, [r3, #12]

  return 0;
 80126b8:	2300      	movs	r3, #0
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3720      	adds	r7, #32
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
	...

080126c4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b086      	sub	sp, #24
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	460b      	mov	r3, r1
 80126ce:	607a      	str	r2, [r7, #4]
 80126d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80126d8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80126da:	2317      	movs	r3, #23
 80126dc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80126de:	693b      	ldr	r3, [r7, #16]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d102      	bne.n	80126ea <SCSI_ModeSense6+0x26>
  {
    return -1;
 80126e4:	f04f 33ff 	mov.w	r3, #4294967295
 80126e8:	e011      	b.n	801270e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	3304      	adds	r3, #4
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	8afa      	ldrh	r2, [r7, #22]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d303      	bcc.n	8012700 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	3304      	adds	r3, #4
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8012700:	8afb      	ldrh	r3, [r7, #22]
 8012702:	461a      	mov	r2, r3
 8012704:	4904      	ldr	r1, [pc, #16]	; (8012718 <SCSI_ModeSense6+0x54>)
 8012706:	6938      	ldr	r0, [r7, #16]
 8012708:	f000 fdbc 	bl	8013284 <SCSI_UpdateBotData>

  return 0;
 801270c:	2300      	movs	r3, #0
}
 801270e:	4618      	mov	r0, r3
 8012710:	3718      	adds	r7, #24
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	200000c0 	.word	0x200000c0

0801271c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b086      	sub	sp, #24
 8012720:	af00      	add	r7, sp, #0
 8012722:	60f8      	str	r0, [r7, #12]
 8012724:	460b      	mov	r3, r1
 8012726:	607a      	str	r2, [r7, #4]
 8012728:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012730:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8012732:	231b      	movs	r3, #27
 8012734:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012736:	693b      	ldr	r3, [r7, #16]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d102      	bne.n	8012742 <SCSI_ModeSense10+0x26>
  {
    return -1;
 801273c:	f04f 33ff 	mov.w	r3, #4294967295
 8012740:	e011      	b.n	8012766 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	3308      	adds	r3, #8
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	b29b      	uxth	r3, r3
 801274a:	8afa      	ldrh	r2, [r7, #22]
 801274c:	429a      	cmp	r2, r3
 801274e:	d303      	bcc.n	8012758 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	3308      	adds	r3, #8
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8012758:	8afb      	ldrh	r3, [r7, #22]
 801275a:	461a      	mov	r2, r3
 801275c:	4904      	ldr	r1, [pc, #16]	; (8012770 <SCSI_ModeSense10+0x54>)
 801275e:	6938      	ldr	r0, [r7, #16]
 8012760:	f000 fd90 	bl	8013284 <SCSI_UpdateBotData>

  return 0;
 8012764:	2300      	movs	r3, #0
}
 8012766:	4618      	mov	r0, r3
 8012768:	3718      	adds	r7, #24
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	200000d8 	.word	0x200000d8

08012774 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b086      	sub	sp, #24
 8012778:	af00      	add	r7, sp, #0
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	460b      	mov	r3, r1
 801277e:	607a      	str	r2, [r7, #4]
 8012780:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012788:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d102      	bne.n	8012796 <SCSI_RequestSense+0x22>
  {
    return -1;
 8012790:	f04f 33ff 	mov.w	r3, #4294967295
 8012794:	e069      	b.n	801286a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801279c:	2b00      	cmp	r3, #0
 801279e:	d10a      	bne.n	80127b6 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80127a6:	2320      	movs	r3, #32
 80127a8:	2205      	movs	r2, #5
 80127aa:	68f8      	ldr	r0, [r7, #12]
 80127ac:	f000 f861 	bl	8012872 <SCSI_SenseCode>
    return -1;
 80127b0:	f04f 33ff 	mov.w	r3, #4294967295
 80127b4:	e059      	b.n	801286a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80127b6:	2300      	movs	r3, #0
 80127b8:	75fb      	strb	r3, [r7, #23]
 80127ba:	e007      	b.n	80127cc <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 80127bc:	7dfb      	ldrb	r3, [r7, #23]
 80127be:	693a      	ldr	r2, [r7, #16]
 80127c0:	4413      	add	r3, r2
 80127c2:	2200      	movs	r2, #0
 80127c4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80127c6:	7dfb      	ldrb	r3, [r7, #23]
 80127c8:	3301      	adds	r3, #1
 80127ca:	75fb      	strb	r3, [r7, #23]
 80127cc:	7dfb      	ldrb	r3, [r7, #23]
 80127ce:	2b11      	cmp	r3, #17
 80127d0:	d9f4      	bls.n	80127bc <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	2270      	movs	r2, #112	; 0x70
 80127d6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	220c      	movs	r2, #12
 80127dc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d02e      	beq.n	801284c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80127f4:	461a      	mov	r2, r3
 80127f6:	693b      	ldr	r3, [r7, #16]
 80127f8:	3248      	adds	r2, #72	; 0x48
 80127fa:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012808:	693a      	ldr	r2, [r7, #16]
 801280a:	3348      	adds	r3, #72	; 0x48
 801280c:	00db      	lsls	r3, r3, #3
 801280e:	4413      	add	r3, r2
 8012810:	791a      	ldrb	r2, [r3, #4]
 8012812:	693b      	ldr	r3, [r7, #16]
 8012814:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801281c:	693a      	ldr	r2, [r7, #16]
 801281e:	3348      	adds	r3, #72	; 0x48
 8012820:	00db      	lsls	r3, r3, #3
 8012822:	4413      	add	r3, r2
 8012824:	795a      	ldrb	r2, [r3, #5]
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012830:	3301      	adds	r3, #1
 8012832:	b2da      	uxtb	r2, r3
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012840:	2b04      	cmp	r3, #4
 8012842:	d103      	bne.n	801284c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	2200      	movs	r2, #0
 8012848:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	2212      	movs	r2, #18
 8012850:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	3304      	adds	r3, #4
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	2b12      	cmp	r3, #18
 801285a:	d805      	bhi.n	8012868 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	3304      	adds	r3, #4
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	461a      	mov	r2, r3
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8012868:	2300      	movs	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	3718      	adds	r7, #24
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8012872:	b480      	push	{r7}
 8012874:	b085      	sub	sp, #20
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
 801287a:	4608      	mov	r0, r1
 801287c:	4611      	mov	r1, r2
 801287e:	461a      	mov	r2, r3
 8012880:	4603      	mov	r3, r0
 8012882:	70fb      	strb	r3, [r7, #3]
 8012884:	460b      	mov	r3, r1
 8012886:	70bb      	strb	r3, [r7, #2]
 8012888:	4613      	mov	r3, r2
 801288a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012892:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d02c      	beq.n	80128f4 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80128a0:	461a      	mov	r2, r3
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	3248      	adds	r2, #72	; 0x48
 80128a6:	78b9      	ldrb	r1, [r7, #2]
 80128a8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80128b2:	68fa      	ldr	r2, [r7, #12]
 80128b4:	3348      	adds	r3, #72	; 0x48
 80128b6:	00db      	lsls	r3, r3, #3
 80128b8:	4413      	add	r3, r2
 80128ba:	787a      	ldrb	r2, [r7, #1]
 80128bc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80128c4:	68fa      	ldr	r2, [r7, #12]
 80128c6:	3348      	adds	r3, #72	; 0x48
 80128c8:	00db      	lsls	r3, r3, #3
 80128ca:	4413      	add	r3, r2
 80128cc:	2200      	movs	r2, #0
 80128ce:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80128d6:	3301      	adds	r3, #1
 80128d8:	b2da      	uxtb	r2, r3
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80128e6:	2b04      	cmp	r3, #4
 80128e8:	d105      	bne.n	80128f6 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2200      	movs	r2, #0
 80128ee:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80128f2:	e000      	b.n	80128f6 <SCSI_SenseCode+0x84>
    return;
 80128f4:	bf00      	nop
  }
}
 80128f6:	3714      	adds	r7, #20
 80128f8:	46bd      	mov	sp, r7
 80128fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fe:	4770      	bx	lr

08012900 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b086      	sub	sp, #24
 8012904:	af00      	add	r7, sp, #0
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	460b      	mov	r3, r1
 801290a:	607a      	str	r2, [r7, #4]
 801290c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012914:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012916:	697b      	ldr	r3, [r7, #20]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d102      	bne.n	8012922 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 801291c:	f04f 33ff 	mov.w	r3, #4294967295
 8012920:	e03b      	b.n	801299a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012928:	2b01      	cmp	r3, #1
 801292a:	d10f      	bne.n	801294c <SCSI_StartStopUnit+0x4c>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	3304      	adds	r3, #4
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	f003 0303 	and.w	r3, r3, #3
 8012936:	2b02      	cmp	r3, #2
 8012938:	d108      	bne.n	801294c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801293a:	7af9      	ldrb	r1, [r7, #11]
 801293c:	2324      	movs	r3, #36	; 0x24
 801293e:	2205      	movs	r2, #5
 8012940:	68f8      	ldr	r0, [r7, #12]
 8012942:	f7ff ff96 	bl	8012872 <SCSI_SenseCode>

    return -1;
 8012946:	f04f 33ff 	mov.w	r3, #4294967295
 801294a:	e026      	b.n	801299a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	3304      	adds	r3, #4
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	f003 0303 	and.w	r3, r3, #3
 8012956:	2b01      	cmp	r3, #1
 8012958:	d104      	bne.n	8012964 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	2200      	movs	r2, #0
 801295e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8012962:	e016      	b.n	8012992 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	3304      	adds	r3, #4
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	f003 0303 	and.w	r3, r3, #3
 801296e:	2b02      	cmp	r3, #2
 8012970:	d104      	bne.n	801297c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	2202      	movs	r2, #2
 8012976:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801297a:	e00a      	b.n	8012992 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	3304      	adds	r3, #4
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	f003 0303 	and.w	r3, r3, #3
 8012986:	2b03      	cmp	r3, #3
 8012988:	d103      	bne.n	8012992 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	2200      	movs	r2, #0
 801298e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	2200      	movs	r2, #0
 8012996:	60da      	str	r2, [r3, #12]

  return 0;
 8012998:	2300      	movs	r3, #0
}
 801299a:	4618      	mov	r0, r3
 801299c:	3718      	adds	r7, #24
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80129a2:	b480      	push	{r7}
 80129a4:	b087      	sub	sp, #28
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	60f8      	str	r0, [r7, #12]
 80129aa:	460b      	mov	r3, r1
 80129ac:	607a      	str	r2, [r7, #4]
 80129ae:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80129b6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d102      	bne.n	80129c4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80129be:	f04f 33ff 	mov.w	r3, #4294967295
 80129c2:	e011      	b.n	80129e8 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	3304      	adds	r3, #4
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d104      	bne.n	80129d8 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	2200      	movs	r2, #0
 80129d2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80129d6:	e003      	b.n	80129e0 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	2201      	movs	r2, #1
 80129dc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	2200      	movs	r2, #0
 80129e4:	60da      	str	r2, [r3, #12]

  return 0;
 80129e6:	2300      	movs	r3, #0
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	371c      	adds	r7, #28
 80129ec:	46bd      	mov	sp, r7
 80129ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f2:	4770      	bx	lr

080129f4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b086      	sub	sp, #24
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	60f8      	str	r0, [r7, #12]
 80129fc:	460b      	mov	r3, r1
 80129fe:	607a      	str	r2, [r7, #4]
 8012a00:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d102      	bne.n	8012a16 <SCSI_Read10+0x22>
  {
    return -1;
 8012a10:	f04f 33ff 	mov.w	r3, #4294967295
 8012a14:	e08a      	b.n	8012b2c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	7a1b      	ldrb	r3, [r3, #8]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d17c      	bne.n	8012b18 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012a24:	b25b      	sxtb	r3, r3
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	db0a      	blt.n	8012a40 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012a30:	2320      	movs	r3, #32
 8012a32:	2205      	movs	r2, #5
 8012a34:	68f8      	ldr	r0, [r7, #12]
 8012a36:	f7ff ff1c 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a3e:	e075      	b.n	8012b2c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012a46:	2b02      	cmp	r3, #2
 8012a48:	d108      	bne.n	8012a5c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a4a:	7af9      	ldrb	r1, [r7, #11]
 8012a4c:	233a      	movs	r3, #58	; 0x3a
 8012a4e:	2202      	movs	r2, #2
 8012a50:	68f8      	ldr	r0, [r7, #12]
 8012a52:	f7ff ff0e 	bl	8012872 <SCSI_SenseCode>

      return -1;
 8012a56:	f04f 33ff 	mov.w	r3, #4294967295
 8012a5a:	e067      	b.n	8012b2c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a62:	689b      	ldr	r3, [r3, #8]
 8012a64:	7afa      	ldrb	r2, [r7, #11]
 8012a66:	4610      	mov	r0, r2
 8012a68:	4798      	blx	r3
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d008      	beq.n	8012a82 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a70:	7af9      	ldrb	r1, [r7, #11]
 8012a72:	233a      	movs	r3, #58	; 0x3a
 8012a74:	2202      	movs	r2, #2
 8012a76:	68f8      	ldr	r0, [r7, #12]
 8012a78:	f7ff fefb 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a80:	e054      	b.n	8012b2c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	3302      	adds	r3, #2
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	3303      	adds	r3, #3
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012a92:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	3304      	adds	r3, #4
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012a9c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012a9e:	687a      	ldr	r2, [r7, #4]
 8012aa0:	3205      	adds	r2, #5
 8012aa2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8012aa4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	3307      	adds	r3, #7
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	021b      	lsls	r3, r3, #8
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	3208      	adds	r2, #8
 8012ab8:	7812      	ldrb	r2, [r2, #0]
 8012aba:	431a      	orrs	r2, r3
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012ace:	7af9      	ldrb	r1, [r7, #11]
 8012ad0:	68f8      	ldr	r0, [r7, #12]
 8012ad2:	f000 faad 	bl	8013030 <SCSI_CheckAddressRange>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	da02      	bge.n	8012ae2 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012adc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ae0:	e024      	b.n	8012b2c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012aee:	6979      	ldr	r1, [r7, #20]
 8012af0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8012af4:	fb01 f303 	mul.w	r3, r1, r3
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d00a      	beq.n	8012b12 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012b02:	2320      	movs	r3, #32
 8012b04:	2205      	movs	r2, #5
 8012b06:	68f8      	ldr	r0, [r7, #12]
 8012b08:	f7ff feb3 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b10:	e00c      	b.n	8012b2c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	2202      	movs	r2, #2
 8012b16:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b1e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8012b20:	7afb      	ldrb	r3, [r7, #11]
 8012b22:	4619      	mov	r1, r3
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	f000 faab 	bl	8013080 <SCSI_ProcessRead>
 8012b2a:	4603      	mov	r3, r0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3718      	adds	r7, #24
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b086      	sub	sp, #24
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	460b      	mov	r3, r1
 8012b3e:	607a      	str	r2, [r7, #4]
 8012b40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b48:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d102      	bne.n	8012b56 <SCSI_Read12+0x22>
  {
    return -1;
 8012b50:	f04f 33ff 	mov.w	r3, #4294967295
 8012b54:	e095      	b.n	8012c82 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	7a1b      	ldrb	r3, [r3, #8]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	f040 8087 	bne.w	8012c6e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012b66:	b25b      	sxtb	r3, r3
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	db0a      	blt.n	8012b82 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012b72:	2320      	movs	r3, #32
 8012b74:	2205      	movs	r2, #5
 8012b76:	68f8      	ldr	r0, [r7, #12]
 8012b78:	f7ff fe7b 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b80:	e07f      	b.n	8012c82 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012b88:	2b02      	cmp	r3, #2
 8012b8a:	d108      	bne.n	8012b9e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012b8c:	7af9      	ldrb	r1, [r7, #11]
 8012b8e:	233a      	movs	r3, #58	; 0x3a
 8012b90:	2202      	movs	r2, #2
 8012b92:	68f8      	ldr	r0, [r7, #12]
 8012b94:	f7ff fe6d 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012b98:	f04f 33ff 	mov.w	r3, #4294967295
 8012b9c:	e071      	b.n	8012c82 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ba4:	689b      	ldr	r3, [r3, #8]
 8012ba6:	7afa      	ldrb	r2, [r7, #11]
 8012ba8:	4610      	mov	r0, r2
 8012baa:	4798      	blx	r3
 8012bac:	4603      	mov	r3, r0
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d008      	beq.n	8012bc4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012bb2:	7af9      	ldrb	r1, [r7, #11]
 8012bb4:	233a      	movs	r3, #58	; 0x3a
 8012bb6:	2202      	movs	r2, #2
 8012bb8:	68f8      	ldr	r0, [r7, #12]
 8012bba:	f7ff fe5a 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8012bc2:	e05e      	b.n	8012c82 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	3302      	adds	r3, #2
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	3303      	adds	r3, #3
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012bd4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	3304      	adds	r3, #4
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012bde:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	3205      	adds	r2, #5
 8012be4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8012be6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	3306      	adds	r3, #6
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	3307      	adds	r3, #7
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012bfe:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	3308      	adds	r3, #8
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012c08:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012c0a:	687a      	ldr	r2, [r7, #4]
 8012c0c:	3209      	adds	r2, #9
 8012c0e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012c10:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012c24:	7af9      	ldrb	r1, [r7, #11]
 8012c26:	68f8      	ldr	r0, [r7, #12]
 8012c28:	f000 fa02 	bl	8013030 <SCSI_CheckAddressRange>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	da02      	bge.n	8012c38 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012c32:	f04f 33ff 	mov.w	r3, #4294967295
 8012c36:	e024      	b.n	8012c82 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012c44:	6979      	ldr	r1, [r7, #20]
 8012c46:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8012c4a:	fb01 f303 	mul.w	r3, r1, r3
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d00a      	beq.n	8012c68 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012c58:	2320      	movs	r3, #32
 8012c5a:	2205      	movs	r2, #5
 8012c5c:	68f8      	ldr	r0, [r7, #12]
 8012c5e:	f7ff fe08 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012c62:	f04f 33ff 	mov.w	r3, #4294967295
 8012c66:	e00c      	b.n	8012c82 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	2202      	movs	r2, #2
 8012c6c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012c6e:	697b      	ldr	r3, [r7, #20]
 8012c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c74:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8012c76:	7afb      	ldrb	r3, [r7, #11]
 8012c78:	4619      	mov	r1, r3
 8012c7a:	68f8      	ldr	r0, [r7, #12]
 8012c7c:	f000 fa00 	bl	8013080 <SCSI_ProcessRead>
 8012c80:	4603      	mov	r3, r0
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3718      	adds	r7, #24
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}

08012c8a <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012c8a:	b580      	push	{r7, lr}
 8012c8c:	b086      	sub	sp, #24
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	60f8      	str	r0, [r7, #12]
 8012c92:	460b      	mov	r3, r1
 8012c94:	607a      	str	r2, [r7, #4]
 8012c96:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c9e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012ca0:	697b      	ldr	r3, [r7, #20]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d102      	bne.n	8012cac <SCSI_Write10+0x22>
  {
    return -1;
 8012ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8012caa:	e0af      	b.n	8012e0c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	7a1b      	ldrb	r3, [r3, #8]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f040 80a5 	bne.w	8012e00 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d10a      	bne.n	8012cd6 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012cc6:	2320      	movs	r3, #32
 8012cc8:	2205      	movs	r2, #5
 8012cca:	68f8      	ldr	r0, [r7, #12]
 8012ccc:	f7ff fdd1 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8012cd4:	e09a      	b.n	8012e0c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012cdc:	b25b      	sxtb	r3, r3
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	da0a      	bge.n	8012cf8 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012ce8:	2320      	movs	r3, #32
 8012cea:	2205      	movs	r2, #5
 8012cec:	68f8      	ldr	r0, [r7, #12]
 8012cee:	f7ff fdc0 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8012cf6:	e089      	b.n	8012e0c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012cfe:	689b      	ldr	r3, [r3, #8]
 8012d00:	7afa      	ldrb	r2, [r7, #11]
 8012d02:	4610      	mov	r0, r2
 8012d04:	4798      	blx	r3
 8012d06:	4603      	mov	r3, r0
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d008      	beq.n	8012d1e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012d0c:	7af9      	ldrb	r1, [r7, #11]
 8012d0e:	233a      	movs	r3, #58	; 0x3a
 8012d10:	2202      	movs	r2, #2
 8012d12:	68f8      	ldr	r0, [r7, #12]
 8012d14:	f7ff fdad 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012d18:	f04f 33ff 	mov.w	r3, #4294967295
 8012d1c:	e076      	b.n	8012e0c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d24:	68db      	ldr	r3, [r3, #12]
 8012d26:	7afa      	ldrb	r2, [r7, #11]
 8012d28:	4610      	mov	r0, r2
 8012d2a:	4798      	blx	r3
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d008      	beq.n	8012d44 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012d32:	7af9      	ldrb	r1, [r7, #11]
 8012d34:	2327      	movs	r3, #39	; 0x27
 8012d36:	2202      	movs	r2, #2
 8012d38:	68f8      	ldr	r0, [r7, #12]
 8012d3a:	f7ff fd9a 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d42:	e063      	b.n	8012e0c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	3302      	adds	r3, #2
 8012d48:	781b      	ldrb	r3, [r3, #0]
 8012d4a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	3303      	adds	r3, #3
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012d54:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3304      	adds	r3, #4
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012d5e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012d60:	687a      	ldr	r2, [r7, #4]
 8012d62:	3205      	adds	r2, #5
 8012d64:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012d66:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	3307      	adds	r3, #7
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	3208      	adds	r2, #8
 8012d7a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012d7c:	431a      	orrs	r2, r3
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012d90:	7af9      	ldrb	r1, [r7, #11]
 8012d92:	68f8      	ldr	r0, [r7, #12]
 8012d94:	f000 f94c 	bl	8013030 <SCSI_CheckAddressRange>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	da02      	bge.n	8012da4 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8012da2:	e033      	b.n	8012e0c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012daa:	697a      	ldr	r2, [r7, #20]
 8012dac:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012db0:	fb02 f303 	mul.w	r3, r2, r3
 8012db4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012dbc:	693a      	ldr	r2, [r7, #16]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d00a      	beq.n	8012dd8 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012dc8:	2320      	movs	r3, #32
 8012dca:	2205      	movs	r2, #5
 8012dcc:	68f8      	ldr	r0, [r7, #12]
 8012dce:	f7ff fd50 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8012dd6:	e019      	b.n	8012e0c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012dde:	bf28      	it	cs
 8012de0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012de4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	2201      	movs	r2, #1
 8012dea:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	f103 0210 	add.w	r2, r3, #16
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	2101      	movs	r1, #1
 8012df6:	68f8      	ldr	r0, [r7, #12]
 8012df8:	f004 ffa5 	bl	8017d46 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	e005      	b.n	8012e0c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8012e00:	7afb      	ldrb	r3, [r7, #11]
 8012e02:	4619      	mov	r1, r3
 8012e04:	68f8      	ldr	r0, [r7, #12]
 8012e06:	f000 f9b4 	bl	8013172 <SCSI_ProcessWrite>
 8012e0a:	4603      	mov	r3, r0
}
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	3718      	adds	r7, #24
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}

08012e14 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b086      	sub	sp, #24
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	60f8      	str	r0, [r7, #12]
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	607a      	str	r2, [r7, #4]
 8012e20:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e28:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d102      	bne.n	8012e36 <SCSI_Write12+0x22>
  {
    return -1;
 8012e30:	f04f 33ff 	mov.w	r3, #4294967295
 8012e34:	e0bf      	b.n	8012fb6 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	7a1b      	ldrb	r3, [r3, #8]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	f040 80b5 	bne.w	8012faa <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d10a      	bne.n	8012e60 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012e4a:	697b      	ldr	r3, [r7, #20]
 8012e4c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012e50:	2320      	movs	r3, #32
 8012e52:	2205      	movs	r2, #5
 8012e54:	68f8      	ldr	r0, [r7, #12]
 8012e56:	f7ff fd0c 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8012e5e:	e0aa      	b.n	8012fb6 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012e60:	697b      	ldr	r3, [r7, #20]
 8012e62:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012e66:	b25b      	sxtb	r3, r3
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	da0a      	bge.n	8012e82 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012e72:	2320      	movs	r3, #32
 8012e74:	2205      	movs	r2, #5
 8012e76:	68f8      	ldr	r0, [r7, #12]
 8012e78:	f7ff fcfb 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012e80:	e099      	b.n	8012fb6 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e88:	689b      	ldr	r3, [r3, #8]
 8012e8a:	7afa      	ldrb	r2, [r7, #11]
 8012e8c:	4610      	mov	r0, r2
 8012e8e:	4798      	blx	r3
 8012e90:	4603      	mov	r3, r0
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d00b      	beq.n	8012eae <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012e96:	7af9      	ldrb	r1, [r7, #11]
 8012e98:	233a      	movs	r3, #58	; 0x3a
 8012e9a:	2202      	movs	r2, #2
 8012e9c:	68f8      	ldr	r0, [r7, #12]
 8012e9e:	f7ff fce8 	bl	8012872 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	2205      	movs	r2, #5
 8012ea6:	721a      	strb	r2, [r3, #8]
      return -1;
 8012ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8012eac:	e083      	b.n	8012fb6 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012eb4:	68db      	ldr	r3, [r3, #12]
 8012eb6:	7afa      	ldrb	r2, [r7, #11]
 8012eb8:	4610      	mov	r0, r2
 8012eba:	4798      	blx	r3
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d00b      	beq.n	8012eda <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012ec2:	7af9      	ldrb	r1, [r7, #11]
 8012ec4:	2327      	movs	r3, #39	; 0x27
 8012ec6:	2202      	movs	r2, #2
 8012ec8:	68f8      	ldr	r0, [r7, #12]
 8012eca:	f7ff fcd2 	bl	8012872 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	2205      	movs	r2, #5
 8012ed2:	721a      	strb	r2, [r3, #8]
      return -1;
 8012ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ed8:	e06d      	b.n	8012fb6 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	3302      	adds	r3, #2
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	3303      	adds	r3, #3
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012eea:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	3304      	adds	r3, #4
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012ef4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012ef6:	687a      	ldr	r2, [r7, #4]
 8012ef8:	3205      	adds	r2, #5
 8012efa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012efc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	3306      	adds	r3, #6
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	3307      	adds	r3, #7
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012f14:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	3308      	adds	r3, #8
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012f1e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012f20:	687a      	ldr	r2, [r7, #4]
 8012f22:	3209      	adds	r2, #9
 8012f24:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012f26:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012f3a:	7af9      	ldrb	r1, [r7, #11]
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	f000 f877 	bl	8013030 <SCSI_CheckAddressRange>
 8012f42:	4603      	mov	r3, r0
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	da02      	bge.n	8012f4e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012f48:	f04f 33ff 	mov.w	r3, #4294967295
 8012f4c:	e033      	b.n	8012fb6 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012f54:	697a      	ldr	r2, [r7, #20]
 8012f56:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012f5a:	fb02 f303 	mul.w	r3, r2, r3
 8012f5e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012f66:	693a      	ldr	r2, [r7, #16]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d00a      	beq.n	8012f82 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012f6c:	697b      	ldr	r3, [r7, #20]
 8012f6e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012f72:	2320      	movs	r3, #32
 8012f74:	2205      	movs	r2, #5
 8012f76:	68f8      	ldr	r0, [r7, #12]
 8012f78:	f7ff fc7b 	bl	8012872 <SCSI_SenseCode>
      return -1;
 8012f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012f80:	e019      	b.n	8012fb6 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012f82:	693b      	ldr	r3, [r7, #16]
 8012f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f88:	bf28      	it	cs
 8012f8a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012f8e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	2201      	movs	r2, #1
 8012f94:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	f103 0210 	add.w	r2, r3, #16
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	2101      	movs	r1, #1
 8012fa0:	68f8      	ldr	r0, [r7, #12]
 8012fa2:	f004 fed0 	bl	8017d46 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	e005      	b.n	8012fb6 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8012faa:	7afb      	ldrb	r3, [r7, #11]
 8012fac:	4619      	mov	r1, r3
 8012fae:	68f8      	ldr	r0, [r7, #12]
 8012fb0:	f000 f8df 	bl	8013172 <SCSI_ProcessWrite>
 8012fb4:	4603      	mov	r3, r0
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3718      	adds	r7, #24
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}

08012fbe <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b086      	sub	sp, #24
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	60f8      	str	r0, [r7, #12]
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	607a      	str	r2, [r7, #4]
 8012fca:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fd2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d102      	bne.n	8012fe0 <SCSI_Verify10+0x22>
  {
    return -1;
 8012fda:	f04f 33ff 	mov.w	r3, #4294967295
 8012fde:	e023      	b.n	8013028 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	f003 0302 	and.w	r3, r3, #2
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d008      	beq.n	8013000 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012fee:	7af9      	ldrb	r1, [r7, #11]
 8012ff0:	2324      	movs	r3, #36	; 0x24
 8012ff2:	2205      	movs	r2, #5
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f7ff fc3c 	bl	8012872 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8012ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8012ffe:	e013      	b.n	8013028 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801300c:	7af9      	ldrb	r1, [r7, #11]
 801300e:	68f8      	ldr	r0, [r7, #12]
 8013010:	f000 f80e 	bl	8013030 <SCSI_CheckAddressRange>
 8013014:	4603      	mov	r3, r0
 8013016:	2b00      	cmp	r3, #0
 8013018:	da02      	bge.n	8013020 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 801301a:	f04f 33ff 	mov.w	r3, #4294967295
 801301e:	e003      	b.n	8013028 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	2200      	movs	r2, #0
 8013024:	60da      	str	r2, [r3, #12]

  return 0;
 8013026:	2300      	movs	r3, #0
}
 8013028:	4618      	mov	r0, r3
 801302a:	3718      	adds	r7, #24
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b086      	sub	sp, #24
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	607a      	str	r2, [r7, #4]
 801303a:	603b      	str	r3, [r7, #0]
 801303c:	460b      	mov	r3, r1
 801303e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013046:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d102      	bne.n	8013054 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 801304e:	f04f 33ff 	mov.w	r3, #4294967295
 8013052:	e011      	b.n	8013078 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	441a      	add	r2, r3
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013060:	429a      	cmp	r2, r3
 8013062:	d908      	bls.n	8013076 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8013064:	7af9      	ldrb	r1, [r7, #11]
 8013066:	2321      	movs	r3, #33	; 0x21
 8013068:	2205      	movs	r2, #5
 801306a:	68f8      	ldr	r0, [r7, #12]
 801306c:	f7ff fc01 	bl	8012872 <SCSI_SenseCode>
    return -1;
 8013070:	f04f 33ff 	mov.w	r3, #4294967295
 8013074:	e000      	b.n	8013078 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8013076:	2300      	movs	r3, #0
}
 8013078:	4618      	mov	r0, r3
 801307a:	3718      	adds	r7, #24
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}

08013080 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013080:	b590      	push	{r4, r7, lr}
 8013082:	b085      	sub	sp, #20
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	460b      	mov	r3, r1
 801308a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013092:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801309a:	68fa      	ldr	r2, [r7, #12]
 801309c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80130a0:	fb02 f303 	mul.w	r3, r2, r3
 80130a4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d102      	bne.n	80130b2 <SCSI_ProcessRead+0x32>
  {
    return -1;
 80130ac:	f04f 33ff 	mov.w	r3, #4294967295
 80130b0:	e05b      	b.n	801316a <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130b8:	bf28      	it	cs
 80130ba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80130be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130c6:	691c      	ldr	r4, [r3, #16]
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	f103 0110 	add.w	r1, r3, #16
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80130da:	4618      	mov	r0, r3
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	78f8      	ldrb	r0, [r7, #3]
 80130e6:	47a0      	blx	r4
 80130e8:	4603      	mov	r3, r0
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	da08      	bge.n	8013100 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80130ee:	78f9      	ldrb	r1, [r7, #3]
 80130f0:	2311      	movs	r3, #17
 80130f2:	2204      	movs	r2, #4
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7ff fbbc 	bl	8012872 <SCSI_SenseCode>
    return -1;
 80130fa:	f04f 33ff 	mov.w	r3, #4294967295
 80130fe:	e034      	b.n	801316a <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	f103 0210 	add.w	r2, r3, #16
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	2181      	movs	r1, #129	; 0x81
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f004 fdfa 	bl	8017d04 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801311c:	4619      	mov	r1, r3
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	fbb3 f3f1 	udiv	r3, r3, r1
 8013124:	441a      	add	r2, r3
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013138:	4619      	mov	r1, r3
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013140:	1ad2      	subs	r2, r2, r3
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	1ad2      	subs	r2, r2, r3
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801315e:	2b00      	cmp	r3, #0
 8013160:	d102      	bne.n	8013168 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2203      	movs	r2, #3
 8013166:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8013168:	2300      	movs	r3, #0
}
 801316a:	4618      	mov	r0, r3
 801316c:	3714      	adds	r7, #20
 801316e:	46bd      	mov	sp, r7
 8013170:	bd90      	pop	{r4, r7, pc}

08013172 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013172:	b590      	push	{r4, r7, lr}
 8013174:	b085      	sub	sp, #20
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
 801317a:	460b      	mov	r3, r1
 801317c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013184:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801318c:	68fa      	ldr	r2, [r7, #12]
 801318e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8013192:	fb02 f303 	mul.w	r3, r2, r3
 8013196:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d102      	bne.n	80131a4 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 801319e:	f04f 33ff 	mov.w	r3, #4294967295
 80131a2:	e06b      	b.n	801327c <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131aa:	bf28      	it	cs
 80131ac:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80131b0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80131b8:	695c      	ldr	r4, [r3, #20]
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	f103 0110 	add.w	r1, r3, #16
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80131cc:	4618      	mov	r0, r3
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80131d4:	b29b      	uxth	r3, r3
 80131d6:	78f8      	ldrb	r0, [r7, #3]
 80131d8:	47a0      	blx	r4
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	da08      	bge.n	80131f2 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80131e0:	78f9      	ldrb	r1, [r7, #3]
 80131e2:	2303      	movs	r3, #3
 80131e4:	2204      	movs	r2, #4
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f7ff fb43 	bl	8012872 <SCSI_SenseCode>
    return -1;
 80131ec:	f04f 33ff 	mov.w	r3, #4294967295
 80131f0:	e044      	b.n	801327c <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80131fe:	4619      	mov	r1, r3
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	fbb3 f3f1 	udiv	r3, r3, r1
 8013206:	441a      	add	r2, r3
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801321a:	4619      	mov	r1, r3
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013222:	1ad2      	subs	r2, r2, r3
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	1ad2      	subs	r2, r2, r3
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013240:	2b00      	cmp	r3, #0
 8013242:	d104      	bne.n	801324e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013244:	2100      	movs	r1, #0
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f7fe fdd8 	bl	8011dfc <MSC_BOT_SendCSW>
 801324c:	e015      	b.n	801327a <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013254:	68fa      	ldr	r2, [r7, #12]
 8013256:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801325a:	fb02 f303 	mul.w	r3, r2, r3
 801325e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013262:	bf28      	it	cs
 8013264:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013268:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	f103 0210 	add.w	r2, r3, #16
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	2101      	movs	r1, #1
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f004 fd66 	bl	8017d46 <USBD_LL_PrepareReceive>
  }

  return 0;
 801327a:	2300      	movs	r3, #0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3714      	adds	r7, #20
 8013280:	46bd      	mov	sp, r7
 8013282:	bd90      	pop	{r4, r7, pc}

08013284 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8013284:	b480      	push	{r7}
 8013286:	b087      	sub	sp, #28
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	4613      	mov	r3, r2
 8013290:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8013292:	88fb      	ldrh	r3, [r7, #6]
 8013294:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d102      	bne.n	80132a2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 801329c:	f04f 33ff 	mov.w	r3, #4294967295
 80132a0:	e013      	b.n	80132ca <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80132a2:	8afa      	ldrh	r2, [r7, #22]
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80132a8:	e00b      	b.n	80132c2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80132aa:	8afb      	ldrh	r3, [r7, #22]
 80132ac:	3b01      	subs	r3, #1
 80132ae:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80132b0:	8afb      	ldrh	r3, [r7, #22]
 80132b2:	68ba      	ldr	r2, [r7, #8]
 80132b4:	441a      	add	r2, r3
 80132b6:	8afb      	ldrh	r3, [r7, #22]
 80132b8:	7811      	ldrb	r1, [r2, #0]
 80132ba:	68fa      	ldr	r2, [r7, #12]
 80132bc:	4413      	add	r3, r2
 80132be:	460a      	mov	r2, r1
 80132c0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80132c2:	8afb      	ldrh	r3, [r7, #22]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d1f0      	bne.n	80132aa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80132c8:	2300      	movs	r3, #0
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	371c      	adds	r7, #28
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr

080132d6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80132d6:	b580      	push	{r7, lr}
 80132d8:	b086      	sub	sp, #24
 80132da:	af00      	add	r7, sp, #0
 80132dc:	60f8      	str	r0, [r7, #12]
 80132de:	60b9      	str	r1, [r7, #8]
 80132e0:	4613      	mov	r3, r2
 80132e2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d101      	bne.n	80132ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80132ea:	2303      	movs	r3, #3
 80132ec:	e01f      	b.n	801332e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2200      	movs	r2, #0
 80132f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2200      	movs	r2, #0
 80132fa:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2200      	movs	r2, #0
 8013302:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d003      	beq.n	8013314 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	68ba      	ldr	r2, [r7, #8]
 8013310:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	2201      	movs	r2, #1
 8013318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	79fa      	ldrb	r2, [r7, #7]
 8013320:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013322:	68f8      	ldr	r0, [r7, #12]
 8013324:	f004 fb9a 	bl	8017a5c <USBD_LL_Init>
 8013328:	4603      	mov	r3, r0
 801332a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801332c:	7dfb      	ldrb	r3, [r7, #23]
}
 801332e:	4618      	mov	r0, r3
 8013330:	3718      	adds	r7, #24
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}

08013336 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013336:	b580      	push	{r7, lr}
 8013338:	b084      	sub	sp, #16
 801333a:	af00      	add	r7, sp, #0
 801333c:	6078      	str	r0, [r7, #4]
 801333e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013340:	2300      	movs	r3, #0
 8013342:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d101      	bne.n	801334e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801334a:	2303      	movs	r3, #3
 801334c:	e016      	b.n	801337c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	683a      	ldr	r2, [r7, #0]
 8013352:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801335e:	2b00      	cmp	r3, #0
 8013360:	d00b      	beq.n	801337a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801336a:	f107 020e 	add.w	r2, r7, #14
 801336e:	4610      	mov	r0, r2
 8013370:	4798      	blx	r3
 8013372:	4602      	mov	r2, r0
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801337a:	2300      	movs	r3, #0
}
 801337c:	4618      	mov	r0, r3
 801337e:	3710      	adds	r7, #16
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b082      	sub	sp, #8
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f004 fbb1 	bl	8017af4 <USBD_LL_Start>
 8013392:	4603      	mov	r3, r0
}
 8013394:	4618      	mov	r0, r3
 8013396:	3708      	adds	r7, #8
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80133a4:	2300      	movs	r3, #0
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	370c      	adds	r7, #12
 80133aa:	46bd      	mov	sp, r7
 80133ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b0:	4770      	bx	lr

080133b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b084      	sub	sp, #16
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
 80133ba:	460b      	mov	r3, r1
 80133bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80133be:	2303      	movs	r3, #3
 80133c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d009      	beq.n	80133e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	78fa      	ldrb	r2, [r7, #3]
 80133d6:	4611      	mov	r1, r2
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	4798      	blx	r3
 80133dc:	4603      	mov	r3, r0
 80133de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80133e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	3710      	adds	r7, #16
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}

080133ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80133ea:	b580      	push	{r7, lr}
 80133ec:	b082      	sub	sp, #8
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	6078      	str	r0, [r7, #4]
 80133f2:	460b      	mov	r3, r1
 80133f4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d007      	beq.n	8013410 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	78fa      	ldrb	r2, [r7, #3]
 801340a:	4611      	mov	r1, r2
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	4798      	blx	r3
  }

  return USBD_OK;
 8013410:	2300      	movs	r3, #0
}
 8013412:	4618      	mov	r0, r3
 8013414:	3708      	adds	r7, #8
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}

0801341a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801341a:	b580      	push	{r7, lr}
 801341c:	b084      	sub	sp, #16
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
 8013422:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801342a:	6839      	ldr	r1, [r7, #0]
 801342c:	4618      	mov	r0, r3
 801342e:	f000 ffb9 	bl	80143a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2201      	movs	r2, #1
 8013436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013440:	461a      	mov	r2, r3
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801344e:	f003 031f 	and.w	r3, r3, #31
 8013452:	2b02      	cmp	r3, #2
 8013454:	d01a      	beq.n	801348c <USBD_LL_SetupStage+0x72>
 8013456:	2b02      	cmp	r3, #2
 8013458:	d822      	bhi.n	80134a0 <USBD_LL_SetupStage+0x86>
 801345a:	2b00      	cmp	r3, #0
 801345c:	d002      	beq.n	8013464 <USBD_LL_SetupStage+0x4a>
 801345e:	2b01      	cmp	r3, #1
 8013460:	d00a      	beq.n	8013478 <USBD_LL_SetupStage+0x5e>
 8013462:	e01d      	b.n	80134a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801346a:	4619      	mov	r1, r3
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f000 fa61 	bl	8013934 <USBD_StdDevReq>
 8013472:	4603      	mov	r3, r0
 8013474:	73fb      	strb	r3, [r7, #15]
      break;
 8013476:	e020      	b.n	80134ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801347e:	4619      	mov	r1, r3
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f000 fac5 	bl	8013a10 <USBD_StdItfReq>
 8013486:	4603      	mov	r3, r0
 8013488:	73fb      	strb	r3, [r7, #15]
      break;
 801348a:	e016      	b.n	80134ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013492:	4619      	mov	r1, r3
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f000 fb04 	bl	8013aa2 <USBD_StdEPReq>
 801349a:	4603      	mov	r3, r0
 801349c:	73fb      	strb	r3, [r7, #15]
      break;
 801349e:	e00c      	b.n	80134ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80134a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80134aa:	b2db      	uxtb	r3, r3
 80134ac:	4619      	mov	r1, r3
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f004 fb9f 	bl	8017bf2 <USBD_LL_StallEP>
 80134b4:	4603      	mov	r3, r0
 80134b6:	73fb      	strb	r3, [r7, #15]
      break;
 80134b8:	bf00      	nop
  }

  return ret;
 80134ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80134bc:	4618      	mov	r0, r3
 80134be:	3710      	adds	r7, #16
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}

080134c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	460b      	mov	r3, r1
 80134ce:	607a      	str	r2, [r7, #4]
 80134d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80134d2:	7afb      	ldrb	r3, [r7, #11]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d138      	bne.n	801354a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80134de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80134e6:	2b03      	cmp	r3, #3
 80134e8:	d14a      	bne.n	8013580 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	689a      	ldr	r2, [r3, #8]
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	68db      	ldr	r3, [r3, #12]
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d913      	bls.n	801351e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	689a      	ldr	r2, [r3, #8]
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	68db      	ldr	r3, [r3, #12]
 80134fe:	1ad2      	subs	r2, r2, r3
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	68da      	ldr	r2, [r3, #12]
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	689b      	ldr	r3, [r3, #8]
 801350c:	4293      	cmp	r3, r2
 801350e:	bf28      	it	cs
 8013510:	4613      	movcs	r3, r2
 8013512:	461a      	mov	r2, r3
 8013514:	6879      	ldr	r1, [r7, #4]
 8013516:	68f8      	ldr	r0, [r7, #12]
 8013518:	f001 f81b 	bl	8014552 <USBD_CtlContinueRx>
 801351c:	e030      	b.n	8013580 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013524:	b2db      	uxtb	r3, r3
 8013526:	2b03      	cmp	r3, #3
 8013528:	d10b      	bne.n	8013542 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013530:	691b      	ldr	r3, [r3, #16]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d005      	beq.n	8013542 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801353c:	691b      	ldr	r3, [r3, #16]
 801353e:	68f8      	ldr	r0, [r7, #12]
 8013540:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013542:	68f8      	ldr	r0, [r7, #12]
 8013544:	f001 f816 	bl	8014574 <USBD_CtlSendStatus>
 8013548:	e01a      	b.n	8013580 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013550:	b2db      	uxtb	r3, r3
 8013552:	2b03      	cmp	r3, #3
 8013554:	d114      	bne.n	8013580 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801355c:	699b      	ldr	r3, [r3, #24]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d00e      	beq.n	8013580 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013568:	699b      	ldr	r3, [r3, #24]
 801356a:	7afa      	ldrb	r2, [r7, #11]
 801356c:	4611      	mov	r1, r2
 801356e:	68f8      	ldr	r0, [r7, #12]
 8013570:	4798      	blx	r3
 8013572:	4603      	mov	r3, r0
 8013574:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013576:	7dfb      	ldrb	r3, [r7, #23]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d001      	beq.n	8013580 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801357c:	7dfb      	ldrb	r3, [r7, #23]
 801357e:	e000      	b.n	8013582 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013580:	2300      	movs	r3, #0
}
 8013582:	4618      	mov	r0, r3
 8013584:	3718      	adds	r7, #24
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}

0801358a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801358a:	b580      	push	{r7, lr}
 801358c:	b086      	sub	sp, #24
 801358e:	af00      	add	r7, sp, #0
 8013590:	60f8      	str	r0, [r7, #12]
 8013592:	460b      	mov	r3, r1
 8013594:	607a      	str	r2, [r7, #4]
 8013596:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013598:	7afb      	ldrb	r3, [r7, #11]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d16b      	bne.n	8013676 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	3314      	adds	r3, #20
 80135a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80135aa:	2b02      	cmp	r3, #2
 80135ac:	d156      	bne.n	801365c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	689a      	ldr	r2, [r3, #8]
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	68db      	ldr	r3, [r3, #12]
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d914      	bls.n	80135e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	689a      	ldr	r2, [r3, #8]
 80135be:	693b      	ldr	r3, [r7, #16]
 80135c0:	68db      	ldr	r3, [r3, #12]
 80135c2:	1ad2      	subs	r2, r2, r3
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80135c8:	693b      	ldr	r3, [r7, #16]
 80135ca:	689b      	ldr	r3, [r3, #8]
 80135cc:	461a      	mov	r2, r3
 80135ce:	6879      	ldr	r1, [r7, #4]
 80135d0:	68f8      	ldr	r0, [r7, #12]
 80135d2:	f000 ffad 	bl	8014530 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80135d6:	2300      	movs	r3, #0
 80135d8:	2200      	movs	r2, #0
 80135da:	2100      	movs	r1, #0
 80135dc:	68f8      	ldr	r0, [r7, #12]
 80135de:	f004 fbb2 	bl	8017d46 <USBD_LL_PrepareReceive>
 80135e2:	e03b      	b.n	801365c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	68da      	ldr	r2, [r3, #12]
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	689b      	ldr	r3, [r3, #8]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d11c      	bne.n	801362a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	685a      	ldr	r2, [r3, #4]
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d316      	bcc.n	801362a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	685a      	ldr	r2, [r3, #4]
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013606:	429a      	cmp	r2, r3
 8013608:	d20f      	bcs.n	801362a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801360a:	2200      	movs	r2, #0
 801360c:	2100      	movs	r1, #0
 801360e:	68f8      	ldr	r0, [r7, #12]
 8013610:	f000 ff8e 	bl	8014530 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2200      	movs	r2, #0
 8013618:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801361c:	2300      	movs	r3, #0
 801361e:	2200      	movs	r2, #0
 8013620:	2100      	movs	r1, #0
 8013622:	68f8      	ldr	r0, [r7, #12]
 8013624:	f004 fb8f 	bl	8017d46 <USBD_LL_PrepareReceive>
 8013628:	e018      	b.n	801365c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013630:	b2db      	uxtb	r3, r3
 8013632:	2b03      	cmp	r3, #3
 8013634:	d10b      	bne.n	801364e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801363c:	68db      	ldr	r3, [r3, #12]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d005      	beq.n	801364e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013648:	68db      	ldr	r3, [r3, #12]
 801364a:	68f8      	ldr	r0, [r7, #12]
 801364c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801364e:	2180      	movs	r1, #128	; 0x80
 8013650:	68f8      	ldr	r0, [r7, #12]
 8013652:	f004 face 	bl	8017bf2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013656:	68f8      	ldr	r0, [r7, #12]
 8013658:	f000 ff9f 	bl	801459a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013662:	2b01      	cmp	r3, #1
 8013664:	d122      	bne.n	80136ac <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013666:	68f8      	ldr	r0, [r7, #12]
 8013668:	f7ff fe98 	bl	801339c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	2200      	movs	r2, #0
 8013670:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013674:	e01a      	b.n	80136ac <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801367c:	b2db      	uxtb	r3, r3
 801367e:	2b03      	cmp	r3, #3
 8013680:	d114      	bne.n	80136ac <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013688:	695b      	ldr	r3, [r3, #20]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00e      	beq.n	80136ac <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013694:	695b      	ldr	r3, [r3, #20]
 8013696:	7afa      	ldrb	r2, [r7, #11]
 8013698:	4611      	mov	r1, r2
 801369a:	68f8      	ldr	r0, [r7, #12]
 801369c:	4798      	blx	r3
 801369e:	4603      	mov	r3, r0
 80136a0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80136a2:	7dfb      	ldrb	r3, [r7, #23]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d001      	beq.n	80136ac <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80136a8:	7dfb      	ldrb	r3, [r7, #23]
 80136aa:	e000      	b.n	80136ae <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80136ac:	2300      	movs	r3, #0
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3718      	adds	r7, #24
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}

080136b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80136b6:	b580      	push	{r7, lr}
 80136b8:	b082      	sub	sp, #8
 80136ba:	af00      	add	r7, sp, #0
 80136bc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2201      	movs	r2, #1
 80136c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2200      	movs	r2, #0
 80136ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2200      	movs	r2, #0
 80136d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2200      	movs	r2, #0
 80136d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d101      	bne.n	80136ea <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80136e6:	2303      	movs	r3, #3
 80136e8:	e02f      	b.n	801374a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00f      	beq.n	8013714 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d009      	beq.n	8013714 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	6852      	ldr	r2, [r2, #4]
 801370c:	b2d2      	uxtb	r2, r2
 801370e:	4611      	mov	r1, r2
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013714:	2340      	movs	r3, #64	; 0x40
 8013716:	2200      	movs	r2, #0
 8013718:	2100      	movs	r1, #0
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f004 fa05 	bl	8017b2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2201      	movs	r2, #1
 8013724:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2240      	movs	r2, #64	; 0x40
 801372c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013730:	2340      	movs	r3, #64	; 0x40
 8013732:	2200      	movs	r2, #0
 8013734:	2180      	movs	r1, #128	; 0x80
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f004 f9f7 	bl	8017b2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2201      	movs	r2, #1
 8013740:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2240      	movs	r2, #64	; 0x40
 8013746:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8013748:	2300      	movs	r3, #0
}
 801374a:	4618      	mov	r0, r3
 801374c:	3708      	adds	r7, #8
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}

08013752 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013752:	b480      	push	{r7}
 8013754:	b083      	sub	sp, #12
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
 801375a:	460b      	mov	r3, r1
 801375c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	78fa      	ldrb	r2, [r7, #3]
 8013762:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013764:	2300      	movs	r3, #0
}
 8013766:	4618      	mov	r0, r3
 8013768:	370c      	adds	r7, #12
 801376a:	46bd      	mov	sp, r7
 801376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013770:	4770      	bx	lr

08013772 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013772:	b480      	push	{r7}
 8013774:	b083      	sub	sp, #12
 8013776:	af00      	add	r7, sp, #0
 8013778:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013780:	b2da      	uxtb	r2, r3
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2204      	movs	r2, #4
 801378c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013790:	2300      	movs	r3, #0
}
 8013792:	4618      	mov	r0, r3
 8013794:	370c      	adds	r7, #12
 8013796:	46bd      	mov	sp, r7
 8013798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379c:	4770      	bx	lr

0801379e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801379e:	b480      	push	{r7}
 80137a0:	b083      	sub	sp, #12
 80137a2:	af00      	add	r7, sp, #0
 80137a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137ac:	b2db      	uxtb	r3, r3
 80137ae:	2b04      	cmp	r3, #4
 80137b0:	d106      	bne.n	80137c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80137b8:	b2da      	uxtb	r2, r3
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80137c0:	2300      	movs	r3, #0
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	370c      	adds	r7, #12
 80137c6:	46bd      	mov	sp, r7
 80137c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137cc:	4770      	bx	lr

080137ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80137ce:	b580      	push	{r7, lr}
 80137d0:	b082      	sub	sp, #8
 80137d2:	af00      	add	r7, sp, #0
 80137d4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d101      	bne.n	80137e4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80137e0:	2303      	movs	r3, #3
 80137e2:	e012      	b.n	801380a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137ea:	b2db      	uxtb	r3, r3
 80137ec:	2b03      	cmp	r3, #3
 80137ee:	d10b      	bne.n	8013808 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137f6:	69db      	ldr	r3, [r3, #28]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d005      	beq.n	8013808 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013802:	69db      	ldr	r3, [r3, #28]
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013808:	2300      	movs	r3, #0
}
 801380a:	4618      	mov	r0, r3
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}

08013812 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013812:	b580      	push	{r7, lr}
 8013814:	b082      	sub	sp, #8
 8013816:	af00      	add	r7, sp, #0
 8013818:	6078      	str	r0, [r7, #4]
 801381a:	460b      	mov	r3, r1
 801381c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013824:	2b00      	cmp	r3, #0
 8013826:	d101      	bne.n	801382c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8013828:	2303      	movs	r3, #3
 801382a:	e014      	b.n	8013856 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013832:	b2db      	uxtb	r3, r3
 8013834:	2b03      	cmp	r3, #3
 8013836:	d10d      	bne.n	8013854 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801383e:	6a1b      	ldr	r3, [r3, #32]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d007      	beq.n	8013854 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801384a:	6a1b      	ldr	r3, [r3, #32]
 801384c:	78fa      	ldrb	r2, [r7, #3]
 801384e:	4611      	mov	r1, r2
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013854:	2300      	movs	r3, #0
}
 8013856:	4618      	mov	r0, r3
 8013858:	3708      	adds	r7, #8
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}

0801385e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801385e:	b580      	push	{r7, lr}
 8013860:	b082      	sub	sp, #8
 8013862:	af00      	add	r7, sp, #0
 8013864:	6078      	str	r0, [r7, #4]
 8013866:	460b      	mov	r3, r1
 8013868:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013870:	2b00      	cmp	r3, #0
 8013872:	d101      	bne.n	8013878 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8013874:	2303      	movs	r3, #3
 8013876:	e014      	b.n	80138a2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801387e:	b2db      	uxtb	r3, r3
 8013880:	2b03      	cmp	r3, #3
 8013882:	d10d      	bne.n	80138a0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801388c:	2b00      	cmp	r3, #0
 801388e:	d007      	beq.n	80138a0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013898:	78fa      	ldrb	r2, [r7, #3]
 801389a:	4611      	mov	r1, r2
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80138a0:	2300      	movs	r3, #0
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3708      	adds	r7, #8
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}

080138aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80138aa:	b480      	push	{r7}
 80138ac:	b083      	sub	sp, #12
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80138b2:	2300      	movs	r3, #0
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	370c      	adds	r7, #12
 80138b8:	46bd      	mov	sp, r7
 80138ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138be:	4770      	bx	lr

080138c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b082      	sub	sp, #8
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2201      	movs	r2, #1
 80138cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d009      	beq.n	80138ee <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	6852      	ldr	r2, [r2, #4]
 80138e6:	b2d2      	uxtb	r2, r2
 80138e8:	4611      	mov	r1, r2
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	4798      	blx	r3
  }

  return USBD_OK;
 80138ee:	2300      	movs	r3, #0
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b087      	sub	sp, #28
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	3301      	adds	r3, #1
 801390e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013916:	8a3b      	ldrh	r3, [r7, #16]
 8013918:	021b      	lsls	r3, r3, #8
 801391a:	b21a      	sxth	r2, r3
 801391c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013920:	4313      	orrs	r3, r2
 8013922:	b21b      	sxth	r3, r3
 8013924:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013926:	89fb      	ldrh	r3, [r7, #14]
}
 8013928:	4618      	mov	r0, r3
 801392a:	371c      	adds	r7, #28
 801392c:	46bd      	mov	sp, r7
 801392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013932:	4770      	bx	lr

08013934 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b084      	sub	sp, #16
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801393e:	2300      	movs	r3, #0
 8013940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801394a:	2b40      	cmp	r3, #64	; 0x40
 801394c:	d005      	beq.n	801395a <USBD_StdDevReq+0x26>
 801394e:	2b40      	cmp	r3, #64	; 0x40
 8013950:	d853      	bhi.n	80139fa <USBD_StdDevReq+0xc6>
 8013952:	2b00      	cmp	r3, #0
 8013954:	d00b      	beq.n	801396e <USBD_StdDevReq+0x3a>
 8013956:	2b20      	cmp	r3, #32
 8013958:	d14f      	bne.n	80139fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	6839      	ldr	r1, [r7, #0]
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	4798      	blx	r3
 8013968:	4603      	mov	r3, r0
 801396a:	73fb      	strb	r3, [r7, #15]
      break;
 801396c:	e04a      	b.n	8013a04 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	785b      	ldrb	r3, [r3, #1]
 8013972:	2b09      	cmp	r3, #9
 8013974:	d83b      	bhi.n	80139ee <USBD_StdDevReq+0xba>
 8013976:	a201      	add	r2, pc, #4	; (adr r2, 801397c <USBD_StdDevReq+0x48>)
 8013978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801397c:	080139d1 	.word	0x080139d1
 8013980:	080139e5 	.word	0x080139e5
 8013984:	080139ef 	.word	0x080139ef
 8013988:	080139db 	.word	0x080139db
 801398c:	080139ef 	.word	0x080139ef
 8013990:	080139af 	.word	0x080139af
 8013994:	080139a5 	.word	0x080139a5
 8013998:	080139ef 	.word	0x080139ef
 801399c:	080139c7 	.word	0x080139c7
 80139a0:	080139b9 	.word	0x080139b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80139a4:	6839      	ldr	r1, [r7, #0]
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f000 f9de 	bl	8013d68 <USBD_GetDescriptor>
          break;
 80139ac:	e024      	b.n	80139f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80139ae:	6839      	ldr	r1, [r7, #0]
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f000 fb6d 	bl	8014090 <USBD_SetAddress>
          break;
 80139b6:	e01f      	b.n	80139f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80139b8:	6839      	ldr	r1, [r7, #0]
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f000 fbac 	bl	8014118 <USBD_SetConfig>
 80139c0:	4603      	mov	r3, r0
 80139c2:	73fb      	strb	r3, [r7, #15]
          break;
 80139c4:	e018      	b.n	80139f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80139c6:	6839      	ldr	r1, [r7, #0]
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f000 fc4b 	bl	8014264 <USBD_GetConfig>
          break;
 80139ce:	e013      	b.n	80139f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80139d0:	6839      	ldr	r1, [r7, #0]
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f000 fc7c 	bl	80142d0 <USBD_GetStatus>
          break;
 80139d8:	e00e      	b.n	80139f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80139da:	6839      	ldr	r1, [r7, #0]
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f000 fcab 	bl	8014338 <USBD_SetFeature>
          break;
 80139e2:	e009      	b.n	80139f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80139e4:	6839      	ldr	r1, [r7, #0]
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	f000 fcba 	bl	8014360 <USBD_ClrFeature>
          break;
 80139ec:	e004      	b.n	80139f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80139ee:	6839      	ldr	r1, [r7, #0]
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f000 fd11 	bl	8014418 <USBD_CtlError>
          break;
 80139f6:	bf00      	nop
      }
      break;
 80139f8:	e004      	b.n	8013a04 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80139fa:	6839      	ldr	r1, [r7, #0]
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f000 fd0b 	bl	8014418 <USBD_CtlError>
      break;
 8013a02:	bf00      	nop
  }

  return ret;
 8013a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3710      	adds	r7, #16
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}
 8013a0e:	bf00      	nop

08013a10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b084      	sub	sp, #16
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	781b      	ldrb	r3, [r3, #0]
 8013a22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013a26:	2b40      	cmp	r3, #64	; 0x40
 8013a28:	d005      	beq.n	8013a36 <USBD_StdItfReq+0x26>
 8013a2a:	2b40      	cmp	r3, #64	; 0x40
 8013a2c:	d82f      	bhi.n	8013a8e <USBD_StdItfReq+0x7e>
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <USBD_StdItfReq+0x26>
 8013a32:	2b20      	cmp	r3, #32
 8013a34:	d12b      	bne.n	8013a8e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	3b01      	subs	r3, #1
 8013a40:	2b02      	cmp	r3, #2
 8013a42:	d81d      	bhi.n	8013a80 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	889b      	ldrh	r3, [r3, #4]
 8013a48:	b2db      	uxtb	r3, r3
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d813      	bhi.n	8013a76 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a54:	689b      	ldr	r3, [r3, #8]
 8013a56:	6839      	ldr	r1, [r7, #0]
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	4798      	blx	r3
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	88db      	ldrh	r3, [r3, #6]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d110      	bne.n	8013a8a <USBD_StdItfReq+0x7a>
 8013a68:	7bfb      	ldrb	r3, [r7, #15]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d10d      	bne.n	8013a8a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f000 fd80 	bl	8014574 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013a74:	e009      	b.n	8013a8a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8013a76:	6839      	ldr	r1, [r7, #0]
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 fccd 	bl	8014418 <USBD_CtlError>
          break;
 8013a7e:	e004      	b.n	8013a8a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013a80:	6839      	ldr	r1, [r7, #0]
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f000 fcc8 	bl	8014418 <USBD_CtlError>
          break;
 8013a88:	e000      	b.n	8013a8c <USBD_StdItfReq+0x7c>
          break;
 8013a8a:	bf00      	nop
      }
      break;
 8013a8c:	e004      	b.n	8013a98 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013a8e:	6839      	ldr	r1, [r7, #0]
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f000 fcc1 	bl	8014418 <USBD_CtlError>
      break;
 8013a96:	bf00      	nop
  }

  return ret;
 8013a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	3710      	adds	r7, #16
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}

08013aa2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013aa2:	b580      	push	{r7, lr}
 8013aa4:	b084      	sub	sp, #16
 8013aa6:	af00      	add	r7, sp, #0
 8013aa8:	6078      	str	r0, [r7, #4]
 8013aaa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013aac:	2300      	movs	r3, #0
 8013aae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	889b      	ldrh	r3, [r3, #4]
 8013ab4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013abe:	2b40      	cmp	r3, #64	; 0x40
 8013ac0:	d007      	beq.n	8013ad2 <USBD_StdEPReq+0x30>
 8013ac2:	2b40      	cmp	r3, #64	; 0x40
 8013ac4:	f200 8145 	bhi.w	8013d52 <USBD_StdEPReq+0x2b0>
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00c      	beq.n	8013ae6 <USBD_StdEPReq+0x44>
 8013acc:	2b20      	cmp	r3, #32
 8013ace:	f040 8140 	bne.w	8013d52 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ad8:	689b      	ldr	r3, [r3, #8]
 8013ada:	6839      	ldr	r1, [r7, #0]
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	4798      	blx	r3
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8013ae4:	e13a      	b.n	8013d5c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013ae6:	683b      	ldr	r3, [r7, #0]
 8013ae8:	785b      	ldrb	r3, [r3, #1]
 8013aea:	2b03      	cmp	r3, #3
 8013aec:	d007      	beq.n	8013afe <USBD_StdEPReq+0x5c>
 8013aee:	2b03      	cmp	r3, #3
 8013af0:	f300 8129 	bgt.w	8013d46 <USBD_StdEPReq+0x2a4>
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d07f      	beq.n	8013bf8 <USBD_StdEPReq+0x156>
 8013af8:	2b01      	cmp	r3, #1
 8013afa:	d03c      	beq.n	8013b76 <USBD_StdEPReq+0xd4>
 8013afc:	e123      	b.n	8013d46 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b04:	b2db      	uxtb	r3, r3
 8013b06:	2b02      	cmp	r3, #2
 8013b08:	d002      	beq.n	8013b10 <USBD_StdEPReq+0x6e>
 8013b0a:	2b03      	cmp	r3, #3
 8013b0c:	d016      	beq.n	8013b3c <USBD_StdEPReq+0x9a>
 8013b0e:	e02c      	b.n	8013b6a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013b10:	7bbb      	ldrb	r3, [r7, #14]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d00d      	beq.n	8013b32 <USBD_StdEPReq+0x90>
 8013b16:	7bbb      	ldrb	r3, [r7, #14]
 8013b18:	2b80      	cmp	r3, #128	; 0x80
 8013b1a:	d00a      	beq.n	8013b32 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b1c:	7bbb      	ldrb	r3, [r7, #14]
 8013b1e:	4619      	mov	r1, r3
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f004 f866 	bl	8017bf2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013b26:	2180      	movs	r1, #128	; 0x80
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f004 f862 	bl	8017bf2 <USBD_LL_StallEP>
 8013b2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013b30:	e020      	b.n	8013b74 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8013b32:	6839      	ldr	r1, [r7, #0]
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f000 fc6f 	bl	8014418 <USBD_CtlError>
              break;
 8013b3a:	e01b      	b.n	8013b74 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	885b      	ldrh	r3, [r3, #2]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d10e      	bne.n	8013b62 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013b44:	7bbb      	ldrb	r3, [r7, #14]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d00b      	beq.n	8013b62 <USBD_StdEPReq+0xc0>
 8013b4a:	7bbb      	ldrb	r3, [r7, #14]
 8013b4c:	2b80      	cmp	r3, #128	; 0x80
 8013b4e:	d008      	beq.n	8013b62 <USBD_StdEPReq+0xc0>
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	88db      	ldrh	r3, [r3, #6]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d104      	bne.n	8013b62 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b58:	7bbb      	ldrb	r3, [r7, #14]
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f004 f848 	bl	8017bf2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f000 fd06 	bl	8014574 <USBD_CtlSendStatus>

              break;
 8013b68:	e004      	b.n	8013b74 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013b6a:	6839      	ldr	r1, [r7, #0]
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f000 fc53 	bl	8014418 <USBD_CtlError>
              break;
 8013b72:	bf00      	nop
          }
          break;
 8013b74:	e0ec      	b.n	8013d50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b7c:	b2db      	uxtb	r3, r3
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	d002      	beq.n	8013b88 <USBD_StdEPReq+0xe6>
 8013b82:	2b03      	cmp	r3, #3
 8013b84:	d016      	beq.n	8013bb4 <USBD_StdEPReq+0x112>
 8013b86:	e030      	b.n	8013bea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013b88:	7bbb      	ldrb	r3, [r7, #14]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d00d      	beq.n	8013baa <USBD_StdEPReq+0x108>
 8013b8e:	7bbb      	ldrb	r3, [r7, #14]
 8013b90:	2b80      	cmp	r3, #128	; 0x80
 8013b92:	d00a      	beq.n	8013baa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b94:	7bbb      	ldrb	r3, [r7, #14]
 8013b96:	4619      	mov	r1, r3
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f004 f82a 	bl	8017bf2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013b9e:	2180      	movs	r1, #128	; 0x80
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f004 f826 	bl	8017bf2 <USBD_LL_StallEP>
 8013ba6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ba8:	e025      	b.n	8013bf6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013baa:	6839      	ldr	r1, [r7, #0]
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f000 fc33 	bl	8014418 <USBD_CtlError>
              break;
 8013bb2:	e020      	b.n	8013bf6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	885b      	ldrh	r3, [r3, #2]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d11b      	bne.n	8013bf4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013bbc:	7bbb      	ldrb	r3, [r7, #14]
 8013bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d004      	beq.n	8013bd0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013bc6:	7bbb      	ldrb	r3, [r7, #14]
 8013bc8:	4619      	mov	r1, r3
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f004 f830 	bl	8017c30 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 fccf 	bl	8014574 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bdc:	689b      	ldr	r3, [r3, #8]
 8013bde:	6839      	ldr	r1, [r7, #0]
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	4798      	blx	r3
 8013be4:	4603      	mov	r3, r0
 8013be6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013be8:	e004      	b.n	8013bf4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013bea:	6839      	ldr	r1, [r7, #0]
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f000 fc13 	bl	8014418 <USBD_CtlError>
              break;
 8013bf2:	e000      	b.n	8013bf6 <USBD_StdEPReq+0x154>
              break;
 8013bf4:	bf00      	nop
          }
          break;
 8013bf6:	e0ab      	b.n	8013d50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	2b02      	cmp	r3, #2
 8013c02:	d002      	beq.n	8013c0a <USBD_StdEPReq+0x168>
 8013c04:	2b03      	cmp	r3, #3
 8013c06:	d032      	beq.n	8013c6e <USBD_StdEPReq+0x1cc>
 8013c08:	e097      	b.n	8013d3a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013c0a:	7bbb      	ldrb	r3, [r7, #14]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d007      	beq.n	8013c20 <USBD_StdEPReq+0x17e>
 8013c10:	7bbb      	ldrb	r3, [r7, #14]
 8013c12:	2b80      	cmp	r3, #128	; 0x80
 8013c14:	d004      	beq.n	8013c20 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8013c16:	6839      	ldr	r1, [r7, #0]
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f000 fbfd 	bl	8014418 <USBD_CtlError>
                break;
 8013c1e:	e091      	b.n	8013d44 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	da0b      	bge.n	8013c40 <USBD_StdEPReq+0x19e>
 8013c28:	7bbb      	ldrb	r3, [r7, #14]
 8013c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013c2e:	4613      	mov	r3, r2
 8013c30:	009b      	lsls	r3, r3, #2
 8013c32:	4413      	add	r3, r2
 8013c34:	009b      	lsls	r3, r3, #2
 8013c36:	3310      	adds	r3, #16
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	4413      	add	r3, r2
 8013c3c:	3304      	adds	r3, #4
 8013c3e:	e00b      	b.n	8013c58 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013c40:	7bbb      	ldrb	r3, [r7, #14]
 8013c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c46:	4613      	mov	r3, r2
 8013c48:	009b      	lsls	r3, r3, #2
 8013c4a:	4413      	add	r3, r2
 8013c4c:	009b      	lsls	r3, r3, #2
 8013c4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013c52:	687a      	ldr	r2, [r7, #4]
 8013c54:	4413      	add	r3, r2
 8013c56:	3304      	adds	r3, #4
 8013c58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	2202      	movs	r2, #2
 8013c64:	4619      	mov	r1, r3
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 fc47 	bl	80144fa <USBD_CtlSendData>
              break;
 8013c6c:	e06a      	b.n	8013d44 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	da11      	bge.n	8013c9a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013c76:	7bbb      	ldrb	r3, [r7, #14]
 8013c78:	f003 020f 	and.w	r2, r3, #15
 8013c7c:	6879      	ldr	r1, [r7, #4]
 8013c7e:	4613      	mov	r3, r2
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	4413      	add	r3, r2
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	440b      	add	r3, r1
 8013c88:	3324      	adds	r3, #36	; 0x24
 8013c8a:	881b      	ldrh	r3, [r3, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d117      	bne.n	8013cc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013c90:	6839      	ldr	r1, [r7, #0]
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f000 fbc0 	bl	8014418 <USBD_CtlError>
                  break;
 8013c98:	e054      	b.n	8013d44 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013c9a:	7bbb      	ldrb	r3, [r7, #14]
 8013c9c:	f003 020f 	and.w	r2, r3, #15
 8013ca0:	6879      	ldr	r1, [r7, #4]
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	009b      	lsls	r3, r3, #2
 8013ca6:	4413      	add	r3, r2
 8013ca8:	009b      	lsls	r3, r3, #2
 8013caa:	440b      	add	r3, r1
 8013cac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013cb0:	881b      	ldrh	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d104      	bne.n	8013cc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013cb6:	6839      	ldr	r1, [r7, #0]
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f000 fbad 	bl	8014418 <USBD_CtlError>
                  break;
 8013cbe:	e041      	b.n	8013d44 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	da0b      	bge.n	8013ce0 <USBD_StdEPReq+0x23e>
 8013cc8:	7bbb      	ldrb	r3, [r7, #14]
 8013cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013cce:	4613      	mov	r3, r2
 8013cd0:	009b      	lsls	r3, r3, #2
 8013cd2:	4413      	add	r3, r2
 8013cd4:	009b      	lsls	r3, r3, #2
 8013cd6:	3310      	adds	r3, #16
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	4413      	add	r3, r2
 8013cdc:	3304      	adds	r3, #4
 8013cde:	e00b      	b.n	8013cf8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013ce0:	7bbb      	ldrb	r3, [r7, #14]
 8013ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013ce6:	4613      	mov	r3, r2
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	4413      	add	r3, r2
 8013cec:	009b      	lsls	r3, r3, #2
 8013cee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013cf2:	687a      	ldr	r2, [r7, #4]
 8013cf4:	4413      	add	r3, r2
 8013cf6:	3304      	adds	r3, #4
 8013cf8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013cfa:	7bbb      	ldrb	r3, [r7, #14]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d002      	beq.n	8013d06 <USBD_StdEPReq+0x264>
 8013d00:	7bbb      	ldrb	r3, [r7, #14]
 8013d02:	2b80      	cmp	r3, #128	; 0x80
 8013d04:	d103      	bne.n	8013d0e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	601a      	str	r2, [r3, #0]
 8013d0c:	e00e      	b.n	8013d2c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013d0e:	7bbb      	ldrb	r3, [r7, #14]
 8013d10:	4619      	mov	r1, r3
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f003 ffab 	bl	8017c6e <USBD_LL_IsStallEP>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d003      	beq.n	8013d26 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	2201      	movs	r2, #1
 8013d22:	601a      	str	r2, [r3, #0]
 8013d24:	e002      	b.n	8013d2c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	2200      	movs	r2, #0
 8013d2a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	2202      	movs	r2, #2
 8013d30:	4619      	mov	r1, r3
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f000 fbe1 	bl	80144fa <USBD_CtlSendData>
              break;
 8013d38:	e004      	b.n	8013d44 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013d3a:	6839      	ldr	r1, [r7, #0]
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f000 fb6b 	bl	8014418 <USBD_CtlError>
              break;
 8013d42:	bf00      	nop
          }
          break;
 8013d44:	e004      	b.n	8013d50 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8013d46:	6839      	ldr	r1, [r7, #0]
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f000 fb65 	bl	8014418 <USBD_CtlError>
          break;
 8013d4e:	bf00      	nop
      }
      break;
 8013d50:	e004      	b.n	8013d5c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8013d52:	6839      	ldr	r1, [r7, #0]
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f000 fb5f 	bl	8014418 <USBD_CtlError>
      break;
 8013d5a:	bf00      	nop
  }

  return ret;
 8013d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3710      	adds	r7, #16
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
	...

08013d68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b084      	sub	sp, #16
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013d72:	2300      	movs	r3, #0
 8013d74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013d76:	2300      	movs	r3, #0
 8013d78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	885b      	ldrh	r3, [r3, #2]
 8013d82:	0a1b      	lsrs	r3, r3, #8
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	3b01      	subs	r3, #1
 8013d88:	2b0e      	cmp	r3, #14
 8013d8a:	f200 8152 	bhi.w	8014032 <USBD_GetDescriptor+0x2ca>
 8013d8e:	a201      	add	r2, pc, #4	; (adr r2, 8013d94 <USBD_GetDescriptor+0x2c>)
 8013d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d94:	08013e05 	.word	0x08013e05
 8013d98:	08013e1d 	.word	0x08013e1d
 8013d9c:	08013e5d 	.word	0x08013e5d
 8013da0:	08014033 	.word	0x08014033
 8013da4:	08014033 	.word	0x08014033
 8013da8:	08013fd3 	.word	0x08013fd3
 8013dac:	08013fff 	.word	0x08013fff
 8013db0:	08014033 	.word	0x08014033
 8013db4:	08014033 	.word	0x08014033
 8013db8:	08014033 	.word	0x08014033
 8013dbc:	08014033 	.word	0x08014033
 8013dc0:	08014033 	.word	0x08014033
 8013dc4:	08014033 	.word	0x08014033
 8013dc8:	08014033 	.word	0x08014033
 8013dcc:	08013dd1 	.word	0x08013dd1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dd6:	69db      	ldr	r3, [r3, #28]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d00b      	beq.n	8013df4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013de2:	69db      	ldr	r3, [r3, #28]
 8013de4:	687a      	ldr	r2, [r7, #4]
 8013de6:	7c12      	ldrb	r2, [r2, #16]
 8013de8:	f107 0108 	add.w	r1, r7, #8
 8013dec:	4610      	mov	r0, r2
 8013dee:	4798      	blx	r3
 8013df0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013df2:	e126      	b.n	8014042 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013df4:	6839      	ldr	r1, [r7, #0]
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f000 fb0e 	bl	8014418 <USBD_CtlError>
        err++;
 8013dfc:	7afb      	ldrb	r3, [r7, #11]
 8013dfe:	3301      	adds	r3, #1
 8013e00:	72fb      	strb	r3, [r7, #11]
      break;
 8013e02:	e11e      	b.n	8014042 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	7c12      	ldrb	r2, [r2, #16]
 8013e10:	f107 0108 	add.w	r1, r7, #8
 8013e14:	4610      	mov	r0, r2
 8013e16:	4798      	blx	r3
 8013e18:	60f8      	str	r0, [r7, #12]
      break;
 8013e1a:	e112      	b.n	8014042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	7c1b      	ldrb	r3, [r3, #16]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d10d      	bne.n	8013e40 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e2c:	f107 0208 	add.w	r2, r7, #8
 8013e30:	4610      	mov	r0, r2
 8013e32:	4798      	blx	r3
 8013e34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	3301      	adds	r3, #1
 8013e3a:	2202      	movs	r2, #2
 8013e3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013e3e:	e100      	b.n	8014042 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e48:	f107 0208 	add.w	r2, r7, #8
 8013e4c:	4610      	mov	r0, r2
 8013e4e:	4798      	blx	r3
 8013e50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	3301      	adds	r3, #1
 8013e56:	2202      	movs	r2, #2
 8013e58:	701a      	strb	r2, [r3, #0]
      break;
 8013e5a:	e0f2      	b.n	8014042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	885b      	ldrh	r3, [r3, #2]
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	2b05      	cmp	r3, #5
 8013e64:	f200 80ac 	bhi.w	8013fc0 <USBD_GetDescriptor+0x258>
 8013e68:	a201      	add	r2, pc, #4	; (adr r2, 8013e70 <USBD_GetDescriptor+0x108>)
 8013e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e6e:	bf00      	nop
 8013e70:	08013e89 	.word	0x08013e89
 8013e74:	08013ebd 	.word	0x08013ebd
 8013e78:	08013ef1 	.word	0x08013ef1
 8013e7c:	08013f25 	.word	0x08013f25
 8013e80:	08013f59 	.word	0x08013f59
 8013e84:	08013f8d 	.word	0x08013f8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d00b      	beq.n	8013eac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e9a:	685b      	ldr	r3, [r3, #4]
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	7c12      	ldrb	r2, [r2, #16]
 8013ea0:	f107 0108 	add.w	r1, r7, #8
 8013ea4:	4610      	mov	r0, r2
 8013ea6:	4798      	blx	r3
 8013ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013eaa:	e091      	b.n	8013fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013eac:	6839      	ldr	r1, [r7, #0]
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	f000 fab2 	bl	8014418 <USBD_CtlError>
            err++;
 8013eb4:	7afb      	ldrb	r3, [r7, #11]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8013eba:	e089      	b.n	8013fd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ec2:	689b      	ldr	r3, [r3, #8]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d00b      	beq.n	8013ee0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ece:	689b      	ldr	r3, [r3, #8]
 8013ed0:	687a      	ldr	r2, [r7, #4]
 8013ed2:	7c12      	ldrb	r2, [r2, #16]
 8013ed4:	f107 0108 	add.w	r1, r7, #8
 8013ed8:	4610      	mov	r0, r2
 8013eda:	4798      	blx	r3
 8013edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ede:	e077      	b.n	8013fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ee0:	6839      	ldr	r1, [r7, #0]
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 fa98 	bl	8014418 <USBD_CtlError>
            err++;
 8013ee8:	7afb      	ldrb	r3, [r7, #11]
 8013eea:	3301      	adds	r3, #1
 8013eec:	72fb      	strb	r3, [r7, #11]
          break;
 8013eee:	e06f      	b.n	8013fd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d00b      	beq.n	8013f14 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	687a      	ldr	r2, [r7, #4]
 8013f06:	7c12      	ldrb	r2, [r2, #16]
 8013f08:	f107 0108 	add.w	r1, r7, #8
 8013f0c:	4610      	mov	r0, r2
 8013f0e:	4798      	blx	r3
 8013f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f12:	e05d      	b.n	8013fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f14:	6839      	ldr	r1, [r7, #0]
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f000 fa7e 	bl	8014418 <USBD_CtlError>
            err++;
 8013f1c:	7afb      	ldrb	r3, [r7, #11]
 8013f1e:	3301      	adds	r3, #1
 8013f20:	72fb      	strb	r3, [r7, #11]
          break;
 8013f22:	e055      	b.n	8013fd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f2a:	691b      	ldr	r3, [r3, #16]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d00b      	beq.n	8013f48 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f36:	691b      	ldr	r3, [r3, #16]
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	7c12      	ldrb	r2, [r2, #16]
 8013f3c:	f107 0108 	add.w	r1, r7, #8
 8013f40:	4610      	mov	r0, r2
 8013f42:	4798      	blx	r3
 8013f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f46:	e043      	b.n	8013fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f48:	6839      	ldr	r1, [r7, #0]
 8013f4a:	6878      	ldr	r0, [r7, #4]
 8013f4c:	f000 fa64 	bl	8014418 <USBD_CtlError>
            err++;
 8013f50:	7afb      	ldrb	r3, [r7, #11]
 8013f52:	3301      	adds	r3, #1
 8013f54:	72fb      	strb	r3, [r7, #11]
          break;
 8013f56:	e03b      	b.n	8013fd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f5e:	695b      	ldr	r3, [r3, #20]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d00b      	beq.n	8013f7c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f6a:	695b      	ldr	r3, [r3, #20]
 8013f6c:	687a      	ldr	r2, [r7, #4]
 8013f6e:	7c12      	ldrb	r2, [r2, #16]
 8013f70:	f107 0108 	add.w	r1, r7, #8
 8013f74:	4610      	mov	r0, r2
 8013f76:	4798      	blx	r3
 8013f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f7a:	e029      	b.n	8013fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013f7c:	6839      	ldr	r1, [r7, #0]
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f000 fa4a 	bl	8014418 <USBD_CtlError>
            err++;
 8013f84:	7afb      	ldrb	r3, [r7, #11]
 8013f86:	3301      	adds	r3, #1
 8013f88:	72fb      	strb	r3, [r7, #11]
          break;
 8013f8a:	e021      	b.n	8013fd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f92:	699b      	ldr	r3, [r3, #24]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d00b      	beq.n	8013fb0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f9e:	699b      	ldr	r3, [r3, #24]
 8013fa0:	687a      	ldr	r2, [r7, #4]
 8013fa2:	7c12      	ldrb	r2, [r2, #16]
 8013fa4:	f107 0108 	add.w	r1, r7, #8
 8013fa8:	4610      	mov	r0, r2
 8013faa:	4798      	blx	r3
 8013fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013fae:	e00f      	b.n	8013fd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013fb0:	6839      	ldr	r1, [r7, #0]
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f000 fa30 	bl	8014418 <USBD_CtlError>
            err++;
 8013fb8:	7afb      	ldrb	r3, [r7, #11]
 8013fba:	3301      	adds	r3, #1
 8013fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8013fbe:	e007      	b.n	8013fd0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013fc0:	6839      	ldr	r1, [r7, #0]
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f000 fa28 	bl	8014418 <USBD_CtlError>
          err++;
 8013fc8:	7afb      	ldrb	r3, [r7, #11]
 8013fca:	3301      	adds	r3, #1
 8013fcc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013fce:	bf00      	nop
      }
      break;
 8013fd0:	e037      	b.n	8014042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	7c1b      	ldrb	r3, [r3, #16]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d109      	bne.n	8013fee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fe2:	f107 0208 	add.w	r2, r7, #8
 8013fe6:	4610      	mov	r0, r2
 8013fe8:	4798      	blx	r3
 8013fea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013fec:	e029      	b.n	8014042 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013fee:	6839      	ldr	r1, [r7, #0]
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f000 fa11 	bl	8014418 <USBD_CtlError>
        err++;
 8013ff6:	7afb      	ldrb	r3, [r7, #11]
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8013ffc:	e021      	b.n	8014042 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	7c1b      	ldrb	r3, [r3, #16]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d10d      	bne.n	8014022 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801400e:	f107 0208 	add.w	r2, r7, #8
 8014012:	4610      	mov	r0, r2
 8014014:	4798      	blx	r3
 8014016:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	3301      	adds	r3, #1
 801401c:	2207      	movs	r2, #7
 801401e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014020:	e00f      	b.n	8014042 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f000 f9f7 	bl	8014418 <USBD_CtlError>
        err++;
 801402a:	7afb      	ldrb	r3, [r7, #11]
 801402c:	3301      	adds	r3, #1
 801402e:	72fb      	strb	r3, [r7, #11]
      break;
 8014030:	e007      	b.n	8014042 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014032:	6839      	ldr	r1, [r7, #0]
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f000 f9ef 	bl	8014418 <USBD_CtlError>
      err++;
 801403a:	7afb      	ldrb	r3, [r7, #11]
 801403c:	3301      	adds	r3, #1
 801403e:	72fb      	strb	r3, [r7, #11]
      break;
 8014040:	bf00      	nop
  }

  if (err != 0U)
 8014042:	7afb      	ldrb	r3, [r7, #11]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d11e      	bne.n	8014086 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	88db      	ldrh	r3, [r3, #6]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d016      	beq.n	801407e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014050:	893b      	ldrh	r3, [r7, #8]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d00e      	beq.n	8014074 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	88da      	ldrh	r2, [r3, #6]
 801405a:	893b      	ldrh	r3, [r7, #8]
 801405c:	4293      	cmp	r3, r2
 801405e:	bf28      	it	cs
 8014060:	4613      	movcs	r3, r2
 8014062:	b29b      	uxth	r3, r3
 8014064:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014066:	893b      	ldrh	r3, [r7, #8]
 8014068:	461a      	mov	r2, r3
 801406a:	68f9      	ldr	r1, [r7, #12]
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f000 fa44 	bl	80144fa <USBD_CtlSendData>
 8014072:	e009      	b.n	8014088 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014074:	6839      	ldr	r1, [r7, #0]
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f000 f9ce 	bl	8014418 <USBD_CtlError>
 801407c:	e004      	b.n	8014088 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f000 fa78 	bl	8014574 <USBD_CtlSendStatus>
 8014084:	e000      	b.n	8014088 <USBD_GetDescriptor+0x320>
    return;
 8014086:	bf00      	nop
  }
}
 8014088:	3710      	adds	r7, #16
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}
 801408e:	bf00      	nop

08014090 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b084      	sub	sp, #16
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
 8014098:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	889b      	ldrh	r3, [r3, #4]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d131      	bne.n	8014106 <USBD_SetAddress+0x76>
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	88db      	ldrh	r3, [r3, #6]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d12d      	bne.n	8014106 <USBD_SetAddress+0x76>
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	885b      	ldrh	r3, [r3, #2]
 80140ae:	2b7f      	cmp	r3, #127	; 0x7f
 80140b0:	d829      	bhi.n	8014106 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80140b2:	683b      	ldr	r3, [r7, #0]
 80140b4:	885b      	ldrh	r3, [r3, #2]
 80140b6:	b2db      	uxtb	r3, r3
 80140b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140c4:	b2db      	uxtb	r3, r3
 80140c6:	2b03      	cmp	r3, #3
 80140c8:	d104      	bne.n	80140d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80140ca:	6839      	ldr	r1, [r7, #0]
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f000 f9a3 	bl	8014418 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140d2:	e01d      	b.n	8014110 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	7bfa      	ldrb	r2, [r7, #15]
 80140d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80140dc:	7bfb      	ldrb	r3, [r7, #15]
 80140de:	4619      	mov	r1, r3
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f003 fdf0 	bl	8017cc6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f000 fa44 	bl	8014574 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80140ec:	7bfb      	ldrb	r3, [r7, #15]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d004      	beq.n	80140fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2202      	movs	r2, #2
 80140f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140fa:	e009      	b.n	8014110 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2201      	movs	r2, #1
 8014100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014104:	e004      	b.n	8014110 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014106:	6839      	ldr	r1, [r7, #0]
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f000 f985 	bl	8014418 <USBD_CtlError>
  }
}
 801410e:	bf00      	nop
 8014110:	bf00      	nop
 8014112:	3710      	adds	r7, #16
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}

08014118 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b084      	sub	sp, #16
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014122:	2300      	movs	r3, #0
 8014124:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	885b      	ldrh	r3, [r3, #2]
 801412a:	b2da      	uxtb	r2, r3
 801412c:	4b4c      	ldr	r3, [pc, #304]	; (8014260 <USBD_SetConfig+0x148>)
 801412e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014130:	4b4b      	ldr	r3, [pc, #300]	; (8014260 <USBD_SetConfig+0x148>)
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	2b01      	cmp	r3, #1
 8014136:	d905      	bls.n	8014144 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014138:	6839      	ldr	r1, [r7, #0]
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	f000 f96c 	bl	8014418 <USBD_CtlError>
    return USBD_FAIL;
 8014140:	2303      	movs	r3, #3
 8014142:	e088      	b.n	8014256 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801414a:	b2db      	uxtb	r3, r3
 801414c:	2b02      	cmp	r3, #2
 801414e:	d002      	beq.n	8014156 <USBD_SetConfig+0x3e>
 8014150:	2b03      	cmp	r3, #3
 8014152:	d025      	beq.n	80141a0 <USBD_SetConfig+0x88>
 8014154:	e071      	b.n	801423a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014156:	4b42      	ldr	r3, [pc, #264]	; (8014260 <USBD_SetConfig+0x148>)
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d01c      	beq.n	8014198 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801415e:	4b40      	ldr	r3, [pc, #256]	; (8014260 <USBD_SetConfig+0x148>)
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	461a      	mov	r2, r3
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014168:	4b3d      	ldr	r3, [pc, #244]	; (8014260 <USBD_SetConfig+0x148>)
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	4619      	mov	r1, r3
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f7ff f91f 	bl	80133b2 <USBD_SetClassConfig>
 8014174:	4603      	mov	r3, r0
 8014176:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014178:	7bfb      	ldrb	r3, [r7, #15]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d004      	beq.n	8014188 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801417e:	6839      	ldr	r1, [r7, #0]
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f000 f949 	bl	8014418 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014186:	e065      	b.n	8014254 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f000 f9f3 	bl	8014574 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2203      	movs	r2, #3
 8014192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014196:	e05d      	b.n	8014254 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f000 f9eb 	bl	8014574 <USBD_CtlSendStatus>
      break;
 801419e:	e059      	b.n	8014254 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80141a0:	4b2f      	ldr	r3, [pc, #188]	; (8014260 <USBD_SetConfig+0x148>)
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d112      	bne.n	80141ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2202      	movs	r2, #2
 80141ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80141b0:	4b2b      	ldr	r3, [pc, #172]	; (8014260 <USBD_SetConfig+0x148>)
 80141b2:	781b      	ldrb	r3, [r3, #0]
 80141b4:	461a      	mov	r2, r3
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80141ba:	4b29      	ldr	r3, [pc, #164]	; (8014260 <USBD_SetConfig+0x148>)
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	4619      	mov	r1, r3
 80141c0:	6878      	ldr	r0, [r7, #4]
 80141c2:	f7ff f912 	bl	80133ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f000 f9d4 	bl	8014574 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80141cc:	e042      	b.n	8014254 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80141ce:	4b24      	ldr	r3, [pc, #144]	; (8014260 <USBD_SetConfig+0x148>)
 80141d0:	781b      	ldrb	r3, [r3, #0]
 80141d2:	461a      	mov	r2, r3
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	685b      	ldr	r3, [r3, #4]
 80141d8:	429a      	cmp	r2, r3
 80141da:	d02a      	beq.n	8014232 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	685b      	ldr	r3, [r3, #4]
 80141e0:	b2db      	uxtb	r3, r3
 80141e2:	4619      	mov	r1, r3
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f7ff f900 	bl	80133ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80141ea:	4b1d      	ldr	r3, [pc, #116]	; (8014260 <USBD_SetConfig+0x148>)
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	461a      	mov	r2, r3
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80141f4:	4b1a      	ldr	r3, [pc, #104]	; (8014260 <USBD_SetConfig+0x148>)
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	4619      	mov	r1, r3
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f7ff f8d9 	bl	80133b2 <USBD_SetClassConfig>
 8014200:	4603      	mov	r3, r0
 8014202:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014204:	7bfb      	ldrb	r3, [r7, #15]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d00f      	beq.n	801422a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801420a:	6839      	ldr	r1, [r7, #0]
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f000 f903 	bl	8014418 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	685b      	ldr	r3, [r3, #4]
 8014216:	b2db      	uxtb	r3, r3
 8014218:	4619      	mov	r1, r3
 801421a:	6878      	ldr	r0, [r7, #4]
 801421c:	f7ff f8e5 	bl	80133ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2202      	movs	r2, #2
 8014224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014228:	e014      	b.n	8014254 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f000 f9a2 	bl	8014574 <USBD_CtlSendStatus>
      break;
 8014230:	e010      	b.n	8014254 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	f000 f99e 	bl	8014574 <USBD_CtlSendStatus>
      break;
 8014238:	e00c      	b.n	8014254 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801423a:	6839      	ldr	r1, [r7, #0]
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f000 f8eb 	bl	8014418 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014242:	4b07      	ldr	r3, [pc, #28]	; (8014260 <USBD_SetConfig+0x148>)
 8014244:	781b      	ldrb	r3, [r3, #0]
 8014246:	4619      	mov	r1, r3
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f7ff f8ce 	bl	80133ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801424e:	2303      	movs	r3, #3
 8014250:	73fb      	strb	r3, [r7, #15]
      break;
 8014252:	bf00      	nop
  }

  return ret;
 8014254:	7bfb      	ldrb	r3, [r7, #15]
}
 8014256:	4618      	mov	r0, r3
 8014258:	3710      	adds	r7, #16
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	20003804 	.word	0x20003804

08014264 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	88db      	ldrh	r3, [r3, #6]
 8014272:	2b01      	cmp	r3, #1
 8014274:	d004      	beq.n	8014280 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014276:	6839      	ldr	r1, [r7, #0]
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f000 f8cd 	bl	8014418 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801427e:	e023      	b.n	80142c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014286:	b2db      	uxtb	r3, r3
 8014288:	2b02      	cmp	r3, #2
 801428a:	dc02      	bgt.n	8014292 <USBD_GetConfig+0x2e>
 801428c:	2b00      	cmp	r3, #0
 801428e:	dc03      	bgt.n	8014298 <USBD_GetConfig+0x34>
 8014290:	e015      	b.n	80142be <USBD_GetConfig+0x5a>
 8014292:	2b03      	cmp	r3, #3
 8014294:	d00b      	beq.n	80142ae <USBD_GetConfig+0x4a>
 8014296:	e012      	b.n	80142be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2200      	movs	r2, #0
 801429c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	3308      	adds	r3, #8
 80142a2:	2201      	movs	r2, #1
 80142a4:	4619      	mov	r1, r3
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f000 f927 	bl	80144fa <USBD_CtlSendData>
        break;
 80142ac:	e00c      	b.n	80142c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	3304      	adds	r3, #4
 80142b2:	2201      	movs	r2, #1
 80142b4:	4619      	mov	r1, r3
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f000 f91f 	bl	80144fa <USBD_CtlSendData>
        break;
 80142bc:	e004      	b.n	80142c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80142be:	6839      	ldr	r1, [r7, #0]
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f000 f8a9 	bl	8014418 <USBD_CtlError>
        break;
 80142c6:	bf00      	nop
}
 80142c8:	bf00      	nop
 80142ca:	3708      	adds	r7, #8
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}

080142d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142e0:	b2db      	uxtb	r3, r3
 80142e2:	3b01      	subs	r3, #1
 80142e4:	2b02      	cmp	r3, #2
 80142e6:	d81e      	bhi.n	8014326 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80142e8:	683b      	ldr	r3, [r7, #0]
 80142ea:	88db      	ldrh	r3, [r3, #6]
 80142ec:	2b02      	cmp	r3, #2
 80142ee:	d004      	beq.n	80142fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80142f0:	6839      	ldr	r1, [r7, #0]
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f000 f890 	bl	8014418 <USBD_CtlError>
        break;
 80142f8:	e01a      	b.n	8014330 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2201      	movs	r2, #1
 80142fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014306:	2b00      	cmp	r3, #0
 8014308:	d005      	beq.n	8014316 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	68db      	ldr	r3, [r3, #12]
 801430e:	f043 0202 	orr.w	r2, r3, #2
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	330c      	adds	r3, #12
 801431a:	2202      	movs	r2, #2
 801431c:	4619      	mov	r1, r3
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	f000 f8eb 	bl	80144fa <USBD_CtlSendData>
      break;
 8014324:	e004      	b.n	8014330 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014326:	6839      	ldr	r1, [r7, #0]
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f000 f875 	bl	8014418 <USBD_CtlError>
      break;
 801432e:	bf00      	nop
  }
}
 8014330:	bf00      	nop
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	885b      	ldrh	r3, [r3, #2]
 8014346:	2b01      	cmp	r3, #1
 8014348:	d106      	bne.n	8014358 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2201      	movs	r2, #1
 801434e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f000 f90e 	bl	8014574 <USBD_CtlSendStatus>
  }
}
 8014358:	bf00      	nop
 801435a:	3708      	adds	r7, #8
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}

08014360 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
 8014368:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014370:	b2db      	uxtb	r3, r3
 8014372:	3b01      	subs	r3, #1
 8014374:	2b02      	cmp	r3, #2
 8014376:	d80b      	bhi.n	8014390 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	885b      	ldrh	r3, [r3, #2]
 801437c:	2b01      	cmp	r3, #1
 801437e:	d10c      	bne.n	801439a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2200      	movs	r2, #0
 8014384:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	f000 f8f3 	bl	8014574 <USBD_CtlSendStatus>
      }
      break;
 801438e:	e004      	b.n	801439a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014390:	6839      	ldr	r1, [r7, #0]
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f000 f840 	bl	8014418 <USBD_CtlError>
      break;
 8014398:	e000      	b.n	801439c <USBD_ClrFeature+0x3c>
      break;
 801439a:	bf00      	nop
  }
}
 801439c:	bf00      	nop
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	781a      	ldrb	r2, [r3, #0]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	3301      	adds	r3, #1
 80143be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	781a      	ldrb	r2, [r3, #0]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	3301      	adds	r3, #1
 80143cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80143ce:	68f8      	ldr	r0, [r7, #12]
 80143d0:	f7ff fa92 	bl	80138f8 <SWAPBYTE>
 80143d4:	4603      	mov	r3, r0
 80143d6:	461a      	mov	r2, r3
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	3301      	adds	r3, #1
 80143e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	3301      	adds	r3, #1
 80143e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f7ff fa85 	bl	80138f8 <SWAPBYTE>
 80143ee:	4603      	mov	r3, r0
 80143f0:	461a      	mov	r2, r3
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	3301      	adds	r3, #1
 80143fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	3301      	adds	r3, #1
 8014400:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014402:	68f8      	ldr	r0, [r7, #12]
 8014404:	f7ff fa78 	bl	80138f8 <SWAPBYTE>
 8014408:	4603      	mov	r3, r0
 801440a:	461a      	mov	r2, r3
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	80da      	strh	r2, [r3, #6]
}
 8014410:	bf00      	nop
 8014412:	3710      	adds	r7, #16
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}

08014418 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b082      	sub	sp, #8
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
 8014420:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014422:	2180      	movs	r1, #128	; 0x80
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f003 fbe4 	bl	8017bf2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801442a:	2100      	movs	r1, #0
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f003 fbe0 	bl	8017bf2 <USBD_LL_StallEP>
}
 8014432:	bf00      	nop
 8014434:	3708      	adds	r7, #8
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}

0801443a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801443a:	b580      	push	{r7, lr}
 801443c:	b086      	sub	sp, #24
 801443e:	af00      	add	r7, sp, #0
 8014440:	60f8      	str	r0, [r7, #12]
 8014442:	60b9      	str	r1, [r7, #8]
 8014444:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014446:	2300      	movs	r3, #0
 8014448:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d036      	beq.n	80144be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014454:	6938      	ldr	r0, [r7, #16]
 8014456:	f000 f836 	bl	80144c6 <USBD_GetLen>
 801445a:	4603      	mov	r3, r0
 801445c:	3301      	adds	r3, #1
 801445e:	b29b      	uxth	r3, r3
 8014460:	005b      	lsls	r3, r3, #1
 8014462:	b29a      	uxth	r2, r3
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014468:	7dfb      	ldrb	r3, [r7, #23]
 801446a:	68ba      	ldr	r2, [r7, #8]
 801446c:	4413      	add	r3, r2
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	7812      	ldrb	r2, [r2, #0]
 8014472:	701a      	strb	r2, [r3, #0]
  idx++;
 8014474:	7dfb      	ldrb	r3, [r7, #23]
 8014476:	3301      	adds	r3, #1
 8014478:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801447a:	7dfb      	ldrb	r3, [r7, #23]
 801447c:	68ba      	ldr	r2, [r7, #8]
 801447e:	4413      	add	r3, r2
 8014480:	2203      	movs	r2, #3
 8014482:	701a      	strb	r2, [r3, #0]
  idx++;
 8014484:	7dfb      	ldrb	r3, [r7, #23]
 8014486:	3301      	adds	r3, #1
 8014488:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801448a:	e013      	b.n	80144b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801448c:	7dfb      	ldrb	r3, [r7, #23]
 801448e:	68ba      	ldr	r2, [r7, #8]
 8014490:	4413      	add	r3, r2
 8014492:	693a      	ldr	r2, [r7, #16]
 8014494:	7812      	ldrb	r2, [r2, #0]
 8014496:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014498:	693b      	ldr	r3, [r7, #16]
 801449a:	3301      	adds	r3, #1
 801449c:	613b      	str	r3, [r7, #16]
    idx++;
 801449e:	7dfb      	ldrb	r3, [r7, #23]
 80144a0:	3301      	adds	r3, #1
 80144a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80144a4:	7dfb      	ldrb	r3, [r7, #23]
 80144a6:	68ba      	ldr	r2, [r7, #8]
 80144a8:	4413      	add	r3, r2
 80144aa:	2200      	movs	r2, #0
 80144ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80144ae:	7dfb      	ldrb	r3, [r7, #23]
 80144b0:	3301      	adds	r3, #1
 80144b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d1e7      	bne.n	801448c <USBD_GetString+0x52>
 80144bc:	e000      	b.n	80144c0 <USBD_GetString+0x86>
    return;
 80144be:	bf00      	nop
  }
}
 80144c0:	3718      	adds	r7, #24
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}

080144c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80144c6:	b480      	push	{r7}
 80144c8:	b085      	sub	sp, #20
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80144ce:	2300      	movs	r3, #0
 80144d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80144d6:	e005      	b.n	80144e4 <USBD_GetLen+0x1e>
  {
    len++;
 80144d8:	7bfb      	ldrb	r3, [r7, #15]
 80144da:	3301      	adds	r3, #1
 80144dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	3301      	adds	r3, #1
 80144e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d1f5      	bne.n	80144d8 <USBD_GetLen+0x12>
  }

  return len;
 80144ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3714      	adds	r7, #20
 80144f2:	46bd      	mov	sp, r7
 80144f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f8:	4770      	bx	lr

080144fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80144fa:	b580      	push	{r7, lr}
 80144fc:	b084      	sub	sp, #16
 80144fe:	af00      	add	r7, sp, #0
 8014500:	60f8      	str	r0, [r7, #12]
 8014502:	60b9      	str	r1, [r7, #8]
 8014504:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2202      	movs	r2, #2
 801450a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	687a      	ldr	r2, [r7, #4]
 8014512:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	687a      	ldr	r2, [r7, #4]
 8014518:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	68ba      	ldr	r2, [r7, #8]
 801451e:	2100      	movs	r1, #0
 8014520:	68f8      	ldr	r0, [r7, #12]
 8014522:	f003 fbef 	bl	8017d04 <USBD_LL_Transmit>

  return USBD_OK;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	3710      	adds	r7, #16
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b084      	sub	sp, #16
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	68ba      	ldr	r2, [r7, #8]
 8014540:	2100      	movs	r1, #0
 8014542:	68f8      	ldr	r0, [r7, #12]
 8014544:	f003 fbde 	bl	8017d04 <USBD_LL_Transmit>

  return USBD_OK;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	3710      	adds	r7, #16
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}

08014552 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014552:	b580      	push	{r7, lr}
 8014554:	b084      	sub	sp, #16
 8014556:	af00      	add	r7, sp, #0
 8014558:	60f8      	str	r0, [r7, #12]
 801455a:	60b9      	str	r1, [r7, #8]
 801455c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	68ba      	ldr	r2, [r7, #8]
 8014562:	2100      	movs	r1, #0
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f003 fbee 	bl	8017d46 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801456a:	2300      	movs	r3, #0
}
 801456c:	4618      	mov	r0, r3
 801456e:	3710      	adds	r7, #16
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2204      	movs	r2, #4
 8014580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014584:	2300      	movs	r3, #0
 8014586:	2200      	movs	r2, #0
 8014588:	2100      	movs	r1, #0
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f003 fbba 	bl	8017d04 <USBD_LL_Transmit>

  return USBD_OK;
 8014590:	2300      	movs	r3, #0
}
 8014592:	4618      	mov	r0, r3
 8014594:	3708      	adds	r7, #8
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}

0801459a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801459a:	b580      	push	{r7, lr}
 801459c:	b082      	sub	sp, #8
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	2205      	movs	r2, #5
 80145a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80145aa:	2300      	movs	r3, #0
 80145ac:	2200      	movs	r2, #0
 80145ae:	2100      	movs	r1, #0
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f003 fbc8 	bl	8017d46 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80145b6:	2300      	movs	r3, #0
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3708      	adds	r7, #8
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}

080145c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b084      	sub	sp, #16
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	4603      	mov	r3, r0
 80145c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80145ca:	79fb      	ldrb	r3, [r7, #7]
 80145cc:	4a08      	ldr	r2, [pc, #32]	; (80145f0 <disk_status+0x30>)
 80145ce:	009b      	lsls	r3, r3, #2
 80145d0:	4413      	add	r3, r2
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	685b      	ldr	r3, [r3, #4]
 80145d6:	79fa      	ldrb	r2, [r7, #7]
 80145d8:	4905      	ldr	r1, [pc, #20]	; (80145f0 <disk_status+0x30>)
 80145da:	440a      	add	r2, r1
 80145dc:	7a12      	ldrb	r2, [r2, #8]
 80145de:	4610      	mov	r0, r2
 80145e0:	4798      	blx	r3
 80145e2:	4603      	mov	r3, r0
 80145e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80145e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	3710      	adds	r7, #16
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}
 80145f0:	20003a10 	.word	0x20003a10

080145f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b084      	sub	sp, #16
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	4603      	mov	r3, r0
 80145fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80145fe:	2300      	movs	r3, #0
 8014600:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014602:	79fb      	ldrb	r3, [r7, #7]
 8014604:	4a0d      	ldr	r2, [pc, #52]	; (801463c <disk_initialize+0x48>)
 8014606:	5cd3      	ldrb	r3, [r2, r3]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d111      	bne.n	8014630 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801460c:	79fb      	ldrb	r3, [r7, #7]
 801460e:	4a0b      	ldr	r2, [pc, #44]	; (801463c <disk_initialize+0x48>)
 8014610:	2101      	movs	r1, #1
 8014612:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014614:	79fb      	ldrb	r3, [r7, #7]
 8014616:	4a09      	ldr	r2, [pc, #36]	; (801463c <disk_initialize+0x48>)
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	4413      	add	r3, r2
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	79fa      	ldrb	r2, [r7, #7]
 8014622:	4906      	ldr	r1, [pc, #24]	; (801463c <disk_initialize+0x48>)
 8014624:	440a      	add	r2, r1
 8014626:	7a12      	ldrb	r2, [r2, #8]
 8014628:	4610      	mov	r0, r2
 801462a:	4798      	blx	r3
 801462c:	4603      	mov	r3, r0
 801462e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014630:	7bfb      	ldrb	r3, [r7, #15]
}
 8014632:	4618      	mov	r0, r3
 8014634:	3710      	adds	r7, #16
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	20003a10 	.word	0x20003a10

08014640 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014640:	b590      	push	{r4, r7, lr}
 8014642:	b087      	sub	sp, #28
 8014644:	af00      	add	r7, sp, #0
 8014646:	60b9      	str	r1, [r7, #8]
 8014648:	607a      	str	r2, [r7, #4]
 801464a:	603b      	str	r3, [r7, #0]
 801464c:	4603      	mov	r3, r0
 801464e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014650:	7bfb      	ldrb	r3, [r7, #15]
 8014652:	4a0a      	ldr	r2, [pc, #40]	; (801467c <disk_read+0x3c>)
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	4413      	add	r3, r2
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	689c      	ldr	r4, [r3, #8]
 801465c:	7bfb      	ldrb	r3, [r7, #15]
 801465e:	4a07      	ldr	r2, [pc, #28]	; (801467c <disk_read+0x3c>)
 8014660:	4413      	add	r3, r2
 8014662:	7a18      	ldrb	r0, [r3, #8]
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	68b9      	ldr	r1, [r7, #8]
 801466a:	47a0      	blx	r4
 801466c:	4603      	mov	r3, r0
 801466e:	75fb      	strb	r3, [r7, #23]
  return res;
 8014670:	7dfb      	ldrb	r3, [r7, #23]
}
 8014672:	4618      	mov	r0, r3
 8014674:	371c      	adds	r7, #28
 8014676:	46bd      	mov	sp, r7
 8014678:	bd90      	pop	{r4, r7, pc}
 801467a:	bf00      	nop
 801467c:	20003a10 	.word	0x20003a10

08014680 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014680:	b590      	push	{r4, r7, lr}
 8014682:	b087      	sub	sp, #28
 8014684:	af00      	add	r7, sp, #0
 8014686:	60b9      	str	r1, [r7, #8]
 8014688:	607a      	str	r2, [r7, #4]
 801468a:	603b      	str	r3, [r7, #0]
 801468c:	4603      	mov	r3, r0
 801468e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014690:	7bfb      	ldrb	r3, [r7, #15]
 8014692:	4a0a      	ldr	r2, [pc, #40]	; (80146bc <disk_write+0x3c>)
 8014694:	009b      	lsls	r3, r3, #2
 8014696:	4413      	add	r3, r2
 8014698:	685b      	ldr	r3, [r3, #4]
 801469a:	68dc      	ldr	r4, [r3, #12]
 801469c:	7bfb      	ldrb	r3, [r7, #15]
 801469e:	4a07      	ldr	r2, [pc, #28]	; (80146bc <disk_write+0x3c>)
 80146a0:	4413      	add	r3, r2
 80146a2:	7a18      	ldrb	r0, [r3, #8]
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	687a      	ldr	r2, [r7, #4]
 80146a8:	68b9      	ldr	r1, [r7, #8]
 80146aa:	47a0      	blx	r4
 80146ac:	4603      	mov	r3, r0
 80146ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80146b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	371c      	adds	r7, #28
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd90      	pop	{r4, r7, pc}
 80146ba:	bf00      	nop
 80146bc:	20003a10 	.word	0x20003a10

080146c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b084      	sub	sp, #16
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	4603      	mov	r3, r0
 80146c8:	603a      	str	r2, [r7, #0]
 80146ca:	71fb      	strb	r3, [r7, #7]
 80146cc:	460b      	mov	r3, r1
 80146ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80146d0:	79fb      	ldrb	r3, [r7, #7]
 80146d2:	4a09      	ldr	r2, [pc, #36]	; (80146f8 <disk_ioctl+0x38>)
 80146d4:	009b      	lsls	r3, r3, #2
 80146d6:	4413      	add	r3, r2
 80146d8:	685b      	ldr	r3, [r3, #4]
 80146da:	691b      	ldr	r3, [r3, #16]
 80146dc:	79fa      	ldrb	r2, [r7, #7]
 80146de:	4906      	ldr	r1, [pc, #24]	; (80146f8 <disk_ioctl+0x38>)
 80146e0:	440a      	add	r2, r1
 80146e2:	7a10      	ldrb	r0, [r2, #8]
 80146e4:	79b9      	ldrb	r1, [r7, #6]
 80146e6:	683a      	ldr	r2, [r7, #0]
 80146e8:	4798      	blx	r3
 80146ea:	4603      	mov	r3, r0
 80146ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80146ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3710      	adds	r7, #16
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}
 80146f8:	20003a10 	.word	0x20003a10

080146fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80146fc:	b480      	push	{r7}
 80146fe:	b085      	sub	sp, #20
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	3301      	adds	r3, #1
 8014708:	781b      	ldrb	r3, [r3, #0]
 801470a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801470c:	89fb      	ldrh	r3, [r7, #14]
 801470e:	021b      	lsls	r3, r3, #8
 8014710:	b21a      	sxth	r2, r3
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	b21b      	sxth	r3, r3
 8014718:	4313      	orrs	r3, r2
 801471a:	b21b      	sxth	r3, r3
 801471c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801471e:	89fb      	ldrh	r3, [r7, #14]
}
 8014720:	4618      	mov	r0, r3
 8014722:	3714      	adds	r7, #20
 8014724:	46bd      	mov	sp, r7
 8014726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472a:	4770      	bx	lr

0801472c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801472c:	b480      	push	{r7}
 801472e:	b085      	sub	sp, #20
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	3303      	adds	r3, #3
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	021b      	lsls	r3, r3, #8
 8014740:	687a      	ldr	r2, [r7, #4]
 8014742:	3202      	adds	r2, #2
 8014744:	7812      	ldrb	r2, [r2, #0]
 8014746:	4313      	orrs	r3, r2
 8014748:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	021b      	lsls	r3, r3, #8
 801474e:	687a      	ldr	r2, [r7, #4]
 8014750:	3201      	adds	r2, #1
 8014752:	7812      	ldrb	r2, [r2, #0]
 8014754:	4313      	orrs	r3, r2
 8014756:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	021b      	lsls	r3, r3, #8
 801475c:	687a      	ldr	r2, [r7, #4]
 801475e:	7812      	ldrb	r2, [r2, #0]
 8014760:	4313      	orrs	r3, r2
 8014762:	60fb      	str	r3, [r7, #12]
	return rv;
 8014764:	68fb      	ldr	r3, [r7, #12]
}
 8014766:	4618      	mov	r0, r3
 8014768:	3714      	adds	r7, #20
 801476a:	46bd      	mov	sp, r7
 801476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014770:	4770      	bx	lr

08014772 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014772:	b480      	push	{r7}
 8014774:	b083      	sub	sp, #12
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	460b      	mov	r3, r1
 801477c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	1c5a      	adds	r2, r3, #1
 8014782:	607a      	str	r2, [r7, #4]
 8014784:	887a      	ldrh	r2, [r7, #2]
 8014786:	b2d2      	uxtb	r2, r2
 8014788:	701a      	strb	r2, [r3, #0]
 801478a:	887b      	ldrh	r3, [r7, #2]
 801478c:	0a1b      	lsrs	r3, r3, #8
 801478e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	1c5a      	adds	r2, r3, #1
 8014794:	607a      	str	r2, [r7, #4]
 8014796:	887a      	ldrh	r2, [r7, #2]
 8014798:	b2d2      	uxtb	r2, r2
 801479a:	701a      	strb	r2, [r3, #0]
}
 801479c:	bf00      	nop
 801479e:	370c      	adds	r7, #12
 80147a0:	46bd      	mov	sp, r7
 80147a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a6:	4770      	bx	lr

080147a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80147a8:	b480      	push	{r7}
 80147aa:	b083      	sub	sp, #12
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	1c5a      	adds	r2, r3, #1
 80147b6:	607a      	str	r2, [r7, #4]
 80147b8:	683a      	ldr	r2, [r7, #0]
 80147ba:	b2d2      	uxtb	r2, r2
 80147bc:	701a      	strb	r2, [r3, #0]
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	0a1b      	lsrs	r3, r3, #8
 80147c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	1c5a      	adds	r2, r3, #1
 80147c8:	607a      	str	r2, [r7, #4]
 80147ca:	683a      	ldr	r2, [r7, #0]
 80147cc:	b2d2      	uxtb	r2, r2
 80147ce:	701a      	strb	r2, [r3, #0]
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	0a1b      	lsrs	r3, r3, #8
 80147d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	1c5a      	adds	r2, r3, #1
 80147da:	607a      	str	r2, [r7, #4]
 80147dc:	683a      	ldr	r2, [r7, #0]
 80147de:	b2d2      	uxtb	r2, r2
 80147e0:	701a      	strb	r2, [r3, #0]
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	0a1b      	lsrs	r3, r3, #8
 80147e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	1c5a      	adds	r2, r3, #1
 80147ec:	607a      	str	r2, [r7, #4]
 80147ee:	683a      	ldr	r2, [r7, #0]
 80147f0:	b2d2      	uxtb	r2, r2
 80147f2:	701a      	strb	r2, [r3, #0]
}
 80147f4:	bf00      	nop
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014800:	b480      	push	{r7}
 8014802:	b087      	sub	sp, #28
 8014804:	af00      	add	r7, sp, #0
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d00d      	beq.n	8014836 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801481a:	693a      	ldr	r2, [r7, #16]
 801481c:	1c53      	adds	r3, r2, #1
 801481e:	613b      	str	r3, [r7, #16]
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	1c59      	adds	r1, r3, #1
 8014824:	6179      	str	r1, [r7, #20]
 8014826:	7812      	ldrb	r2, [r2, #0]
 8014828:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	3b01      	subs	r3, #1
 801482e:	607b      	str	r3, [r7, #4]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d1f1      	bne.n	801481a <mem_cpy+0x1a>
	}
}
 8014836:	bf00      	nop
 8014838:	371c      	adds	r7, #28
 801483a:	46bd      	mov	sp, r7
 801483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014840:	4770      	bx	lr

08014842 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014842:	b480      	push	{r7}
 8014844:	b087      	sub	sp, #28
 8014846:	af00      	add	r7, sp, #0
 8014848:	60f8      	str	r0, [r7, #12]
 801484a:	60b9      	str	r1, [r7, #8]
 801484c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	1c5a      	adds	r2, r3, #1
 8014856:	617a      	str	r2, [r7, #20]
 8014858:	68ba      	ldr	r2, [r7, #8]
 801485a:	b2d2      	uxtb	r2, r2
 801485c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	3b01      	subs	r3, #1
 8014862:	607b      	str	r3, [r7, #4]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d1f3      	bne.n	8014852 <mem_set+0x10>
}
 801486a:	bf00      	nop
 801486c:	bf00      	nop
 801486e:	371c      	adds	r7, #28
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr

08014878 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014878:	b480      	push	{r7}
 801487a:	b089      	sub	sp, #36	; 0x24
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	61fb      	str	r3, [r7, #28]
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801488c:	2300      	movs	r3, #0
 801488e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014890:	69fb      	ldr	r3, [r7, #28]
 8014892:	1c5a      	adds	r2, r3, #1
 8014894:	61fa      	str	r2, [r7, #28]
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	4619      	mov	r1, r3
 801489a:	69bb      	ldr	r3, [r7, #24]
 801489c:	1c5a      	adds	r2, r3, #1
 801489e:	61ba      	str	r2, [r7, #24]
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	1acb      	subs	r3, r1, r3
 80148a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	3b01      	subs	r3, #1
 80148aa:	607b      	str	r3, [r7, #4]
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d002      	beq.n	80148b8 <mem_cmp+0x40>
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d0eb      	beq.n	8014890 <mem_cmp+0x18>

	return r;
 80148b8:	697b      	ldr	r3, [r7, #20]
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	3724      	adds	r7, #36	; 0x24
 80148be:	46bd      	mov	sp, r7
 80148c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c4:	4770      	bx	lr

080148c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80148c6:	b480      	push	{r7}
 80148c8:	b083      	sub	sp, #12
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
 80148ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80148d0:	e002      	b.n	80148d8 <chk_chr+0x12>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	3301      	adds	r3, #1
 80148d6:	607b      	str	r3, [r7, #4]
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d005      	beq.n	80148ec <chk_chr+0x26>
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	781b      	ldrb	r3, [r3, #0]
 80148e4:	461a      	mov	r2, r3
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	4293      	cmp	r3, r2
 80148ea:	d1f2      	bne.n	80148d2 <chk_chr+0xc>
	return *str;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	781b      	ldrb	r3, [r3, #0]
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	370c      	adds	r7, #12
 80148f4:	46bd      	mov	sp, r7
 80148f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fa:	4770      	bx	lr

080148fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b086      	sub	sp, #24
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014904:	2300      	movs	r3, #0
 8014906:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	78db      	ldrb	r3, [r3, #3]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d034      	beq.n	801497a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014914:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	7858      	ldrb	r0, [r3, #1]
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014920:	2301      	movs	r3, #1
 8014922:	697a      	ldr	r2, [r7, #20]
 8014924:	f7ff feac 	bl	8014680 <disk_write>
 8014928:	4603      	mov	r3, r0
 801492a:	2b00      	cmp	r3, #0
 801492c:	d002      	beq.n	8014934 <sync_window+0x38>
			res = FR_DISK_ERR;
 801492e:	2301      	movs	r3, #1
 8014930:	73fb      	strb	r3, [r7, #15]
 8014932:	e022      	b.n	801497a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2200      	movs	r2, #0
 8014938:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801493e:	697a      	ldr	r2, [r7, #20]
 8014940:	1ad2      	subs	r2, r2, r3
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	6a1b      	ldr	r3, [r3, #32]
 8014946:	429a      	cmp	r2, r3
 8014948:	d217      	bcs.n	801497a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	789b      	ldrb	r3, [r3, #2]
 801494e:	613b      	str	r3, [r7, #16]
 8014950:	e010      	b.n	8014974 <sync_window+0x78>
					wsect += fs->fsize;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	6a1b      	ldr	r3, [r3, #32]
 8014956:	697a      	ldr	r2, [r7, #20]
 8014958:	4413      	add	r3, r2
 801495a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	7858      	ldrb	r0, [r3, #1]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014966:	2301      	movs	r3, #1
 8014968:	697a      	ldr	r2, [r7, #20]
 801496a:	f7ff fe89 	bl	8014680 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	3b01      	subs	r3, #1
 8014972:	613b      	str	r3, [r7, #16]
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	2b01      	cmp	r3, #1
 8014978:	d8eb      	bhi.n	8014952 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801497a:	7bfb      	ldrb	r3, [r7, #15]
}
 801497c:	4618      	mov	r0, r3
 801497e:	3718      	adds	r7, #24
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}

08014984 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b084      	sub	sp, #16
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801498e:	2300      	movs	r3, #0
 8014990:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014996:	683a      	ldr	r2, [r7, #0]
 8014998:	429a      	cmp	r2, r3
 801499a:	d01b      	beq.n	80149d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f7ff ffad 	bl	80148fc <sync_window>
 80149a2:	4603      	mov	r3, r0
 80149a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80149a6:	7bfb      	ldrb	r3, [r7, #15]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d113      	bne.n	80149d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	7858      	ldrb	r0, [r3, #1]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80149b6:	2301      	movs	r3, #1
 80149b8:	683a      	ldr	r2, [r7, #0]
 80149ba:	f7ff fe41 	bl	8014640 <disk_read>
 80149be:	4603      	mov	r3, r0
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d004      	beq.n	80149ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80149c4:	f04f 33ff 	mov.w	r3, #4294967295
 80149c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80149ca:	2301      	movs	r3, #1
 80149cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	683a      	ldr	r2, [r7, #0]
 80149d2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80149d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3710      	adds	r7, #16
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
	...

080149e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b084      	sub	sp, #16
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f7ff ff87 	bl	80148fc <sync_window>
 80149ee:	4603      	mov	r3, r0
 80149f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80149f2:	7bfb      	ldrb	r3, [r7, #15]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d159      	bne.n	8014aac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	2b03      	cmp	r3, #3
 80149fe:	d149      	bne.n	8014a94 <sync_fs+0xb4>
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	791b      	ldrb	r3, [r3, #4]
 8014a04:	2b01      	cmp	r3, #1
 8014a06:	d145      	bne.n	8014a94 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	899b      	ldrh	r3, [r3, #12]
 8014a12:	461a      	mov	r2, r3
 8014a14:	2100      	movs	r1, #0
 8014a16:	f7ff ff14 	bl	8014842 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	3338      	adds	r3, #56	; 0x38
 8014a1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014a22:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7ff fea3 	bl	8014772 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	3338      	adds	r3, #56	; 0x38
 8014a30:	4921      	ldr	r1, [pc, #132]	; (8014ab8 <sync_fs+0xd8>)
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7ff feb8 	bl	80147a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	3338      	adds	r3, #56	; 0x38
 8014a3c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014a40:	491e      	ldr	r1, [pc, #120]	; (8014abc <sync_fs+0xdc>)
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7ff feb0 	bl	80147a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	3338      	adds	r3, #56	; 0x38
 8014a4c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	699b      	ldr	r3, [r3, #24]
 8014a54:	4619      	mov	r1, r3
 8014a56:	4610      	mov	r0, r2
 8014a58:	f7ff fea6 	bl	80147a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	3338      	adds	r3, #56	; 0x38
 8014a60:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	695b      	ldr	r3, [r3, #20]
 8014a68:	4619      	mov	r1, r3
 8014a6a:	4610      	mov	r0, r2
 8014a6c:	f7ff fe9c 	bl	80147a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a74:	1c5a      	adds	r2, r3, #1
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	7858      	ldrb	r0, [r3, #1]
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a88:	2301      	movs	r3, #1
 8014a8a:	f7ff fdf9 	bl	8014680 <disk_write>
			fs->fsi_flag = 0;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	2200      	movs	r2, #0
 8014a92:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	785b      	ldrb	r3, [r3, #1]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	2100      	movs	r1, #0
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7ff fe0f 	bl	80146c0 <disk_ioctl>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d001      	beq.n	8014aac <sync_fs+0xcc>
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3710      	adds	r7, #16
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop
 8014ab8:	41615252 	.word	0x41615252
 8014abc:	61417272 	.word	0x61417272

08014ac0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b083      	sub	sp, #12
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	3b02      	subs	r3, #2
 8014ace:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	69db      	ldr	r3, [r3, #28]
 8014ad4:	3b02      	subs	r3, #2
 8014ad6:	683a      	ldr	r2, [r7, #0]
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d301      	bcc.n	8014ae0 <clust2sect+0x20>
 8014adc:	2300      	movs	r3, #0
 8014ade:	e008      	b.n	8014af2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	895b      	ldrh	r3, [r3, #10]
 8014ae4:	461a      	mov	r2, r3
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	fb03 f202 	mul.w	r2, r3, r2
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014af0:	4413      	add	r3, r2
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	370c      	adds	r7, #12
 8014af6:	46bd      	mov	sp, r7
 8014af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afc:	4770      	bx	lr

08014afe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014afe:	b580      	push	{r7, lr}
 8014b00:	b086      	sub	sp, #24
 8014b02:	af00      	add	r7, sp, #0
 8014b04:	6078      	str	r0, [r7, #4]
 8014b06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	2b01      	cmp	r3, #1
 8014b12:	d904      	bls.n	8014b1e <get_fat+0x20>
 8014b14:	693b      	ldr	r3, [r7, #16]
 8014b16:	69db      	ldr	r3, [r3, #28]
 8014b18:	683a      	ldr	r2, [r7, #0]
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d302      	bcc.n	8014b24 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014b1e:	2301      	movs	r3, #1
 8014b20:	617b      	str	r3, [r7, #20]
 8014b22:	e0bb      	b.n	8014c9c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014b24:	f04f 33ff 	mov.w	r3, #4294967295
 8014b28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	2b03      	cmp	r3, #3
 8014b30:	f000 8083 	beq.w	8014c3a <get_fat+0x13c>
 8014b34:	2b03      	cmp	r3, #3
 8014b36:	f300 80a7 	bgt.w	8014c88 <get_fat+0x18a>
 8014b3a:	2b01      	cmp	r3, #1
 8014b3c:	d002      	beq.n	8014b44 <get_fat+0x46>
 8014b3e:	2b02      	cmp	r3, #2
 8014b40:	d056      	beq.n	8014bf0 <get_fat+0xf2>
 8014b42:	e0a1      	b.n	8014c88 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	60fb      	str	r3, [r7, #12]
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	085b      	lsrs	r3, r3, #1
 8014b4c:	68fa      	ldr	r2, [r7, #12]
 8014b4e:	4413      	add	r3, r2
 8014b50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014b56:	693b      	ldr	r3, [r7, #16]
 8014b58:	899b      	ldrh	r3, [r3, #12]
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b62:	4413      	add	r3, r2
 8014b64:	4619      	mov	r1, r3
 8014b66:	6938      	ldr	r0, [r7, #16]
 8014b68:	f7ff ff0c 	bl	8014984 <move_window>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	f040 808d 	bne.w	8014c8e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	1c5a      	adds	r2, r3, #1
 8014b78:	60fa      	str	r2, [r7, #12]
 8014b7a:	693a      	ldr	r2, [r7, #16]
 8014b7c:	8992      	ldrh	r2, [r2, #12]
 8014b7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014b82:	fb01 f202 	mul.w	r2, r1, r2
 8014b86:	1a9b      	subs	r3, r3, r2
 8014b88:	693a      	ldr	r2, [r7, #16]
 8014b8a:	4413      	add	r3, r2
 8014b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014b90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014b92:	693b      	ldr	r3, [r7, #16]
 8014b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	899b      	ldrh	r3, [r3, #12]
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ba2:	4413      	add	r3, r2
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	6938      	ldr	r0, [r7, #16]
 8014ba8:	f7ff feec 	bl	8014984 <move_window>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d16f      	bne.n	8014c92 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014bb2:	693b      	ldr	r3, [r7, #16]
 8014bb4:	899b      	ldrh	r3, [r3, #12]
 8014bb6:	461a      	mov	r2, r3
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	fbb3 f1f2 	udiv	r1, r3, r2
 8014bbe:	fb01 f202 	mul.w	r2, r1, r2
 8014bc2:	1a9b      	subs	r3, r3, r2
 8014bc4:	693a      	ldr	r2, [r7, #16]
 8014bc6:	4413      	add	r3, r2
 8014bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014bcc:	021b      	lsls	r3, r3, #8
 8014bce:	461a      	mov	r2, r3
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	4313      	orrs	r3, r2
 8014bd4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	f003 0301 	and.w	r3, r3, #1
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d002      	beq.n	8014be6 <get_fat+0xe8>
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	091b      	lsrs	r3, r3, #4
 8014be4:	e002      	b.n	8014bec <get_fat+0xee>
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014bec:	617b      	str	r3, [r7, #20]
			break;
 8014bee:	e055      	b.n	8014c9c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014bf4:	693b      	ldr	r3, [r7, #16]
 8014bf6:	899b      	ldrh	r3, [r3, #12]
 8014bf8:	085b      	lsrs	r3, r3, #1
 8014bfa:	b29b      	uxth	r3, r3
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	fbb3 f3f1 	udiv	r3, r3, r1
 8014c04:	4413      	add	r3, r2
 8014c06:	4619      	mov	r1, r3
 8014c08:	6938      	ldr	r0, [r7, #16]
 8014c0a:	f7ff febb 	bl	8014984 <move_window>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d140      	bne.n	8014c96 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014c14:	693b      	ldr	r3, [r7, #16]
 8014c16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	005b      	lsls	r3, r3, #1
 8014c1e:	693a      	ldr	r2, [r7, #16]
 8014c20:	8992      	ldrh	r2, [r2, #12]
 8014c22:	fbb3 f0f2 	udiv	r0, r3, r2
 8014c26:	fb00 f202 	mul.w	r2, r0, r2
 8014c2a:	1a9b      	subs	r3, r3, r2
 8014c2c:	440b      	add	r3, r1
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f7ff fd64 	bl	80146fc <ld_word>
 8014c34:	4603      	mov	r3, r0
 8014c36:	617b      	str	r3, [r7, #20]
			break;
 8014c38:	e030      	b.n	8014c9c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014c3a:	693b      	ldr	r3, [r7, #16]
 8014c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014c3e:	693b      	ldr	r3, [r7, #16]
 8014c40:	899b      	ldrh	r3, [r3, #12]
 8014c42:	089b      	lsrs	r3, r3, #2
 8014c44:	b29b      	uxth	r3, r3
 8014c46:	4619      	mov	r1, r3
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8014c4e:	4413      	add	r3, r2
 8014c50:	4619      	mov	r1, r3
 8014c52:	6938      	ldr	r0, [r7, #16]
 8014c54:	f7ff fe96 	bl	8014984 <move_window>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d11d      	bne.n	8014c9a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	009b      	lsls	r3, r3, #2
 8014c68:	693a      	ldr	r2, [r7, #16]
 8014c6a:	8992      	ldrh	r2, [r2, #12]
 8014c6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014c70:	fb00 f202 	mul.w	r2, r0, r2
 8014c74:	1a9b      	subs	r3, r3, r2
 8014c76:	440b      	add	r3, r1
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7ff fd57 	bl	801472c <ld_dword>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014c84:	617b      	str	r3, [r7, #20]
			break;
 8014c86:	e009      	b.n	8014c9c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014c88:	2301      	movs	r3, #1
 8014c8a:	617b      	str	r3, [r7, #20]
 8014c8c:	e006      	b.n	8014c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c8e:	bf00      	nop
 8014c90:	e004      	b.n	8014c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c92:	bf00      	nop
 8014c94:	e002      	b.n	8014c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014c96:	bf00      	nop
 8014c98:	e000      	b.n	8014c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014c9a:	bf00      	nop
		}
	}

	return val;
 8014c9c:	697b      	ldr	r3, [r7, #20]
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3718      	adds	r7, #24
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}

08014ca6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014ca6:	b590      	push	{r4, r7, lr}
 8014ca8:	b089      	sub	sp, #36	; 0x24
 8014caa:	af00      	add	r7, sp, #0
 8014cac:	60f8      	str	r0, [r7, #12]
 8014cae:	60b9      	str	r1, [r7, #8]
 8014cb0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014cb2:	2302      	movs	r3, #2
 8014cb4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	2b01      	cmp	r3, #1
 8014cba:	f240 8102 	bls.w	8014ec2 <put_fat+0x21c>
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	69db      	ldr	r3, [r3, #28]
 8014cc2:	68ba      	ldr	r2, [r7, #8]
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	f080 80fc 	bcs.w	8014ec2 <put_fat+0x21c>
		switch (fs->fs_type) {
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	2b03      	cmp	r3, #3
 8014cd0:	f000 80b6 	beq.w	8014e40 <put_fat+0x19a>
 8014cd4:	2b03      	cmp	r3, #3
 8014cd6:	f300 80fd 	bgt.w	8014ed4 <put_fat+0x22e>
 8014cda:	2b01      	cmp	r3, #1
 8014cdc:	d003      	beq.n	8014ce6 <put_fat+0x40>
 8014cde:	2b02      	cmp	r3, #2
 8014ce0:	f000 8083 	beq.w	8014dea <put_fat+0x144>
 8014ce4:	e0f6      	b.n	8014ed4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014ce6:	68bb      	ldr	r3, [r7, #8]
 8014ce8:	61bb      	str	r3, [r7, #24]
 8014cea:	69bb      	ldr	r3, [r7, #24]
 8014cec:	085b      	lsrs	r3, r3, #1
 8014cee:	69ba      	ldr	r2, [r7, #24]
 8014cf0:	4413      	add	r3, r2
 8014cf2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	899b      	ldrh	r3, [r3, #12]
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	69bb      	ldr	r3, [r7, #24]
 8014d00:	fbb3 f3f1 	udiv	r3, r3, r1
 8014d04:	4413      	add	r3, r2
 8014d06:	4619      	mov	r1, r3
 8014d08:	68f8      	ldr	r0, [r7, #12]
 8014d0a:	f7ff fe3b 	bl	8014984 <move_window>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014d12:	7ffb      	ldrb	r3, [r7, #31]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	f040 80d6 	bne.w	8014ec6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d20:	69bb      	ldr	r3, [r7, #24]
 8014d22:	1c5a      	adds	r2, r3, #1
 8014d24:	61ba      	str	r2, [r7, #24]
 8014d26:	68fa      	ldr	r2, [r7, #12]
 8014d28:	8992      	ldrh	r2, [r2, #12]
 8014d2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d2e:	fb00 f202 	mul.w	r2, r0, r2
 8014d32:	1a9b      	subs	r3, r3, r2
 8014d34:	440b      	add	r3, r1
 8014d36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	f003 0301 	and.w	r3, r3, #1
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d00d      	beq.n	8014d5e <put_fat+0xb8>
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	b25b      	sxtb	r3, r3
 8014d48:	f003 030f 	and.w	r3, r3, #15
 8014d4c:	b25a      	sxtb	r2, r3
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	011b      	lsls	r3, r3, #4
 8014d54:	b25b      	sxtb	r3, r3
 8014d56:	4313      	orrs	r3, r2
 8014d58:	b25b      	sxtb	r3, r3
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	e001      	b.n	8014d62 <put_fat+0xbc>
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	b2db      	uxtb	r3, r3
 8014d62:	697a      	ldr	r2, [r7, #20]
 8014d64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	2201      	movs	r2, #1
 8014d6a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	899b      	ldrh	r3, [r3, #12]
 8014d74:	4619      	mov	r1, r3
 8014d76:	69bb      	ldr	r3, [r7, #24]
 8014d78:	fbb3 f3f1 	udiv	r3, r3, r1
 8014d7c:	4413      	add	r3, r2
 8014d7e:	4619      	mov	r1, r3
 8014d80:	68f8      	ldr	r0, [r7, #12]
 8014d82:	f7ff fdff 	bl	8014984 <move_window>
 8014d86:	4603      	mov	r3, r0
 8014d88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014d8a:	7ffb      	ldrb	r3, [r7, #31]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	f040 809c 	bne.w	8014eca <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	899b      	ldrh	r3, [r3, #12]
 8014d9c:	461a      	mov	r2, r3
 8014d9e:	69bb      	ldr	r3, [r7, #24]
 8014da0:	fbb3 f0f2 	udiv	r0, r3, r2
 8014da4:	fb00 f202 	mul.w	r2, r0, r2
 8014da8:	1a9b      	subs	r3, r3, r2
 8014daa:	440b      	add	r3, r1
 8014dac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	f003 0301 	and.w	r3, r3, #1
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d003      	beq.n	8014dc0 <put_fat+0x11a>
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	091b      	lsrs	r3, r3, #4
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	e00e      	b.n	8014dde <put_fat+0x138>
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	781b      	ldrb	r3, [r3, #0]
 8014dc4:	b25b      	sxtb	r3, r3
 8014dc6:	f023 030f 	bic.w	r3, r3, #15
 8014dca:	b25a      	sxtb	r2, r3
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	0a1b      	lsrs	r3, r3, #8
 8014dd0:	b25b      	sxtb	r3, r3
 8014dd2:	f003 030f 	and.w	r3, r3, #15
 8014dd6:	b25b      	sxtb	r3, r3
 8014dd8:	4313      	orrs	r3, r2
 8014dda:	b25b      	sxtb	r3, r3
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	697a      	ldr	r2, [r7, #20]
 8014de0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2201      	movs	r2, #1
 8014de6:	70da      	strb	r2, [r3, #3]
			break;
 8014de8:	e074      	b.n	8014ed4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	899b      	ldrh	r3, [r3, #12]
 8014df2:	085b      	lsrs	r3, r3, #1
 8014df4:	b29b      	uxth	r3, r3
 8014df6:	4619      	mov	r1, r3
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8014dfe:	4413      	add	r3, r2
 8014e00:	4619      	mov	r1, r3
 8014e02:	68f8      	ldr	r0, [r7, #12]
 8014e04:	f7ff fdbe 	bl	8014984 <move_window>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014e0c:	7ffb      	ldrb	r3, [r7, #31]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d15d      	bne.n	8014ece <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	005b      	lsls	r3, r3, #1
 8014e1c:	68fa      	ldr	r2, [r7, #12]
 8014e1e:	8992      	ldrh	r2, [r2, #12]
 8014e20:	fbb3 f0f2 	udiv	r0, r3, r2
 8014e24:	fb00 f202 	mul.w	r2, r0, r2
 8014e28:	1a9b      	subs	r3, r3, r2
 8014e2a:	440b      	add	r3, r1
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	b292      	uxth	r2, r2
 8014e30:	4611      	mov	r1, r2
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7ff fc9d 	bl	8014772 <st_word>
			fs->wflag = 1;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	70da      	strb	r2, [r3, #3]
			break;
 8014e3e:	e049      	b.n	8014ed4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	899b      	ldrh	r3, [r3, #12]
 8014e48:	089b      	lsrs	r3, r3, #2
 8014e4a:	b29b      	uxth	r3, r3
 8014e4c:	4619      	mov	r1, r3
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e54:	4413      	add	r3, r2
 8014e56:	4619      	mov	r1, r3
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f7ff fd93 	bl	8014984 <move_window>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014e62:	7ffb      	ldrb	r3, [r7, #31]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d134      	bne.n	8014ed2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	009b      	lsls	r3, r3, #2
 8014e78:	68fa      	ldr	r2, [r7, #12]
 8014e7a:	8992      	ldrh	r2, [r2, #12]
 8014e7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014e80:	fb00 f202 	mul.w	r2, r0, r2
 8014e84:	1a9b      	subs	r3, r3, r2
 8014e86:	440b      	add	r3, r1
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7ff fc4f 	bl	801472c <ld_dword>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014e94:	4323      	orrs	r3, r4
 8014e96:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	009b      	lsls	r3, r3, #2
 8014ea2:	68fa      	ldr	r2, [r7, #12]
 8014ea4:	8992      	ldrh	r2, [r2, #12]
 8014ea6:	fbb3 f0f2 	udiv	r0, r3, r2
 8014eaa:	fb00 f202 	mul.w	r2, r0, r2
 8014eae:	1a9b      	subs	r3, r3, r2
 8014eb0:	440b      	add	r3, r1
 8014eb2:	6879      	ldr	r1, [r7, #4]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f7ff fc77 	bl	80147a8 <st_dword>
			fs->wflag = 1;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	2201      	movs	r2, #1
 8014ebe:	70da      	strb	r2, [r3, #3]
			break;
 8014ec0:	e008      	b.n	8014ed4 <put_fat+0x22e>
		}
	}
 8014ec2:	bf00      	nop
 8014ec4:	e006      	b.n	8014ed4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014ec6:	bf00      	nop
 8014ec8:	e004      	b.n	8014ed4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014eca:	bf00      	nop
 8014ecc:	e002      	b.n	8014ed4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014ece:	bf00      	nop
 8014ed0:	e000      	b.n	8014ed4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014ed2:	bf00      	nop
	return res;
 8014ed4:	7ffb      	ldrb	r3, [r7, #31]
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	3724      	adds	r7, #36	; 0x24
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd90      	pop	{r4, r7, pc}

08014ede <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014ede:	b580      	push	{r7, lr}
 8014ee0:	b088      	sub	sp, #32
 8014ee2:	af00      	add	r7, sp, #0
 8014ee4:	60f8      	str	r0, [r7, #12]
 8014ee6:	60b9      	str	r1, [r7, #8]
 8014ee8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014eea:	2300      	movs	r3, #0
 8014eec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d904      	bls.n	8014f04 <remove_chain+0x26>
 8014efa:	69bb      	ldr	r3, [r7, #24]
 8014efc:	69db      	ldr	r3, [r3, #28]
 8014efe:	68ba      	ldr	r2, [r7, #8]
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d301      	bcc.n	8014f08 <remove_chain+0x2a>
 8014f04:	2302      	movs	r3, #2
 8014f06:	e04b      	b.n	8014fa0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d00c      	beq.n	8014f28 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8014f12:	6879      	ldr	r1, [r7, #4]
 8014f14:	69b8      	ldr	r0, [r7, #24]
 8014f16:	f7ff fec6 	bl	8014ca6 <put_fat>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014f1e:	7ffb      	ldrb	r3, [r7, #31]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d001      	beq.n	8014f28 <remove_chain+0x4a>
 8014f24:	7ffb      	ldrb	r3, [r7, #31]
 8014f26:	e03b      	b.n	8014fa0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014f28:	68b9      	ldr	r1, [r7, #8]
 8014f2a:	68f8      	ldr	r0, [r7, #12]
 8014f2c:	f7ff fde7 	bl	8014afe <get_fat>
 8014f30:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d031      	beq.n	8014f9c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	2b01      	cmp	r3, #1
 8014f3c:	d101      	bne.n	8014f42 <remove_chain+0x64>
 8014f3e:	2302      	movs	r3, #2
 8014f40:	e02e      	b.n	8014fa0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f48:	d101      	bne.n	8014f4e <remove_chain+0x70>
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	e028      	b.n	8014fa0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014f4e:	2200      	movs	r2, #0
 8014f50:	68b9      	ldr	r1, [r7, #8]
 8014f52:	69b8      	ldr	r0, [r7, #24]
 8014f54:	f7ff fea7 	bl	8014ca6 <put_fat>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014f5c:	7ffb      	ldrb	r3, [r7, #31]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d001      	beq.n	8014f66 <remove_chain+0x88>
 8014f62:	7ffb      	ldrb	r3, [r7, #31]
 8014f64:	e01c      	b.n	8014fa0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014f66:	69bb      	ldr	r3, [r7, #24]
 8014f68:	699a      	ldr	r2, [r3, #24]
 8014f6a:	69bb      	ldr	r3, [r7, #24]
 8014f6c:	69db      	ldr	r3, [r3, #28]
 8014f6e:	3b02      	subs	r3, #2
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d20b      	bcs.n	8014f8c <remove_chain+0xae>
			fs->free_clst++;
 8014f74:	69bb      	ldr	r3, [r7, #24]
 8014f76:	699b      	ldr	r3, [r3, #24]
 8014f78:	1c5a      	adds	r2, r3, #1
 8014f7a:	69bb      	ldr	r3, [r7, #24]
 8014f7c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8014f7e:	69bb      	ldr	r3, [r7, #24]
 8014f80:	791b      	ldrb	r3, [r3, #4]
 8014f82:	f043 0301 	orr.w	r3, r3, #1
 8014f86:	b2da      	uxtb	r2, r3
 8014f88:	69bb      	ldr	r3, [r7, #24]
 8014f8a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014f90:	69bb      	ldr	r3, [r7, #24]
 8014f92:	69db      	ldr	r3, [r3, #28]
 8014f94:	68ba      	ldr	r2, [r7, #8]
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d3c6      	bcc.n	8014f28 <remove_chain+0x4a>
 8014f9a:	e000      	b.n	8014f9e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014f9c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014f9e:	2300      	movs	r3, #0
}
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	3720      	adds	r7, #32
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}

08014fa8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b088      	sub	sp, #32
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d10d      	bne.n	8014fda <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014fbe:	693b      	ldr	r3, [r7, #16]
 8014fc0:	695b      	ldr	r3, [r3, #20]
 8014fc2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014fc4:	69bb      	ldr	r3, [r7, #24]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d004      	beq.n	8014fd4 <create_chain+0x2c>
 8014fca:	693b      	ldr	r3, [r7, #16]
 8014fcc:	69db      	ldr	r3, [r3, #28]
 8014fce:	69ba      	ldr	r2, [r7, #24]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d31b      	bcc.n	801500c <create_chain+0x64>
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	61bb      	str	r3, [r7, #24]
 8014fd8:	e018      	b.n	801500c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014fda:	6839      	ldr	r1, [r7, #0]
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f7ff fd8e 	bl	8014afe <get_fat>
 8014fe2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2b01      	cmp	r3, #1
 8014fe8:	d801      	bhi.n	8014fee <create_chain+0x46>
 8014fea:	2301      	movs	r3, #1
 8014fec:	e070      	b.n	80150d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ff4:	d101      	bne.n	8014ffa <create_chain+0x52>
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	e06a      	b.n	80150d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	69db      	ldr	r3, [r3, #28]
 8014ffe:	68fa      	ldr	r2, [r7, #12]
 8015000:	429a      	cmp	r2, r3
 8015002:	d201      	bcs.n	8015008 <create_chain+0x60>
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	e063      	b.n	80150d0 <create_chain+0x128>
		scl = clst;
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801500c:	69bb      	ldr	r3, [r7, #24]
 801500e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015010:	69fb      	ldr	r3, [r7, #28]
 8015012:	3301      	adds	r3, #1
 8015014:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015016:	693b      	ldr	r3, [r7, #16]
 8015018:	69db      	ldr	r3, [r3, #28]
 801501a:	69fa      	ldr	r2, [r7, #28]
 801501c:	429a      	cmp	r2, r3
 801501e:	d307      	bcc.n	8015030 <create_chain+0x88>
				ncl = 2;
 8015020:	2302      	movs	r3, #2
 8015022:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015024:	69fa      	ldr	r2, [r7, #28]
 8015026:	69bb      	ldr	r3, [r7, #24]
 8015028:	429a      	cmp	r2, r3
 801502a:	d901      	bls.n	8015030 <create_chain+0x88>
 801502c:	2300      	movs	r3, #0
 801502e:	e04f      	b.n	80150d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015030:	69f9      	ldr	r1, [r7, #28]
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f7ff fd63 	bl	8014afe <get_fat>
 8015038:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00e      	beq.n	801505e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	2b01      	cmp	r3, #1
 8015044:	d003      	beq.n	801504e <create_chain+0xa6>
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801504c:	d101      	bne.n	8015052 <create_chain+0xaa>
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	e03e      	b.n	80150d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015052:	69fa      	ldr	r2, [r7, #28]
 8015054:	69bb      	ldr	r3, [r7, #24]
 8015056:	429a      	cmp	r2, r3
 8015058:	d1da      	bne.n	8015010 <create_chain+0x68>
 801505a:	2300      	movs	r3, #0
 801505c:	e038      	b.n	80150d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801505e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015060:	f04f 32ff 	mov.w	r2, #4294967295
 8015064:	69f9      	ldr	r1, [r7, #28]
 8015066:	6938      	ldr	r0, [r7, #16]
 8015068:	f7ff fe1d 	bl	8014ca6 <put_fat>
 801506c:	4603      	mov	r3, r0
 801506e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015070:	7dfb      	ldrb	r3, [r7, #23]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d109      	bne.n	801508a <create_chain+0xe2>
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d006      	beq.n	801508a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801507c:	69fa      	ldr	r2, [r7, #28]
 801507e:	6839      	ldr	r1, [r7, #0]
 8015080:	6938      	ldr	r0, [r7, #16]
 8015082:	f7ff fe10 	bl	8014ca6 <put_fat>
 8015086:	4603      	mov	r3, r0
 8015088:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801508a:	7dfb      	ldrb	r3, [r7, #23]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d116      	bne.n	80150be <create_chain+0x116>
		fs->last_clst = ncl;
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	69fa      	ldr	r2, [r7, #28]
 8015094:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015096:	693b      	ldr	r3, [r7, #16]
 8015098:	699a      	ldr	r2, [r3, #24]
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	69db      	ldr	r3, [r3, #28]
 801509e:	3b02      	subs	r3, #2
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d804      	bhi.n	80150ae <create_chain+0x106>
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	699b      	ldr	r3, [r3, #24]
 80150a8:	1e5a      	subs	r2, r3, #1
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	791b      	ldrb	r3, [r3, #4]
 80150b2:	f043 0301 	orr.w	r3, r3, #1
 80150b6:	b2da      	uxtb	r2, r3
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	711a      	strb	r2, [r3, #4]
 80150bc:	e007      	b.n	80150ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80150be:	7dfb      	ldrb	r3, [r7, #23]
 80150c0:	2b01      	cmp	r3, #1
 80150c2:	d102      	bne.n	80150ca <create_chain+0x122>
 80150c4:	f04f 33ff 	mov.w	r3, #4294967295
 80150c8:	e000      	b.n	80150cc <create_chain+0x124>
 80150ca:	2301      	movs	r3, #1
 80150cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80150ce:	69fb      	ldr	r3, [r7, #28]
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3720      	adds	r7, #32
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}

080150d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80150d8:	b480      	push	{r7}
 80150da:	b087      	sub	sp, #28
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
 80150e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150ec:	3304      	adds	r3, #4
 80150ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	899b      	ldrh	r3, [r3, #12]
 80150f4:	461a      	mov	r2, r3
 80150f6:	683b      	ldr	r3, [r7, #0]
 80150f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80150fc:	68fa      	ldr	r2, [r7, #12]
 80150fe:	8952      	ldrh	r2, [r2, #10]
 8015100:	fbb3 f3f2 	udiv	r3, r3, r2
 8015104:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	1d1a      	adds	r2, r3, #4
 801510a:	613a      	str	r2, [r7, #16]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d101      	bne.n	801511a <clmt_clust+0x42>
 8015116:	2300      	movs	r3, #0
 8015118:	e010      	b.n	801513c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801511a:	697a      	ldr	r2, [r7, #20]
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	429a      	cmp	r2, r3
 8015120:	d307      	bcc.n	8015132 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8015122:	697a      	ldr	r2, [r7, #20]
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	1ad3      	subs	r3, r2, r3
 8015128:	617b      	str	r3, [r7, #20]
 801512a:	693b      	ldr	r3, [r7, #16]
 801512c:	3304      	adds	r3, #4
 801512e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015130:	e7e9      	b.n	8015106 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8015132:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	681a      	ldr	r2, [r3, #0]
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	4413      	add	r3, r2
}
 801513c:	4618      	mov	r0, r3
 801513e:	371c      	adds	r7, #28
 8015140:	46bd      	mov	sp, r7
 8015142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015146:	4770      	bx	lr

08015148 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b086      	sub	sp, #24
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801515e:	d204      	bcs.n	801516a <dir_sdi+0x22>
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	f003 031f 	and.w	r3, r3, #31
 8015166:	2b00      	cmp	r3, #0
 8015168:	d001      	beq.n	801516e <dir_sdi+0x26>
		return FR_INT_ERR;
 801516a:	2302      	movs	r3, #2
 801516c:	e071      	b.n	8015252 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	683a      	ldr	r2, [r7, #0]
 8015172:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	689b      	ldr	r3, [r3, #8]
 8015178:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d106      	bne.n	801518e <dir_sdi+0x46>
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	781b      	ldrb	r3, [r3, #0]
 8015184:	2b02      	cmp	r3, #2
 8015186:	d902      	bls.n	801518e <dir_sdi+0x46>
		clst = fs->dirbase;
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801518c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d10c      	bne.n	80151ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	095b      	lsrs	r3, r3, #5
 8015198:	693a      	ldr	r2, [r7, #16]
 801519a:	8912      	ldrh	r2, [r2, #8]
 801519c:	4293      	cmp	r3, r2
 801519e:	d301      	bcc.n	80151a4 <dir_sdi+0x5c>
 80151a0:	2302      	movs	r3, #2
 80151a2:	e056      	b.n	8015252 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	619a      	str	r2, [r3, #24]
 80151ac:	e02d      	b.n	801520a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	895b      	ldrh	r3, [r3, #10]
 80151b2:	461a      	mov	r2, r3
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	899b      	ldrh	r3, [r3, #12]
 80151b8:	fb02 f303 	mul.w	r3, r2, r3
 80151bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80151be:	e019      	b.n	80151f4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	6979      	ldr	r1, [r7, #20]
 80151c4:	4618      	mov	r0, r3
 80151c6:	f7ff fc9a 	bl	8014afe <get_fat>
 80151ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80151cc:	697b      	ldr	r3, [r7, #20]
 80151ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151d2:	d101      	bne.n	80151d8 <dir_sdi+0x90>
 80151d4:	2301      	movs	r3, #1
 80151d6:	e03c      	b.n	8015252 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80151d8:	697b      	ldr	r3, [r7, #20]
 80151da:	2b01      	cmp	r3, #1
 80151dc:	d904      	bls.n	80151e8 <dir_sdi+0xa0>
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	69db      	ldr	r3, [r3, #28]
 80151e2:	697a      	ldr	r2, [r7, #20]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d301      	bcc.n	80151ec <dir_sdi+0xa4>
 80151e8:	2302      	movs	r3, #2
 80151ea:	e032      	b.n	8015252 <dir_sdi+0x10a>
			ofs -= csz;
 80151ec:	683a      	ldr	r2, [r7, #0]
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	1ad3      	subs	r3, r2, r3
 80151f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80151f4:	683a      	ldr	r2, [r7, #0]
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d2e1      	bcs.n	80151c0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80151fc:	6979      	ldr	r1, [r7, #20]
 80151fe:	6938      	ldr	r0, [r7, #16]
 8015200:	f7ff fc5e 	bl	8014ac0 <clust2sect>
 8015204:	4602      	mov	r2, r0
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	697a      	ldr	r2, [r7, #20]
 801520e:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	699b      	ldr	r3, [r3, #24]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d101      	bne.n	801521c <dir_sdi+0xd4>
 8015218:	2302      	movs	r3, #2
 801521a:	e01a      	b.n	8015252 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	699a      	ldr	r2, [r3, #24]
 8015220:	693b      	ldr	r3, [r7, #16]
 8015222:	899b      	ldrh	r3, [r3, #12]
 8015224:	4619      	mov	r1, r3
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	fbb3 f3f1 	udiv	r3, r3, r1
 801522c:	441a      	add	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015238:	693b      	ldr	r3, [r7, #16]
 801523a:	899b      	ldrh	r3, [r3, #12]
 801523c:	461a      	mov	r2, r3
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	fbb3 f0f2 	udiv	r0, r3, r2
 8015244:	fb00 f202 	mul.w	r2, r0, r2
 8015248:	1a9b      	subs	r3, r3, r2
 801524a:	18ca      	adds	r2, r1, r3
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8015250:	2300      	movs	r3, #0
}
 8015252:	4618      	mov	r0, r3
 8015254:	3718      	adds	r7, #24
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}

0801525a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801525a:	b580      	push	{r7, lr}
 801525c:	b086      	sub	sp, #24
 801525e:	af00      	add	r7, sp, #0
 8015260:	6078      	str	r0, [r7, #4]
 8015262:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	691b      	ldr	r3, [r3, #16]
 801526e:	3320      	adds	r3, #32
 8015270:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	699b      	ldr	r3, [r3, #24]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d003      	beq.n	8015282 <dir_next+0x28>
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015280:	d301      	bcc.n	8015286 <dir_next+0x2c>
 8015282:	2304      	movs	r3, #4
 8015284:	e0bb      	b.n	80153fe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	899b      	ldrh	r3, [r3, #12]
 801528a:	461a      	mov	r2, r3
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	fbb3 f1f2 	udiv	r1, r3, r2
 8015292:	fb01 f202 	mul.w	r2, r1, r2
 8015296:	1a9b      	subs	r3, r3, r2
 8015298:	2b00      	cmp	r3, #0
 801529a:	f040 809d 	bne.w	80153d8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	699b      	ldr	r3, [r3, #24]
 80152a2:	1c5a      	adds	r2, r3, #1
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	695b      	ldr	r3, [r3, #20]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d10b      	bne.n	80152c8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	095b      	lsrs	r3, r3, #5
 80152b4:	68fa      	ldr	r2, [r7, #12]
 80152b6:	8912      	ldrh	r2, [r2, #8]
 80152b8:	4293      	cmp	r3, r2
 80152ba:	f0c0 808d 	bcc.w	80153d8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2200      	movs	r2, #0
 80152c2:	619a      	str	r2, [r3, #24]
 80152c4:	2304      	movs	r3, #4
 80152c6:	e09a      	b.n	80153fe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	899b      	ldrh	r3, [r3, #12]
 80152cc:	461a      	mov	r2, r3
 80152ce:	68bb      	ldr	r3, [r7, #8]
 80152d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80152d4:	68fa      	ldr	r2, [r7, #12]
 80152d6:	8952      	ldrh	r2, [r2, #10]
 80152d8:	3a01      	subs	r2, #1
 80152da:	4013      	ands	r3, r2
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d17b      	bne.n	80153d8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80152e0:	687a      	ldr	r2, [r7, #4]
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	695b      	ldr	r3, [r3, #20]
 80152e6:	4619      	mov	r1, r3
 80152e8:	4610      	mov	r0, r2
 80152ea:	f7ff fc08 	bl	8014afe <get_fat>
 80152ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80152f0:	697b      	ldr	r3, [r7, #20]
 80152f2:	2b01      	cmp	r3, #1
 80152f4:	d801      	bhi.n	80152fa <dir_next+0xa0>
 80152f6:	2302      	movs	r3, #2
 80152f8:	e081      	b.n	80153fe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015300:	d101      	bne.n	8015306 <dir_next+0xac>
 8015302:	2301      	movs	r3, #1
 8015304:	e07b      	b.n	80153fe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	69db      	ldr	r3, [r3, #28]
 801530a:	697a      	ldr	r2, [r7, #20]
 801530c:	429a      	cmp	r2, r3
 801530e:	d359      	bcc.n	80153c4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d104      	bne.n	8015320 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2200      	movs	r2, #0
 801531a:	619a      	str	r2, [r3, #24]
 801531c:	2304      	movs	r3, #4
 801531e:	e06e      	b.n	80153fe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015320:	687a      	ldr	r2, [r7, #4]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	695b      	ldr	r3, [r3, #20]
 8015326:	4619      	mov	r1, r3
 8015328:	4610      	mov	r0, r2
 801532a:	f7ff fe3d 	bl	8014fa8 <create_chain>
 801532e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015330:	697b      	ldr	r3, [r7, #20]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d101      	bne.n	801533a <dir_next+0xe0>
 8015336:	2307      	movs	r3, #7
 8015338:	e061      	b.n	80153fe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801533a:	697b      	ldr	r3, [r7, #20]
 801533c:	2b01      	cmp	r3, #1
 801533e:	d101      	bne.n	8015344 <dir_next+0xea>
 8015340:	2302      	movs	r3, #2
 8015342:	e05c      	b.n	80153fe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015344:	697b      	ldr	r3, [r7, #20]
 8015346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801534a:	d101      	bne.n	8015350 <dir_next+0xf6>
 801534c:	2301      	movs	r3, #1
 801534e:	e056      	b.n	80153fe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015350:	68f8      	ldr	r0, [r7, #12]
 8015352:	f7ff fad3 	bl	80148fc <sync_window>
 8015356:	4603      	mov	r3, r0
 8015358:	2b00      	cmp	r3, #0
 801535a:	d001      	beq.n	8015360 <dir_next+0x106>
 801535c:	2301      	movs	r3, #1
 801535e:	e04e      	b.n	80153fe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	899b      	ldrh	r3, [r3, #12]
 801536a:	461a      	mov	r2, r3
 801536c:	2100      	movs	r1, #0
 801536e:	f7ff fa68 	bl	8014842 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015372:	2300      	movs	r3, #0
 8015374:	613b      	str	r3, [r7, #16]
 8015376:	6979      	ldr	r1, [r7, #20]
 8015378:	68f8      	ldr	r0, [r7, #12]
 801537a:	f7ff fba1 	bl	8014ac0 <clust2sect>
 801537e:	4602      	mov	r2, r0
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	635a      	str	r2, [r3, #52]	; 0x34
 8015384:	e012      	b.n	80153ac <dir_next+0x152>
						fs->wflag = 1;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	2201      	movs	r2, #1
 801538a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801538c:	68f8      	ldr	r0, [r7, #12]
 801538e:	f7ff fab5 	bl	80148fc <sync_window>
 8015392:	4603      	mov	r3, r0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d001      	beq.n	801539c <dir_next+0x142>
 8015398:	2301      	movs	r3, #1
 801539a:	e030      	b.n	80153fe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	3301      	adds	r3, #1
 80153a0:	613b      	str	r3, [r7, #16]
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80153a6:	1c5a      	adds	r2, r3, #1
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	635a      	str	r2, [r3, #52]	; 0x34
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	895b      	ldrh	r3, [r3, #10]
 80153b0:	461a      	mov	r2, r3
 80153b2:	693b      	ldr	r3, [r7, #16]
 80153b4:	4293      	cmp	r3, r2
 80153b6:	d3e6      	bcc.n	8015386 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	1ad2      	subs	r2, r2, r3
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	697a      	ldr	r2, [r7, #20]
 80153c8:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 80153ca:	6979      	ldr	r1, [r7, #20]
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f7ff fb77 	bl	8014ac0 <clust2sect>
 80153d2:	4602      	mov	r2, r0
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	68ba      	ldr	r2, [r7, #8]
 80153dc:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	899b      	ldrh	r3, [r3, #12]
 80153e8:	461a      	mov	r2, r3
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80153f0:	fb00 f202 	mul.w	r2, r0, r2
 80153f4:	1a9b      	subs	r3, r3, r2
 80153f6:	18ca      	adds	r2, r1, r3
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80153fc:	2300      	movs	r3, #0
}
 80153fe:	4618      	mov	r0, r3
 8015400:	3718      	adds	r7, #24
 8015402:	46bd      	mov	sp, r7
 8015404:	bd80      	pop	{r7, pc}

08015406 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015406:	b580      	push	{r7, lr}
 8015408:	b086      	sub	sp, #24
 801540a:	af00      	add	r7, sp, #0
 801540c:	6078      	str	r0, [r7, #4]
 801540e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015416:	2100      	movs	r1, #0
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f7ff fe95 	bl	8015148 <dir_sdi>
 801541e:	4603      	mov	r3, r0
 8015420:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015422:	7dfb      	ldrb	r3, [r7, #23]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d12b      	bne.n	8015480 <dir_alloc+0x7a>
		n = 0;
 8015428:	2300      	movs	r3, #0
 801542a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	699b      	ldr	r3, [r3, #24]
 8015430:	4619      	mov	r1, r3
 8015432:	68f8      	ldr	r0, [r7, #12]
 8015434:	f7ff faa6 	bl	8014984 <move_window>
 8015438:	4603      	mov	r3, r0
 801543a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801543c:	7dfb      	ldrb	r3, [r7, #23]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d11d      	bne.n	801547e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	69db      	ldr	r3, [r3, #28]
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	2be5      	cmp	r3, #229	; 0xe5
 801544a:	d004      	beq.n	8015456 <dir_alloc+0x50>
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	69db      	ldr	r3, [r3, #28]
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d107      	bne.n	8015466 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	3301      	adds	r3, #1
 801545a:	613b      	str	r3, [r7, #16]
 801545c:	693a      	ldr	r2, [r7, #16]
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	429a      	cmp	r2, r3
 8015462:	d102      	bne.n	801546a <dir_alloc+0x64>
 8015464:	e00c      	b.n	8015480 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015466:	2300      	movs	r3, #0
 8015468:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801546a:	2101      	movs	r1, #1
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f7ff fef4 	bl	801525a <dir_next>
 8015472:	4603      	mov	r3, r0
 8015474:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015476:	7dfb      	ldrb	r3, [r7, #23]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d0d7      	beq.n	801542c <dir_alloc+0x26>
 801547c:	e000      	b.n	8015480 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801547e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015480:	7dfb      	ldrb	r3, [r7, #23]
 8015482:	2b04      	cmp	r3, #4
 8015484:	d101      	bne.n	801548a <dir_alloc+0x84>
 8015486:	2307      	movs	r3, #7
 8015488:	75fb      	strb	r3, [r7, #23]
	return res;
 801548a:	7dfb      	ldrb	r3, [r7, #23]
}
 801548c:	4618      	mov	r0, r3
 801548e:	3718      	adds	r7, #24
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b084      	sub	sp, #16
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
 801549c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	331a      	adds	r3, #26
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7ff f92a 	bl	80146fc <ld_word>
 80154a8:	4603      	mov	r3, r0
 80154aa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	2b03      	cmp	r3, #3
 80154b2:	d109      	bne.n	80154c8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	3314      	adds	r3, #20
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7ff f91f 	bl	80146fc <ld_word>
 80154be:	4603      	mov	r3, r0
 80154c0:	041b      	lsls	r3, r3, #16
 80154c2:	68fa      	ldr	r2, [r7, #12]
 80154c4:	4313      	orrs	r3, r2
 80154c6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80154c8:	68fb      	ldr	r3, [r7, #12]
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3710      	adds	r7, #16
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}

080154d2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80154d2:	b580      	push	{r7, lr}
 80154d4:	b084      	sub	sp, #16
 80154d6:	af00      	add	r7, sp, #0
 80154d8:	60f8      	str	r0, [r7, #12]
 80154da:	60b9      	str	r1, [r7, #8]
 80154dc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80154de:	68bb      	ldr	r3, [r7, #8]
 80154e0:	331a      	adds	r3, #26
 80154e2:	687a      	ldr	r2, [r7, #4]
 80154e4:	b292      	uxth	r2, r2
 80154e6:	4611      	mov	r1, r2
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7ff f942 	bl	8014772 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	781b      	ldrb	r3, [r3, #0]
 80154f2:	2b03      	cmp	r3, #3
 80154f4:	d109      	bne.n	801550a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	f103 0214 	add.w	r2, r3, #20
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	0c1b      	lsrs	r3, r3, #16
 8015500:	b29b      	uxth	r3, r3
 8015502:	4619      	mov	r1, r3
 8015504:	4610      	mov	r0, r2
 8015506:	f7ff f934 	bl	8014772 <st_word>
	}
}
 801550a:	bf00      	nop
 801550c:	3710      	adds	r7, #16
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
	...

08015514 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8015514:	b590      	push	{r4, r7, lr}
 8015516:	b087      	sub	sp, #28
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
 801551c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	331a      	adds	r3, #26
 8015522:	4618      	mov	r0, r3
 8015524:	f7ff f8ea 	bl	80146fc <ld_word>
 8015528:	4603      	mov	r3, r0
 801552a:	2b00      	cmp	r3, #0
 801552c:	d001      	beq.n	8015532 <cmp_lfn+0x1e>
 801552e:	2300      	movs	r3, #0
 8015530:	e059      	b.n	80155e6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	781b      	ldrb	r3, [r3, #0]
 8015536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801553a:	1e5a      	subs	r2, r3, #1
 801553c:	4613      	mov	r3, r2
 801553e:	005b      	lsls	r3, r3, #1
 8015540:	4413      	add	r3, r2
 8015542:	009b      	lsls	r3, r3, #2
 8015544:	4413      	add	r3, r2
 8015546:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015548:	2301      	movs	r3, #1
 801554a:	81fb      	strh	r3, [r7, #14]
 801554c:	2300      	movs	r3, #0
 801554e:	613b      	str	r3, [r7, #16]
 8015550:	e033      	b.n	80155ba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015552:	4a27      	ldr	r2, [pc, #156]	; (80155f0 <cmp_lfn+0xdc>)
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	4413      	add	r3, r2
 8015558:	781b      	ldrb	r3, [r3, #0]
 801555a:	461a      	mov	r2, r3
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	4413      	add	r3, r2
 8015560:	4618      	mov	r0, r3
 8015562:	f7ff f8cb 	bl	80146fc <ld_word>
 8015566:	4603      	mov	r3, r0
 8015568:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801556a:	89fb      	ldrh	r3, [r7, #14]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d01a      	beq.n	80155a6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	2bfe      	cmp	r3, #254	; 0xfe
 8015574:	d812      	bhi.n	801559c <cmp_lfn+0x88>
 8015576:	89bb      	ldrh	r3, [r7, #12]
 8015578:	4618      	mov	r0, r3
 801557a:	f001 feb3 	bl	80172e4 <ff_wtoupper>
 801557e:	4603      	mov	r3, r0
 8015580:	461c      	mov	r4, r3
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	1c5a      	adds	r2, r3, #1
 8015586:	617a      	str	r2, [r7, #20]
 8015588:	005b      	lsls	r3, r3, #1
 801558a:	687a      	ldr	r2, [r7, #4]
 801558c:	4413      	add	r3, r2
 801558e:	881b      	ldrh	r3, [r3, #0]
 8015590:	4618      	mov	r0, r3
 8015592:	f001 fea7 	bl	80172e4 <ff_wtoupper>
 8015596:	4603      	mov	r3, r0
 8015598:	429c      	cmp	r4, r3
 801559a:	d001      	beq.n	80155a0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801559c:	2300      	movs	r3, #0
 801559e:	e022      	b.n	80155e6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80155a0:	89bb      	ldrh	r3, [r7, #12]
 80155a2:	81fb      	strh	r3, [r7, #14]
 80155a4:	e006      	b.n	80155b4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80155a6:	89bb      	ldrh	r3, [r7, #12]
 80155a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80155ac:	4293      	cmp	r3, r2
 80155ae:	d001      	beq.n	80155b4 <cmp_lfn+0xa0>
 80155b0:	2300      	movs	r3, #0
 80155b2:	e018      	b.n	80155e6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	3301      	adds	r3, #1
 80155b8:	613b      	str	r3, [r7, #16]
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	2b0c      	cmp	r3, #12
 80155be:	d9c8      	bls.n	8015552 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	781b      	ldrb	r3, [r3, #0]
 80155c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d00b      	beq.n	80155e4 <cmp_lfn+0xd0>
 80155cc:	89fb      	ldrh	r3, [r7, #14]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d008      	beq.n	80155e4 <cmp_lfn+0xd0>
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	005b      	lsls	r3, r3, #1
 80155d6:	687a      	ldr	r2, [r7, #4]
 80155d8:	4413      	add	r3, r2
 80155da:	881b      	ldrh	r3, [r3, #0]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d001      	beq.n	80155e4 <cmp_lfn+0xd0>
 80155e0:	2300      	movs	r3, #0
 80155e2:	e000      	b.n	80155e6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80155e4:	2301      	movs	r3, #1
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	371c      	adds	r7, #28
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd90      	pop	{r4, r7, pc}
 80155ee:	bf00      	nop
 80155f0:	080189a0 	.word	0x080189a0

080155f4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b088      	sub	sp, #32
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	4611      	mov	r1, r2
 8015600:	461a      	mov	r2, r3
 8015602:	460b      	mov	r3, r1
 8015604:	71fb      	strb	r3, [r7, #7]
 8015606:	4613      	mov	r3, r2
 8015608:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801560a:	68bb      	ldr	r3, [r7, #8]
 801560c:	330d      	adds	r3, #13
 801560e:	79ba      	ldrb	r2, [r7, #6]
 8015610:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	330b      	adds	r3, #11
 8015616:	220f      	movs	r2, #15
 8015618:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801561a:	68bb      	ldr	r3, [r7, #8]
 801561c:	330c      	adds	r3, #12
 801561e:	2200      	movs	r2, #0
 8015620:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	331a      	adds	r3, #26
 8015626:	2100      	movs	r1, #0
 8015628:	4618      	mov	r0, r3
 801562a:	f7ff f8a2 	bl	8014772 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801562e:	79fb      	ldrb	r3, [r7, #7]
 8015630:	1e5a      	subs	r2, r3, #1
 8015632:	4613      	mov	r3, r2
 8015634:	005b      	lsls	r3, r3, #1
 8015636:	4413      	add	r3, r2
 8015638:	009b      	lsls	r3, r3, #2
 801563a:	4413      	add	r3, r2
 801563c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801563e:	2300      	movs	r3, #0
 8015640:	82fb      	strh	r3, [r7, #22]
 8015642:	2300      	movs	r3, #0
 8015644:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015646:	8afb      	ldrh	r3, [r7, #22]
 8015648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801564c:	4293      	cmp	r3, r2
 801564e:	d007      	beq.n	8015660 <put_lfn+0x6c>
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	1c5a      	adds	r2, r3, #1
 8015654:	61fa      	str	r2, [r7, #28]
 8015656:	005b      	lsls	r3, r3, #1
 8015658:	68fa      	ldr	r2, [r7, #12]
 801565a:	4413      	add	r3, r2
 801565c:	881b      	ldrh	r3, [r3, #0]
 801565e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015660:	4a17      	ldr	r2, [pc, #92]	; (80156c0 <put_lfn+0xcc>)
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	4413      	add	r3, r2
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	461a      	mov	r2, r3
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	4413      	add	r3, r2
 801566e:	8afa      	ldrh	r2, [r7, #22]
 8015670:	4611      	mov	r1, r2
 8015672:	4618      	mov	r0, r3
 8015674:	f7ff f87d 	bl	8014772 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015678:	8afb      	ldrh	r3, [r7, #22]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d102      	bne.n	8015684 <put_lfn+0x90>
 801567e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015682:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8015684:	69bb      	ldr	r3, [r7, #24]
 8015686:	3301      	adds	r3, #1
 8015688:	61bb      	str	r3, [r7, #24]
 801568a:	69bb      	ldr	r3, [r7, #24]
 801568c:	2b0c      	cmp	r3, #12
 801568e:	d9da      	bls.n	8015646 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015690:	8afb      	ldrh	r3, [r7, #22]
 8015692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015696:	4293      	cmp	r3, r2
 8015698:	d006      	beq.n	80156a8 <put_lfn+0xb4>
 801569a:	69fb      	ldr	r3, [r7, #28]
 801569c:	005b      	lsls	r3, r3, #1
 801569e:	68fa      	ldr	r2, [r7, #12]
 80156a0:	4413      	add	r3, r2
 80156a2:	881b      	ldrh	r3, [r3, #0]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d103      	bne.n	80156b0 <put_lfn+0xbc>
 80156a8:	79fb      	ldrb	r3, [r7, #7]
 80156aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156ae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	79fa      	ldrb	r2, [r7, #7]
 80156b4:	701a      	strb	r2, [r3, #0]
}
 80156b6:	bf00      	nop
 80156b8:	3720      	adds	r7, #32
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	080189a0 	.word	0x080189a0

080156c4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b08c      	sub	sp, #48	; 0x30
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	60f8      	str	r0, [r7, #12]
 80156cc:	60b9      	str	r1, [r7, #8]
 80156ce:	607a      	str	r2, [r7, #4]
 80156d0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80156d2:	220b      	movs	r2, #11
 80156d4:	68b9      	ldr	r1, [r7, #8]
 80156d6:	68f8      	ldr	r0, [r7, #12]
 80156d8:	f7ff f892 	bl	8014800 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	2b05      	cmp	r3, #5
 80156e0:	d92b      	bls.n	801573a <gen_numname+0x76>
		sr = seq;
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80156e6:	e022      	b.n	801572e <gen_numname+0x6a>
			wc = *lfn++;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	1c9a      	adds	r2, r3, #2
 80156ec:	607a      	str	r2, [r7, #4]
 80156ee:	881b      	ldrh	r3, [r3, #0]
 80156f0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80156f2:	2300      	movs	r3, #0
 80156f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80156f6:	e017      	b.n	8015728 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80156f8:	69fb      	ldr	r3, [r7, #28]
 80156fa:	005a      	lsls	r2, r3, #1
 80156fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156fe:	f003 0301 	and.w	r3, r3, #1
 8015702:	4413      	add	r3, r2
 8015704:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8015706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015708:	085b      	lsrs	r3, r3, #1
 801570a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801570c:	69fb      	ldr	r3, [r7, #28]
 801570e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015712:	2b00      	cmp	r3, #0
 8015714:	d005      	beq.n	8015722 <gen_numname+0x5e>
 8015716:	69fb      	ldr	r3, [r7, #28]
 8015718:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801571c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8015720:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8015722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015724:	3301      	adds	r3, #1
 8015726:	62bb      	str	r3, [r7, #40]	; 0x28
 8015728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801572a:	2b0f      	cmp	r3, #15
 801572c:	d9e4      	bls.n	80156f8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	881b      	ldrh	r3, [r3, #0]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d1d8      	bne.n	80156e8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8015736:	69fb      	ldr	r3, [r7, #28]
 8015738:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801573a:	2307      	movs	r3, #7
 801573c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	b2db      	uxtb	r3, r3
 8015742:	f003 030f 	and.w	r3, r3, #15
 8015746:	b2db      	uxtb	r3, r3
 8015748:	3330      	adds	r3, #48	; 0x30
 801574a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801574e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015752:	2b39      	cmp	r3, #57	; 0x39
 8015754:	d904      	bls.n	8015760 <gen_numname+0x9c>
 8015756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801575a:	3307      	adds	r3, #7
 801575c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8015760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015762:	1e5a      	subs	r2, r3, #1
 8015764:	62ba      	str	r2, [r7, #40]	; 0x28
 8015766:	3330      	adds	r3, #48	; 0x30
 8015768:	443b      	add	r3, r7
 801576a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801576e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	091b      	lsrs	r3, r3, #4
 8015776:	603b      	str	r3, [r7, #0]
	} while (seq);
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d1df      	bne.n	801573e <gen_numname+0x7a>
	ns[i] = '~';
 801577e:	f107 0214 	add.w	r2, r7, #20
 8015782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015784:	4413      	add	r3, r2
 8015786:	227e      	movs	r2, #126	; 0x7e
 8015788:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801578a:	2300      	movs	r3, #0
 801578c:	627b      	str	r3, [r7, #36]	; 0x24
 801578e:	e002      	b.n	8015796 <gen_numname+0xd2>
 8015790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015792:	3301      	adds	r3, #1
 8015794:	627b      	str	r3, [r7, #36]	; 0x24
 8015796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801579a:	429a      	cmp	r2, r3
 801579c:	d205      	bcs.n	80157aa <gen_numname+0xe6>
 801579e:	68fa      	ldr	r2, [r7, #12]
 80157a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a2:	4413      	add	r3, r2
 80157a4:	781b      	ldrb	r3, [r3, #0]
 80157a6:	2b20      	cmp	r3, #32
 80157a8:	d1f2      	bne.n	8015790 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80157aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ac:	2b07      	cmp	r3, #7
 80157ae:	d807      	bhi.n	80157c0 <gen_numname+0xfc>
 80157b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b2:	1c5a      	adds	r2, r3, #1
 80157b4:	62ba      	str	r2, [r7, #40]	; 0x28
 80157b6:	3330      	adds	r3, #48	; 0x30
 80157b8:	443b      	add	r3, r7
 80157ba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80157be:	e000      	b.n	80157c2 <gen_numname+0xfe>
 80157c0:	2120      	movs	r1, #32
 80157c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c4:	1c5a      	adds	r2, r3, #1
 80157c6:	627a      	str	r2, [r7, #36]	; 0x24
 80157c8:	68fa      	ldr	r2, [r7, #12]
 80157ca:	4413      	add	r3, r2
 80157cc:	460a      	mov	r2, r1
 80157ce:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80157d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d2:	2b07      	cmp	r3, #7
 80157d4:	d9e9      	bls.n	80157aa <gen_numname+0xe6>
}
 80157d6:	bf00      	nop
 80157d8:	bf00      	nop
 80157da:	3730      	adds	r7, #48	; 0x30
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}

080157e0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80157e0:	b480      	push	{r7}
 80157e2:	b085      	sub	sp, #20
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80157e8:	2300      	movs	r3, #0
 80157ea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80157ec:	230b      	movs	r3, #11
 80157ee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80157f0:	7bfb      	ldrb	r3, [r7, #15]
 80157f2:	b2da      	uxtb	r2, r3
 80157f4:	0852      	lsrs	r2, r2, #1
 80157f6:	01db      	lsls	r3, r3, #7
 80157f8:	4313      	orrs	r3, r2
 80157fa:	b2da      	uxtb	r2, r3
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	1c59      	adds	r1, r3, #1
 8015800:	6079      	str	r1, [r7, #4]
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	4413      	add	r3, r2
 8015806:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	3b01      	subs	r3, #1
 801580c:	60bb      	str	r3, [r7, #8]
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d1ed      	bne.n	80157f0 <sum_sfn+0x10>
	return sum;
 8015814:	7bfb      	ldrb	r3, [r7, #15]
}
 8015816:	4618      	mov	r0, r3
 8015818:	3714      	adds	r7, #20
 801581a:	46bd      	mov	sp, r7
 801581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015820:	4770      	bx	lr

08015822 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015822:	b580      	push	{r7, lr}
 8015824:	b086      	sub	sp, #24
 8015826:	af00      	add	r7, sp, #0
 8015828:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015830:	2100      	movs	r1, #0
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f7ff fc88 	bl	8015148 <dir_sdi>
 8015838:	4603      	mov	r3, r0
 801583a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801583c:	7dfb      	ldrb	r3, [r7, #23]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d001      	beq.n	8015846 <dir_find+0x24>
 8015842:	7dfb      	ldrb	r3, [r7, #23]
 8015844:	e0a9      	b.n	801599a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015846:	23ff      	movs	r3, #255	; 0xff
 8015848:	753b      	strb	r3, [r7, #20]
 801584a:	7d3b      	ldrb	r3, [r7, #20]
 801584c:	757b      	strb	r3, [r7, #21]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f04f 32ff 	mov.w	r2, #4294967295
 8015854:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	699b      	ldr	r3, [r3, #24]
 801585a:	4619      	mov	r1, r3
 801585c:	6938      	ldr	r0, [r7, #16]
 801585e:	f7ff f891 	bl	8014984 <move_window>
 8015862:	4603      	mov	r3, r0
 8015864:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015866:	7dfb      	ldrb	r3, [r7, #23]
 8015868:	2b00      	cmp	r3, #0
 801586a:	f040 8090 	bne.w	801598e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	69db      	ldr	r3, [r3, #28]
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015876:	7dbb      	ldrb	r3, [r7, #22]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d102      	bne.n	8015882 <dir_find+0x60>
 801587c:	2304      	movs	r3, #4
 801587e:	75fb      	strb	r3, [r7, #23]
 8015880:	e08a      	b.n	8015998 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	69db      	ldr	r3, [r3, #28]
 8015886:	330b      	adds	r3, #11
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801588e:	73fb      	strb	r3, [r7, #15]
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	7bfa      	ldrb	r2, [r7, #15]
 8015894:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015896:	7dbb      	ldrb	r3, [r7, #22]
 8015898:	2be5      	cmp	r3, #229	; 0xe5
 801589a:	d007      	beq.n	80158ac <dir_find+0x8a>
 801589c:	7bfb      	ldrb	r3, [r7, #15]
 801589e:	f003 0308 	and.w	r3, r3, #8
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d009      	beq.n	80158ba <dir_find+0x98>
 80158a6:	7bfb      	ldrb	r3, [r7, #15]
 80158a8:	2b0f      	cmp	r3, #15
 80158aa:	d006      	beq.n	80158ba <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80158ac:	23ff      	movs	r3, #255	; 0xff
 80158ae:	757b      	strb	r3, [r7, #21]
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f04f 32ff 	mov.w	r2, #4294967295
 80158b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80158b8:	e05e      	b.n	8015978 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80158ba:	7bfb      	ldrb	r3, [r7, #15]
 80158bc:	2b0f      	cmp	r3, #15
 80158be:	d136      	bne.n	801592e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80158c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d154      	bne.n	8015978 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80158ce:	7dbb      	ldrb	r3, [r7, #22]
 80158d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d00d      	beq.n	80158f4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	69db      	ldr	r3, [r3, #28]
 80158dc:	7b5b      	ldrb	r3, [r3, #13]
 80158de:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80158e0:	7dbb      	ldrb	r3, [r7, #22]
 80158e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80158e6:	75bb      	strb	r3, [r7, #22]
 80158e8:	7dbb      	ldrb	r3, [r7, #22]
 80158ea:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	691a      	ldr	r2, [r3, #16]
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80158f4:	7dba      	ldrb	r2, [r7, #22]
 80158f6:	7d7b      	ldrb	r3, [r7, #21]
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d115      	bne.n	8015928 <dir_find+0x106>
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	69db      	ldr	r3, [r3, #28]
 8015900:	330d      	adds	r3, #13
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	7d3a      	ldrb	r2, [r7, #20]
 8015906:	429a      	cmp	r2, r3
 8015908:	d10e      	bne.n	8015928 <dir_find+0x106>
 801590a:	693b      	ldr	r3, [r7, #16]
 801590c:	691a      	ldr	r2, [r3, #16]
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	69db      	ldr	r3, [r3, #28]
 8015912:	4619      	mov	r1, r3
 8015914:	4610      	mov	r0, r2
 8015916:	f7ff fdfd 	bl	8015514 <cmp_lfn>
 801591a:	4603      	mov	r3, r0
 801591c:	2b00      	cmp	r3, #0
 801591e:	d003      	beq.n	8015928 <dir_find+0x106>
 8015920:	7d7b      	ldrb	r3, [r7, #21]
 8015922:	3b01      	subs	r3, #1
 8015924:	b2db      	uxtb	r3, r3
 8015926:	e000      	b.n	801592a <dir_find+0x108>
 8015928:	23ff      	movs	r3, #255	; 0xff
 801592a:	757b      	strb	r3, [r7, #21]
 801592c:	e024      	b.n	8015978 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801592e:	7d7b      	ldrb	r3, [r7, #21]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d109      	bne.n	8015948 <dir_find+0x126>
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	69db      	ldr	r3, [r3, #28]
 8015938:	4618      	mov	r0, r3
 801593a:	f7ff ff51 	bl	80157e0 <sum_sfn>
 801593e:	4603      	mov	r3, r0
 8015940:	461a      	mov	r2, r3
 8015942:	7d3b      	ldrb	r3, [r7, #20]
 8015944:	4293      	cmp	r3, r2
 8015946:	d024      	beq.n	8015992 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801594e:	f003 0301 	and.w	r3, r3, #1
 8015952:	2b00      	cmp	r3, #0
 8015954:	d10a      	bne.n	801596c <dir_find+0x14a>
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	69d8      	ldr	r0, [r3, #28]
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	3320      	adds	r3, #32
 801595e:	220b      	movs	r2, #11
 8015960:	4619      	mov	r1, r3
 8015962:	f7fe ff89 	bl	8014878 <mem_cmp>
 8015966:	4603      	mov	r3, r0
 8015968:	2b00      	cmp	r3, #0
 801596a:	d014      	beq.n	8015996 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801596c:	23ff      	movs	r3, #255	; 0xff
 801596e:	757b      	strb	r3, [r7, #21]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f04f 32ff 	mov.w	r2, #4294967295
 8015976:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015978:	2100      	movs	r1, #0
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f7ff fc6d 	bl	801525a <dir_next>
 8015980:	4603      	mov	r3, r0
 8015982:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015984:	7dfb      	ldrb	r3, [r7, #23]
 8015986:	2b00      	cmp	r3, #0
 8015988:	f43f af65 	beq.w	8015856 <dir_find+0x34>
 801598c:	e004      	b.n	8015998 <dir_find+0x176>
		if (res != FR_OK) break;
 801598e:	bf00      	nop
 8015990:	e002      	b.n	8015998 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015992:	bf00      	nop
 8015994:	e000      	b.n	8015998 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015996:	bf00      	nop

	return res;
 8015998:	7dfb      	ldrb	r3, [r7, #23]
}
 801599a:	4618      	mov	r0, r3
 801599c:	3718      	adds	r7, #24
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}
	...

080159a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b08c      	sub	sp, #48	; 0x30
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80159b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d001      	beq.n	80159c4 <dir_register+0x20>
 80159c0:	2306      	movs	r3, #6
 80159c2:	e0e0      	b.n	8015b86 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80159c4:	2300      	movs	r3, #0
 80159c6:	627b      	str	r3, [r7, #36]	; 0x24
 80159c8:	e002      	b.n	80159d0 <dir_register+0x2c>
 80159ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159cc:	3301      	adds	r3, #1
 80159ce:	627b      	str	r3, [r7, #36]	; 0x24
 80159d0:	69fb      	ldr	r3, [r7, #28]
 80159d2:	691a      	ldr	r2, [r3, #16]
 80159d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d6:	005b      	lsls	r3, r3, #1
 80159d8:	4413      	add	r3, r2
 80159da:	881b      	ldrh	r3, [r3, #0]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d1f4      	bne.n	80159ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f103 0120 	add.w	r1, r3, #32
 80159e6:	f107 030c 	add.w	r3, r7, #12
 80159ea:	220c      	movs	r2, #12
 80159ec:	4618      	mov	r0, r3
 80159ee:	f7fe ff07 	bl	8014800 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80159f2:	7dfb      	ldrb	r3, [r7, #23]
 80159f4:	f003 0301 	and.w	r3, r3, #1
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d032      	beq.n	8015a62 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	2240      	movs	r2, #64	; 0x40
 8015a00:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 8015a04:	2301      	movs	r3, #1
 8015a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8015a08:	e016      	b.n	8015a38 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f103 0020 	add.w	r0, r3, #32
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	691a      	ldr	r2, [r3, #16]
 8015a14:	f107 010c 	add.w	r1, r7, #12
 8015a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a1a:	f7ff fe53 	bl	80156c4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f7ff feff 	bl	8015822 <dir_find>
 8015a24:	4603      	mov	r3, r0
 8015a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8015a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d106      	bne.n	8015a40 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8015a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a34:	3301      	adds	r3, #1
 8015a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8015a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a3a:	2b63      	cmp	r3, #99	; 0x63
 8015a3c:	d9e5      	bls.n	8015a0a <dir_register+0x66>
 8015a3e:	e000      	b.n	8015a42 <dir_register+0x9e>
			if (res != FR_OK) break;
 8015a40:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a44:	2b64      	cmp	r3, #100	; 0x64
 8015a46:	d101      	bne.n	8015a4c <dir_register+0xa8>
 8015a48:	2307      	movs	r3, #7
 8015a4a:	e09c      	b.n	8015b86 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a50:	2b04      	cmp	r3, #4
 8015a52:	d002      	beq.n	8015a5a <dir_register+0xb6>
 8015a54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a58:	e095      	b.n	8015b86 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015a5a:	7dfa      	ldrb	r2, [r7, #23]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015a62:	7dfb      	ldrb	r3, [r7, #23]
 8015a64:	f003 0302 	and.w	r3, r3, #2
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d007      	beq.n	8015a7c <dir_register+0xd8>
 8015a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a6e:	330c      	adds	r3, #12
 8015a70:	4a47      	ldr	r2, [pc, #284]	; (8015b90 <dir_register+0x1ec>)
 8015a72:	fba2 2303 	umull	r2, r3, r2, r3
 8015a76:	089b      	lsrs	r3, r3, #2
 8015a78:	3301      	adds	r3, #1
 8015a7a:	e000      	b.n	8015a7e <dir_register+0xda>
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015a80:	6a39      	ldr	r1, [r7, #32]
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f7ff fcbf 	bl	8015406 <dir_alloc>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d148      	bne.n	8015b28 <dir_register+0x184>
 8015a96:	6a3b      	ldr	r3, [r7, #32]
 8015a98:	3b01      	subs	r3, #1
 8015a9a:	623b      	str	r3, [r7, #32]
 8015a9c:	6a3b      	ldr	r3, [r7, #32]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d042      	beq.n	8015b28 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	691a      	ldr	r2, [r3, #16]
 8015aa6:	6a3b      	ldr	r3, [r7, #32]
 8015aa8:	015b      	lsls	r3, r3, #5
 8015aaa:	1ad3      	subs	r3, r2, r3
 8015aac:	4619      	mov	r1, r3
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f7ff fb4a 	bl	8015148 <dir_sdi>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d132      	bne.n	8015b28 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	3320      	adds	r3, #32
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f7ff fe8a 	bl	80157e0 <sum_sfn>
 8015acc:	4603      	mov	r3, r0
 8015ace:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	699b      	ldr	r3, [r3, #24]
 8015ad4:	4619      	mov	r1, r3
 8015ad6:	69f8      	ldr	r0, [r7, #28]
 8015ad8:	f7fe ff54 	bl	8014984 <move_window>
 8015adc:	4603      	mov	r3, r0
 8015ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8015ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d11d      	bne.n	8015b26 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015aea:	69fb      	ldr	r3, [r7, #28]
 8015aec:	6918      	ldr	r0, [r3, #16]
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	69d9      	ldr	r1, [r3, #28]
 8015af2:	6a3b      	ldr	r3, [r7, #32]
 8015af4:	b2da      	uxtb	r2, r3
 8015af6:	7efb      	ldrb	r3, [r7, #27]
 8015af8:	f7ff fd7c 	bl	80155f4 <put_lfn>
				fs->wflag = 1;
 8015afc:	69fb      	ldr	r3, [r7, #28]
 8015afe:	2201      	movs	r2, #1
 8015b00:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015b02:	2100      	movs	r1, #0
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f7ff fba8 	bl	801525a <dir_next>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015b10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d107      	bne.n	8015b28 <dir_register+0x184>
 8015b18:	6a3b      	ldr	r3, [r7, #32]
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	623b      	str	r3, [r7, #32]
 8015b1e:	6a3b      	ldr	r3, [r7, #32]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d1d5      	bne.n	8015ad0 <dir_register+0x12c>
 8015b24:	e000      	b.n	8015b28 <dir_register+0x184>
				if (res != FR_OK) break;
 8015b26:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d128      	bne.n	8015b82 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	699b      	ldr	r3, [r3, #24]
 8015b34:	4619      	mov	r1, r3
 8015b36:	69f8      	ldr	r0, [r7, #28]
 8015b38:	f7fe ff24 	bl	8014984 <move_window>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d11b      	bne.n	8015b82 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	69db      	ldr	r3, [r3, #28]
 8015b4e:	2220      	movs	r2, #32
 8015b50:	2100      	movs	r1, #0
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7fe fe75 	bl	8014842 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	69d8      	ldr	r0, [r3, #28]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	3320      	adds	r3, #32
 8015b60:	220b      	movs	r2, #11
 8015b62:	4619      	mov	r1, r3
 8015b64:	f7fe fe4c 	bl	8014800 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	69db      	ldr	r3, [r3, #28]
 8015b72:	330c      	adds	r3, #12
 8015b74:	f002 0218 	and.w	r2, r2, #24
 8015b78:	b2d2      	uxtb	r2, r2
 8015b7a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015b7c:	69fb      	ldr	r3, [r7, #28]
 8015b7e:	2201      	movs	r2, #1
 8015b80:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3730      	adds	r7, #48	; 0x30
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}
 8015b8e:	bf00      	nop
 8015b90:	4ec4ec4f 	.word	0x4ec4ec4f

08015b94 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b08a      	sub	sp, #40	; 0x28
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	613b      	str	r3, [r7, #16]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	691b      	ldr	r3, [r3, #16]
 8015baa:	60fb      	str	r3, [r7, #12]
 8015bac:	2300      	movs	r3, #0
 8015bae:	617b      	str	r3, [r7, #20]
 8015bb0:	697b      	ldr	r3, [r7, #20]
 8015bb2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8015bb4:	69bb      	ldr	r3, [r7, #24]
 8015bb6:	1c5a      	adds	r2, r3, #1
 8015bb8:	61ba      	str	r2, [r7, #24]
 8015bba:	693a      	ldr	r2, [r7, #16]
 8015bbc:	4413      	add	r3, r2
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8015bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bc4:	2b1f      	cmp	r3, #31
 8015bc6:	d940      	bls.n	8015c4a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bca:	2b2f      	cmp	r3, #47	; 0x2f
 8015bcc:	d006      	beq.n	8015bdc <create_name+0x48>
 8015bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bd0:	2b5c      	cmp	r3, #92	; 0x5c
 8015bd2:	d110      	bne.n	8015bf6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015bd4:	e002      	b.n	8015bdc <create_name+0x48>
 8015bd6:	69bb      	ldr	r3, [r7, #24]
 8015bd8:	3301      	adds	r3, #1
 8015bda:	61bb      	str	r3, [r7, #24]
 8015bdc:	693a      	ldr	r2, [r7, #16]
 8015bde:	69bb      	ldr	r3, [r7, #24]
 8015be0:	4413      	add	r3, r2
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	2b2f      	cmp	r3, #47	; 0x2f
 8015be6:	d0f6      	beq.n	8015bd6 <create_name+0x42>
 8015be8:	693a      	ldr	r2, [r7, #16]
 8015bea:	69bb      	ldr	r3, [r7, #24]
 8015bec:	4413      	add	r3, r2
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	2b5c      	cmp	r3, #92	; 0x5c
 8015bf2:	d0f0      	beq.n	8015bd6 <create_name+0x42>
			break;
 8015bf4:	e02a      	b.n	8015c4c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8015bf6:	697b      	ldr	r3, [r7, #20]
 8015bf8:	2bfe      	cmp	r3, #254	; 0xfe
 8015bfa:	d901      	bls.n	8015c00 <create_name+0x6c>
 8015bfc:	2306      	movs	r3, #6
 8015bfe:	e17d      	b.n	8015efc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8015c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c02:	b2db      	uxtb	r3, r3
 8015c04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8015c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c08:	2101      	movs	r1, #1
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f001 fb2e 	bl	801726c <ff_convert>
 8015c10:	4603      	mov	r3, r0
 8015c12:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d101      	bne.n	8015c1e <create_name+0x8a>
 8015c1a:	2306      	movs	r3, #6
 8015c1c:	e16e      	b.n	8015efc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8015c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c20:	2b7f      	cmp	r3, #127	; 0x7f
 8015c22:	d809      	bhi.n	8015c38 <create_name+0xa4>
 8015c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c26:	4619      	mov	r1, r3
 8015c28:	488d      	ldr	r0, [pc, #564]	; (8015e60 <create_name+0x2cc>)
 8015c2a:	f7fe fe4c 	bl	80148c6 <chk_chr>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d001      	beq.n	8015c38 <create_name+0xa4>
 8015c34:	2306      	movs	r3, #6
 8015c36:	e161      	b.n	8015efc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	1c5a      	adds	r2, r3, #1
 8015c3c:	617a      	str	r2, [r7, #20]
 8015c3e:	005b      	lsls	r3, r3, #1
 8015c40:	68fa      	ldr	r2, [r7, #12]
 8015c42:	4413      	add	r3, r2
 8015c44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015c46:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8015c48:	e7b4      	b.n	8015bb4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8015c4a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8015c4c:	693a      	ldr	r2, [r7, #16]
 8015c4e:	69bb      	ldr	r3, [r7, #24]
 8015c50:	441a      	add	r2, r3
 8015c52:	683b      	ldr	r3, [r7, #0]
 8015c54:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c58:	2b1f      	cmp	r3, #31
 8015c5a:	d801      	bhi.n	8015c60 <create_name+0xcc>
 8015c5c:	2304      	movs	r3, #4
 8015c5e:	e000      	b.n	8015c62 <create_name+0xce>
 8015c60:	2300      	movs	r3, #0
 8015c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015c66:	e011      	b.n	8015c8c <create_name+0xf8>
		w = lfn[di - 1];
 8015c68:	697b      	ldr	r3, [r7, #20]
 8015c6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015c6e:	3b01      	subs	r3, #1
 8015c70:	005b      	lsls	r3, r3, #1
 8015c72:	68fa      	ldr	r2, [r7, #12]
 8015c74:	4413      	add	r3, r2
 8015c76:	881b      	ldrh	r3, [r3, #0]
 8015c78:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8015c7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c7c:	2b20      	cmp	r3, #32
 8015c7e:	d002      	beq.n	8015c86 <create_name+0xf2>
 8015c80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c82:	2b2e      	cmp	r3, #46	; 0x2e
 8015c84:	d106      	bne.n	8015c94 <create_name+0x100>
		di--;
 8015c86:	697b      	ldr	r3, [r7, #20]
 8015c88:	3b01      	subs	r3, #1
 8015c8a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d1ea      	bne.n	8015c68 <create_name+0xd4>
 8015c92:	e000      	b.n	8015c96 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8015c94:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8015c96:	697b      	ldr	r3, [r7, #20]
 8015c98:	005b      	lsls	r3, r3, #1
 8015c9a:	68fa      	ldr	r2, [r7, #12]
 8015c9c:	4413      	add	r3, r2
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d101      	bne.n	8015cac <create_name+0x118>
 8015ca8:	2306      	movs	r3, #6
 8015caa:	e127      	b.n	8015efc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	3320      	adds	r3, #32
 8015cb0:	220b      	movs	r2, #11
 8015cb2:	2120      	movs	r1, #32
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7fe fdc4 	bl	8014842 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015cba:	2300      	movs	r3, #0
 8015cbc:	61bb      	str	r3, [r7, #24]
 8015cbe:	e002      	b.n	8015cc6 <create_name+0x132>
 8015cc0:	69bb      	ldr	r3, [r7, #24]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	61bb      	str	r3, [r7, #24]
 8015cc6:	69bb      	ldr	r3, [r7, #24]
 8015cc8:	005b      	lsls	r3, r3, #1
 8015cca:	68fa      	ldr	r2, [r7, #12]
 8015ccc:	4413      	add	r3, r2
 8015cce:	881b      	ldrh	r3, [r3, #0]
 8015cd0:	2b20      	cmp	r3, #32
 8015cd2:	d0f5      	beq.n	8015cc0 <create_name+0x12c>
 8015cd4:	69bb      	ldr	r3, [r7, #24]
 8015cd6:	005b      	lsls	r3, r3, #1
 8015cd8:	68fa      	ldr	r2, [r7, #12]
 8015cda:	4413      	add	r3, r2
 8015cdc:	881b      	ldrh	r3, [r3, #0]
 8015cde:	2b2e      	cmp	r3, #46	; 0x2e
 8015ce0:	d0ee      	beq.n	8015cc0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015ce2:	69bb      	ldr	r3, [r7, #24]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d009      	beq.n	8015cfc <create_name+0x168>
 8015ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cec:	f043 0303 	orr.w	r3, r3, #3
 8015cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015cf4:	e002      	b.n	8015cfc <create_name+0x168>
 8015cf6:	697b      	ldr	r3, [r7, #20]
 8015cf8:	3b01      	subs	r3, #1
 8015cfa:	617b      	str	r3, [r7, #20]
 8015cfc:	697b      	ldr	r3, [r7, #20]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d009      	beq.n	8015d16 <create_name+0x182>
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015d08:	3b01      	subs	r3, #1
 8015d0a:	005b      	lsls	r3, r3, #1
 8015d0c:	68fa      	ldr	r2, [r7, #12]
 8015d0e:	4413      	add	r3, r2
 8015d10:	881b      	ldrh	r3, [r3, #0]
 8015d12:	2b2e      	cmp	r3, #46	; 0x2e
 8015d14:	d1ef      	bne.n	8015cf6 <create_name+0x162>

	i = b = 0; ni = 8;
 8015d16:	2300      	movs	r3, #0
 8015d18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	623b      	str	r3, [r7, #32]
 8015d20:	2308      	movs	r3, #8
 8015d22:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8015d24:	69bb      	ldr	r3, [r7, #24]
 8015d26:	1c5a      	adds	r2, r3, #1
 8015d28:	61ba      	str	r2, [r7, #24]
 8015d2a:	005b      	lsls	r3, r3, #1
 8015d2c:	68fa      	ldr	r2, [r7, #12]
 8015d2e:	4413      	add	r3, r2
 8015d30:	881b      	ldrh	r3, [r3, #0]
 8015d32:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8015d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	f000 8090 	beq.w	8015e5c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8015d3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d3e:	2b20      	cmp	r3, #32
 8015d40:	d006      	beq.n	8015d50 <create_name+0x1bc>
 8015d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d44:	2b2e      	cmp	r3, #46	; 0x2e
 8015d46:	d10a      	bne.n	8015d5e <create_name+0x1ca>
 8015d48:	69ba      	ldr	r2, [r7, #24]
 8015d4a:	697b      	ldr	r3, [r7, #20]
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	d006      	beq.n	8015d5e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8015d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d54:	f043 0303 	orr.w	r3, r3, #3
 8015d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d5c:	e07d      	b.n	8015e5a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8015d5e:	6a3a      	ldr	r2, [r7, #32]
 8015d60:	69fb      	ldr	r3, [r7, #28]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d203      	bcs.n	8015d6e <create_name+0x1da>
 8015d66:	69ba      	ldr	r2, [r7, #24]
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d123      	bne.n	8015db6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8015d6e:	69fb      	ldr	r3, [r7, #28]
 8015d70:	2b0b      	cmp	r3, #11
 8015d72:	d106      	bne.n	8015d82 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8015d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d78:	f043 0303 	orr.w	r3, r3, #3
 8015d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d80:	e075      	b.n	8015e6e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8015d82:	69ba      	ldr	r2, [r7, #24]
 8015d84:	697b      	ldr	r3, [r7, #20]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d005      	beq.n	8015d96 <create_name+0x202>
 8015d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d8e:	f043 0303 	orr.w	r3, r3, #3
 8015d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8015d96:	69ba      	ldr	r2, [r7, #24]
 8015d98:	697b      	ldr	r3, [r7, #20]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d866      	bhi.n	8015e6c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	61bb      	str	r3, [r7, #24]
 8015da2:	2308      	movs	r3, #8
 8015da4:	623b      	str	r3, [r7, #32]
 8015da6:	230b      	movs	r3, #11
 8015da8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8015daa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015dae:	009b      	lsls	r3, r3, #2
 8015db0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015db4:	e051      	b.n	8015e5a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8015db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015db8:	2b7f      	cmp	r3, #127	; 0x7f
 8015dba:	d914      	bls.n	8015de6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8015dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015dbe:	2100      	movs	r1, #0
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f001 fa53 	bl	801726c <ff_convert>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d004      	beq.n	8015dda <create_name+0x246>
 8015dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015dd2:	3b80      	subs	r3, #128	; 0x80
 8015dd4:	4a23      	ldr	r2, [pc, #140]	; (8015e64 <create_name+0x2d0>)
 8015dd6:	5cd3      	ldrb	r3, [r2, r3]
 8015dd8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8015dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015dde:	f043 0302 	orr.w	r3, r3, #2
 8015de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d007      	beq.n	8015dfc <create_name+0x268>
 8015dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015dee:	4619      	mov	r1, r3
 8015df0:	481d      	ldr	r0, [pc, #116]	; (8015e68 <create_name+0x2d4>)
 8015df2:	f7fe fd68 	bl	80148c6 <chk_chr>
 8015df6:	4603      	mov	r3, r0
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d008      	beq.n	8015e0e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8015dfc:	235f      	movs	r3, #95	; 0x5f
 8015dfe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8015e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e04:	f043 0303 	orr.w	r3, r3, #3
 8015e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e0c:	e01b      	b.n	8015e46 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8015e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e10:	2b40      	cmp	r3, #64	; 0x40
 8015e12:	d909      	bls.n	8015e28 <create_name+0x294>
 8015e14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e16:	2b5a      	cmp	r3, #90	; 0x5a
 8015e18:	d806      	bhi.n	8015e28 <create_name+0x294>
					b |= 2;
 8015e1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015e1e:	f043 0302 	orr.w	r3, r3, #2
 8015e22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015e26:	e00e      	b.n	8015e46 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8015e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e2a:	2b60      	cmp	r3, #96	; 0x60
 8015e2c:	d90b      	bls.n	8015e46 <create_name+0x2b2>
 8015e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e30:	2b7a      	cmp	r3, #122	; 0x7a
 8015e32:	d808      	bhi.n	8015e46 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8015e34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015e38:	f043 0301 	orr.w	r3, r3, #1
 8015e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e42:	3b20      	subs	r3, #32
 8015e44:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8015e46:	6a3b      	ldr	r3, [r7, #32]
 8015e48:	1c5a      	adds	r2, r3, #1
 8015e4a:	623a      	str	r2, [r7, #32]
 8015e4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e4e:	b2d1      	uxtb	r1, r2
 8015e50:	687a      	ldr	r2, [r7, #4]
 8015e52:	4413      	add	r3, r2
 8015e54:	460a      	mov	r2, r1
 8015e56:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 8015e5a:	e763      	b.n	8015d24 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8015e5c:	bf00      	nop
 8015e5e:	e006      	b.n	8015e6e <create_name+0x2da>
 8015e60:	08018860 	.word	0x08018860
 8015e64:	08018920 	.word	0x08018920
 8015e68:	0801886c 	.word	0x0801886c
			if (si > di) break;			/* No extension */
 8015e6c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015e74:	2be5      	cmp	r3, #229	; 0xe5
 8015e76:	d103      	bne.n	8015e80 <create_name+0x2ec>
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2205      	movs	r2, #5
 8015e7c:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	2b08      	cmp	r3, #8
 8015e84:	d104      	bne.n	8015e90 <create_name+0x2fc>
 8015e86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015e8a:	009b      	lsls	r3, r3, #2
 8015e8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015e90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015e94:	f003 030c 	and.w	r3, r3, #12
 8015e98:	2b0c      	cmp	r3, #12
 8015e9a:	d005      	beq.n	8015ea8 <create_name+0x314>
 8015e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ea0:	f003 0303 	and.w	r3, r3, #3
 8015ea4:	2b03      	cmp	r3, #3
 8015ea6:	d105      	bne.n	8015eb4 <create_name+0x320>
 8015ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015eac:	f043 0302 	orr.w	r3, r3, #2
 8015eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015eb8:	f003 0302 	and.w	r3, r3, #2
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d117      	bne.n	8015ef0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ec4:	f003 0303 	and.w	r3, r3, #3
 8015ec8:	2b01      	cmp	r3, #1
 8015eca:	d105      	bne.n	8015ed8 <create_name+0x344>
 8015ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ed0:	f043 0310 	orr.w	r3, r3, #16
 8015ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8015ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015edc:	f003 030c 	and.w	r3, r3, #12
 8015ee0:	2b04      	cmp	r3, #4
 8015ee2:	d105      	bne.n	8015ef0 <create_name+0x35c>
 8015ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ee8:	f043 0308 	orr.w	r3, r3, #8
 8015eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015ef6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8015efa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3728      	adds	r7, #40	; 0x28
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}

08015f04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b086      	sub	sp, #24
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
 8015f0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015f18:	e002      	b.n	8015f20 <follow_path+0x1c>
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	3301      	adds	r3, #1
 8015f1e:	603b      	str	r3, [r7, #0]
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	781b      	ldrb	r3, [r3, #0]
 8015f24:	2b2f      	cmp	r3, #47	; 0x2f
 8015f26:	d0f8      	beq.n	8015f1a <follow_path+0x16>
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	781b      	ldrb	r3, [r3, #0]
 8015f2c:	2b5c      	cmp	r3, #92	; 0x5c
 8015f2e:	d0f4      	beq.n	8015f1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	2200      	movs	r2, #0
 8015f34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	781b      	ldrb	r3, [r3, #0]
 8015f3a:	2b1f      	cmp	r3, #31
 8015f3c:	d80a      	bhi.n	8015f54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2280      	movs	r2, #128	; 0x80
 8015f42:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8015f46:	2100      	movs	r1, #0
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f7ff f8fd 	bl	8015148 <dir_sdi>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	75fb      	strb	r3, [r7, #23]
 8015f52:	e048      	b.n	8015fe6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015f54:	463b      	mov	r3, r7
 8015f56:	4619      	mov	r1, r3
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f7ff fe1b 	bl	8015b94 <create_name>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015f62:	7dfb      	ldrb	r3, [r7, #23]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d139      	bne.n	8015fdc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f7ff fc5a 	bl	8015822 <dir_find>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015f78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015f7a:	7dfb      	ldrb	r3, [r7, #23]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d00a      	beq.n	8015f96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015f80:	7dfb      	ldrb	r3, [r7, #23]
 8015f82:	2b04      	cmp	r3, #4
 8015f84:	d12c      	bne.n	8015fe0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015f86:	7afb      	ldrb	r3, [r7, #11]
 8015f88:	f003 0304 	and.w	r3, r3, #4
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d127      	bne.n	8015fe0 <follow_path+0xdc>
 8015f90:	2305      	movs	r3, #5
 8015f92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015f94:	e024      	b.n	8015fe0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015f96:	7afb      	ldrb	r3, [r7, #11]
 8015f98:	f003 0304 	and.w	r3, r3, #4
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d121      	bne.n	8015fe4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	799b      	ldrb	r3, [r3, #6]
 8015fa4:	f003 0310 	and.w	r3, r3, #16
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d102      	bne.n	8015fb2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015fac:	2305      	movs	r3, #5
 8015fae:	75fb      	strb	r3, [r7, #23]
 8015fb0:	e019      	b.n	8015fe6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	691b      	ldr	r3, [r3, #16]
 8015fbc:	68fa      	ldr	r2, [r7, #12]
 8015fbe:	8992      	ldrh	r2, [r2, #12]
 8015fc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8015fc4:	fb00 f202 	mul.w	r2, r0, r2
 8015fc8:	1a9b      	subs	r3, r3, r2
 8015fca:	440b      	add	r3, r1
 8015fcc:	4619      	mov	r1, r3
 8015fce:	68f8      	ldr	r0, [r7, #12]
 8015fd0:	f7ff fa60 	bl	8015494 <ld_clust>
 8015fd4:	4602      	mov	r2, r0
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015fda:	e7bb      	b.n	8015f54 <follow_path+0x50>
			if (res != FR_OK) break;
 8015fdc:	bf00      	nop
 8015fde:	e002      	b.n	8015fe6 <follow_path+0xe2>
				break;
 8015fe0:	bf00      	nop
 8015fe2:	e000      	b.n	8015fe6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015fe4:	bf00      	nop
			}
		}
	}

	return res;
 8015fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3718      	adds	r7, #24
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}

08015ff0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015ff0:	b480      	push	{r7}
 8015ff2:	b087      	sub	sp, #28
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8015ffc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d031      	beq.n	801606a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	617b      	str	r3, [r7, #20]
 801600c:	e002      	b.n	8016014 <get_ldnumber+0x24>
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	3301      	adds	r3, #1
 8016012:	617b      	str	r3, [r7, #20]
 8016014:	697b      	ldr	r3, [r7, #20]
 8016016:	781b      	ldrb	r3, [r3, #0]
 8016018:	2b1f      	cmp	r3, #31
 801601a:	d903      	bls.n	8016024 <get_ldnumber+0x34>
 801601c:	697b      	ldr	r3, [r7, #20]
 801601e:	781b      	ldrb	r3, [r3, #0]
 8016020:	2b3a      	cmp	r3, #58	; 0x3a
 8016022:	d1f4      	bne.n	801600e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	2b3a      	cmp	r3, #58	; 0x3a
 801602a:	d11c      	bne.n	8016066 <get_ldnumber+0x76>
			tp = *path;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	1c5a      	adds	r2, r3, #1
 8016036:	60fa      	str	r2, [r7, #12]
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	3b30      	subs	r3, #48	; 0x30
 801603c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	2b09      	cmp	r3, #9
 8016042:	d80e      	bhi.n	8016062 <get_ldnumber+0x72>
 8016044:	68fa      	ldr	r2, [r7, #12]
 8016046:	697b      	ldr	r3, [r7, #20]
 8016048:	429a      	cmp	r2, r3
 801604a:	d10a      	bne.n	8016062 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801604c:	68bb      	ldr	r3, [r7, #8]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d107      	bne.n	8016062 <get_ldnumber+0x72>
					vol = (int)i;
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	3301      	adds	r3, #1
 801605a:	617b      	str	r3, [r7, #20]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	697a      	ldr	r2, [r7, #20]
 8016060:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016062:	693b      	ldr	r3, [r7, #16]
 8016064:	e002      	b.n	801606c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016066:	2300      	movs	r3, #0
 8016068:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801606a:	693b      	ldr	r3, [r7, #16]
}
 801606c:	4618      	mov	r0, r3
 801606e:	371c      	adds	r7, #28
 8016070:	46bd      	mov	sp, r7
 8016072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016076:	4770      	bx	lr

08016078 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b082      	sub	sp, #8
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
 8016080:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2200      	movs	r2, #0
 8016086:	70da      	strb	r2, [r3, #3]
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f04f 32ff 	mov.w	r2, #4294967295
 801608e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016090:	6839      	ldr	r1, [r7, #0]
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7fe fc76 	bl	8014984 <move_window>
 8016098:	4603      	mov	r3, r0
 801609a:	2b00      	cmp	r3, #0
 801609c:	d001      	beq.n	80160a2 <check_fs+0x2a>
 801609e:	2304      	movs	r3, #4
 80160a0:	e038      	b.n	8016114 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	3338      	adds	r3, #56	; 0x38
 80160a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80160aa:	4618      	mov	r0, r3
 80160ac:	f7fe fb26 	bl	80146fc <ld_word>
 80160b0:	4603      	mov	r3, r0
 80160b2:	461a      	mov	r2, r3
 80160b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d001      	beq.n	80160c0 <check_fs+0x48>
 80160bc:	2303      	movs	r3, #3
 80160be:	e029      	b.n	8016114 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80160c6:	2be9      	cmp	r3, #233	; 0xe9
 80160c8:	d009      	beq.n	80160de <check_fs+0x66>
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80160d0:	2beb      	cmp	r3, #235	; 0xeb
 80160d2:	d11e      	bne.n	8016112 <check_fs+0x9a>
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80160da:	2b90      	cmp	r3, #144	; 0x90
 80160dc:	d119      	bne.n	8016112 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	3338      	adds	r3, #56	; 0x38
 80160e2:	3336      	adds	r3, #54	; 0x36
 80160e4:	4618      	mov	r0, r3
 80160e6:	f7fe fb21 	bl	801472c <ld_dword>
 80160ea:	4603      	mov	r3, r0
 80160ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80160f0:	4a0a      	ldr	r2, [pc, #40]	; (801611c <check_fs+0xa4>)
 80160f2:	4293      	cmp	r3, r2
 80160f4:	d101      	bne.n	80160fa <check_fs+0x82>
 80160f6:	2300      	movs	r3, #0
 80160f8:	e00c      	b.n	8016114 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	3338      	adds	r3, #56	; 0x38
 80160fe:	3352      	adds	r3, #82	; 0x52
 8016100:	4618      	mov	r0, r3
 8016102:	f7fe fb13 	bl	801472c <ld_dword>
 8016106:	4603      	mov	r3, r0
 8016108:	4a05      	ldr	r2, [pc, #20]	; (8016120 <check_fs+0xa8>)
 801610a:	4293      	cmp	r3, r2
 801610c:	d101      	bne.n	8016112 <check_fs+0x9a>
 801610e:	2300      	movs	r3, #0
 8016110:	e000      	b.n	8016114 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016112:	2302      	movs	r3, #2
}
 8016114:	4618      	mov	r0, r3
 8016116:	3708      	adds	r7, #8
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}
 801611c:	00544146 	.word	0x00544146
 8016120:	33544146 	.word	0x33544146

08016124 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b096      	sub	sp, #88	; 0x58
 8016128:	af00      	add	r7, sp, #0
 801612a:	60f8      	str	r0, [r7, #12]
 801612c:	60b9      	str	r1, [r7, #8]
 801612e:	4613      	mov	r3, r2
 8016130:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016132:	68bb      	ldr	r3, [r7, #8]
 8016134:	2200      	movs	r2, #0
 8016136:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016138:	68f8      	ldr	r0, [r7, #12]
 801613a:	f7ff ff59 	bl	8015ff0 <get_ldnumber>
 801613e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016142:	2b00      	cmp	r3, #0
 8016144:	da01      	bge.n	801614a <find_volume+0x26>
 8016146:	230b      	movs	r3, #11
 8016148:	e262      	b.n	8016610 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801614a:	4a9f      	ldr	r2, [pc, #636]	; (80163c8 <find_volume+0x2a4>)
 801614c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801614e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016152:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016156:	2b00      	cmp	r3, #0
 8016158:	d101      	bne.n	801615e <find_volume+0x3a>
 801615a:	230c      	movs	r3, #12
 801615c:	e258      	b.n	8016610 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016162:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016164:	79fb      	ldrb	r3, [r7, #7]
 8016166:	f023 0301 	bic.w	r3, r3, #1
 801616a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801616e:	781b      	ldrb	r3, [r3, #0]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d01a      	beq.n	80161aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016176:	785b      	ldrb	r3, [r3, #1]
 8016178:	4618      	mov	r0, r3
 801617a:	f7fe fa21 	bl	80145c0 <disk_status>
 801617e:	4603      	mov	r3, r0
 8016180:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016184:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016188:	f003 0301 	and.w	r3, r3, #1
 801618c:	2b00      	cmp	r3, #0
 801618e:	d10c      	bne.n	80161aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016190:	79fb      	ldrb	r3, [r7, #7]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d007      	beq.n	80161a6 <find_volume+0x82>
 8016196:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801619a:	f003 0304 	and.w	r3, r3, #4
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d001      	beq.n	80161a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80161a2:	230a      	movs	r3, #10
 80161a4:	e234      	b.n	8016610 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80161a6:	2300      	movs	r3, #0
 80161a8:	e232      	b.n	8016610 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80161aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ac:	2200      	movs	r2, #0
 80161ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80161b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161b2:	b2da      	uxtb	r2, r3
 80161b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80161b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ba:	785b      	ldrb	r3, [r3, #1]
 80161bc:	4618      	mov	r0, r3
 80161be:	f7fe fa19 	bl	80145f4 <disk_initialize>
 80161c2:	4603      	mov	r3, r0
 80161c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80161c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80161cc:	f003 0301 	and.w	r3, r3, #1
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d001      	beq.n	80161d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80161d4:	2303      	movs	r3, #3
 80161d6:	e21b      	b.n	8016610 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80161d8:	79fb      	ldrb	r3, [r7, #7]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d007      	beq.n	80161ee <find_volume+0xca>
 80161de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80161e2:	f003 0304 	and.w	r3, r3, #4
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d001      	beq.n	80161ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80161ea:	230a      	movs	r3, #10
 80161ec:	e210      	b.n	8016610 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80161ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161f0:	7858      	ldrb	r0, [r3, #1]
 80161f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161f4:	330c      	adds	r3, #12
 80161f6:	461a      	mov	r2, r3
 80161f8:	2102      	movs	r1, #2
 80161fa:	f7fe fa61 	bl	80146c0 <disk_ioctl>
 80161fe:	4603      	mov	r3, r0
 8016200:	2b00      	cmp	r3, #0
 8016202:	d001      	beq.n	8016208 <find_volume+0xe4>
 8016204:	2301      	movs	r3, #1
 8016206:	e203      	b.n	8016610 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8016208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801620a:	899b      	ldrh	r3, [r3, #12]
 801620c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016210:	d80d      	bhi.n	801622e <find_volume+0x10a>
 8016212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016214:	899b      	ldrh	r3, [r3, #12]
 8016216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801621a:	d308      	bcc.n	801622e <find_volume+0x10a>
 801621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801621e:	899b      	ldrh	r3, [r3, #12]
 8016220:	461a      	mov	r2, r3
 8016222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016224:	899b      	ldrh	r3, [r3, #12]
 8016226:	3b01      	subs	r3, #1
 8016228:	4013      	ands	r3, r2
 801622a:	2b00      	cmp	r3, #0
 801622c:	d001      	beq.n	8016232 <find_volume+0x10e>
 801622e:	2301      	movs	r3, #1
 8016230:	e1ee      	b.n	8016610 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016232:	2300      	movs	r3, #0
 8016234:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016236:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801623a:	f7ff ff1d 	bl	8016078 <check_fs>
 801623e:	4603      	mov	r3, r0
 8016240:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016248:	2b02      	cmp	r3, #2
 801624a:	d149      	bne.n	80162e0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801624c:	2300      	movs	r3, #0
 801624e:	643b      	str	r3, [r7, #64]	; 0x40
 8016250:	e01e      	b.n	8016290 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016254:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801625a:	011b      	lsls	r3, r3, #4
 801625c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016260:	4413      	add	r3, r2
 8016262:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016266:	3304      	adds	r3, #4
 8016268:	781b      	ldrb	r3, [r3, #0]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d006      	beq.n	801627c <find_volume+0x158>
 801626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016270:	3308      	adds	r3, #8
 8016272:	4618      	mov	r0, r3
 8016274:	f7fe fa5a 	bl	801472c <ld_dword>
 8016278:	4602      	mov	r2, r0
 801627a:	e000      	b.n	801627e <find_volume+0x15a>
 801627c:	2200      	movs	r2, #0
 801627e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016280:	009b      	lsls	r3, r3, #2
 8016282:	3358      	adds	r3, #88	; 0x58
 8016284:	443b      	add	r3, r7
 8016286:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801628c:	3301      	adds	r3, #1
 801628e:	643b      	str	r3, [r7, #64]	; 0x40
 8016290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016292:	2b03      	cmp	r3, #3
 8016294:	d9dd      	bls.n	8016252 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016296:	2300      	movs	r3, #0
 8016298:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801629a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801629c:	2b00      	cmp	r3, #0
 801629e:	d002      	beq.n	80162a6 <find_volume+0x182>
 80162a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162a2:	3b01      	subs	r3, #1
 80162a4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80162a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162a8:	009b      	lsls	r3, r3, #2
 80162aa:	3358      	adds	r3, #88	; 0x58
 80162ac:	443b      	add	r3, r7
 80162ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80162b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80162b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d005      	beq.n	80162c6 <find_volume+0x1a2>
 80162ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80162bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80162be:	f7ff fedb 	bl	8016078 <check_fs>
 80162c2:	4603      	mov	r3, r0
 80162c4:	e000      	b.n	80162c8 <find_volume+0x1a4>
 80162c6:	2303      	movs	r3, #3
 80162c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80162cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	d905      	bls.n	80162e0 <find_volume+0x1bc>
 80162d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162d6:	3301      	adds	r3, #1
 80162d8:	643b      	str	r3, [r7, #64]	; 0x40
 80162da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162dc:	2b03      	cmp	r3, #3
 80162de:	d9e2      	bls.n	80162a6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80162e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80162e4:	2b04      	cmp	r3, #4
 80162e6:	d101      	bne.n	80162ec <find_volume+0x1c8>
 80162e8:	2301      	movs	r3, #1
 80162ea:	e191      	b.n	8016610 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80162ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80162f0:	2b01      	cmp	r3, #1
 80162f2:	d901      	bls.n	80162f8 <find_volume+0x1d4>
 80162f4:	230d      	movs	r3, #13
 80162f6:	e18b      	b.n	8016610 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80162f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162fa:	3338      	adds	r3, #56	; 0x38
 80162fc:	330b      	adds	r3, #11
 80162fe:	4618      	mov	r0, r3
 8016300:	f7fe f9fc 	bl	80146fc <ld_word>
 8016304:	4603      	mov	r3, r0
 8016306:	461a      	mov	r2, r3
 8016308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801630a:	899b      	ldrh	r3, [r3, #12]
 801630c:	429a      	cmp	r2, r3
 801630e:	d001      	beq.n	8016314 <find_volume+0x1f0>
 8016310:	230d      	movs	r3, #13
 8016312:	e17d      	b.n	8016610 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016316:	3338      	adds	r3, #56	; 0x38
 8016318:	3316      	adds	r3, #22
 801631a:	4618      	mov	r0, r3
 801631c:	f7fe f9ee 	bl	80146fc <ld_word>
 8016320:	4603      	mov	r3, r0
 8016322:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016326:	2b00      	cmp	r3, #0
 8016328:	d106      	bne.n	8016338 <find_volume+0x214>
 801632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801632c:	3338      	adds	r3, #56	; 0x38
 801632e:	3324      	adds	r3, #36	; 0x24
 8016330:	4618      	mov	r0, r3
 8016332:	f7fe f9fb 	bl	801472c <ld_dword>
 8016336:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801633a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801633c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016340:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8016344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016346:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801634a:	789b      	ldrb	r3, [r3, #2]
 801634c:	2b01      	cmp	r3, #1
 801634e:	d005      	beq.n	801635c <find_volume+0x238>
 8016350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016352:	789b      	ldrb	r3, [r3, #2]
 8016354:	2b02      	cmp	r3, #2
 8016356:	d001      	beq.n	801635c <find_volume+0x238>
 8016358:	230d      	movs	r3, #13
 801635a:	e159      	b.n	8016610 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801635e:	789b      	ldrb	r3, [r3, #2]
 8016360:	461a      	mov	r2, r3
 8016362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016364:	fb02 f303 	mul.w	r3, r2, r3
 8016368:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801636c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016370:	b29a      	uxth	r2, r3
 8016372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016374:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016378:	895b      	ldrh	r3, [r3, #10]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d008      	beq.n	8016390 <find_volume+0x26c>
 801637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016380:	895b      	ldrh	r3, [r3, #10]
 8016382:	461a      	mov	r2, r3
 8016384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016386:	895b      	ldrh	r3, [r3, #10]
 8016388:	3b01      	subs	r3, #1
 801638a:	4013      	ands	r3, r2
 801638c:	2b00      	cmp	r3, #0
 801638e:	d001      	beq.n	8016394 <find_volume+0x270>
 8016390:	230d      	movs	r3, #13
 8016392:	e13d      	b.n	8016610 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016396:	3338      	adds	r3, #56	; 0x38
 8016398:	3311      	adds	r3, #17
 801639a:	4618      	mov	r0, r3
 801639c:	f7fe f9ae 	bl	80146fc <ld_word>
 80163a0:	4603      	mov	r3, r0
 80163a2:	461a      	mov	r2, r3
 80163a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80163a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163aa:	891b      	ldrh	r3, [r3, #8]
 80163ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80163ae:	8992      	ldrh	r2, [r2, #12]
 80163b0:	0952      	lsrs	r2, r2, #5
 80163b2:	b292      	uxth	r2, r2
 80163b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80163b8:	fb01 f202 	mul.w	r2, r1, r2
 80163bc:	1a9b      	subs	r3, r3, r2
 80163be:	b29b      	uxth	r3, r3
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d003      	beq.n	80163cc <find_volume+0x2a8>
 80163c4:	230d      	movs	r3, #13
 80163c6:	e123      	b.n	8016610 <find_volume+0x4ec>
 80163c8:	20003808 	.word	0x20003808

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80163cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ce:	3338      	adds	r3, #56	; 0x38
 80163d0:	3313      	adds	r3, #19
 80163d2:	4618      	mov	r0, r3
 80163d4:	f7fe f992 	bl	80146fc <ld_word>
 80163d8:	4603      	mov	r3, r0
 80163da:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80163dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d106      	bne.n	80163f0 <find_volume+0x2cc>
 80163e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e4:	3338      	adds	r3, #56	; 0x38
 80163e6:	3320      	adds	r3, #32
 80163e8:	4618      	mov	r0, r3
 80163ea:	f7fe f99f 	bl	801472c <ld_dword>
 80163ee:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80163f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163f2:	3338      	adds	r3, #56	; 0x38
 80163f4:	330e      	adds	r3, #14
 80163f6:	4618      	mov	r0, r3
 80163f8:	f7fe f980 	bl	80146fc <ld_word>
 80163fc:	4603      	mov	r3, r0
 80163fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016400:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016402:	2b00      	cmp	r3, #0
 8016404:	d101      	bne.n	801640a <find_volume+0x2e6>
 8016406:	230d      	movs	r3, #13
 8016408:	e102      	b.n	8016610 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801640a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801640c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801640e:	4413      	add	r3, r2
 8016410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016412:	8911      	ldrh	r1, [r2, #8]
 8016414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016416:	8992      	ldrh	r2, [r2, #12]
 8016418:	0952      	lsrs	r2, r2, #5
 801641a:	b292      	uxth	r2, r2
 801641c:	fbb1 f2f2 	udiv	r2, r1, r2
 8016420:	b292      	uxth	r2, r2
 8016422:	4413      	add	r3, r2
 8016424:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801642a:	429a      	cmp	r2, r3
 801642c:	d201      	bcs.n	8016432 <find_volume+0x30e>
 801642e:	230d      	movs	r3, #13
 8016430:	e0ee      	b.n	8016610 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016436:	1ad3      	subs	r3, r2, r3
 8016438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801643a:	8952      	ldrh	r2, [r2, #10]
 801643c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016440:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016444:	2b00      	cmp	r3, #0
 8016446:	d101      	bne.n	801644c <find_volume+0x328>
 8016448:	230d      	movs	r3, #13
 801644a:	e0e1      	b.n	8016610 <find_volume+0x4ec>
		fmt = FS_FAT32;
 801644c:	2303      	movs	r3, #3
 801644e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016454:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016458:	4293      	cmp	r3, r2
 801645a:	d802      	bhi.n	8016462 <find_volume+0x33e>
 801645c:	2302      	movs	r3, #2
 801645e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016464:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016468:	4293      	cmp	r3, r2
 801646a:	d802      	bhi.n	8016472 <find_volume+0x34e>
 801646c:	2301      	movs	r3, #1
 801646e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016474:	1c9a      	adds	r2, r3, #2
 8016476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016478:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801647c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801647e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016480:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016484:	441a      	add	r2, r3
 8016486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016488:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801648a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801648e:	441a      	add	r2, r3
 8016490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016492:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8016494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016498:	2b03      	cmp	r3, #3
 801649a:	d11e      	bne.n	80164da <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649e:	3338      	adds	r3, #56	; 0x38
 80164a0:	332a      	adds	r3, #42	; 0x2a
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7fe f92a 	bl	80146fc <ld_word>
 80164a8:	4603      	mov	r3, r0
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d001      	beq.n	80164b2 <find_volume+0x38e>
 80164ae:	230d      	movs	r3, #13
 80164b0:	e0ae      	b.n	8016610 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80164b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164b4:	891b      	ldrh	r3, [r3, #8]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d001      	beq.n	80164be <find_volume+0x39a>
 80164ba:	230d      	movs	r3, #13
 80164bc:	e0a8      	b.n	8016610 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80164be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c0:	3338      	adds	r3, #56	; 0x38
 80164c2:	332c      	adds	r3, #44	; 0x2c
 80164c4:	4618      	mov	r0, r3
 80164c6:	f7fe f931 	bl	801472c <ld_dword>
 80164ca:	4602      	mov	r2, r0
 80164cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ce:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80164d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d2:	69db      	ldr	r3, [r3, #28]
 80164d4:	009b      	lsls	r3, r3, #2
 80164d6:	647b      	str	r3, [r7, #68]	; 0x44
 80164d8:	e01f      	b.n	801651a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80164da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164dc:	891b      	ldrh	r3, [r3, #8]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d101      	bne.n	80164e6 <find_volume+0x3c2>
 80164e2:	230d      	movs	r3, #13
 80164e4:	e094      	b.n	8016610 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80164e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80164ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164ec:	441a      	add	r2, r3
 80164ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164f0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80164f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80164f6:	2b02      	cmp	r3, #2
 80164f8:	d103      	bne.n	8016502 <find_volume+0x3de>
 80164fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164fc:	69db      	ldr	r3, [r3, #28]
 80164fe:	005b      	lsls	r3, r3, #1
 8016500:	e00a      	b.n	8016518 <find_volume+0x3f4>
 8016502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016504:	69da      	ldr	r2, [r3, #28]
 8016506:	4613      	mov	r3, r2
 8016508:	005b      	lsls	r3, r3, #1
 801650a:	4413      	add	r3, r2
 801650c:	085a      	lsrs	r2, r3, #1
 801650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016510:	69db      	ldr	r3, [r3, #28]
 8016512:	f003 0301 	and.w	r3, r3, #1
 8016516:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016518:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801651c:	6a1a      	ldr	r2, [r3, #32]
 801651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016520:	899b      	ldrh	r3, [r3, #12]
 8016522:	4619      	mov	r1, r3
 8016524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016526:	440b      	add	r3, r1
 8016528:	3b01      	subs	r3, #1
 801652a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801652c:	8989      	ldrh	r1, [r1, #12]
 801652e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016532:	429a      	cmp	r2, r3
 8016534:	d201      	bcs.n	801653a <find_volume+0x416>
 8016536:	230d      	movs	r3, #13
 8016538:	e06a      	b.n	8016610 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801653c:	f04f 32ff 	mov.w	r2, #4294967295
 8016540:	619a      	str	r2, [r3, #24]
 8016542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016544:	699a      	ldr	r2, [r3, #24]
 8016546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016548:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801654c:	2280      	movs	r2, #128	; 0x80
 801654e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016554:	2b03      	cmp	r3, #3
 8016556:	d149      	bne.n	80165ec <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801655a:	3338      	adds	r3, #56	; 0x38
 801655c:	3330      	adds	r3, #48	; 0x30
 801655e:	4618      	mov	r0, r3
 8016560:	f7fe f8cc 	bl	80146fc <ld_word>
 8016564:	4603      	mov	r3, r0
 8016566:	2b01      	cmp	r3, #1
 8016568:	d140      	bne.n	80165ec <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801656a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801656c:	3301      	adds	r3, #1
 801656e:	4619      	mov	r1, r3
 8016570:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016572:	f7fe fa07 	bl	8014984 <move_window>
 8016576:	4603      	mov	r3, r0
 8016578:	2b00      	cmp	r3, #0
 801657a:	d137      	bne.n	80165ec <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801657e:	2200      	movs	r2, #0
 8016580:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016584:	3338      	adds	r3, #56	; 0x38
 8016586:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801658a:	4618      	mov	r0, r3
 801658c:	f7fe f8b6 	bl	80146fc <ld_word>
 8016590:	4603      	mov	r3, r0
 8016592:	461a      	mov	r2, r3
 8016594:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016598:	429a      	cmp	r2, r3
 801659a:	d127      	bne.n	80165ec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801659e:	3338      	adds	r3, #56	; 0x38
 80165a0:	4618      	mov	r0, r3
 80165a2:	f7fe f8c3 	bl	801472c <ld_dword>
 80165a6:	4603      	mov	r3, r0
 80165a8:	4a1b      	ldr	r2, [pc, #108]	; (8016618 <find_volume+0x4f4>)
 80165aa:	4293      	cmp	r3, r2
 80165ac:	d11e      	bne.n	80165ec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80165ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165b0:	3338      	adds	r3, #56	; 0x38
 80165b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80165b6:	4618      	mov	r0, r3
 80165b8:	f7fe f8b8 	bl	801472c <ld_dword>
 80165bc:	4603      	mov	r3, r0
 80165be:	4a17      	ldr	r2, [pc, #92]	; (801661c <find_volume+0x4f8>)
 80165c0:	4293      	cmp	r3, r2
 80165c2:	d113      	bne.n	80165ec <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80165c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165c6:	3338      	adds	r3, #56	; 0x38
 80165c8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80165cc:	4618      	mov	r0, r3
 80165ce:	f7fe f8ad 	bl	801472c <ld_dword>
 80165d2:	4602      	mov	r2, r0
 80165d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80165d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165da:	3338      	adds	r3, #56	; 0x38
 80165dc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80165e0:	4618      	mov	r0, r3
 80165e2:	f7fe f8a3 	bl	801472c <ld_dword>
 80165e6:	4602      	mov	r2, r0
 80165e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ea:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80165ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80165f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80165f4:	4b0a      	ldr	r3, [pc, #40]	; (8016620 <find_volume+0x4fc>)
 80165f6:	881b      	ldrh	r3, [r3, #0]
 80165f8:	3301      	adds	r3, #1
 80165fa:	b29a      	uxth	r2, r3
 80165fc:	4b08      	ldr	r3, [pc, #32]	; (8016620 <find_volume+0x4fc>)
 80165fe:	801a      	strh	r2, [r3, #0]
 8016600:	4b07      	ldr	r3, [pc, #28]	; (8016620 <find_volume+0x4fc>)
 8016602:	881a      	ldrh	r2, [r3, #0]
 8016604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016606:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8016608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801660a:	4a06      	ldr	r2, [pc, #24]	; (8016624 <find_volume+0x500>)
 801660c:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 801660e:	2300      	movs	r3, #0
}
 8016610:	4618      	mov	r0, r3
 8016612:	3758      	adds	r7, #88	; 0x58
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}
 8016618:	41615252 	.word	0x41615252
 801661c:	61417272 	.word	0x61417272
 8016620:	2000380c 	.word	0x2000380c
 8016624:	20003810 	.word	0x20003810

08016628 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b084      	sub	sp, #16
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
 8016630:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016632:	2309      	movs	r3, #9
 8016634:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d01c      	beq.n	8016676 <validate+0x4e>
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d018      	beq.n	8016676 <validate+0x4e>
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	781b      	ldrb	r3, [r3, #0]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d013      	beq.n	8016676 <validate+0x4e>
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	889a      	ldrh	r2, [r3, #4]
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	88db      	ldrh	r3, [r3, #6]
 8016658:	429a      	cmp	r2, r3
 801665a:	d10c      	bne.n	8016676 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	785b      	ldrb	r3, [r3, #1]
 8016662:	4618      	mov	r0, r3
 8016664:	f7fd ffac 	bl	80145c0 <disk_status>
 8016668:	4603      	mov	r3, r0
 801666a:	f003 0301 	and.w	r3, r3, #1
 801666e:	2b00      	cmp	r3, #0
 8016670:	d101      	bne.n	8016676 <validate+0x4e>
			res = FR_OK;
 8016672:	2300      	movs	r3, #0
 8016674:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016676:	7bfb      	ldrb	r3, [r7, #15]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d102      	bne.n	8016682 <validate+0x5a>
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	e000      	b.n	8016684 <validate+0x5c>
 8016682:	2300      	movs	r3, #0
 8016684:	683a      	ldr	r2, [r7, #0]
 8016686:	6013      	str	r3, [r2, #0]
	return res;
 8016688:	7bfb      	ldrb	r3, [r7, #15]
}
 801668a:	4618      	mov	r0, r3
 801668c:	3710      	adds	r7, #16
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}
	...

08016694 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b088      	sub	sp, #32
 8016698:	af00      	add	r7, sp, #0
 801669a:	60f8      	str	r0, [r7, #12]
 801669c:	60b9      	str	r1, [r7, #8]
 801669e:	4613      	mov	r3, r2
 80166a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80166a2:	68bb      	ldr	r3, [r7, #8]
 80166a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80166a6:	f107 0310 	add.w	r3, r7, #16
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7ff fca0 	bl	8015ff0 <get_ldnumber>
 80166b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80166b2:	69fb      	ldr	r3, [r7, #28]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	da01      	bge.n	80166bc <f_mount+0x28>
 80166b8:	230b      	movs	r3, #11
 80166ba:	e028      	b.n	801670e <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80166bc:	4a16      	ldr	r2, [pc, #88]	; (8016718 <f_mount+0x84>)
 80166be:	69fb      	ldr	r3, [r7, #28]
 80166c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80166c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80166c6:	69bb      	ldr	r3, [r7, #24]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d002      	beq.n	80166d2 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80166cc:	69bb      	ldr	r3, [r7, #24]
 80166ce:	2200      	movs	r2, #0
 80166d0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d002      	beq.n	80166de <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	2200      	movs	r2, #0
 80166dc:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80166de:	68fa      	ldr	r2, [r7, #12]
 80166e0:	490d      	ldr	r1, [pc, #52]	; (8016718 <f_mount+0x84>)
 80166e2:	69fb      	ldr	r3, [r7, #28]
 80166e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d002      	beq.n	80166f4 <f_mount+0x60>
 80166ee:	79fb      	ldrb	r3, [r7, #7]
 80166f0:	2b01      	cmp	r3, #1
 80166f2:	d001      	beq.n	80166f8 <f_mount+0x64>
 80166f4:	2300      	movs	r3, #0
 80166f6:	e00a      	b.n	801670e <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80166f8:	f107 010c 	add.w	r1, r7, #12
 80166fc:	f107 0308 	add.w	r3, r7, #8
 8016700:	2200      	movs	r2, #0
 8016702:	4618      	mov	r0, r3
 8016704:	f7ff fd0e 	bl	8016124 <find_volume>
 8016708:	4603      	mov	r3, r0
 801670a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801670c:	7dfb      	ldrb	r3, [r7, #23]
}
 801670e:	4618      	mov	r0, r3
 8016710:	3720      	adds	r7, #32
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	20003808 	.word	0x20003808

0801671c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b098      	sub	sp, #96	; 0x60
 8016720:	af00      	add	r7, sp, #0
 8016722:	60f8      	str	r0, [r7, #12]
 8016724:	60b9      	str	r1, [r7, #8]
 8016726:	4613      	mov	r3, r2
 8016728:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d101      	bne.n	8016734 <f_open+0x18>
 8016730:	2309      	movs	r3, #9
 8016732:	e188      	b.n	8016a46 <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016734:	79fb      	ldrb	r3, [r7, #7]
 8016736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801673a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801673c:	79fa      	ldrb	r2, [r7, #7]
 801673e:	f107 0110 	add.w	r1, r7, #16
 8016742:	f107 0308 	add.w	r3, r7, #8
 8016746:	4618      	mov	r0, r3
 8016748:	f7ff fcec 	bl	8016124 <find_volume>
 801674c:	4603      	mov	r3, r0
 801674e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8016752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016756:	2b00      	cmp	r3, #0
 8016758:	f040 816c 	bne.w	8016a34 <f_open+0x318>
		dj.obj.fs = fs;
 801675c:	693b      	ldr	r3, [r7, #16]
 801675e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016760:	68ba      	ldr	r2, [r7, #8]
 8016762:	f107 0314 	add.w	r3, r7, #20
 8016766:	4611      	mov	r1, r2
 8016768:	4618      	mov	r0, r3
 801676a:	f7ff fbcb 	bl	8015f04 <follow_path>
 801676e:	4603      	mov	r3, r0
 8016770:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016778:	2b00      	cmp	r3, #0
 801677a:	d107      	bne.n	801678c <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801677c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016780:	b25b      	sxtb	r3, r3
 8016782:	2b00      	cmp	r3, #0
 8016784:	da02      	bge.n	801678c <f_open+0x70>
				res = FR_INVALID_NAME;
 8016786:	2306      	movs	r3, #6
 8016788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801678c:	79fb      	ldrb	r3, [r7, #7]
 801678e:	f003 031c 	and.w	r3, r3, #28
 8016792:	2b00      	cmp	r3, #0
 8016794:	d078      	beq.n	8016888 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8016796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801679a:	2b00      	cmp	r3, #0
 801679c:	d010      	beq.n	80167c0 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801679e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80167a2:	2b04      	cmp	r3, #4
 80167a4:	d107      	bne.n	80167b6 <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80167a6:	f107 0314 	add.w	r3, r7, #20
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7ff f8fa 	bl	80159a4 <dir_register>
 80167b0:	4603      	mov	r3, r0
 80167b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80167b6:	79fb      	ldrb	r3, [r7, #7]
 80167b8:	f043 0308 	orr.w	r3, r3, #8
 80167bc:	71fb      	strb	r3, [r7, #7]
 80167be:	e010      	b.n	80167e2 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80167c0:	7ebb      	ldrb	r3, [r7, #26]
 80167c2:	f003 0311 	and.w	r3, r3, #17
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d003      	beq.n	80167d2 <f_open+0xb6>
					res = FR_DENIED;
 80167ca:	2307      	movs	r3, #7
 80167cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80167d0:	e007      	b.n	80167e2 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80167d2:	79fb      	ldrb	r3, [r7, #7]
 80167d4:	f003 0304 	and.w	r3, r3, #4
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d002      	beq.n	80167e2 <f_open+0xc6>
 80167dc:	2308      	movs	r3, #8
 80167de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80167e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d168      	bne.n	80168bc <f_open+0x1a0>
 80167ea:	79fb      	ldrb	r3, [r7, #7]
 80167ec:	f003 0308 	and.w	r3, r3, #8
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d063      	beq.n	80168bc <f_open+0x1a0>
				dw = GET_FATTIME();
 80167f4:	f7fa fd3c 	bl	8011270 <get_fattime>
 80167f8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80167fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167fc:	330e      	adds	r3, #14
 80167fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016800:	4618      	mov	r0, r3
 8016802:	f7fd ffd1 	bl	80147a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016808:	3316      	adds	r3, #22
 801680a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801680c:	4618      	mov	r0, r3
 801680e:	f7fd ffcb 	bl	80147a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016814:	330b      	adds	r3, #11
 8016816:	2220      	movs	r2, #32
 8016818:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801681a:	693b      	ldr	r3, [r7, #16]
 801681c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801681e:	4611      	mov	r1, r2
 8016820:	4618      	mov	r0, r3
 8016822:	f7fe fe37 	bl	8015494 <ld_clust>
 8016826:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801682c:	2200      	movs	r2, #0
 801682e:	4618      	mov	r0, r3
 8016830:	f7fe fe4f 	bl	80154d2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016836:	331c      	adds	r3, #28
 8016838:	2100      	movs	r1, #0
 801683a:	4618      	mov	r0, r3
 801683c:	f7fd ffb4 	bl	80147a8 <st_dword>
					fs->wflag = 1;
 8016840:	693b      	ldr	r3, [r7, #16]
 8016842:	2201      	movs	r2, #1
 8016844:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016848:	2b00      	cmp	r3, #0
 801684a:	d037      	beq.n	80168bc <f_open+0x1a0>
						dw = fs->winsect;
 801684c:	693b      	ldr	r3, [r7, #16]
 801684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016850:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8016852:	f107 0314 	add.w	r3, r7, #20
 8016856:	2200      	movs	r2, #0
 8016858:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801685a:	4618      	mov	r0, r3
 801685c:	f7fe fb3f 	bl	8014ede <remove_chain>
 8016860:	4603      	mov	r3, r0
 8016862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8016866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801686a:	2b00      	cmp	r3, #0
 801686c:	d126      	bne.n	80168bc <f_open+0x1a0>
							res = move_window(fs, dw);
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016872:	4618      	mov	r0, r3
 8016874:	f7fe f886 	bl	8014984 <move_window>
 8016878:	4603      	mov	r3, r0
 801687a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801687e:	693b      	ldr	r3, [r7, #16]
 8016880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016882:	3a01      	subs	r2, #1
 8016884:	615a      	str	r2, [r3, #20]
 8016886:	e019      	b.n	80168bc <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801688c:	2b00      	cmp	r3, #0
 801688e:	d115      	bne.n	80168bc <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016890:	7ebb      	ldrb	r3, [r7, #26]
 8016892:	f003 0310 	and.w	r3, r3, #16
 8016896:	2b00      	cmp	r3, #0
 8016898:	d003      	beq.n	80168a2 <f_open+0x186>
					res = FR_NO_FILE;
 801689a:	2304      	movs	r3, #4
 801689c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80168a0:	e00c      	b.n	80168bc <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80168a2:	79fb      	ldrb	r3, [r7, #7]
 80168a4:	f003 0302 	and.w	r3, r3, #2
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d007      	beq.n	80168bc <f_open+0x1a0>
 80168ac:	7ebb      	ldrb	r3, [r7, #26]
 80168ae:	f003 0301 	and.w	r3, r3, #1
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d002      	beq.n	80168bc <f_open+0x1a0>
						res = FR_DENIED;
 80168b6:	2307      	movs	r3, #7
 80168b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80168bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d10f      	bne.n	80168e4 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80168c4:	79fb      	ldrb	r3, [r7, #7]
 80168c6:	f003 0308 	and.w	r3, r3, #8
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d003      	beq.n	80168d6 <f_open+0x1ba>
				mode |= FA_MODIFIED;
 80168ce:	79fb      	ldrb	r3, [r7, #7]
 80168d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80168d4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80168d6:	693b      	ldr	r3, [r7, #16]
 80168d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80168de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80168e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	f040 80a3 	bne.w	8016a34 <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168f2:	4611      	mov	r1, r2
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7fe fdcd 	bl	8015494 <ld_clust>
 80168fa:	4602      	mov	r2, r0
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016902:	331c      	adds	r3, #28
 8016904:	4618      	mov	r0, r3
 8016906:	f7fd ff11 	bl	801472c <ld_dword>
 801690a:	4602      	mov	r2, r0
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	2200      	movs	r2, #0
 8016914:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016916:	693a      	ldr	r2, [r7, #16]
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	88da      	ldrh	r2, [r3, #6]
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	79fa      	ldrb	r2, [r7, #7]
 8016928:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	2200      	movs	r2, #0
 801692e:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	2200      	movs	r2, #0
 8016934:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	2200      	movs	r2, #0
 801693a:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	332c      	adds	r3, #44	; 0x2c
 8016940:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016944:	2100      	movs	r1, #0
 8016946:	4618      	mov	r0, r3
 8016948:	f7fd ff7b 	bl	8014842 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801694c:	79fb      	ldrb	r3, [r7, #7]
 801694e:	f003 0320 	and.w	r3, r3, #32
 8016952:	2b00      	cmp	r3, #0
 8016954:	d06e      	beq.n	8016a34 <f_open+0x318>
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	68db      	ldr	r3, [r3, #12]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d06a      	beq.n	8016a34 <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	68da      	ldr	r2, [r3, #12]
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016966:	693b      	ldr	r3, [r7, #16]
 8016968:	895b      	ldrh	r3, [r3, #10]
 801696a:	461a      	mov	r2, r3
 801696c:	693b      	ldr	r3, [r7, #16]
 801696e:	899b      	ldrh	r3, [r3, #12]
 8016970:	fb02 f303 	mul.w	r3, r2, r3
 8016974:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	689b      	ldr	r3, [r3, #8]
 801697a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	68db      	ldr	r3, [r3, #12]
 8016980:	657b      	str	r3, [r7, #84]	; 0x54
 8016982:	e016      	b.n	80169b2 <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016988:	4618      	mov	r0, r3
 801698a:	f7fe f8b8 	bl	8014afe <get_fat>
 801698e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016992:	2b01      	cmp	r3, #1
 8016994:	d802      	bhi.n	801699c <f_open+0x280>
 8016996:	2302      	movs	r3, #2
 8016998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801699c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801699e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169a2:	d102      	bne.n	80169aa <f_open+0x28e>
 80169a4:	2301      	movs	r3, #1
 80169a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80169aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80169ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80169ae:	1ad3      	subs	r3, r2, r3
 80169b0:	657b      	str	r3, [r7, #84]	; 0x54
 80169b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d103      	bne.n	80169c2 <f_open+0x2a6>
 80169ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80169bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80169be:	429a      	cmp	r2, r3
 80169c0:	d8e0      	bhi.n	8016984 <f_open+0x268>
				}
				fp->clust = clst;
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80169c6:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80169c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d131      	bne.n	8016a34 <f_open+0x318>
 80169d0:	693b      	ldr	r3, [r7, #16]
 80169d2:	899b      	ldrh	r3, [r3, #12]
 80169d4:	461a      	mov	r2, r3
 80169d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80169dc:	fb01 f202 	mul.w	r2, r1, r2
 80169e0:	1a9b      	subs	r3, r3, r2
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d026      	beq.n	8016a34 <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80169e6:	693b      	ldr	r3, [r7, #16]
 80169e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7fe f868 	bl	8014ac0 <clust2sect>
 80169f0:	6478      	str	r0, [r7, #68]	; 0x44
 80169f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d103      	bne.n	8016a00 <f_open+0x2e4>
						res = FR_INT_ERR;
 80169f8:	2302      	movs	r3, #2
 80169fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80169fe:	e019      	b.n	8016a34 <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016a00:	693b      	ldr	r3, [r7, #16]
 8016a02:	899b      	ldrh	r3, [r3, #12]
 8016a04:	461a      	mov	r2, r3
 8016a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a08:	fbb3 f2f2 	udiv	r2, r3, r2
 8016a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a0e:	441a      	add	r2, r3
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016a14:	693b      	ldr	r3, [r7, #16]
 8016a16:	7858      	ldrb	r0, [r3, #1]
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	69da      	ldr	r2, [r3, #28]
 8016a22:	2301      	movs	r3, #1
 8016a24:	f7fd fe0c 	bl	8014640 <disk_read>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d002      	beq.n	8016a34 <f_open+0x318>
 8016a2e:	2301      	movs	r3, #1
 8016a30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016a34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d002      	beq.n	8016a42 <f_open+0x326>
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	2200      	movs	r2, #0
 8016a40:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8016a46:	4618      	mov	r0, r3
 8016a48:	3760      	adds	r7, #96	; 0x60
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	bd80      	pop	{r7, pc}

08016a4e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016a4e:	b580      	push	{r7, lr}
 8016a50:	b08c      	sub	sp, #48	; 0x30
 8016a52:	af00      	add	r7, sp, #0
 8016a54:	60f8      	str	r0, [r7, #12]
 8016a56:	60b9      	str	r1, [r7, #8]
 8016a58:	607a      	str	r2, [r7, #4]
 8016a5a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016a5c:	68bb      	ldr	r3, [r7, #8]
 8016a5e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	2200      	movs	r2, #0
 8016a64:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	f107 0210 	add.w	r2, r7, #16
 8016a6c:	4611      	mov	r1, r2
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f7ff fdda 	bl	8016628 <validate>
 8016a74:	4603      	mov	r3, r0
 8016a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d107      	bne.n	8016a92 <f_write+0x44>
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	7c5b      	ldrb	r3, [r3, #17]
 8016a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d002      	beq.n	8016a98 <f_write+0x4a>
 8016a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a96:	e16a      	b.n	8016d6e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	7c1b      	ldrb	r3, [r3, #16]
 8016a9c:	f003 0302 	and.w	r3, r3, #2
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d101      	bne.n	8016aa8 <f_write+0x5a>
 8016aa4:	2307      	movs	r3, #7
 8016aa6:	e162      	b.n	8016d6e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	695a      	ldr	r2, [r3, #20]
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	441a      	add	r2, r3
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	695b      	ldr	r3, [r3, #20]
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	f080 814c 	bcs.w	8016d52 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	695b      	ldr	r3, [r3, #20]
 8016abe:	43db      	mvns	r3, r3
 8016ac0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016ac2:	e146      	b.n	8016d52 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	695b      	ldr	r3, [r3, #20]
 8016ac8:	693a      	ldr	r2, [r7, #16]
 8016aca:	8992      	ldrh	r2, [r2, #12]
 8016acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8016ad0:	fb01 f202 	mul.w	r2, r1, r2
 8016ad4:	1a9b      	subs	r3, r3, r2
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	f040 80f1 	bne.w	8016cbe <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	695b      	ldr	r3, [r3, #20]
 8016ae0:	693a      	ldr	r2, [r7, #16]
 8016ae2:	8992      	ldrh	r2, [r2, #12]
 8016ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ae8:	693a      	ldr	r2, [r7, #16]
 8016aea:	8952      	ldrh	r2, [r2, #10]
 8016aec:	3a01      	subs	r2, #1
 8016aee:	4013      	ands	r3, r2
 8016af0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016af2:	69bb      	ldr	r3, [r7, #24]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d143      	bne.n	8016b80 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	695b      	ldr	r3, [r3, #20]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d10c      	bne.n	8016b1a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	689b      	ldr	r3, [r3, #8]
 8016b04:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d11a      	bne.n	8016b42 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	2100      	movs	r1, #0
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7fe fa49 	bl	8014fa8 <create_chain>
 8016b16:	62b8      	str	r0, [r7, #40]	; 0x28
 8016b18:	e013      	b.n	8016b42 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d007      	beq.n	8016b32 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	695b      	ldr	r3, [r3, #20]
 8016b26:	4619      	mov	r1, r3
 8016b28:	68f8      	ldr	r0, [r7, #12]
 8016b2a:	f7fe fad5 	bl	80150d8 <clmt_clust>
 8016b2e:	62b8      	str	r0, [r7, #40]	; 0x28
 8016b30:	e007      	b.n	8016b42 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016b32:	68fa      	ldr	r2, [r7, #12]
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	699b      	ldr	r3, [r3, #24]
 8016b38:	4619      	mov	r1, r3
 8016b3a:	4610      	mov	r0, r2
 8016b3c:	f7fe fa34 	bl	8014fa8 <create_chain>
 8016b40:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	f000 8109 	beq.w	8016d5c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b4c:	2b01      	cmp	r3, #1
 8016b4e:	d104      	bne.n	8016b5a <f_write+0x10c>
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	2202      	movs	r2, #2
 8016b54:	745a      	strb	r2, [r3, #17]
 8016b56:	2302      	movs	r3, #2
 8016b58:	e109      	b.n	8016d6e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b60:	d104      	bne.n	8016b6c <f_write+0x11e>
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	2201      	movs	r2, #1
 8016b66:	745a      	strb	r2, [r3, #17]
 8016b68:	2301      	movs	r3, #1
 8016b6a:	e100      	b.n	8016d6e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b70:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	689b      	ldr	r3, [r3, #8]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d102      	bne.n	8016b80 <f_write+0x132>
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b7e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	7c1b      	ldrb	r3, [r3, #16]
 8016b84:	b25b      	sxtb	r3, r3
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	da18      	bge.n	8016bbc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	7858      	ldrb	r0, [r3, #1]
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	69da      	ldr	r2, [r3, #28]
 8016b98:	2301      	movs	r3, #1
 8016b9a:	f7fd fd71 	bl	8014680 <disk_write>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d004      	beq.n	8016bae <f_write+0x160>
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	2201      	movs	r2, #1
 8016ba8:	745a      	strb	r2, [r3, #17]
 8016baa:	2301      	movs	r3, #1
 8016bac:	e0df      	b.n	8016d6e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	7c1b      	ldrb	r3, [r3, #16]
 8016bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016bb6:	b2da      	uxtb	r2, r3
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016bbc:	693a      	ldr	r2, [r7, #16]
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	699b      	ldr	r3, [r3, #24]
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	4610      	mov	r0, r2
 8016bc6:	f7fd ff7b 	bl	8014ac0 <clust2sect>
 8016bca:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016bcc:	697b      	ldr	r3, [r7, #20]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d104      	bne.n	8016bdc <f_write+0x18e>
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	2202      	movs	r2, #2
 8016bd6:	745a      	strb	r2, [r3, #17]
 8016bd8:	2302      	movs	r3, #2
 8016bda:	e0c8      	b.n	8016d6e <f_write+0x320>
			sect += csect;
 8016bdc:	697a      	ldr	r2, [r7, #20]
 8016bde:	69bb      	ldr	r3, [r7, #24]
 8016be0:	4413      	add	r3, r2
 8016be2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016be4:	693b      	ldr	r3, [r7, #16]
 8016be6:	899b      	ldrh	r3, [r3, #12]
 8016be8:	461a      	mov	r2, r3
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8016bf0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016bf2:	6a3b      	ldr	r3, [r7, #32]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d043      	beq.n	8016c80 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016bf8:	69ba      	ldr	r2, [r7, #24]
 8016bfa:	6a3b      	ldr	r3, [r7, #32]
 8016bfc:	4413      	add	r3, r2
 8016bfe:	693a      	ldr	r2, [r7, #16]
 8016c00:	8952      	ldrh	r2, [r2, #10]
 8016c02:	4293      	cmp	r3, r2
 8016c04:	d905      	bls.n	8016c12 <f_write+0x1c4>
					cc = fs->csize - csect;
 8016c06:	693b      	ldr	r3, [r7, #16]
 8016c08:	895b      	ldrh	r3, [r3, #10]
 8016c0a:	461a      	mov	r2, r3
 8016c0c:	69bb      	ldr	r3, [r7, #24]
 8016c0e:	1ad3      	subs	r3, r2, r3
 8016c10:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016c12:	693b      	ldr	r3, [r7, #16]
 8016c14:	7858      	ldrb	r0, [r3, #1]
 8016c16:	6a3b      	ldr	r3, [r7, #32]
 8016c18:	697a      	ldr	r2, [r7, #20]
 8016c1a:	69f9      	ldr	r1, [r7, #28]
 8016c1c:	f7fd fd30 	bl	8014680 <disk_write>
 8016c20:	4603      	mov	r3, r0
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d004      	beq.n	8016c30 <f_write+0x1e2>
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2201      	movs	r2, #1
 8016c2a:	745a      	strb	r2, [r3, #17]
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	e09e      	b.n	8016d6e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	69da      	ldr	r2, [r3, #28]
 8016c34:	697b      	ldr	r3, [r7, #20]
 8016c36:	1ad3      	subs	r3, r2, r3
 8016c38:	6a3a      	ldr	r2, [r7, #32]
 8016c3a:	429a      	cmp	r2, r3
 8016c3c:	d918      	bls.n	8016c70 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	69da      	ldr	r2, [r3, #28]
 8016c48:	697b      	ldr	r3, [r7, #20]
 8016c4a:	1ad3      	subs	r3, r2, r3
 8016c4c:	693a      	ldr	r2, [r7, #16]
 8016c4e:	8992      	ldrh	r2, [r2, #12]
 8016c50:	fb02 f303 	mul.w	r3, r2, r3
 8016c54:	69fa      	ldr	r2, [r7, #28]
 8016c56:	18d1      	adds	r1, r2, r3
 8016c58:	693b      	ldr	r3, [r7, #16]
 8016c5a:	899b      	ldrh	r3, [r3, #12]
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	f7fd fdcf 	bl	8014800 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	7c1b      	ldrb	r3, [r3, #16]
 8016c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c6a:	b2da      	uxtb	r2, r3
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016c70:	693b      	ldr	r3, [r7, #16]
 8016c72:	899b      	ldrh	r3, [r3, #12]
 8016c74:	461a      	mov	r2, r3
 8016c76:	6a3b      	ldr	r3, [r7, #32]
 8016c78:	fb02 f303 	mul.w	r3, r2, r3
 8016c7c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016c7e:	e04b      	b.n	8016d18 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	69db      	ldr	r3, [r3, #28]
 8016c84:	697a      	ldr	r2, [r7, #20]
 8016c86:	429a      	cmp	r2, r3
 8016c88:	d016      	beq.n	8016cb8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	695a      	ldr	r2, [r3, #20]
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d210      	bcs.n	8016cb8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016c96:	693b      	ldr	r3, [r7, #16]
 8016c98:	7858      	ldrb	r0, [r3, #1]
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016ca0:	2301      	movs	r3, #1
 8016ca2:	697a      	ldr	r2, [r7, #20]
 8016ca4:	f7fd fccc 	bl	8014640 <disk_read>
 8016ca8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d004      	beq.n	8016cb8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	2201      	movs	r2, #1
 8016cb2:	745a      	strb	r2, [r3, #17]
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	e05a      	b.n	8016d6e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	697a      	ldr	r2, [r7, #20]
 8016cbc:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	899b      	ldrh	r3, [r3, #12]
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	695b      	ldr	r3, [r3, #20]
 8016cc8:	693a      	ldr	r2, [r7, #16]
 8016cca:	8992      	ldrh	r2, [r2, #12]
 8016ccc:	fbb3 f1f2 	udiv	r1, r3, r2
 8016cd0:	fb01 f202 	mul.w	r2, r1, r2
 8016cd4:	1a9b      	subs	r3, r3, r2
 8016cd6:	1ac3      	subs	r3, r0, r3
 8016cd8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	429a      	cmp	r2, r3
 8016ce0:	d901      	bls.n	8016ce6 <f_write+0x298>
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	695b      	ldr	r3, [r3, #20]
 8016cf0:	693a      	ldr	r2, [r7, #16]
 8016cf2:	8992      	ldrh	r2, [r2, #12]
 8016cf4:	fbb3 f0f2 	udiv	r0, r3, r2
 8016cf8:	fb00 f202 	mul.w	r2, r0, r2
 8016cfc:	1a9b      	subs	r3, r3, r2
 8016cfe:	440b      	add	r3, r1
 8016d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d02:	69f9      	ldr	r1, [r7, #28]
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7fd fd7b 	bl	8014800 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	7c1b      	ldrb	r3, [r3, #16]
 8016d0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016d12:	b2da      	uxtb	r2, r3
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016d18:	69fa      	ldr	r2, [r7, #28]
 8016d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1c:	4413      	add	r3, r2
 8016d1e:	61fb      	str	r3, [r7, #28]
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	695a      	ldr	r2, [r3, #20]
 8016d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d26:	441a      	add	r2, r3
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	615a      	str	r2, [r3, #20]
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	68da      	ldr	r2, [r3, #12]
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	695b      	ldr	r3, [r3, #20]
 8016d34:	429a      	cmp	r2, r3
 8016d36:	bf38      	it	cc
 8016d38:	461a      	movcc	r2, r3
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	60da      	str	r2, [r3, #12]
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	681a      	ldr	r2, [r3, #0]
 8016d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d44:	441a      	add	r2, r3
 8016d46:	683b      	ldr	r3, [r7, #0]
 8016d48:	601a      	str	r2, [r3, #0]
 8016d4a:	687a      	ldr	r2, [r7, #4]
 8016d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4e:	1ad3      	subs	r3, r2, r3
 8016d50:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	f47f aeb5 	bne.w	8016ac4 <f_write+0x76>
 8016d5a:	e000      	b.n	8016d5e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016d5c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	7c1b      	ldrb	r3, [r3, #16]
 8016d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d66:	b2da      	uxtb	r2, r3
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8016d6c:	2300      	movs	r3, #0
}
 8016d6e:	4618      	mov	r0, r3
 8016d70:	3730      	adds	r7, #48	; 0x30
 8016d72:	46bd      	mov	sp, r7
 8016d74:	bd80      	pop	{r7, pc}

08016d76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016d76:	b580      	push	{r7, lr}
 8016d78:	b086      	sub	sp, #24
 8016d7a:	af00      	add	r7, sp, #0
 8016d7c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f107 0208 	add.w	r2, r7, #8
 8016d84:	4611      	mov	r1, r2
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7ff fc4e 	bl	8016628 <validate>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016d90:	7dfb      	ldrb	r3, [r7, #23]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d168      	bne.n	8016e68 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	7c1b      	ldrb	r3, [r3, #16]
 8016d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d062      	beq.n	8016e68 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	7c1b      	ldrb	r3, [r3, #16]
 8016da6:	b25b      	sxtb	r3, r3
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	da15      	bge.n	8016dd8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016dac:	68bb      	ldr	r3, [r7, #8]
 8016dae:	7858      	ldrb	r0, [r3, #1]
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	69da      	ldr	r2, [r3, #28]
 8016dba:	2301      	movs	r3, #1
 8016dbc:	f7fd fc60 	bl	8014680 <disk_write>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d001      	beq.n	8016dca <f_sync+0x54>
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	e04f      	b.n	8016e6a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	7c1b      	ldrb	r3, [r3, #16]
 8016dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016dd2:	b2da      	uxtb	r2, r3
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8016dd8:	f7fa fa4a 	bl	8011270 <get_fattime>
 8016ddc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8016dde:	68ba      	ldr	r2, [r7, #8]
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	6a1b      	ldr	r3, [r3, #32]
 8016de4:	4619      	mov	r1, r3
 8016de6:	4610      	mov	r0, r2
 8016de8:	f7fd fdcc 	bl	8014984 <move_window>
 8016dec:	4603      	mov	r3, r0
 8016dee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8016df0:	7dfb      	ldrb	r3, [r7, #23]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d138      	bne.n	8016e68 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dfa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	330b      	adds	r3, #11
 8016e00:	781a      	ldrb	r2, [r3, #0]
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	330b      	adds	r3, #11
 8016e06:	f042 0220 	orr.w	r2, r2, #32
 8016e0a:	b2d2      	uxtb	r2, r2
 8016e0c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	6818      	ldr	r0, [r3, #0]
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	689b      	ldr	r3, [r3, #8]
 8016e16:	461a      	mov	r2, r3
 8016e18:	68f9      	ldr	r1, [r7, #12]
 8016e1a:	f7fe fb5a 	bl	80154d2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	f103 021c 	add.w	r2, r3, #28
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	68db      	ldr	r3, [r3, #12]
 8016e28:	4619      	mov	r1, r3
 8016e2a:	4610      	mov	r0, r2
 8016e2c:	f7fd fcbc 	bl	80147a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	3316      	adds	r3, #22
 8016e34:	6939      	ldr	r1, [r7, #16]
 8016e36:	4618      	mov	r0, r3
 8016e38:	f7fd fcb6 	bl	80147a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	3312      	adds	r3, #18
 8016e40:	2100      	movs	r1, #0
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7fd fc95 	bl	8014772 <st_word>
					fs->wflag = 1;
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	2201      	movs	r2, #1
 8016e4c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016e4e:	68bb      	ldr	r3, [r7, #8]
 8016e50:	4618      	mov	r0, r3
 8016e52:	f7fd fdc5 	bl	80149e0 <sync_fs>
 8016e56:	4603      	mov	r3, r0
 8016e58:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	7c1b      	ldrb	r3, [r3, #16]
 8016e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016e62:	b2da      	uxtb	r2, r3
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8016e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	3718      	adds	r7, #24
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}

08016e72 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016e72:	b580      	push	{r7, lr}
 8016e74:	b084      	sub	sp, #16
 8016e76:	af00      	add	r7, sp, #0
 8016e78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	f7ff ff7b 	bl	8016d76 <f_sync>
 8016e80:	4603      	mov	r3, r0
 8016e82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8016e84:	7bfb      	ldrb	r3, [r7, #15]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d10e      	bne.n	8016ea8 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	f107 0208 	add.w	r2, r7, #8
 8016e90:	4611      	mov	r1, r2
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7ff fbc8 	bl	8016628 <validate>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016e9c:	7bfb      	ldrb	r3, [r7, #15]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d102      	bne.n	8016ea8 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8016ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	3710      	adds	r7, #16
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd80      	pop	{r7, pc}

08016eb2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8016eb2:	b580      	push	{r7, lr}
 8016eb4:	b086      	sub	sp, #24
 8016eb6:	af00      	add	r7, sp, #0
 8016eb8:	6078      	str	r0, [r7, #4]
 8016eba:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d101      	bne.n	8016ec6 <f_opendir+0x14>
 8016ec2:	2309      	movs	r3, #9
 8016ec4:	e04c      	b.n	8016f60 <f_opendir+0xae>

	/* Get logical drive */
	obj = &dp->obj;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8016eca:	f107 010c 	add.w	r1, r7, #12
 8016ece:	463b      	mov	r3, r7
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	f7ff f926 	bl	8016124 <find_volume>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016edc:	7dfb      	ldrb	r3, [r7, #23]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d137      	bne.n	8016f52 <f_opendir+0xa0>
		obj->fs = fs;
 8016ee2:	68fa      	ldr	r2, [r7, #12]
 8016ee4:	693b      	ldr	r3, [r7, #16]
 8016ee6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	4619      	mov	r1, r3
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f7ff f809 	bl	8015f04 <follow_path>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8016ef6:	7dfb      	ldrb	r3, [r7, #23]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d125      	bne.n	8016f48 <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016f02:	b25b      	sxtb	r3, r3
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	db12      	blt.n	8016f2e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8016f08:	693b      	ldr	r3, [r7, #16]
 8016f0a:	799b      	ldrb	r3, [r3, #6]
 8016f0c:	f003 0310 	and.w	r3, r3, #16
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d00a      	beq.n	8016f2a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016f14:	68fa      	ldr	r2, [r7, #12]
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	69db      	ldr	r3, [r3, #28]
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	4610      	mov	r0, r2
 8016f1e:	f7fe fab9 	bl	8015494 <ld_clust>
 8016f22:	4602      	mov	r2, r0
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	609a      	str	r2, [r3, #8]
 8016f28:	e001      	b.n	8016f2e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8016f2a:	2305      	movs	r3, #5
 8016f2c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8016f2e:	7dfb      	ldrb	r3, [r7, #23]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d109      	bne.n	8016f48 <f_opendir+0x96>
				obj->id = fs->id;
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	88da      	ldrh	r2, [r3, #6]
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016f3c:	2100      	movs	r1, #0
 8016f3e:	6878      	ldr	r0, [r7, #4]
 8016f40:	f7fe f902 	bl	8015148 <dir_sdi>
 8016f44:	4603      	mov	r3, r0
 8016f46:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016f48:	7dfb      	ldrb	r3, [r7, #23]
 8016f4a:	2b04      	cmp	r3, #4
 8016f4c:	d101      	bne.n	8016f52 <f_opendir+0xa0>
 8016f4e:	2305      	movs	r3, #5
 8016f50:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016f52:	7dfb      	ldrb	r3, [r7, #23]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d002      	beq.n	8016f5e <f_opendir+0xac>
 8016f58:	693b      	ldr	r3, [r7, #16]
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	3718      	adds	r7, #24
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}

08016f68 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b084      	sub	sp, #16
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	f107 0208 	add.w	r2, r7, #8
 8016f76:	4611      	mov	r1, r2
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f7ff fb55 	bl	8016628 <validate>
 8016f7e:	4603      	mov	r3, r0
 8016f80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016f82:	7bfb      	ldrb	r3, [r7, #15]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d102      	bne.n	8016f8e <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8016f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	3710      	adds	r7, #16
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}

08016f98 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b096      	sub	sp, #88	; 0x58
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8016fa0:	f107 0108 	add.w	r1, r7, #8
 8016fa4:	1d3b      	adds	r3, r7, #4
 8016fa6:	2202      	movs	r2, #2
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f7ff f8bb 	bl	8016124 <find_volume>
 8016fae:	4603      	mov	r3, r0
 8016fb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8016fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	f040 80f2 	bne.w	80171a6 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8016fc2:	687a      	ldr	r2, [r7, #4]
 8016fc4:	f107 030c 	add.w	r3, r7, #12
 8016fc8:	4611      	mov	r1, r2
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7fe ff9a 	bl	8015f04 <follow_path>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8016fd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d102      	bne.n	8016fe4 <f_mkdir+0x4c>
 8016fde:	2308      	movs	r3, #8
 8016fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8016fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016fe8:	2b04      	cmp	r3, #4
 8016fea:	f040 80dc 	bne.w	80171a6 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016fee:	f107 030c 	add.w	r3, r7, #12
 8016ff2:	2100      	movs	r1, #0
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f7fd ffd7 	bl	8014fa8 <create_chain>
 8016ffa:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016ffc:	68bb      	ldr	r3, [r7, #8]
 8016ffe:	895b      	ldrh	r3, [r3, #10]
 8017000:	461a      	mov	r2, r3
 8017002:	68bb      	ldr	r3, [r7, #8]
 8017004:	899b      	ldrh	r3, [r3, #12]
 8017006:	fb02 f303 	mul.w	r3, r2, r3
 801700a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801700c:	2300      	movs	r3, #0
 801700e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017014:	2b00      	cmp	r3, #0
 8017016:	d102      	bne.n	801701e <f_mkdir+0x86>
 8017018:	2307      	movs	r3, #7
 801701a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801701e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017020:	2b01      	cmp	r3, #1
 8017022:	d102      	bne.n	801702a <f_mkdir+0x92>
 8017024:	2302      	movs	r3, #2
 8017026:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801702a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801702c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017030:	d102      	bne.n	8017038 <f_mkdir+0xa0>
 8017032:	2301      	movs	r3, #1
 8017034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8017038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801703c:	2b00      	cmp	r3, #0
 801703e:	d106      	bne.n	801704e <f_mkdir+0xb6>
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	4618      	mov	r0, r3
 8017044:	f7fd fc5a 	bl	80148fc <sync_window>
 8017048:	4603      	mov	r3, r0
 801704a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 801704e:	f7fa f90f 	bl	8011270 <get_fattime>
 8017052:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8017054:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017058:	2b00      	cmp	r3, #0
 801705a:	d16c      	bne.n	8017136 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017060:	4618      	mov	r0, r3
 8017062:	f7fd fd2d 	bl	8014ac0 <clust2sect>
 8017066:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8017068:	68bb      	ldr	r3, [r7, #8]
 801706a:	3338      	adds	r3, #56	; 0x38
 801706c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	899b      	ldrh	r3, [r3, #12]
 8017072:	461a      	mov	r2, r3
 8017074:	2100      	movs	r1, #0
 8017076:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017078:	f7fd fbe3 	bl	8014842 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801707c:	220b      	movs	r2, #11
 801707e:	2120      	movs	r1, #32
 8017080:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017082:	f7fd fbde 	bl	8014842 <mem_set>
					dir[DIR_Name] = '.';
 8017086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017088:	222e      	movs	r2, #46	; 0x2e
 801708a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801708e:	330b      	adds	r3, #11
 8017090:	2210      	movs	r2, #16
 8017092:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8017094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017096:	3316      	adds	r3, #22
 8017098:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801709a:	4618      	mov	r0, r3
 801709c:	f7fd fb84 	bl	80147a8 <st_dword>
					st_clust(fs, dir, dcl);
 80170a0:	68bb      	ldr	r3, [r7, #8]
 80170a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80170a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80170a6:	4618      	mov	r0, r3
 80170a8:	f7fe fa13 	bl	80154d2 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80170ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170ae:	3320      	adds	r3, #32
 80170b0:	2220      	movs	r2, #32
 80170b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80170b4:	4618      	mov	r0, r3
 80170b6:	f7fd fba3 	bl	8014800 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80170ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170bc:	3321      	adds	r3, #33	; 0x21
 80170be:	222e      	movs	r2, #46	; 0x2e
 80170c0:	701a      	strb	r2, [r3, #0]
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	781b      	ldrb	r3, [r3, #0]
 80170ca:	2b03      	cmp	r3, #3
 80170cc:	d106      	bne.n	80170dc <f_mkdir+0x144>
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80170d4:	429a      	cmp	r2, r3
 80170d6:	d101      	bne.n	80170dc <f_mkdir+0x144>
 80170d8:	2300      	movs	r3, #0
 80170da:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80170dc:	68b8      	ldr	r0, [r7, #8]
 80170de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170e0:	3320      	adds	r3, #32
 80170e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80170e4:	4619      	mov	r1, r3
 80170e6:	f7fe f9f4 	bl	80154d2 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	895b      	ldrh	r3, [r3, #10]
 80170ee:	653b      	str	r3, [r7, #80]	; 0x50
 80170f0:	e01c      	b.n	801712c <f_mkdir+0x194>
					fs->winsect = dsc++;
 80170f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170f4:	1c5a      	adds	r2, r3, #1
 80170f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80170f8:	68ba      	ldr	r2, [r7, #8]
 80170fa:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	2201      	movs	r2, #1
 8017100:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	4618      	mov	r0, r3
 8017106:	f7fd fbf9 	bl	80148fc <sync_window>
 801710a:	4603      	mov	r3, r0
 801710c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8017110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017114:	2b00      	cmp	r3, #0
 8017116:	d10d      	bne.n	8017134 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	899b      	ldrh	r3, [r3, #12]
 801711c:	461a      	mov	r2, r3
 801711e:	2100      	movs	r1, #0
 8017120:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017122:	f7fd fb8e 	bl	8014842 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017128:	3b01      	subs	r3, #1
 801712a:	653b      	str	r3, [r7, #80]	; 0x50
 801712c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801712e:	2b00      	cmp	r3, #0
 8017130:	d1df      	bne.n	80170f2 <f_mkdir+0x15a>
 8017132:	e000      	b.n	8017136 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8017134:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8017136:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801713a:	2b00      	cmp	r3, #0
 801713c:	d107      	bne.n	801714e <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801713e:	f107 030c 	add.w	r3, r7, #12
 8017142:	4618      	mov	r0, r3
 8017144:	f7fe fc2e 	bl	80159a4 <dir_register>
 8017148:	4603      	mov	r3, r0
 801714a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801714e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017152:	2b00      	cmp	r3, #0
 8017154:	d120      	bne.n	8017198 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8017156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017158:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801715a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801715c:	3316      	adds	r3, #22
 801715e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017160:	4618      	mov	r0, r3
 8017162:	f7fd fb21 	bl	80147a8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801716a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801716c:	4618      	mov	r0, r3
 801716e:	f7fe f9b0 	bl	80154d2 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8017172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017174:	330b      	adds	r3, #11
 8017176:	2210      	movs	r2, #16
 8017178:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801717a:	68bb      	ldr	r3, [r7, #8]
 801717c:	2201      	movs	r2, #1
 801717e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8017180:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017184:	2b00      	cmp	r3, #0
 8017186:	d10e      	bne.n	80171a6 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8017188:	68bb      	ldr	r3, [r7, #8]
 801718a:	4618      	mov	r0, r3
 801718c:	f7fd fc28 	bl	80149e0 <sync_fs>
 8017190:	4603      	mov	r3, r0
 8017192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8017196:	e006      	b.n	80171a6 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8017198:	f107 030c 	add.w	r3, r7, #12
 801719c:	2200      	movs	r2, #0
 801719e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80171a0:	4618      	mov	r0, r3
 80171a2:	f7fd fe9c 	bl	8014ede <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80171a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	3758      	adds	r7, #88	; 0x58
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}
	...

080171b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80171b4:	b480      	push	{r7}
 80171b6:	b087      	sub	sp, #28
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	60f8      	str	r0, [r7, #12]
 80171bc:	60b9      	str	r1, [r7, #8]
 80171be:	4613      	mov	r3, r2
 80171c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80171c2:	2301      	movs	r3, #1
 80171c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80171c6:	2300      	movs	r3, #0
 80171c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80171ca:	4b1f      	ldr	r3, [pc, #124]	; (8017248 <FATFS_LinkDriverEx+0x94>)
 80171cc:	7a5b      	ldrb	r3, [r3, #9]
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d131      	bne.n	8017238 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80171d4:	4b1c      	ldr	r3, [pc, #112]	; (8017248 <FATFS_LinkDriverEx+0x94>)
 80171d6:	7a5b      	ldrb	r3, [r3, #9]
 80171d8:	b2db      	uxtb	r3, r3
 80171da:	461a      	mov	r2, r3
 80171dc:	4b1a      	ldr	r3, [pc, #104]	; (8017248 <FATFS_LinkDriverEx+0x94>)
 80171de:	2100      	movs	r1, #0
 80171e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80171e2:	4b19      	ldr	r3, [pc, #100]	; (8017248 <FATFS_LinkDriverEx+0x94>)
 80171e4:	7a5b      	ldrb	r3, [r3, #9]
 80171e6:	b2db      	uxtb	r3, r3
 80171e8:	4a17      	ldr	r2, [pc, #92]	; (8017248 <FATFS_LinkDriverEx+0x94>)
 80171ea:	009b      	lsls	r3, r3, #2
 80171ec:	4413      	add	r3, r2
 80171ee:	68fa      	ldr	r2, [r7, #12]
 80171f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80171f2:	4b15      	ldr	r3, [pc, #84]	; (8017248 <FATFS_LinkDriverEx+0x94>)
 80171f4:	7a5b      	ldrb	r3, [r3, #9]
 80171f6:	b2db      	uxtb	r3, r3
 80171f8:	461a      	mov	r2, r3
 80171fa:	4b13      	ldr	r3, [pc, #76]	; (8017248 <FATFS_LinkDriverEx+0x94>)
 80171fc:	4413      	add	r3, r2
 80171fe:	79fa      	ldrb	r2, [r7, #7]
 8017200:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017202:	4b11      	ldr	r3, [pc, #68]	; (8017248 <FATFS_LinkDriverEx+0x94>)
 8017204:	7a5b      	ldrb	r3, [r3, #9]
 8017206:	b2db      	uxtb	r3, r3
 8017208:	1c5a      	adds	r2, r3, #1
 801720a:	b2d1      	uxtb	r1, r2
 801720c:	4a0e      	ldr	r2, [pc, #56]	; (8017248 <FATFS_LinkDriverEx+0x94>)
 801720e:	7251      	strb	r1, [r2, #9]
 8017210:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017212:	7dbb      	ldrb	r3, [r7, #22]
 8017214:	3330      	adds	r3, #48	; 0x30
 8017216:	b2da      	uxtb	r2, r3
 8017218:	68bb      	ldr	r3, [r7, #8]
 801721a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801721c:	68bb      	ldr	r3, [r7, #8]
 801721e:	3301      	adds	r3, #1
 8017220:	223a      	movs	r2, #58	; 0x3a
 8017222:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017224:	68bb      	ldr	r3, [r7, #8]
 8017226:	3302      	adds	r3, #2
 8017228:	222f      	movs	r2, #47	; 0x2f
 801722a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	3303      	adds	r3, #3
 8017230:	2200      	movs	r2, #0
 8017232:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017234:	2300      	movs	r3, #0
 8017236:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017238:	7dfb      	ldrb	r3, [r7, #23]
}
 801723a:	4618      	mov	r0, r3
 801723c:	371c      	adds	r7, #28
 801723e:	46bd      	mov	sp, r7
 8017240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017244:	4770      	bx	lr
 8017246:	bf00      	nop
 8017248:	20003a10 	.word	0x20003a10

0801724c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
 8017254:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017256:	2200      	movs	r2, #0
 8017258:	6839      	ldr	r1, [r7, #0]
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f7ff ffaa 	bl	80171b4 <FATFS_LinkDriverEx>
 8017260:	4603      	mov	r3, r0
}
 8017262:	4618      	mov	r0, r3
 8017264:	3708      	adds	r7, #8
 8017266:	46bd      	mov	sp, r7
 8017268:	bd80      	pop	{r7, pc}
	...

0801726c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801726c:	b480      	push	{r7}
 801726e:	b085      	sub	sp, #20
 8017270:	af00      	add	r7, sp, #0
 8017272:	4603      	mov	r3, r0
 8017274:	6039      	str	r1, [r7, #0]
 8017276:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8017278:	88fb      	ldrh	r3, [r7, #6]
 801727a:	2b7f      	cmp	r3, #127	; 0x7f
 801727c:	d802      	bhi.n	8017284 <ff_convert+0x18>
		c = chr;
 801727e:	88fb      	ldrh	r3, [r7, #6]
 8017280:	81fb      	strh	r3, [r7, #14]
 8017282:	e025      	b.n	80172d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8017284:	683b      	ldr	r3, [r7, #0]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d00b      	beq.n	80172a2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801728a:	88fb      	ldrh	r3, [r7, #6]
 801728c:	2bff      	cmp	r3, #255	; 0xff
 801728e:	d805      	bhi.n	801729c <ff_convert+0x30>
 8017290:	88fb      	ldrh	r3, [r7, #6]
 8017292:	3b80      	subs	r3, #128	; 0x80
 8017294:	4a12      	ldr	r2, [pc, #72]	; (80172e0 <ff_convert+0x74>)
 8017296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801729a:	e000      	b.n	801729e <ff_convert+0x32>
 801729c:	2300      	movs	r3, #0
 801729e:	81fb      	strh	r3, [r7, #14]
 80172a0:	e016      	b.n	80172d0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80172a2:	2300      	movs	r3, #0
 80172a4:	81fb      	strh	r3, [r7, #14]
 80172a6:	e009      	b.n	80172bc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80172a8:	89fb      	ldrh	r3, [r7, #14]
 80172aa:	4a0d      	ldr	r2, [pc, #52]	; (80172e0 <ff_convert+0x74>)
 80172ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80172b0:	88fa      	ldrh	r2, [r7, #6]
 80172b2:	429a      	cmp	r2, r3
 80172b4:	d006      	beq.n	80172c4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80172b6:	89fb      	ldrh	r3, [r7, #14]
 80172b8:	3301      	adds	r3, #1
 80172ba:	81fb      	strh	r3, [r7, #14]
 80172bc:	89fb      	ldrh	r3, [r7, #14]
 80172be:	2b7f      	cmp	r3, #127	; 0x7f
 80172c0:	d9f2      	bls.n	80172a8 <ff_convert+0x3c>
 80172c2:	e000      	b.n	80172c6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80172c4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80172c6:	89fb      	ldrh	r3, [r7, #14]
 80172c8:	3380      	adds	r3, #128	; 0x80
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	b2db      	uxtb	r3, r3
 80172ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80172d0:	89fb      	ldrh	r3, [r7, #14]
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	3714      	adds	r7, #20
 80172d6:	46bd      	mov	sp, r7
 80172d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172dc:	4770      	bx	lr
 80172de:	bf00      	nop
 80172e0:	080189b0 	.word	0x080189b0

080172e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80172e4:	b480      	push	{r7}
 80172e6:	b087      	sub	sp, #28
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	4603      	mov	r3, r0
 80172ec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80172ee:	88fb      	ldrh	r3, [r7, #6]
 80172f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80172f4:	d201      	bcs.n	80172fa <ff_wtoupper+0x16>
 80172f6:	4b3e      	ldr	r3, [pc, #248]	; (80173f0 <ff_wtoupper+0x10c>)
 80172f8:	e000      	b.n	80172fc <ff_wtoupper+0x18>
 80172fa:	4b3e      	ldr	r3, [pc, #248]	; (80173f4 <ff_wtoupper+0x110>)
 80172fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80172fe:	697b      	ldr	r3, [r7, #20]
 8017300:	1c9a      	adds	r2, r3, #2
 8017302:	617a      	str	r2, [r7, #20]
 8017304:	881b      	ldrh	r3, [r3, #0]
 8017306:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017308:	8a7b      	ldrh	r3, [r7, #18]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d068      	beq.n	80173e0 <ff_wtoupper+0xfc>
 801730e:	88fa      	ldrh	r2, [r7, #6]
 8017310:	8a7b      	ldrh	r3, [r7, #18]
 8017312:	429a      	cmp	r2, r3
 8017314:	d364      	bcc.n	80173e0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8017316:	697b      	ldr	r3, [r7, #20]
 8017318:	1c9a      	adds	r2, r3, #2
 801731a:	617a      	str	r2, [r7, #20]
 801731c:	881b      	ldrh	r3, [r3, #0]
 801731e:	823b      	strh	r3, [r7, #16]
 8017320:	8a3b      	ldrh	r3, [r7, #16]
 8017322:	0a1b      	lsrs	r3, r3, #8
 8017324:	81fb      	strh	r3, [r7, #14]
 8017326:	8a3b      	ldrh	r3, [r7, #16]
 8017328:	b2db      	uxtb	r3, r3
 801732a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801732c:	88fa      	ldrh	r2, [r7, #6]
 801732e:	8a79      	ldrh	r1, [r7, #18]
 8017330:	8a3b      	ldrh	r3, [r7, #16]
 8017332:	440b      	add	r3, r1
 8017334:	429a      	cmp	r2, r3
 8017336:	da49      	bge.n	80173cc <ff_wtoupper+0xe8>
			switch (cmd) {
 8017338:	89fb      	ldrh	r3, [r7, #14]
 801733a:	2b08      	cmp	r3, #8
 801733c:	d84f      	bhi.n	80173de <ff_wtoupper+0xfa>
 801733e:	a201      	add	r2, pc, #4	; (adr r2, 8017344 <ff_wtoupper+0x60>)
 8017340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017344:	08017369 	.word	0x08017369
 8017348:	0801737b 	.word	0x0801737b
 801734c:	08017391 	.word	0x08017391
 8017350:	08017399 	.word	0x08017399
 8017354:	080173a1 	.word	0x080173a1
 8017358:	080173a9 	.word	0x080173a9
 801735c:	080173b1 	.word	0x080173b1
 8017360:	080173b9 	.word	0x080173b9
 8017364:	080173c1 	.word	0x080173c1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017368:	88fa      	ldrh	r2, [r7, #6]
 801736a:	8a7b      	ldrh	r3, [r7, #18]
 801736c:	1ad3      	subs	r3, r2, r3
 801736e:	005b      	lsls	r3, r3, #1
 8017370:	697a      	ldr	r2, [r7, #20]
 8017372:	4413      	add	r3, r2
 8017374:	881b      	ldrh	r3, [r3, #0]
 8017376:	80fb      	strh	r3, [r7, #6]
 8017378:	e027      	b.n	80173ca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801737a:	88fa      	ldrh	r2, [r7, #6]
 801737c:	8a7b      	ldrh	r3, [r7, #18]
 801737e:	1ad3      	subs	r3, r2, r3
 8017380:	b29b      	uxth	r3, r3
 8017382:	f003 0301 	and.w	r3, r3, #1
 8017386:	b29b      	uxth	r3, r3
 8017388:	88fa      	ldrh	r2, [r7, #6]
 801738a:	1ad3      	subs	r3, r2, r3
 801738c:	80fb      	strh	r3, [r7, #6]
 801738e:	e01c      	b.n	80173ca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017390:	88fb      	ldrh	r3, [r7, #6]
 8017392:	3b10      	subs	r3, #16
 8017394:	80fb      	strh	r3, [r7, #6]
 8017396:	e018      	b.n	80173ca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017398:	88fb      	ldrh	r3, [r7, #6]
 801739a:	3b20      	subs	r3, #32
 801739c:	80fb      	strh	r3, [r7, #6]
 801739e:	e014      	b.n	80173ca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80173a0:	88fb      	ldrh	r3, [r7, #6]
 80173a2:	3b30      	subs	r3, #48	; 0x30
 80173a4:	80fb      	strh	r3, [r7, #6]
 80173a6:	e010      	b.n	80173ca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80173a8:	88fb      	ldrh	r3, [r7, #6]
 80173aa:	3b1a      	subs	r3, #26
 80173ac:	80fb      	strh	r3, [r7, #6]
 80173ae:	e00c      	b.n	80173ca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80173b0:	88fb      	ldrh	r3, [r7, #6]
 80173b2:	3308      	adds	r3, #8
 80173b4:	80fb      	strh	r3, [r7, #6]
 80173b6:	e008      	b.n	80173ca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80173b8:	88fb      	ldrh	r3, [r7, #6]
 80173ba:	3b50      	subs	r3, #80	; 0x50
 80173bc:	80fb      	strh	r3, [r7, #6]
 80173be:	e004      	b.n	80173ca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80173c0:	88fb      	ldrh	r3, [r7, #6]
 80173c2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80173c6:	80fb      	strh	r3, [r7, #6]
 80173c8:	bf00      	nop
			}
			break;
 80173ca:	e008      	b.n	80173de <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80173cc:	89fb      	ldrh	r3, [r7, #14]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d195      	bne.n	80172fe <ff_wtoupper+0x1a>
 80173d2:	8a3b      	ldrh	r3, [r7, #16]
 80173d4:	005b      	lsls	r3, r3, #1
 80173d6:	697a      	ldr	r2, [r7, #20]
 80173d8:	4413      	add	r3, r2
 80173da:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80173dc:	e78f      	b.n	80172fe <ff_wtoupper+0x1a>
			break;
 80173de:	bf00      	nop
	}

	return chr;
 80173e0:	88fb      	ldrh	r3, [r7, #6]
}
 80173e2:	4618      	mov	r0, r3
 80173e4:	371c      	adds	r7, #28
 80173e6:	46bd      	mov	sp, r7
 80173e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ec:	4770      	bx	lr
 80173ee:	bf00      	nop
 80173f0:	08018ab0 	.word	0x08018ab0
 80173f4:	08018ca4 	.word	0x08018ca4

080173f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80173fc:	2200      	movs	r2, #0
 80173fe:	4912      	ldr	r1, [pc, #72]	; (8017448 <MX_USB_DEVICE_Init+0x50>)
 8017400:	4812      	ldr	r0, [pc, #72]	; (801744c <MX_USB_DEVICE_Init+0x54>)
 8017402:	f7fb ff68 	bl	80132d6 <USBD_Init>
 8017406:	4603      	mov	r3, r0
 8017408:	2b00      	cmp	r3, #0
 801740a:	d001      	beq.n	8017410 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801740c:	f7ea fc20 	bl	8001c50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017410:	490f      	ldr	r1, [pc, #60]	; (8017450 <MX_USB_DEVICE_Init+0x58>)
 8017412:	480e      	ldr	r0, [pc, #56]	; (801744c <MX_USB_DEVICE_Init+0x54>)
 8017414:	f7fb ff8f 	bl	8013336 <USBD_RegisterClass>
 8017418:	4603      	mov	r3, r0
 801741a:	2b00      	cmp	r3, #0
 801741c:	d001      	beq.n	8017422 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801741e:	f7ea fc17 	bl	8001c50 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8017422:	490c      	ldr	r1, [pc, #48]	; (8017454 <MX_USB_DEVICE_Init+0x5c>)
 8017424:	4809      	ldr	r0, [pc, #36]	; (801744c <MX_USB_DEVICE_Init+0x54>)
 8017426:	f7fa fb3f 	bl	8011aa8 <USBD_MSC_RegisterStorage>
 801742a:	4603      	mov	r3, r0
 801742c:	2b00      	cmp	r3, #0
 801742e:	d001      	beq.n	8017434 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017430:	f7ea fc0e 	bl	8001c50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017434:	4805      	ldr	r0, [pc, #20]	; (801744c <MX_USB_DEVICE_Init+0x54>)
 8017436:	f7fb ffa5 	bl	8013384 <USBD_Start>
 801743a:	4603      	mov	r3, r0
 801743c:	2b00      	cmp	r3, #0
 801743e:	d001      	beq.n	8017444 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017440:	f7ea fc06 	bl	8001c50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017444:	bf00      	nop
 8017446:	bd80      	pop	{r7, pc}
 8017448:	200000f4 	.word	0x200000f4
 801744c:	20003a1c 	.word	0x20003a1c
 8017450:	2000000c 	.word	0x2000000c
 8017454:	20000154 	.word	0x20000154

08017458 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017458:	b480      	push	{r7}
 801745a:	b083      	sub	sp, #12
 801745c:	af00      	add	r7, sp, #0
 801745e:	4603      	mov	r3, r0
 8017460:	6039      	str	r1, [r7, #0]
 8017462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	2212      	movs	r2, #18
 8017468:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801746a:	4b03      	ldr	r3, [pc, #12]	; (8017478 <USBD_FS_DeviceDescriptor+0x20>)
}
 801746c:	4618      	mov	r0, r3
 801746e:	370c      	adds	r7, #12
 8017470:	46bd      	mov	sp, r7
 8017472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017476:	4770      	bx	lr
 8017478:	20000114 	.word	0x20000114

0801747c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801747c:	b480      	push	{r7}
 801747e:	b083      	sub	sp, #12
 8017480:	af00      	add	r7, sp, #0
 8017482:	4603      	mov	r3, r0
 8017484:	6039      	str	r1, [r7, #0]
 8017486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017488:	683b      	ldr	r3, [r7, #0]
 801748a:	2204      	movs	r2, #4
 801748c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801748e:	4b03      	ldr	r3, [pc, #12]	; (801749c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017490:	4618      	mov	r0, r3
 8017492:	370c      	adds	r7, #12
 8017494:	46bd      	mov	sp, r7
 8017496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749a:	4770      	bx	lr
 801749c:	20000134 	.word	0x20000134

080174a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b082      	sub	sp, #8
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	4603      	mov	r3, r0
 80174a8:	6039      	str	r1, [r7, #0]
 80174aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80174ac:	79fb      	ldrb	r3, [r7, #7]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d105      	bne.n	80174be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80174b2:	683a      	ldr	r2, [r7, #0]
 80174b4:	4907      	ldr	r1, [pc, #28]	; (80174d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80174b6:	4808      	ldr	r0, [pc, #32]	; (80174d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80174b8:	f7fc ffbf 	bl	801443a <USBD_GetString>
 80174bc:	e004      	b.n	80174c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80174be:	683a      	ldr	r2, [r7, #0]
 80174c0:	4904      	ldr	r1, [pc, #16]	; (80174d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80174c2:	4805      	ldr	r0, [pc, #20]	; (80174d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80174c4:	f7fc ffb9 	bl	801443a <USBD_GetString>
  }
  return USBD_StrDesc;
 80174c8:	4b02      	ldr	r3, [pc, #8]	; (80174d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80174ca:	4618      	mov	r0, r3
 80174cc:	3708      	adds	r7, #8
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}
 80174d2:	bf00      	nop
 80174d4:	20003cec 	.word	0x20003cec
 80174d8:	080188a8 	.word	0x080188a8

080174dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b082      	sub	sp, #8
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	4603      	mov	r3, r0
 80174e4:	6039      	str	r1, [r7, #0]
 80174e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80174e8:	683a      	ldr	r2, [r7, #0]
 80174ea:	4904      	ldr	r1, [pc, #16]	; (80174fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80174ec:	4804      	ldr	r0, [pc, #16]	; (8017500 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80174ee:	f7fc ffa4 	bl	801443a <USBD_GetString>
  return USBD_StrDesc;
 80174f2:	4b02      	ldr	r3, [pc, #8]	; (80174fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80174f4:	4618      	mov	r0, r3
 80174f6:	3708      	adds	r7, #8
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd80      	pop	{r7, pc}
 80174fc:	20003cec 	.word	0x20003cec
 8017500:	080188bc 	.word	0x080188bc

08017504 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b082      	sub	sp, #8
 8017508:	af00      	add	r7, sp, #0
 801750a:	4603      	mov	r3, r0
 801750c:	6039      	str	r1, [r7, #0]
 801750e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017510:	683b      	ldr	r3, [r7, #0]
 8017512:	221a      	movs	r2, #26
 8017514:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017516:	f000 f855 	bl	80175c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801751a:	4b02      	ldr	r3, [pc, #8]	; (8017524 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801751c:	4618      	mov	r0, r3
 801751e:	3708      	adds	r7, #8
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}
 8017524:	20000138 	.word	0x20000138

08017528 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b082      	sub	sp, #8
 801752c:	af00      	add	r7, sp, #0
 801752e:	4603      	mov	r3, r0
 8017530:	6039      	str	r1, [r7, #0]
 8017532:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017534:	79fb      	ldrb	r3, [r7, #7]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d105      	bne.n	8017546 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801753a:	683a      	ldr	r2, [r7, #0]
 801753c:	4907      	ldr	r1, [pc, #28]	; (801755c <USBD_FS_ConfigStrDescriptor+0x34>)
 801753e:	4808      	ldr	r0, [pc, #32]	; (8017560 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017540:	f7fc ff7b 	bl	801443a <USBD_GetString>
 8017544:	e004      	b.n	8017550 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017546:	683a      	ldr	r2, [r7, #0]
 8017548:	4904      	ldr	r1, [pc, #16]	; (801755c <USBD_FS_ConfigStrDescriptor+0x34>)
 801754a:	4805      	ldr	r0, [pc, #20]	; (8017560 <USBD_FS_ConfigStrDescriptor+0x38>)
 801754c:	f7fc ff75 	bl	801443a <USBD_GetString>
  }
  return USBD_StrDesc;
 8017550:	4b02      	ldr	r3, [pc, #8]	; (801755c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017552:	4618      	mov	r0, r3
 8017554:	3708      	adds	r7, #8
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}
 801755a:	bf00      	nop
 801755c:	20003cec 	.word	0x20003cec
 8017560:	080188d0 	.word	0x080188d0

08017564 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b082      	sub	sp, #8
 8017568:	af00      	add	r7, sp, #0
 801756a:	4603      	mov	r3, r0
 801756c:	6039      	str	r1, [r7, #0]
 801756e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017570:	79fb      	ldrb	r3, [r7, #7]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d105      	bne.n	8017582 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017576:	683a      	ldr	r2, [r7, #0]
 8017578:	4907      	ldr	r1, [pc, #28]	; (8017598 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801757a:	4808      	ldr	r0, [pc, #32]	; (801759c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801757c:	f7fc ff5d 	bl	801443a <USBD_GetString>
 8017580:	e004      	b.n	801758c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017582:	683a      	ldr	r2, [r7, #0]
 8017584:	4904      	ldr	r1, [pc, #16]	; (8017598 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017586:	4805      	ldr	r0, [pc, #20]	; (801759c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017588:	f7fc ff57 	bl	801443a <USBD_GetString>
  }
  return USBD_StrDesc;
 801758c:	4b02      	ldr	r3, [pc, #8]	; (8017598 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801758e:	4618      	mov	r0, r3
 8017590:	3708      	adds	r7, #8
 8017592:	46bd      	mov	sp, r7
 8017594:	bd80      	pop	{r7, pc}
 8017596:	bf00      	nop
 8017598:	20003cec 	.word	0x20003cec
 801759c:	080188dc 	.word	0x080188dc

080175a0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175a0:	b480      	push	{r7}
 80175a2:	b083      	sub	sp, #12
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	4603      	mov	r3, r0
 80175a8:	6039      	str	r1, [r7, #0]
 80175aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	220c      	movs	r2, #12
 80175b0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80175b2:	4b03      	ldr	r3, [pc, #12]	; (80175c0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	370c      	adds	r7, #12
 80175b8:	46bd      	mov	sp, r7
 80175ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175be:	4770      	bx	lr
 80175c0:	20000128 	.word	0x20000128

080175c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b084      	sub	sp, #16
 80175c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80175ca:	4b0f      	ldr	r3, [pc, #60]	; (8017608 <Get_SerialNum+0x44>)
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80175d0:	4b0e      	ldr	r3, [pc, #56]	; (801760c <Get_SerialNum+0x48>)
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80175d6:	4b0e      	ldr	r3, [pc, #56]	; (8017610 <Get_SerialNum+0x4c>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80175dc:	68fa      	ldr	r2, [r7, #12]
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	4413      	add	r3, r2
 80175e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d009      	beq.n	80175fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80175ea:	2208      	movs	r2, #8
 80175ec:	4909      	ldr	r1, [pc, #36]	; (8017614 <Get_SerialNum+0x50>)
 80175ee:	68f8      	ldr	r0, [r7, #12]
 80175f0:	f000 f814 	bl	801761c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80175f4:	2204      	movs	r2, #4
 80175f6:	4908      	ldr	r1, [pc, #32]	; (8017618 <Get_SerialNum+0x54>)
 80175f8:	68b8      	ldr	r0, [r7, #8]
 80175fa:	f000 f80f 	bl	801761c <IntToUnicode>
  }
}
 80175fe:	bf00      	nop
 8017600:	3710      	adds	r7, #16
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}
 8017606:	bf00      	nop
 8017608:	1fff7a10 	.word	0x1fff7a10
 801760c:	1fff7a14 	.word	0x1fff7a14
 8017610:	1fff7a18 	.word	0x1fff7a18
 8017614:	2000013a 	.word	0x2000013a
 8017618:	2000014a 	.word	0x2000014a

0801761c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801761c:	b480      	push	{r7}
 801761e:	b087      	sub	sp, #28
 8017620:	af00      	add	r7, sp, #0
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	4613      	mov	r3, r2
 8017628:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801762a:	2300      	movs	r3, #0
 801762c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801762e:	2300      	movs	r3, #0
 8017630:	75fb      	strb	r3, [r7, #23]
 8017632:	e027      	b.n	8017684 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	0f1b      	lsrs	r3, r3, #28
 8017638:	2b09      	cmp	r3, #9
 801763a:	d80b      	bhi.n	8017654 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	0f1b      	lsrs	r3, r3, #28
 8017640:	b2da      	uxtb	r2, r3
 8017642:	7dfb      	ldrb	r3, [r7, #23]
 8017644:	005b      	lsls	r3, r3, #1
 8017646:	4619      	mov	r1, r3
 8017648:	68bb      	ldr	r3, [r7, #8]
 801764a:	440b      	add	r3, r1
 801764c:	3230      	adds	r2, #48	; 0x30
 801764e:	b2d2      	uxtb	r2, r2
 8017650:	701a      	strb	r2, [r3, #0]
 8017652:	e00a      	b.n	801766a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	0f1b      	lsrs	r3, r3, #28
 8017658:	b2da      	uxtb	r2, r3
 801765a:	7dfb      	ldrb	r3, [r7, #23]
 801765c:	005b      	lsls	r3, r3, #1
 801765e:	4619      	mov	r1, r3
 8017660:	68bb      	ldr	r3, [r7, #8]
 8017662:	440b      	add	r3, r1
 8017664:	3237      	adds	r2, #55	; 0x37
 8017666:	b2d2      	uxtb	r2, r2
 8017668:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	011b      	lsls	r3, r3, #4
 801766e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017670:	7dfb      	ldrb	r3, [r7, #23]
 8017672:	005b      	lsls	r3, r3, #1
 8017674:	3301      	adds	r3, #1
 8017676:	68ba      	ldr	r2, [r7, #8]
 8017678:	4413      	add	r3, r2
 801767a:	2200      	movs	r2, #0
 801767c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801767e:	7dfb      	ldrb	r3, [r7, #23]
 8017680:	3301      	adds	r3, #1
 8017682:	75fb      	strb	r3, [r7, #23]
 8017684:	7dfa      	ldrb	r2, [r7, #23]
 8017686:	79fb      	ldrb	r3, [r7, #7]
 8017688:	429a      	cmp	r2, r3
 801768a:	d3d3      	bcc.n	8017634 <IntToUnicode+0x18>
  }
}
 801768c:	bf00      	nop
 801768e:	bf00      	nop
 8017690:	371c      	adds	r7, #28
 8017692:	46bd      	mov	sp, r7
 8017694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017698:	4770      	bx	lr

0801769a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801769a:	b480      	push	{r7}
 801769c:	b083      	sub	sp, #12
 801769e:	af00      	add	r7, sp, #0
 80176a0:	4603      	mov	r3, r0
 80176a2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80176a4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80176a6:	4618      	mov	r0, r3
 80176a8:	370c      	adds	r7, #12
 80176aa:	46bd      	mov	sp, r7
 80176ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b0:	4770      	bx	lr
	...

080176b4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b08c      	sub	sp, #48	; 0x30
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	4603      	mov	r3, r0
 80176bc:	60b9      	str	r1, [r7, #8]
 80176be:	607a      	str	r2, [r7, #4]
 80176c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;

  HAL_SD_GetCardInfo(&hsd, &info);
 80176c2:	f107 0310 	add.w	r3, r7, #16
 80176c6:	4619      	mov	r1, r3
 80176c8:	4807      	ldr	r0, [pc, #28]	; (80176e8 <STORAGE_GetCapacity_FS+0x34>)
 80176ca:	f7f6 fc31 	bl	800df30 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr - 1;
 80176ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176d0:	1e5a      	subs	r2, r3, #1
 80176d2:	68bb      	ldr	r3, [r7, #8]
 80176d4:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 80176d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176d8:	b29a      	uxth	r2, r3
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 80176de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80176e0:	4618      	mov	r0, r3
 80176e2:	3730      	adds	r7, #48	; 0x30
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd80      	pop	{r7, pc}
 80176e8:	200003ec 	.word	0x200003ec

080176ec <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80176ec:	b480      	push	{r7}
 80176ee:	b083      	sub	sp, #12
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	4603      	mov	r3, r0
 80176f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80176f6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80176f8:	4618      	mov	r0, r3
 80176fa:	370c      	adds	r7, #12
 80176fc:	46bd      	mov	sp, r7
 80176fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017702:	4770      	bx	lr

08017704 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8017704:	b480      	push	{r7}
 8017706:	b083      	sub	sp, #12
 8017708:	af00      	add	r7, sp, #0
 801770a:	4603      	mov	r3, r0
 801770c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801770e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017710:	4618      	mov	r0, r3
 8017712:	370c      	adds	r7, #12
 8017714:	46bd      	mov	sp, r7
 8017716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771a:	4770      	bx	lr

0801771c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b086      	sub	sp, #24
 8017720:	af02      	add	r7, sp, #8
 8017722:	60b9      	str	r1, [r7, #8]
 8017724:	607a      	str	r2, [r7, #4]
 8017726:	461a      	mov	r2, r3
 8017728:	4603      	mov	r3, r0
 801772a:	73fb      	strb	r3, [r7, #15]
 801772c:	4613      	mov	r3, r2
 801772e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017730:	89bb      	ldrh	r3, [r7, #12]
 8017732:	f04f 32ff 	mov.w	r2, #4294967295
 8017736:	9200      	str	r2, [sp, #0]
 8017738:	687a      	ldr	r2, [r7, #4]
 801773a:	68b9      	ldr	r1, [r7, #8]
 801773c:	4807      	ldr	r0, [pc, #28]	; (801775c <STORAGE_Read_FS+0x40>)
 801773e:	f7f5 fbad 	bl	800ce9c <HAL_SD_ReadBlocks>
//	HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 8017742:	bf00      	nop
 8017744:	4805      	ldr	r0, [pc, #20]	; (801775c <STORAGE_Read_FS+0x40>)
 8017746:	f7f6 fcb9 	bl	800e0bc <HAL_SD_GetCardState>
 801774a:	4603      	mov	r3, r0
 801774c:	2b04      	cmp	r3, #4
 801774e:	d1f9      	bne.n	8017744 <STORAGE_Read_FS+0x28>

  return (USBD_OK);
 8017750:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017752:	4618      	mov	r0, r3
 8017754:	3710      	adds	r7, #16
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}
 801775a:	bf00      	nop
 801775c:	200003ec 	.word	0x200003ec

08017760 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b086      	sub	sp, #24
 8017764:	af02      	add	r7, sp, #8
 8017766:	60b9      	str	r1, [r7, #8]
 8017768:	607a      	str	r2, [r7, #4]
 801776a:	461a      	mov	r2, r3
 801776c:	4603      	mov	r3, r0
 801776e:	73fb      	strb	r3, [r7, #15]
 8017770:	4613      	mov	r3, r2
 8017772:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017774:	89bb      	ldrh	r3, [r7, #12]
 8017776:	f04f 32ff 	mov.w	r2, #4294967295
 801777a:	9200      	str	r2, [sp, #0]
 801777c:	687a      	ldr	r2, [r7, #4]
 801777e:	68b9      	ldr	r1, [r7, #8]
 8017780:	4807      	ldr	r0, [pc, #28]	; (80177a0 <STORAGE_Write_FS+0x40>)
 8017782:	f7f5 fd69 	bl	800d258 <HAL_SD_WriteBlocks>
//	HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 8017786:	bf00      	nop
 8017788:	4805      	ldr	r0, [pc, #20]	; (80177a0 <STORAGE_Write_FS+0x40>)
 801778a:	f7f6 fc97 	bl	800e0bc <HAL_SD_GetCardState>
 801778e:	4603      	mov	r3, r0
 8017790:	2b04      	cmp	r3, #4
 8017792:	d1f9      	bne.n	8017788 <STORAGE_Write_FS+0x28>

  return (USBD_OK);
 8017794:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8017796:	4618      	mov	r0, r3
 8017798:	3710      	adds	r7, #16
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}
 801779e:	bf00      	nop
 80177a0:	200003ec 	.word	0x200003ec

080177a4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80177a4:	b480      	push	{r7}
 80177a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80177a8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80177aa:	4618      	mov	r0, r3
 80177ac:	46bd      	mov	sp, r7
 80177ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b2:	4770      	bx	lr

080177b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b08a      	sub	sp, #40	; 0x28
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80177bc:	f107 0314 	add.w	r3, r7, #20
 80177c0:	2200      	movs	r2, #0
 80177c2:	601a      	str	r2, [r3, #0]
 80177c4:	605a      	str	r2, [r3, #4]
 80177c6:	609a      	str	r2, [r3, #8]
 80177c8:	60da      	str	r2, [r3, #12]
 80177ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80177d4:	d147      	bne.n	8017866 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80177d6:	2300      	movs	r3, #0
 80177d8:	613b      	str	r3, [r7, #16]
 80177da:	4b25      	ldr	r3, [pc, #148]	; (8017870 <HAL_PCD_MspInit+0xbc>)
 80177dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177de:	4a24      	ldr	r2, [pc, #144]	; (8017870 <HAL_PCD_MspInit+0xbc>)
 80177e0:	f043 0301 	orr.w	r3, r3, #1
 80177e4:	6313      	str	r3, [r2, #48]	; 0x30
 80177e6:	4b22      	ldr	r3, [pc, #136]	; (8017870 <HAL_PCD_MspInit+0xbc>)
 80177e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177ea:	f003 0301 	and.w	r3, r3, #1
 80177ee:	613b      	str	r3, [r7, #16]
 80177f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80177f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80177f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80177f8:	2300      	movs	r3, #0
 80177fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177fc:	2300      	movs	r3, #0
 80177fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017800:	f107 0314 	add.w	r3, r7, #20
 8017804:	4619      	mov	r1, r3
 8017806:	481b      	ldr	r0, [pc, #108]	; (8017874 <HAL_PCD_MspInit+0xc0>)
 8017808:	f7f1 f9e2 	bl	8008bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801780c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017812:	2302      	movs	r3, #2
 8017814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017816:	2300      	movs	r3, #0
 8017818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801781a:	2303      	movs	r3, #3
 801781c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801781e:	230a      	movs	r3, #10
 8017820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017822:	f107 0314 	add.w	r3, r7, #20
 8017826:	4619      	mov	r1, r3
 8017828:	4812      	ldr	r0, [pc, #72]	; (8017874 <HAL_PCD_MspInit+0xc0>)
 801782a:	f7f1 f9d1 	bl	8008bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801782e:	4b10      	ldr	r3, [pc, #64]	; (8017870 <HAL_PCD_MspInit+0xbc>)
 8017830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017832:	4a0f      	ldr	r2, [pc, #60]	; (8017870 <HAL_PCD_MspInit+0xbc>)
 8017834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017838:	6353      	str	r3, [r2, #52]	; 0x34
 801783a:	2300      	movs	r3, #0
 801783c:	60fb      	str	r3, [r7, #12]
 801783e:	4b0c      	ldr	r3, [pc, #48]	; (8017870 <HAL_PCD_MspInit+0xbc>)
 8017840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017842:	4a0b      	ldr	r2, [pc, #44]	; (8017870 <HAL_PCD_MspInit+0xbc>)
 8017844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017848:	6453      	str	r3, [r2, #68]	; 0x44
 801784a:	4b09      	ldr	r3, [pc, #36]	; (8017870 <HAL_PCD_MspInit+0xbc>)
 801784c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801784e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017852:	60fb      	str	r3, [r7, #12]
 8017854:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017856:	2200      	movs	r2, #0
 8017858:	2100      	movs	r1, #0
 801785a:	2043      	movs	r0, #67	; 0x43
 801785c:	f7f0 fde3 	bl	8008426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017860:	2043      	movs	r0, #67	; 0x43
 8017862:	f7f0 fdfc 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017866:	bf00      	nop
 8017868:	3728      	adds	r7, #40	; 0x28
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}
 801786e:	bf00      	nop
 8017870:	40023800 	.word	0x40023800
 8017874:	40020000 	.word	0x40020000

08017878 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b082      	sub	sp, #8
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801788c:	4619      	mov	r1, r3
 801788e:	4610      	mov	r0, r2
 8017890:	f7fb fdc3 	bl	801341a <USBD_LL_SetupStage>
}
 8017894:	bf00      	nop
 8017896:	3708      	adds	r7, #8
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}

0801789c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b082      	sub	sp, #8
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
 80178a4:	460b      	mov	r3, r1
 80178a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80178ae:	78fa      	ldrb	r2, [r7, #3]
 80178b0:	6879      	ldr	r1, [r7, #4]
 80178b2:	4613      	mov	r3, r2
 80178b4:	00db      	lsls	r3, r3, #3
 80178b6:	1a9b      	subs	r3, r3, r2
 80178b8:	009b      	lsls	r3, r3, #2
 80178ba:	440b      	add	r3, r1
 80178bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	78fb      	ldrb	r3, [r7, #3]
 80178c4:	4619      	mov	r1, r3
 80178c6:	f7fb fdfd 	bl	80134c4 <USBD_LL_DataOutStage>
}
 80178ca:	bf00      	nop
 80178cc:	3708      	adds	r7, #8
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bd80      	pop	{r7, pc}

080178d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178d2:	b580      	push	{r7, lr}
 80178d4:	b082      	sub	sp, #8
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	6078      	str	r0, [r7, #4]
 80178da:	460b      	mov	r3, r1
 80178dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80178e4:	78fa      	ldrb	r2, [r7, #3]
 80178e6:	6879      	ldr	r1, [r7, #4]
 80178e8:	4613      	mov	r3, r2
 80178ea:	00db      	lsls	r3, r3, #3
 80178ec:	1a9b      	subs	r3, r3, r2
 80178ee:	009b      	lsls	r3, r3, #2
 80178f0:	440b      	add	r3, r1
 80178f2:	3348      	adds	r3, #72	; 0x48
 80178f4:	681a      	ldr	r2, [r3, #0]
 80178f6:	78fb      	ldrb	r3, [r7, #3]
 80178f8:	4619      	mov	r1, r3
 80178fa:	f7fb fe46 	bl	801358a <USBD_LL_DataInStage>
}
 80178fe:	bf00      	nop
 8017900:	3708      	adds	r7, #8
 8017902:	46bd      	mov	sp, r7
 8017904:	bd80      	pop	{r7, pc}

08017906 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017906:	b580      	push	{r7, lr}
 8017908:	b082      	sub	sp, #8
 801790a:	af00      	add	r7, sp, #0
 801790c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017914:	4618      	mov	r0, r3
 8017916:	f7fb ff5a 	bl	80137ce <USBD_LL_SOF>
}
 801791a:	bf00      	nop
 801791c:	3708      	adds	r7, #8
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}

08017922 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017922:	b580      	push	{r7, lr}
 8017924:	b084      	sub	sp, #16
 8017926:	af00      	add	r7, sp, #0
 8017928:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801792a:	2301      	movs	r3, #1
 801792c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	68db      	ldr	r3, [r3, #12]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d102      	bne.n	801793c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017936:	2300      	movs	r3, #0
 8017938:	73fb      	strb	r3, [r7, #15]
 801793a:	e008      	b.n	801794e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	68db      	ldr	r3, [r3, #12]
 8017940:	2b02      	cmp	r3, #2
 8017942:	d102      	bne.n	801794a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017944:	2301      	movs	r3, #1
 8017946:	73fb      	strb	r3, [r7, #15]
 8017948:	e001      	b.n	801794e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801794a:	f7ea f981 	bl	8001c50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017954:	7bfa      	ldrb	r2, [r7, #15]
 8017956:	4611      	mov	r1, r2
 8017958:	4618      	mov	r0, r3
 801795a:	f7fb fefa 	bl	8013752 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017964:	4618      	mov	r0, r3
 8017966:	f7fb fea6 	bl	80136b6 <USBD_LL_Reset>
}
 801796a:	bf00      	nop
 801796c:	3710      	adds	r7, #16
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
	...

08017974 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b082      	sub	sp, #8
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017982:	4618      	mov	r0, r3
 8017984:	f7fb fef5 	bl	8013772 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	687a      	ldr	r2, [r7, #4]
 8017994:	6812      	ldr	r2, [r2, #0]
 8017996:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801799a:	f043 0301 	orr.w	r3, r3, #1
 801799e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	6a1b      	ldr	r3, [r3, #32]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d005      	beq.n	80179b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80179a8:	4b04      	ldr	r3, [pc, #16]	; (80179bc <HAL_PCD_SuspendCallback+0x48>)
 80179aa:	691b      	ldr	r3, [r3, #16]
 80179ac:	4a03      	ldr	r2, [pc, #12]	; (80179bc <HAL_PCD_SuspendCallback+0x48>)
 80179ae:	f043 0306 	orr.w	r3, r3, #6
 80179b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80179b4:	bf00      	nop
 80179b6:	3708      	adds	r7, #8
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}
 80179bc:	e000ed00 	.word	0xe000ed00

080179c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80179ce:	4618      	mov	r0, r3
 80179d0:	f7fb fee5 	bl	801379e <USBD_LL_Resume>
}
 80179d4:	bf00      	nop
 80179d6:	3708      	adds	r7, #8
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}

080179dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b082      	sub	sp, #8
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
 80179e4:	460b      	mov	r3, r1
 80179e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80179ee:	78fa      	ldrb	r2, [r7, #3]
 80179f0:	4611      	mov	r1, r2
 80179f2:	4618      	mov	r0, r3
 80179f4:	f7fb ff33 	bl	801385e <USBD_LL_IsoOUTIncomplete>
}
 80179f8:	bf00      	nop
 80179fa:	3708      	adds	r7, #8
 80179fc:	46bd      	mov	sp, r7
 80179fe:	bd80      	pop	{r7, pc}

08017a00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b082      	sub	sp, #8
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
 8017a08:	460b      	mov	r3, r1
 8017a0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017a12:	78fa      	ldrb	r2, [r7, #3]
 8017a14:	4611      	mov	r1, r2
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7fb fefb 	bl	8013812 <USBD_LL_IsoINIncomplete>
}
 8017a1c:	bf00      	nop
 8017a1e:	3708      	adds	r7, #8
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}

08017a24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b082      	sub	sp, #8
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017a32:	4618      	mov	r0, r3
 8017a34:	f7fb ff39 	bl	80138aa <USBD_LL_DevConnected>
}
 8017a38:	bf00      	nop
 8017a3a:	3708      	adds	r7, #8
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}

08017a40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017a4e:	4618      	mov	r0, r3
 8017a50:	f7fb ff36 	bl	80138c0 <USBD_LL_DevDisconnected>
}
 8017a54:	bf00      	nop
 8017a56:	3708      	adds	r7, #8
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd80      	pop	{r7, pc}

08017a5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	781b      	ldrb	r3, [r3, #0]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d13c      	bne.n	8017ae6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017a6c:	4a20      	ldr	r2, [pc, #128]	; (8017af0 <USBD_LL_Init+0x94>)
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	4a1e      	ldr	r2, [pc, #120]	; (8017af0 <USBD_LL_Init+0x94>)
 8017a78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017a7c:	4b1c      	ldr	r3, [pc, #112]	; (8017af0 <USBD_LL_Init+0x94>)
 8017a7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017a82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017a84:	4b1a      	ldr	r3, [pc, #104]	; (8017af0 <USBD_LL_Init+0x94>)
 8017a86:	2206      	movs	r2, #6
 8017a88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017a8a:	4b19      	ldr	r3, [pc, #100]	; (8017af0 <USBD_LL_Init+0x94>)
 8017a8c:	2202      	movs	r2, #2
 8017a8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017a90:	4b17      	ldr	r3, [pc, #92]	; (8017af0 <USBD_LL_Init+0x94>)
 8017a92:	2200      	movs	r2, #0
 8017a94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017a96:	4b16      	ldr	r3, [pc, #88]	; (8017af0 <USBD_LL_Init+0x94>)
 8017a98:	2202      	movs	r2, #2
 8017a9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017a9c:	4b14      	ldr	r3, [pc, #80]	; (8017af0 <USBD_LL_Init+0x94>)
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017aa2:	4b13      	ldr	r3, [pc, #76]	; (8017af0 <USBD_LL_Init+0x94>)
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017aa8:	4b11      	ldr	r3, [pc, #68]	; (8017af0 <USBD_LL_Init+0x94>)
 8017aaa:	2200      	movs	r2, #0
 8017aac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8017aae:	4b10      	ldr	r3, [pc, #64]	; (8017af0 <USBD_LL_Init+0x94>)
 8017ab0:	2201      	movs	r2, #1
 8017ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017ab4:	4b0e      	ldr	r3, [pc, #56]	; (8017af0 <USBD_LL_Init+0x94>)
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017aba:	480d      	ldr	r0, [pc, #52]	; (8017af0 <USBD_LL_Init+0x94>)
 8017abc:	f7f2 fa91 	bl	8009fe2 <HAL_PCD_Init>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d001      	beq.n	8017aca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017ac6:	f7ea f8c3 	bl	8001c50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017aca:	2180      	movs	r1, #128	; 0x80
 8017acc:	4808      	ldr	r0, [pc, #32]	; (8017af0 <USBD_LL_Init+0x94>)
 8017ace:	f7f3 fc50 	bl	800b372 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017ad2:	2240      	movs	r2, #64	; 0x40
 8017ad4:	2100      	movs	r1, #0
 8017ad6:	4806      	ldr	r0, [pc, #24]	; (8017af0 <USBD_LL_Init+0x94>)
 8017ad8:	f7f3 fc04 	bl	800b2e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017adc:	2280      	movs	r2, #128	; 0x80
 8017ade:	2101      	movs	r1, #1
 8017ae0:	4803      	ldr	r0, [pc, #12]	; (8017af0 <USBD_LL_Init+0x94>)
 8017ae2:	f7f3 fbff 	bl	800b2e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017ae6:	2300      	movs	r3, #0
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3708      	adds	r7, #8
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}
 8017af0:	20003eec 	.word	0x20003eec

08017af4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b084      	sub	sp, #16
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017afc:	2300      	movs	r3, #0
 8017afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b00:	2300      	movs	r3, #0
 8017b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7f2 fb8d 	bl	800a22a <HAL_PCD_Start>
 8017b10:	4603      	mov	r3, r0
 8017b12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b14:	7bfb      	ldrb	r3, [r7, #15]
 8017b16:	4618      	mov	r0, r3
 8017b18:	f000 f9b0 	bl	8017e7c <USBD_Get_USB_Status>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b22:	4618      	mov	r0, r3
 8017b24:	3710      	adds	r7, #16
 8017b26:	46bd      	mov	sp, r7
 8017b28:	bd80      	pop	{r7, pc}

08017b2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017b2a:	b580      	push	{r7, lr}
 8017b2c:	b084      	sub	sp, #16
 8017b2e:	af00      	add	r7, sp, #0
 8017b30:	6078      	str	r0, [r7, #4]
 8017b32:	4608      	mov	r0, r1
 8017b34:	4611      	mov	r1, r2
 8017b36:	461a      	mov	r2, r3
 8017b38:	4603      	mov	r3, r0
 8017b3a:	70fb      	strb	r3, [r7, #3]
 8017b3c:	460b      	mov	r3, r1
 8017b3e:	70bb      	strb	r3, [r7, #2]
 8017b40:	4613      	mov	r3, r2
 8017b42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b44:	2300      	movs	r3, #0
 8017b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b48:	2300      	movs	r3, #0
 8017b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017b52:	78bb      	ldrb	r3, [r7, #2]
 8017b54:	883a      	ldrh	r2, [r7, #0]
 8017b56:	78f9      	ldrb	r1, [r7, #3]
 8017b58:	f7f2 ff9e 	bl	800aa98 <HAL_PCD_EP_Open>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b60:	7bfb      	ldrb	r3, [r7, #15]
 8017b62:	4618      	mov	r0, r3
 8017b64:	f000 f98a 	bl	8017e7c <USBD_Get_USB_Status>
 8017b68:	4603      	mov	r3, r0
 8017b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b6e:	4618      	mov	r0, r3
 8017b70:	3710      	adds	r7, #16
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd80      	pop	{r7, pc}

08017b76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017b76:	b580      	push	{r7, lr}
 8017b78:	b084      	sub	sp, #16
 8017b7a:	af00      	add	r7, sp, #0
 8017b7c:	6078      	str	r0, [r7, #4]
 8017b7e:	460b      	mov	r3, r1
 8017b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b82:	2300      	movs	r3, #0
 8017b84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b86:	2300      	movs	r3, #0
 8017b88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b90:	78fa      	ldrb	r2, [r7, #3]
 8017b92:	4611      	mov	r1, r2
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7f2 ffe7 	bl	800ab68 <HAL_PCD_EP_Close>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b9e:	7bfb      	ldrb	r3, [r7, #15]
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f000 f96b 	bl	8017e7c <USBD_Get_USB_Status>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bac:	4618      	mov	r0, r3
 8017bae:	3710      	adds	r7, #16
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	bd80      	pop	{r7, pc}

08017bb4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b084      	sub	sp, #16
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	460b      	mov	r3, r1
 8017bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017bce:	78fa      	ldrb	r2, [r7, #3]
 8017bd0:	4611      	mov	r1, r2
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f7f3 f979 	bl	800aeca <HAL_PCD_EP_Flush>
 8017bd8:	4603      	mov	r3, r0
 8017bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bdc:	7bfb      	ldrb	r3, [r7, #15]
 8017bde:	4618      	mov	r0, r3
 8017be0:	f000 f94c 	bl	8017e7c <USBD_Get_USB_Status>
 8017be4:	4603      	mov	r3, r0
 8017be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bea:	4618      	mov	r0, r3
 8017bec:	3710      	adds	r7, #16
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}

08017bf2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017bf2:	b580      	push	{r7, lr}
 8017bf4:	b084      	sub	sp, #16
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	6078      	str	r0, [r7, #4]
 8017bfa:	460b      	mov	r3, r1
 8017bfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bfe:	2300      	movs	r3, #0
 8017c00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c02:	2300      	movs	r3, #0
 8017c04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c0c:	78fa      	ldrb	r2, [r7, #3]
 8017c0e:	4611      	mov	r1, r2
 8017c10:	4618      	mov	r0, r3
 8017c12:	f7f3 f8a0 	bl	800ad56 <HAL_PCD_EP_SetStall>
 8017c16:	4603      	mov	r3, r0
 8017c18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c1a:	7bfb      	ldrb	r3, [r7, #15]
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f000 f92d 	bl	8017e7c <USBD_Get_USB_Status>
 8017c22:	4603      	mov	r3, r0
 8017c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c28:	4618      	mov	r0, r3
 8017c2a:	3710      	adds	r7, #16
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}

08017c30 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b084      	sub	sp, #16
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	460b      	mov	r3, r1
 8017c3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c40:	2300      	movs	r3, #0
 8017c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c4a:	78fa      	ldrb	r2, [r7, #3]
 8017c4c:	4611      	mov	r1, r2
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f7f3 f8e5 	bl	800ae1e <HAL_PCD_EP_ClrStall>
 8017c54:	4603      	mov	r3, r0
 8017c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c58:	7bfb      	ldrb	r3, [r7, #15]
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f000 f90e 	bl	8017e7c <USBD_Get_USB_Status>
 8017c60:	4603      	mov	r3, r0
 8017c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c66:	4618      	mov	r0, r3
 8017c68:	3710      	adds	r7, #16
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}

08017c6e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c6e:	b480      	push	{r7}
 8017c70:	b085      	sub	sp, #20
 8017c72:	af00      	add	r7, sp, #0
 8017c74:	6078      	str	r0, [r7, #4]
 8017c76:	460b      	mov	r3, r1
 8017c78:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c80:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	da0b      	bge.n	8017ca2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017c8a:	78fb      	ldrb	r3, [r7, #3]
 8017c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017c90:	68f9      	ldr	r1, [r7, #12]
 8017c92:	4613      	mov	r3, r2
 8017c94:	00db      	lsls	r3, r3, #3
 8017c96:	1a9b      	subs	r3, r3, r2
 8017c98:	009b      	lsls	r3, r3, #2
 8017c9a:	440b      	add	r3, r1
 8017c9c:	333e      	adds	r3, #62	; 0x3e
 8017c9e:	781b      	ldrb	r3, [r3, #0]
 8017ca0:	e00b      	b.n	8017cba <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017ca2:	78fb      	ldrb	r3, [r7, #3]
 8017ca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017ca8:	68f9      	ldr	r1, [r7, #12]
 8017caa:	4613      	mov	r3, r2
 8017cac:	00db      	lsls	r3, r3, #3
 8017cae:	1a9b      	subs	r3, r3, r2
 8017cb0:	009b      	lsls	r3, r3, #2
 8017cb2:	440b      	add	r3, r1
 8017cb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017cb8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017cba:	4618      	mov	r0, r3
 8017cbc:	3714      	adds	r7, #20
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc4:	4770      	bx	lr

08017cc6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017cc6:	b580      	push	{r7, lr}
 8017cc8:	b084      	sub	sp, #16
 8017cca:	af00      	add	r7, sp, #0
 8017ccc:	6078      	str	r0, [r7, #4]
 8017cce:	460b      	mov	r3, r1
 8017cd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017ce0:	78fa      	ldrb	r2, [r7, #3]
 8017ce2:	4611      	mov	r1, r2
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7f2 feb2 	bl	800aa4e <HAL_PCD_SetAddress>
 8017cea:	4603      	mov	r3, r0
 8017cec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017cee:	7bfb      	ldrb	r3, [r7, #15]
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	f000 f8c3 	bl	8017e7c <USBD_Get_USB_Status>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	3710      	adds	r7, #16
 8017d00:	46bd      	mov	sp, r7
 8017d02:	bd80      	pop	{r7, pc}

08017d04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b086      	sub	sp, #24
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	60f8      	str	r0, [r7, #12]
 8017d0c:	607a      	str	r2, [r7, #4]
 8017d0e:	603b      	str	r3, [r7, #0]
 8017d10:	460b      	mov	r3, r1
 8017d12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d14:	2300      	movs	r3, #0
 8017d16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d18:	2300      	movs	r3, #0
 8017d1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017d22:	7af9      	ldrb	r1, [r7, #11]
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	687a      	ldr	r2, [r7, #4]
 8017d28:	f7f2 ffcb 	bl	800acc2 <HAL_PCD_EP_Transmit>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d30:	7dfb      	ldrb	r3, [r7, #23]
 8017d32:	4618      	mov	r0, r3
 8017d34:	f000 f8a2 	bl	8017e7c <USBD_Get_USB_Status>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017d3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8017d3e:	4618      	mov	r0, r3
 8017d40:	3718      	adds	r7, #24
 8017d42:	46bd      	mov	sp, r7
 8017d44:	bd80      	pop	{r7, pc}

08017d46 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d46:	b580      	push	{r7, lr}
 8017d48:	b086      	sub	sp, #24
 8017d4a:	af00      	add	r7, sp, #0
 8017d4c:	60f8      	str	r0, [r7, #12]
 8017d4e:	607a      	str	r2, [r7, #4]
 8017d50:	603b      	str	r3, [r7, #0]
 8017d52:	460b      	mov	r3, r1
 8017d54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d56:	2300      	movs	r3, #0
 8017d58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017d64:	7af9      	ldrb	r1, [r7, #11]
 8017d66:	683b      	ldr	r3, [r7, #0]
 8017d68:	687a      	ldr	r2, [r7, #4]
 8017d6a:	f7f2 ff47 	bl	800abfc <HAL_PCD_EP_Receive>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d72:	7dfb      	ldrb	r3, [r7, #23]
 8017d74:	4618      	mov	r0, r3
 8017d76:	f000 f881 	bl	8017e7c <USBD_Get_USB_Status>
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017d7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017d80:	4618      	mov	r0, r3
 8017d82:	3718      	adds	r7, #24
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b082      	sub	sp, #8
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	460b      	mov	r3, r1
 8017d92:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017d9a:	78fa      	ldrb	r2, [r7, #3]
 8017d9c:	4611      	mov	r1, r2
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7f2 ff77 	bl	800ac92 <HAL_PCD_EP_GetRxCount>
 8017da4:	4603      	mov	r3, r0
}
 8017da6:	4618      	mov	r0, r3
 8017da8:	3708      	adds	r7, #8
 8017daa:	46bd      	mov	sp, r7
 8017dac:	bd80      	pop	{r7, pc}
	...

08017db0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b082      	sub	sp, #8
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]
 8017db8:	460b      	mov	r3, r1
 8017dba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017dbc:	78fb      	ldrb	r3, [r7, #3]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d002      	beq.n	8017dc8 <HAL_PCDEx_LPM_Callback+0x18>
 8017dc2:	2b01      	cmp	r3, #1
 8017dc4:	d01f      	beq.n	8017e06 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017dc6:	e03b      	b.n	8017e40 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	6a1b      	ldr	r3, [r3, #32]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d007      	beq.n	8017de0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8017dd0:	f7e9 fb7e 	bl	80014d0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017dd4:	4b1c      	ldr	r3, [pc, #112]	; (8017e48 <HAL_PCDEx_LPM_Callback+0x98>)
 8017dd6:	691b      	ldr	r3, [r3, #16]
 8017dd8:	4a1b      	ldr	r2, [pc, #108]	; (8017e48 <HAL_PCDEx_LPM_Callback+0x98>)
 8017dda:	f023 0306 	bic.w	r3, r3, #6
 8017dde:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	687a      	ldr	r2, [r7, #4]
 8017dec:	6812      	ldr	r2, [r2, #0]
 8017dee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017df2:	f023 0301 	bic.w	r3, r3, #1
 8017df6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f7fb fccd 	bl	801379e <USBD_LL_Resume>
    break;
 8017e04:	e01c      	b.n	8017e40 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	687a      	ldr	r2, [r7, #4]
 8017e12:	6812      	ldr	r2, [r2, #0]
 8017e14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017e18:	f043 0301 	orr.w	r3, r3, #1
 8017e1c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017e24:	4618      	mov	r0, r3
 8017e26:	f7fb fca4 	bl	8013772 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	6a1b      	ldr	r3, [r3, #32]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d005      	beq.n	8017e3e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017e32:	4b05      	ldr	r3, [pc, #20]	; (8017e48 <HAL_PCDEx_LPM_Callback+0x98>)
 8017e34:	691b      	ldr	r3, [r3, #16]
 8017e36:	4a04      	ldr	r2, [pc, #16]	; (8017e48 <HAL_PCDEx_LPM_Callback+0x98>)
 8017e38:	f043 0306 	orr.w	r3, r3, #6
 8017e3c:	6113      	str	r3, [r2, #16]
    break;
 8017e3e:	bf00      	nop
}
 8017e40:	bf00      	nop
 8017e42:	3708      	adds	r7, #8
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}
 8017e48:	e000ed00 	.word	0xe000ed00

08017e4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017e4c:	b480      	push	{r7}
 8017e4e:	b083      	sub	sp, #12
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017e54:	4b03      	ldr	r3, [pc, #12]	; (8017e64 <USBD_static_malloc+0x18>)
}
 8017e56:	4618      	mov	r0, r3
 8017e58:	370c      	adds	r7, #12
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e60:	4770      	bx	lr
 8017e62:	bf00      	nop
 8017e64:	200042f4 	.word	0x200042f4

08017e68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017e68:	b480      	push	{r7}
 8017e6a:	b083      	sub	sp, #12
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]

}
 8017e70:	bf00      	nop
 8017e72:	370c      	adds	r7, #12
 8017e74:	46bd      	mov	sp, r7
 8017e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7a:	4770      	bx	lr

08017e7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b085      	sub	sp, #20
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	4603      	mov	r3, r0
 8017e84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e86:	2300      	movs	r3, #0
 8017e88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017e8a:	79fb      	ldrb	r3, [r7, #7]
 8017e8c:	2b03      	cmp	r3, #3
 8017e8e:	d817      	bhi.n	8017ec0 <USBD_Get_USB_Status+0x44>
 8017e90:	a201      	add	r2, pc, #4	; (adr r2, 8017e98 <USBD_Get_USB_Status+0x1c>)
 8017e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e96:	bf00      	nop
 8017e98:	08017ea9 	.word	0x08017ea9
 8017e9c:	08017eaf 	.word	0x08017eaf
 8017ea0:	08017eb5 	.word	0x08017eb5
 8017ea4:	08017ebb 	.word	0x08017ebb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8017eac:	e00b      	b.n	8017ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017eae:	2303      	movs	r3, #3
 8017eb0:	73fb      	strb	r3, [r7, #15]
    break;
 8017eb2:	e008      	b.n	8017ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8017eb8:	e005      	b.n	8017ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017eba:	2303      	movs	r3, #3
 8017ebc:	73fb      	strb	r3, [r7, #15]
    break;
 8017ebe:	e002      	b.n	8017ec6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017ec0:	2303      	movs	r3, #3
 8017ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8017ec4:	bf00      	nop
  }
  return usb_status;
 8017ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	3714      	adds	r7, #20
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed2:	4770      	bx	lr

08017ed4 <__errno>:
 8017ed4:	4b01      	ldr	r3, [pc, #4]	; (8017edc <__errno+0x8>)
 8017ed6:	6818      	ldr	r0, [r3, #0]
 8017ed8:	4770      	bx	lr
 8017eda:	bf00      	nop
 8017edc:	20000174 	.word	0x20000174

08017ee0 <__libc_init_array>:
 8017ee0:	b570      	push	{r4, r5, r6, lr}
 8017ee2:	4d0d      	ldr	r5, [pc, #52]	; (8017f18 <__libc_init_array+0x38>)
 8017ee4:	4c0d      	ldr	r4, [pc, #52]	; (8017f1c <__libc_init_array+0x3c>)
 8017ee6:	1b64      	subs	r4, r4, r5
 8017ee8:	10a4      	asrs	r4, r4, #2
 8017eea:	2600      	movs	r6, #0
 8017eec:	42a6      	cmp	r6, r4
 8017eee:	d109      	bne.n	8017f04 <__libc_init_array+0x24>
 8017ef0:	4d0b      	ldr	r5, [pc, #44]	; (8017f20 <__libc_init_array+0x40>)
 8017ef2:	4c0c      	ldr	r4, [pc, #48]	; (8017f24 <__libc_init_array+0x44>)
 8017ef4:	f000 fc8e 	bl	8018814 <_init>
 8017ef8:	1b64      	subs	r4, r4, r5
 8017efa:	10a4      	asrs	r4, r4, #2
 8017efc:	2600      	movs	r6, #0
 8017efe:	42a6      	cmp	r6, r4
 8017f00:	d105      	bne.n	8017f0e <__libc_init_array+0x2e>
 8017f02:	bd70      	pop	{r4, r5, r6, pc}
 8017f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f08:	4798      	blx	r3
 8017f0a:	3601      	adds	r6, #1
 8017f0c:	e7ee      	b.n	8017eec <__libc_init_array+0xc>
 8017f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f12:	4798      	blx	r3
 8017f14:	3601      	adds	r6, #1
 8017f16:	e7f2      	b.n	8017efe <__libc_init_array+0x1e>
 8017f18:	08018dc0 	.word	0x08018dc0
 8017f1c:	08018dc0 	.word	0x08018dc0
 8017f20:	08018dc0 	.word	0x08018dc0
 8017f24:	08018dc4 	.word	0x08018dc4

08017f28 <memset>:
 8017f28:	4402      	add	r2, r0
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	4293      	cmp	r3, r2
 8017f2e:	d100      	bne.n	8017f32 <memset+0xa>
 8017f30:	4770      	bx	lr
 8017f32:	f803 1b01 	strb.w	r1, [r3], #1
 8017f36:	e7f9      	b.n	8017f2c <memset+0x4>

08017f38 <siprintf>:
 8017f38:	b40e      	push	{r1, r2, r3}
 8017f3a:	b500      	push	{lr}
 8017f3c:	b09c      	sub	sp, #112	; 0x70
 8017f3e:	ab1d      	add	r3, sp, #116	; 0x74
 8017f40:	9002      	str	r0, [sp, #8]
 8017f42:	9006      	str	r0, [sp, #24]
 8017f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f48:	4809      	ldr	r0, [pc, #36]	; (8017f70 <siprintf+0x38>)
 8017f4a:	9107      	str	r1, [sp, #28]
 8017f4c:	9104      	str	r1, [sp, #16]
 8017f4e:	4909      	ldr	r1, [pc, #36]	; (8017f74 <siprintf+0x3c>)
 8017f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f54:	9105      	str	r1, [sp, #20]
 8017f56:	6800      	ldr	r0, [r0, #0]
 8017f58:	9301      	str	r3, [sp, #4]
 8017f5a:	a902      	add	r1, sp, #8
 8017f5c:	f000 f868 	bl	8018030 <_svfiprintf_r>
 8017f60:	9b02      	ldr	r3, [sp, #8]
 8017f62:	2200      	movs	r2, #0
 8017f64:	701a      	strb	r2, [r3, #0]
 8017f66:	b01c      	add	sp, #112	; 0x70
 8017f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f6c:	b003      	add	sp, #12
 8017f6e:	4770      	bx	lr
 8017f70:	20000174 	.word	0x20000174
 8017f74:	ffff0208 	.word	0xffff0208

08017f78 <__ssputs_r>:
 8017f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f7c:	688e      	ldr	r6, [r1, #8]
 8017f7e:	429e      	cmp	r6, r3
 8017f80:	4682      	mov	sl, r0
 8017f82:	460c      	mov	r4, r1
 8017f84:	4690      	mov	r8, r2
 8017f86:	461f      	mov	r7, r3
 8017f88:	d838      	bhi.n	8017ffc <__ssputs_r+0x84>
 8017f8a:	898a      	ldrh	r2, [r1, #12]
 8017f8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017f90:	d032      	beq.n	8017ff8 <__ssputs_r+0x80>
 8017f92:	6825      	ldr	r5, [r4, #0]
 8017f94:	6909      	ldr	r1, [r1, #16]
 8017f96:	eba5 0901 	sub.w	r9, r5, r1
 8017f9a:	6965      	ldr	r5, [r4, #20]
 8017f9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017fa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017fa4:	3301      	adds	r3, #1
 8017fa6:	444b      	add	r3, r9
 8017fa8:	106d      	asrs	r5, r5, #1
 8017faa:	429d      	cmp	r5, r3
 8017fac:	bf38      	it	cc
 8017fae:	461d      	movcc	r5, r3
 8017fb0:	0553      	lsls	r3, r2, #21
 8017fb2:	d531      	bpl.n	8018018 <__ssputs_r+0xa0>
 8017fb4:	4629      	mov	r1, r5
 8017fb6:	f000 fb63 	bl	8018680 <_malloc_r>
 8017fba:	4606      	mov	r6, r0
 8017fbc:	b950      	cbnz	r0, 8017fd4 <__ssputs_r+0x5c>
 8017fbe:	230c      	movs	r3, #12
 8017fc0:	f8ca 3000 	str.w	r3, [sl]
 8017fc4:	89a3      	ldrh	r3, [r4, #12]
 8017fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fca:	81a3      	strh	r3, [r4, #12]
 8017fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8017fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fd4:	6921      	ldr	r1, [r4, #16]
 8017fd6:	464a      	mov	r2, r9
 8017fd8:	f000 fabe 	bl	8018558 <memcpy>
 8017fdc:	89a3      	ldrh	r3, [r4, #12]
 8017fde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fe6:	81a3      	strh	r3, [r4, #12]
 8017fe8:	6126      	str	r6, [r4, #16]
 8017fea:	6165      	str	r5, [r4, #20]
 8017fec:	444e      	add	r6, r9
 8017fee:	eba5 0509 	sub.w	r5, r5, r9
 8017ff2:	6026      	str	r6, [r4, #0]
 8017ff4:	60a5      	str	r5, [r4, #8]
 8017ff6:	463e      	mov	r6, r7
 8017ff8:	42be      	cmp	r6, r7
 8017ffa:	d900      	bls.n	8017ffe <__ssputs_r+0x86>
 8017ffc:	463e      	mov	r6, r7
 8017ffe:	6820      	ldr	r0, [r4, #0]
 8018000:	4632      	mov	r2, r6
 8018002:	4641      	mov	r1, r8
 8018004:	f000 fab6 	bl	8018574 <memmove>
 8018008:	68a3      	ldr	r3, [r4, #8]
 801800a:	1b9b      	subs	r3, r3, r6
 801800c:	60a3      	str	r3, [r4, #8]
 801800e:	6823      	ldr	r3, [r4, #0]
 8018010:	4433      	add	r3, r6
 8018012:	6023      	str	r3, [r4, #0]
 8018014:	2000      	movs	r0, #0
 8018016:	e7db      	b.n	8017fd0 <__ssputs_r+0x58>
 8018018:	462a      	mov	r2, r5
 801801a:	f000 fba5 	bl	8018768 <_realloc_r>
 801801e:	4606      	mov	r6, r0
 8018020:	2800      	cmp	r0, #0
 8018022:	d1e1      	bne.n	8017fe8 <__ssputs_r+0x70>
 8018024:	6921      	ldr	r1, [r4, #16]
 8018026:	4650      	mov	r0, sl
 8018028:	f000 fabe 	bl	80185a8 <_free_r>
 801802c:	e7c7      	b.n	8017fbe <__ssputs_r+0x46>
	...

08018030 <_svfiprintf_r>:
 8018030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018034:	4698      	mov	r8, r3
 8018036:	898b      	ldrh	r3, [r1, #12]
 8018038:	061b      	lsls	r3, r3, #24
 801803a:	b09d      	sub	sp, #116	; 0x74
 801803c:	4607      	mov	r7, r0
 801803e:	460d      	mov	r5, r1
 8018040:	4614      	mov	r4, r2
 8018042:	d50e      	bpl.n	8018062 <_svfiprintf_r+0x32>
 8018044:	690b      	ldr	r3, [r1, #16]
 8018046:	b963      	cbnz	r3, 8018062 <_svfiprintf_r+0x32>
 8018048:	2140      	movs	r1, #64	; 0x40
 801804a:	f000 fb19 	bl	8018680 <_malloc_r>
 801804e:	6028      	str	r0, [r5, #0]
 8018050:	6128      	str	r0, [r5, #16]
 8018052:	b920      	cbnz	r0, 801805e <_svfiprintf_r+0x2e>
 8018054:	230c      	movs	r3, #12
 8018056:	603b      	str	r3, [r7, #0]
 8018058:	f04f 30ff 	mov.w	r0, #4294967295
 801805c:	e0d1      	b.n	8018202 <_svfiprintf_r+0x1d2>
 801805e:	2340      	movs	r3, #64	; 0x40
 8018060:	616b      	str	r3, [r5, #20]
 8018062:	2300      	movs	r3, #0
 8018064:	9309      	str	r3, [sp, #36]	; 0x24
 8018066:	2320      	movs	r3, #32
 8018068:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801806c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018070:	2330      	movs	r3, #48	; 0x30
 8018072:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801821c <_svfiprintf_r+0x1ec>
 8018076:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801807a:	f04f 0901 	mov.w	r9, #1
 801807e:	4623      	mov	r3, r4
 8018080:	469a      	mov	sl, r3
 8018082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018086:	b10a      	cbz	r2, 801808c <_svfiprintf_r+0x5c>
 8018088:	2a25      	cmp	r2, #37	; 0x25
 801808a:	d1f9      	bne.n	8018080 <_svfiprintf_r+0x50>
 801808c:	ebba 0b04 	subs.w	fp, sl, r4
 8018090:	d00b      	beq.n	80180aa <_svfiprintf_r+0x7a>
 8018092:	465b      	mov	r3, fp
 8018094:	4622      	mov	r2, r4
 8018096:	4629      	mov	r1, r5
 8018098:	4638      	mov	r0, r7
 801809a:	f7ff ff6d 	bl	8017f78 <__ssputs_r>
 801809e:	3001      	adds	r0, #1
 80180a0:	f000 80aa 	beq.w	80181f8 <_svfiprintf_r+0x1c8>
 80180a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80180a6:	445a      	add	r2, fp
 80180a8:	9209      	str	r2, [sp, #36]	; 0x24
 80180aa:	f89a 3000 	ldrb.w	r3, [sl]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	f000 80a2 	beq.w	80181f8 <_svfiprintf_r+0x1c8>
 80180b4:	2300      	movs	r3, #0
 80180b6:	f04f 32ff 	mov.w	r2, #4294967295
 80180ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180be:	f10a 0a01 	add.w	sl, sl, #1
 80180c2:	9304      	str	r3, [sp, #16]
 80180c4:	9307      	str	r3, [sp, #28]
 80180c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80180ca:	931a      	str	r3, [sp, #104]	; 0x68
 80180cc:	4654      	mov	r4, sl
 80180ce:	2205      	movs	r2, #5
 80180d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180d4:	4851      	ldr	r0, [pc, #324]	; (801821c <_svfiprintf_r+0x1ec>)
 80180d6:	f7e8 f89b 	bl	8000210 <memchr>
 80180da:	9a04      	ldr	r2, [sp, #16]
 80180dc:	b9d8      	cbnz	r0, 8018116 <_svfiprintf_r+0xe6>
 80180de:	06d0      	lsls	r0, r2, #27
 80180e0:	bf44      	itt	mi
 80180e2:	2320      	movmi	r3, #32
 80180e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80180e8:	0711      	lsls	r1, r2, #28
 80180ea:	bf44      	itt	mi
 80180ec:	232b      	movmi	r3, #43	; 0x2b
 80180ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80180f2:	f89a 3000 	ldrb.w	r3, [sl]
 80180f6:	2b2a      	cmp	r3, #42	; 0x2a
 80180f8:	d015      	beq.n	8018126 <_svfiprintf_r+0xf6>
 80180fa:	9a07      	ldr	r2, [sp, #28]
 80180fc:	4654      	mov	r4, sl
 80180fe:	2000      	movs	r0, #0
 8018100:	f04f 0c0a 	mov.w	ip, #10
 8018104:	4621      	mov	r1, r4
 8018106:	f811 3b01 	ldrb.w	r3, [r1], #1
 801810a:	3b30      	subs	r3, #48	; 0x30
 801810c:	2b09      	cmp	r3, #9
 801810e:	d94e      	bls.n	80181ae <_svfiprintf_r+0x17e>
 8018110:	b1b0      	cbz	r0, 8018140 <_svfiprintf_r+0x110>
 8018112:	9207      	str	r2, [sp, #28]
 8018114:	e014      	b.n	8018140 <_svfiprintf_r+0x110>
 8018116:	eba0 0308 	sub.w	r3, r0, r8
 801811a:	fa09 f303 	lsl.w	r3, r9, r3
 801811e:	4313      	orrs	r3, r2
 8018120:	9304      	str	r3, [sp, #16]
 8018122:	46a2      	mov	sl, r4
 8018124:	e7d2      	b.n	80180cc <_svfiprintf_r+0x9c>
 8018126:	9b03      	ldr	r3, [sp, #12]
 8018128:	1d19      	adds	r1, r3, #4
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	9103      	str	r1, [sp, #12]
 801812e:	2b00      	cmp	r3, #0
 8018130:	bfbb      	ittet	lt
 8018132:	425b      	neglt	r3, r3
 8018134:	f042 0202 	orrlt.w	r2, r2, #2
 8018138:	9307      	strge	r3, [sp, #28]
 801813a:	9307      	strlt	r3, [sp, #28]
 801813c:	bfb8      	it	lt
 801813e:	9204      	strlt	r2, [sp, #16]
 8018140:	7823      	ldrb	r3, [r4, #0]
 8018142:	2b2e      	cmp	r3, #46	; 0x2e
 8018144:	d10c      	bne.n	8018160 <_svfiprintf_r+0x130>
 8018146:	7863      	ldrb	r3, [r4, #1]
 8018148:	2b2a      	cmp	r3, #42	; 0x2a
 801814a:	d135      	bne.n	80181b8 <_svfiprintf_r+0x188>
 801814c:	9b03      	ldr	r3, [sp, #12]
 801814e:	1d1a      	adds	r2, r3, #4
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	9203      	str	r2, [sp, #12]
 8018154:	2b00      	cmp	r3, #0
 8018156:	bfb8      	it	lt
 8018158:	f04f 33ff 	movlt.w	r3, #4294967295
 801815c:	3402      	adds	r4, #2
 801815e:	9305      	str	r3, [sp, #20]
 8018160:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801822c <_svfiprintf_r+0x1fc>
 8018164:	7821      	ldrb	r1, [r4, #0]
 8018166:	2203      	movs	r2, #3
 8018168:	4650      	mov	r0, sl
 801816a:	f7e8 f851 	bl	8000210 <memchr>
 801816e:	b140      	cbz	r0, 8018182 <_svfiprintf_r+0x152>
 8018170:	2340      	movs	r3, #64	; 0x40
 8018172:	eba0 000a 	sub.w	r0, r0, sl
 8018176:	fa03 f000 	lsl.w	r0, r3, r0
 801817a:	9b04      	ldr	r3, [sp, #16]
 801817c:	4303      	orrs	r3, r0
 801817e:	3401      	adds	r4, #1
 8018180:	9304      	str	r3, [sp, #16]
 8018182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018186:	4826      	ldr	r0, [pc, #152]	; (8018220 <_svfiprintf_r+0x1f0>)
 8018188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801818c:	2206      	movs	r2, #6
 801818e:	f7e8 f83f 	bl	8000210 <memchr>
 8018192:	2800      	cmp	r0, #0
 8018194:	d038      	beq.n	8018208 <_svfiprintf_r+0x1d8>
 8018196:	4b23      	ldr	r3, [pc, #140]	; (8018224 <_svfiprintf_r+0x1f4>)
 8018198:	bb1b      	cbnz	r3, 80181e2 <_svfiprintf_r+0x1b2>
 801819a:	9b03      	ldr	r3, [sp, #12]
 801819c:	3307      	adds	r3, #7
 801819e:	f023 0307 	bic.w	r3, r3, #7
 80181a2:	3308      	adds	r3, #8
 80181a4:	9303      	str	r3, [sp, #12]
 80181a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181a8:	4433      	add	r3, r6
 80181aa:	9309      	str	r3, [sp, #36]	; 0x24
 80181ac:	e767      	b.n	801807e <_svfiprintf_r+0x4e>
 80181ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80181b2:	460c      	mov	r4, r1
 80181b4:	2001      	movs	r0, #1
 80181b6:	e7a5      	b.n	8018104 <_svfiprintf_r+0xd4>
 80181b8:	2300      	movs	r3, #0
 80181ba:	3401      	adds	r4, #1
 80181bc:	9305      	str	r3, [sp, #20]
 80181be:	4619      	mov	r1, r3
 80181c0:	f04f 0c0a 	mov.w	ip, #10
 80181c4:	4620      	mov	r0, r4
 80181c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181ca:	3a30      	subs	r2, #48	; 0x30
 80181cc:	2a09      	cmp	r2, #9
 80181ce:	d903      	bls.n	80181d8 <_svfiprintf_r+0x1a8>
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d0c5      	beq.n	8018160 <_svfiprintf_r+0x130>
 80181d4:	9105      	str	r1, [sp, #20]
 80181d6:	e7c3      	b.n	8018160 <_svfiprintf_r+0x130>
 80181d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80181dc:	4604      	mov	r4, r0
 80181de:	2301      	movs	r3, #1
 80181e0:	e7f0      	b.n	80181c4 <_svfiprintf_r+0x194>
 80181e2:	ab03      	add	r3, sp, #12
 80181e4:	9300      	str	r3, [sp, #0]
 80181e6:	462a      	mov	r2, r5
 80181e8:	4b0f      	ldr	r3, [pc, #60]	; (8018228 <_svfiprintf_r+0x1f8>)
 80181ea:	a904      	add	r1, sp, #16
 80181ec:	4638      	mov	r0, r7
 80181ee:	f3af 8000 	nop.w
 80181f2:	1c42      	adds	r2, r0, #1
 80181f4:	4606      	mov	r6, r0
 80181f6:	d1d6      	bne.n	80181a6 <_svfiprintf_r+0x176>
 80181f8:	89ab      	ldrh	r3, [r5, #12]
 80181fa:	065b      	lsls	r3, r3, #25
 80181fc:	f53f af2c 	bmi.w	8018058 <_svfiprintf_r+0x28>
 8018200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018202:	b01d      	add	sp, #116	; 0x74
 8018204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018208:	ab03      	add	r3, sp, #12
 801820a:	9300      	str	r3, [sp, #0]
 801820c:	462a      	mov	r2, r5
 801820e:	4b06      	ldr	r3, [pc, #24]	; (8018228 <_svfiprintf_r+0x1f8>)
 8018210:	a904      	add	r1, sp, #16
 8018212:	4638      	mov	r0, r7
 8018214:	f000 f87a 	bl	801830c <_printf_i>
 8018218:	e7eb      	b.n	80181f2 <_svfiprintf_r+0x1c2>
 801821a:	bf00      	nop
 801821c:	08018d84 	.word	0x08018d84
 8018220:	08018d8e 	.word	0x08018d8e
 8018224:	00000000 	.word	0x00000000
 8018228:	08017f79 	.word	0x08017f79
 801822c:	08018d8a 	.word	0x08018d8a

08018230 <_printf_common>:
 8018230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018234:	4616      	mov	r6, r2
 8018236:	4699      	mov	r9, r3
 8018238:	688a      	ldr	r2, [r1, #8]
 801823a:	690b      	ldr	r3, [r1, #16]
 801823c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018240:	4293      	cmp	r3, r2
 8018242:	bfb8      	it	lt
 8018244:	4613      	movlt	r3, r2
 8018246:	6033      	str	r3, [r6, #0]
 8018248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801824c:	4607      	mov	r7, r0
 801824e:	460c      	mov	r4, r1
 8018250:	b10a      	cbz	r2, 8018256 <_printf_common+0x26>
 8018252:	3301      	adds	r3, #1
 8018254:	6033      	str	r3, [r6, #0]
 8018256:	6823      	ldr	r3, [r4, #0]
 8018258:	0699      	lsls	r1, r3, #26
 801825a:	bf42      	ittt	mi
 801825c:	6833      	ldrmi	r3, [r6, #0]
 801825e:	3302      	addmi	r3, #2
 8018260:	6033      	strmi	r3, [r6, #0]
 8018262:	6825      	ldr	r5, [r4, #0]
 8018264:	f015 0506 	ands.w	r5, r5, #6
 8018268:	d106      	bne.n	8018278 <_printf_common+0x48>
 801826a:	f104 0a19 	add.w	sl, r4, #25
 801826e:	68e3      	ldr	r3, [r4, #12]
 8018270:	6832      	ldr	r2, [r6, #0]
 8018272:	1a9b      	subs	r3, r3, r2
 8018274:	42ab      	cmp	r3, r5
 8018276:	dc26      	bgt.n	80182c6 <_printf_common+0x96>
 8018278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801827c:	1e13      	subs	r3, r2, #0
 801827e:	6822      	ldr	r2, [r4, #0]
 8018280:	bf18      	it	ne
 8018282:	2301      	movne	r3, #1
 8018284:	0692      	lsls	r2, r2, #26
 8018286:	d42b      	bmi.n	80182e0 <_printf_common+0xb0>
 8018288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801828c:	4649      	mov	r1, r9
 801828e:	4638      	mov	r0, r7
 8018290:	47c0      	blx	r8
 8018292:	3001      	adds	r0, #1
 8018294:	d01e      	beq.n	80182d4 <_printf_common+0xa4>
 8018296:	6823      	ldr	r3, [r4, #0]
 8018298:	68e5      	ldr	r5, [r4, #12]
 801829a:	6832      	ldr	r2, [r6, #0]
 801829c:	f003 0306 	and.w	r3, r3, #6
 80182a0:	2b04      	cmp	r3, #4
 80182a2:	bf08      	it	eq
 80182a4:	1aad      	subeq	r5, r5, r2
 80182a6:	68a3      	ldr	r3, [r4, #8]
 80182a8:	6922      	ldr	r2, [r4, #16]
 80182aa:	bf0c      	ite	eq
 80182ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80182b0:	2500      	movne	r5, #0
 80182b2:	4293      	cmp	r3, r2
 80182b4:	bfc4      	itt	gt
 80182b6:	1a9b      	subgt	r3, r3, r2
 80182b8:	18ed      	addgt	r5, r5, r3
 80182ba:	2600      	movs	r6, #0
 80182bc:	341a      	adds	r4, #26
 80182be:	42b5      	cmp	r5, r6
 80182c0:	d11a      	bne.n	80182f8 <_printf_common+0xc8>
 80182c2:	2000      	movs	r0, #0
 80182c4:	e008      	b.n	80182d8 <_printf_common+0xa8>
 80182c6:	2301      	movs	r3, #1
 80182c8:	4652      	mov	r2, sl
 80182ca:	4649      	mov	r1, r9
 80182cc:	4638      	mov	r0, r7
 80182ce:	47c0      	blx	r8
 80182d0:	3001      	adds	r0, #1
 80182d2:	d103      	bne.n	80182dc <_printf_common+0xac>
 80182d4:	f04f 30ff 	mov.w	r0, #4294967295
 80182d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182dc:	3501      	adds	r5, #1
 80182de:	e7c6      	b.n	801826e <_printf_common+0x3e>
 80182e0:	18e1      	adds	r1, r4, r3
 80182e2:	1c5a      	adds	r2, r3, #1
 80182e4:	2030      	movs	r0, #48	; 0x30
 80182e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80182ea:	4422      	add	r2, r4
 80182ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80182f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80182f4:	3302      	adds	r3, #2
 80182f6:	e7c7      	b.n	8018288 <_printf_common+0x58>
 80182f8:	2301      	movs	r3, #1
 80182fa:	4622      	mov	r2, r4
 80182fc:	4649      	mov	r1, r9
 80182fe:	4638      	mov	r0, r7
 8018300:	47c0      	blx	r8
 8018302:	3001      	adds	r0, #1
 8018304:	d0e6      	beq.n	80182d4 <_printf_common+0xa4>
 8018306:	3601      	adds	r6, #1
 8018308:	e7d9      	b.n	80182be <_printf_common+0x8e>
	...

0801830c <_printf_i>:
 801830c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018310:	7e0f      	ldrb	r7, [r1, #24]
 8018312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018314:	2f78      	cmp	r7, #120	; 0x78
 8018316:	4691      	mov	r9, r2
 8018318:	4680      	mov	r8, r0
 801831a:	460c      	mov	r4, r1
 801831c:	469a      	mov	sl, r3
 801831e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018322:	d807      	bhi.n	8018334 <_printf_i+0x28>
 8018324:	2f62      	cmp	r7, #98	; 0x62
 8018326:	d80a      	bhi.n	801833e <_printf_i+0x32>
 8018328:	2f00      	cmp	r7, #0
 801832a:	f000 80d8 	beq.w	80184de <_printf_i+0x1d2>
 801832e:	2f58      	cmp	r7, #88	; 0x58
 8018330:	f000 80a3 	beq.w	801847a <_printf_i+0x16e>
 8018334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801833c:	e03a      	b.n	80183b4 <_printf_i+0xa8>
 801833e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018342:	2b15      	cmp	r3, #21
 8018344:	d8f6      	bhi.n	8018334 <_printf_i+0x28>
 8018346:	a101      	add	r1, pc, #4	; (adr r1, 801834c <_printf_i+0x40>)
 8018348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801834c:	080183a5 	.word	0x080183a5
 8018350:	080183b9 	.word	0x080183b9
 8018354:	08018335 	.word	0x08018335
 8018358:	08018335 	.word	0x08018335
 801835c:	08018335 	.word	0x08018335
 8018360:	08018335 	.word	0x08018335
 8018364:	080183b9 	.word	0x080183b9
 8018368:	08018335 	.word	0x08018335
 801836c:	08018335 	.word	0x08018335
 8018370:	08018335 	.word	0x08018335
 8018374:	08018335 	.word	0x08018335
 8018378:	080184c5 	.word	0x080184c5
 801837c:	080183e9 	.word	0x080183e9
 8018380:	080184a7 	.word	0x080184a7
 8018384:	08018335 	.word	0x08018335
 8018388:	08018335 	.word	0x08018335
 801838c:	080184e7 	.word	0x080184e7
 8018390:	08018335 	.word	0x08018335
 8018394:	080183e9 	.word	0x080183e9
 8018398:	08018335 	.word	0x08018335
 801839c:	08018335 	.word	0x08018335
 80183a0:	080184af 	.word	0x080184af
 80183a4:	682b      	ldr	r3, [r5, #0]
 80183a6:	1d1a      	adds	r2, r3, #4
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	602a      	str	r2, [r5, #0]
 80183ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80183b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80183b4:	2301      	movs	r3, #1
 80183b6:	e0a3      	b.n	8018500 <_printf_i+0x1f4>
 80183b8:	6820      	ldr	r0, [r4, #0]
 80183ba:	6829      	ldr	r1, [r5, #0]
 80183bc:	0606      	lsls	r6, r0, #24
 80183be:	f101 0304 	add.w	r3, r1, #4
 80183c2:	d50a      	bpl.n	80183da <_printf_i+0xce>
 80183c4:	680e      	ldr	r6, [r1, #0]
 80183c6:	602b      	str	r3, [r5, #0]
 80183c8:	2e00      	cmp	r6, #0
 80183ca:	da03      	bge.n	80183d4 <_printf_i+0xc8>
 80183cc:	232d      	movs	r3, #45	; 0x2d
 80183ce:	4276      	negs	r6, r6
 80183d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80183d4:	485e      	ldr	r0, [pc, #376]	; (8018550 <_printf_i+0x244>)
 80183d6:	230a      	movs	r3, #10
 80183d8:	e019      	b.n	801840e <_printf_i+0x102>
 80183da:	680e      	ldr	r6, [r1, #0]
 80183dc:	602b      	str	r3, [r5, #0]
 80183de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80183e2:	bf18      	it	ne
 80183e4:	b236      	sxthne	r6, r6
 80183e6:	e7ef      	b.n	80183c8 <_printf_i+0xbc>
 80183e8:	682b      	ldr	r3, [r5, #0]
 80183ea:	6820      	ldr	r0, [r4, #0]
 80183ec:	1d19      	adds	r1, r3, #4
 80183ee:	6029      	str	r1, [r5, #0]
 80183f0:	0601      	lsls	r1, r0, #24
 80183f2:	d501      	bpl.n	80183f8 <_printf_i+0xec>
 80183f4:	681e      	ldr	r6, [r3, #0]
 80183f6:	e002      	b.n	80183fe <_printf_i+0xf2>
 80183f8:	0646      	lsls	r6, r0, #25
 80183fa:	d5fb      	bpl.n	80183f4 <_printf_i+0xe8>
 80183fc:	881e      	ldrh	r6, [r3, #0]
 80183fe:	4854      	ldr	r0, [pc, #336]	; (8018550 <_printf_i+0x244>)
 8018400:	2f6f      	cmp	r7, #111	; 0x6f
 8018402:	bf0c      	ite	eq
 8018404:	2308      	moveq	r3, #8
 8018406:	230a      	movne	r3, #10
 8018408:	2100      	movs	r1, #0
 801840a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801840e:	6865      	ldr	r5, [r4, #4]
 8018410:	60a5      	str	r5, [r4, #8]
 8018412:	2d00      	cmp	r5, #0
 8018414:	bfa2      	ittt	ge
 8018416:	6821      	ldrge	r1, [r4, #0]
 8018418:	f021 0104 	bicge.w	r1, r1, #4
 801841c:	6021      	strge	r1, [r4, #0]
 801841e:	b90e      	cbnz	r6, 8018424 <_printf_i+0x118>
 8018420:	2d00      	cmp	r5, #0
 8018422:	d04d      	beq.n	80184c0 <_printf_i+0x1b4>
 8018424:	4615      	mov	r5, r2
 8018426:	fbb6 f1f3 	udiv	r1, r6, r3
 801842a:	fb03 6711 	mls	r7, r3, r1, r6
 801842e:	5dc7      	ldrb	r7, [r0, r7]
 8018430:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018434:	4637      	mov	r7, r6
 8018436:	42bb      	cmp	r3, r7
 8018438:	460e      	mov	r6, r1
 801843a:	d9f4      	bls.n	8018426 <_printf_i+0x11a>
 801843c:	2b08      	cmp	r3, #8
 801843e:	d10b      	bne.n	8018458 <_printf_i+0x14c>
 8018440:	6823      	ldr	r3, [r4, #0]
 8018442:	07de      	lsls	r6, r3, #31
 8018444:	d508      	bpl.n	8018458 <_printf_i+0x14c>
 8018446:	6923      	ldr	r3, [r4, #16]
 8018448:	6861      	ldr	r1, [r4, #4]
 801844a:	4299      	cmp	r1, r3
 801844c:	bfde      	ittt	le
 801844e:	2330      	movle	r3, #48	; 0x30
 8018450:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018454:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018458:	1b52      	subs	r2, r2, r5
 801845a:	6122      	str	r2, [r4, #16]
 801845c:	f8cd a000 	str.w	sl, [sp]
 8018460:	464b      	mov	r3, r9
 8018462:	aa03      	add	r2, sp, #12
 8018464:	4621      	mov	r1, r4
 8018466:	4640      	mov	r0, r8
 8018468:	f7ff fee2 	bl	8018230 <_printf_common>
 801846c:	3001      	adds	r0, #1
 801846e:	d14c      	bne.n	801850a <_printf_i+0x1fe>
 8018470:	f04f 30ff 	mov.w	r0, #4294967295
 8018474:	b004      	add	sp, #16
 8018476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801847a:	4835      	ldr	r0, [pc, #212]	; (8018550 <_printf_i+0x244>)
 801847c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018480:	6829      	ldr	r1, [r5, #0]
 8018482:	6823      	ldr	r3, [r4, #0]
 8018484:	f851 6b04 	ldr.w	r6, [r1], #4
 8018488:	6029      	str	r1, [r5, #0]
 801848a:	061d      	lsls	r5, r3, #24
 801848c:	d514      	bpl.n	80184b8 <_printf_i+0x1ac>
 801848e:	07df      	lsls	r7, r3, #31
 8018490:	bf44      	itt	mi
 8018492:	f043 0320 	orrmi.w	r3, r3, #32
 8018496:	6023      	strmi	r3, [r4, #0]
 8018498:	b91e      	cbnz	r6, 80184a2 <_printf_i+0x196>
 801849a:	6823      	ldr	r3, [r4, #0]
 801849c:	f023 0320 	bic.w	r3, r3, #32
 80184a0:	6023      	str	r3, [r4, #0]
 80184a2:	2310      	movs	r3, #16
 80184a4:	e7b0      	b.n	8018408 <_printf_i+0xfc>
 80184a6:	6823      	ldr	r3, [r4, #0]
 80184a8:	f043 0320 	orr.w	r3, r3, #32
 80184ac:	6023      	str	r3, [r4, #0]
 80184ae:	2378      	movs	r3, #120	; 0x78
 80184b0:	4828      	ldr	r0, [pc, #160]	; (8018554 <_printf_i+0x248>)
 80184b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80184b6:	e7e3      	b.n	8018480 <_printf_i+0x174>
 80184b8:	0659      	lsls	r1, r3, #25
 80184ba:	bf48      	it	mi
 80184bc:	b2b6      	uxthmi	r6, r6
 80184be:	e7e6      	b.n	801848e <_printf_i+0x182>
 80184c0:	4615      	mov	r5, r2
 80184c2:	e7bb      	b.n	801843c <_printf_i+0x130>
 80184c4:	682b      	ldr	r3, [r5, #0]
 80184c6:	6826      	ldr	r6, [r4, #0]
 80184c8:	6961      	ldr	r1, [r4, #20]
 80184ca:	1d18      	adds	r0, r3, #4
 80184cc:	6028      	str	r0, [r5, #0]
 80184ce:	0635      	lsls	r5, r6, #24
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	d501      	bpl.n	80184d8 <_printf_i+0x1cc>
 80184d4:	6019      	str	r1, [r3, #0]
 80184d6:	e002      	b.n	80184de <_printf_i+0x1d2>
 80184d8:	0670      	lsls	r0, r6, #25
 80184da:	d5fb      	bpl.n	80184d4 <_printf_i+0x1c8>
 80184dc:	8019      	strh	r1, [r3, #0]
 80184de:	2300      	movs	r3, #0
 80184e0:	6123      	str	r3, [r4, #16]
 80184e2:	4615      	mov	r5, r2
 80184e4:	e7ba      	b.n	801845c <_printf_i+0x150>
 80184e6:	682b      	ldr	r3, [r5, #0]
 80184e8:	1d1a      	adds	r2, r3, #4
 80184ea:	602a      	str	r2, [r5, #0]
 80184ec:	681d      	ldr	r5, [r3, #0]
 80184ee:	6862      	ldr	r2, [r4, #4]
 80184f0:	2100      	movs	r1, #0
 80184f2:	4628      	mov	r0, r5
 80184f4:	f7e7 fe8c 	bl	8000210 <memchr>
 80184f8:	b108      	cbz	r0, 80184fe <_printf_i+0x1f2>
 80184fa:	1b40      	subs	r0, r0, r5
 80184fc:	6060      	str	r0, [r4, #4]
 80184fe:	6863      	ldr	r3, [r4, #4]
 8018500:	6123      	str	r3, [r4, #16]
 8018502:	2300      	movs	r3, #0
 8018504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018508:	e7a8      	b.n	801845c <_printf_i+0x150>
 801850a:	6923      	ldr	r3, [r4, #16]
 801850c:	462a      	mov	r2, r5
 801850e:	4649      	mov	r1, r9
 8018510:	4640      	mov	r0, r8
 8018512:	47d0      	blx	sl
 8018514:	3001      	adds	r0, #1
 8018516:	d0ab      	beq.n	8018470 <_printf_i+0x164>
 8018518:	6823      	ldr	r3, [r4, #0]
 801851a:	079b      	lsls	r3, r3, #30
 801851c:	d413      	bmi.n	8018546 <_printf_i+0x23a>
 801851e:	68e0      	ldr	r0, [r4, #12]
 8018520:	9b03      	ldr	r3, [sp, #12]
 8018522:	4298      	cmp	r0, r3
 8018524:	bfb8      	it	lt
 8018526:	4618      	movlt	r0, r3
 8018528:	e7a4      	b.n	8018474 <_printf_i+0x168>
 801852a:	2301      	movs	r3, #1
 801852c:	4632      	mov	r2, r6
 801852e:	4649      	mov	r1, r9
 8018530:	4640      	mov	r0, r8
 8018532:	47d0      	blx	sl
 8018534:	3001      	adds	r0, #1
 8018536:	d09b      	beq.n	8018470 <_printf_i+0x164>
 8018538:	3501      	adds	r5, #1
 801853a:	68e3      	ldr	r3, [r4, #12]
 801853c:	9903      	ldr	r1, [sp, #12]
 801853e:	1a5b      	subs	r3, r3, r1
 8018540:	42ab      	cmp	r3, r5
 8018542:	dcf2      	bgt.n	801852a <_printf_i+0x21e>
 8018544:	e7eb      	b.n	801851e <_printf_i+0x212>
 8018546:	2500      	movs	r5, #0
 8018548:	f104 0619 	add.w	r6, r4, #25
 801854c:	e7f5      	b.n	801853a <_printf_i+0x22e>
 801854e:	bf00      	nop
 8018550:	08018d95 	.word	0x08018d95
 8018554:	08018da6 	.word	0x08018da6

08018558 <memcpy>:
 8018558:	440a      	add	r2, r1
 801855a:	4291      	cmp	r1, r2
 801855c:	f100 33ff 	add.w	r3, r0, #4294967295
 8018560:	d100      	bne.n	8018564 <memcpy+0xc>
 8018562:	4770      	bx	lr
 8018564:	b510      	push	{r4, lr}
 8018566:	f811 4b01 	ldrb.w	r4, [r1], #1
 801856a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801856e:	4291      	cmp	r1, r2
 8018570:	d1f9      	bne.n	8018566 <memcpy+0xe>
 8018572:	bd10      	pop	{r4, pc}

08018574 <memmove>:
 8018574:	4288      	cmp	r0, r1
 8018576:	b510      	push	{r4, lr}
 8018578:	eb01 0402 	add.w	r4, r1, r2
 801857c:	d902      	bls.n	8018584 <memmove+0x10>
 801857e:	4284      	cmp	r4, r0
 8018580:	4623      	mov	r3, r4
 8018582:	d807      	bhi.n	8018594 <memmove+0x20>
 8018584:	1e43      	subs	r3, r0, #1
 8018586:	42a1      	cmp	r1, r4
 8018588:	d008      	beq.n	801859c <memmove+0x28>
 801858a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801858e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018592:	e7f8      	b.n	8018586 <memmove+0x12>
 8018594:	4402      	add	r2, r0
 8018596:	4601      	mov	r1, r0
 8018598:	428a      	cmp	r2, r1
 801859a:	d100      	bne.n	801859e <memmove+0x2a>
 801859c:	bd10      	pop	{r4, pc}
 801859e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80185a6:	e7f7      	b.n	8018598 <memmove+0x24>

080185a8 <_free_r>:
 80185a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80185aa:	2900      	cmp	r1, #0
 80185ac:	d044      	beq.n	8018638 <_free_r+0x90>
 80185ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185b2:	9001      	str	r0, [sp, #4]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	f1a1 0404 	sub.w	r4, r1, #4
 80185ba:	bfb8      	it	lt
 80185bc:	18e4      	addlt	r4, r4, r3
 80185be:	f000 f913 	bl	80187e8 <__malloc_lock>
 80185c2:	4a1e      	ldr	r2, [pc, #120]	; (801863c <_free_r+0x94>)
 80185c4:	9801      	ldr	r0, [sp, #4]
 80185c6:	6813      	ldr	r3, [r2, #0]
 80185c8:	b933      	cbnz	r3, 80185d8 <_free_r+0x30>
 80185ca:	6063      	str	r3, [r4, #4]
 80185cc:	6014      	str	r4, [r2, #0]
 80185ce:	b003      	add	sp, #12
 80185d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80185d4:	f000 b90e 	b.w	80187f4 <__malloc_unlock>
 80185d8:	42a3      	cmp	r3, r4
 80185da:	d908      	bls.n	80185ee <_free_r+0x46>
 80185dc:	6825      	ldr	r5, [r4, #0]
 80185de:	1961      	adds	r1, r4, r5
 80185e0:	428b      	cmp	r3, r1
 80185e2:	bf01      	itttt	eq
 80185e4:	6819      	ldreq	r1, [r3, #0]
 80185e6:	685b      	ldreq	r3, [r3, #4]
 80185e8:	1949      	addeq	r1, r1, r5
 80185ea:	6021      	streq	r1, [r4, #0]
 80185ec:	e7ed      	b.n	80185ca <_free_r+0x22>
 80185ee:	461a      	mov	r2, r3
 80185f0:	685b      	ldr	r3, [r3, #4]
 80185f2:	b10b      	cbz	r3, 80185f8 <_free_r+0x50>
 80185f4:	42a3      	cmp	r3, r4
 80185f6:	d9fa      	bls.n	80185ee <_free_r+0x46>
 80185f8:	6811      	ldr	r1, [r2, #0]
 80185fa:	1855      	adds	r5, r2, r1
 80185fc:	42a5      	cmp	r5, r4
 80185fe:	d10b      	bne.n	8018618 <_free_r+0x70>
 8018600:	6824      	ldr	r4, [r4, #0]
 8018602:	4421      	add	r1, r4
 8018604:	1854      	adds	r4, r2, r1
 8018606:	42a3      	cmp	r3, r4
 8018608:	6011      	str	r1, [r2, #0]
 801860a:	d1e0      	bne.n	80185ce <_free_r+0x26>
 801860c:	681c      	ldr	r4, [r3, #0]
 801860e:	685b      	ldr	r3, [r3, #4]
 8018610:	6053      	str	r3, [r2, #4]
 8018612:	4421      	add	r1, r4
 8018614:	6011      	str	r1, [r2, #0]
 8018616:	e7da      	b.n	80185ce <_free_r+0x26>
 8018618:	d902      	bls.n	8018620 <_free_r+0x78>
 801861a:	230c      	movs	r3, #12
 801861c:	6003      	str	r3, [r0, #0]
 801861e:	e7d6      	b.n	80185ce <_free_r+0x26>
 8018620:	6825      	ldr	r5, [r4, #0]
 8018622:	1961      	adds	r1, r4, r5
 8018624:	428b      	cmp	r3, r1
 8018626:	bf04      	itt	eq
 8018628:	6819      	ldreq	r1, [r3, #0]
 801862a:	685b      	ldreq	r3, [r3, #4]
 801862c:	6063      	str	r3, [r4, #4]
 801862e:	bf04      	itt	eq
 8018630:	1949      	addeq	r1, r1, r5
 8018632:	6021      	streq	r1, [r4, #0]
 8018634:	6054      	str	r4, [r2, #4]
 8018636:	e7ca      	b.n	80185ce <_free_r+0x26>
 8018638:	b003      	add	sp, #12
 801863a:	bd30      	pop	{r4, r5, pc}
 801863c:	2000456c 	.word	0x2000456c

08018640 <sbrk_aligned>:
 8018640:	b570      	push	{r4, r5, r6, lr}
 8018642:	4e0e      	ldr	r6, [pc, #56]	; (801867c <sbrk_aligned+0x3c>)
 8018644:	460c      	mov	r4, r1
 8018646:	6831      	ldr	r1, [r6, #0]
 8018648:	4605      	mov	r5, r0
 801864a:	b911      	cbnz	r1, 8018652 <sbrk_aligned+0x12>
 801864c:	f000 f8bc 	bl	80187c8 <_sbrk_r>
 8018650:	6030      	str	r0, [r6, #0]
 8018652:	4621      	mov	r1, r4
 8018654:	4628      	mov	r0, r5
 8018656:	f000 f8b7 	bl	80187c8 <_sbrk_r>
 801865a:	1c43      	adds	r3, r0, #1
 801865c:	d00a      	beq.n	8018674 <sbrk_aligned+0x34>
 801865e:	1cc4      	adds	r4, r0, #3
 8018660:	f024 0403 	bic.w	r4, r4, #3
 8018664:	42a0      	cmp	r0, r4
 8018666:	d007      	beq.n	8018678 <sbrk_aligned+0x38>
 8018668:	1a21      	subs	r1, r4, r0
 801866a:	4628      	mov	r0, r5
 801866c:	f000 f8ac 	bl	80187c8 <_sbrk_r>
 8018670:	3001      	adds	r0, #1
 8018672:	d101      	bne.n	8018678 <sbrk_aligned+0x38>
 8018674:	f04f 34ff 	mov.w	r4, #4294967295
 8018678:	4620      	mov	r0, r4
 801867a:	bd70      	pop	{r4, r5, r6, pc}
 801867c:	20004570 	.word	0x20004570

08018680 <_malloc_r>:
 8018680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018684:	1ccd      	adds	r5, r1, #3
 8018686:	f025 0503 	bic.w	r5, r5, #3
 801868a:	3508      	adds	r5, #8
 801868c:	2d0c      	cmp	r5, #12
 801868e:	bf38      	it	cc
 8018690:	250c      	movcc	r5, #12
 8018692:	2d00      	cmp	r5, #0
 8018694:	4607      	mov	r7, r0
 8018696:	db01      	blt.n	801869c <_malloc_r+0x1c>
 8018698:	42a9      	cmp	r1, r5
 801869a:	d905      	bls.n	80186a8 <_malloc_r+0x28>
 801869c:	230c      	movs	r3, #12
 801869e:	603b      	str	r3, [r7, #0]
 80186a0:	2600      	movs	r6, #0
 80186a2:	4630      	mov	r0, r6
 80186a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186a8:	4e2e      	ldr	r6, [pc, #184]	; (8018764 <_malloc_r+0xe4>)
 80186aa:	f000 f89d 	bl	80187e8 <__malloc_lock>
 80186ae:	6833      	ldr	r3, [r6, #0]
 80186b0:	461c      	mov	r4, r3
 80186b2:	bb34      	cbnz	r4, 8018702 <_malloc_r+0x82>
 80186b4:	4629      	mov	r1, r5
 80186b6:	4638      	mov	r0, r7
 80186b8:	f7ff ffc2 	bl	8018640 <sbrk_aligned>
 80186bc:	1c43      	adds	r3, r0, #1
 80186be:	4604      	mov	r4, r0
 80186c0:	d14d      	bne.n	801875e <_malloc_r+0xde>
 80186c2:	6834      	ldr	r4, [r6, #0]
 80186c4:	4626      	mov	r6, r4
 80186c6:	2e00      	cmp	r6, #0
 80186c8:	d140      	bne.n	801874c <_malloc_r+0xcc>
 80186ca:	6823      	ldr	r3, [r4, #0]
 80186cc:	4631      	mov	r1, r6
 80186ce:	4638      	mov	r0, r7
 80186d0:	eb04 0803 	add.w	r8, r4, r3
 80186d4:	f000 f878 	bl	80187c8 <_sbrk_r>
 80186d8:	4580      	cmp	r8, r0
 80186da:	d13a      	bne.n	8018752 <_malloc_r+0xd2>
 80186dc:	6821      	ldr	r1, [r4, #0]
 80186de:	3503      	adds	r5, #3
 80186e0:	1a6d      	subs	r5, r5, r1
 80186e2:	f025 0503 	bic.w	r5, r5, #3
 80186e6:	3508      	adds	r5, #8
 80186e8:	2d0c      	cmp	r5, #12
 80186ea:	bf38      	it	cc
 80186ec:	250c      	movcc	r5, #12
 80186ee:	4629      	mov	r1, r5
 80186f0:	4638      	mov	r0, r7
 80186f2:	f7ff ffa5 	bl	8018640 <sbrk_aligned>
 80186f6:	3001      	adds	r0, #1
 80186f8:	d02b      	beq.n	8018752 <_malloc_r+0xd2>
 80186fa:	6823      	ldr	r3, [r4, #0]
 80186fc:	442b      	add	r3, r5
 80186fe:	6023      	str	r3, [r4, #0]
 8018700:	e00e      	b.n	8018720 <_malloc_r+0xa0>
 8018702:	6822      	ldr	r2, [r4, #0]
 8018704:	1b52      	subs	r2, r2, r5
 8018706:	d41e      	bmi.n	8018746 <_malloc_r+0xc6>
 8018708:	2a0b      	cmp	r2, #11
 801870a:	d916      	bls.n	801873a <_malloc_r+0xba>
 801870c:	1961      	adds	r1, r4, r5
 801870e:	42a3      	cmp	r3, r4
 8018710:	6025      	str	r5, [r4, #0]
 8018712:	bf18      	it	ne
 8018714:	6059      	strne	r1, [r3, #4]
 8018716:	6863      	ldr	r3, [r4, #4]
 8018718:	bf08      	it	eq
 801871a:	6031      	streq	r1, [r6, #0]
 801871c:	5162      	str	r2, [r4, r5]
 801871e:	604b      	str	r3, [r1, #4]
 8018720:	4638      	mov	r0, r7
 8018722:	f104 060b 	add.w	r6, r4, #11
 8018726:	f000 f865 	bl	80187f4 <__malloc_unlock>
 801872a:	f026 0607 	bic.w	r6, r6, #7
 801872e:	1d23      	adds	r3, r4, #4
 8018730:	1af2      	subs	r2, r6, r3
 8018732:	d0b6      	beq.n	80186a2 <_malloc_r+0x22>
 8018734:	1b9b      	subs	r3, r3, r6
 8018736:	50a3      	str	r3, [r4, r2]
 8018738:	e7b3      	b.n	80186a2 <_malloc_r+0x22>
 801873a:	6862      	ldr	r2, [r4, #4]
 801873c:	42a3      	cmp	r3, r4
 801873e:	bf0c      	ite	eq
 8018740:	6032      	streq	r2, [r6, #0]
 8018742:	605a      	strne	r2, [r3, #4]
 8018744:	e7ec      	b.n	8018720 <_malloc_r+0xa0>
 8018746:	4623      	mov	r3, r4
 8018748:	6864      	ldr	r4, [r4, #4]
 801874a:	e7b2      	b.n	80186b2 <_malloc_r+0x32>
 801874c:	4634      	mov	r4, r6
 801874e:	6876      	ldr	r6, [r6, #4]
 8018750:	e7b9      	b.n	80186c6 <_malloc_r+0x46>
 8018752:	230c      	movs	r3, #12
 8018754:	603b      	str	r3, [r7, #0]
 8018756:	4638      	mov	r0, r7
 8018758:	f000 f84c 	bl	80187f4 <__malloc_unlock>
 801875c:	e7a1      	b.n	80186a2 <_malloc_r+0x22>
 801875e:	6025      	str	r5, [r4, #0]
 8018760:	e7de      	b.n	8018720 <_malloc_r+0xa0>
 8018762:	bf00      	nop
 8018764:	2000456c 	.word	0x2000456c

08018768 <_realloc_r>:
 8018768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801876c:	4680      	mov	r8, r0
 801876e:	4614      	mov	r4, r2
 8018770:	460e      	mov	r6, r1
 8018772:	b921      	cbnz	r1, 801877e <_realloc_r+0x16>
 8018774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018778:	4611      	mov	r1, r2
 801877a:	f7ff bf81 	b.w	8018680 <_malloc_r>
 801877e:	b92a      	cbnz	r2, 801878c <_realloc_r+0x24>
 8018780:	f7ff ff12 	bl	80185a8 <_free_r>
 8018784:	4625      	mov	r5, r4
 8018786:	4628      	mov	r0, r5
 8018788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801878c:	f000 f838 	bl	8018800 <_malloc_usable_size_r>
 8018790:	4284      	cmp	r4, r0
 8018792:	4607      	mov	r7, r0
 8018794:	d802      	bhi.n	801879c <_realloc_r+0x34>
 8018796:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801879a:	d812      	bhi.n	80187c2 <_realloc_r+0x5a>
 801879c:	4621      	mov	r1, r4
 801879e:	4640      	mov	r0, r8
 80187a0:	f7ff ff6e 	bl	8018680 <_malloc_r>
 80187a4:	4605      	mov	r5, r0
 80187a6:	2800      	cmp	r0, #0
 80187a8:	d0ed      	beq.n	8018786 <_realloc_r+0x1e>
 80187aa:	42bc      	cmp	r4, r7
 80187ac:	4622      	mov	r2, r4
 80187ae:	4631      	mov	r1, r6
 80187b0:	bf28      	it	cs
 80187b2:	463a      	movcs	r2, r7
 80187b4:	f7ff fed0 	bl	8018558 <memcpy>
 80187b8:	4631      	mov	r1, r6
 80187ba:	4640      	mov	r0, r8
 80187bc:	f7ff fef4 	bl	80185a8 <_free_r>
 80187c0:	e7e1      	b.n	8018786 <_realloc_r+0x1e>
 80187c2:	4635      	mov	r5, r6
 80187c4:	e7df      	b.n	8018786 <_realloc_r+0x1e>
	...

080187c8 <_sbrk_r>:
 80187c8:	b538      	push	{r3, r4, r5, lr}
 80187ca:	4d06      	ldr	r5, [pc, #24]	; (80187e4 <_sbrk_r+0x1c>)
 80187cc:	2300      	movs	r3, #0
 80187ce:	4604      	mov	r4, r0
 80187d0:	4608      	mov	r0, r1
 80187d2:	602b      	str	r3, [r5, #0]
 80187d4:	f7ee f98a 	bl	8006aec <_sbrk>
 80187d8:	1c43      	adds	r3, r0, #1
 80187da:	d102      	bne.n	80187e2 <_sbrk_r+0x1a>
 80187dc:	682b      	ldr	r3, [r5, #0]
 80187de:	b103      	cbz	r3, 80187e2 <_sbrk_r+0x1a>
 80187e0:	6023      	str	r3, [r4, #0]
 80187e2:	bd38      	pop	{r3, r4, r5, pc}
 80187e4:	20004574 	.word	0x20004574

080187e8 <__malloc_lock>:
 80187e8:	4801      	ldr	r0, [pc, #4]	; (80187f0 <__malloc_lock+0x8>)
 80187ea:	f000 b811 	b.w	8018810 <__retarget_lock_acquire_recursive>
 80187ee:	bf00      	nop
 80187f0:	20004578 	.word	0x20004578

080187f4 <__malloc_unlock>:
 80187f4:	4801      	ldr	r0, [pc, #4]	; (80187fc <__malloc_unlock+0x8>)
 80187f6:	f000 b80c 	b.w	8018812 <__retarget_lock_release_recursive>
 80187fa:	bf00      	nop
 80187fc:	20004578 	.word	0x20004578

08018800 <_malloc_usable_size_r>:
 8018800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018804:	1f18      	subs	r0, r3, #4
 8018806:	2b00      	cmp	r3, #0
 8018808:	bfbc      	itt	lt
 801880a:	580b      	ldrlt	r3, [r1, r0]
 801880c:	18c0      	addlt	r0, r0, r3
 801880e:	4770      	bx	lr

08018810 <__retarget_lock_acquire_recursive>:
 8018810:	4770      	bx	lr

08018812 <__retarget_lock_release_recursive>:
 8018812:	4770      	bx	lr

08018814 <_init>:
 8018814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018816:	bf00      	nop
 8018818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801881a:	bc08      	pop	{r3}
 801881c:	469e      	mov	lr, r3
 801881e:	4770      	bx	lr

08018820 <_fini>:
 8018820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018822:	bf00      	nop
 8018824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018826:	bc08      	pop	{r3}
 8018828:	469e      	mov	lr, r3
 801882a:	4770      	bx	lr
