
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017538  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08017708  08017708  00027708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c88  08017c88  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08017c88  08017c88  00027c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c90  08017c90  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c90  08017c90  00027c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017c94  08017c94  00027c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08017c98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000560c  200001d8  08017e70  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  200057e4  08017e70  000357e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004112e  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007605  00000000  00000000  00071336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002260  00000000  00000000  00078940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f58  00000000  00000000  0007aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ea0e  00000000  00000000  0007caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034f2a  00000000  00000000  000ab506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f33f8  00000000  00000000  000e0430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d3828  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091c0  00000000  00000000  001d387c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080176f0 	.word	0x080176f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080176f0 	.word	0x080176f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <FT_CAN_FilterConfig>:
 */

#include "ft_can.h"

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b090      	sub	sp, #64	; 0x40
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	817b      	strh	r3, [r7, #10]
 80005b6:	4613      	mov	r3, r2
 80005b8:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 13, mask_id = 0x1FF80000;
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	035b      	lsls	r3, r3, #13
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <FT_CAN_FilterConfig+0x68>)
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005c4:	7a7b      	ldrb	r3, [r7, #9]
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d2:	0b5b      	lsrs	r3, r3, #13
 80005d4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	b29b      	uxth	r3, r3
 80005dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e0:	0b5b      	lsrs	r3, r3, #13
 80005e2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 80005f4:	7a7b      	ldrb	r3, [r7, #9]
 80005f6:	330e      	adds	r3, #14
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f006 fca9 	bl	8006f58 <HAL_CAN_ConfigFilter>
 8000606:	4603      	mov	r3, r0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3740      	adds	r7, #64	; 0x40
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	1ff80000 	.word	0x1ff80000

08000614 <FT_CAN_ProcessData>:

#ifndef FT_CAN_SIMPLE

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000622:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800062a:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 823a 	bne.w	8000aac <FT_CAN_ProcessData+0x498>
	{
		return;
	}

	switch(id >> 1)
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	2b8d      	cmp	r3, #141	; 0x8d
 8000640:	f300 8166 	bgt.w	8000910 <FT_CAN_ProcessData+0x2fc>
 8000644:	2b00      	cmp	r3, #0
 8000646:	dc41      	bgt.n	80006cc <FT_CAN_ProcessData+0xb8>
 8000648:	e229      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
 800064a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800064e:	2b1b      	cmp	r3, #27
 8000650:	f200 8225 	bhi.w	8000a9e <FT_CAN_ProcessData+0x48a>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <FT_CAN_ProcessData+0x48>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	08000a63 	.word	0x08000a63
 8000660:	08000a9f 	.word	0x08000a9f
 8000664:	08000a9f 	.word	0x08000a9f
 8000668:	08000a9f 	.word	0x08000a9f
 800066c:	08000a9f 	.word	0x08000a9f
 8000670:	08000a9f 	.word	0x08000a9f
 8000674:	08000a9f 	.word	0x08000a9f
 8000678:	08000a9f 	.word	0x08000a9f
 800067c:	08000a9f 	.word	0x08000a9f
 8000680:	08000a9f 	.word	0x08000a9f
 8000684:	08000a9f 	.word	0x08000a9f
 8000688:	08000a9f 	.word	0x08000a9f
 800068c:	08000a9f 	.word	0x08000a9f
 8000690:	08000a9f 	.word	0x08000a9f
 8000694:	08000a9f 	.word	0x08000a9f
 8000698:	08000a9f 	.word	0x08000a9f
 800069c:	08000a9f 	.word	0x08000a9f
 80006a0:	08000a9f 	.word	0x08000a9f
 80006a4:	08000a6d 	.word	0x08000a6d
 80006a8:	08000a9f 	.word	0x08000a9f
 80006ac:	08000a9f 	.word	0x08000a9f
 80006b0:	08000a9f 	.word	0x08000a9f
 80006b4:	08000a9f 	.word	0x08000a9f
 80006b8:	08000a9f 	.word	0x08000a9f
 80006bc:	08000a77 	.word	0x08000a77
 80006c0:	08000a81 	.word	0x08000a81
 80006c4:	08000a8b 	.word	0x08000a8b
 80006c8:	08000a95 	.word	0x08000a95
 80006cc:	3b01      	subs	r3, #1
 80006ce:	2b8c      	cmp	r3, #140	; 0x8c
 80006d0:	f200 81e5 	bhi.w	8000a9e <FT_CAN_ProcessData+0x48a>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <FT_CAN_ProcessData+0xc8>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	08000923 	.word	0x08000923
 80006e0:	0800092f 	.word	0x0800092f
 80006e4:	08000939 	.word	0x08000939
 80006e8:	08000943 	.word	0x08000943
 80006ec:	0800094d 	.word	0x0800094d
 80006f0:	08000959 	.word	0x08000959
 80006f4:	08000963 	.word	0x08000963
 80006f8:	080009a5 	.word	0x080009a5
 80006fc:	080009af 	.word	0x080009af
 8000700:	080009b9 	.word	0x080009b9
 8000704:	080009c3 	.word	0x080009c3
 8000708:	080009cd 	.word	0x080009cd
 800070c:	080009d7 	.word	0x080009d7
 8000710:	080009e1 	.word	0x080009e1
 8000714:	080009eb 	.word	0x080009eb
 8000718:	080009f5 	.word	0x080009f5
 800071c:	0800096d 	.word	0x0800096d
 8000720:	08000a9f 	.word	0x08000a9f
 8000724:	08000a9f 	.word	0x08000a9f
 8000728:	08000a9f 	.word	0x08000a9f
 800072c:	08000a9f 	.word	0x08000a9f
 8000730:	08000a9f 	.word	0x08000a9f
 8000734:	08000a9f 	.word	0x08000a9f
 8000738:	08000a9f 	.word	0x08000a9f
 800073c:	08000a9f 	.word	0x08000a9f
 8000740:	08000a9f 	.word	0x08000a9f
 8000744:	08000a9f 	.word	0x08000a9f
 8000748:	08000a9f 	.word	0x08000a9f
 800074c:	08000a9f 	.word	0x08000a9f
 8000750:	08000a9f 	.word	0x08000a9f
 8000754:	08000a9f 	.word	0x08000a9f
 8000758:	08000a9f 	.word	0x08000a9f
 800075c:	08000a9f 	.word	0x08000a9f
 8000760:	08000a9f 	.word	0x08000a9f
 8000764:	08000a9f 	.word	0x08000a9f
 8000768:	08000a9f 	.word	0x08000a9f
 800076c:	08000a9f 	.word	0x08000a9f
 8000770:	08000a9f 	.word	0x08000a9f
 8000774:	08000977 	.word	0x08000977
 8000778:	08000a9f 	.word	0x08000a9f
 800077c:	08000a9f 	.word	0x08000a9f
 8000780:	08000a9f 	.word	0x08000a9f
 8000784:	08000a9f 	.word	0x08000a9f
 8000788:	08000a9f 	.word	0x08000a9f
 800078c:	08000a9f 	.word	0x08000a9f
 8000790:	08000a9f 	.word	0x08000a9f
 8000794:	08000a9f 	.word	0x08000a9f
 8000798:	08000a9f 	.word	0x08000a9f
 800079c:	08000a9f 	.word	0x08000a9f
 80007a0:	08000a9f 	.word	0x08000a9f
 80007a4:	08000a9f 	.word	0x08000a9f
 80007a8:	08000a9f 	.word	0x08000a9f
 80007ac:	08000a9f 	.word	0x08000a9f
 80007b0:	08000a9f 	.word	0x08000a9f
 80007b4:	08000a9f 	.word	0x08000a9f
 80007b8:	08000a9f 	.word	0x08000a9f
 80007bc:	08000a9f 	.word	0x08000a9f
 80007c0:	08000a9f 	.word	0x08000a9f
 80007c4:	08000a9f 	.word	0x08000a9f
 80007c8:	08000a9f 	.word	0x08000a9f
 80007cc:	08000a9f 	.word	0x08000a9f
 80007d0:	08000a9f 	.word	0x08000a9f
 80007d4:	08000a9f 	.word	0x08000a9f
 80007d8:	08000a9f 	.word	0x08000a9f
 80007dc:	08000a9f 	.word	0x08000a9f
 80007e0:	08000981 	.word	0x08000981
 80007e4:	08000a9f 	.word	0x08000a9f
 80007e8:	08000a9f 	.word	0x08000a9f
 80007ec:	08000a9f 	.word	0x08000a9f
 80007f0:	08000a9f 	.word	0x08000a9f
 80007f4:	08000a9f 	.word	0x08000a9f
 80007f8:	080009ff 	.word	0x080009ff
 80007fc:	08000a09 	.word	0x08000a09
 8000800:	08000a13 	.word	0x08000a13
 8000804:	08000a1d 	.word	0x08000a1d
 8000808:	08000a27 	.word	0x08000a27
 800080c:	08000a31 	.word	0x08000a31
 8000810:	08000a3b 	.word	0x08000a3b
 8000814:	08000a45 	.word	0x08000a45
 8000818:	08000a4f 	.word	0x08000a4f
 800081c:	08000a59 	.word	0x08000a59
 8000820:	08000a9f 	.word	0x08000a9f
 8000824:	08000a9f 	.word	0x08000a9f
 8000828:	08000a9f 	.word	0x08000a9f
 800082c:	08000a9f 	.word	0x08000a9f
 8000830:	08000a9f 	.word	0x08000a9f
 8000834:	08000a9f 	.word	0x08000a9f
 8000838:	08000a9f 	.word	0x08000a9f
 800083c:	08000a9f 	.word	0x08000a9f
 8000840:	08000a9f 	.word	0x08000a9f
 8000844:	08000a9f 	.word	0x08000a9f
 8000848:	08000a9f 	.word	0x08000a9f
 800084c:	08000a9f 	.word	0x08000a9f
 8000850:	08000a9f 	.word	0x08000a9f
 8000854:	08000a9f 	.word	0x08000a9f
 8000858:	08000a9f 	.word	0x08000a9f
 800085c:	08000a9f 	.word	0x08000a9f
 8000860:	08000a9f 	.word	0x08000a9f
 8000864:	08000a9f 	.word	0x08000a9f
 8000868:	08000a9f 	.word	0x08000a9f
 800086c:	08000a9f 	.word	0x08000a9f
 8000870:	08000a9f 	.word	0x08000a9f
 8000874:	08000a9f 	.word	0x08000a9f
 8000878:	08000a9f 	.word	0x08000a9f
 800087c:	08000a9f 	.word	0x08000a9f
 8000880:	08000a9f 	.word	0x08000a9f
 8000884:	08000a9f 	.word	0x08000a9f
 8000888:	08000a9f 	.word	0x08000a9f
 800088c:	08000a9f 	.word	0x08000a9f
 8000890:	08000a9f 	.word	0x08000a9f
 8000894:	08000a9f 	.word	0x08000a9f
 8000898:	08000a9f 	.word	0x08000a9f
 800089c:	08000a9f 	.word	0x08000a9f
 80008a0:	08000a9f 	.word	0x08000a9f
 80008a4:	08000a9f 	.word	0x08000a9f
 80008a8:	08000a9f 	.word	0x08000a9f
 80008ac:	08000a9f 	.word	0x08000a9f
 80008b0:	08000a9f 	.word	0x08000a9f
 80008b4:	08000a9f 	.word	0x08000a9f
 80008b8:	08000a9f 	.word	0x08000a9f
 80008bc:	08000a9f 	.word	0x08000a9f
 80008c0:	08000a9f 	.word	0x08000a9f
 80008c4:	08000a9f 	.word	0x08000a9f
 80008c8:	08000a9f 	.word	0x08000a9f
 80008cc:	08000a9f 	.word	0x08000a9f
 80008d0:	08000a9f 	.word	0x08000a9f
 80008d4:	08000a9f 	.word	0x08000a9f
 80008d8:	08000a9f 	.word	0x08000a9f
 80008dc:	08000a9f 	.word	0x08000a9f
 80008e0:	08000a9f 	.word	0x08000a9f
 80008e4:	08000a9f 	.word	0x08000a9f
 80008e8:	08000a9f 	.word	0x08000a9f
 80008ec:	08000a9f 	.word	0x08000a9f
 80008f0:	08000a9f 	.word	0x08000a9f
 80008f4:	08000a9f 	.word	0x08000a9f
 80008f8:	08000a9f 	.word	0x08000a9f
 80008fc:	08000a9f 	.word	0x08000a9f
 8000900:	08000a9f 	.word	0x08000a9f
 8000904:	08000a9f 	.word	0x08000a9f
 8000908:	0800098d 	.word	0x0800098d
 800090c:	08000999 	.word	0x08000999
 8000910:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000914:	f280 80c3 	bge.w	8000a9e <FT_CAN_ProcessData+0x48a>
 8000918:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800091c:	f6bf ae95 	bge.w	800064a <FT_CAN_ProcessData+0x36>
 8000920:	e0bd      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 8000922:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 800092c:	e0b7      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 800092e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 8000936:	e0b2      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8000938:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8000940:	e0ad      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 8000942:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 800094a:	e0a8      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 800094c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 8000956:	e0a2      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8000958:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8000960:	e09d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 8000962:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 800096a:	e098      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 800096c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8000974:	e093      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 8000976:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800097e:	e08e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 8000980:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 800098a:	e088      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 800098c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 8000996:	e082      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 8000998:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 80009a2:	e07c      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 80009a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	831a      	strh	r2, [r3, #24]
			break;
 80009ac:	e077      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 80009ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	805a      	strh	r2, [r3, #2]
			break;
 80009b6:	e072      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 80009b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 80009c0:	e06d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 80009c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	841a      	strh	r2, [r3, #32]
			break;
 80009ca:	e068      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 80009cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 80009d4:	e063      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 80009d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 80009de:	e05e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 80009e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 80009e8:	e059      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 80009ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 80009f2:	e054      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 80009f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	821a      	strh	r2, [r3, #16]
			break;
 80009fc:	e04f      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 80009fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	839a      	strh	r2, [r3, #28]
			break;
 8000a06:	e04a      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 8000a08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	83da      	strh	r2, [r3, #30]
			break;
 8000a10:	e045      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8000a12:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	835a      	strh	r2, [r3, #26]
			break;
 8000a1a:	e040      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 8000a1c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	819a      	strh	r2, [r3, #12]
			break;
 8000a24:	e03b      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 8000a26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	801a      	strh	r2, [r3, #0]
			break;
 8000a2e:	e036      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 8000a30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	811a      	strh	r2, [r3, #8]
			break;
 8000a38:	e031      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 8000a3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	825a      	strh	r2, [r3, #18]
			break;
 8000a42:	e02c      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 8000a44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	829a      	strh	r2, [r3, #20]
			break;
 8000a4c:	e027      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 8000a4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	82da      	strh	r2, [r3, #22]
			break;
 8000a56:	e022      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 8000a58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	815a      	strh	r2, [r3, #10]
			break;
 8000a60:	e01d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 8000a62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	809a      	strh	r2, [r3, #4]
			break;
 8000a6a:	e018      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8000a6c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8000a74:	e013      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 8000a76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	81da      	strh	r2, [r3, #14]
			break;
 8000a7e:	e00e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8000a80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	80da      	strh	r2, [r3, #6]
			break;
 8000a88:	e009      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 8000a8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8000a92:	e004      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 8000a94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8000a9c:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8000a9e:	89ba      	ldrh	r2, [r7, #12]
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f805 	bl	8000ab4 <FT_CAN_ProcessCustomData>
 8000aaa:	e000      	b.n	8000aae <FT_CAN_ProcessData+0x49a>
		return;
 8000aac:	bf00      	nop
}
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	80fb      	strh	r3, [r7, #6]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <FT_CAN_ReceiveData>:

#endif

void FT_CAN_ReceiveData(uint32_t RxID, uint32_t RxLength, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	466b      	mov	r3, sp
 8000ae0:	461d      	mov	r5, r3
	uint32_t extid = (RxID & 0x1FF80000) >> 13;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	0b5a      	lsrs	r2, r3, #13
 8000ae6:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000aea:	4013      	ands	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]

	if(		   (extid != FT_Gear_Controller)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000af4:	d02d      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Knock_Meter)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	f240 1241 	movw	r2, #321	; 0x141
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d028      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Boost_Controller2)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000b06:	d024      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Injector_Driver)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000b0e:	d020      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Nano)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000b16:	d01c      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Slim)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	f240 2241 	movw	r2, #577	; 0x241
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d017      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Alcohol_O2)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	f240 2242 	movw	r2, #578	; 0x242
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d012      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FTSpark)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	f240 2243 	movw	r2, #579	; 0x243
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d00d      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Switchpad)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000b3c:	d009      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT500)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000b44:	d005      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT600))
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	f240 2281 	movw	r2, #641	; 0x281
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	f040 8381 	bne.w	8001254 <FT_CAN_ReceiveData+0x784>
		return;

	uint8_t buffer[RxLength];
 8000b52:	68bc      	ldr	r4, [r7, #8]
 8000b54:	4623      	mov	r3, r4
 8000b56:	3b01      	subs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f04f 0100 	mov.w	r1, #0
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	00cb      	lsls	r3, r1, #3
 8000b6a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b6e:	00c2      	lsls	r2, r0, #3
 8000b70:	4620      	mov	r0, r4
 8000b72:	f04f 0100 	mov.w	r1, #0
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	00cb      	lsls	r3, r1, #3
 8000b80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b84:	00c2      	lsls	r2, r0, #3
 8000b86:	1de3      	adds	r3, r4, #7
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	ebad 0d03 	sub.w	sp, sp, r3
 8000b90:	466b      	mov	r3, sp
 8000b92:	3300      	adds	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < RxLength; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	77fb      	strb	r3, [r7, #31]
 8000b9a:	e009      	b.n	8000bb0 <FT_CAN_ReceiveData+0xe0>
		buffer[i] = pData[i];
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	441a      	add	r2, r3
 8000ba2:	7ffb      	ldrb	r3, [r7, #31]
 8000ba4:	7811      	ldrb	r1, [r2, #0]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < RxLength; i++)
 8000baa:	7ffb      	ldrb	r3, [r7, #31]
 8000bac:	3301      	adds	r3, #1
 8000bae:	77fb      	strb	r3, [r7, #31]
 8000bb0:	7ffb      	ldrb	r3, [r7, #31]
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f1      	bhi.n	8000b9c <FT_CAN_ReceiveData+0xcc>

	if((((RxID / 0x800) & 0x7) == 0x00) || (((RxID / 0x800) & 0x7) == 0x01))
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	0adb      	lsrs	r3, r3, #11
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <FT_CAN_ReceiveData+0x102>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	0adb      	lsrs	r3, r3, #11
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	f040 8139 	bne.w	8000e44 <FT_CAN_ReceiveData+0x374>
	{
		if((RxID & 0xFFF) == 0x600)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000bdc:	d142      	bne.n	8000c64 <FT_CAN_ReceiveData+0x194>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->tps |= buffer[1];
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map  = buffer[2] << 8;
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	789b      	ldrb	r3, [r3, #2]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->map |= buffer[3];
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->iat  = buffer[4] << 8;
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->iat |= buffer[5];
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	795b      	ldrb	r3, [r3, #5]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	799b      	ldrb	r3, [r3, #6]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->ect |= buffer[7];
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	79db      	ldrb	r3, [r3, #7]
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	865a      	strh	r2, [r3, #50]	; 0x32

			return;
 8000c62:	e2f8      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x601)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c6a:	f240 6201 	movw	r2, #1537	; 0x601
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d142      	bne.n	8000cf8 <FT_CAN_ReceiveData+0x228>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	789b      	ldrb	r3, [r3, #2]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->coolant_pressure |= buffer[5];
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	799b      	ldrb	r3, [r3, #6]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->gear 			 |= buffer[7];
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	79db      	ldrb	r3, [r3, #7]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	875a      	strh	r2, [r3, #58]	; 0x3a

			return;
 8000cf6:	e2ae      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x602)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfe:	f240 6202 	movw	r2, #1538	; 0x602
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d146      	bne.n	8000d94 <FT_CAN_ReceiveData+0x2c4>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->lambda 			|= buffer[1];
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm 			|= buffer[3];
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	78db      	ldrb	r3, [r3, #3]
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	795b      	ldrb	r3, [r3, #5]
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	799b      	ldrb	r3, [r3, #6]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	79db      	ldrb	r3, [r3, #7]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 8000d92:	e260      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}

#ifndef FT_CAN_SIMPLE
		else if((RxID & 0xFF) == 0xFF)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2bff      	cmp	r3, #255	; 0xff
 8000d9a:	f040 8258 	bne.w	800124e <FT_CAN_ReceiveData+0x77e>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[1];
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	785b      	ldrb	r3, [r3, #1]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	789b      	ldrb	r3, [r3, #2]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[3];
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	78db      	ldrb	r3, [r3, #3]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f7ff fc12 	bl	8000614 <FT_CAN_ProcessData>

			FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	791b      	ldrb	r3, [r3, #4]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[5];
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[6] << 8;
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	799b      	ldrb	r3, [r3, #6]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[7];
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	79db      	ldrb	r3, [r3, #7]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000e3c:	6838      	ldr	r0, [r7, #0]
 8000e3e:	f7ff fbe9 	bl	8000614 <FT_CAN_ProcessData>

			return;
 8000e42:	e208      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
	}

	else if(buffer[0] == 0xFF)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d129      	bne.n	8000ea0 <FT_CAN_ReceiveData+0x3d0>
	{
		FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_id 	 |= buffer[2];
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_content  = buffer[3] << 8;
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	78db      	ldrb	r3, [r3, #3]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		FT_Data_Struct->data_content |= buffer[4];
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		FT_CAN_ProcessData(FT_Data_Struct);
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f7ff fbbb 	bl	8000614 <FT_CAN_ProcessData>

		return;
 8000e9e:	e1da      	b.n	8001256 <FT_CAN_ReceiveData+0x786>

	//Segmented Messages
	else
	{
		//First Message
		if(buffer[0] == 0)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d14b      	bne.n	8000f40 <FT_CAN_ReceiveData+0x470>
		{
			FT_Data_Struct->data_length   = buffer[1] << 8;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->data_length  |= buffer[2];
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	789b      	ldrb	r3, [r3, #2]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[4];
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[5] << 8;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	795b      	ldrb	r3, [r3, #5]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[6];
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	799b      	ldrb	r3, [r3, #6]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000f1a:	6838      	ldr	r0, [r7, #0]
 8000f1c:	f7ff fb7a 	bl	8000614 <FT_CAN_ProcessData>

			if(RxLength == 8)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d107      	bne.n	8000f36 <FT_CAN_ReceiveData+0x466>
				FT_Data_Struct->data_id   = buffer[7] << 8;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	79db      	ldrb	r3, [r3, #7]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg = 0;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000f3e:	e18a      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 1, 5, etc
		else if((buffer[0]-1)%4 == 0)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d15c      	bne.n	8001008 <FT_CAN_ReceiveData+0x538>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d120      	bne.n	8000fa2 <FT_CAN_ReceiveData+0x4d2>
			{
				FT_Data_Struct->data_id 	 |= buffer[1];
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[2] << 8;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[3];
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	78db      	ldrb	r3, [r3, #3]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f7ff fb39 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d128      	bne.n	8000ffa <FT_CAN_ReceiveData+0x52a>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	791b      	ldrb	r3, [r3, #4]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	795b      	ldrb	r3, [r3, #5]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[7];
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	79db      	ldrb	r3, [r3, #7]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f7ff fb0d 	bl	8000614 <FT_CAN_ProcessData>
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001006:	e126      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//messages 2, 6, etc
		else if((buffer[0]-2)%4 == 0)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b02      	subs	r3, #2
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d150      	bne.n	80010b8 <FT_CAN_ReceiveData+0x5e8>
		{
			if(RxLength >= 5)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d928      	bls.n	800106e <FT_CAN_ReceiveData+0x59e>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	b29b      	uxth	r3, r3
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b29a      	uxth	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[2];
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	b29b      	uxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b29a      	uxth	r2, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	b29b      	uxth	r3, r3
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b29a      	uxth	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[4];
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b29a      	uxth	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f7ff fad3 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d11a      	bne.n	80010aa <FT_CAN_ReceiveData+0x5da>
			{
				FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	795b      	ldrb	r3, [r3, #5]
 8001078:	b29b      	uxth	r3, r3
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b29a      	uxth	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	|= buffer[6];
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	799b      	ldrb	r3, [r3, #6]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b29a      	uxth	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content = buffer[7] << 8;
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	79db      	ldrb	r3, [r3, #7]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			}

			FT_Data_Struct->data_last_seg 	 = buffer[0];
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 80010b6:	e0ce      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 3, 7, etc
		else if((buffer[0]-3)%4 == 0)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3b03      	subs	r3, #3
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d15f      	bne.n	8001186 <FT_CAN_ReceiveData+0x6b6>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010d2:	3301      	adds	r3, #1
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d10d      	bne.n	80010f4 <FT_CAN_ReceiveData+0x624>
			{
				FT_Data_Struct->data_content |= buffer[1];
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80010ee:	6838      	ldr	r0, [r7, #0]
 80010f0:	f7ff fa90 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 6)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d928      	bls.n	800114c <FT_CAN_ReceiveData+0x67c>
			{
				FT_Data_Struct->data_id  	  = buffer[2] << 8;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	789b      	ldrb	r3, [r3, #2]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b29a      	uxth	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[3];
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	78db      	ldrb	r3, [r3, #3]
 8001114:	b29b      	uxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b29a      	uxth	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[4] << 8;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	791b      	ldrb	r3, [r3, #4]
 8001124:	b29b      	uxth	r3, r3
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b29a      	uxth	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[5];
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	b29b      	uxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b29a      	uxth	r2, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001146:	6838      	ldr	r0, [r7, #0]
 8001148:	f7ff fa64 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d112      	bne.n	8001178 <FT_CAN_ReceiveData+0x6a8>
			{
				FT_Data_Struct->data_id 	  = buffer[6] << 8;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	799b      	ldrb	r3, [r3, #6]
 8001156:	b29b      	uxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b29a      	uxth	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[7];
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	79db      	ldrb	r3, [r3, #7]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b29a      	uxth	r2, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001184:	e067      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 4, 8, etc
		else if(buffer[0]%4 == 0)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d15d      	bne.n	8001250 <FT_CAN_ReceiveData+0x780>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011a0:	3301      	adds	r3, #1
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d115      	bne.n	80011d2 <FT_CAN_ReceiveData+0x702>
			{
				FT_Data_Struct->data_content  = buffer[1] << 8;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[2];
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	789b      	ldrb	r3, [r3, #2]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f7ff fa21 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 7)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d928      	bls.n	800122a <FT_CAN_ReceiveData+0x75a>
			{
				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	78db      	ldrb	r3, [r3, #3]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[4];
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[5] << 8;
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	795b      	ldrb	r3, [r3, #5]
 8001202:	b29b      	uxth	r3, r3
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b29a      	uxth	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[6];
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	799b      	ldrb	r3, [r3, #6]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b29a      	uxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff f9f5 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d107      	bne.n	8001240 <FT_CAN_ReceiveData+0x770>
			FT_Data_Struct->data_id 	  	  = buffer[7] << 8;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	79db      	ldrb	r3, [r3, #7]
 8001234:	b29b      	uxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b29a      	uxth	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b29a      	uxth	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 800124c:	e003      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		if((RxID & 0xFFF) == 0x600)
 800124e:	bf00      	nop
 8001250:	46ad      	mov	sp, r5
 8001252:	e001      	b.n	8001258 <FT_CAN_ReceiveData+0x788>
		return;
 8001254:	bf00      	nop
 8001256:	46ad      	mov	sp, r5
		}
#endif
	}
}
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001266:	f005 f8c3 	bl	80063f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126a:	f000 f905 	bl	8001478 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800126e:	f000 f97b 	bl	8001568 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001272:	f000 fc37 	bl	8001ae4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001276:	f000 fbfd 	bl	8001a74 <MX_DMA_Init>
  MX_IWDG_Init();
 800127a:	f000 fb31 	bl	80018e0 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 800127e:	f000 fba3 	bl	80019c8 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001282:	f000 f999 	bl	80015b8 <MX_ADC1_Init>
  MX_RTC_Init();
 8001286:	f000 fb45 	bl	8001914 <MX_RTC_Init>
  MX_FATFS_Init();
 800128a:	f00e ffaf 	bl	80101ec <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800128e:	f015 f889 	bl	80163a4 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001292:	f000 fa29 	bl	80016e8 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001296:	f000 fabf 	bl	8001818 <MX_CAN1_Init>
  MX_I2C1_Init();
 800129a:	f000 faf3 	bl	8001884 <MX_I2C1_Init>
  MX_TIM7_Init();
 800129e:	f000 fbb3 	bl	8001a08 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
//  Principal_RTC_Calibrate(&Date, &Time);
  Principal_Init(&hcan1, &hi2c1, &htim7);
 80012a2:	4a65      	ldr	r2, [pc, #404]	; (8001438 <main+0x1d8>)
 80012a4:	4965      	ldr	r1, [pc, #404]	; (800143c <main+0x1dc>)
 80012a6:	4866      	ldr	r0, [pc, #408]	; (8001440 <main+0x1e0>)
 80012a8:	f003 fd0e 	bl	8004cc8 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks if data is being saved and starts saving if conditions are met
	  if(Flag_Datalogger == DL_No_Save)
 80012ac:	4b65      	ldr	r3, [pc, #404]	; (8001444 <main+0x1e4>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <main+0x68>
		  Principal_Datalogger_Start(&Date, &Time, Dir_String, Log_String, &Dir_Struct, &File_Struct);
 80012b4:	4b64      	ldr	r3, [pc, #400]	; (8001448 <main+0x1e8>)
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	4b64      	ldr	r3, [pc, #400]	; (800144c <main+0x1ec>)
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4b64      	ldr	r3, [pc, #400]	; (8001450 <main+0x1f0>)
 80012be:	4a65      	ldr	r2, [pc, #404]	; (8001454 <main+0x1f4>)
 80012c0:	4965      	ldr	r1, [pc, #404]	; (8001458 <main+0x1f8>)
 80012c2:	4866      	ldr	r0, [pc, #408]	; (800145c <main+0x1fc>)
 80012c4:	f004 f928 	bl	8005518 <Principal_Datalogger_Start>

	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection();
 80012c8:	f004 fb08 	bl	80058dc <Principal_Card_Detection>

	  //Checks USB cable connection, if connected will disable logging
	  if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET) && (Flag_Datalogger != DL_Save))
 80012cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d0:	4863      	ldr	r0, [pc, #396]	; (8001460 <main+0x200>)
 80012d2:	f007 fa21 	bl	8008718 <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <main+0x8c>
 80012dc:	4b59      	ldr	r3, [pc, #356]	; (8001444 <main+0x1e4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d003      	beq.n	80012ec <main+0x8c>
		  Principal_Datalogger_Finish(&Dir_Struct, &File_Struct);
 80012e4:	4958      	ldr	r1, [pc, #352]	; (8001448 <main+0x1e8>)
 80012e6:	4859      	ldr	r0, [pc, #356]	; (800144c <main+0x1ec>)
 80012e8:	f004 f9de 	bl	80056a8 <Principal_Datalogger_Finish>

	  //Analog inputs 1-4 CAN message
	  if((Acc_Msg[Analog_1_4] >= Per_Msg[Analog_1_4]) && (Per_Msg[Analog_1_4] != 0))
 80012ec:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <main+0x204>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a5d      	ldr	r2, [pc, #372]	; (8001468 <main+0x208>)
 80012f2:	8812      	ldrh	r2, [r2, #0]
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d30e      	bcc.n	8001316 <main+0xb6>
 80012f8:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <main+0x208>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00a      	beq.n	8001316 <main+0xb6>
	  {
		  Acc_Msg[Analog_1_4] -= Per_Msg[Analog_1_4];
 8001300:	4b58      	ldr	r3, [pc, #352]	; (8001464 <main+0x204>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a58      	ldr	r2, [pc, #352]	; (8001468 <main+0x208>)
 8001306:	8812      	ldrh	r2, [r2, #0]
 8001308:	1a9b      	subs	r3, r3, r2
 800130a:	4a56      	ldr	r2, [pc, #344]	; (8001464 <main+0x204>)
 800130c:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, Analog_1_4);
 800130e:	2100      	movs	r1, #0
 8001310:	484b      	ldr	r0, [pc, #300]	; (8001440 <main+0x1e0>)
 8001312:	f002 f973 	bl	80035fc <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((Acc_Msg[Analog_5_8] >= Per_Msg[Analog_5_8]) && (Per_Msg[Analog_5_8] != 0))
 8001316:	4b53      	ldr	r3, [pc, #332]	; (8001464 <main+0x204>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4a53      	ldr	r2, [pc, #332]	; (8001468 <main+0x208>)
 800131c:	8852      	ldrh	r2, [r2, #2]
 800131e:	4293      	cmp	r3, r2
 8001320:	d30e      	bcc.n	8001340 <main+0xe0>
 8001322:	4b51      	ldr	r3, [pc, #324]	; (8001468 <main+0x208>)
 8001324:	885b      	ldrh	r3, [r3, #2]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00a      	beq.n	8001340 <main+0xe0>
	  {
		  Acc_Msg[Analog_5_8] -= Per_Msg[Analog_5_8];
 800132a:	4b4e      	ldr	r3, [pc, #312]	; (8001464 <main+0x204>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <main+0x208>)
 8001330:	8852      	ldrh	r2, [r2, #2]
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <main+0x204>)
 8001336:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, Analog_5_8);
 8001338:	2101      	movs	r1, #1
 800133a:	4841      	ldr	r0, [pc, #260]	; (8001440 <main+0x1e0>)
 800133c:	f002 f95e 	bl	80035fc <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((Acc_Msg[Analog_9_12] >= Per_Msg[Analog_9_12]) && (Per_Msg[Analog_9_12] != 0))
 8001340:	4b48      	ldr	r3, [pc, #288]	; (8001464 <main+0x204>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4a48      	ldr	r2, [pc, #288]	; (8001468 <main+0x208>)
 8001346:	8892      	ldrh	r2, [r2, #4]
 8001348:	4293      	cmp	r3, r2
 800134a:	d30e      	bcc.n	800136a <main+0x10a>
 800134c:	4b46      	ldr	r3, [pc, #280]	; (8001468 <main+0x208>)
 800134e:	889b      	ldrh	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00a      	beq.n	800136a <main+0x10a>
	  {
		  Acc_Msg[Analog_9_12] -= Per_Msg[Analog_9_12];
 8001354:	4b43      	ldr	r3, [pc, #268]	; (8001464 <main+0x204>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	4a43      	ldr	r2, [pc, #268]	; (8001468 <main+0x208>)
 800135a:	8892      	ldrh	r2, [r2, #4]
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	4a41      	ldr	r2, [pc, #260]	; (8001464 <main+0x204>)
 8001360:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, Analog_9_12);
 8001362:	2102      	movs	r1, #2
 8001364:	4836      	ldr	r0, [pc, #216]	; (8001440 <main+0x1e0>)
 8001366:	f002 f949 	bl	80035fc <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((Acc_Msg[RTC_Msg] >= Per_Msg[RTC_Msg]) && (Per_Msg[RTC_Msg] != 0))
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <main+0x204>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	4a3e      	ldr	r2, [pc, #248]	; (8001468 <main+0x208>)
 8001370:	88d2      	ldrh	r2, [r2, #6]
 8001372:	4293      	cmp	r3, r2
 8001374:	d30e      	bcc.n	8001394 <main+0x134>
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <main+0x208>)
 8001378:	88db      	ldrh	r3, [r3, #6]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00a      	beq.n	8001394 <main+0x134>
	  {
		  Acc_Msg[RTC_Msg] -= Per_Msg[RTC_Msg];
 800137e:	4b39      	ldr	r3, [pc, #228]	; (8001464 <main+0x204>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	4a39      	ldr	r2, [pc, #228]	; (8001468 <main+0x208>)
 8001384:	88d2      	ldrh	r2, [r2, #6]
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	4a36      	ldr	r2, [pc, #216]	; (8001464 <main+0x204>)
 800138a:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_Msg);
 800138c:	2103      	movs	r1, #3
 800138e:	482c      	ldr	r0, [pc, #176]	; (8001440 <main+0x1e0>)
 8001390:	f002 f934 	bl	80035fc <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((Acc_Msg[Verify_Msg] >= Per_Msg[Verify_Msg]) && (Per_Msg[Verify_Msg] != 0))
 8001394:	4b33      	ldr	r3, [pc, #204]	; (8001464 <main+0x204>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	4a33      	ldr	r2, [pc, #204]	; (8001468 <main+0x208>)
 800139a:	8912      	ldrh	r2, [r2, #8]
 800139c:	4293      	cmp	r3, r2
 800139e:	d30e      	bcc.n	80013be <main+0x15e>
 80013a0:	4b31      	ldr	r3, [pc, #196]	; (8001468 <main+0x208>)
 80013a2:	891b      	ldrh	r3, [r3, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00a      	beq.n	80013be <main+0x15e>
	  {
		  Acc_Msg[Verify_Msg] -= Per_Msg[Verify_Msg];
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <main+0x204>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <main+0x208>)
 80013ae:	8912      	ldrh	r2, [r2, #8]
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	4a2c      	ldr	r2, [pc, #176]	; (8001464 <main+0x204>)
 80013b4:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, Verify_Msg);
 80013b6:	2104      	movs	r1, #4
 80013b8:	4821      	ldr	r0, [pc, #132]	; (8001440 <main+0x1e0>)
 80013ba:	f002 f91f 	bl	80035fc <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((Acc_Msg[ECU_Save] >= Per_Msg[ECU_Save]) && (Per_Msg[ECU_Save] != 0))
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <main+0x204>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4a29      	ldr	r2, [pc, #164]	; (8001468 <main+0x208>)
 80013c4:	8952      	ldrh	r2, [r2, #10]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d30e      	bcc.n	80013e8 <main+0x188>
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <main+0x208>)
 80013cc:	895b      	ldrh	r3, [r3, #10]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00a      	beq.n	80013e8 <main+0x188>
	  {
		  Acc_Msg[ECU_Save] -= Per_Msg[ECU_Save];
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <main+0x204>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a24      	ldr	r2, [pc, #144]	; (8001468 <main+0x208>)
 80013d8:	8952      	ldrh	r2, [r2, #10]
 80013da:	1a9b      	subs	r3, r3, r2
 80013dc:	4a21      	ldr	r2, [pc, #132]	; (8001464 <main+0x204>)
 80013de:	6153      	str	r3, [r2, #20]
		  Principal_Transmit_Msg(&hcan1, ECU_Save);
 80013e0:	2105      	movs	r1, #5
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <main+0x1e0>)
 80013e4:	f002 f90a 	bl	80035fc <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((Acc_Msg[PDM_Save] >= Per_Msg[PDM_Save]) && (Per_Msg[PDM_Save] != 0))
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <main+0x204>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <main+0x208>)
 80013ee:	8992      	ldrh	r2, [r2, #12]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d30e      	bcc.n	8001412 <main+0x1b2>
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <main+0x208>)
 80013f6:	899b      	ldrh	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <main+0x1b2>
	  {
		  Acc_Msg[PDM_Save] -= Per_Msg[PDM_Save];
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <main+0x204>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a19      	ldr	r2, [pc, #100]	; (8001468 <main+0x208>)
 8001402:	8992      	ldrh	r2, [r2, #12]
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	4a17      	ldr	r2, [pc, #92]	; (8001464 <main+0x204>)
 8001408:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, PDM_Save);
 800140a:	2106      	movs	r1, #6
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <main+0x1e0>)
 800140e:	f002 f8f5 	bl	80035fc <Principal_Transmit_Msg>
	  }

	  if((Verify != 0) && (Verify_CAN != 0) && (Flag_Datalogger != DL_Error))
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <main+0x20c>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f43f af48 	beq.w	80012ac <main+0x4c>
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <main+0x210>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	f43f af43 	beq.w	80012ac <main+0x4c>
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <main+0x1e4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b04      	cmp	r3, #4
 800142c:	f43f af3e 	beq.w	80012ac <main+0x4c>
//	  if(Flag_Datalogger != DL_Error)
		  HAL_IWDG_Refresh(&hiwdg);
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <main+0x214>)
 8001432:	f008 f9ac 	bl	800978e <HAL_IWDG_Refresh>
	  if(Flag_Datalogger == DL_No_Save)
 8001436:	e739      	b.n	80012ac <main+0x4c>
 8001438:	20002dc8 	.word	0x20002dc8
 800143c:	20000764 	.word	0x20000764
 8001440:	20002d28 	.word	0x20002d28
 8001444:	20001bcc 	.word	0x20001bcc
 8001448:	20001c80 	.word	0x20001c80
 800144c:	20001a60 	.word	0x20001a60
 8001450:	20002d60 	.word	0x20002d60
 8001454:	200009c8 	.word	0x200009c8
 8001458:	20002cac 	.word	0x20002cac
 800145c:	20001a58 	.word	0x20001a58
 8001460:	40020000 	.word	0x40020000
 8001464:	20001c5c 	.word	0x20001c5c
 8001468:	20002e78 	.word	0x20002e78
 800146c:	20002e74 	.word	0x20002e74
 8001470:	20001a54 	.word	0x20001a54
 8001474:	200007bc 	.word	0x200007bc

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2234      	movs	r2, #52	; 0x34
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f015 fd0a 	bl	8016ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <SystemClock_Config+0xe8>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a2e      	ldr	r2, [pc, #184]	; (8001560 <SystemClock_Config+0xe8>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <SystemClock_Config+0xe8>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <SystemClock_Config+0xec>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a28      	ldr	r2, [pc, #160]	; (8001564 <SystemClock_Config+0xec>)
 80014c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <SystemClock_Config+0xec>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80014d4:	230d      	movs	r3, #13
 80014d6:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014de:	2301      	movs	r3, #1
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014e2:	2301      	movs	r3, #1
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e6:	2302      	movs	r3, #2
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014f0:	2308      	movs	r3, #8
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80014f4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80014fe:	2306      	movs	r3, #6
 8001500:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001502:	2302      	movs	r3, #2
 8001504:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4618      	mov	r0, r3
 800150c:	f00a f97e 	bl	800b80c <HAL_RCC_OscConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001516:	f000 fb8b 	bl	8001c30 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800151a:	f009 fb45 	bl	800aba8 <HAL_PWREx_EnableOverDrive>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001524:	f000 fb84 	bl	8001c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001528:	230f      	movs	r3, #15
 800152a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152c:	2302      	movs	r3, #2
 800152e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001534:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001538:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800153a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	2105      	movs	r1, #5
 8001546:	4618      	mov	r0, r3
 8001548:	f009 fb7e 	bl	800ac48 <HAL_RCC_ClockConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001552:	f000 fb6d 	bl	8001c30 <Error_Handler>
  }
}
 8001556:	bf00      	nop
 8001558:	3750      	adds	r7, #80	; 0x50
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000

08001568 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b098      	sub	sp, #96	; 0x60
 800156c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	225c      	movs	r2, #92	; 0x5c
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f015 fc93 	bl	8016ea0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800157a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800157e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8001580:	2308      	movs	r3, #8
 8001582:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001584:	23c0      	movs	r3, #192	; 0xc0
 8001586:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001588:	2302      	movs	r3, #2
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800158c:	2304      	movs	r3, #4
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001590:	2301      	movs	r3, #1
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8001594:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001598:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800159a:	2300      	movs	r3, #0
 800159c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f009 fc57 	bl	800ae54 <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80015ac:	f000 fb40 	bl	8001c30 <Error_Handler>
  }
}
 80015b0:	bf00      	nop
 80015b2:	3760      	adds	r7, #96	; 0x60
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015be:	463b      	mov	r3, r7
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015ca:	4b44      	ldr	r3, [pc, #272]	; (80016dc <MX_ADC1_Init+0x124>)
 80015cc:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <MX_ADC1_Init+0x128>)
 80015ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015d0:	4b42      	ldr	r3, [pc, #264]	; (80016dc <MX_ADC1_Init+0x124>)
 80015d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015d8:	4b40      	ldr	r3, [pc, #256]	; (80016dc <MX_ADC1_Init+0x124>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <MX_ADC1_Init+0x124>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015e4:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <MX_ADC1_Init+0x124>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ea:	4b3c      	ldr	r3, [pc, #240]	; (80016dc <MX_ADC1_Init+0x124>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f2:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <MX_ADC1_Init+0x124>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f8:	4b38      	ldr	r3, [pc, #224]	; (80016dc <MX_ADC1_Init+0x124>)
 80015fa:	4a3a      	ldr	r2, [pc, #232]	; (80016e4 <MX_ADC1_Init+0x12c>)
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015fe:	4b37      	ldr	r3, [pc, #220]	; (80016dc <MX_ADC1_Init+0x124>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001604:	4b35      	ldr	r3, [pc, #212]	; (80016dc <MX_ADC1_Init+0x124>)
 8001606:	2206      	movs	r2, #6
 8001608:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800160a:	4b34      	ldr	r3, [pc, #208]	; (80016dc <MX_ADC1_Init+0x124>)
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001612:	4b32      	ldr	r3, [pc, #200]	; (80016dc <MX_ADC1_Init+0x124>)
 8001614:	2201      	movs	r2, #1
 8001616:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001618:	4830      	ldr	r0, [pc, #192]	; (80016dc <MX_ADC1_Init+0x124>)
 800161a:	f004 ff7f 	bl	800651c <HAL_ADC_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001624:	f000 fb04 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001628:	2300      	movs	r3, #0
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800162c:	2301      	movs	r3, #1
 800162e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001630:	2307      	movs	r3, #7
 8001632:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4828      	ldr	r0, [pc, #160]	; (80016dc <MX_ADC1_Init+0x124>)
 800163a:	f005 f8e1 	bl	8006800 <HAL_ADC_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001644:	f000 faf4 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001648:	2301      	movs	r3, #1
 800164a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800164c:	2302      	movs	r3, #2
 800164e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	4619      	mov	r1, r3
 8001654:	4821      	ldr	r0, [pc, #132]	; (80016dc <MX_ADC1_Init+0x124>)
 8001656:	f005 f8d3 	bl	8006800 <HAL_ADC_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001660:	f000 fae6 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001664:	2302      	movs	r3, #2
 8001666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001668:	2303      	movs	r3, #3
 800166a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	4619      	mov	r1, r3
 8001670:	481a      	ldr	r0, [pc, #104]	; (80016dc <MX_ADC1_Init+0x124>)
 8001672:	f005 f8c5 	bl	8006800 <HAL_ADC_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800167c:	f000 fad8 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001680:	2303      	movs	r3, #3
 8001682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001684:	2304      	movs	r3, #4
 8001686:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <MX_ADC1_Init+0x124>)
 800168e:	f005 f8b7 	bl	8006800 <HAL_ADC_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001698:	f000 faca 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800169c:	2304      	movs	r3, #4
 800169e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80016a0:	2305      	movs	r3, #5
 80016a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <MX_ADC1_Init+0x124>)
 80016aa:	f005 f8a9 	bl	8006800 <HAL_ADC_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80016b4:	f000 fabc 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016b8:	2305      	movs	r3, #5
 80016ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80016bc:	2306      	movs	r3, #6
 80016be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_ADC1_Init+0x124>)
 80016c6:	f005 f89b 	bl	8006800 <HAL_ADC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016d0:	f000 faae 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20001a90 	.word	0x20001a90
 80016e0:	40012000 	.word	0x40012000
 80016e4:	0f000001 	.word	0x0f000001

080016e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ee:	463b      	mov	r3, r7
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016fa:	4b44      	ldr	r3, [pc, #272]	; (800180c <MX_ADC2_Init+0x124>)
 80016fc:	4a44      	ldr	r2, [pc, #272]	; (8001810 <MX_ADC2_Init+0x128>)
 80016fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001700:	4b42      	ldr	r3, [pc, #264]	; (800180c <MX_ADC2_Init+0x124>)
 8001702:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001706:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001708:	4b40      	ldr	r3, [pc, #256]	; (800180c <MX_ADC2_Init+0x124>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <MX_ADC2_Init+0x124>)
 8001710:	2201      	movs	r2, #1
 8001712:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001714:	4b3d      	ldr	r3, [pc, #244]	; (800180c <MX_ADC2_Init+0x124>)
 8001716:	2201      	movs	r2, #1
 8001718:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800171a:	4b3c      	ldr	r3, [pc, #240]	; (800180c <MX_ADC2_Init+0x124>)
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001722:	4b3a      	ldr	r3, [pc, #232]	; (800180c <MX_ADC2_Init+0x124>)
 8001724:	2200      	movs	r2, #0
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <MX_ADC2_Init+0x124>)
 800172a:	4a3a      	ldr	r2, [pc, #232]	; (8001814 <MX_ADC2_Init+0x12c>)
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <MX_ADC2_Init+0x124>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <MX_ADC2_Init+0x124>)
 8001736:	2206      	movs	r2, #6
 8001738:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <MX_ADC2_Init+0x124>)
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <MX_ADC2_Init+0x124>)
 8001744:	2201      	movs	r2, #1
 8001746:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001748:	4830      	ldr	r0, [pc, #192]	; (800180c <MX_ADC2_Init+0x124>)
 800174a:	f004 fee7 	bl	800651c <HAL_ADC_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001754:	f000 fa6c 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001758:	2306      	movs	r3, #6
 800175a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001760:	2307      	movs	r3, #7
 8001762:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4619      	mov	r1, r3
 8001768:	4828      	ldr	r0, [pc, #160]	; (800180c <MX_ADC2_Init+0x124>)
 800176a:	f005 f849 	bl	8006800 <HAL_ADC_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001774:	f000 fa5c 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001778:	2307      	movs	r3, #7
 800177a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800177c:	2302      	movs	r3, #2
 800177e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	4619      	mov	r1, r3
 8001784:	4821      	ldr	r0, [pc, #132]	; (800180c <MX_ADC2_Init+0x124>)
 8001786:	f005 f83b 	bl	8006800 <HAL_ADC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001790:	f000 fa4e 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001794:	230e      	movs	r3, #14
 8001796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001798:	2303      	movs	r3, #3
 800179a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	481a      	ldr	r0, [pc, #104]	; (800180c <MX_ADC2_Init+0x124>)
 80017a2:	f005 f82d 	bl	8006800 <HAL_ADC_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80017ac:	f000 fa40 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80017b0:	230f      	movs	r3, #15
 80017b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017b4:	2304      	movs	r3, #4
 80017b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017b8:	463b      	mov	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	4813      	ldr	r0, [pc, #76]	; (800180c <MX_ADC2_Init+0x124>)
 80017be:	f005 f81f 	bl	8006800 <HAL_ADC_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80017c8:	f000 fa32 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80017cc:	2308      	movs	r3, #8
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017d0:	2305      	movs	r3, #5
 80017d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <MX_ADC2_Init+0x124>)
 80017da:	f005 f811 	bl	8006800 <HAL_ADC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80017e4:	f000 fa24 	bl	8001c30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017e8:	2309      	movs	r3, #9
 80017ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80017ec:	2306      	movs	r3, #6
 80017ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_ADC2_Init+0x124>)
 80017f6:	f005 f803 	bl	8006800 <HAL_ADC_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001800:	f000 fa16 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000071c 	.word	0x2000071c
 8001810:	40012100 	.word	0x40012100
 8001814:	0f000001 	.word	0x0f000001

08001818 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_CAN1_Init+0x64>)
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <MX_CAN1_Init+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_CAN1_Init+0x64>)
 8001824:	2205      	movs	r2, #5
 8001826:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_CAN1_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_CAN1_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_CAN1_Init+0x64>)
 8001836:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800183a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_CAN1_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_CAN1_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_CAN1_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <MX_CAN1_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_CAN1_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_CAN1_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_CAN1_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_CAN1_Init+0x64>)
 8001868:	f005 fa7a 	bl	8006d60 <HAL_CAN_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001872:	f000 f9dd 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20002d28 	.word	0x20002d28
 8001880:	40006400 	.word	0x40006400

08001884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C1_Init+0x50>)
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <MX_I2C1_Init+0x54>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <MX_I2C1_Init+0x58>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018c2:	f006 ff8d 	bl	80087e0 <HAL_I2C_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018cc:	f000 f9b0 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000764 	.word	0x20000764
 80018d8:	40005400 	.word	0x40005400
 80018dc:	00061a80 	.word	0x00061a80

080018e0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_IWDG_Init+0x2c>)
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <MX_IWDG_Init+0x30>)
 80018e8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_IWDG_Init+0x2c>)
 80018ec:	2206      	movs	r2, #6
 80018ee:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 59;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_IWDG_Init+0x2c>)
 80018f2:	223b      	movs	r2, #59	; 0x3b
 80018f4:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_IWDG_Init+0x2c>)
 80018f8:	f007 ff07 	bl	800970a <HAL_IWDG_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 8001902:	f000 f995 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200007bc 	.word	0x200007bc
 8001910:	40003000 	.word	0x40003000

08001914 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001928:	2300      	movs	r3, #0
 800192a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <MX_RTC_Init+0xac>)
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <MX_RTC_Init+0xb0>)
 8001930:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <MX_RTC_Init+0xac>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_RTC_Init+0xac>)
 800193a:	227f      	movs	r2, #127	; 0x7f
 800193c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <MX_RTC_Init+0xac>)
 8001940:	22ff      	movs	r2, #255	; 0xff
 8001942:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_RTC_Init+0xac>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <MX_RTC_Init+0xac>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <MX_RTC_Init+0xac>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001956:	481a      	ldr	r0, [pc, #104]	; (80019c0 <MX_RTC_Init+0xac>)
 8001958:	f00a f9f6 	bl	800bd48 <HAL_RTC_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001962:	f000 f965 	bl	8001c30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	480f      	ldr	r0, [pc, #60]	; (80019c0 <MX_RTC_Init+0xac>)
 8001982:	f00a fa72 	bl	800be6a <HAL_RTC_SetTime>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800198c:	f000 f950 	bl	8001c30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001990:	2301      	movs	r3, #1
 8001992:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001994:	2301      	movs	r3, #1
 8001996:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001998:	2301      	movs	r3, #1
 800199a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <MX_RTC_Init+0xac>)
 80019a8:	f00a fb7a 	bl	800c0a0 <HAL_RTC_SetDate>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80019b2:	f000 f93d 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20001b40 	.word	0x20001b40
 80019c4:	40002800 	.word	0x40002800

080019c8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SDIO_SD_Init+0x38>)
 80019ce:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <MX_SDIO_SD_Init+0x3c>)
 80019d0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_SDIO_SD_Init+0x38>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SDIO_SD_Init+0x38>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_SDIO_SD_Init+0x38>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SDIO_SD_Init+0x38>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <MX_SDIO_SD_Init+0x38>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 22;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <MX_SDIO_SD_Init+0x38>)
 80019f2:	2216      	movs	r2, #22
 80019f4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20001bd0 	.word	0x20001bd0
 8001a04:	40012c00 	.word	0x40012c00

08001a08 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <MX_TIM7_Init+0x64>)
 8001a18:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <MX_TIM7_Init+0x68>)
 8001a1a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_TIM7_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_TIM7_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001a28:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <MX_TIM7_Init+0x64>)
 8001a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_TIM7_Init+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <MX_TIM7_Init+0x64>)
 8001a38:	f00b ffd1 	bl	800d9de <HAL_TIM_Base_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a42:	f000 f8f5 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_TIM7_Init+0x64>)
 8001a54:	f00c fa52 	bl	800defc <HAL_TIMEx_MasterConfigSynchronization>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a5e:	f000 f8e7 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20002dc8 	.word	0x20002dc8
 8001a70:	40001400 	.word	0x40001400

08001a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <MX_DMA_Init+0x6c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <MX_DMA_Init+0x6c>)
 8001a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <MX_DMA_Init+0x6c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2102      	movs	r1, #2
 8001a9a:	2038      	movs	r0, #56	; 0x38
 8001a9c:	f006 f8d3 	bl	8007c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001aa0:	2038      	movs	r0, #56	; 0x38
 8001aa2:	f006 f8ec 	bl	8007c7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	203a      	movs	r0, #58	; 0x3a
 8001aac:	f006 f8cb 	bl	8007c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ab0:	203a      	movs	r0, #58	; 0x3a
 8001ab2:	f006 f8e4 	bl	8007c7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	203b      	movs	r0, #59	; 0x3b
 8001abc:	f006 f8c3 	bl	8007c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001ac0:	203b      	movs	r0, #59	; 0x3b
 8001ac2:	f006 f8dc 	bl	8007c7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2045      	movs	r0, #69	; 0x45
 8001acc:	f006 f8bb 	bl	8007c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001ad0:	2045      	movs	r0, #69	; 0x45
 8001ad2:	f006 f8d4 	bl	8007c7e <HAL_NVIC_EnableIRQ>

}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a48      	ldr	r2, [pc, #288]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a41      	ldr	r2, [pc, #260]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a3a      	ldr	r2, [pc, #232]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <MX_GPIO_Init+0x140>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	210f      	movs	r1, #15
 8001b8a:	4827      	ldr	r0, [pc, #156]	; (8001c28 <MX_GPIO_Init+0x144>)
 8001b8c:	f006 fddc 	bl	8008748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b96:	4825      	ldr	r0, [pc, #148]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b98:	f006 fdd6 	bl	8008748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	481d      	ldr	r0, [pc, #116]	; (8001c28 <MX_GPIO_Init+0x144>)
 8001bb4:	f006 fc1c 	bl	80083f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001bb8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4816      	ldr	r0, [pc, #88]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001bd2:	f006 fc0d 	bl	80083f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001bd6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	480f      	ldr	r0, [pc, #60]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001bee:	f006 fbff 	bl	80083f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4808      	ldr	r0, [pc, #32]	; (8001c28 <MX_GPIO_Init+0x144>)
 8001c06:	f006 fbf3 	bl	80083f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	2028      	movs	r0, #40	; 0x28
 8001c10:	f006 f819 	bl	8007c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c14:	2028      	movs	r0, #40	; 0x28
 8001c16:	f006 f832 	bl	8007c7e <HAL_NVIC_EnableIRQ>

}
 8001c1a:	bf00      	nop
 8001c1c:	3728      	adds	r7, #40	; 0x28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	40020400 	.word	0x40020400

08001c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <Error_Handler+0x8>
	...

08001c3c <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	603a      	str	r2, [r7, #0]
 8001c46:	80fb      	strh	r3, [r7, #6]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	2b1d      	cmp	r3, #29
 8001c56:	f200 81f9 	bhi.w	800204c <Process_Data+0x410>
 8001c5a:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <Process_Data+0x24>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001cd9 	.word	0x08001cd9
 8001c64:	08001d09 	.word	0x08001d09
 8001c68:	08001d39 	.word	0x08001d39
 8001c6c:	08001d69 	.word	0x08001d69
 8001c70:	08001d99 	.word	0x08001d99
 8001c74:	08001dc9 	.word	0x08001dc9
 8001c78:	08001df9 	.word	0x08001df9
 8001c7c:	08001e29 	.word	0x08001e29
 8001c80:	08001e59 	.word	0x08001e59
 8001c84:	08001e89 	.word	0x08001e89
 8001c88:	08001eb9 	.word	0x08001eb9
 8001c8c:	08001ee9 	.word	0x08001ee9
 8001c90:	08001f19 	.word	0x08001f19
 8001c94:	08001f49 	.word	0x08001f49
 8001c98:	08001f79 	.word	0x08001f79
 8001c9c:	08001fa9 	.word	0x08001fa9
 8001ca0:	08001fdd 	.word	0x08001fdd
 8001ca4:	08001fe5 	.word	0x08001fe5
 8001ca8:	08001fed 	.word	0x08001fed
 8001cac:	08001ff5 	.word	0x08001ff5
 8001cb0:	08001ffd 	.word	0x08001ffd
 8001cb4:	08002005 	.word	0x08002005
 8001cb8:	0800200d 	.word	0x0800200d
 8001cbc:	08002015 	.word	0x08002015
 8001cc0:	0800201d 	.word	0x0800201d
 8001cc4:	08002025 	.word	0x08002025
 8001cc8:	0800202d 	.word	0x0800202d
 8001ccc:	08002035 	.word	0x08002035
 8001cd0:	0800203d 	.word	0x0800203d
 8001cd4:	08002045 	.word	0x08002045
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	88ba      	ldrh	r2, [r7, #4]
 8001cdc:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	885b      	ldrh	r3, [r3, #2]
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001cf6:	e1aa      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	885b      	ldrh	r3, [r3, #2]
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	805a      	strh	r2, [r3, #2]
			break;
 8001d06:	e1a2      	b.n	800204e <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	88ba      	ldrh	r2, [r7, #4]
 8001d0c:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	885b      	ldrh	r3, [r3, #2]
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001d26:	e192      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	885b      	ldrh	r3, [r3, #2]
 8001d2c:	f023 0302 	bic.w	r3, r3, #2
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	805a      	strh	r2, [r3, #2]
			break;
 8001d36:	e18a      	b.n	800204e <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	88ba      	ldrh	r2, [r7, #4]
 8001d3c:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	885b      	ldrh	r3, [r3, #2]
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001d56:	e17a      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	885b      	ldrh	r3, [r3, #2]
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	805a      	strh	r2, [r3, #2]
			break;
 8001d66:	e172      	b.n	800204e <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	88ba      	ldrh	r2, [r7, #4]
 8001d6c:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	885b      	ldrh	r3, [r3, #2]
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001d86:	e162      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	885b      	ldrh	r3, [r3, #2]
 8001d8c:	f023 0308 	bic.w	r3, r3, #8
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	805a      	strh	r2, [r3, #2]
			break;
 8001d96:	e15a      	b.n	800204e <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	88ba      	ldrh	r2, [r7, #4]
 8001d9c:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	f043 0310 	orr.w	r3, r3, #16
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001db6:	e14a      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	885b      	ldrh	r3, [r3, #2]
 8001dbc:	f023 0310 	bic.w	r3, r3, #16
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	805a      	strh	r2, [r3, #2]
			break;
 8001dc6:	e142      	b.n	800204e <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	88ba      	ldrh	r2, [r7, #4]
 8001dcc:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001de6:	e132      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	885b      	ldrh	r3, [r3, #2]
 8001dec:	f023 0320 	bic.w	r3, r3, #32
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	805a      	strh	r2, [r3, #2]
			break;
 8001df6:	e12a      	b.n	800204e <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	88ba      	ldrh	r2, [r7, #4]
 8001dfc:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001e16:	e11a      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	885b      	ldrh	r3, [r3, #2]
 8001e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	805a      	strh	r2, [r3, #2]
			break;
 8001e26:	e112      	b.n	800204e <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	88ba      	ldrh	r2, [r7, #4]
 8001e2c:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001e46:	e102      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	885b      	ldrh	r3, [r3, #2]
 8001e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	805a      	strh	r2, [r3, #2]
			break;
 8001e56:	e0fa      	b.n	800204e <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	88ba      	ldrh	r2, [r7, #4]
 8001e5c:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	885b      	ldrh	r3, [r3, #2]
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001e76:	e0ea      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	885b      	ldrh	r3, [r3, #2]
 8001e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	805a      	strh	r2, [r3, #2]
			break;
 8001e86:	e0e2      	b.n	800204e <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	88ba      	ldrh	r2, [r7, #4]
 8001e8c:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	885b      	ldrh	r3, [r3, #2]
 8001e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001ea6:	e0d2      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	885b      	ldrh	r3, [r3, #2]
 8001eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	805a      	strh	r2, [r3, #2]
			break;
 8001eb6:	e0ca      	b.n	800204e <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	88ba      	ldrh	r2, [r7, #4]
 8001ebc:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	885b      	ldrh	r3, [r3, #2]
 8001ecc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001ed6:	e0ba      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	885b      	ldrh	r3, [r3, #2]
 8001edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	805a      	strh	r2, [r3, #2]
			break;
 8001ee6:	e0b2      	b.n	800204e <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	88ba      	ldrh	r2, [r7, #4]
 8001eec:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	885b      	ldrh	r3, [r3, #2]
 8001efc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001f06:	e0a2      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	885b      	ldrh	r3, [r3, #2]
 8001f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	805a      	strh	r2, [r3, #2]
			break;
 8001f16:	e09a      	b.n	800204e <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	88ba      	ldrh	r2, [r7, #4]
 8001f1c:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	885b      	ldrh	r3, [r3, #2]
 8001f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001f36:	e08a      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	885b      	ldrh	r3, [r3, #2]
 8001f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	805a      	strh	r2, [r3, #2]
			break;
 8001f46:	e082      	b.n	800204e <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	88ba      	ldrh	r2, [r7, #4]
 8001f4c:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	885b      	ldrh	r3, [r3, #2]
 8001f5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001f66:	e072      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	885b      	ldrh	r3, [r3, #2]
 8001f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	805a      	strh	r2, [r3, #2]
			break;
 8001f76:	e06a      	b.n	800204e <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	88ba      	ldrh	r2, [r7, #4]
 8001f7c:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	885b      	ldrh	r3, [r3, #2]
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001f96:	e05a      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	885b      	ldrh	r3, [r3, #2]
 8001f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	805a      	strh	r2, [r3, #2]
			break;
 8001fa6:	e052      	b.n	800204e <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	88ba      	ldrh	r2, [r7, #4]
 8001fac:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	885b      	ldrh	r3, [r3, #2]
 8001fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001fca:	e040      	b.n	800204e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	885b      	ldrh	r3, [r3, #2]
 8001fd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	805a      	strh	r2, [r3, #2]
			break;
 8001fda:	e038      	b.n	800204e <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	88ba      	ldrh	r2, [r7, #4]
 8001fe0:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001fe2:	e034      	b.n	800204e <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	88ba      	ldrh	r2, [r7, #4]
 8001fe8:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001fea:	e030      	b.n	800204e <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	88ba      	ldrh	r2, [r7, #4]
 8001ff0:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001ff2:	e02c      	b.n	800204e <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	88ba      	ldrh	r2, [r7, #4]
 8001ff8:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8001ffa:	e028      	b.n	800204e <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	88ba      	ldrh	r2, [r7, #4]
 8002000:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8002002:	e024      	b.n	800204e <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	88ba      	ldrh	r2, [r7, #4]
 8002008:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 800200a:	e020      	b.n	800204e <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	88ba      	ldrh	r2, [r7, #4]
 8002010:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8002012:	e01c      	b.n	800204e <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	88ba      	ldrh	r2, [r7, #4]
 8002018:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 800201a:	e018      	b.n	800204e <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	88ba      	ldrh	r2, [r7, #4]
 8002020:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8002022:	e014      	b.n	800204e <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	88ba      	ldrh	r2, [r7, #4]
 8002028:	801a      	strh	r2, [r3, #0]
			break;
 800202a:	e010      	b.n	800204e <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	88ba      	ldrh	r2, [r7, #4]
 8002030:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8002032:	e00c      	b.n	800204e <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	88ba      	ldrh	r2, [r7, #4]
 8002038:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 800203a:	e008      	b.n	800204e <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	88ba      	ldrh	r2, [r7, #4]
 8002040:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8002042:	e004      	b.n	800204e <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	88ba      	ldrh	r2, [r7, #4]
 8002048:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800204a:	e000      	b.n	800204e <Process_Data+0x412>

		default:
			break;
 800204c:	bf00      	nop
	}

	return;
 800204e:	bf00      	nop
}
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop

0800205c <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b090      	sub	sp, #64	; 0x40
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <PDM_CAN_FilterConfig+0x5c>)
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <PDM_CAN_FilterConfig+0x60>)
 800206e:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002070:	2300      	movs	r3, #0
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002074:	2301      	movs	r3, #1
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	0b5b      	lsrs	r3, r3, #13
 800207c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 800207e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	b29b      	uxth	r3, r3
 8002084:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 8002086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002088:	0b5b      	lsrs	r3, r3, #13
 800208a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 800208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	b29b      	uxth	r3, r3
 8002092:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 800209c:	2301      	movs	r3, #1
 800209e:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4619      	mov	r1, r3
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f004 ff56 	bl	8006f58 <HAL_CAN_ConfigFilter>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3740      	adds	r7, #64	; 0x40
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	1e35c000 	.word	0x1e35c000
 80020bc:	1ffff000 	.word	0x1ffff000

080020c0 <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, PDM_Data* data_struct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	460b      	mov	r3, r1
 80020ce:	72fb      	strb	r3, [r7, #11]
	uint16_t id = 0, data = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	82fb      	strh	r3, [r7, #22]
 80020d4:	2300      	movs	r3, #0
 80020d6:	82bb      	strh	r3, [r7, #20]

	if((data_id & 0x1FFFF000) != 0x1E35C000)
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <PDM_CAN_Process_Data+0xb4>)
 80020dc:	4013      	ands	r3, r2
 80020de:	4a26      	ldr	r2, [pc, #152]	; (8002178 <PDM_CAN_Process_Data+0xb8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d142      	bne.n	800216a <PDM_CAN_Process_Data+0xaa>
		return;

	id  = data_buffer[0] << 8;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	82fb      	strh	r3, [r7, #22]
	id |= data_buffer[1] & 0xff;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3301      	adds	r3, #1
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	8afb      	ldrh	r3, [r7, #22]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	82fb      	strh	r3, [r7, #22]
	data  = data_buffer[2] << 8;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3302      	adds	r3, #2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	82bb      	strh	r3, [r7, #20]
	data |= data_buffer[3] & 0xff;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3303      	adds	r3, #3
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b29a      	uxth	r2, r3
 8002110:	8abb      	ldrh	r3, [r7, #20]
 8002112:	4313      	orrs	r3, r2
 8002114:	82bb      	strh	r3, [r7, #20]

	Process_Data(id, data, data_struct);
 8002116:	8ab9      	ldrh	r1, [r7, #20]
 8002118:	8afb      	ldrh	r3, [r7, #22]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fd8d 	bl	8001c3c <Process_Data>

	if(data_length == 8)
 8002122:	7afb      	ldrb	r3, [r7, #11]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d121      	bne.n	800216c <PDM_CAN_Process_Data+0xac>
	{
		id  = data_buffer[4] << 8;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	82fb      	strh	r3, [r7, #22]
		id |= data_buffer[5] & 0xff;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3305      	adds	r3, #5
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b29a      	uxth	r2, r3
 800213c:	8afb      	ldrh	r3, [r7, #22]
 800213e:	4313      	orrs	r3, r2
 8002140:	82fb      	strh	r3, [r7, #22]
		data  = data_buffer[6] << 8;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3306      	adds	r3, #6
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	82bb      	strh	r3, [r7, #20]
		data |= data_buffer[7] & 0xff;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3307      	adds	r3, #7
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b29a      	uxth	r2, r3
 8002156:	8abb      	ldrh	r3, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	82bb      	strh	r3, [r7, #20]

		Process_Data(id, data, data_struct);
 800215c:	8ab9      	ldrh	r1, [r7, #20]
 800215e:	8afb      	ldrh	r3, [r7, #22]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fd6a 	bl	8001c3c <Process_Data>
 8002168:	e000      	b.n	800216c <PDM_CAN_Process_Data+0xac>
		return;
 800216a:	bf00      	nop
	}
}
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	1ffff000 	.word	0x1ffff000
 8002178:	1e35c000 	.word	0x1e35c000

0800217c <Verify_Data>:
 */

#include "principal.h"

static void Verify_Data()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	Verify = 0;
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <Verify_Data+0xb4>)
 8002184:	2200      	movs	r2, #0
 8002186:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8002188:	2300      	movs	r3, #0
 800218a:	71fb      	strb	r3, [r7, #7]
 800218c:	e015      	b.n	80021ba <Verify_Data+0x3e>
		if(ADC_Buffer[i] > ADC_THRESHOLD)
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	4a28      	ldr	r2, [pc, #160]	; (8002234 <Verify_Data+0xb8>)
 8002192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002196:	2b1e      	cmp	r3, #30
 8002198:	d90c      	bls.n	80021b4 <Verify_Data+0x38>
			Verify |= (1 << i);
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2201      	movs	r2, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	4b22      	ldr	r3, [pc, #136]	; (8002230 <Verify_Data+0xb4>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <Verify_Data+0xb4>)
 80021b2:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	3301      	adds	r3, #1
 80021b8:	71fb      	strb	r3, [r7, #7]
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2b0b      	cmp	r3, #11
 80021be:	d9e6      	bls.n	800218e <Verify_Data+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 80021c0:	2101      	movs	r1, #1
 80021c2:	481d      	ldr	r0, [pc, #116]	; (8002238 <Verify_Data+0xbc>)
 80021c4:	f006 fad9 	bl	800877a <HAL_GPIO_TogglePin>

	if(Verify_Datalogger == 1)
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <Verify_Data+0xc0>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <Verify_Data+0x60>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 80021d0:	2201      	movs	r2, #1
 80021d2:	2102      	movs	r1, #2
 80021d4:	4818      	ldr	r0, [pc, #96]	; (8002238 <Verify_Data+0xbc>)
 80021d6:	f006 fab7 	bl	8008748 <HAL_GPIO_WritePin>
 80021da:	e004      	b.n	80021e6 <Verify_Data+0x6a>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	2102      	movs	r1, #2
 80021e0:	4815      	ldr	r0, [pc, #84]	; (8002238 <Verify_Data+0xbc>)
 80021e2:	f006 fab1 	bl	8008748 <HAL_GPIO_WritePin>

	if((Verify_CAN & 1) == 1)
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <Verify_Data+0xc4>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <Verify_Data+0x80>
		HAL_GPIO_TogglePin(LED_CAN_TX);
 80021f2:	2104      	movs	r1, #4
 80021f4:	4810      	ldr	r0, [pc, #64]	; (8002238 <Verify_Data+0xbc>)
 80021f6:	f006 fac0 	bl	800877a <HAL_GPIO_TogglePin>
 80021fa:	e004      	b.n	8002206 <Verify_Data+0x8a>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2104      	movs	r1, #4
 8002200:	480d      	ldr	r0, [pc, #52]	; (8002238 <Verify_Data+0xbc>)
 8002202:	f006 faa1 	bl	8008748 <HAL_GPIO_WritePin>

	if((Verify_CAN & 2) == 2)
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <Verify_Data+0xc4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <Verify_Data+0xa0>
		HAL_GPIO_TogglePin(LED_CAN_RX);
 8002212:	2108      	movs	r1, #8
 8002214:	4808      	ldr	r0, [pc, #32]	; (8002238 <Verify_Data+0xbc>)
 8002216:	f006 fab0 	bl	800877a <HAL_GPIO_TogglePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
}
 800221a:	e004      	b.n	8002226 <Verify_Data+0xaa>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 800221c:	2200      	movs	r2, #0
 800221e:	2108      	movs	r1, #8
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <Verify_Data+0xbc>)
 8002222:	f006 fa91 	bl	8008748 <HAL_GPIO_WritePin>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20002e74 	.word	0x20002e74
 8002234:	20000704 	.word	0x20000704
 8002238:	40020800 	.word	0x40020800
 800223c:	20001a0c 	.word	0x20001a0c
 8002240:	20001a54 	.word	0x20001a54

08002244 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800224c:	4b43      	ldr	r3, [pc, #268]	; (800235c <Tx_Analog_1_4+0x118>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002252:	4b42      	ldr	r3, [pc, #264]	; (800235c <Tx_Analog_1_4+0x118>)
 8002254:	2200      	movs	r2, #0
 8002256:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002258:	4b40      	ldr	r3, [pc, #256]	; (800235c <Tx_Analog_1_4+0x118>)
 800225a:	2200      	movs	r2, #0
 800225c:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID;
 800225e:	4b3f      	ldr	r3, [pc, #252]	; (800235c <Tx_Analog_1_4+0x118>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002264:	4b3d      	ldr	r3, [pc, #244]	; (800235c <Tx_Analog_1_4+0x118>)
 8002266:	2208      	movs	r2, #8
 8002268:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[0] >> 8;
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <Tx_Analog_1_4+0x11c>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <Tx_Analog_1_4+0x120>)
 8002276:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[0] & 0xff;
 8002278:	4b39      	ldr	r3, [pc, #228]	; (8002360 <Tx_Analog_1_4+0x11c>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <Tx_Analog_1_4+0x120>)
 8002280:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[1] >> 8;
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <Tx_Analog_1_4+0x11c>)
 8002284:	885b      	ldrh	r3, [r3, #2]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b29b      	uxth	r3, r3
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b35      	ldr	r3, [pc, #212]	; (8002364 <Tx_Analog_1_4+0x120>)
 800228e:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[1] & 0xff;
 8002290:	4b33      	ldr	r3, [pc, #204]	; (8002360 <Tx_Analog_1_4+0x11c>)
 8002292:	885b      	ldrh	r3, [r3, #2]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b33      	ldr	r3, [pc, #204]	; (8002364 <Tx_Analog_1_4+0x120>)
 8002298:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[2] >> 8;
 800229a:	4b31      	ldr	r3, [pc, #196]	; (8002360 <Tx_Analog_1_4+0x11c>)
 800229c:	889b      	ldrh	r3, [r3, #4]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <Tx_Analog_1_4+0x120>)
 80022a6:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[2] & 0xff;
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <Tx_Analog_1_4+0x11c>)
 80022aa:	889b      	ldrh	r3, [r3, #4]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <Tx_Analog_1_4+0x120>)
 80022b0:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[3] >> 8;
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <Tx_Analog_1_4+0x11c>)
 80022b4:	88db      	ldrh	r3, [r3, #6]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <Tx_Analog_1_4+0x120>)
 80022be:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[3] & 0xff;
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <Tx_Analog_1_4+0x11c>)
 80022c2:	88db      	ldrh	r3, [r3, #6]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b27      	ldr	r3, [pc, #156]	; (8002364 <Tx_Analog_1_4+0x120>)
 80022c8:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 80022ca:	4b27      	ldr	r3, [pc, #156]	; (8002368 <Tx_Analog_1_4+0x124>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <Tx_Analog_1_4+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <Tx_Analog_1_4+0x118>)
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	4b21      	ldr	r3, [pc, #132]	; (800235c <Tx_Analog_1_4+0x118>)
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	b2d9      	uxtb	r1, r3
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <Tx_Analog_1_4+0x128>)
 80022de:	4a21      	ldr	r2, [pc, #132]	; (8002364 <Tx_Analog_1_4+0x120>)
 80022e0:	f003 fa1c 	bl	800571c <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_1_4] >= Per_CAN[Analog_1_4]) && (Per_CAN[Analog_1_4] != 0))
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <Tx_Analog_1_4+0x12c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a22      	ldr	r2, [pc, #136]	; (8002374 <Tx_Analog_1_4+0x130>)
 80022ea:	8812      	ldrh	r2, [r2, #0]
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d331      	bcc.n	8002354 <Tx_Analog_1_4+0x110>
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <Tx_Analog_1_4+0x130>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d02d      	beq.n	8002354 <Tx_Analog_1_4+0x110>
	{
		Acc_CAN[Analog_1_4] -= Per_CAN[Analog_1_4];
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <Tx_Analog_1_4+0x12c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <Tx_Analog_1_4+0x130>)
 80022fe:	8812      	ldrh	r2, [r2, #0]
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <Tx_Analog_1_4+0x12c>)
 8002304:	6013      	str	r3, [r2, #0]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <Tx_Analog_1_4+0x134>)
 8002308:	4a16      	ldr	r2, [pc, #88]	; (8002364 <Tx_Analog_1_4+0x120>)
 800230a:	4914      	ldr	r1, [pc, #80]	; (800235c <Tx_Analog_1_4+0x118>)
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f004 ff47 	bl	80071a0 <HAL_CAN_AddTxMessage>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <Tx_Analog_1_4+0xe4>
			Verify_CAN |= 1;
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <Tx_Analog_1_4+0x138>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b16      	ldr	r3, [pc, #88]	; (800237c <Tx_Analog_1_4+0x138>)
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e006      	b.n	8002336 <Tx_Analog_1_4+0xf2>
		else
			Verify_CAN &= 0x02;
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <Tx_Analog_1_4+0x138>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <Tx_Analog_1_4+0x138>)
 8002334:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	e002      	b.n	8002342 <Tx_Analog_1_4+0xfe>
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	3301      	adds	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f005 f807 	bl	8007356 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b03      	cmp	r3, #3
 800234c:	d002      	beq.n	8002354 <Tx_Analog_1_4+0x110>
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d9f3      	bls.n	800233c <Tx_Analog_1_4+0xf8>
	}
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20002d94 	.word	0x20002d94
 8002360:	20000704 	.word	0x20000704
 8002364:	20001bc4 	.word	0x20001bc4
 8002368:	20001bcc 	.word	0x20001bcc
 800236c:	20001c80 	.word	0x20001c80
 8002370:	20002d50 	.word	0x20002d50
 8002374:	200006fc 	.word	0x200006fc
 8002378:	20001c54 	.word	0x20001c54
 800237c:	20001a54 	.word	0x20001a54

08002380 <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002388:	4b43      	ldr	r3, [pc, #268]	; (8002498 <Tx_Analog_5_8+0x118>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800238e:	4b42      	ldr	r3, [pc, #264]	; (8002498 <Tx_Analog_5_8+0x118>)
 8002390:	2200      	movs	r2, #0
 8002392:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002394:	4b40      	ldr	r3, [pc, #256]	; (8002498 <Tx_Analog_5_8+0x118>)
 8002396:	2200      	movs	r2, #0
 8002398:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 1;
 800239a:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <Tx_Analog_5_8+0x118>)
 800239c:	2202      	movs	r2, #2
 800239e:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 80023a0:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <Tx_Analog_5_8+0x118>)
 80023a2:	2208      	movs	r2, #8
 80023a4:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[4] >> 8;
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <Tx_Analog_5_8+0x11c>)
 80023a8:	891b      	ldrh	r3, [r3, #8]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <Tx_Analog_5_8+0x120>)
 80023b2:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[4] & 0xff;
 80023b4:	4b39      	ldr	r3, [pc, #228]	; (800249c <Tx_Analog_5_8+0x11c>)
 80023b6:	891b      	ldrh	r3, [r3, #8]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <Tx_Analog_5_8+0x120>)
 80023bc:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[5] >> 8;
 80023be:	4b37      	ldr	r3, [pc, #220]	; (800249c <Tx_Analog_5_8+0x11c>)
 80023c0:	895b      	ldrh	r3, [r3, #10]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <Tx_Analog_5_8+0x120>)
 80023ca:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[5] & 0xff;
 80023cc:	4b33      	ldr	r3, [pc, #204]	; (800249c <Tx_Analog_5_8+0x11c>)
 80023ce:	895b      	ldrh	r3, [r3, #10]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <Tx_Analog_5_8+0x120>)
 80023d4:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[6] >> 8;
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <Tx_Analog_5_8+0x11c>)
 80023d8:	899b      	ldrh	r3, [r3, #12]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <Tx_Analog_5_8+0x120>)
 80023e2:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[6] & 0xff;
 80023e4:	4b2d      	ldr	r3, [pc, #180]	; (800249c <Tx_Analog_5_8+0x11c>)
 80023e6:	899b      	ldrh	r3, [r3, #12]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <Tx_Analog_5_8+0x120>)
 80023ec:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[7] >> 8;
 80023ee:	4b2b      	ldr	r3, [pc, #172]	; (800249c <Tx_Analog_5_8+0x11c>)
 80023f0:	89db      	ldrh	r3, [r3, #14]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <Tx_Analog_5_8+0x120>)
 80023fa:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[7] & 0xff;
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <Tx_Analog_5_8+0x11c>)
 80023fe:	89db      	ldrh	r3, [r3, #14]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <Tx_Analog_5_8+0x120>)
 8002404:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <Tx_Analog_5_8+0x124>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d108      	bne.n	8002420 <Tx_Analog_5_8+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <Tx_Analog_5_8+0x118>)
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <Tx_Analog_5_8+0x118>)
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	b2d9      	uxtb	r1, r3
 8002418:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <Tx_Analog_5_8+0x128>)
 800241a:	4a21      	ldr	r2, [pc, #132]	; (80024a0 <Tx_Analog_5_8+0x120>)
 800241c:	f003 f97e 	bl	800571c <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_5_8] >= Per_CAN[Analog_5_8]) && (Per_CAN[Analog_5_8] != 0))
 8002420:	4b22      	ldr	r3, [pc, #136]	; (80024ac <Tx_Analog_5_8+0x12c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <Tx_Analog_5_8+0x130>)
 8002426:	8852      	ldrh	r2, [r2, #2]
 8002428:	4293      	cmp	r3, r2
 800242a:	d331      	bcc.n	8002490 <Tx_Analog_5_8+0x110>
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <Tx_Analog_5_8+0x130>)
 800242e:	885b      	ldrh	r3, [r3, #2]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d02d      	beq.n	8002490 <Tx_Analog_5_8+0x110>
	{
		Acc_CAN[Analog_5_8] -= Per_CAN[Analog_5_8];
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <Tx_Analog_5_8+0x12c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <Tx_Analog_5_8+0x130>)
 800243a:	8852      	ldrh	r2, [r2, #2]
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <Tx_Analog_5_8+0x12c>)
 8002440:	6053      	str	r3, [r2, #4]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <Tx_Analog_5_8+0x134>)
 8002444:	4a16      	ldr	r2, [pc, #88]	; (80024a0 <Tx_Analog_5_8+0x120>)
 8002446:	4914      	ldr	r1, [pc, #80]	; (8002498 <Tx_Analog_5_8+0x118>)
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f004 fea9 	bl	80071a0 <HAL_CAN_AddTxMessage>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <Tx_Analog_5_8+0xe4>
			Verify_CAN |= 1;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <Tx_Analog_5_8+0x138>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <Tx_Analog_5_8+0x138>)
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e006      	b.n	8002472 <Tx_Analog_5_8+0xf2>
		else
			Verify_CAN &= 0x02;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <Tx_Analog_5_8+0x138>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <Tx_Analog_5_8+0x138>)
 8002470:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	e002      	b.n	800247e <Tx_Analog_5_8+0xfe>
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	3301      	adds	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f004 ff69 	bl	8007356 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002484:	4603      	mov	r3, r0
 8002486:	2b03      	cmp	r3, #3
 8002488:	d002      	beq.n	8002490 <Tx_Analog_5_8+0x110>
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d9f3      	bls.n	8002478 <Tx_Analog_5_8+0xf8>
	}
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20002d94 	.word	0x20002d94
 800249c:	20000704 	.word	0x20000704
 80024a0:	20001bc4 	.word	0x20001bc4
 80024a4:	20001bcc 	.word	0x20001bcc
 80024a8:	20001c80 	.word	0x20001c80
 80024ac:	20002d50 	.word	0x20002d50
 80024b0:	200006fc 	.word	0x200006fc
 80024b4:	20001c54 	.word	0x20001c54
 80024b8:	20001a54 	.word	0x20001a54

080024bc <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80024c4:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <Tx_Analog_9_12+0x118>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80024ca:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <Tx_Analog_9_12+0x118>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80024d0:	4b40      	ldr	r3, [pc, #256]	; (80025d4 <Tx_Analog_9_12+0x118>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 2;
 80024d6:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <Tx_Analog_9_12+0x118>)
 80024d8:	2203      	movs	r2, #3
 80024da:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 80024dc:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <Tx_Analog_9_12+0x118>)
 80024de:	2208      	movs	r2, #8
 80024e0:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[8] >> 8;
 80024e2:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <Tx_Analog_9_12+0x11c>)
 80024e4:	8a1b      	ldrh	r3, [r3, #16]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <Tx_Analog_9_12+0x120>)
 80024ee:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[8] & 0xff;
 80024f0:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <Tx_Analog_9_12+0x11c>)
 80024f2:	8a1b      	ldrh	r3, [r3, #16]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <Tx_Analog_9_12+0x120>)
 80024f8:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[9] >> 8;
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <Tx_Analog_9_12+0x11c>)
 80024fc:	8a5b      	ldrh	r3, [r3, #18]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	b29b      	uxth	r3, r3
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b35      	ldr	r3, [pc, #212]	; (80025dc <Tx_Analog_9_12+0x120>)
 8002506:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[9] & 0xff;
 8002508:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <Tx_Analog_9_12+0x11c>)
 800250a:	8a5b      	ldrh	r3, [r3, #18]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b33      	ldr	r3, [pc, #204]	; (80025dc <Tx_Analog_9_12+0x120>)
 8002510:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[10] >> 8;
 8002512:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <Tx_Analog_9_12+0x11c>)
 8002514:	8a9b      	ldrh	r3, [r3, #20]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	b29b      	uxth	r3, r3
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <Tx_Analog_9_12+0x120>)
 800251e:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[10] & 0xff;
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <Tx_Analog_9_12+0x11c>)
 8002522:	8a9b      	ldrh	r3, [r3, #20]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <Tx_Analog_9_12+0x120>)
 8002528:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[11] >> 8;
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <Tx_Analog_9_12+0x11c>)
 800252c:	8adb      	ldrh	r3, [r3, #22]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	b29b      	uxth	r3, r3
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <Tx_Analog_9_12+0x120>)
 8002536:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[11] & 0xff;
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <Tx_Analog_9_12+0x11c>)
 800253a:	8adb      	ldrh	r3, [r3, #22]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b27      	ldr	r3, [pc, #156]	; (80025dc <Tx_Analog_9_12+0x120>)
 8002540:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 8002542:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <Tx_Analog_9_12+0x124>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d108      	bne.n	800255c <Tx_Analog_9_12+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <Tx_Analog_9_12+0x118>)
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <Tx_Analog_9_12+0x118>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	b2d9      	uxtb	r1, r3
 8002554:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <Tx_Analog_9_12+0x128>)
 8002556:	4a21      	ldr	r2, [pc, #132]	; (80025dc <Tx_Analog_9_12+0x120>)
 8002558:	f003 f8e0 	bl	800571c <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_9_12] >= Per_CAN[Analog_9_12]) && (Per_CAN[Analog_9_12] != 0))
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <Tx_Analog_9_12+0x12c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a22      	ldr	r2, [pc, #136]	; (80025ec <Tx_Analog_9_12+0x130>)
 8002562:	8892      	ldrh	r2, [r2, #4]
 8002564:	4293      	cmp	r3, r2
 8002566:	d331      	bcc.n	80025cc <Tx_Analog_9_12+0x110>
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <Tx_Analog_9_12+0x130>)
 800256a:	889b      	ldrh	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02d      	beq.n	80025cc <Tx_Analog_9_12+0x110>
	{
		Acc_CAN[Analog_9_12] -= Per_CAN[Analog_9_12];
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <Tx_Analog_9_12+0x12c>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <Tx_Analog_9_12+0x130>)
 8002576:	8892      	ldrh	r2, [r2, #4]
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <Tx_Analog_9_12+0x12c>)
 800257c:	6093      	str	r3, [r2, #8]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <Tx_Analog_9_12+0x134>)
 8002580:	4a16      	ldr	r2, [pc, #88]	; (80025dc <Tx_Analog_9_12+0x120>)
 8002582:	4914      	ldr	r1, [pc, #80]	; (80025d4 <Tx_Analog_9_12+0x118>)
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f004 fe0b 	bl	80071a0 <HAL_CAN_AddTxMessage>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <Tx_Analog_9_12+0xe4>
			Verify_CAN |= 1;
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <Tx_Analog_9_12+0x138>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <Tx_Analog_9_12+0x138>)
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e006      	b.n	80025ae <Tx_Analog_9_12+0xf2>
		else
			Verify_CAN &= 0x02;
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <Tx_Analog_9_12+0x138>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <Tx_Analog_9_12+0x138>)
 80025ac:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e002      	b.n	80025ba <Tx_Analog_9_12+0xfe>
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f004 fecb 	bl	8007356 <HAL_CAN_GetTxMailboxesFreeLevel>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d002      	beq.n	80025cc <Tx_Analog_9_12+0x110>
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d9f3      	bls.n	80025b4 <Tx_Analog_9_12+0xf8>
	}
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20002d94 	.word	0x20002d94
 80025d8:	20000704 	.word	0x20000704
 80025dc:	20001bc4 	.word	0x20001bc4
 80025e0:	20001bcc 	.word	0x20001bcc
 80025e4:	20001c80 	.word	0x20001c80
 80025e8:	20002d50 	.word	0x20002d50
 80025ec:	200006fc 	.word	0x200006fc
 80025f0:	20001c54 	.word	0x20001c54
 80025f4:	20001a54 	.word	0x20001a54

080025f8 <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002600:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <Tx_RTC+0xe8>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002606:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <Tx_RTC+0xe8>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800260c:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <Tx_RTC+0xe8>)
 800260e:	2200      	movs	r2, #0
 8002610:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 5;
 8002612:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <Tx_RTC+0xe8>)
 8002614:	2206      	movs	r2, #6
 8002616:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 6;
 8002618:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <Tx_RTC+0xe8>)
 800261a:	2206      	movs	r2, #6
 800261c:	611a      	str	r2, [r3, #16]

	TxData[0] = Time.Hours;
 800261e:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <Tx_RTC+0xec>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <Tx_RTC+0xf0>)
 8002624:	701a      	strb	r2, [r3, #0]
	TxData[1] = Time.Minutes;
 8002626:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <Tx_RTC+0xec>)
 8002628:	785a      	ldrb	r2, [r3, #1]
 800262a:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <Tx_RTC+0xf0>)
 800262c:	705a      	strb	r2, [r3, #1]
	TxData[2] = Time.Seconds;
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <Tx_RTC+0xec>)
 8002630:	789a      	ldrb	r2, [r3, #2]
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <Tx_RTC+0xf0>)
 8002634:	709a      	strb	r2, [r3, #2]
	TxData[3] = Date.Date;
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <Tx_RTC+0xf4>)
 8002638:	789a      	ldrb	r2, [r3, #2]
 800263a:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <Tx_RTC+0xf0>)
 800263c:	70da      	strb	r2, [r3, #3]
	TxData[4] = Date.Month;
 800263e:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <Tx_RTC+0xf4>)
 8002640:	785a      	ldrb	r2, [r3, #1]
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <Tx_RTC+0xf0>)
 8002644:	711a      	strb	r2, [r3, #4]
	TxData[5] = Date.Year;
 8002646:	4b29      	ldr	r3, [pc, #164]	; (80026ec <Tx_RTC+0xf4>)
 8002648:	78da      	ldrb	r2, [r3, #3]
 800264a:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <Tx_RTC+0xf0>)
 800264c:	715a      	strb	r2, [r3, #5]

	if(Flag_Datalogger == DL_Save)
 800264e:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <Tx_RTC+0xf8>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <Tx_RTC+0x70>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <Tx_RTC+0xe8>)
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <Tx_RTC+0xe8>)
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	b2d9      	uxtb	r1, r3
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <Tx_RTC+0xfc>)
 8002662:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <Tx_RTC+0xf0>)
 8002664:	f003 f85a 	bl	800571c <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[RTC_Msg] >= Per_CAN[RTC_Msg]) && (Per_CAN[RTC_Msg] != 0))
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <Tx_RTC+0x100>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a23      	ldr	r2, [pc, #140]	; (80026fc <Tx_RTC+0x104>)
 800266e:	88d2      	ldrh	r2, [r2, #6]
 8002670:	4293      	cmp	r3, r2
 8002672:	d331      	bcc.n	80026d8 <Tx_RTC+0xe0>
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <Tx_RTC+0x104>)
 8002676:	88db      	ldrh	r3, [r3, #6]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02d      	beq.n	80026d8 <Tx_RTC+0xe0>
	{
		Acc_CAN[RTC_Msg] -= Per_CAN[RTC_Msg];
 800267c:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <Tx_RTC+0x100>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a1e      	ldr	r2, [pc, #120]	; (80026fc <Tx_RTC+0x104>)
 8002682:	88d2      	ldrh	r2, [r2, #6]
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <Tx_RTC+0x100>)
 8002688:	60d3      	str	r3, [r2, #12]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <Tx_RTC+0x108>)
 800268c:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <Tx_RTC+0xf0>)
 800268e:	4914      	ldr	r1, [pc, #80]	; (80026e0 <Tx_RTC+0xe8>)
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f004 fd85 	bl	80071a0 <HAL_CAN_AddTxMessage>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d107      	bne.n	80026ac <Tx_RTC+0xb4>
			Verify_CAN |= 1;
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <Tx_RTC+0x10c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <Tx_RTC+0x10c>)
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e006      	b.n	80026ba <Tx_RTC+0xc2>
		else
			Verify_CAN &= 0x02;
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <Tx_RTC+0x10c>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <Tx_RTC+0x10c>)
 80026b8:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	e002      	b.n	80026c6 <Tx_RTC+0xce>
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	3301      	adds	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f004 fe45 	bl	8007356 <HAL_CAN_GetTxMailboxesFreeLevel>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d002      	beq.n	80026d8 <Tx_RTC+0xe0>
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d9f3      	bls.n	80026c0 <Tx_RTC+0xc8>
	}
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20002d94 	.word	0x20002d94
 80026e4:	20002cac 	.word	0x20002cac
 80026e8:	20001bc4 	.word	0x20001bc4
 80026ec:	20001a58 	.word	0x20001a58
 80026f0:	20001bcc 	.word	0x20001bcc
 80026f4:	20001c80 	.word	0x20001c80
 80026f8:	20002d50 	.word	0x20002d50
 80026fc:	200006fc 	.word	0x200006fc
 8002700:	20001c54 	.word	0x20001c54
 8002704:	20001a54 	.word	0x20001a54

08002708 <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002710:	4bcb      	ldr	r3, [pc, #812]	; (8002a40 <Tx_Verify+0x338>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002716:	4bca      	ldr	r3, [pc, #808]	; (8002a40 <Tx_Verify+0x338>)
 8002718:	2200      	movs	r2, #0
 800271a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800271c:	4bc8      	ldr	r3, [pc, #800]	; (8002a40 <Tx_Verify+0x338>)
 800271e:	2200      	movs	r2, #0
 8002720:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + 4;
 8002722:	4bc7      	ldr	r3, [pc, #796]	; (8002a40 <Tx_Verify+0x338>)
 8002724:	2205      	movs	r2, #5
 8002726:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002728:	4bc5      	ldr	r3, [pc, #788]	; (8002a40 <Tx_Verify+0x338>)
 800272a:	2208      	movs	r2, #8
 800272c:	611a      	str	r2, [r3, #16]

	Verify_Data();
 800272e:	f7ff fd25 	bl	800217c <Verify_Data>

	TxData[0]  = Verify >> 8;
 8002732:	4bc4      	ldr	r3, [pc, #784]	; (8002a44 <Tx_Verify+0x33c>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	b29b      	uxth	r3, r3
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4bc2      	ldr	r3, [pc, #776]	; (8002a48 <Tx_Verify+0x340>)
 800273e:	701a      	strb	r2, [r3, #0]
	TxData[1]  = Verify & 0x0f;
 8002740:	4bc0      	ldr	r3, [pc, #768]	; (8002a44 <Tx_Verify+0x33c>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4bbe      	ldr	r3, [pc, #760]	; (8002a48 <Tx_Verify+0x340>)
 800274e:	705a      	strb	r2, [r3, #1]
	TxData[1] |= Verify_Datalogger << 4;
 8002750:	4bbd      	ldr	r3, [pc, #756]	; (8002a48 <Tx_Verify+0x340>)
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	b25a      	sxtb	r2, r3
 8002756:	4bbd      	ldr	r3, [pc, #756]	; (8002a4c <Tx_Verify+0x344>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	b25b      	sxtb	r3, r3
 800275e:	4313      	orrs	r3, r2
 8002760:	b25b      	sxtb	r3, r3
 8002762:	b2da      	uxtb	r2, r3
 8002764:	4bb8      	ldr	r3, [pc, #736]	; (8002a48 <Tx_Verify+0x340>)
 8002766:	705a      	strb	r2, [r3, #1]

	__SAVE_FREQ(TxData[2], Per_Msg[Analog_1_4]);
 8002768:	4bb9      	ldr	r3, [pc, #740]	; (8002a50 <Tx_Verify+0x348>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002770:	f000 8081 	beq.w	8002876 <Tx_Verify+0x16e>
 8002774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002778:	f300 80a9 	bgt.w	80028ce <Tx_Verify+0x1c6>
 800277c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002780:	d07d      	beq.n	800287e <Tx_Verify+0x176>
 8002782:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002786:	f300 80a2 	bgt.w	80028ce <Tx_Verify+0x1c6>
 800278a:	2bc8      	cmp	r3, #200	; 0xc8
 800278c:	d07b      	beq.n	8002886 <Tx_Verify+0x17e>
 800278e:	2bc8      	cmp	r3, #200	; 0xc8
 8002790:	f300 809d 	bgt.w	80028ce <Tx_Verify+0x1c6>
 8002794:	2b32      	cmp	r3, #50	; 0x32
 8002796:	dc6b      	bgt.n	8002870 <Tx_Verify+0x168>
 8002798:	2b02      	cmp	r3, #2
 800279a:	f2c0 8098 	blt.w	80028ce <Tx_Verify+0x1c6>
 800279e:	3b02      	subs	r3, #2
 80027a0:	2b30      	cmp	r3, #48	; 0x30
 80027a2:	f200 8094 	bhi.w	80028ce <Tx_Verify+0x1c6>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <Tx_Verify+0xa4>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080028c7 	.word	0x080028c7
 80027b0:	080028bf 	.word	0x080028bf
 80027b4:	080028cf 	.word	0x080028cf
 80027b8:	080028b7 	.word	0x080028b7
 80027bc:	080028cf 	.word	0x080028cf
 80027c0:	080028cf 	.word	0x080028cf
 80027c4:	080028cf 	.word	0x080028cf
 80027c8:	080028cf 	.word	0x080028cf
 80027cc:	080028af 	.word	0x080028af
 80027d0:	080028cf 	.word	0x080028cf
 80027d4:	080028cf 	.word	0x080028cf
 80027d8:	080028cf 	.word	0x080028cf
 80027dc:	080028cf 	.word	0x080028cf
 80027e0:	080028cf 	.word	0x080028cf
 80027e4:	080028cf 	.word	0x080028cf
 80027e8:	080028cf 	.word	0x080028cf
 80027ec:	080028cf 	.word	0x080028cf
 80027f0:	080028cf 	.word	0x080028cf
 80027f4:	080028a7 	.word	0x080028a7
 80027f8:	080028cf 	.word	0x080028cf
 80027fc:	080028cf 	.word	0x080028cf
 8002800:	080028cf 	.word	0x080028cf
 8002804:	080028cf 	.word	0x080028cf
 8002808:	080028cf 	.word	0x080028cf
 800280c:	080028cf 	.word	0x080028cf
 8002810:	080028cf 	.word	0x080028cf
 8002814:	080028cf 	.word	0x080028cf
 8002818:	080028cf 	.word	0x080028cf
 800281c:	080028cf 	.word	0x080028cf
 8002820:	080028cf 	.word	0x080028cf
 8002824:	080028cf 	.word	0x080028cf
 8002828:	080028cf 	.word	0x080028cf
 800282c:	080028cf 	.word	0x080028cf
 8002830:	080028cf 	.word	0x080028cf
 8002834:	080028cf 	.word	0x080028cf
 8002838:	080028cf 	.word	0x080028cf
 800283c:	080028cf 	.word	0x080028cf
 8002840:	080028cf 	.word	0x080028cf
 8002844:	0800289f 	.word	0x0800289f
 8002848:	080028cf 	.word	0x080028cf
 800284c:	080028cf 	.word	0x080028cf
 8002850:	080028cf 	.word	0x080028cf
 8002854:	080028cf 	.word	0x080028cf
 8002858:	080028cf 	.word	0x080028cf
 800285c:	080028cf 	.word	0x080028cf
 8002860:	080028cf 	.word	0x080028cf
 8002864:	080028cf 	.word	0x080028cf
 8002868:	080028cf 	.word	0x080028cf
 800286c:	08002897 	.word	0x08002897
 8002870:	2b64      	cmp	r3, #100	; 0x64
 8002872:	d00c      	beq.n	800288e <Tx_Verify+0x186>
 8002874:	e02b      	b.n	80028ce <Tx_Verify+0x1c6>
 8002876:	4b74      	ldr	r3, [pc, #464]	; (8002a48 <Tx_Verify+0x340>)
 8002878:	2201      	movs	r2, #1
 800287a:	709a      	strb	r2, [r3, #2]
 800287c:	e02a      	b.n	80028d4 <Tx_Verify+0x1cc>
 800287e:	4b72      	ldr	r3, [pc, #456]	; (8002a48 <Tx_Verify+0x340>)
 8002880:	2202      	movs	r2, #2
 8002882:	709a      	strb	r2, [r3, #2]
 8002884:	e026      	b.n	80028d4 <Tx_Verify+0x1cc>
 8002886:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <Tx_Verify+0x340>)
 8002888:	2203      	movs	r2, #3
 800288a:	709a      	strb	r2, [r3, #2]
 800288c:	e022      	b.n	80028d4 <Tx_Verify+0x1cc>
 800288e:	4b6e      	ldr	r3, [pc, #440]	; (8002a48 <Tx_Verify+0x340>)
 8002890:	2204      	movs	r2, #4
 8002892:	709a      	strb	r2, [r3, #2]
 8002894:	e01e      	b.n	80028d4 <Tx_Verify+0x1cc>
 8002896:	4b6c      	ldr	r3, [pc, #432]	; (8002a48 <Tx_Verify+0x340>)
 8002898:	2205      	movs	r2, #5
 800289a:	709a      	strb	r2, [r3, #2]
 800289c:	e01a      	b.n	80028d4 <Tx_Verify+0x1cc>
 800289e:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <Tx_Verify+0x340>)
 80028a0:	2206      	movs	r2, #6
 80028a2:	709a      	strb	r2, [r3, #2]
 80028a4:	e016      	b.n	80028d4 <Tx_Verify+0x1cc>
 80028a6:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <Tx_Verify+0x340>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	709a      	strb	r2, [r3, #2]
 80028ac:	e012      	b.n	80028d4 <Tx_Verify+0x1cc>
 80028ae:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <Tx_Verify+0x340>)
 80028b0:	2208      	movs	r2, #8
 80028b2:	709a      	strb	r2, [r3, #2]
 80028b4:	e00e      	b.n	80028d4 <Tx_Verify+0x1cc>
 80028b6:	4b64      	ldr	r3, [pc, #400]	; (8002a48 <Tx_Verify+0x340>)
 80028b8:	2209      	movs	r2, #9
 80028ba:	709a      	strb	r2, [r3, #2]
 80028bc:	e00a      	b.n	80028d4 <Tx_Verify+0x1cc>
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <Tx_Verify+0x340>)
 80028c0:	220a      	movs	r2, #10
 80028c2:	709a      	strb	r2, [r3, #2]
 80028c4:	e006      	b.n	80028d4 <Tx_Verify+0x1cc>
 80028c6:	4b60      	ldr	r3, [pc, #384]	; (8002a48 <Tx_Verify+0x340>)
 80028c8:	220b      	movs	r2, #11
 80028ca:	709a      	strb	r2, [r3, #2]
 80028cc:	e002      	b.n	80028d4 <Tx_Verify+0x1cc>
 80028ce:	4b5e      	ldr	r3, [pc, #376]	; (8002a48 <Tx_Verify+0x340>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	709a      	strb	r2, [r3, #2]
 80028d4:	bf00      	nop
	__SAVE_FREQ(TxData[3], Per_Msg[Analog_5_8]);
 80028d6:	4b5e      	ldr	r3, [pc, #376]	; (8002a50 <Tx_Verify+0x348>)
 80028d8:	885b      	ldrh	r3, [r3, #2]
 80028da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028de:	f000 8082 	beq.w	80029e6 <Tx_Verify+0x2de>
 80028e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e6:	f300 80b5 	bgt.w	8002a54 <Tx_Verify+0x34c>
 80028ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028ee:	d07e      	beq.n	80029ee <Tx_Verify+0x2e6>
 80028f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028f4:	f300 80ae 	bgt.w	8002a54 <Tx_Verify+0x34c>
 80028f8:	2bc8      	cmp	r3, #200	; 0xc8
 80028fa:	d07c      	beq.n	80029f6 <Tx_Verify+0x2ee>
 80028fc:	2bc8      	cmp	r3, #200	; 0xc8
 80028fe:	f300 80a9 	bgt.w	8002a54 <Tx_Verify+0x34c>
 8002902:	2b32      	cmp	r3, #50	; 0x32
 8002904:	dc6c      	bgt.n	80029e0 <Tx_Verify+0x2d8>
 8002906:	2b02      	cmp	r3, #2
 8002908:	f2c0 80a4 	blt.w	8002a54 <Tx_Verify+0x34c>
 800290c:	3b02      	subs	r3, #2
 800290e:	2b30      	cmp	r3, #48	; 0x30
 8002910:	f200 80a0 	bhi.w	8002a54 <Tx_Verify+0x34c>
 8002914:	a201      	add	r2, pc, #4	; (adr r2, 800291c <Tx_Verify+0x214>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	08002a37 	.word	0x08002a37
 8002920:	08002a2f 	.word	0x08002a2f
 8002924:	08002a55 	.word	0x08002a55
 8002928:	08002a27 	.word	0x08002a27
 800292c:	08002a55 	.word	0x08002a55
 8002930:	08002a55 	.word	0x08002a55
 8002934:	08002a55 	.word	0x08002a55
 8002938:	08002a55 	.word	0x08002a55
 800293c:	08002a1f 	.word	0x08002a1f
 8002940:	08002a55 	.word	0x08002a55
 8002944:	08002a55 	.word	0x08002a55
 8002948:	08002a55 	.word	0x08002a55
 800294c:	08002a55 	.word	0x08002a55
 8002950:	08002a55 	.word	0x08002a55
 8002954:	08002a55 	.word	0x08002a55
 8002958:	08002a55 	.word	0x08002a55
 800295c:	08002a55 	.word	0x08002a55
 8002960:	08002a55 	.word	0x08002a55
 8002964:	08002a17 	.word	0x08002a17
 8002968:	08002a55 	.word	0x08002a55
 800296c:	08002a55 	.word	0x08002a55
 8002970:	08002a55 	.word	0x08002a55
 8002974:	08002a55 	.word	0x08002a55
 8002978:	08002a55 	.word	0x08002a55
 800297c:	08002a55 	.word	0x08002a55
 8002980:	08002a55 	.word	0x08002a55
 8002984:	08002a55 	.word	0x08002a55
 8002988:	08002a55 	.word	0x08002a55
 800298c:	08002a55 	.word	0x08002a55
 8002990:	08002a55 	.word	0x08002a55
 8002994:	08002a55 	.word	0x08002a55
 8002998:	08002a55 	.word	0x08002a55
 800299c:	08002a55 	.word	0x08002a55
 80029a0:	08002a55 	.word	0x08002a55
 80029a4:	08002a55 	.word	0x08002a55
 80029a8:	08002a55 	.word	0x08002a55
 80029ac:	08002a55 	.word	0x08002a55
 80029b0:	08002a55 	.word	0x08002a55
 80029b4:	08002a0f 	.word	0x08002a0f
 80029b8:	08002a55 	.word	0x08002a55
 80029bc:	08002a55 	.word	0x08002a55
 80029c0:	08002a55 	.word	0x08002a55
 80029c4:	08002a55 	.word	0x08002a55
 80029c8:	08002a55 	.word	0x08002a55
 80029cc:	08002a55 	.word	0x08002a55
 80029d0:	08002a55 	.word	0x08002a55
 80029d4:	08002a55 	.word	0x08002a55
 80029d8:	08002a55 	.word	0x08002a55
 80029dc:	08002a07 	.word	0x08002a07
 80029e0:	2b64      	cmp	r3, #100	; 0x64
 80029e2:	d00c      	beq.n	80029fe <Tx_Verify+0x2f6>
 80029e4:	e036      	b.n	8002a54 <Tx_Verify+0x34c>
 80029e6:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <Tx_Verify+0x340>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	70da      	strb	r2, [r3, #3]
 80029ec:	e035      	b.n	8002a5a <Tx_Verify+0x352>
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <Tx_Verify+0x340>)
 80029f0:	2202      	movs	r2, #2
 80029f2:	70da      	strb	r2, [r3, #3]
 80029f4:	e031      	b.n	8002a5a <Tx_Verify+0x352>
 80029f6:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <Tx_Verify+0x340>)
 80029f8:	2203      	movs	r2, #3
 80029fa:	70da      	strb	r2, [r3, #3]
 80029fc:	e02d      	b.n	8002a5a <Tx_Verify+0x352>
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <Tx_Verify+0x340>)
 8002a00:	2204      	movs	r2, #4
 8002a02:	70da      	strb	r2, [r3, #3]
 8002a04:	e029      	b.n	8002a5a <Tx_Verify+0x352>
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <Tx_Verify+0x340>)
 8002a08:	2205      	movs	r2, #5
 8002a0a:	70da      	strb	r2, [r3, #3]
 8002a0c:	e025      	b.n	8002a5a <Tx_Verify+0x352>
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <Tx_Verify+0x340>)
 8002a10:	2206      	movs	r2, #6
 8002a12:	70da      	strb	r2, [r3, #3]
 8002a14:	e021      	b.n	8002a5a <Tx_Verify+0x352>
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <Tx_Verify+0x340>)
 8002a18:	2207      	movs	r2, #7
 8002a1a:	70da      	strb	r2, [r3, #3]
 8002a1c:	e01d      	b.n	8002a5a <Tx_Verify+0x352>
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <Tx_Verify+0x340>)
 8002a20:	2208      	movs	r2, #8
 8002a22:	70da      	strb	r2, [r3, #3]
 8002a24:	e019      	b.n	8002a5a <Tx_Verify+0x352>
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <Tx_Verify+0x340>)
 8002a28:	2209      	movs	r2, #9
 8002a2a:	70da      	strb	r2, [r3, #3]
 8002a2c:	e015      	b.n	8002a5a <Tx_Verify+0x352>
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <Tx_Verify+0x340>)
 8002a30:	220a      	movs	r2, #10
 8002a32:	70da      	strb	r2, [r3, #3]
 8002a34:	e011      	b.n	8002a5a <Tx_Verify+0x352>
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <Tx_Verify+0x340>)
 8002a38:	220b      	movs	r2, #11
 8002a3a:	70da      	strb	r2, [r3, #3]
 8002a3c:	e00d      	b.n	8002a5a <Tx_Verify+0x352>
 8002a3e:	bf00      	nop
 8002a40:	20002d94 	.word	0x20002d94
 8002a44:	20002e74 	.word	0x20002e74
 8002a48:	20001bc4 	.word	0x20001bc4
 8002a4c:	20001a0c 	.word	0x20001a0c
 8002a50:	20002e78 	.word	0x20002e78
 8002a54:	4bb7      	ldr	r3, [pc, #732]	; (8002d34 <Tx_Verify+0x62c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	70da      	strb	r2, [r3, #3]
 8002a5a:	bf00      	nop
	__SAVE_FREQ(TxData[4], Per_Msg[Analog_9_12]);
 8002a5c:	4bb6      	ldr	r3, [pc, #728]	; (8002d38 <Tx_Verify+0x630>)
 8002a5e:	889b      	ldrh	r3, [r3, #4]
 8002a60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a64:	f000 8081 	beq.w	8002b6a <Tx_Verify+0x462>
 8002a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a6c:	f300 80a9 	bgt.w	8002bc2 <Tx_Verify+0x4ba>
 8002a70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a74:	d07d      	beq.n	8002b72 <Tx_Verify+0x46a>
 8002a76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a7a:	f300 80a2 	bgt.w	8002bc2 <Tx_Verify+0x4ba>
 8002a7e:	2bc8      	cmp	r3, #200	; 0xc8
 8002a80:	d07b      	beq.n	8002b7a <Tx_Verify+0x472>
 8002a82:	2bc8      	cmp	r3, #200	; 0xc8
 8002a84:	f300 809d 	bgt.w	8002bc2 <Tx_Verify+0x4ba>
 8002a88:	2b32      	cmp	r3, #50	; 0x32
 8002a8a:	dc6b      	bgt.n	8002b64 <Tx_Verify+0x45c>
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	f2c0 8098 	blt.w	8002bc2 <Tx_Verify+0x4ba>
 8002a92:	3b02      	subs	r3, #2
 8002a94:	2b30      	cmp	r3, #48	; 0x30
 8002a96:	f200 8094 	bhi.w	8002bc2 <Tx_Verify+0x4ba>
 8002a9a:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <Tx_Verify+0x398>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002bbb 	.word	0x08002bbb
 8002aa4:	08002bb3 	.word	0x08002bb3
 8002aa8:	08002bc3 	.word	0x08002bc3
 8002aac:	08002bab 	.word	0x08002bab
 8002ab0:	08002bc3 	.word	0x08002bc3
 8002ab4:	08002bc3 	.word	0x08002bc3
 8002ab8:	08002bc3 	.word	0x08002bc3
 8002abc:	08002bc3 	.word	0x08002bc3
 8002ac0:	08002ba3 	.word	0x08002ba3
 8002ac4:	08002bc3 	.word	0x08002bc3
 8002ac8:	08002bc3 	.word	0x08002bc3
 8002acc:	08002bc3 	.word	0x08002bc3
 8002ad0:	08002bc3 	.word	0x08002bc3
 8002ad4:	08002bc3 	.word	0x08002bc3
 8002ad8:	08002bc3 	.word	0x08002bc3
 8002adc:	08002bc3 	.word	0x08002bc3
 8002ae0:	08002bc3 	.word	0x08002bc3
 8002ae4:	08002bc3 	.word	0x08002bc3
 8002ae8:	08002b9b 	.word	0x08002b9b
 8002aec:	08002bc3 	.word	0x08002bc3
 8002af0:	08002bc3 	.word	0x08002bc3
 8002af4:	08002bc3 	.word	0x08002bc3
 8002af8:	08002bc3 	.word	0x08002bc3
 8002afc:	08002bc3 	.word	0x08002bc3
 8002b00:	08002bc3 	.word	0x08002bc3
 8002b04:	08002bc3 	.word	0x08002bc3
 8002b08:	08002bc3 	.word	0x08002bc3
 8002b0c:	08002bc3 	.word	0x08002bc3
 8002b10:	08002bc3 	.word	0x08002bc3
 8002b14:	08002bc3 	.word	0x08002bc3
 8002b18:	08002bc3 	.word	0x08002bc3
 8002b1c:	08002bc3 	.word	0x08002bc3
 8002b20:	08002bc3 	.word	0x08002bc3
 8002b24:	08002bc3 	.word	0x08002bc3
 8002b28:	08002bc3 	.word	0x08002bc3
 8002b2c:	08002bc3 	.word	0x08002bc3
 8002b30:	08002bc3 	.word	0x08002bc3
 8002b34:	08002bc3 	.word	0x08002bc3
 8002b38:	08002b93 	.word	0x08002b93
 8002b3c:	08002bc3 	.word	0x08002bc3
 8002b40:	08002bc3 	.word	0x08002bc3
 8002b44:	08002bc3 	.word	0x08002bc3
 8002b48:	08002bc3 	.word	0x08002bc3
 8002b4c:	08002bc3 	.word	0x08002bc3
 8002b50:	08002bc3 	.word	0x08002bc3
 8002b54:	08002bc3 	.word	0x08002bc3
 8002b58:	08002bc3 	.word	0x08002bc3
 8002b5c:	08002bc3 	.word	0x08002bc3
 8002b60:	08002b8b 	.word	0x08002b8b
 8002b64:	2b64      	cmp	r3, #100	; 0x64
 8002b66:	d00c      	beq.n	8002b82 <Tx_Verify+0x47a>
 8002b68:	e02b      	b.n	8002bc2 <Tx_Verify+0x4ba>
 8002b6a:	4b72      	ldr	r3, [pc, #456]	; (8002d34 <Tx_Verify+0x62c>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	711a      	strb	r2, [r3, #4]
 8002b70:	e02a      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002b72:	4b70      	ldr	r3, [pc, #448]	; (8002d34 <Tx_Verify+0x62c>)
 8002b74:	2202      	movs	r2, #2
 8002b76:	711a      	strb	r2, [r3, #4]
 8002b78:	e026      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002b7a:	4b6e      	ldr	r3, [pc, #440]	; (8002d34 <Tx_Verify+0x62c>)
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	711a      	strb	r2, [r3, #4]
 8002b80:	e022      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002b82:	4b6c      	ldr	r3, [pc, #432]	; (8002d34 <Tx_Verify+0x62c>)
 8002b84:	2204      	movs	r2, #4
 8002b86:	711a      	strb	r2, [r3, #4]
 8002b88:	e01e      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002b8a:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <Tx_Verify+0x62c>)
 8002b8c:	2205      	movs	r2, #5
 8002b8e:	711a      	strb	r2, [r3, #4]
 8002b90:	e01a      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002b92:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <Tx_Verify+0x62c>)
 8002b94:	2206      	movs	r2, #6
 8002b96:	711a      	strb	r2, [r3, #4]
 8002b98:	e016      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002b9a:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <Tx_Verify+0x62c>)
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	711a      	strb	r2, [r3, #4]
 8002ba0:	e012      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002ba2:	4b64      	ldr	r3, [pc, #400]	; (8002d34 <Tx_Verify+0x62c>)
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	711a      	strb	r2, [r3, #4]
 8002ba8:	e00e      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002baa:	4b62      	ldr	r3, [pc, #392]	; (8002d34 <Tx_Verify+0x62c>)
 8002bac:	2209      	movs	r2, #9
 8002bae:	711a      	strb	r2, [r3, #4]
 8002bb0:	e00a      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002bb2:	4b60      	ldr	r3, [pc, #384]	; (8002d34 <Tx_Verify+0x62c>)
 8002bb4:	220a      	movs	r2, #10
 8002bb6:	711a      	strb	r2, [r3, #4]
 8002bb8:	e006      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002bba:	4b5e      	ldr	r3, [pc, #376]	; (8002d34 <Tx_Verify+0x62c>)
 8002bbc:	220b      	movs	r2, #11
 8002bbe:	711a      	strb	r2, [r3, #4]
 8002bc0:	e002      	b.n	8002bc8 <Tx_Verify+0x4c0>
 8002bc2:	4b5c      	ldr	r3, [pc, #368]	; (8002d34 <Tx_Verify+0x62c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	711a      	strb	r2, [r3, #4]
 8002bc8:	bf00      	nop
	__SAVE_FREQ(TxData[5], Per_Msg[RTC_Msg]);
 8002bca:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <Tx_Verify+0x630>)
 8002bcc:	88db      	ldrh	r3, [r3, #6]
 8002bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd2:	f000 8082 	beq.w	8002cda <Tx_Verify+0x5d2>
 8002bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bda:	f300 80af 	bgt.w	8002d3c <Tx_Verify+0x634>
 8002bde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002be2:	d07e      	beq.n	8002ce2 <Tx_Verify+0x5da>
 8002be4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002be8:	f300 80a8 	bgt.w	8002d3c <Tx_Verify+0x634>
 8002bec:	2bc8      	cmp	r3, #200	; 0xc8
 8002bee:	d07c      	beq.n	8002cea <Tx_Verify+0x5e2>
 8002bf0:	2bc8      	cmp	r3, #200	; 0xc8
 8002bf2:	f300 80a3 	bgt.w	8002d3c <Tx_Verify+0x634>
 8002bf6:	2b32      	cmp	r3, #50	; 0x32
 8002bf8:	dc6c      	bgt.n	8002cd4 <Tx_Verify+0x5cc>
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	f2c0 809e 	blt.w	8002d3c <Tx_Verify+0x634>
 8002c00:	3b02      	subs	r3, #2
 8002c02:	2b30      	cmp	r3, #48	; 0x30
 8002c04:	f200 809a 	bhi.w	8002d3c <Tx_Verify+0x634>
 8002c08:	a201      	add	r2, pc, #4	; (adr r2, 8002c10 <Tx_Verify+0x508>)
 8002c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0e:	bf00      	nop
 8002c10:	08002d2b 	.word	0x08002d2b
 8002c14:	08002d23 	.word	0x08002d23
 8002c18:	08002d3d 	.word	0x08002d3d
 8002c1c:	08002d1b 	.word	0x08002d1b
 8002c20:	08002d3d 	.word	0x08002d3d
 8002c24:	08002d3d 	.word	0x08002d3d
 8002c28:	08002d3d 	.word	0x08002d3d
 8002c2c:	08002d3d 	.word	0x08002d3d
 8002c30:	08002d13 	.word	0x08002d13
 8002c34:	08002d3d 	.word	0x08002d3d
 8002c38:	08002d3d 	.word	0x08002d3d
 8002c3c:	08002d3d 	.word	0x08002d3d
 8002c40:	08002d3d 	.word	0x08002d3d
 8002c44:	08002d3d 	.word	0x08002d3d
 8002c48:	08002d3d 	.word	0x08002d3d
 8002c4c:	08002d3d 	.word	0x08002d3d
 8002c50:	08002d3d 	.word	0x08002d3d
 8002c54:	08002d3d 	.word	0x08002d3d
 8002c58:	08002d0b 	.word	0x08002d0b
 8002c5c:	08002d3d 	.word	0x08002d3d
 8002c60:	08002d3d 	.word	0x08002d3d
 8002c64:	08002d3d 	.word	0x08002d3d
 8002c68:	08002d3d 	.word	0x08002d3d
 8002c6c:	08002d3d 	.word	0x08002d3d
 8002c70:	08002d3d 	.word	0x08002d3d
 8002c74:	08002d3d 	.word	0x08002d3d
 8002c78:	08002d3d 	.word	0x08002d3d
 8002c7c:	08002d3d 	.word	0x08002d3d
 8002c80:	08002d3d 	.word	0x08002d3d
 8002c84:	08002d3d 	.word	0x08002d3d
 8002c88:	08002d3d 	.word	0x08002d3d
 8002c8c:	08002d3d 	.word	0x08002d3d
 8002c90:	08002d3d 	.word	0x08002d3d
 8002c94:	08002d3d 	.word	0x08002d3d
 8002c98:	08002d3d 	.word	0x08002d3d
 8002c9c:	08002d3d 	.word	0x08002d3d
 8002ca0:	08002d3d 	.word	0x08002d3d
 8002ca4:	08002d3d 	.word	0x08002d3d
 8002ca8:	08002d03 	.word	0x08002d03
 8002cac:	08002d3d 	.word	0x08002d3d
 8002cb0:	08002d3d 	.word	0x08002d3d
 8002cb4:	08002d3d 	.word	0x08002d3d
 8002cb8:	08002d3d 	.word	0x08002d3d
 8002cbc:	08002d3d 	.word	0x08002d3d
 8002cc0:	08002d3d 	.word	0x08002d3d
 8002cc4:	08002d3d 	.word	0x08002d3d
 8002cc8:	08002d3d 	.word	0x08002d3d
 8002ccc:	08002d3d 	.word	0x08002d3d
 8002cd0:	08002cfb 	.word	0x08002cfb
 8002cd4:	2b64      	cmp	r3, #100	; 0x64
 8002cd6:	d00c      	beq.n	8002cf2 <Tx_Verify+0x5ea>
 8002cd8:	e030      	b.n	8002d3c <Tx_Verify+0x634>
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <Tx_Verify+0x62c>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	715a      	strb	r2, [r3, #5]
 8002ce0:	e02f      	b.n	8002d42 <Tx_Verify+0x63a>
 8002ce2:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <Tx_Verify+0x62c>)
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	715a      	strb	r2, [r3, #5]
 8002ce8:	e02b      	b.n	8002d42 <Tx_Verify+0x63a>
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <Tx_Verify+0x62c>)
 8002cec:	2203      	movs	r2, #3
 8002cee:	715a      	strb	r2, [r3, #5]
 8002cf0:	e027      	b.n	8002d42 <Tx_Verify+0x63a>
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <Tx_Verify+0x62c>)
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	715a      	strb	r2, [r3, #5]
 8002cf8:	e023      	b.n	8002d42 <Tx_Verify+0x63a>
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <Tx_Verify+0x62c>)
 8002cfc:	2205      	movs	r2, #5
 8002cfe:	715a      	strb	r2, [r3, #5]
 8002d00:	e01f      	b.n	8002d42 <Tx_Verify+0x63a>
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <Tx_Verify+0x62c>)
 8002d04:	2206      	movs	r2, #6
 8002d06:	715a      	strb	r2, [r3, #5]
 8002d08:	e01b      	b.n	8002d42 <Tx_Verify+0x63a>
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <Tx_Verify+0x62c>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	715a      	strb	r2, [r3, #5]
 8002d10:	e017      	b.n	8002d42 <Tx_Verify+0x63a>
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <Tx_Verify+0x62c>)
 8002d14:	2208      	movs	r2, #8
 8002d16:	715a      	strb	r2, [r3, #5]
 8002d18:	e013      	b.n	8002d42 <Tx_Verify+0x63a>
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <Tx_Verify+0x62c>)
 8002d1c:	2209      	movs	r2, #9
 8002d1e:	715a      	strb	r2, [r3, #5]
 8002d20:	e00f      	b.n	8002d42 <Tx_Verify+0x63a>
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <Tx_Verify+0x62c>)
 8002d24:	220a      	movs	r2, #10
 8002d26:	715a      	strb	r2, [r3, #5]
 8002d28:	e00b      	b.n	8002d42 <Tx_Verify+0x63a>
 8002d2a:	4b02      	ldr	r3, [pc, #8]	; (8002d34 <Tx_Verify+0x62c>)
 8002d2c:	220b      	movs	r2, #11
 8002d2e:	715a      	strb	r2, [r3, #5]
 8002d30:	e007      	b.n	8002d42 <Tx_Verify+0x63a>
 8002d32:	bf00      	nop
 8002d34:	20001bc4 	.word	0x20001bc4
 8002d38:	20002e78 	.word	0x20002e78
 8002d3c:	4bcd      	ldr	r3, [pc, #820]	; (8003074 <Tx_Verify+0x96c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	715a      	strb	r2, [r3, #5]
 8002d42:	bf00      	nop
	__SAVE_FREQ(TxData[6], Per_Msg[PDM_Save]);
 8002d44:	4bcc      	ldr	r3, [pc, #816]	; (8003078 <Tx_Verify+0x970>)
 8002d46:	899b      	ldrh	r3, [r3, #12]
 8002d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d4c:	f000 8081 	beq.w	8002e52 <Tx_Verify+0x74a>
 8002d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d54:	f300 80a9 	bgt.w	8002eaa <Tx_Verify+0x7a2>
 8002d58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d5c:	d07d      	beq.n	8002e5a <Tx_Verify+0x752>
 8002d5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d62:	f300 80a2 	bgt.w	8002eaa <Tx_Verify+0x7a2>
 8002d66:	2bc8      	cmp	r3, #200	; 0xc8
 8002d68:	d07b      	beq.n	8002e62 <Tx_Verify+0x75a>
 8002d6a:	2bc8      	cmp	r3, #200	; 0xc8
 8002d6c:	f300 809d 	bgt.w	8002eaa <Tx_Verify+0x7a2>
 8002d70:	2b32      	cmp	r3, #50	; 0x32
 8002d72:	dc6b      	bgt.n	8002e4c <Tx_Verify+0x744>
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	f2c0 8098 	blt.w	8002eaa <Tx_Verify+0x7a2>
 8002d7a:	3b02      	subs	r3, #2
 8002d7c:	2b30      	cmp	r3, #48	; 0x30
 8002d7e:	f200 8094 	bhi.w	8002eaa <Tx_Verify+0x7a2>
 8002d82:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <Tx_Verify+0x680>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002ea3 	.word	0x08002ea3
 8002d8c:	08002e9b 	.word	0x08002e9b
 8002d90:	08002eab 	.word	0x08002eab
 8002d94:	08002e93 	.word	0x08002e93
 8002d98:	08002eab 	.word	0x08002eab
 8002d9c:	08002eab 	.word	0x08002eab
 8002da0:	08002eab 	.word	0x08002eab
 8002da4:	08002eab 	.word	0x08002eab
 8002da8:	08002e8b 	.word	0x08002e8b
 8002dac:	08002eab 	.word	0x08002eab
 8002db0:	08002eab 	.word	0x08002eab
 8002db4:	08002eab 	.word	0x08002eab
 8002db8:	08002eab 	.word	0x08002eab
 8002dbc:	08002eab 	.word	0x08002eab
 8002dc0:	08002eab 	.word	0x08002eab
 8002dc4:	08002eab 	.word	0x08002eab
 8002dc8:	08002eab 	.word	0x08002eab
 8002dcc:	08002eab 	.word	0x08002eab
 8002dd0:	08002e83 	.word	0x08002e83
 8002dd4:	08002eab 	.word	0x08002eab
 8002dd8:	08002eab 	.word	0x08002eab
 8002ddc:	08002eab 	.word	0x08002eab
 8002de0:	08002eab 	.word	0x08002eab
 8002de4:	08002eab 	.word	0x08002eab
 8002de8:	08002eab 	.word	0x08002eab
 8002dec:	08002eab 	.word	0x08002eab
 8002df0:	08002eab 	.word	0x08002eab
 8002df4:	08002eab 	.word	0x08002eab
 8002df8:	08002eab 	.word	0x08002eab
 8002dfc:	08002eab 	.word	0x08002eab
 8002e00:	08002eab 	.word	0x08002eab
 8002e04:	08002eab 	.word	0x08002eab
 8002e08:	08002eab 	.word	0x08002eab
 8002e0c:	08002eab 	.word	0x08002eab
 8002e10:	08002eab 	.word	0x08002eab
 8002e14:	08002eab 	.word	0x08002eab
 8002e18:	08002eab 	.word	0x08002eab
 8002e1c:	08002eab 	.word	0x08002eab
 8002e20:	08002e7b 	.word	0x08002e7b
 8002e24:	08002eab 	.word	0x08002eab
 8002e28:	08002eab 	.word	0x08002eab
 8002e2c:	08002eab 	.word	0x08002eab
 8002e30:	08002eab 	.word	0x08002eab
 8002e34:	08002eab 	.word	0x08002eab
 8002e38:	08002eab 	.word	0x08002eab
 8002e3c:	08002eab 	.word	0x08002eab
 8002e40:	08002eab 	.word	0x08002eab
 8002e44:	08002eab 	.word	0x08002eab
 8002e48:	08002e73 	.word	0x08002e73
 8002e4c:	2b64      	cmp	r3, #100	; 0x64
 8002e4e:	d00c      	beq.n	8002e6a <Tx_Verify+0x762>
 8002e50:	e02b      	b.n	8002eaa <Tx_Verify+0x7a2>
 8002e52:	4b88      	ldr	r3, [pc, #544]	; (8003074 <Tx_Verify+0x96c>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	719a      	strb	r2, [r3, #6]
 8002e58:	e02a      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002e5a:	4b86      	ldr	r3, [pc, #536]	; (8003074 <Tx_Verify+0x96c>)
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	719a      	strb	r2, [r3, #6]
 8002e60:	e026      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002e62:	4b84      	ldr	r3, [pc, #528]	; (8003074 <Tx_Verify+0x96c>)
 8002e64:	2203      	movs	r2, #3
 8002e66:	719a      	strb	r2, [r3, #6]
 8002e68:	e022      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002e6a:	4b82      	ldr	r3, [pc, #520]	; (8003074 <Tx_Verify+0x96c>)
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	719a      	strb	r2, [r3, #6]
 8002e70:	e01e      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002e72:	4b80      	ldr	r3, [pc, #512]	; (8003074 <Tx_Verify+0x96c>)
 8002e74:	2205      	movs	r2, #5
 8002e76:	719a      	strb	r2, [r3, #6]
 8002e78:	e01a      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002e7a:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <Tx_Verify+0x96c>)
 8002e7c:	2206      	movs	r2, #6
 8002e7e:	719a      	strb	r2, [r3, #6]
 8002e80:	e016      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002e82:	4b7c      	ldr	r3, [pc, #496]	; (8003074 <Tx_Verify+0x96c>)
 8002e84:	2207      	movs	r2, #7
 8002e86:	719a      	strb	r2, [r3, #6]
 8002e88:	e012      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002e8a:	4b7a      	ldr	r3, [pc, #488]	; (8003074 <Tx_Verify+0x96c>)
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	719a      	strb	r2, [r3, #6]
 8002e90:	e00e      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002e92:	4b78      	ldr	r3, [pc, #480]	; (8003074 <Tx_Verify+0x96c>)
 8002e94:	2209      	movs	r2, #9
 8002e96:	719a      	strb	r2, [r3, #6]
 8002e98:	e00a      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002e9a:	4b76      	ldr	r3, [pc, #472]	; (8003074 <Tx_Verify+0x96c>)
 8002e9c:	220a      	movs	r2, #10
 8002e9e:	719a      	strb	r2, [r3, #6]
 8002ea0:	e006      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002ea2:	4b74      	ldr	r3, [pc, #464]	; (8003074 <Tx_Verify+0x96c>)
 8002ea4:	220b      	movs	r2, #11
 8002ea6:	719a      	strb	r2, [r3, #6]
 8002ea8:	e002      	b.n	8002eb0 <Tx_Verify+0x7a8>
 8002eaa:	4b72      	ldr	r3, [pc, #456]	; (8003074 <Tx_Verify+0x96c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	719a      	strb	r2, [r3, #6]
 8002eb0:	bf00      	nop
	__SAVE_FREQ(TxData[7], Per_Msg[ECU_Save]);
 8002eb2:	4b71      	ldr	r3, [pc, #452]	; (8003078 <Tx_Verify+0x970>)
 8002eb4:	895b      	ldrh	r3, [r3, #10]
 8002eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eba:	f000 8082 	beq.w	8002fc2 <Tx_Verify+0x8ba>
 8002ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ec2:	f300 80aa 	bgt.w	800301a <Tx_Verify+0x912>
 8002ec6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eca:	d07e      	beq.n	8002fca <Tx_Verify+0x8c2>
 8002ecc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ed0:	f300 80a3 	bgt.w	800301a <Tx_Verify+0x912>
 8002ed4:	2bc8      	cmp	r3, #200	; 0xc8
 8002ed6:	d07c      	beq.n	8002fd2 <Tx_Verify+0x8ca>
 8002ed8:	2bc8      	cmp	r3, #200	; 0xc8
 8002eda:	f300 809e 	bgt.w	800301a <Tx_Verify+0x912>
 8002ede:	2b32      	cmp	r3, #50	; 0x32
 8002ee0:	dc6c      	bgt.n	8002fbc <Tx_Verify+0x8b4>
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	f2c0 8099 	blt.w	800301a <Tx_Verify+0x912>
 8002ee8:	3b02      	subs	r3, #2
 8002eea:	2b30      	cmp	r3, #48	; 0x30
 8002eec:	f200 8095 	bhi.w	800301a <Tx_Verify+0x912>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <Tx_Verify+0x7f0>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08003013 	.word	0x08003013
 8002efc:	0800300b 	.word	0x0800300b
 8002f00:	0800301b 	.word	0x0800301b
 8002f04:	08003003 	.word	0x08003003
 8002f08:	0800301b 	.word	0x0800301b
 8002f0c:	0800301b 	.word	0x0800301b
 8002f10:	0800301b 	.word	0x0800301b
 8002f14:	0800301b 	.word	0x0800301b
 8002f18:	08002ffb 	.word	0x08002ffb
 8002f1c:	0800301b 	.word	0x0800301b
 8002f20:	0800301b 	.word	0x0800301b
 8002f24:	0800301b 	.word	0x0800301b
 8002f28:	0800301b 	.word	0x0800301b
 8002f2c:	0800301b 	.word	0x0800301b
 8002f30:	0800301b 	.word	0x0800301b
 8002f34:	0800301b 	.word	0x0800301b
 8002f38:	0800301b 	.word	0x0800301b
 8002f3c:	0800301b 	.word	0x0800301b
 8002f40:	08002ff3 	.word	0x08002ff3
 8002f44:	0800301b 	.word	0x0800301b
 8002f48:	0800301b 	.word	0x0800301b
 8002f4c:	0800301b 	.word	0x0800301b
 8002f50:	0800301b 	.word	0x0800301b
 8002f54:	0800301b 	.word	0x0800301b
 8002f58:	0800301b 	.word	0x0800301b
 8002f5c:	0800301b 	.word	0x0800301b
 8002f60:	0800301b 	.word	0x0800301b
 8002f64:	0800301b 	.word	0x0800301b
 8002f68:	0800301b 	.word	0x0800301b
 8002f6c:	0800301b 	.word	0x0800301b
 8002f70:	0800301b 	.word	0x0800301b
 8002f74:	0800301b 	.word	0x0800301b
 8002f78:	0800301b 	.word	0x0800301b
 8002f7c:	0800301b 	.word	0x0800301b
 8002f80:	0800301b 	.word	0x0800301b
 8002f84:	0800301b 	.word	0x0800301b
 8002f88:	0800301b 	.word	0x0800301b
 8002f8c:	0800301b 	.word	0x0800301b
 8002f90:	08002feb 	.word	0x08002feb
 8002f94:	0800301b 	.word	0x0800301b
 8002f98:	0800301b 	.word	0x0800301b
 8002f9c:	0800301b 	.word	0x0800301b
 8002fa0:	0800301b 	.word	0x0800301b
 8002fa4:	0800301b 	.word	0x0800301b
 8002fa8:	0800301b 	.word	0x0800301b
 8002fac:	0800301b 	.word	0x0800301b
 8002fb0:	0800301b 	.word	0x0800301b
 8002fb4:	0800301b 	.word	0x0800301b
 8002fb8:	08002fe3 	.word	0x08002fe3
 8002fbc:	2b64      	cmp	r3, #100	; 0x64
 8002fbe:	d00c      	beq.n	8002fda <Tx_Verify+0x8d2>
 8002fc0:	e02b      	b.n	800301a <Tx_Verify+0x912>
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <Tx_Verify+0x96c>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	71da      	strb	r2, [r3, #7]
 8002fc8:	e02a      	b.n	8003020 <Tx_Verify+0x918>
 8002fca:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <Tx_Verify+0x96c>)
 8002fcc:	2202      	movs	r2, #2
 8002fce:	71da      	strb	r2, [r3, #7]
 8002fd0:	e026      	b.n	8003020 <Tx_Verify+0x918>
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <Tx_Verify+0x96c>)
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	71da      	strb	r2, [r3, #7]
 8002fd8:	e022      	b.n	8003020 <Tx_Verify+0x918>
 8002fda:	4b26      	ldr	r3, [pc, #152]	; (8003074 <Tx_Verify+0x96c>)
 8002fdc:	2204      	movs	r2, #4
 8002fde:	71da      	strb	r2, [r3, #7]
 8002fe0:	e01e      	b.n	8003020 <Tx_Verify+0x918>
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <Tx_Verify+0x96c>)
 8002fe4:	2205      	movs	r2, #5
 8002fe6:	71da      	strb	r2, [r3, #7]
 8002fe8:	e01a      	b.n	8003020 <Tx_Verify+0x918>
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <Tx_Verify+0x96c>)
 8002fec:	2206      	movs	r2, #6
 8002fee:	71da      	strb	r2, [r3, #7]
 8002ff0:	e016      	b.n	8003020 <Tx_Verify+0x918>
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <Tx_Verify+0x96c>)
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	71da      	strb	r2, [r3, #7]
 8002ff8:	e012      	b.n	8003020 <Tx_Verify+0x918>
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <Tx_Verify+0x96c>)
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	71da      	strb	r2, [r3, #7]
 8003000:	e00e      	b.n	8003020 <Tx_Verify+0x918>
 8003002:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <Tx_Verify+0x96c>)
 8003004:	2209      	movs	r2, #9
 8003006:	71da      	strb	r2, [r3, #7]
 8003008:	e00a      	b.n	8003020 <Tx_Verify+0x918>
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <Tx_Verify+0x96c>)
 800300c:	220a      	movs	r2, #10
 800300e:	71da      	strb	r2, [r3, #7]
 8003010:	e006      	b.n	8003020 <Tx_Verify+0x918>
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <Tx_Verify+0x96c>)
 8003014:	220b      	movs	r2, #11
 8003016:	71da      	strb	r2, [r3, #7]
 8003018:	e002      	b.n	8003020 <Tx_Verify+0x918>
 800301a:	4b16      	ldr	r3, [pc, #88]	; (8003074 <Tx_Verify+0x96c>)
 800301c:	2200      	movs	r2, #0
 800301e:	71da      	strb	r2, [r3, #7]
 8003020:	bf00      	nop

	if(Flag_Datalogger == DL_Save)
 8003022:	4b16      	ldr	r3, [pc, #88]	; (800307c <Tx_Verify+0x974>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d108      	bne.n	800303c <Tx_Verify+0x934>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <Tx_Verify+0x978>)
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <Tx_Verify+0x978>)
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	b2d9      	uxtb	r1, r3
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <Tx_Verify+0x97c>)
 8003036:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <Tx_Verify+0x96c>)
 8003038:	f002 fb70 	bl	800571c <Principal_Datalogger_Save_Buffer>

	if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <Tx_Verify+0x980>)
 800303e:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <Tx_Verify+0x96c>)
 8003040:	490f      	ldr	r1, [pc, #60]	; (8003080 <Tx_Verify+0x978>)
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f004 f8ac 	bl	80071a0 <HAL_CAN_AddTxMessage>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d107      	bne.n	800305e <Tx_Verify+0x956>
		Verify_CAN |= 1;
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <Tx_Verify+0x984>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <Tx_Verify+0x984>)
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e006      	b.n	800306c <Tx_Verify+0x964>
	else
		Verify_CAN &= 0x02;
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <Tx_Verify+0x984>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	b2da      	uxtb	r2, r3
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <Tx_Verify+0x984>)
 800306a:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e011      	b.n	8003096 <Tx_Verify+0x98e>
 8003072:	bf00      	nop
 8003074:	20001bc4 	.word	0x20001bc4
 8003078:	20002e78 	.word	0x20002e78
 800307c:	20001bcc 	.word	0x20001bcc
 8003080:	20002d94 	.word	0x20002d94
 8003084:	20001c80 	.word	0x20001c80
 8003088:	20001c54 	.word	0x20001c54
 800308c:	20001a54 	.word	0x20001a54
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	3301      	adds	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f004 f95d 	bl	8007356 <HAL_CAN_GetTxMailboxesFreeLevel>
 800309c:	4603      	mov	r3, r0
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d002      	beq.n	80030a8 <Tx_Verify+0x9a0>
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d9f3      	bls.n	8003090 <Tx_Verify+0x988>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <Tx_Beacon+0x50>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <Tx_Beacon+0x50>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <Tx_Beacon+0x50>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = BEACON_ID;
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <Tx_Beacon+0x50>)
 80030cc:	2264      	movs	r2, #100	; 0x64
 80030ce:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 1;
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <Tx_Beacon+0x50>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	611a      	str	r2, [r3, #16]

	TxData[0] = Lap_Number;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <Tx_Beacon+0x54>)
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <Tx_Beacon+0x58>)
 80030dc:	701a      	strb	r2, [r3, #0]

	if(Flag_Datalogger == DL_Save)
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <Tx_Beacon+0x5c>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d108      	bne.n	80030f8 <Tx_Beacon+0x48>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <Tx_Beacon+0x50>)
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <Tx_Beacon+0x50>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	b2d9      	uxtb	r1, r3
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <Tx_Beacon+0x60>)
 80030f2:	4a05      	ldr	r2, [pc, #20]	; (8003108 <Tx_Beacon+0x58>)
 80030f4:	f002 fb12 	bl	800571c <Principal_Datalogger_Save_Buffer>
//	else
//		Verify_CAN &= 0x02;
//
//	//Wait Transmission finish
//	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20002d94 	.word	0x20002d94
 8003104:	20002cc0 	.word	0x20002cc0
 8003108:	20001bc4 	.word	0x20001bc4
 800310c:	20001bcc 	.word	0x20001bcc
 8003110:	20001c80 	.word	0x20001c80

08003114 <Save_PDM>:

static void Save_PDM()
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	2300      	movs	r3, #0
 8003120:	73bb      	strb	r3, [r7, #14]

	if(Flag_Datalogger == DL_Save)
 8003122:	4b87      	ldr	r3, [pc, #540]	; (8003340 <Save_PDM+0x22c>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	f000 8105 	beq.w	8003336 <Save_PDM+0x222>
		return;

	id = PDM_FIRST_ID;
 800312c:	2332      	movs	r3, #50	; 0x32
 800312e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003130:	2308      	movs	r3, #8
 8003132:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[0] << 8;
 8003134:	2300      	movs	r3, #0
 8003136:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[0] & 0xff;
 8003138:	4b82      	ldr	r3, [pc, #520]	; (8003344 <Save_PDM+0x230>)
 800313a:	889b      	ldrh	r3, [r3, #4]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[1] << 8;
 8003140:	2300      	movs	r3, #0
 8003142:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[1] & 0xff;
 8003144:	4b7f      	ldr	r3, [pc, #508]	; (8003344 <Save_PDM+0x230>)
 8003146:	88db      	ldrh	r3, [r3, #6]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[2] << 8;
 800314c:	2300      	movs	r3, #0
 800314e:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[2] & 0xff;
 8003150:	4b7c      	ldr	r3, [pc, #496]	; (8003344 <Save_PDM+0x230>)
 8003152:	891b      	ldrh	r3, [r3, #8]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[3] << 8;
 8003158:	2300      	movs	r3, #0
 800315a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[3] & 0xff;
 800315c:	4b79      	ldr	r3, [pc, #484]	; (8003344 <Save_PDM+0x230>)
 800315e:	895b      	ldrh	r3, [r3, #10]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003164:	7bf8      	ldrb	r0, [r7, #15]
 8003166:	1d3a      	adds	r2, r7, #4
 8003168:	7bb9      	ldrb	r1, [r7, #14]
 800316a:	4b77      	ldr	r3, [pc, #476]	; (8003348 <Save_PDM+0x234>)
 800316c:	f002 fad6 	bl	800571c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 8003170:	2333      	movs	r3, #51	; 0x33
 8003172:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003174:	2308      	movs	r3, #8
 8003176:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[4] << 8;
 8003178:	2300      	movs	r3, #0
 800317a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[4] & 0xff;
 800317c:	4b71      	ldr	r3, [pc, #452]	; (8003344 <Save_PDM+0x230>)
 800317e:	899b      	ldrh	r3, [r3, #12]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[5] << 8;
 8003184:	2300      	movs	r3, #0
 8003186:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[5] & 0xff;
 8003188:	4b6e      	ldr	r3, [pc, #440]	; (8003344 <Save_PDM+0x230>)
 800318a:	89db      	ldrh	r3, [r3, #14]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[6] << 8;
 8003190:	2300      	movs	r3, #0
 8003192:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[6] & 0xff;
 8003194:	4b6b      	ldr	r3, [pc, #428]	; (8003344 <Save_PDM+0x230>)
 8003196:	8a1b      	ldrh	r3, [r3, #16]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[7] << 8;
 800319c:	2300      	movs	r3, #0
 800319e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[7] & 0xff;
 80031a0:	4b68      	ldr	r3, [pc, #416]	; (8003344 <Save_PDM+0x230>)
 80031a2:	8a5b      	ldrh	r3, [r3, #18]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80031a8:	7bf8      	ldrb	r0, [r7, #15]
 80031aa:	1d3a      	adds	r2, r7, #4
 80031ac:	7bb9      	ldrb	r1, [r7, #14]
 80031ae:	4b66      	ldr	r3, [pc, #408]	; (8003348 <Save_PDM+0x234>)
 80031b0:	f002 fab4 	bl	800571c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 80031b4:	2334      	movs	r3, #52	; 0x34
 80031b6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80031b8:	2308      	movs	r3, #8
 80031ba:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[8] << 8;
 80031bc:	2300      	movs	r3, #0
 80031be:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[8] & 0xff;
 80031c0:	4b60      	ldr	r3, [pc, #384]	; (8003344 <Save_PDM+0x230>)
 80031c2:	8a9b      	ldrh	r3, [r3, #20]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[9] << 8;
 80031c8:	2300      	movs	r3, #0
 80031ca:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[9] & 0xff;
 80031cc:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <Save_PDM+0x230>)
 80031ce:	8adb      	ldrh	r3, [r3, #22]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[10] << 8;
 80031d4:	2300      	movs	r3, #0
 80031d6:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[10] & 0xff;
 80031d8:	4b5a      	ldr	r3, [pc, #360]	; (8003344 <Save_PDM+0x230>)
 80031da:	8b1b      	ldrh	r3, [r3, #24]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[11] << 8;
 80031e0:	2300      	movs	r3, #0
 80031e2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[11] & 0xff;
 80031e4:	4b57      	ldr	r3, [pc, #348]	; (8003344 <Save_PDM+0x230>)
 80031e6:	8b5b      	ldrh	r3, [r3, #26]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80031ec:	7bf8      	ldrb	r0, [r7, #15]
 80031ee:	1d3a      	adds	r2, r7, #4
 80031f0:	7bb9      	ldrb	r1, [r7, #14]
 80031f2:	4b55      	ldr	r3, [pc, #340]	; (8003348 <Save_PDM+0x234>)
 80031f4:	f002 fa92 	bl	800571c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 80031f8:	2335      	movs	r3, #53	; 0x35
 80031fa:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80031fc:	2308      	movs	r3, #8
 80031fe:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[12] << 8;
 8003200:	2300      	movs	r3, #0
 8003202:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[12] & 0xff;
 8003204:	4b4f      	ldr	r3, [pc, #316]	; (8003344 <Save_PDM+0x230>)
 8003206:	8b9b      	ldrh	r3, [r3, #28]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[13] << 8;
 800320c:	2300      	movs	r3, #0
 800320e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[13] & 0xff;
 8003210:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <Save_PDM+0x230>)
 8003212:	8bdb      	ldrh	r3, [r3, #30]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[14] << 8;
 8003218:	2300      	movs	r3, #0
 800321a:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[14] & 0xff;
 800321c:	4b49      	ldr	r3, [pc, #292]	; (8003344 <Save_PDM+0x230>)
 800321e:	8c1b      	ldrh	r3, [r3, #32]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[15] << 8;
 8003224:	2300      	movs	r3, #0
 8003226:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[15] & 0xff;
 8003228:	4b46      	ldr	r3, [pc, #280]	; (8003344 <Save_PDM+0x230>)
 800322a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800322c:	b2db      	uxtb	r3, r3
 800322e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003230:	7bf8      	ldrb	r0, [r7, #15]
 8003232:	1d3a      	adds	r2, r7, #4
 8003234:	7bb9      	ldrb	r1, [r7, #14]
 8003236:	4b44      	ldr	r3, [pc, #272]	; (8003348 <Save_PDM+0x234>)
 8003238:	f002 fa70 	bl	800571c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 800323c:	2336      	movs	r3, #54	; 0x36
 800323e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003240:	2308      	movs	r3, #8
 8003242:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Tempetature_Buffer[0] << 8;
 8003244:	2300      	movs	r3, #0
 8003246:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Tempetature_Buffer[0] & 0xff;
 8003248:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <Save_PDM+0x230>)
 800324a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800324c:	b2db      	uxtb	r3, r3
 800324e:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Tempetature_Buffer[1] << 8;
 8003250:	2300      	movs	r3, #0
 8003252:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Tempetature_Buffer[1] & 0xff;
 8003254:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <Save_PDM+0x230>)
 8003256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003258:	b2db      	uxtb	r3, r3
 800325a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Tempetature_Buffer[2] << 8;
 800325c:	2300      	movs	r3, #0
 800325e:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Tempetature_Buffer[2] & 0xff;
 8003260:	4b38      	ldr	r3, [pc, #224]	; (8003344 <Save_PDM+0x230>)
 8003262:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003264:	b2db      	uxtb	r3, r3
 8003266:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Tempetature_Buffer[3] << 8;
 8003268:	2300      	movs	r3, #0
 800326a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Tempetature_Buffer[3] & 0xff;
 800326c:	4b35      	ldr	r3, [pc, #212]	; (8003344 <Save_PDM+0x230>)
 800326e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003270:	b2db      	uxtb	r3, r3
 8003272:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003274:	7bf8      	ldrb	r0, [r7, #15]
 8003276:	1d3a      	adds	r2, r7, #4
 8003278:	7bb9      	ldrb	r1, [r7, #14]
 800327a:	4b33      	ldr	r3, [pc, #204]	; (8003348 <Save_PDM+0x234>)
 800327c:	f002 fa4e 	bl	800571c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 8003280:	2337      	movs	r3, #55	; 0x37
 8003282:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003284:	2308      	movs	r3, #8
 8003286:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Tempetature_Buffer[4] << 8;
 8003288:	2300      	movs	r3, #0
 800328a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Tempetature_Buffer[4] & 0xff;
 800328c:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <Save_PDM+0x230>)
 800328e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003290:	b2db      	uxtb	r3, r3
 8003292:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Tempetature_Buffer[5] << 8;
 8003294:	2300      	movs	r3, #0
 8003296:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Tempetature_Buffer[5] & 0xff;
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <Save_PDM+0x230>)
 800329a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329c:	b2db      	uxtb	r3, r3
 800329e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Tempetature_Buffer[6] << 8;
 80032a0:	2300      	movs	r3, #0
 80032a2:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Tempetature_Buffer[6] & 0xff;
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <Save_PDM+0x230>)
 80032a6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Tempetature_Buffer[7] << 8;
 80032ac:	2300      	movs	r3, #0
 80032ae:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Tempetature_Buffer[7] & 0xff;
 80032b0:	4b24      	ldr	r3, [pc, #144]	; (8003344 <Save_PDM+0x230>)
 80032b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80032b8:	7bf8      	ldrb	r0, [r7, #15]
 80032ba:	1d3a      	adds	r2, r7, #4
 80032bc:	7bb9      	ldrb	r1, [r7, #14]
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <Save_PDM+0x234>)
 80032c0:	f002 fa2c 	bl	800571c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 80032c4:	2338      	movs	r3, #56	; 0x38
 80032c6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80032c8:	2308      	movs	r3, #8
 80032ca:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Duty_Cycle_Buffer[0] << 8;
 80032cc:	2300      	movs	r3, #0
 80032ce:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Duty_Cycle_Buffer[0] & 0xff;
 80032d0:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <Save_PDM+0x230>)
 80032d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Duty_Cycle_Buffer[1] << 8;
 80032d8:	2300      	movs	r3, #0
 80032da:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Duty_Cycle_Buffer[1] & 0xff;
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <Save_PDM+0x230>)
 80032de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Duty_Cycle_Buffer[2] << 8;
 80032e4:	2300      	movs	r3, #0
 80032e6:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Duty_Cycle_Buffer[2] & 0xff;
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <Save_PDM+0x230>)
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Duty_Cycle_Buffer[3] << 8;
 80032f0:	2300      	movs	r3, #0
 80032f2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Duty_Cycle_Buffer[3] & 0xff;
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <Save_PDM+0x230>)
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80032fc:	7bf8      	ldrb	r0, [r7, #15]
 80032fe:	1d3a      	adds	r2, r7, #4
 8003300:	7bb9      	ldrb	r1, [r7, #14]
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <Save_PDM+0x234>)
 8003304:	f002 fa0a 	bl	800571c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 8003308:	2339      	movs	r3, #57	; 0x39
 800330a:	73fb      	strb	r3, [r7, #15]
	length = 4;
 800330c:	2304      	movs	r3, #4
 800330e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Input_Voltage << 8;
 8003310:	2300      	movs	r3, #0
 8003312:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Input_Voltage & 0xff;
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <Save_PDM+0x230>)
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Output_Verify << 8;
 800331c:	2300      	movs	r3, #0
 800331e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Output_Verify & 0xff;
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <Save_PDM+0x230>)
 8003322:	885b      	ldrh	r3, [r3, #2]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	71fb      	strb	r3, [r7, #7]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003328:	7bf8      	ldrb	r0, [r7, #15]
 800332a:	1d3a      	adds	r2, r7, #4
 800332c:	7bb9      	ldrb	r1, [r7, #14]
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <Save_PDM+0x234>)
 8003330:	f002 f9f4 	bl	800571c <Principal_Datalogger_Save_Buffer>
 8003334:	e000      	b.n	8003338 <Save_PDM+0x224>
		return;
 8003336:	bf00      	nop
}
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20001bcc 	.word	0x20001bcc
 8003344:	20001a10 	.word	0x20001a10
 8003348:	20001c80 	.word	0x20001c80

0800334c <Save_ECU>:

static void Save_ECU()
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	2300      	movs	r3, #0
 8003358:	73bb      	strb	r3, [r7, #14]

	if(Flag_Datalogger == DL_Save)
 800335a:	4b70      	ldr	r3, [pc, #448]	; (800351c <Save_ECU+0x1d0>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	f000 80d7 	beq.w	8003512 <Save_ECU+0x1c6>
		return;

	id = ECU_FIRST_ID;
 8003364:	231a      	movs	r3, #26
 8003366:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003368:	2308      	movs	r3, #8
 800336a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.rpm >> 8;
 800336c:	4b6c      	ldr	r3, [pc, #432]	; (8003520 <Save_ECU+0x1d4>)
 800336e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003372:	121b      	asrs	r3, r3, #8
 8003374:	b21b      	sxth	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.rpm & 0xff;
 800337a:	4b69      	ldr	r3, [pc, #420]	; (8003520 <Save_ECU+0x1d4>)
 800337c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003380:	b2db      	uxtb	r3, r3
 8003382:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.tps >> 8;
 8003384:	4b66      	ldr	r3, [pc, #408]	; (8003520 <Save_ECU+0x1d4>)
 8003386:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800338a:	121b      	asrs	r3, r3, #8
 800338c:	b21b      	sxth	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.tps & 0xff;
 8003392:	4b63      	ldr	r3, [pc, #396]	; (8003520 <Save_ECU+0x1d4>)
 8003394:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003398:	b2db      	uxtb	r3, r3
 800339a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.iat >> 8;
 800339c:	4b60      	ldr	r3, [pc, #384]	; (8003520 <Save_ECU+0x1d4>)
 800339e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80033a2:	121b      	asrs	r3, r3, #8
 80033a4:	b21b      	sxth	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.iat & 0xff;
 80033aa:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <Save_ECU+0x1d4>)
 80033ac:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.ect >> 8;
 80033b4:	4b5a      	ldr	r3, [pc, #360]	; (8003520 <Save_ECU+0x1d4>)
 80033b6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80033ba:	121b      	asrs	r3, r3, #8
 80033bc:	b21b      	sxth	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.ect & 0xff;
 80033c2:	4b57      	ldr	r3, [pc, #348]	; (8003520 <Save_ECU+0x1d4>)
 80033c4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80033cc:	7bf8      	ldrb	r0, [r7, #15]
 80033ce:	1d3a      	adds	r2, r7, #4
 80033d0:	7bb9      	ldrb	r1, [r7, #14]
 80033d2:	4b54      	ldr	r3, [pc, #336]	; (8003524 <Save_ECU+0x1d8>)
 80033d4:	f002 f9a2 	bl	800571c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 80033d8:	231b      	movs	r3, #27
 80033da:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80033dc:	2308      	movs	r3, #8
 80033de:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.map >> 8;
 80033e0:	4b4f      	ldr	r3, [pc, #316]	; (8003520 <Save_ECU+0x1d4>)
 80033e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80033e6:	121b      	asrs	r3, r3, #8
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.map & 0xff;
 80033ee:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <Save_ECU+0x1d4>)
 80033f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.fuel_pressure >> 8;
 80033f8:	4b49      	ldr	r3, [pc, #292]	; (8003520 <Save_ECU+0x1d4>)
 80033fa:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80033fe:	121b      	asrs	r3, r3, #8
 8003400:	b21b      	sxth	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.fuel_pressure & 0xff;
 8003406:	4b46      	ldr	r3, [pc, #280]	; (8003520 <Save_ECU+0x1d4>)
 8003408:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800340c:	b2db      	uxtb	r3, r3
 800340e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.oil_pressure >> 8;
 8003410:	4b43      	ldr	r3, [pc, #268]	; (8003520 <Save_ECU+0x1d4>)
 8003412:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8003416:	121b      	asrs	r3, r3, #8
 8003418:	b21b      	sxth	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.oil_pressure & 0xff;
 800341e:	4b40      	ldr	r3, [pc, #256]	; (8003520 <Save_ECU+0x1d4>)
 8003420:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8003424:	b2db      	uxtb	r3, r3
 8003426:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.coolant_pressure >> 8;
 8003428:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <Save_ECU+0x1d4>)
 800342a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800342e:	121b      	asrs	r3, r3, #8
 8003430:	b21b      	sxth	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.coolant_pressure & 0xff;
 8003436:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <Save_ECU+0x1d4>)
 8003438:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800343c:	b2db      	uxtb	r3, r3
 800343e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003440:	7bf8      	ldrb	r0, [r7, #15]
 8003442:	1d3a      	adds	r2, r7, #4
 8003444:	7bb9      	ldrb	r1, [r7, #14]
 8003446:	4b37      	ldr	r3, [pc, #220]	; (8003524 <Save_ECU+0x1d8>)
 8003448:	f002 f968 	bl	800571c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 800344c:	231c      	movs	r3, #28
 800344e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003450:	2308      	movs	r3, #8
 8003452:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.lambda >> 8;
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <Save_ECU+0x1d4>)
 8003456:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800345a:	121b      	asrs	r3, r3, #8
 800345c:	b21b      	sxth	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.lambda & 0xff;
 8003462:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <Save_ECU+0x1d4>)
 8003464:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8003468:	b2db      	uxtb	r3, r3
 800346a:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.oil_temperature >> 8;
 800346c:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <Save_ECU+0x1d4>)
 800346e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003472:	121b      	asrs	r3, r3, #8
 8003474:	b21b      	sxth	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.oil_temperature & 0xff;
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <Save_ECU+0x1d4>)
 800347c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003480:	b2db      	uxtb	r3, r3
 8003482:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.wheel_speed_fl;
 8003484:	4b26      	ldr	r3, [pc, #152]	; (8003520 <Save_ECU+0x1d4>)
 8003486:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800348a:	b2db      	uxtb	r3, r3
 800348c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.wheel_speed_fr;
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <Save_ECU+0x1d4>)
 8003490:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003494:	b2db      	uxtb	r3, r3
 8003496:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.wheel_speed_rl;
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <Save_ECU+0x1d4>)
 800349a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.wheel_speed_rr;
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <Save_ECU+0x1d4>)
 80034a4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80034ac:	7bf8      	ldrb	r0, [r7, #15]
 80034ae:	1d3a      	adds	r2, r7, #4
 80034b0:	7bb9      	ldrb	r1, [r7, #14]
 80034b2:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <Save_ECU+0x1d8>)
 80034b4:	f002 f932 	bl	800571c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 80034b8:	231d      	movs	r3, #29
 80034ba:	73fb      	strb	r3, [r7, #15]
	length = 6;
 80034bc:	2306      	movs	r3, #6
 80034be:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.battery_voltage >> 8;
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <Save_ECU+0x1d4>)
 80034c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034c6:	121b      	asrs	r3, r3, #8
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.battery_voltage & 0xff;
 80034ce:	4b14      	ldr	r3, [pc, #80]	; (8003520 <Save_ECU+0x1d4>)
 80034d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.total_fuel_flow >> 8;
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <Save_ECU+0x1d4>)
 80034da:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034de:	121b      	asrs	r3, r3, #8
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.total_fuel_flow & 0xff;
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <Save_ECU+0x1d4>)
 80034e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.gear & 0xff;
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <Save_ECU+0x1d4>)
 80034f2:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.electro_fan & 0xff;
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <Save_ECU+0x1d4>)
 80034fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	727b      	strb	r3, [r7, #9]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003504:	7bf8      	ldrb	r0, [r7, #15]
 8003506:	1d3a      	adds	r2, r7, #4
 8003508:	7bb9      	ldrb	r1, [r7, #14]
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <Save_ECU+0x1d8>)
 800350c:	f002 f906 	bl	800571c <Principal_Datalogger_Save_Buffer>

	return;
 8003510:	e000      	b.n	8003514 <Save_ECU+0x1c8>
		return;
 8003512:	bf00      	nop
}
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20001bcc 	.word	0x20001bcc
 8003520:	20002e20 	.word	0x20002e20
 8003524:	20001c80 	.word	0x20001c80

08003528 <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08e      	sub	sp, #56	; 0x38
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
 8003534:	2300      	movs	r3, #0
 8003536:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 8003538:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 800353e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003544:	2300      	movs	r3, #0
 8003546:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003548:	2301      	movs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 800354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354e:	0b5b      	lsrs	r3, r3, #13
 8003550:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	b29b      	uxth	r3, r3
 8003558:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	0b5b      	lsrs	r3, r3, #13
 800355e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	b29b      	uxth	r3, r3
 8003566:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003568:	2300      	movs	r3, #0
 800356a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 800356c:	2301      	movs	r3, #1
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 8003574:	230e      	movs	r3, #14
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f003 fcea 	bl	8006f58 <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 8003584:	2300      	movs	r3, #0
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 8003588:	2300      	movs	r3, #0
 800358a:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800358c:	2300      	movs	r3, #0
 800358e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003590:	2301      	movs	r3, #1
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8003594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003596:	0b5b      	lsrs	r3, r3, #13
 8003598:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	b29b      	uxth	r3, r3
 80035a0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	0b5b      	lsrs	r3, r3, #13
 80035a6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80035b4:	2301      	movs	r3, #1
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 80035b8:	2301      	movs	r3, #1
 80035ba:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 80035bc:	230f      	movs	r3, #15
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80035c0:	f107 0308 	add.w	r3, r7, #8
 80035c4:	4619      	mov	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f003 fcc6 	bl	8006f58 <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT600, 2, CAN_RX_FIFO0);
 80035cc:	2300      	movs	r3, #0
 80035ce:	2202      	movs	r2, #2
 80035d0:	f240 2181 	movw	r1, #641	; 0x281
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fc ffe7 	bl	80005a8 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 3, CAN_RX_FIFO0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2103      	movs	r1, #3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fd3c 	bl	800205c <PDM_CAN_FilterConfig>

	HAL_CAN_Start(hcan);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f003 fd97 	bl	8007118 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80035ea:	2102      	movs	r1, #2
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f003 fff9 	bl	80075e4 <HAL_CAN_ActivateNotification>
}
 80035f2:	bf00      	nop
 80035f4:	3738      	adds	r7, #56	; 0x38
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	2b07      	cmp	r3, #7
 800360c:	d830      	bhi.n	8003670 <Principal_Transmit_Msg+0x74>
 800360e:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <Principal_Transmit_Msg+0x18>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003635 	.word	0x08003635
 8003618:	0800363d 	.word	0x0800363d
 800361c:	08003645 	.word	0x08003645
 8003620:	08003655 	.word	0x08003655
 8003624:	0800364d 	.word	0x0800364d
 8003628:	08003665 	.word	0x08003665
 800362c:	0800366b 	.word	0x0800366b
 8003630:	0800365d 	.word	0x0800365d
	{
		case Analog_1_4:
			Tx_Analog_1_4(hcan);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7fe fe05 	bl	8002244 <Tx_Analog_1_4>
			break;
 800363a:	e01a      	b.n	8003672 <Principal_Transmit_Msg+0x76>

		case Analog_5_8:
			Tx_Analog_5_8(hcan);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fe fe9f 	bl	8002380 <Tx_Analog_5_8>
			break;
 8003642:	e016      	b.n	8003672 <Principal_Transmit_Msg+0x76>

		case Analog_9_12:
			Tx_Analog_9_12(hcan);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fe ff39 	bl	80024bc <Tx_Analog_9_12>
			break;
 800364a:	e012      	b.n	8003672 <Principal_Transmit_Msg+0x76>

		case Verify_Msg:
			Tx_Verify(hcan);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff f85b 	bl	8002708 <Tx_Verify>
			break;
 8003652:	e00e      	b.n	8003672 <Principal_Transmit_Msg+0x76>

		case RTC_Msg:
			Tx_RTC(hcan);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7fe ffcf 	bl	80025f8 <Tx_RTC>
			break;
 800365a:	e00a      	b.n	8003672 <Principal_Transmit_Msg+0x76>

		case Beacon_Msg:
			Tx_Beacon(hcan);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fd27 	bl	80030b0 <Tx_Beacon>
			break;
 8003662:	e006      	b.n	8003672 <Principal_Transmit_Msg+0x76>

		case ECU_Save:
			Save_ECU();
 8003664:	f7ff fe72 	bl	800334c <Save_ECU>
			break;
 8003668:	e003      	b.n	8003672 <Principal_Transmit_Msg+0x76>

		case PDM_Save:
			Save_PDM();
 800366a:	f7ff fd53 	bl	8003114 <Save_PDM>
			break;
 800366e:	e000      	b.n	8003672 <Principal_Transmit_Msg+0x76>

		default:
			return;
 8003670:	bf00      	nop
	}
}
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <Load_EEPROM>:
 */

#include "principal.h"

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af02      	add	r7, sp, #8
 800367e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal;

	retVal = HAL_I2C_Master_Transmit(hi2c, 0xA0, 0x00, 1, 5);
 8003680:	2305      	movs	r3, #5
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2301      	movs	r3, #1
 8003686:	2200      	movs	r2, #0
 8003688:	21a0      	movs	r1, #160	; 0xa0
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f005 f9ec 	bl	8008a68 <HAL_I2C_Master_Transmit>
 8003690:	4603      	mov	r3, r0
 8003692:	75fb      	strb	r3, [r7, #23]

	if(retVal == HAL_OK)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d128      	bne.n	80036ec <Load_EEPROM+0x74>
		retVal = HAL_I2C_Master_Receive(hi2c, 0xA1, buffer, EEPROM_BUFFER_SIZE, 5);
 800369a:	f107 020c 	add.w	r2, r7, #12
 800369e:	2305      	movs	r3, #5
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	230b      	movs	r3, #11
 80036a4:	21a1      	movs	r1, #161	; 0xa1
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f005 fadc 	bl	8008c64 <HAL_I2C_Master_Receive>
 80036ac:	4603      	mov	r3, r0
 80036ae:	75fb      	strb	r3, [r7, #23]
	else
		return retVal;

	__LOAD_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 80036b0:	7b3b      	ldrb	r3, [r7, #12]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	2b0a      	cmp	r3, #10
 80036b6:	d849      	bhi.n	800374c <Load_EEPROM+0xd4>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <Load_EEPROM+0x48>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036f1 	.word	0x080036f1
 80036c4:	080036fb 	.word	0x080036fb
 80036c8:	08003705 	.word	0x08003705
 80036cc:	0800370d 	.word	0x0800370d
 80036d0:	08003715 	.word	0x08003715
 80036d4:	0800371d 	.word	0x0800371d
 80036d8:	08003725 	.word	0x08003725
 80036dc:	0800372d 	.word	0x0800372d
 80036e0:	08003735 	.word	0x08003735
 80036e4:	0800373d 	.word	0x0800373d
 80036e8:	08003745 	.word	0x08003745
		return retVal;
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
 80036ee:	e35b      	b.n	8003da8 <Load_EEPROM+0x730>
	__LOAD_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 80036f0:	4ba8      	ldr	r3, [pc, #672]	; (8003994 <Load_EEPROM+0x31c>)
 80036f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036f6:	801a      	strh	r2, [r3, #0]
 80036f8:	e02b      	b.n	8003752 <Load_EEPROM+0xda>
 80036fa:	4ba6      	ldr	r3, [pc, #664]	; (8003994 <Load_EEPROM+0x31c>)
 80036fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	e026      	b.n	8003752 <Load_EEPROM+0xda>
 8003704:	4ba3      	ldr	r3, [pc, #652]	; (8003994 <Load_EEPROM+0x31c>)
 8003706:	22c8      	movs	r2, #200	; 0xc8
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e022      	b.n	8003752 <Load_EEPROM+0xda>
 800370c:	4ba1      	ldr	r3, [pc, #644]	; (8003994 <Load_EEPROM+0x31c>)
 800370e:	2264      	movs	r2, #100	; 0x64
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	e01e      	b.n	8003752 <Load_EEPROM+0xda>
 8003714:	4b9f      	ldr	r3, [pc, #636]	; (8003994 <Load_EEPROM+0x31c>)
 8003716:	2232      	movs	r2, #50	; 0x32
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	e01a      	b.n	8003752 <Load_EEPROM+0xda>
 800371c:	4b9d      	ldr	r3, [pc, #628]	; (8003994 <Load_EEPROM+0x31c>)
 800371e:	2228      	movs	r2, #40	; 0x28
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	e016      	b.n	8003752 <Load_EEPROM+0xda>
 8003724:	4b9b      	ldr	r3, [pc, #620]	; (8003994 <Load_EEPROM+0x31c>)
 8003726:	2214      	movs	r2, #20
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	e012      	b.n	8003752 <Load_EEPROM+0xda>
 800372c:	4b99      	ldr	r3, [pc, #612]	; (8003994 <Load_EEPROM+0x31c>)
 800372e:	220a      	movs	r2, #10
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	e00e      	b.n	8003752 <Load_EEPROM+0xda>
 8003734:	4b97      	ldr	r3, [pc, #604]	; (8003994 <Load_EEPROM+0x31c>)
 8003736:	2205      	movs	r2, #5
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	e00a      	b.n	8003752 <Load_EEPROM+0xda>
 800373c:	4b95      	ldr	r3, [pc, #596]	; (8003994 <Load_EEPROM+0x31c>)
 800373e:	2203      	movs	r2, #3
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	e006      	b.n	8003752 <Load_EEPROM+0xda>
 8003744:	4b93      	ldr	r3, [pc, #588]	; (8003994 <Load_EEPROM+0x31c>)
 8003746:	2202      	movs	r2, #2
 8003748:	801a      	strh	r2, [r3, #0]
 800374a:	e002      	b.n	8003752 <Load_EEPROM+0xda>
 800374c:	4b91      	ldr	r3, [pc, #580]	; (8003994 <Load_EEPROM+0x31c>)
 800374e:	2200      	movs	r2, #0
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	bf00      	nop
	__LOAD_FREQ(buffer[1], Per_Msg[Analog_5_8]);
 8003754:	7b7b      	ldrb	r3, [r7, #13]
 8003756:	3b01      	subs	r3, #1
 8003758:	2b0a      	cmp	r3, #10
 800375a:	d847      	bhi.n	80037ec <Load_EEPROM+0x174>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <Load_EEPROM+0xec>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003791 	.word	0x08003791
 8003768:	0800379b 	.word	0x0800379b
 800376c:	080037a5 	.word	0x080037a5
 8003770:	080037ad 	.word	0x080037ad
 8003774:	080037b5 	.word	0x080037b5
 8003778:	080037bd 	.word	0x080037bd
 800377c:	080037c5 	.word	0x080037c5
 8003780:	080037cd 	.word	0x080037cd
 8003784:	080037d5 	.word	0x080037d5
 8003788:	080037dd 	.word	0x080037dd
 800378c:	080037e5 	.word	0x080037e5
 8003790:	4b80      	ldr	r3, [pc, #512]	; (8003994 <Load_EEPROM+0x31c>)
 8003792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003796:	805a      	strh	r2, [r3, #2]
 8003798:	e02b      	b.n	80037f2 <Load_EEPROM+0x17a>
 800379a:	4b7e      	ldr	r3, [pc, #504]	; (8003994 <Load_EEPROM+0x31c>)
 800379c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037a0:	805a      	strh	r2, [r3, #2]
 80037a2:	e026      	b.n	80037f2 <Load_EEPROM+0x17a>
 80037a4:	4b7b      	ldr	r3, [pc, #492]	; (8003994 <Load_EEPROM+0x31c>)
 80037a6:	22c8      	movs	r2, #200	; 0xc8
 80037a8:	805a      	strh	r2, [r3, #2]
 80037aa:	e022      	b.n	80037f2 <Load_EEPROM+0x17a>
 80037ac:	4b79      	ldr	r3, [pc, #484]	; (8003994 <Load_EEPROM+0x31c>)
 80037ae:	2264      	movs	r2, #100	; 0x64
 80037b0:	805a      	strh	r2, [r3, #2]
 80037b2:	e01e      	b.n	80037f2 <Load_EEPROM+0x17a>
 80037b4:	4b77      	ldr	r3, [pc, #476]	; (8003994 <Load_EEPROM+0x31c>)
 80037b6:	2232      	movs	r2, #50	; 0x32
 80037b8:	805a      	strh	r2, [r3, #2]
 80037ba:	e01a      	b.n	80037f2 <Load_EEPROM+0x17a>
 80037bc:	4b75      	ldr	r3, [pc, #468]	; (8003994 <Load_EEPROM+0x31c>)
 80037be:	2228      	movs	r2, #40	; 0x28
 80037c0:	805a      	strh	r2, [r3, #2]
 80037c2:	e016      	b.n	80037f2 <Load_EEPROM+0x17a>
 80037c4:	4b73      	ldr	r3, [pc, #460]	; (8003994 <Load_EEPROM+0x31c>)
 80037c6:	2214      	movs	r2, #20
 80037c8:	805a      	strh	r2, [r3, #2]
 80037ca:	e012      	b.n	80037f2 <Load_EEPROM+0x17a>
 80037cc:	4b71      	ldr	r3, [pc, #452]	; (8003994 <Load_EEPROM+0x31c>)
 80037ce:	220a      	movs	r2, #10
 80037d0:	805a      	strh	r2, [r3, #2]
 80037d2:	e00e      	b.n	80037f2 <Load_EEPROM+0x17a>
 80037d4:	4b6f      	ldr	r3, [pc, #444]	; (8003994 <Load_EEPROM+0x31c>)
 80037d6:	2205      	movs	r2, #5
 80037d8:	805a      	strh	r2, [r3, #2]
 80037da:	e00a      	b.n	80037f2 <Load_EEPROM+0x17a>
 80037dc:	4b6d      	ldr	r3, [pc, #436]	; (8003994 <Load_EEPROM+0x31c>)
 80037de:	2203      	movs	r2, #3
 80037e0:	805a      	strh	r2, [r3, #2]
 80037e2:	e006      	b.n	80037f2 <Load_EEPROM+0x17a>
 80037e4:	4b6b      	ldr	r3, [pc, #428]	; (8003994 <Load_EEPROM+0x31c>)
 80037e6:	2202      	movs	r2, #2
 80037e8:	805a      	strh	r2, [r3, #2]
 80037ea:	e002      	b.n	80037f2 <Load_EEPROM+0x17a>
 80037ec:	4b69      	ldr	r3, [pc, #420]	; (8003994 <Load_EEPROM+0x31c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	805a      	strh	r2, [r3, #2]
 80037f2:	bf00      	nop
	__LOAD_FREQ(buffer[2], Per_Msg[Analog_9_12]);
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	2b0a      	cmp	r3, #10
 80037fa:	d847      	bhi.n	800388c <Load_EEPROM+0x214>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <Load_EEPROM+0x18c>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003831 	.word	0x08003831
 8003808:	0800383b 	.word	0x0800383b
 800380c:	08003845 	.word	0x08003845
 8003810:	0800384d 	.word	0x0800384d
 8003814:	08003855 	.word	0x08003855
 8003818:	0800385d 	.word	0x0800385d
 800381c:	08003865 	.word	0x08003865
 8003820:	0800386d 	.word	0x0800386d
 8003824:	08003875 	.word	0x08003875
 8003828:	0800387d 	.word	0x0800387d
 800382c:	08003885 	.word	0x08003885
 8003830:	4b58      	ldr	r3, [pc, #352]	; (8003994 <Load_EEPROM+0x31c>)
 8003832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003836:	809a      	strh	r2, [r3, #4]
 8003838:	e02b      	b.n	8003892 <Load_EEPROM+0x21a>
 800383a:	4b56      	ldr	r3, [pc, #344]	; (8003994 <Load_EEPROM+0x31c>)
 800383c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003840:	809a      	strh	r2, [r3, #4]
 8003842:	e026      	b.n	8003892 <Load_EEPROM+0x21a>
 8003844:	4b53      	ldr	r3, [pc, #332]	; (8003994 <Load_EEPROM+0x31c>)
 8003846:	22c8      	movs	r2, #200	; 0xc8
 8003848:	809a      	strh	r2, [r3, #4]
 800384a:	e022      	b.n	8003892 <Load_EEPROM+0x21a>
 800384c:	4b51      	ldr	r3, [pc, #324]	; (8003994 <Load_EEPROM+0x31c>)
 800384e:	2264      	movs	r2, #100	; 0x64
 8003850:	809a      	strh	r2, [r3, #4]
 8003852:	e01e      	b.n	8003892 <Load_EEPROM+0x21a>
 8003854:	4b4f      	ldr	r3, [pc, #316]	; (8003994 <Load_EEPROM+0x31c>)
 8003856:	2232      	movs	r2, #50	; 0x32
 8003858:	809a      	strh	r2, [r3, #4]
 800385a:	e01a      	b.n	8003892 <Load_EEPROM+0x21a>
 800385c:	4b4d      	ldr	r3, [pc, #308]	; (8003994 <Load_EEPROM+0x31c>)
 800385e:	2228      	movs	r2, #40	; 0x28
 8003860:	809a      	strh	r2, [r3, #4]
 8003862:	e016      	b.n	8003892 <Load_EEPROM+0x21a>
 8003864:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <Load_EEPROM+0x31c>)
 8003866:	2214      	movs	r2, #20
 8003868:	809a      	strh	r2, [r3, #4]
 800386a:	e012      	b.n	8003892 <Load_EEPROM+0x21a>
 800386c:	4b49      	ldr	r3, [pc, #292]	; (8003994 <Load_EEPROM+0x31c>)
 800386e:	220a      	movs	r2, #10
 8003870:	809a      	strh	r2, [r3, #4]
 8003872:	e00e      	b.n	8003892 <Load_EEPROM+0x21a>
 8003874:	4b47      	ldr	r3, [pc, #284]	; (8003994 <Load_EEPROM+0x31c>)
 8003876:	2205      	movs	r2, #5
 8003878:	809a      	strh	r2, [r3, #4]
 800387a:	e00a      	b.n	8003892 <Load_EEPROM+0x21a>
 800387c:	4b45      	ldr	r3, [pc, #276]	; (8003994 <Load_EEPROM+0x31c>)
 800387e:	2203      	movs	r2, #3
 8003880:	809a      	strh	r2, [r3, #4]
 8003882:	e006      	b.n	8003892 <Load_EEPROM+0x21a>
 8003884:	4b43      	ldr	r3, [pc, #268]	; (8003994 <Load_EEPROM+0x31c>)
 8003886:	2202      	movs	r2, #2
 8003888:	809a      	strh	r2, [r3, #4]
 800388a:	e002      	b.n	8003892 <Load_EEPROM+0x21a>
 800388c:	4b41      	ldr	r3, [pc, #260]	; (8003994 <Load_EEPROM+0x31c>)
 800388e:	2200      	movs	r2, #0
 8003890:	809a      	strh	r2, [r3, #4]
 8003892:	bf00      	nop
	__LOAD_FREQ(buffer[3], Per_Msg[RTC_Msg]);
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	3b01      	subs	r3, #1
 8003898:	2b0a      	cmp	r3, #10
 800389a:	d847      	bhi.n	800392c <Load_EEPROM+0x2b4>
 800389c:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <Load_EEPROM+0x22c>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	080038d1 	.word	0x080038d1
 80038a8:	080038db 	.word	0x080038db
 80038ac:	080038e5 	.word	0x080038e5
 80038b0:	080038ed 	.word	0x080038ed
 80038b4:	080038f5 	.word	0x080038f5
 80038b8:	080038fd 	.word	0x080038fd
 80038bc:	08003905 	.word	0x08003905
 80038c0:	0800390d 	.word	0x0800390d
 80038c4:	08003915 	.word	0x08003915
 80038c8:	0800391d 	.word	0x0800391d
 80038cc:	08003925 	.word	0x08003925
 80038d0:	4b30      	ldr	r3, [pc, #192]	; (8003994 <Load_EEPROM+0x31c>)
 80038d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038d6:	80da      	strh	r2, [r3, #6]
 80038d8:	e02b      	b.n	8003932 <Load_EEPROM+0x2ba>
 80038da:	4b2e      	ldr	r3, [pc, #184]	; (8003994 <Load_EEPROM+0x31c>)
 80038dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038e0:	80da      	strh	r2, [r3, #6]
 80038e2:	e026      	b.n	8003932 <Load_EEPROM+0x2ba>
 80038e4:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <Load_EEPROM+0x31c>)
 80038e6:	22c8      	movs	r2, #200	; 0xc8
 80038e8:	80da      	strh	r2, [r3, #6]
 80038ea:	e022      	b.n	8003932 <Load_EEPROM+0x2ba>
 80038ec:	4b29      	ldr	r3, [pc, #164]	; (8003994 <Load_EEPROM+0x31c>)
 80038ee:	2264      	movs	r2, #100	; 0x64
 80038f0:	80da      	strh	r2, [r3, #6]
 80038f2:	e01e      	b.n	8003932 <Load_EEPROM+0x2ba>
 80038f4:	4b27      	ldr	r3, [pc, #156]	; (8003994 <Load_EEPROM+0x31c>)
 80038f6:	2232      	movs	r2, #50	; 0x32
 80038f8:	80da      	strh	r2, [r3, #6]
 80038fa:	e01a      	b.n	8003932 <Load_EEPROM+0x2ba>
 80038fc:	4b25      	ldr	r3, [pc, #148]	; (8003994 <Load_EEPROM+0x31c>)
 80038fe:	2228      	movs	r2, #40	; 0x28
 8003900:	80da      	strh	r2, [r3, #6]
 8003902:	e016      	b.n	8003932 <Load_EEPROM+0x2ba>
 8003904:	4b23      	ldr	r3, [pc, #140]	; (8003994 <Load_EEPROM+0x31c>)
 8003906:	2214      	movs	r2, #20
 8003908:	80da      	strh	r2, [r3, #6]
 800390a:	e012      	b.n	8003932 <Load_EEPROM+0x2ba>
 800390c:	4b21      	ldr	r3, [pc, #132]	; (8003994 <Load_EEPROM+0x31c>)
 800390e:	220a      	movs	r2, #10
 8003910:	80da      	strh	r2, [r3, #6]
 8003912:	e00e      	b.n	8003932 <Load_EEPROM+0x2ba>
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <Load_EEPROM+0x31c>)
 8003916:	2205      	movs	r2, #5
 8003918:	80da      	strh	r2, [r3, #6]
 800391a:	e00a      	b.n	8003932 <Load_EEPROM+0x2ba>
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <Load_EEPROM+0x31c>)
 800391e:	2203      	movs	r2, #3
 8003920:	80da      	strh	r2, [r3, #6]
 8003922:	e006      	b.n	8003932 <Load_EEPROM+0x2ba>
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <Load_EEPROM+0x31c>)
 8003926:	2202      	movs	r2, #2
 8003928:	80da      	strh	r2, [r3, #6]
 800392a:	e002      	b.n	8003932 <Load_EEPROM+0x2ba>
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <Load_EEPROM+0x31c>)
 800392e:	2200      	movs	r2, #0
 8003930:	80da      	strh	r2, [r3, #6]
 8003932:	bf00      	nop
	__LOAD_FREQ(buffer[4], Per_Msg[Verify_Msg]);
 8003934:	7c3b      	ldrb	r3, [r7, #16]
 8003936:	3b01      	subs	r3, #1
 8003938:	2b0a      	cmp	r3, #10
 800393a:	d849      	bhi.n	80039d0 <Load_EEPROM+0x358>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <Load_EEPROM+0x2cc>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003971 	.word	0x08003971
 8003948:	0800397b 	.word	0x0800397b
 800394c:	08003985 	.word	0x08003985
 8003950:	0800398d 	.word	0x0800398d
 8003954:	08003999 	.word	0x08003999
 8003958:	080039a1 	.word	0x080039a1
 800395c:	080039a9 	.word	0x080039a9
 8003960:	080039b1 	.word	0x080039b1
 8003964:	080039b9 	.word	0x080039b9
 8003968:	080039c1 	.word	0x080039c1
 800396c:	080039c9 	.word	0x080039c9
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <Load_EEPROM+0x31c>)
 8003972:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003976:	811a      	strh	r2, [r3, #8]
 8003978:	e02d      	b.n	80039d6 <Load_EEPROM+0x35e>
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <Load_EEPROM+0x31c>)
 800397c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003980:	811a      	strh	r2, [r3, #8]
 8003982:	e028      	b.n	80039d6 <Load_EEPROM+0x35e>
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <Load_EEPROM+0x31c>)
 8003986:	22c8      	movs	r2, #200	; 0xc8
 8003988:	811a      	strh	r2, [r3, #8]
 800398a:	e024      	b.n	80039d6 <Load_EEPROM+0x35e>
 800398c:	4b01      	ldr	r3, [pc, #4]	; (8003994 <Load_EEPROM+0x31c>)
 800398e:	2264      	movs	r2, #100	; 0x64
 8003990:	811a      	strh	r2, [r3, #8]
 8003992:	e020      	b.n	80039d6 <Load_EEPROM+0x35e>
 8003994:	20002e78 	.word	0x20002e78
 8003998:	4ba7      	ldr	r3, [pc, #668]	; (8003c38 <Load_EEPROM+0x5c0>)
 800399a:	2232      	movs	r2, #50	; 0x32
 800399c:	811a      	strh	r2, [r3, #8]
 800399e:	e01a      	b.n	80039d6 <Load_EEPROM+0x35e>
 80039a0:	4ba5      	ldr	r3, [pc, #660]	; (8003c38 <Load_EEPROM+0x5c0>)
 80039a2:	2228      	movs	r2, #40	; 0x28
 80039a4:	811a      	strh	r2, [r3, #8]
 80039a6:	e016      	b.n	80039d6 <Load_EEPROM+0x35e>
 80039a8:	4ba3      	ldr	r3, [pc, #652]	; (8003c38 <Load_EEPROM+0x5c0>)
 80039aa:	2214      	movs	r2, #20
 80039ac:	811a      	strh	r2, [r3, #8]
 80039ae:	e012      	b.n	80039d6 <Load_EEPROM+0x35e>
 80039b0:	4ba1      	ldr	r3, [pc, #644]	; (8003c38 <Load_EEPROM+0x5c0>)
 80039b2:	220a      	movs	r2, #10
 80039b4:	811a      	strh	r2, [r3, #8]
 80039b6:	e00e      	b.n	80039d6 <Load_EEPROM+0x35e>
 80039b8:	4b9f      	ldr	r3, [pc, #636]	; (8003c38 <Load_EEPROM+0x5c0>)
 80039ba:	2205      	movs	r2, #5
 80039bc:	811a      	strh	r2, [r3, #8]
 80039be:	e00a      	b.n	80039d6 <Load_EEPROM+0x35e>
 80039c0:	4b9d      	ldr	r3, [pc, #628]	; (8003c38 <Load_EEPROM+0x5c0>)
 80039c2:	2203      	movs	r2, #3
 80039c4:	811a      	strh	r2, [r3, #8]
 80039c6:	e006      	b.n	80039d6 <Load_EEPROM+0x35e>
 80039c8:	4b9b      	ldr	r3, [pc, #620]	; (8003c38 <Load_EEPROM+0x5c0>)
 80039ca:	2202      	movs	r2, #2
 80039cc:	811a      	strh	r2, [r3, #8]
 80039ce:	e002      	b.n	80039d6 <Load_EEPROM+0x35e>
 80039d0:	4b99      	ldr	r3, [pc, #612]	; (8003c38 <Load_EEPROM+0x5c0>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	811a      	strh	r2, [r3, #8]
 80039d6:	bf00      	nop
	__LOAD_FREQ(buffer[5], Per_Msg[ECU_Save]);
 80039d8:	7c7b      	ldrb	r3, [r7, #17]
 80039da:	3b01      	subs	r3, #1
 80039dc:	2b0a      	cmp	r3, #10
 80039de:	d847      	bhi.n	8003a70 <Load_EEPROM+0x3f8>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <Load_EEPROM+0x370>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a15 	.word	0x08003a15
 80039ec:	08003a1f 	.word	0x08003a1f
 80039f0:	08003a29 	.word	0x08003a29
 80039f4:	08003a31 	.word	0x08003a31
 80039f8:	08003a39 	.word	0x08003a39
 80039fc:	08003a41 	.word	0x08003a41
 8003a00:	08003a49 	.word	0x08003a49
 8003a04:	08003a51 	.word	0x08003a51
 8003a08:	08003a59 	.word	0x08003a59
 8003a0c:	08003a61 	.word	0x08003a61
 8003a10:	08003a69 	.word	0x08003a69
 8003a14:	4b88      	ldr	r3, [pc, #544]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a1a:	815a      	strh	r2, [r3, #10]
 8003a1c:	e02b      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a1e:	4b86      	ldr	r3, [pc, #536]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a24:	815a      	strh	r2, [r3, #10]
 8003a26:	e026      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a28:	4b83      	ldr	r3, [pc, #524]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a2a:	22c8      	movs	r2, #200	; 0xc8
 8003a2c:	815a      	strh	r2, [r3, #10]
 8003a2e:	e022      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a30:	4b81      	ldr	r3, [pc, #516]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a32:	2264      	movs	r2, #100	; 0x64
 8003a34:	815a      	strh	r2, [r3, #10]
 8003a36:	e01e      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a38:	4b7f      	ldr	r3, [pc, #508]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a3a:	2232      	movs	r2, #50	; 0x32
 8003a3c:	815a      	strh	r2, [r3, #10]
 8003a3e:	e01a      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a40:	4b7d      	ldr	r3, [pc, #500]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a42:	2228      	movs	r2, #40	; 0x28
 8003a44:	815a      	strh	r2, [r3, #10]
 8003a46:	e016      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a48:	4b7b      	ldr	r3, [pc, #492]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a4a:	2214      	movs	r2, #20
 8003a4c:	815a      	strh	r2, [r3, #10]
 8003a4e:	e012      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a50:	4b79      	ldr	r3, [pc, #484]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a52:	220a      	movs	r2, #10
 8003a54:	815a      	strh	r2, [r3, #10]
 8003a56:	e00e      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a58:	4b77      	ldr	r3, [pc, #476]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a5a:	2205      	movs	r2, #5
 8003a5c:	815a      	strh	r2, [r3, #10]
 8003a5e:	e00a      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a60:	4b75      	ldr	r3, [pc, #468]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a62:	2203      	movs	r2, #3
 8003a64:	815a      	strh	r2, [r3, #10]
 8003a66:	e006      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a68:	4b73      	ldr	r3, [pc, #460]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	815a      	strh	r2, [r3, #10]
 8003a6e:	e002      	b.n	8003a76 <Load_EEPROM+0x3fe>
 8003a70:	4b71      	ldr	r3, [pc, #452]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	815a      	strh	r2, [r3, #10]
 8003a76:	bf00      	nop
	__LOAD_FREQ(buffer[6], Per_Msg[PDM_Save]);
 8003a78:	7cbb      	ldrb	r3, [r7, #18]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	2b0a      	cmp	r3, #10
 8003a7e:	d847      	bhi.n	8003b10 <Load_EEPROM+0x498>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <Load_EEPROM+0x410>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	08003abf 	.word	0x08003abf
 8003a90:	08003ac9 	.word	0x08003ac9
 8003a94:	08003ad1 	.word	0x08003ad1
 8003a98:	08003ad9 	.word	0x08003ad9
 8003a9c:	08003ae1 	.word	0x08003ae1
 8003aa0:	08003ae9 	.word	0x08003ae9
 8003aa4:	08003af1 	.word	0x08003af1
 8003aa8:	08003af9 	.word	0x08003af9
 8003aac:	08003b01 	.word	0x08003b01
 8003ab0:	08003b09 	.word	0x08003b09
 8003ab4:	4b60      	ldr	r3, [pc, #384]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003ab6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aba:	819a      	strh	r2, [r3, #12]
 8003abc:	e02b      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003abe:	4b5e      	ldr	r3, [pc, #376]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003ac0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ac4:	819a      	strh	r2, [r3, #12]
 8003ac6:	e026      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003ac8:	4b5b      	ldr	r3, [pc, #364]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003aca:	22c8      	movs	r2, #200	; 0xc8
 8003acc:	819a      	strh	r2, [r3, #12]
 8003ace:	e022      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003ad2:	2264      	movs	r2, #100	; 0x64
 8003ad4:	819a      	strh	r2, [r3, #12]
 8003ad6:	e01e      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003ad8:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003ada:	2232      	movs	r2, #50	; 0x32
 8003adc:	819a      	strh	r2, [r3, #12]
 8003ade:	e01a      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003ae0:	4b55      	ldr	r3, [pc, #340]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003ae2:	2228      	movs	r2, #40	; 0x28
 8003ae4:	819a      	strh	r2, [r3, #12]
 8003ae6:	e016      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003aea:	2214      	movs	r2, #20
 8003aec:	819a      	strh	r2, [r3, #12]
 8003aee:	e012      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003af0:	4b51      	ldr	r3, [pc, #324]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003af2:	220a      	movs	r2, #10
 8003af4:	819a      	strh	r2, [r3, #12]
 8003af6:	e00e      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003af8:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003afa:	2205      	movs	r2, #5
 8003afc:	819a      	strh	r2, [r3, #12]
 8003afe:	e00a      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003b00:	4b4d      	ldr	r3, [pc, #308]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003b02:	2203      	movs	r2, #3
 8003b04:	819a      	strh	r2, [r3, #12]
 8003b06:	e006      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003b08:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	819a      	strh	r2, [r3, #12]
 8003b0e:	e002      	b.n	8003b16 <Load_EEPROM+0x49e>
 8003b10:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <Load_EEPROM+0x5c0>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	819a      	strh	r2, [r3, #12]
 8003b16:	bf00      	nop

	__LOAD_FREQ(buffer[7], Per_CAN[Analog_1_4]);
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	2b0a      	cmp	r3, #10
 8003b1e:	d847      	bhi.n	8003bb0 <Load_EEPROM+0x538>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <Load_EEPROM+0x4b0>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b55 	.word	0x08003b55
 8003b2c:	08003b5f 	.word	0x08003b5f
 8003b30:	08003b69 	.word	0x08003b69
 8003b34:	08003b71 	.word	0x08003b71
 8003b38:	08003b79 	.word	0x08003b79
 8003b3c:	08003b81 	.word	0x08003b81
 8003b40:	08003b89 	.word	0x08003b89
 8003b44:	08003b91 	.word	0x08003b91
 8003b48:	08003b99 	.word	0x08003b99
 8003b4c:	08003ba1 	.word	0x08003ba1
 8003b50:	08003ba9 	.word	0x08003ba9
 8003b54:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003b56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b5a:	801a      	strh	r2, [r3, #0]
 8003b5c:	e02b      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003b5e:	4b37      	ldr	r3, [pc, #220]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003b60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	e026      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003b68:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003b6a:	22c8      	movs	r2, #200	; 0xc8
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	e022      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003b72:	2264      	movs	r2, #100	; 0x64
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	e01e      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003b78:	4b30      	ldr	r3, [pc, #192]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003b7a:	2232      	movs	r2, #50	; 0x32
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	e01a      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003b80:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003b82:	2228      	movs	r2, #40	; 0x28
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	e016      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003b88:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003b8a:	2214      	movs	r2, #20
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	e012      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003b90:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003b92:	220a      	movs	r2, #10
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	e00e      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003b98:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003b9a:	2205      	movs	r2, #5
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	e00a      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003ba0:	4b26      	ldr	r3, [pc, #152]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	e006      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003ba8:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003baa:	2202      	movs	r2, #2
 8003bac:	801a      	strh	r2, [r3, #0]
 8003bae:	e002      	b.n	8003bb6 <Load_EEPROM+0x53e>
 8003bb0:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	bf00      	nop
	__LOAD_FREQ(buffer[8], Per_CAN[Analog_5_8]);
 8003bb8:	7d3b      	ldrb	r3, [r7, #20]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	2b0a      	cmp	r3, #10
 8003bbe:	d84b      	bhi.n	8003c58 <Load_EEPROM+0x5e0>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <Load_EEPROM+0x550>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bf5 	.word	0x08003bf5
 8003bcc:	08003bff 	.word	0x08003bff
 8003bd0:	08003c09 	.word	0x08003c09
 8003bd4:	08003c11 	.word	0x08003c11
 8003bd8:	08003c19 	.word	0x08003c19
 8003bdc:	08003c21 	.word	0x08003c21
 8003be0:	08003c29 	.word	0x08003c29
 8003be4:	08003c31 	.word	0x08003c31
 8003be8:	08003c41 	.word	0x08003c41
 8003bec:	08003c49 	.word	0x08003c49
 8003bf0:	08003c51 	.word	0x08003c51
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003bf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bfa:	805a      	strh	r2, [r3, #2]
 8003bfc:	e02f      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003c00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c04:	805a      	strh	r2, [r3, #2]
 8003c06:	e02a      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003c0a:	22c8      	movs	r2, #200	; 0xc8
 8003c0c:	805a      	strh	r2, [r3, #2]
 8003c0e:	e026      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003c12:	2264      	movs	r2, #100	; 0x64
 8003c14:	805a      	strh	r2, [r3, #2]
 8003c16:	e022      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003c1a:	2232      	movs	r2, #50	; 0x32
 8003c1c:	805a      	strh	r2, [r3, #2]
 8003c1e:	e01e      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003c22:	2228      	movs	r2, #40	; 0x28
 8003c24:	805a      	strh	r2, [r3, #2]
 8003c26:	e01a      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003c2a:	2214      	movs	r2, #20
 8003c2c:	805a      	strh	r2, [r3, #2]
 8003c2e:	e016      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003c30:	4b02      	ldr	r3, [pc, #8]	; (8003c3c <Load_EEPROM+0x5c4>)
 8003c32:	220a      	movs	r2, #10
 8003c34:	805a      	strh	r2, [r3, #2]
 8003c36:	e012      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003c38:	20002e78 	.word	0x20002e78
 8003c3c:	200006fc 	.word	0x200006fc
 8003c40:	4b5b      	ldr	r3, [pc, #364]	; (8003db0 <Load_EEPROM+0x738>)
 8003c42:	2205      	movs	r2, #5
 8003c44:	805a      	strh	r2, [r3, #2]
 8003c46:	e00a      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <Load_EEPROM+0x738>)
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	805a      	strh	r2, [r3, #2]
 8003c4e:	e006      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003c50:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <Load_EEPROM+0x738>)
 8003c52:	2202      	movs	r2, #2
 8003c54:	805a      	strh	r2, [r3, #2]
 8003c56:	e002      	b.n	8003c5e <Load_EEPROM+0x5e6>
 8003c58:	4b55      	ldr	r3, [pc, #340]	; (8003db0 <Load_EEPROM+0x738>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	805a      	strh	r2, [r3, #2]
 8003c5e:	bf00      	nop
	__LOAD_FREQ(buffer[9], Per_CAN[Analog_9_12]);
 8003c60:	7d7b      	ldrb	r3, [r7, #21]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	2b0a      	cmp	r3, #10
 8003c66:	d847      	bhi.n	8003cf8 <Load_EEPROM+0x680>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <Load_EEPROM+0x5f8>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003ca7 	.word	0x08003ca7
 8003c78:	08003cb1 	.word	0x08003cb1
 8003c7c:	08003cb9 	.word	0x08003cb9
 8003c80:	08003cc1 	.word	0x08003cc1
 8003c84:	08003cc9 	.word	0x08003cc9
 8003c88:	08003cd1 	.word	0x08003cd1
 8003c8c:	08003cd9 	.word	0x08003cd9
 8003c90:	08003ce1 	.word	0x08003ce1
 8003c94:	08003ce9 	.word	0x08003ce9
 8003c98:	08003cf1 	.word	0x08003cf1
 8003c9c:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <Load_EEPROM+0x738>)
 8003c9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ca2:	809a      	strh	r2, [r3, #4]
 8003ca4:	e02b      	b.n	8003cfe <Load_EEPROM+0x686>
 8003ca6:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <Load_EEPROM+0x738>)
 8003ca8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003cac:	809a      	strh	r2, [r3, #4]
 8003cae:	e026      	b.n	8003cfe <Load_EEPROM+0x686>
 8003cb0:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <Load_EEPROM+0x738>)
 8003cb2:	22c8      	movs	r2, #200	; 0xc8
 8003cb4:	809a      	strh	r2, [r3, #4]
 8003cb6:	e022      	b.n	8003cfe <Load_EEPROM+0x686>
 8003cb8:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <Load_EEPROM+0x738>)
 8003cba:	2264      	movs	r2, #100	; 0x64
 8003cbc:	809a      	strh	r2, [r3, #4]
 8003cbe:	e01e      	b.n	8003cfe <Load_EEPROM+0x686>
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <Load_EEPROM+0x738>)
 8003cc2:	2232      	movs	r2, #50	; 0x32
 8003cc4:	809a      	strh	r2, [r3, #4]
 8003cc6:	e01a      	b.n	8003cfe <Load_EEPROM+0x686>
 8003cc8:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <Load_EEPROM+0x738>)
 8003cca:	2228      	movs	r2, #40	; 0x28
 8003ccc:	809a      	strh	r2, [r3, #4]
 8003cce:	e016      	b.n	8003cfe <Load_EEPROM+0x686>
 8003cd0:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <Load_EEPROM+0x738>)
 8003cd2:	2214      	movs	r2, #20
 8003cd4:	809a      	strh	r2, [r3, #4]
 8003cd6:	e012      	b.n	8003cfe <Load_EEPROM+0x686>
 8003cd8:	4b35      	ldr	r3, [pc, #212]	; (8003db0 <Load_EEPROM+0x738>)
 8003cda:	220a      	movs	r2, #10
 8003cdc:	809a      	strh	r2, [r3, #4]
 8003cde:	e00e      	b.n	8003cfe <Load_EEPROM+0x686>
 8003ce0:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <Load_EEPROM+0x738>)
 8003ce2:	2205      	movs	r2, #5
 8003ce4:	809a      	strh	r2, [r3, #4]
 8003ce6:	e00a      	b.n	8003cfe <Load_EEPROM+0x686>
 8003ce8:	4b31      	ldr	r3, [pc, #196]	; (8003db0 <Load_EEPROM+0x738>)
 8003cea:	2203      	movs	r2, #3
 8003cec:	809a      	strh	r2, [r3, #4]
 8003cee:	e006      	b.n	8003cfe <Load_EEPROM+0x686>
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <Load_EEPROM+0x738>)
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	809a      	strh	r2, [r3, #4]
 8003cf6:	e002      	b.n	8003cfe <Load_EEPROM+0x686>
 8003cf8:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <Load_EEPROM+0x738>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	809a      	strh	r2, [r3, #4]
 8003cfe:	bf00      	nop
	__LOAD_FREQ(buffer[10], Per_CAN[RTC_Msg]);
 8003d00:	7dbb      	ldrb	r3, [r7, #22]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	2b0a      	cmp	r3, #10
 8003d06:	d847      	bhi.n	8003d98 <Load_EEPROM+0x720>
 8003d08:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <Load_EEPROM+0x698>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	08003d47 	.word	0x08003d47
 8003d18:	08003d51 	.word	0x08003d51
 8003d1c:	08003d59 	.word	0x08003d59
 8003d20:	08003d61 	.word	0x08003d61
 8003d24:	08003d69 	.word	0x08003d69
 8003d28:	08003d71 	.word	0x08003d71
 8003d2c:	08003d79 	.word	0x08003d79
 8003d30:	08003d81 	.word	0x08003d81
 8003d34:	08003d89 	.word	0x08003d89
 8003d38:	08003d91 	.word	0x08003d91
 8003d3c:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <Load_EEPROM+0x738>)
 8003d3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d42:	80da      	strh	r2, [r3, #6]
 8003d44:	e02b      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d46:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <Load_EEPROM+0x738>)
 8003d48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d4c:	80da      	strh	r2, [r3, #6]
 8003d4e:	e026      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <Load_EEPROM+0x738>)
 8003d52:	22c8      	movs	r2, #200	; 0xc8
 8003d54:	80da      	strh	r2, [r3, #6]
 8003d56:	e022      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <Load_EEPROM+0x738>)
 8003d5a:	2264      	movs	r2, #100	; 0x64
 8003d5c:	80da      	strh	r2, [r3, #6]
 8003d5e:	e01e      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d60:	4b13      	ldr	r3, [pc, #76]	; (8003db0 <Load_EEPROM+0x738>)
 8003d62:	2232      	movs	r2, #50	; 0x32
 8003d64:	80da      	strh	r2, [r3, #6]
 8003d66:	e01a      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <Load_EEPROM+0x738>)
 8003d6a:	2228      	movs	r2, #40	; 0x28
 8003d6c:	80da      	strh	r2, [r3, #6]
 8003d6e:	e016      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <Load_EEPROM+0x738>)
 8003d72:	2214      	movs	r2, #20
 8003d74:	80da      	strh	r2, [r3, #6]
 8003d76:	e012      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <Load_EEPROM+0x738>)
 8003d7a:	220a      	movs	r2, #10
 8003d7c:	80da      	strh	r2, [r3, #6]
 8003d7e:	e00e      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <Load_EEPROM+0x738>)
 8003d82:	2205      	movs	r2, #5
 8003d84:	80da      	strh	r2, [r3, #6]
 8003d86:	e00a      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <Load_EEPROM+0x738>)
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	80da      	strh	r2, [r3, #6]
 8003d8e:	e006      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d90:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <Load_EEPROM+0x738>)
 8003d92:	2202      	movs	r2, #2
 8003d94:	80da      	strh	r2, [r3, #6]
 8003d96:	e002      	b.n	8003d9e <Load_EEPROM+0x726>
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <Load_EEPROM+0x738>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	80da      	strh	r2, [r3, #6]
 8003d9e:	bf00      	nop

	Input_Config = buffer[11];
 8003da0:	7dfa      	ldrb	r2, [r7, #23]
 8003da2:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <Load_EEPROM+0x73c>)
 8003da4:	701a      	strb	r2, [r3, #0]

	return retVal;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	200006fc 	.word	0x200006fc
 8003db4:	200006f8 	.word	0x200006f8

08003db8 <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];

	__SAVE_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 8003dc0:	4ba9      	ldr	r3, [pc, #676]	; (8004068 <Save_EEPROM+0x2b0>)
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dc8:	f000 8081 	beq.w	8003ece <Save_EEPROM+0x116>
 8003dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd0:	f300 809e 	bgt.w	8003f10 <Save_EEPROM+0x158>
 8003dd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dd8:	d07c      	beq.n	8003ed4 <Save_EEPROM+0x11c>
 8003dda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dde:	f300 8097 	bgt.w	8003f10 <Save_EEPROM+0x158>
 8003de2:	2bc8      	cmp	r3, #200	; 0xc8
 8003de4:	d079      	beq.n	8003eda <Save_EEPROM+0x122>
 8003de6:	2bc8      	cmp	r3, #200	; 0xc8
 8003de8:	f300 8092 	bgt.w	8003f10 <Save_EEPROM+0x158>
 8003dec:	2b32      	cmp	r3, #50	; 0x32
 8003dee:	dc6b      	bgt.n	8003ec8 <Save_EEPROM+0x110>
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f2c0 808d 	blt.w	8003f10 <Save_EEPROM+0x158>
 8003df6:	3b02      	subs	r3, #2
 8003df8:	2b30      	cmp	r3, #48	; 0x30
 8003dfa:	f200 8089 	bhi.w	8003f10 <Save_EEPROM+0x158>
 8003dfe:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <Save_EEPROM+0x4c>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003f0b 	.word	0x08003f0b
 8003e08:	08003f05 	.word	0x08003f05
 8003e0c:	08003f11 	.word	0x08003f11
 8003e10:	08003eff 	.word	0x08003eff
 8003e14:	08003f11 	.word	0x08003f11
 8003e18:	08003f11 	.word	0x08003f11
 8003e1c:	08003f11 	.word	0x08003f11
 8003e20:	08003f11 	.word	0x08003f11
 8003e24:	08003ef9 	.word	0x08003ef9
 8003e28:	08003f11 	.word	0x08003f11
 8003e2c:	08003f11 	.word	0x08003f11
 8003e30:	08003f11 	.word	0x08003f11
 8003e34:	08003f11 	.word	0x08003f11
 8003e38:	08003f11 	.word	0x08003f11
 8003e3c:	08003f11 	.word	0x08003f11
 8003e40:	08003f11 	.word	0x08003f11
 8003e44:	08003f11 	.word	0x08003f11
 8003e48:	08003f11 	.word	0x08003f11
 8003e4c:	08003ef3 	.word	0x08003ef3
 8003e50:	08003f11 	.word	0x08003f11
 8003e54:	08003f11 	.word	0x08003f11
 8003e58:	08003f11 	.word	0x08003f11
 8003e5c:	08003f11 	.word	0x08003f11
 8003e60:	08003f11 	.word	0x08003f11
 8003e64:	08003f11 	.word	0x08003f11
 8003e68:	08003f11 	.word	0x08003f11
 8003e6c:	08003f11 	.word	0x08003f11
 8003e70:	08003f11 	.word	0x08003f11
 8003e74:	08003f11 	.word	0x08003f11
 8003e78:	08003f11 	.word	0x08003f11
 8003e7c:	08003f11 	.word	0x08003f11
 8003e80:	08003f11 	.word	0x08003f11
 8003e84:	08003f11 	.word	0x08003f11
 8003e88:	08003f11 	.word	0x08003f11
 8003e8c:	08003f11 	.word	0x08003f11
 8003e90:	08003f11 	.word	0x08003f11
 8003e94:	08003f11 	.word	0x08003f11
 8003e98:	08003f11 	.word	0x08003f11
 8003e9c:	08003eed 	.word	0x08003eed
 8003ea0:	08003f11 	.word	0x08003f11
 8003ea4:	08003f11 	.word	0x08003f11
 8003ea8:	08003f11 	.word	0x08003f11
 8003eac:	08003f11 	.word	0x08003f11
 8003eb0:	08003f11 	.word	0x08003f11
 8003eb4:	08003f11 	.word	0x08003f11
 8003eb8:	08003f11 	.word	0x08003f11
 8003ebc:	08003f11 	.word	0x08003f11
 8003ec0:	08003f11 	.word	0x08003f11
 8003ec4:	08003ee7 	.word	0x08003ee7
 8003ec8:	2b64      	cmp	r3, #100	; 0x64
 8003eca:	d009      	beq.n	8003ee0 <Save_EEPROM+0x128>
 8003ecc:	e020      	b.n	8003f10 <Save_EEPROM+0x158>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	733b      	strb	r3, [r7, #12]
 8003ed2:	e01f      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	733b      	strb	r3, [r7, #12]
 8003ed8:	e01c      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003eda:	2303      	movs	r3, #3
 8003edc:	733b      	strb	r3, [r7, #12]
 8003ede:	e019      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	733b      	strb	r3, [r7, #12]
 8003ee4:	e016      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003ee6:	2305      	movs	r3, #5
 8003ee8:	733b      	strb	r3, [r7, #12]
 8003eea:	e013      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003eec:	2306      	movs	r3, #6
 8003eee:	733b      	strb	r3, [r7, #12]
 8003ef0:	e010      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003ef2:	2307      	movs	r3, #7
 8003ef4:	733b      	strb	r3, [r7, #12]
 8003ef6:	e00d      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003ef8:	2308      	movs	r3, #8
 8003efa:	733b      	strb	r3, [r7, #12]
 8003efc:	e00a      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003efe:	2309      	movs	r3, #9
 8003f00:	733b      	strb	r3, [r7, #12]
 8003f02:	e007      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003f04:	230a      	movs	r3, #10
 8003f06:	733b      	strb	r3, [r7, #12]
 8003f08:	e004      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003f0a:	230b      	movs	r3, #11
 8003f0c:	733b      	strb	r3, [r7, #12]
 8003f0e:	e001      	b.n	8003f14 <Save_EEPROM+0x15c>
 8003f10:	2300      	movs	r3, #0
 8003f12:	733b      	strb	r3, [r7, #12]
 8003f14:	bf00      	nop
	__SAVE_FREQ(buffer[1], Per_Msg[Analog_5_8]);
 8003f16:	4b54      	ldr	r3, [pc, #336]	; (8004068 <Save_EEPROM+0x2b0>)
 8003f18:	885b      	ldrh	r3, [r3, #2]
 8003f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f1e:	f000 8082 	beq.w	8004026 <Save_EEPROM+0x26e>
 8003f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f26:	f300 80a1 	bgt.w	800406c <Save_EEPROM+0x2b4>
 8003f2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f2e:	d07d      	beq.n	800402c <Save_EEPROM+0x274>
 8003f30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f34:	f300 809a 	bgt.w	800406c <Save_EEPROM+0x2b4>
 8003f38:	2bc8      	cmp	r3, #200	; 0xc8
 8003f3a:	d07a      	beq.n	8004032 <Save_EEPROM+0x27a>
 8003f3c:	2bc8      	cmp	r3, #200	; 0xc8
 8003f3e:	f300 8095 	bgt.w	800406c <Save_EEPROM+0x2b4>
 8003f42:	2b32      	cmp	r3, #50	; 0x32
 8003f44:	dc6c      	bgt.n	8004020 <Save_EEPROM+0x268>
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	f2c0 8090 	blt.w	800406c <Save_EEPROM+0x2b4>
 8003f4c:	3b02      	subs	r3, #2
 8003f4e:	2b30      	cmp	r3, #48	; 0x30
 8003f50:	f200 808c 	bhi.w	800406c <Save_EEPROM+0x2b4>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <Save_EEPROM+0x1a4>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08004063 	.word	0x08004063
 8003f60:	0800405d 	.word	0x0800405d
 8003f64:	0800406d 	.word	0x0800406d
 8003f68:	08004057 	.word	0x08004057
 8003f6c:	0800406d 	.word	0x0800406d
 8003f70:	0800406d 	.word	0x0800406d
 8003f74:	0800406d 	.word	0x0800406d
 8003f78:	0800406d 	.word	0x0800406d
 8003f7c:	08004051 	.word	0x08004051
 8003f80:	0800406d 	.word	0x0800406d
 8003f84:	0800406d 	.word	0x0800406d
 8003f88:	0800406d 	.word	0x0800406d
 8003f8c:	0800406d 	.word	0x0800406d
 8003f90:	0800406d 	.word	0x0800406d
 8003f94:	0800406d 	.word	0x0800406d
 8003f98:	0800406d 	.word	0x0800406d
 8003f9c:	0800406d 	.word	0x0800406d
 8003fa0:	0800406d 	.word	0x0800406d
 8003fa4:	0800404b 	.word	0x0800404b
 8003fa8:	0800406d 	.word	0x0800406d
 8003fac:	0800406d 	.word	0x0800406d
 8003fb0:	0800406d 	.word	0x0800406d
 8003fb4:	0800406d 	.word	0x0800406d
 8003fb8:	0800406d 	.word	0x0800406d
 8003fbc:	0800406d 	.word	0x0800406d
 8003fc0:	0800406d 	.word	0x0800406d
 8003fc4:	0800406d 	.word	0x0800406d
 8003fc8:	0800406d 	.word	0x0800406d
 8003fcc:	0800406d 	.word	0x0800406d
 8003fd0:	0800406d 	.word	0x0800406d
 8003fd4:	0800406d 	.word	0x0800406d
 8003fd8:	0800406d 	.word	0x0800406d
 8003fdc:	0800406d 	.word	0x0800406d
 8003fe0:	0800406d 	.word	0x0800406d
 8003fe4:	0800406d 	.word	0x0800406d
 8003fe8:	0800406d 	.word	0x0800406d
 8003fec:	0800406d 	.word	0x0800406d
 8003ff0:	0800406d 	.word	0x0800406d
 8003ff4:	08004045 	.word	0x08004045
 8003ff8:	0800406d 	.word	0x0800406d
 8003ffc:	0800406d 	.word	0x0800406d
 8004000:	0800406d 	.word	0x0800406d
 8004004:	0800406d 	.word	0x0800406d
 8004008:	0800406d 	.word	0x0800406d
 800400c:	0800406d 	.word	0x0800406d
 8004010:	0800406d 	.word	0x0800406d
 8004014:	0800406d 	.word	0x0800406d
 8004018:	0800406d 	.word	0x0800406d
 800401c:	0800403f 	.word	0x0800403f
 8004020:	2b64      	cmp	r3, #100	; 0x64
 8004022:	d009      	beq.n	8004038 <Save_EEPROM+0x280>
 8004024:	e022      	b.n	800406c <Save_EEPROM+0x2b4>
 8004026:	2301      	movs	r3, #1
 8004028:	737b      	strb	r3, [r7, #13]
 800402a:	e021      	b.n	8004070 <Save_EEPROM+0x2b8>
 800402c:	2302      	movs	r3, #2
 800402e:	737b      	strb	r3, [r7, #13]
 8004030:	e01e      	b.n	8004070 <Save_EEPROM+0x2b8>
 8004032:	2303      	movs	r3, #3
 8004034:	737b      	strb	r3, [r7, #13]
 8004036:	e01b      	b.n	8004070 <Save_EEPROM+0x2b8>
 8004038:	2304      	movs	r3, #4
 800403a:	737b      	strb	r3, [r7, #13]
 800403c:	e018      	b.n	8004070 <Save_EEPROM+0x2b8>
 800403e:	2305      	movs	r3, #5
 8004040:	737b      	strb	r3, [r7, #13]
 8004042:	e015      	b.n	8004070 <Save_EEPROM+0x2b8>
 8004044:	2306      	movs	r3, #6
 8004046:	737b      	strb	r3, [r7, #13]
 8004048:	e012      	b.n	8004070 <Save_EEPROM+0x2b8>
 800404a:	2307      	movs	r3, #7
 800404c:	737b      	strb	r3, [r7, #13]
 800404e:	e00f      	b.n	8004070 <Save_EEPROM+0x2b8>
 8004050:	2308      	movs	r3, #8
 8004052:	737b      	strb	r3, [r7, #13]
 8004054:	e00c      	b.n	8004070 <Save_EEPROM+0x2b8>
 8004056:	2309      	movs	r3, #9
 8004058:	737b      	strb	r3, [r7, #13]
 800405a:	e009      	b.n	8004070 <Save_EEPROM+0x2b8>
 800405c:	230a      	movs	r3, #10
 800405e:	737b      	strb	r3, [r7, #13]
 8004060:	e006      	b.n	8004070 <Save_EEPROM+0x2b8>
 8004062:	230b      	movs	r3, #11
 8004064:	737b      	strb	r3, [r7, #13]
 8004066:	e003      	b.n	8004070 <Save_EEPROM+0x2b8>
 8004068:	20002e78 	.word	0x20002e78
 800406c:	2300      	movs	r3, #0
 800406e:	737b      	strb	r3, [r7, #13]
 8004070:	bf00      	nop
	__SAVE_FREQ(buffer[2], Per_Msg[Analog_9_12]);
 8004072:	4baa      	ldr	r3, [pc, #680]	; (800431c <Save_EEPROM+0x564>)
 8004074:	889b      	ldrh	r3, [r3, #4]
 8004076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800407a:	f000 8082 	beq.w	8004182 <Save_EEPROM+0x3ca>
 800407e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004082:	f300 809f 	bgt.w	80041c4 <Save_EEPROM+0x40c>
 8004086:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800408a:	d07d      	beq.n	8004188 <Save_EEPROM+0x3d0>
 800408c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004090:	f300 8098 	bgt.w	80041c4 <Save_EEPROM+0x40c>
 8004094:	2bc8      	cmp	r3, #200	; 0xc8
 8004096:	d07a      	beq.n	800418e <Save_EEPROM+0x3d6>
 8004098:	2bc8      	cmp	r3, #200	; 0xc8
 800409a:	f300 8093 	bgt.w	80041c4 <Save_EEPROM+0x40c>
 800409e:	2b32      	cmp	r3, #50	; 0x32
 80040a0:	dc6c      	bgt.n	800417c <Save_EEPROM+0x3c4>
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	f2c0 808e 	blt.w	80041c4 <Save_EEPROM+0x40c>
 80040a8:	3b02      	subs	r3, #2
 80040aa:	2b30      	cmp	r3, #48	; 0x30
 80040ac:	f200 808a 	bhi.w	80041c4 <Save_EEPROM+0x40c>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <Save_EEPROM+0x300>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080041bf 	.word	0x080041bf
 80040bc:	080041b9 	.word	0x080041b9
 80040c0:	080041c5 	.word	0x080041c5
 80040c4:	080041b3 	.word	0x080041b3
 80040c8:	080041c5 	.word	0x080041c5
 80040cc:	080041c5 	.word	0x080041c5
 80040d0:	080041c5 	.word	0x080041c5
 80040d4:	080041c5 	.word	0x080041c5
 80040d8:	080041ad 	.word	0x080041ad
 80040dc:	080041c5 	.word	0x080041c5
 80040e0:	080041c5 	.word	0x080041c5
 80040e4:	080041c5 	.word	0x080041c5
 80040e8:	080041c5 	.word	0x080041c5
 80040ec:	080041c5 	.word	0x080041c5
 80040f0:	080041c5 	.word	0x080041c5
 80040f4:	080041c5 	.word	0x080041c5
 80040f8:	080041c5 	.word	0x080041c5
 80040fc:	080041c5 	.word	0x080041c5
 8004100:	080041a7 	.word	0x080041a7
 8004104:	080041c5 	.word	0x080041c5
 8004108:	080041c5 	.word	0x080041c5
 800410c:	080041c5 	.word	0x080041c5
 8004110:	080041c5 	.word	0x080041c5
 8004114:	080041c5 	.word	0x080041c5
 8004118:	080041c5 	.word	0x080041c5
 800411c:	080041c5 	.word	0x080041c5
 8004120:	080041c5 	.word	0x080041c5
 8004124:	080041c5 	.word	0x080041c5
 8004128:	080041c5 	.word	0x080041c5
 800412c:	080041c5 	.word	0x080041c5
 8004130:	080041c5 	.word	0x080041c5
 8004134:	080041c5 	.word	0x080041c5
 8004138:	080041c5 	.word	0x080041c5
 800413c:	080041c5 	.word	0x080041c5
 8004140:	080041c5 	.word	0x080041c5
 8004144:	080041c5 	.word	0x080041c5
 8004148:	080041c5 	.word	0x080041c5
 800414c:	080041c5 	.word	0x080041c5
 8004150:	080041a1 	.word	0x080041a1
 8004154:	080041c5 	.word	0x080041c5
 8004158:	080041c5 	.word	0x080041c5
 800415c:	080041c5 	.word	0x080041c5
 8004160:	080041c5 	.word	0x080041c5
 8004164:	080041c5 	.word	0x080041c5
 8004168:	080041c5 	.word	0x080041c5
 800416c:	080041c5 	.word	0x080041c5
 8004170:	080041c5 	.word	0x080041c5
 8004174:	080041c5 	.word	0x080041c5
 8004178:	0800419b 	.word	0x0800419b
 800417c:	2b64      	cmp	r3, #100	; 0x64
 800417e:	d009      	beq.n	8004194 <Save_EEPROM+0x3dc>
 8004180:	e020      	b.n	80041c4 <Save_EEPROM+0x40c>
 8004182:	2301      	movs	r3, #1
 8004184:	73bb      	strb	r3, [r7, #14]
 8004186:	e01f      	b.n	80041c8 <Save_EEPROM+0x410>
 8004188:	2302      	movs	r3, #2
 800418a:	73bb      	strb	r3, [r7, #14]
 800418c:	e01c      	b.n	80041c8 <Save_EEPROM+0x410>
 800418e:	2303      	movs	r3, #3
 8004190:	73bb      	strb	r3, [r7, #14]
 8004192:	e019      	b.n	80041c8 <Save_EEPROM+0x410>
 8004194:	2304      	movs	r3, #4
 8004196:	73bb      	strb	r3, [r7, #14]
 8004198:	e016      	b.n	80041c8 <Save_EEPROM+0x410>
 800419a:	2305      	movs	r3, #5
 800419c:	73bb      	strb	r3, [r7, #14]
 800419e:	e013      	b.n	80041c8 <Save_EEPROM+0x410>
 80041a0:	2306      	movs	r3, #6
 80041a2:	73bb      	strb	r3, [r7, #14]
 80041a4:	e010      	b.n	80041c8 <Save_EEPROM+0x410>
 80041a6:	2307      	movs	r3, #7
 80041a8:	73bb      	strb	r3, [r7, #14]
 80041aa:	e00d      	b.n	80041c8 <Save_EEPROM+0x410>
 80041ac:	2308      	movs	r3, #8
 80041ae:	73bb      	strb	r3, [r7, #14]
 80041b0:	e00a      	b.n	80041c8 <Save_EEPROM+0x410>
 80041b2:	2309      	movs	r3, #9
 80041b4:	73bb      	strb	r3, [r7, #14]
 80041b6:	e007      	b.n	80041c8 <Save_EEPROM+0x410>
 80041b8:	230a      	movs	r3, #10
 80041ba:	73bb      	strb	r3, [r7, #14]
 80041bc:	e004      	b.n	80041c8 <Save_EEPROM+0x410>
 80041be:	230b      	movs	r3, #11
 80041c0:	73bb      	strb	r3, [r7, #14]
 80041c2:	e001      	b.n	80041c8 <Save_EEPROM+0x410>
 80041c4:	2300      	movs	r3, #0
 80041c6:	73bb      	strb	r3, [r7, #14]
 80041c8:	bf00      	nop
	__SAVE_FREQ(buffer[3], Per_Msg[RTC_Msg]);
 80041ca:	4b54      	ldr	r3, [pc, #336]	; (800431c <Save_EEPROM+0x564>)
 80041cc:	88db      	ldrh	r3, [r3, #6]
 80041ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d2:	f000 8082 	beq.w	80042da <Save_EEPROM+0x522>
 80041d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041da:	f300 80a1 	bgt.w	8004320 <Save_EEPROM+0x568>
 80041de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041e2:	d07d      	beq.n	80042e0 <Save_EEPROM+0x528>
 80041e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041e8:	f300 809a 	bgt.w	8004320 <Save_EEPROM+0x568>
 80041ec:	2bc8      	cmp	r3, #200	; 0xc8
 80041ee:	d07a      	beq.n	80042e6 <Save_EEPROM+0x52e>
 80041f0:	2bc8      	cmp	r3, #200	; 0xc8
 80041f2:	f300 8095 	bgt.w	8004320 <Save_EEPROM+0x568>
 80041f6:	2b32      	cmp	r3, #50	; 0x32
 80041f8:	dc6c      	bgt.n	80042d4 <Save_EEPROM+0x51c>
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	f2c0 8090 	blt.w	8004320 <Save_EEPROM+0x568>
 8004200:	3b02      	subs	r3, #2
 8004202:	2b30      	cmp	r3, #48	; 0x30
 8004204:	f200 808c 	bhi.w	8004320 <Save_EEPROM+0x568>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <Save_EEPROM+0x458>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004317 	.word	0x08004317
 8004214:	08004311 	.word	0x08004311
 8004218:	08004321 	.word	0x08004321
 800421c:	0800430b 	.word	0x0800430b
 8004220:	08004321 	.word	0x08004321
 8004224:	08004321 	.word	0x08004321
 8004228:	08004321 	.word	0x08004321
 800422c:	08004321 	.word	0x08004321
 8004230:	08004305 	.word	0x08004305
 8004234:	08004321 	.word	0x08004321
 8004238:	08004321 	.word	0x08004321
 800423c:	08004321 	.word	0x08004321
 8004240:	08004321 	.word	0x08004321
 8004244:	08004321 	.word	0x08004321
 8004248:	08004321 	.word	0x08004321
 800424c:	08004321 	.word	0x08004321
 8004250:	08004321 	.word	0x08004321
 8004254:	08004321 	.word	0x08004321
 8004258:	080042ff 	.word	0x080042ff
 800425c:	08004321 	.word	0x08004321
 8004260:	08004321 	.word	0x08004321
 8004264:	08004321 	.word	0x08004321
 8004268:	08004321 	.word	0x08004321
 800426c:	08004321 	.word	0x08004321
 8004270:	08004321 	.word	0x08004321
 8004274:	08004321 	.word	0x08004321
 8004278:	08004321 	.word	0x08004321
 800427c:	08004321 	.word	0x08004321
 8004280:	08004321 	.word	0x08004321
 8004284:	08004321 	.word	0x08004321
 8004288:	08004321 	.word	0x08004321
 800428c:	08004321 	.word	0x08004321
 8004290:	08004321 	.word	0x08004321
 8004294:	08004321 	.word	0x08004321
 8004298:	08004321 	.word	0x08004321
 800429c:	08004321 	.word	0x08004321
 80042a0:	08004321 	.word	0x08004321
 80042a4:	08004321 	.word	0x08004321
 80042a8:	080042f9 	.word	0x080042f9
 80042ac:	08004321 	.word	0x08004321
 80042b0:	08004321 	.word	0x08004321
 80042b4:	08004321 	.word	0x08004321
 80042b8:	08004321 	.word	0x08004321
 80042bc:	08004321 	.word	0x08004321
 80042c0:	08004321 	.word	0x08004321
 80042c4:	08004321 	.word	0x08004321
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004321 	.word	0x08004321
 80042d0:	080042f3 	.word	0x080042f3
 80042d4:	2b64      	cmp	r3, #100	; 0x64
 80042d6:	d009      	beq.n	80042ec <Save_EEPROM+0x534>
 80042d8:	e022      	b.n	8004320 <Save_EEPROM+0x568>
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
 80042de:	e021      	b.n	8004324 <Save_EEPROM+0x56c>
 80042e0:	2302      	movs	r3, #2
 80042e2:	73fb      	strb	r3, [r7, #15]
 80042e4:	e01e      	b.n	8004324 <Save_EEPROM+0x56c>
 80042e6:	2303      	movs	r3, #3
 80042e8:	73fb      	strb	r3, [r7, #15]
 80042ea:	e01b      	b.n	8004324 <Save_EEPROM+0x56c>
 80042ec:	2304      	movs	r3, #4
 80042ee:	73fb      	strb	r3, [r7, #15]
 80042f0:	e018      	b.n	8004324 <Save_EEPROM+0x56c>
 80042f2:	2305      	movs	r3, #5
 80042f4:	73fb      	strb	r3, [r7, #15]
 80042f6:	e015      	b.n	8004324 <Save_EEPROM+0x56c>
 80042f8:	2306      	movs	r3, #6
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e012      	b.n	8004324 <Save_EEPROM+0x56c>
 80042fe:	2307      	movs	r3, #7
 8004300:	73fb      	strb	r3, [r7, #15]
 8004302:	e00f      	b.n	8004324 <Save_EEPROM+0x56c>
 8004304:	2308      	movs	r3, #8
 8004306:	73fb      	strb	r3, [r7, #15]
 8004308:	e00c      	b.n	8004324 <Save_EEPROM+0x56c>
 800430a:	2309      	movs	r3, #9
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	e009      	b.n	8004324 <Save_EEPROM+0x56c>
 8004310:	230a      	movs	r3, #10
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	e006      	b.n	8004324 <Save_EEPROM+0x56c>
 8004316:	230b      	movs	r3, #11
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	e003      	b.n	8004324 <Save_EEPROM+0x56c>
 800431c:	20002e78 	.word	0x20002e78
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]
 8004324:	bf00      	nop
	__SAVE_FREQ(buffer[4], Per_Msg[Verify_Msg]);
 8004326:	4baa      	ldr	r3, [pc, #680]	; (80045d0 <Save_EEPROM+0x818>)
 8004328:	891b      	ldrh	r3, [r3, #8]
 800432a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800432e:	f000 8082 	beq.w	8004436 <Save_EEPROM+0x67e>
 8004332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004336:	f300 809f 	bgt.w	8004478 <Save_EEPROM+0x6c0>
 800433a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800433e:	d07d      	beq.n	800443c <Save_EEPROM+0x684>
 8004340:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004344:	f300 8098 	bgt.w	8004478 <Save_EEPROM+0x6c0>
 8004348:	2bc8      	cmp	r3, #200	; 0xc8
 800434a:	d07a      	beq.n	8004442 <Save_EEPROM+0x68a>
 800434c:	2bc8      	cmp	r3, #200	; 0xc8
 800434e:	f300 8093 	bgt.w	8004478 <Save_EEPROM+0x6c0>
 8004352:	2b32      	cmp	r3, #50	; 0x32
 8004354:	dc6c      	bgt.n	8004430 <Save_EEPROM+0x678>
 8004356:	2b02      	cmp	r3, #2
 8004358:	f2c0 808e 	blt.w	8004478 <Save_EEPROM+0x6c0>
 800435c:	3b02      	subs	r3, #2
 800435e:	2b30      	cmp	r3, #48	; 0x30
 8004360:	f200 808a 	bhi.w	8004478 <Save_EEPROM+0x6c0>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <Save_EEPROM+0x5b4>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	08004473 	.word	0x08004473
 8004370:	0800446d 	.word	0x0800446d
 8004374:	08004479 	.word	0x08004479
 8004378:	08004467 	.word	0x08004467
 800437c:	08004479 	.word	0x08004479
 8004380:	08004479 	.word	0x08004479
 8004384:	08004479 	.word	0x08004479
 8004388:	08004479 	.word	0x08004479
 800438c:	08004461 	.word	0x08004461
 8004390:	08004479 	.word	0x08004479
 8004394:	08004479 	.word	0x08004479
 8004398:	08004479 	.word	0x08004479
 800439c:	08004479 	.word	0x08004479
 80043a0:	08004479 	.word	0x08004479
 80043a4:	08004479 	.word	0x08004479
 80043a8:	08004479 	.word	0x08004479
 80043ac:	08004479 	.word	0x08004479
 80043b0:	08004479 	.word	0x08004479
 80043b4:	0800445b 	.word	0x0800445b
 80043b8:	08004479 	.word	0x08004479
 80043bc:	08004479 	.word	0x08004479
 80043c0:	08004479 	.word	0x08004479
 80043c4:	08004479 	.word	0x08004479
 80043c8:	08004479 	.word	0x08004479
 80043cc:	08004479 	.word	0x08004479
 80043d0:	08004479 	.word	0x08004479
 80043d4:	08004479 	.word	0x08004479
 80043d8:	08004479 	.word	0x08004479
 80043dc:	08004479 	.word	0x08004479
 80043e0:	08004479 	.word	0x08004479
 80043e4:	08004479 	.word	0x08004479
 80043e8:	08004479 	.word	0x08004479
 80043ec:	08004479 	.word	0x08004479
 80043f0:	08004479 	.word	0x08004479
 80043f4:	08004479 	.word	0x08004479
 80043f8:	08004479 	.word	0x08004479
 80043fc:	08004479 	.word	0x08004479
 8004400:	08004479 	.word	0x08004479
 8004404:	08004455 	.word	0x08004455
 8004408:	08004479 	.word	0x08004479
 800440c:	08004479 	.word	0x08004479
 8004410:	08004479 	.word	0x08004479
 8004414:	08004479 	.word	0x08004479
 8004418:	08004479 	.word	0x08004479
 800441c:	08004479 	.word	0x08004479
 8004420:	08004479 	.word	0x08004479
 8004424:	08004479 	.word	0x08004479
 8004428:	08004479 	.word	0x08004479
 800442c:	0800444f 	.word	0x0800444f
 8004430:	2b64      	cmp	r3, #100	; 0x64
 8004432:	d009      	beq.n	8004448 <Save_EEPROM+0x690>
 8004434:	e020      	b.n	8004478 <Save_EEPROM+0x6c0>
 8004436:	2301      	movs	r3, #1
 8004438:	743b      	strb	r3, [r7, #16]
 800443a:	e01f      	b.n	800447c <Save_EEPROM+0x6c4>
 800443c:	2302      	movs	r3, #2
 800443e:	743b      	strb	r3, [r7, #16]
 8004440:	e01c      	b.n	800447c <Save_EEPROM+0x6c4>
 8004442:	2303      	movs	r3, #3
 8004444:	743b      	strb	r3, [r7, #16]
 8004446:	e019      	b.n	800447c <Save_EEPROM+0x6c4>
 8004448:	2304      	movs	r3, #4
 800444a:	743b      	strb	r3, [r7, #16]
 800444c:	e016      	b.n	800447c <Save_EEPROM+0x6c4>
 800444e:	2305      	movs	r3, #5
 8004450:	743b      	strb	r3, [r7, #16]
 8004452:	e013      	b.n	800447c <Save_EEPROM+0x6c4>
 8004454:	2306      	movs	r3, #6
 8004456:	743b      	strb	r3, [r7, #16]
 8004458:	e010      	b.n	800447c <Save_EEPROM+0x6c4>
 800445a:	2307      	movs	r3, #7
 800445c:	743b      	strb	r3, [r7, #16]
 800445e:	e00d      	b.n	800447c <Save_EEPROM+0x6c4>
 8004460:	2308      	movs	r3, #8
 8004462:	743b      	strb	r3, [r7, #16]
 8004464:	e00a      	b.n	800447c <Save_EEPROM+0x6c4>
 8004466:	2309      	movs	r3, #9
 8004468:	743b      	strb	r3, [r7, #16]
 800446a:	e007      	b.n	800447c <Save_EEPROM+0x6c4>
 800446c:	230a      	movs	r3, #10
 800446e:	743b      	strb	r3, [r7, #16]
 8004470:	e004      	b.n	800447c <Save_EEPROM+0x6c4>
 8004472:	230b      	movs	r3, #11
 8004474:	743b      	strb	r3, [r7, #16]
 8004476:	e001      	b.n	800447c <Save_EEPROM+0x6c4>
 8004478:	2300      	movs	r3, #0
 800447a:	743b      	strb	r3, [r7, #16]
 800447c:	bf00      	nop
	__SAVE_FREQ(buffer[5], Per_Msg[ECU_Save]);
 800447e:	4b54      	ldr	r3, [pc, #336]	; (80045d0 <Save_EEPROM+0x818>)
 8004480:	895b      	ldrh	r3, [r3, #10]
 8004482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004486:	f000 8082 	beq.w	800458e <Save_EEPROM+0x7d6>
 800448a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800448e:	f300 80a1 	bgt.w	80045d4 <Save_EEPROM+0x81c>
 8004492:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004496:	d07d      	beq.n	8004594 <Save_EEPROM+0x7dc>
 8004498:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800449c:	f300 809a 	bgt.w	80045d4 <Save_EEPROM+0x81c>
 80044a0:	2bc8      	cmp	r3, #200	; 0xc8
 80044a2:	d07a      	beq.n	800459a <Save_EEPROM+0x7e2>
 80044a4:	2bc8      	cmp	r3, #200	; 0xc8
 80044a6:	f300 8095 	bgt.w	80045d4 <Save_EEPROM+0x81c>
 80044aa:	2b32      	cmp	r3, #50	; 0x32
 80044ac:	dc6c      	bgt.n	8004588 <Save_EEPROM+0x7d0>
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	f2c0 8090 	blt.w	80045d4 <Save_EEPROM+0x81c>
 80044b4:	3b02      	subs	r3, #2
 80044b6:	2b30      	cmp	r3, #48	; 0x30
 80044b8:	f200 808c 	bhi.w	80045d4 <Save_EEPROM+0x81c>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <Save_EEPROM+0x70c>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080045cb 	.word	0x080045cb
 80044c8:	080045c5 	.word	0x080045c5
 80044cc:	080045d5 	.word	0x080045d5
 80044d0:	080045bf 	.word	0x080045bf
 80044d4:	080045d5 	.word	0x080045d5
 80044d8:	080045d5 	.word	0x080045d5
 80044dc:	080045d5 	.word	0x080045d5
 80044e0:	080045d5 	.word	0x080045d5
 80044e4:	080045b9 	.word	0x080045b9
 80044e8:	080045d5 	.word	0x080045d5
 80044ec:	080045d5 	.word	0x080045d5
 80044f0:	080045d5 	.word	0x080045d5
 80044f4:	080045d5 	.word	0x080045d5
 80044f8:	080045d5 	.word	0x080045d5
 80044fc:	080045d5 	.word	0x080045d5
 8004500:	080045d5 	.word	0x080045d5
 8004504:	080045d5 	.word	0x080045d5
 8004508:	080045d5 	.word	0x080045d5
 800450c:	080045b3 	.word	0x080045b3
 8004510:	080045d5 	.word	0x080045d5
 8004514:	080045d5 	.word	0x080045d5
 8004518:	080045d5 	.word	0x080045d5
 800451c:	080045d5 	.word	0x080045d5
 8004520:	080045d5 	.word	0x080045d5
 8004524:	080045d5 	.word	0x080045d5
 8004528:	080045d5 	.word	0x080045d5
 800452c:	080045d5 	.word	0x080045d5
 8004530:	080045d5 	.word	0x080045d5
 8004534:	080045d5 	.word	0x080045d5
 8004538:	080045d5 	.word	0x080045d5
 800453c:	080045d5 	.word	0x080045d5
 8004540:	080045d5 	.word	0x080045d5
 8004544:	080045d5 	.word	0x080045d5
 8004548:	080045d5 	.word	0x080045d5
 800454c:	080045d5 	.word	0x080045d5
 8004550:	080045d5 	.word	0x080045d5
 8004554:	080045d5 	.word	0x080045d5
 8004558:	080045d5 	.word	0x080045d5
 800455c:	080045ad 	.word	0x080045ad
 8004560:	080045d5 	.word	0x080045d5
 8004564:	080045d5 	.word	0x080045d5
 8004568:	080045d5 	.word	0x080045d5
 800456c:	080045d5 	.word	0x080045d5
 8004570:	080045d5 	.word	0x080045d5
 8004574:	080045d5 	.word	0x080045d5
 8004578:	080045d5 	.word	0x080045d5
 800457c:	080045d5 	.word	0x080045d5
 8004580:	080045d5 	.word	0x080045d5
 8004584:	080045a7 	.word	0x080045a7
 8004588:	2b64      	cmp	r3, #100	; 0x64
 800458a:	d009      	beq.n	80045a0 <Save_EEPROM+0x7e8>
 800458c:	e022      	b.n	80045d4 <Save_EEPROM+0x81c>
 800458e:	2301      	movs	r3, #1
 8004590:	747b      	strb	r3, [r7, #17]
 8004592:	e021      	b.n	80045d8 <Save_EEPROM+0x820>
 8004594:	2302      	movs	r3, #2
 8004596:	747b      	strb	r3, [r7, #17]
 8004598:	e01e      	b.n	80045d8 <Save_EEPROM+0x820>
 800459a:	2303      	movs	r3, #3
 800459c:	747b      	strb	r3, [r7, #17]
 800459e:	e01b      	b.n	80045d8 <Save_EEPROM+0x820>
 80045a0:	2304      	movs	r3, #4
 80045a2:	747b      	strb	r3, [r7, #17]
 80045a4:	e018      	b.n	80045d8 <Save_EEPROM+0x820>
 80045a6:	2305      	movs	r3, #5
 80045a8:	747b      	strb	r3, [r7, #17]
 80045aa:	e015      	b.n	80045d8 <Save_EEPROM+0x820>
 80045ac:	2306      	movs	r3, #6
 80045ae:	747b      	strb	r3, [r7, #17]
 80045b0:	e012      	b.n	80045d8 <Save_EEPROM+0x820>
 80045b2:	2307      	movs	r3, #7
 80045b4:	747b      	strb	r3, [r7, #17]
 80045b6:	e00f      	b.n	80045d8 <Save_EEPROM+0x820>
 80045b8:	2308      	movs	r3, #8
 80045ba:	747b      	strb	r3, [r7, #17]
 80045bc:	e00c      	b.n	80045d8 <Save_EEPROM+0x820>
 80045be:	2309      	movs	r3, #9
 80045c0:	747b      	strb	r3, [r7, #17]
 80045c2:	e009      	b.n	80045d8 <Save_EEPROM+0x820>
 80045c4:	230a      	movs	r3, #10
 80045c6:	747b      	strb	r3, [r7, #17]
 80045c8:	e006      	b.n	80045d8 <Save_EEPROM+0x820>
 80045ca:	230b      	movs	r3, #11
 80045cc:	747b      	strb	r3, [r7, #17]
 80045ce:	e003      	b.n	80045d8 <Save_EEPROM+0x820>
 80045d0:	20002e78 	.word	0x20002e78
 80045d4:	2300      	movs	r3, #0
 80045d6:	747b      	strb	r3, [r7, #17]
 80045d8:	bf00      	nop
	__SAVE_FREQ(buffer[6], Per_Msg[PDM_Save]);
 80045da:	4baa      	ldr	r3, [pc, #680]	; (8004884 <Save_EEPROM+0xacc>)
 80045dc:	899b      	ldrh	r3, [r3, #12]
 80045de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e2:	f000 8082 	beq.w	80046ea <Save_EEPROM+0x932>
 80045e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ea:	f300 809f 	bgt.w	800472c <Save_EEPROM+0x974>
 80045ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045f2:	d07d      	beq.n	80046f0 <Save_EEPROM+0x938>
 80045f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045f8:	f300 8098 	bgt.w	800472c <Save_EEPROM+0x974>
 80045fc:	2bc8      	cmp	r3, #200	; 0xc8
 80045fe:	d07a      	beq.n	80046f6 <Save_EEPROM+0x93e>
 8004600:	2bc8      	cmp	r3, #200	; 0xc8
 8004602:	f300 8093 	bgt.w	800472c <Save_EEPROM+0x974>
 8004606:	2b32      	cmp	r3, #50	; 0x32
 8004608:	dc6c      	bgt.n	80046e4 <Save_EEPROM+0x92c>
 800460a:	2b02      	cmp	r3, #2
 800460c:	f2c0 808e 	blt.w	800472c <Save_EEPROM+0x974>
 8004610:	3b02      	subs	r3, #2
 8004612:	2b30      	cmp	r3, #48	; 0x30
 8004614:	f200 808a 	bhi.w	800472c <Save_EEPROM+0x974>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <Save_EEPROM+0x868>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004727 	.word	0x08004727
 8004624:	08004721 	.word	0x08004721
 8004628:	0800472d 	.word	0x0800472d
 800462c:	0800471b 	.word	0x0800471b
 8004630:	0800472d 	.word	0x0800472d
 8004634:	0800472d 	.word	0x0800472d
 8004638:	0800472d 	.word	0x0800472d
 800463c:	0800472d 	.word	0x0800472d
 8004640:	08004715 	.word	0x08004715
 8004644:	0800472d 	.word	0x0800472d
 8004648:	0800472d 	.word	0x0800472d
 800464c:	0800472d 	.word	0x0800472d
 8004650:	0800472d 	.word	0x0800472d
 8004654:	0800472d 	.word	0x0800472d
 8004658:	0800472d 	.word	0x0800472d
 800465c:	0800472d 	.word	0x0800472d
 8004660:	0800472d 	.word	0x0800472d
 8004664:	0800472d 	.word	0x0800472d
 8004668:	0800470f 	.word	0x0800470f
 800466c:	0800472d 	.word	0x0800472d
 8004670:	0800472d 	.word	0x0800472d
 8004674:	0800472d 	.word	0x0800472d
 8004678:	0800472d 	.word	0x0800472d
 800467c:	0800472d 	.word	0x0800472d
 8004680:	0800472d 	.word	0x0800472d
 8004684:	0800472d 	.word	0x0800472d
 8004688:	0800472d 	.word	0x0800472d
 800468c:	0800472d 	.word	0x0800472d
 8004690:	0800472d 	.word	0x0800472d
 8004694:	0800472d 	.word	0x0800472d
 8004698:	0800472d 	.word	0x0800472d
 800469c:	0800472d 	.word	0x0800472d
 80046a0:	0800472d 	.word	0x0800472d
 80046a4:	0800472d 	.word	0x0800472d
 80046a8:	0800472d 	.word	0x0800472d
 80046ac:	0800472d 	.word	0x0800472d
 80046b0:	0800472d 	.word	0x0800472d
 80046b4:	0800472d 	.word	0x0800472d
 80046b8:	08004709 	.word	0x08004709
 80046bc:	0800472d 	.word	0x0800472d
 80046c0:	0800472d 	.word	0x0800472d
 80046c4:	0800472d 	.word	0x0800472d
 80046c8:	0800472d 	.word	0x0800472d
 80046cc:	0800472d 	.word	0x0800472d
 80046d0:	0800472d 	.word	0x0800472d
 80046d4:	0800472d 	.word	0x0800472d
 80046d8:	0800472d 	.word	0x0800472d
 80046dc:	0800472d 	.word	0x0800472d
 80046e0:	08004703 	.word	0x08004703
 80046e4:	2b64      	cmp	r3, #100	; 0x64
 80046e6:	d009      	beq.n	80046fc <Save_EEPROM+0x944>
 80046e8:	e020      	b.n	800472c <Save_EEPROM+0x974>
 80046ea:	2301      	movs	r3, #1
 80046ec:	74bb      	strb	r3, [r7, #18]
 80046ee:	e01f      	b.n	8004730 <Save_EEPROM+0x978>
 80046f0:	2302      	movs	r3, #2
 80046f2:	74bb      	strb	r3, [r7, #18]
 80046f4:	e01c      	b.n	8004730 <Save_EEPROM+0x978>
 80046f6:	2303      	movs	r3, #3
 80046f8:	74bb      	strb	r3, [r7, #18]
 80046fa:	e019      	b.n	8004730 <Save_EEPROM+0x978>
 80046fc:	2304      	movs	r3, #4
 80046fe:	74bb      	strb	r3, [r7, #18]
 8004700:	e016      	b.n	8004730 <Save_EEPROM+0x978>
 8004702:	2305      	movs	r3, #5
 8004704:	74bb      	strb	r3, [r7, #18]
 8004706:	e013      	b.n	8004730 <Save_EEPROM+0x978>
 8004708:	2306      	movs	r3, #6
 800470a:	74bb      	strb	r3, [r7, #18]
 800470c:	e010      	b.n	8004730 <Save_EEPROM+0x978>
 800470e:	2307      	movs	r3, #7
 8004710:	74bb      	strb	r3, [r7, #18]
 8004712:	e00d      	b.n	8004730 <Save_EEPROM+0x978>
 8004714:	2308      	movs	r3, #8
 8004716:	74bb      	strb	r3, [r7, #18]
 8004718:	e00a      	b.n	8004730 <Save_EEPROM+0x978>
 800471a:	2309      	movs	r3, #9
 800471c:	74bb      	strb	r3, [r7, #18]
 800471e:	e007      	b.n	8004730 <Save_EEPROM+0x978>
 8004720:	230a      	movs	r3, #10
 8004722:	74bb      	strb	r3, [r7, #18]
 8004724:	e004      	b.n	8004730 <Save_EEPROM+0x978>
 8004726:	230b      	movs	r3, #11
 8004728:	74bb      	strb	r3, [r7, #18]
 800472a:	e001      	b.n	8004730 <Save_EEPROM+0x978>
 800472c:	2300      	movs	r3, #0
 800472e:	74bb      	strb	r3, [r7, #18]
 8004730:	bf00      	nop

	__SAVE_FREQ(buffer[7], Per_CAN[Analog_1_4]);
 8004732:	4b55      	ldr	r3, [pc, #340]	; (8004888 <Save_EEPROM+0xad0>)
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800473a:	f000 8082 	beq.w	8004842 <Save_EEPROM+0xa8a>
 800473e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004742:	f300 80a3 	bgt.w	800488c <Save_EEPROM+0xad4>
 8004746:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800474a:	d07d      	beq.n	8004848 <Save_EEPROM+0xa90>
 800474c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004750:	f300 809c 	bgt.w	800488c <Save_EEPROM+0xad4>
 8004754:	2bc8      	cmp	r3, #200	; 0xc8
 8004756:	d07a      	beq.n	800484e <Save_EEPROM+0xa96>
 8004758:	2bc8      	cmp	r3, #200	; 0xc8
 800475a:	f300 8097 	bgt.w	800488c <Save_EEPROM+0xad4>
 800475e:	2b32      	cmp	r3, #50	; 0x32
 8004760:	dc6c      	bgt.n	800483c <Save_EEPROM+0xa84>
 8004762:	2b02      	cmp	r3, #2
 8004764:	f2c0 8092 	blt.w	800488c <Save_EEPROM+0xad4>
 8004768:	3b02      	subs	r3, #2
 800476a:	2b30      	cmp	r3, #48	; 0x30
 800476c:	f200 808e 	bhi.w	800488c <Save_EEPROM+0xad4>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <Save_EEPROM+0x9c0>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	0800487f 	.word	0x0800487f
 800477c:	08004879 	.word	0x08004879
 8004780:	0800488d 	.word	0x0800488d
 8004784:	08004873 	.word	0x08004873
 8004788:	0800488d 	.word	0x0800488d
 800478c:	0800488d 	.word	0x0800488d
 8004790:	0800488d 	.word	0x0800488d
 8004794:	0800488d 	.word	0x0800488d
 8004798:	0800486d 	.word	0x0800486d
 800479c:	0800488d 	.word	0x0800488d
 80047a0:	0800488d 	.word	0x0800488d
 80047a4:	0800488d 	.word	0x0800488d
 80047a8:	0800488d 	.word	0x0800488d
 80047ac:	0800488d 	.word	0x0800488d
 80047b0:	0800488d 	.word	0x0800488d
 80047b4:	0800488d 	.word	0x0800488d
 80047b8:	0800488d 	.word	0x0800488d
 80047bc:	0800488d 	.word	0x0800488d
 80047c0:	08004867 	.word	0x08004867
 80047c4:	0800488d 	.word	0x0800488d
 80047c8:	0800488d 	.word	0x0800488d
 80047cc:	0800488d 	.word	0x0800488d
 80047d0:	0800488d 	.word	0x0800488d
 80047d4:	0800488d 	.word	0x0800488d
 80047d8:	0800488d 	.word	0x0800488d
 80047dc:	0800488d 	.word	0x0800488d
 80047e0:	0800488d 	.word	0x0800488d
 80047e4:	0800488d 	.word	0x0800488d
 80047e8:	0800488d 	.word	0x0800488d
 80047ec:	0800488d 	.word	0x0800488d
 80047f0:	0800488d 	.word	0x0800488d
 80047f4:	0800488d 	.word	0x0800488d
 80047f8:	0800488d 	.word	0x0800488d
 80047fc:	0800488d 	.word	0x0800488d
 8004800:	0800488d 	.word	0x0800488d
 8004804:	0800488d 	.word	0x0800488d
 8004808:	0800488d 	.word	0x0800488d
 800480c:	0800488d 	.word	0x0800488d
 8004810:	08004861 	.word	0x08004861
 8004814:	0800488d 	.word	0x0800488d
 8004818:	0800488d 	.word	0x0800488d
 800481c:	0800488d 	.word	0x0800488d
 8004820:	0800488d 	.word	0x0800488d
 8004824:	0800488d 	.word	0x0800488d
 8004828:	0800488d 	.word	0x0800488d
 800482c:	0800488d 	.word	0x0800488d
 8004830:	0800488d 	.word	0x0800488d
 8004834:	0800488d 	.word	0x0800488d
 8004838:	0800485b 	.word	0x0800485b
 800483c:	2b64      	cmp	r3, #100	; 0x64
 800483e:	d009      	beq.n	8004854 <Save_EEPROM+0xa9c>
 8004840:	e024      	b.n	800488c <Save_EEPROM+0xad4>
 8004842:	2301      	movs	r3, #1
 8004844:	74fb      	strb	r3, [r7, #19]
 8004846:	e023      	b.n	8004890 <Save_EEPROM+0xad8>
 8004848:	2302      	movs	r3, #2
 800484a:	74fb      	strb	r3, [r7, #19]
 800484c:	e020      	b.n	8004890 <Save_EEPROM+0xad8>
 800484e:	2303      	movs	r3, #3
 8004850:	74fb      	strb	r3, [r7, #19]
 8004852:	e01d      	b.n	8004890 <Save_EEPROM+0xad8>
 8004854:	2304      	movs	r3, #4
 8004856:	74fb      	strb	r3, [r7, #19]
 8004858:	e01a      	b.n	8004890 <Save_EEPROM+0xad8>
 800485a:	2305      	movs	r3, #5
 800485c:	74fb      	strb	r3, [r7, #19]
 800485e:	e017      	b.n	8004890 <Save_EEPROM+0xad8>
 8004860:	2306      	movs	r3, #6
 8004862:	74fb      	strb	r3, [r7, #19]
 8004864:	e014      	b.n	8004890 <Save_EEPROM+0xad8>
 8004866:	2307      	movs	r3, #7
 8004868:	74fb      	strb	r3, [r7, #19]
 800486a:	e011      	b.n	8004890 <Save_EEPROM+0xad8>
 800486c:	2308      	movs	r3, #8
 800486e:	74fb      	strb	r3, [r7, #19]
 8004870:	e00e      	b.n	8004890 <Save_EEPROM+0xad8>
 8004872:	2309      	movs	r3, #9
 8004874:	74fb      	strb	r3, [r7, #19]
 8004876:	e00b      	b.n	8004890 <Save_EEPROM+0xad8>
 8004878:	230a      	movs	r3, #10
 800487a:	74fb      	strb	r3, [r7, #19]
 800487c:	e008      	b.n	8004890 <Save_EEPROM+0xad8>
 800487e:	230b      	movs	r3, #11
 8004880:	74fb      	strb	r3, [r7, #19]
 8004882:	e005      	b.n	8004890 <Save_EEPROM+0xad8>
 8004884:	20002e78 	.word	0x20002e78
 8004888:	200006fc 	.word	0x200006fc
 800488c:	2300      	movs	r3, #0
 800488e:	74fb      	strb	r3, [r7, #19]
 8004890:	bf00      	nop
	__SAVE_FREQ(buffer[8], Per_CAN[Analog_5_8]);
 8004892:	4baa      	ldr	r3, [pc, #680]	; (8004b3c <Save_EEPROM+0xd84>)
 8004894:	885b      	ldrh	r3, [r3, #2]
 8004896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800489a:	f000 8082 	beq.w	80049a2 <Save_EEPROM+0xbea>
 800489e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048a2:	f300 809f 	bgt.w	80049e4 <Save_EEPROM+0xc2c>
 80048a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048aa:	d07d      	beq.n	80049a8 <Save_EEPROM+0xbf0>
 80048ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048b0:	f300 8098 	bgt.w	80049e4 <Save_EEPROM+0xc2c>
 80048b4:	2bc8      	cmp	r3, #200	; 0xc8
 80048b6:	d07a      	beq.n	80049ae <Save_EEPROM+0xbf6>
 80048b8:	2bc8      	cmp	r3, #200	; 0xc8
 80048ba:	f300 8093 	bgt.w	80049e4 <Save_EEPROM+0xc2c>
 80048be:	2b32      	cmp	r3, #50	; 0x32
 80048c0:	dc6c      	bgt.n	800499c <Save_EEPROM+0xbe4>
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	f2c0 808e 	blt.w	80049e4 <Save_EEPROM+0xc2c>
 80048c8:	3b02      	subs	r3, #2
 80048ca:	2b30      	cmp	r3, #48	; 0x30
 80048cc:	f200 808a 	bhi.w	80049e4 <Save_EEPROM+0xc2c>
 80048d0:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <Save_EEPROM+0xb20>)
 80048d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d6:	bf00      	nop
 80048d8:	080049df 	.word	0x080049df
 80048dc:	080049d9 	.word	0x080049d9
 80048e0:	080049e5 	.word	0x080049e5
 80048e4:	080049d3 	.word	0x080049d3
 80048e8:	080049e5 	.word	0x080049e5
 80048ec:	080049e5 	.word	0x080049e5
 80048f0:	080049e5 	.word	0x080049e5
 80048f4:	080049e5 	.word	0x080049e5
 80048f8:	080049cd 	.word	0x080049cd
 80048fc:	080049e5 	.word	0x080049e5
 8004900:	080049e5 	.word	0x080049e5
 8004904:	080049e5 	.word	0x080049e5
 8004908:	080049e5 	.word	0x080049e5
 800490c:	080049e5 	.word	0x080049e5
 8004910:	080049e5 	.word	0x080049e5
 8004914:	080049e5 	.word	0x080049e5
 8004918:	080049e5 	.word	0x080049e5
 800491c:	080049e5 	.word	0x080049e5
 8004920:	080049c7 	.word	0x080049c7
 8004924:	080049e5 	.word	0x080049e5
 8004928:	080049e5 	.word	0x080049e5
 800492c:	080049e5 	.word	0x080049e5
 8004930:	080049e5 	.word	0x080049e5
 8004934:	080049e5 	.word	0x080049e5
 8004938:	080049e5 	.word	0x080049e5
 800493c:	080049e5 	.word	0x080049e5
 8004940:	080049e5 	.word	0x080049e5
 8004944:	080049e5 	.word	0x080049e5
 8004948:	080049e5 	.word	0x080049e5
 800494c:	080049e5 	.word	0x080049e5
 8004950:	080049e5 	.word	0x080049e5
 8004954:	080049e5 	.word	0x080049e5
 8004958:	080049e5 	.word	0x080049e5
 800495c:	080049e5 	.word	0x080049e5
 8004960:	080049e5 	.word	0x080049e5
 8004964:	080049e5 	.word	0x080049e5
 8004968:	080049e5 	.word	0x080049e5
 800496c:	080049e5 	.word	0x080049e5
 8004970:	080049c1 	.word	0x080049c1
 8004974:	080049e5 	.word	0x080049e5
 8004978:	080049e5 	.word	0x080049e5
 800497c:	080049e5 	.word	0x080049e5
 8004980:	080049e5 	.word	0x080049e5
 8004984:	080049e5 	.word	0x080049e5
 8004988:	080049e5 	.word	0x080049e5
 800498c:	080049e5 	.word	0x080049e5
 8004990:	080049e5 	.word	0x080049e5
 8004994:	080049e5 	.word	0x080049e5
 8004998:	080049bb 	.word	0x080049bb
 800499c:	2b64      	cmp	r3, #100	; 0x64
 800499e:	d009      	beq.n	80049b4 <Save_EEPROM+0xbfc>
 80049a0:	e020      	b.n	80049e4 <Save_EEPROM+0xc2c>
 80049a2:	2301      	movs	r3, #1
 80049a4:	753b      	strb	r3, [r7, #20]
 80049a6:	e01f      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049a8:	2302      	movs	r3, #2
 80049aa:	753b      	strb	r3, [r7, #20]
 80049ac:	e01c      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049ae:	2303      	movs	r3, #3
 80049b0:	753b      	strb	r3, [r7, #20]
 80049b2:	e019      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049b4:	2304      	movs	r3, #4
 80049b6:	753b      	strb	r3, [r7, #20]
 80049b8:	e016      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049ba:	2305      	movs	r3, #5
 80049bc:	753b      	strb	r3, [r7, #20]
 80049be:	e013      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049c0:	2306      	movs	r3, #6
 80049c2:	753b      	strb	r3, [r7, #20]
 80049c4:	e010      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049c6:	2307      	movs	r3, #7
 80049c8:	753b      	strb	r3, [r7, #20]
 80049ca:	e00d      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049cc:	2308      	movs	r3, #8
 80049ce:	753b      	strb	r3, [r7, #20]
 80049d0:	e00a      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049d2:	2309      	movs	r3, #9
 80049d4:	753b      	strb	r3, [r7, #20]
 80049d6:	e007      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049d8:	230a      	movs	r3, #10
 80049da:	753b      	strb	r3, [r7, #20]
 80049dc:	e004      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049de:	230b      	movs	r3, #11
 80049e0:	753b      	strb	r3, [r7, #20]
 80049e2:	e001      	b.n	80049e8 <Save_EEPROM+0xc30>
 80049e4:	2300      	movs	r3, #0
 80049e6:	753b      	strb	r3, [r7, #20]
 80049e8:	bf00      	nop
	__SAVE_FREQ(buffer[9], Per_CAN[Analog_9_12]);
 80049ea:	4b54      	ldr	r3, [pc, #336]	; (8004b3c <Save_EEPROM+0xd84>)
 80049ec:	889b      	ldrh	r3, [r3, #4]
 80049ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049f2:	f000 8082 	beq.w	8004afa <Save_EEPROM+0xd42>
 80049f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049fa:	f300 80a1 	bgt.w	8004b40 <Save_EEPROM+0xd88>
 80049fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a02:	d07d      	beq.n	8004b00 <Save_EEPROM+0xd48>
 8004a04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a08:	f300 809a 	bgt.w	8004b40 <Save_EEPROM+0xd88>
 8004a0c:	2bc8      	cmp	r3, #200	; 0xc8
 8004a0e:	d07a      	beq.n	8004b06 <Save_EEPROM+0xd4e>
 8004a10:	2bc8      	cmp	r3, #200	; 0xc8
 8004a12:	f300 8095 	bgt.w	8004b40 <Save_EEPROM+0xd88>
 8004a16:	2b32      	cmp	r3, #50	; 0x32
 8004a18:	dc6c      	bgt.n	8004af4 <Save_EEPROM+0xd3c>
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	f2c0 8090 	blt.w	8004b40 <Save_EEPROM+0xd88>
 8004a20:	3b02      	subs	r3, #2
 8004a22:	2b30      	cmp	r3, #48	; 0x30
 8004a24:	f200 808c 	bhi.w	8004b40 <Save_EEPROM+0xd88>
 8004a28:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <Save_EEPROM+0xc78>)
 8004a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2e:	bf00      	nop
 8004a30:	08004b37 	.word	0x08004b37
 8004a34:	08004b31 	.word	0x08004b31
 8004a38:	08004b41 	.word	0x08004b41
 8004a3c:	08004b2b 	.word	0x08004b2b
 8004a40:	08004b41 	.word	0x08004b41
 8004a44:	08004b41 	.word	0x08004b41
 8004a48:	08004b41 	.word	0x08004b41
 8004a4c:	08004b41 	.word	0x08004b41
 8004a50:	08004b25 	.word	0x08004b25
 8004a54:	08004b41 	.word	0x08004b41
 8004a58:	08004b41 	.word	0x08004b41
 8004a5c:	08004b41 	.word	0x08004b41
 8004a60:	08004b41 	.word	0x08004b41
 8004a64:	08004b41 	.word	0x08004b41
 8004a68:	08004b41 	.word	0x08004b41
 8004a6c:	08004b41 	.word	0x08004b41
 8004a70:	08004b41 	.word	0x08004b41
 8004a74:	08004b41 	.word	0x08004b41
 8004a78:	08004b1f 	.word	0x08004b1f
 8004a7c:	08004b41 	.word	0x08004b41
 8004a80:	08004b41 	.word	0x08004b41
 8004a84:	08004b41 	.word	0x08004b41
 8004a88:	08004b41 	.word	0x08004b41
 8004a8c:	08004b41 	.word	0x08004b41
 8004a90:	08004b41 	.word	0x08004b41
 8004a94:	08004b41 	.word	0x08004b41
 8004a98:	08004b41 	.word	0x08004b41
 8004a9c:	08004b41 	.word	0x08004b41
 8004aa0:	08004b41 	.word	0x08004b41
 8004aa4:	08004b41 	.word	0x08004b41
 8004aa8:	08004b41 	.word	0x08004b41
 8004aac:	08004b41 	.word	0x08004b41
 8004ab0:	08004b41 	.word	0x08004b41
 8004ab4:	08004b41 	.word	0x08004b41
 8004ab8:	08004b41 	.word	0x08004b41
 8004abc:	08004b41 	.word	0x08004b41
 8004ac0:	08004b41 	.word	0x08004b41
 8004ac4:	08004b41 	.word	0x08004b41
 8004ac8:	08004b19 	.word	0x08004b19
 8004acc:	08004b41 	.word	0x08004b41
 8004ad0:	08004b41 	.word	0x08004b41
 8004ad4:	08004b41 	.word	0x08004b41
 8004ad8:	08004b41 	.word	0x08004b41
 8004adc:	08004b41 	.word	0x08004b41
 8004ae0:	08004b41 	.word	0x08004b41
 8004ae4:	08004b41 	.word	0x08004b41
 8004ae8:	08004b41 	.word	0x08004b41
 8004aec:	08004b41 	.word	0x08004b41
 8004af0:	08004b13 	.word	0x08004b13
 8004af4:	2b64      	cmp	r3, #100	; 0x64
 8004af6:	d009      	beq.n	8004b0c <Save_EEPROM+0xd54>
 8004af8:	e022      	b.n	8004b40 <Save_EEPROM+0xd88>
 8004afa:	2301      	movs	r3, #1
 8004afc:	757b      	strb	r3, [r7, #21]
 8004afe:	e021      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b00:	2302      	movs	r3, #2
 8004b02:	757b      	strb	r3, [r7, #21]
 8004b04:	e01e      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b06:	2303      	movs	r3, #3
 8004b08:	757b      	strb	r3, [r7, #21]
 8004b0a:	e01b      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	757b      	strb	r3, [r7, #21]
 8004b10:	e018      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b12:	2305      	movs	r3, #5
 8004b14:	757b      	strb	r3, [r7, #21]
 8004b16:	e015      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b18:	2306      	movs	r3, #6
 8004b1a:	757b      	strb	r3, [r7, #21]
 8004b1c:	e012      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b1e:	2307      	movs	r3, #7
 8004b20:	757b      	strb	r3, [r7, #21]
 8004b22:	e00f      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b24:	2308      	movs	r3, #8
 8004b26:	757b      	strb	r3, [r7, #21]
 8004b28:	e00c      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b2a:	2309      	movs	r3, #9
 8004b2c:	757b      	strb	r3, [r7, #21]
 8004b2e:	e009      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b30:	230a      	movs	r3, #10
 8004b32:	757b      	strb	r3, [r7, #21]
 8004b34:	e006      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b36:	230b      	movs	r3, #11
 8004b38:	757b      	strb	r3, [r7, #21]
 8004b3a:	e003      	b.n	8004b44 <Save_EEPROM+0xd8c>
 8004b3c:	200006fc 	.word	0x200006fc
 8004b40:	2300      	movs	r3, #0
 8004b42:	757b      	strb	r3, [r7, #21]
 8004b44:	bf00      	nop
	__SAVE_FREQ(buffer[10], Per_CAN[RTC_Msg]);
 8004b46:	4b5e      	ldr	r3, [pc, #376]	; (8004cc0 <Save_EEPROM+0xf08>)
 8004b48:	88db      	ldrh	r3, [r3, #6]
 8004b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b4e:	f000 8082 	beq.w	8004c56 <Save_EEPROM+0xe9e>
 8004b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b56:	f300 809f 	bgt.w	8004c98 <Save_EEPROM+0xee0>
 8004b5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b5e:	d07d      	beq.n	8004c5c <Save_EEPROM+0xea4>
 8004b60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b64:	f300 8098 	bgt.w	8004c98 <Save_EEPROM+0xee0>
 8004b68:	2bc8      	cmp	r3, #200	; 0xc8
 8004b6a:	d07a      	beq.n	8004c62 <Save_EEPROM+0xeaa>
 8004b6c:	2bc8      	cmp	r3, #200	; 0xc8
 8004b6e:	f300 8093 	bgt.w	8004c98 <Save_EEPROM+0xee0>
 8004b72:	2b32      	cmp	r3, #50	; 0x32
 8004b74:	dc6c      	bgt.n	8004c50 <Save_EEPROM+0xe98>
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	f2c0 808e 	blt.w	8004c98 <Save_EEPROM+0xee0>
 8004b7c:	3b02      	subs	r3, #2
 8004b7e:	2b30      	cmp	r3, #48	; 0x30
 8004b80:	f200 808a 	bhi.w	8004c98 <Save_EEPROM+0xee0>
 8004b84:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <Save_EEPROM+0xdd4>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004c93 	.word	0x08004c93
 8004b90:	08004c8d 	.word	0x08004c8d
 8004b94:	08004c99 	.word	0x08004c99
 8004b98:	08004c87 	.word	0x08004c87
 8004b9c:	08004c99 	.word	0x08004c99
 8004ba0:	08004c99 	.word	0x08004c99
 8004ba4:	08004c99 	.word	0x08004c99
 8004ba8:	08004c99 	.word	0x08004c99
 8004bac:	08004c81 	.word	0x08004c81
 8004bb0:	08004c99 	.word	0x08004c99
 8004bb4:	08004c99 	.word	0x08004c99
 8004bb8:	08004c99 	.word	0x08004c99
 8004bbc:	08004c99 	.word	0x08004c99
 8004bc0:	08004c99 	.word	0x08004c99
 8004bc4:	08004c99 	.word	0x08004c99
 8004bc8:	08004c99 	.word	0x08004c99
 8004bcc:	08004c99 	.word	0x08004c99
 8004bd0:	08004c99 	.word	0x08004c99
 8004bd4:	08004c7b 	.word	0x08004c7b
 8004bd8:	08004c99 	.word	0x08004c99
 8004bdc:	08004c99 	.word	0x08004c99
 8004be0:	08004c99 	.word	0x08004c99
 8004be4:	08004c99 	.word	0x08004c99
 8004be8:	08004c99 	.word	0x08004c99
 8004bec:	08004c99 	.word	0x08004c99
 8004bf0:	08004c99 	.word	0x08004c99
 8004bf4:	08004c99 	.word	0x08004c99
 8004bf8:	08004c99 	.word	0x08004c99
 8004bfc:	08004c99 	.word	0x08004c99
 8004c00:	08004c99 	.word	0x08004c99
 8004c04:	08004c99 	.word	0x08004c99
 8004c08:	08004c99 	.word	0x08004c99
 8004c0c:	08004c99 	.word	0x08004c99
 8004c10:	08004c99 	.word	0x08004c99
 8004c14:	08004c99 	.word	0x08004c99
 8004c18:	08004c99 	.word	0x08004c99
 8004c1c:	08004c99 	.word	0x08004c99
 8004c20:	08004c99 	.word	0x08004c99
 8004c24:	08004c75 	.word	0x08004c75
 8004c28:	08004c99 	.word	0x08004c99
 8004c2c:	08004c99 	.word	0x08004c99
 8004c30:	08004c99 	.word	0x08004c99
 8004c34:	08004c99 	.word	0x08004c99
 8004c38:	08004c99 	.word	0x08004c99
 8004c3c:	08004c99 	.word	0x08004c99
 8004c40:	08004c99 	.word	0x08004c99
 8004c44:	08004c99 	.word	0x08004c99
 8004c48:	08004c99 	.word	0x08004c99
 8004c4c:	08004c6f 	.word	0x08004c6f
 8004c50:	2b64      	cmp	r3, #100	; 0x64
 8004c52:	d009      	beq.n	8004c68 <Save_EEPROM+0xeb0>
 8004c54:	e020      	b.n	8004c98 <Save_EEPROM+0xee0>
 8004c56:	2301      	movs	r3, #1
 8004c58:	75bb      	strb	r3, [r7, #22]
 8004c5a:	e01f      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	75bb      	strb	r3, [r7, #22]
 8004c60:	e01c      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c62:	2303      	movs	r3, #3
 8004c64:	75bb      	strb	r3, [r7, #22]
 8004c66:	e019      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	75bb      	strb	r3, [r7, #22]
 8004c6c:	e016      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c6e:	2305      	movs	r3, #5
 8004c70:	75bb      	strb	r3, [r7, #22]
 8004c72:	e013      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c74:	2306      	movs	r3, #6
 8004c76:	75bb      	strb	r3, [r7, #22]
 8004c78:	e010      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	75bb      	strb	r3, [r7, #22]
 8004c7e:	e00d      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c80:	2308      	movs	r3, #8
 8004c82:	75bb      	strb	r3, [r7, #22]
 8004c84:	e00a      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c86:	2309      	movs	r3, #9
 8004c88:	75bb      	strb	r3, [r7, #22]
 8004c8a:	e007      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c8c:	230a      	movs	r3, #10
 8004c8e:	75bb      	strb	r3, [r7, #22]
 8004c90:	e004      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c92:	230b      	movs	r3, #11
 8004c94:	75bb      	strb	r3, [r7, #22]
 8004c96:	e001      	b.n	8004c9c <Save_EEPROM+0xee4>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	75bb      	strb	r3, [r7, #22]
 8004c9c:	bf00      	nop

	buffer[11] = Input_Config;
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <Save_EEPROM+0xf0c>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	75fb      	strb	r3, [r7, #23]

	return HAL_I2C_Master_Transmit(hi2c, 0xA0, buffer, EEPROM_BUFFER_SIZE, 5);
 8004ca4:	f107 020c 	add.w	r2, r7, #12
 8004ca8:	2305      	movs	r3, #5
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	230b      	movs	r3, #11
 8004cae:	21a0      	movs	r1, #160	; 0xa0
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f003 fed9 	bl	8008a68 <HAL_I2C_Master_Transmit>
 8004cb6:	4603      	mov	r3, r0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	200006fc 	.word	0x200006fc
 8004cc4:	200006f8 	.word	0x200006f8

08004cc8 <Principal_Init>:

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 8004cd4:	68b8      	ldr	r0, [r7, #8]
 8004cd6:	f7fe fccf 	bl	8003678 <Load_EEPROM>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 8004ce0:	f000 fbce 	bl	8005480 <Principal_Hard_Code_Config>

	Principal_Datalogger_Init(&Fatfs_Struct);
 8004ce4:	480b      	ldr	r0, [pc, #44]	; (8004d14 <Principal_Init+0x4c>)
 8004ce6:	f000 fbe3 	bl	80054b0 <Principal_Datalogger_Init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Buffer[0], 6);
 8004cea:	2206      	movs	r2, #6
 8004cec:	490a      	ldr	r1, [pc, #40]	; (8004d18 <Principal_Init+0x50>)
 8004cee:	480b      	ldr	r0, [pc, #44]	; (8004d1c <Principal_Init+0x54>)
 8004cf0:	f001 fc58 	bl	80065a4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &ADC_Buffer[6], 6);
 8004cf4:	2206      	movs	r2, #6
 8004cf6:	490a      	ldr	r1, [pc, #40]	; (8004d20 <Principal_Init+0x58>)
 8004cf8:	480a      	ldr	r0, [pc, #40]	; (8004d24 <Principal_Init+0x5c>)
 8004cfa:	f001 fc53 	bl	80065a4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f008 febc 	bl	800da7c <HAL_TIM_Base_Start_IT>

	Principal_CAN_Start(hcan);
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7fe fc0f 	bl	8003528 <Principal_CAN_Start>
}
 8004d0a:	bf00      	nop
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	200009d4 	.word	0x200009d4
 8004d18:	20000704 	.word	0x20000704
 8004d1c:	20001a90 	.word	0x20001a90
 8004d20:	20000710 	.word	0x20000710
 8004d24:	2000071c 	.word	0x2000071c

08004d28 <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
	switch(data[0])
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <Principal_Receive_Config+0x1a>
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	f000 8241 	beq.w	80051c2 <Principal_Receive_Config+0x49a>
 8004d40:	e38f      	b.n	8005462 <Principal_Receive_Config+0x73a>
	{
		case 0:
			__LOAD_FREQ(data[1], Per_Msg[Analog_1_4]);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	3301      	adds	r3, #1
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	2b0a      	cmp	r3, #10
 8004d4c:	d846      	bhi.n	8004ddc <Principal_Receive_Config+0xb4>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <Principal_Receive_Config+0x2c>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d81 	.word	0x08004d81
 8004d58:	08004d8b 	.word	0x08004d8b
 8004d5c:	08004d95 	.word	0x08004d95
 8004d60:	08004d9d 	.word	0x08004d9d
 8004d64:	08004da5 	.word	0x08004da5
 8004d68:	08004dad 	.word	0x08004dad
 8004d6c:	08004db5 	.word	0x08004db5
 8004d70:	08004dbd 	.word	0x08004dbd
 8004d74:	08004dc5 	.word	0x08004dc5
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004dd5 	.word	0x08004dd5
 8004d80:	4ba8      	ldr	r3, [pc, #672]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d86:	801a      	strh	r2, [r3, #0]
 8004d88:	e02b      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004d8a:	4ba6      	ldr	r3, [pc, #664]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004d8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d90:	801a      	strh	r2, [r3, #0]
 8004d92:	e026      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004d94:	4ba3      	ldr	r3, [pc, #652]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004d96:	22c8      	movs	r2, #200	; 0xc8
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	e022      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004d9c:	4ba1      	ldr	r3, [pc, #644]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004d9e:	2264      	movs	r2, #100	; 0x64
 8004da0:	801a      	strh	r2, [r3, #0]
 8004da2:	e01e      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004da4:	4b9f      	ldr	r3, [pc, #636]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004da6:	2232      	movs	r2, #50	; 0x32
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	e01a      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004dac:	4b9d      	ldr	r3, [pc, #628]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004dae:	2228      	movs	r2, #40	; 0x28
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	e016      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004db4:	4b9b      	ldr	r3, [pc, #620]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004db6:	2214      	movs	r2, #20
 8004db8:	801a      	strh	r2, [r3, #0]
 8004dba:	e012      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004dbc:	4b99      	ldr	r3, [pc, #612]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004dbe:	220a      	movs	r2, #10
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	e00e      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004dc4:	4b97      	ldr	r3, [pc, #604]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004dc6:	2205      	movs	r2, #5
 8004dc8:	801a      	strh	r2, [r3, #0]
 8004dca:	e00a      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004dcc:	4b95      	ldr	r3, [pc, #596]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004dce:	2203      	movs	r2, #3
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	e006      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004dd4:	4b93      	ldr	r3, [pc, #588]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	e002      	b.n	8004de2 <Principal_Receive_Config+0xba>
 8004ddc:	4b91      	ldr	r3, [pc, #580]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	bf00      	nop
			__LOAD_FREQ(data[2], Per_Msg[Analog_5_8]);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	3302      	adds	r3, #2
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	2b0a      	cmp	r3, #10
 8004dee:	d847      	bhi.n	8004e80 <Principal_Receive_Config+0x158>
 8004df0:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <Principal_Receive_Config+0xd0>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e25 	.word	0x08004e25
 8004dfc:	08004e2f 	.word	0x08004e2f
 8004e00:	08004e39 	.word	0x08004e39
 8004e04:	08004e41 	.word	0x08004e41
 8004e08:	08004e49 	.word	0x08004e49
 8004e0c:	08004e51 	.word	0x08004e51
 8004e10:	08004e59 	.word	0x08004e59
 8004e14:	08004e61 	.word	0x08004e61
 8004e18:	08004e69 	.word	0x08004e69
 8004e1c:	08004e71 	.word	0x08004e71
 8004e20:	08004e79 	.word	0x08004e79
 8004e24:	4b7f      	ldr	r3, [pc, #508]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e2a:	805a      	strh	r2, [r3, #2]
 8004e2c:	e02b      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e2e:	4b7d      	ldr	r3, [pc, #500]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e34:	805a      	strh	r2, [r3, #2]
 8004e36:	e026      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e38:	4b7a      	ldr	r3, [pc, #488]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e3a:	22c8      	movs	r2, #200	; 0xc8
 8004e3c:	805a      	strh	r2, [r3, #2]
 8004e3e:	e022      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e40:	4b78      	ldr	r3, [pc, #480]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e42:	2264      	movs	r2, #100	; 0x64
 8004e44:	805a      	strh	r2, [r3, #2]
 8004e46:	e01e      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e48:	4b76      	ldr	r3, [pc, #472]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e4a:	2232      	movs	r2, #50	; 0x32
 8004e4c:	805a      	strh	r2, [r3, #2]
 8004e4e:	e01a      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e50:	4b74      	ldr	r3, [pc, #464]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e52:	2228      	movs	r2, #40	; 0x28
 8004e54:	805a      	strh	r2, [r3, #2]
 8004e56:	e016      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e58:	4b72      	ldr	r3, [pc, #456]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e5a:	2214      	movs	r2, #20
 8004e5c:	805a      	strh	r2, [r3, #2]
 8004e5e:	e012      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e60:	4b70      	ldr	r3, [pc, #448]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e62:	220a      	movs	r2, #10
 8004e64:	805a      	strh	r2, [r3, #2]
 8004e66:	e00e      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e68:	4b6e      	ldr	r3, [pc, #440]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e6a:	2205      	movs	r2, #5
 8004e6c:	805a      	strh	r2, [r3, #2]
 8004e6e:	e00a      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e70:	4b6c      	ldr	r3, [pc, #432]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e72:	2203      	movs	r2, #3
 8004e74:	805a      	strh	r2, [r3, #2]
 8004e76:	e006      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e78:	4b6a      	ldr	r3, [pc, #424]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	805a      	strh	r2, [r3, #2]
 8004e7e:	e002      	b.n	8004e86 <Principal_Receive_Config+0x15e>
 8004e80:	4b68      	ldr	r3, [pc, #416]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	805a      	strh	r2, [r3, #2]
 8004e86:	bf00      	nop
			__LOAD_FREQ(data[3], Per_Msg[Analog_9_12]);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	3303      	adds	r3, #3
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	2b0a      	cmp	r3, #10
 8004e92:	d847      	bhi.n	8004f24 <Principal_Receive_Config+0x1fc>
 8004e94:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <Principal_Receive_Config+0x174>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ec9 	.word	0x08004ec9
 8004ea0:	08004ed3 	.word	0x08004ed3
 8004ea4:	08004edd 	.word	0x08004edd
 8004ea8:	08004ee5 	.word	0x08004ee5
 8004eac:	08004eed 	.word	0x08004eed
 8004eb0:	08004ef5 	.word	0x08004ef5
 8004eb4:	08004efd 	.word	0x08004efd
 8004eb8:	08004f05 	.word	0x08004f05
 8004ebc:	08004f0d 	.word	0x08004f0d
 8004ec0:	08004f15 	.word	0x08004f15
 8004ec4:	08004f1d 	.word	0x08004f1d
 8004ec8:	4b56      	ldr	r3, [pc, #344]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ece:	809a      	strh	r2, [r3, #4]
 8004ed0:	e02b      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004ed2:	4b54      	ldr	r3, [pc, #336]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004ed4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004ed8:	809a      	strh	r2, [r3, #4]
 8004eda:	e026      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004edc:	4b51      	ldr	r3, [pc, #324]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004ede:	22c8      	movs	r2, #200	; 0xc8
 8004ee0:	809a      	strh	r2, [r3, #4]
 8004ee2:	e022      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004ee4:	4b4f      	ldr	r3, [pc, #316]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004ee6:	2264      	movs	r2, #100	; 0x64
 8004ee8:	809a      	strh	r2, [r3, #4]
 8004eea:	e01e      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004eec:	4b4d      	ldr	r3, [pc, #308]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004eee:	2232      	movs	r2, #50	; 0x32
 8004ef0:	809a      	strh	r2, [r3, #4]
 8004ef2:	e01a      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004ef4:	4b4b      	ldr	r3, [pc, #300]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004ef6:	2228      	movs	r2, #40	; 0x28
 8004ef8:	809a      	strh	r2, [r3, #4]
 8004efa:	e016      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004efc:	4b49      	ldr	r3, [pc, #292]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004efe:	2214      	movs	r2, #20
 8004f00:	809a      	strh	r2, [r3, #4]
 8004f02:	e012      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004f04:	4b47      	ldr	r3, [pc, #284]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f06:	220a      	movs	r2, #10
 8004f08:	809a      	strh	r2, [r3, #4]
 8004f0a:	e00e      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004f0c:	4b45      	ldr	r3, [pc, #276]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f0e:	2205      	movs	r2, #5
 8004f10:	809a      	strh	r2, [r3, #4]
 8004f12:	e00a      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004f14:	4b43      	ldr	r3, [pc, #268]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f16:	2203      	movs	r2, #3
 8004f18:	809a      	strh	r2, [r3, #4]
 8004f1a:	e006      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004f1c:	4b41      	ldr	r3, [pc, #260]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f1e:	2202      	movs	r2, #2
 8004f20:	809a      	strh	r2, [r3, #4]
 8004f22:	e002      	b.n	8004f2a <Principal_Receive_Config+0x202>
 8004f24:	4b3f      	ldr	r3, [pc, #252]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	809a      	strh	r2, [r3, #4]
 8004f2a:	bf00      	nop
			__LOAD_FREQ(data[4], Per_Msg[RTC_Msg]);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	2b0a      	cmp	r3, #10
 8004f36:	d847      	bhi.n	8004fc8 <Principal_Receive_Config+0x2a0>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <Principal_Receive_Config+0x218>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	08004f77 	.word	0x08004f77
 8004f48:	08004f81 	.word	0x08004f81
 8004f4c:	08004f89 	.word	0x08004f89
 8004f50:	08004f91 	.word	0x08004f91
 8004f54:	08004f99 	.word	0x08004f99
 8004f58:	08004fa1 	.word	0x08004fa1
 8004f5c:	08004fa9 	.word	0x08004fa9
 8004f60:	08004fb1 	.word	0x08004fb1
 8004f64:	08004fb9 	.word	0x08004fb9
 8004f68:	08004fc1 	.word	0x08004fc1
 8004f6c:	4b2d      	ldr	r3, [pc, #180]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f72:	80da      	strh	r2, [r3, #6]
 8004f74:	e02b      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004f76:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f7c:	80da      	strh	r2, [r3, #6]
 8004f7e:	e026      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004f80:	4b28      	ldr	r3, [pc, #160]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f82:	22c8      	movs	r2, #200	; 0xc8
 8004f84:	80da      	strh	r2, [r3, #6]
 8004f86:	e022      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004f88:	4b26      	ldr	r3, [pc, #152]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f8a:	2264      	movs	r2, #100	; 0x64
 8004f8c:	80da      	strh	r2, [r3, #6]
 8004f8e:	e01e      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004f90:	4b24      	ldr	r3, [pc, #144]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f92:	2232      	movs	r2, #50	; 0x32
 8004f94:	80da      	strh	r2, [r3, #6]
 8004f96:	e01a      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004f98:	4b22      	ldr	r3, [pc, #136]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004f9a:	2228      	movs	r2, #40	; 0x28
 8004f9c:	80da      	strh	r2, [r3, #6]
 8004f9e:	e016      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004fa0:	4b20      	ldr	r3, [pc, #128]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004fa2:	2214      	movs	r2, #20
 8004fa4:	80da      	strh	r2, [r3, #6]
 8004fa6:	e012      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004faa:	220a      	movs	r2, #10
 8004fac:	80da      	strh	r2, [r3, #6]
 8004fae:	e00e      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004fb2:	2205      	movs	r2, #5
 8004fb4:	80da      	strh	r2, [r3, #6]
 8004fb6:	e00a      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004fba:	2203      	movs	r2, #3
 8004fbc:	80da      	strh	r2, [r3, #6]
 8004fbe:	e006      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004fc0:	4b18      	ldr	r3, [pc, #96]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	80da      	strh	r2, [r3, #6]
 8004fc6:	e002      	b.n	8004fce <Principal_Receive_Config+0x2a6>
 8004fc8:	4b16      	ldr	r3, [pc, #88]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	80da      	strh	r2, [r3, #6]
 8004fce:	bf00      	nop
			__LOAD_FREQ(data[5], Per_Msg[Verify_Msg]);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	3305      	adds	r3, #5
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	2b0a      	cmp	r3, #10
 8004fda:	d849      	bhi.n	8005070 <Principal_Receive_Config+0x348>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <Principal_Receive_Config+0x2bc>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08005011 	.word	0x08005011
 8004fe8:	0800501b 	.word	0x0800501b
 8004fec:	08005029 	.word	0x08005029
 8004ff0:	08005031 	.word	0x08005031
 8004ff4:	08005039 	.word	0x08005039
 8004ff8:	08005041 	.word	0x08005041
 8004ffc:	08005049 	.word	0x08005049
 8005000:	08005051 	.word	0x08005051
 8005004:	08005059 	.word	0x08005059
 8005008:	08005061 	.word	0x08005061
 800500c:	08005069 	.word	0x08005069
 8005010:	4b04      	ldr	r3, [pc, #16]	; (8005024 <Principal_Receive_Config+0x2fc>)
 8005012:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005016:	811a      	strh	r2, [r3, #8]
 8005018:	e02d      	b.n	8005076 <Principal_Receive_Config+0x34e>
 800501a:	4b02      	ldr	r3, [pc, #8]	; (8005024 <Principal_Receive_Config+0x2fc>)
 800501c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005020:	811a      	strh	r2, [r3, #8]
 8005022:	e028      	b.n	8005076 <Principal_Receive_Config+0x34e>
 8005024:	20002e78 	.word	0x20002e78
 8005028:	4ba7      	ldr	r3, [pc, #668]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 800502a:	22c8      	movs	r2, #200	; 0xc8
 800502c:	811a      	strh	r2, [r3, #8]
 800502e:	e022      	b.n	8005076 <Principal_Receive_Config+0x34e>
 8005030:	4ba5      	ldr	r3, [pc, #660]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005032:	2264      	movs	r2, #100	; 0x64
 8005034:	811a      	strh	r2, [r3, #8]
 8005036:	e01e      	b.n	8005076 <Principal_Receive_Config+0x34e>
 8005038:	4ba3      	ldr	r3, [pc, #652]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 800503a:	2232      	movs	r2, #50	; 0x32
 800503c:	811a      	strh	r2, [r3, #8]
 800503e:	e01a      	b.n	8005076 <Principal_Receive_Config+0x34e>
 8005040:	4ba1      	ldr	r3, [pc, #644]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005042:	2228      	movs	r2, #40	; 0x28
 8005044:	811a      	strh	r2, [r3, #8]
 8005046:	e016      	b.n	8005076 <Principal_Receive_Config+0x34e>
 8005048:	4b9f      	ldr	r3, [pc, #636]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 800504a:	2214      	movs	r2, #20
 800504c:	811a      	strh	r2, [r3, #8]
 800504e:	e012      	b.n	8005076 <Principal_Receive_Config+0x34e>
 8005050:	4b9d      	ldr	r3, [pc, #628]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005052:	220a      	movs	r2, #10
 8005054:	811a      	strh	r2, [r3, #8]
 8005056:	e00e      	b.n	8005076 <Principal_Receive_Config+0x34e>
 8005058:	4b9b      	ldr	r3, [pc, #620]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 800505a:	2205      	movs	r2, #5
 800505c:	811a      	strh	r2, [r3, #8]
 800505e:	e00a      	b.n	8005076 <Principal_Receive_Config+0x34e>
 8005060:	4b99      	ldr	r3, [pc, #612]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005062:	2203      	movs	r2, #3
 8005064:	811a      	strh	r2, [r3, #8]
 8005066:	e006      	b.n	8005076 <Principal_Receive_Config+0x34e>
 8005068:	4b97      	ldr	r3, [pc, #604]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 800506a:	2202      	movs	r2, #2
 800506c:	811a      	strh	r2, [r3, #8]
 800506e:	e002      	b.n	8005076 <Principal_Receive_Config+0x34e>
 8005070:	4b95      	ldr	r3, [pc, #596]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005072:	2200      	movs	r2, #0
 8005074:	811a      	strh	r2, [r3, #8]
 8005076:	bf00      	nop
			__LOAD_FREQ(data[6], Per_Msg[ECU_Save]);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	3306      	adds	r3, #6
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	3b01      	subs	r3, #1
 8005080:	2b0a      	cmp	r3, #10
 8005082:	d847      	bhi.n	8005114 <Principal_Receive_Config+0x3ec>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <Principal_Receive_Config+0x364>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	080050b9 	.word	0x080050b9
 8005090:	080050c3 	.word	0x080050c3
 8005094:	080050cd 	.word	0x080050cd
 8005098:	080050d5 	.word	0x080050d5
 800509c:	080050dd 	.word	0x080050dd
 80050a0:	080050e5 	.word	0x080050e5
 80050a4:	080050ed 	.word	0x080050ed
 80050a8:	080050f5 	.word	0x080050f5
 80050ac:	080050fd 	.word	0x080050fd
 80050b0:	08005105 	.word	0x08005105
 80050b4:	0800510d 	.word	0x0800510d
 80050b8:	4b83      	ldr	r3, [pc, #524]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80050ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050be:	815a      	strh	r2, [r3, #10]
 80050c0:	e02b      	b.n	800511a <Principal_Receive_Config+0x3f2>
 80050c2:	4b81      	ldr	r3, [pc, #516]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80050c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80050c8:	815a      	strh	r2, [r3, #10]
 80050ca:	e026      	b.n	800511a <Principal_Receive_Config+0x3f2>
 80050cc:	4b7e      	ldr	r3, [pc, #504]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80050ce:	22c8      	movs	r2, #200	; 0xc8
 80050d0:	815a      	strh	r2, [r3, #10]
 80050d2:	e022      	b.n	800511a <Principal_Receive_Config+0x3f2>
 80050d4:	4b7c      	ldr	r3, [pc, #496]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80050d6:	2264      	movs	r2, #100	; 0x64
 80050d8:	815a      	strh	r2, [r3, #10]
 80050da:	e01e      	b.n	800511a <Principal_Receive_Config+0x3f2>
 80050dc:	4b7a      	ldr	r3, [pc, #488]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80050de:	2232      	movs	r2, #50	; 0x32
 80050e0:	815a      	strh	r2, [r3, #10]
 80050e2:	e01a      	b.n	800511a <Principal_Receive_Config+0x3f2>
 80050e4:	4b78      	ldr	r3, [pc, #480]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80050e6:	2228      	movs	r2, #40	; 0x28
 80050e8:	815a      	strh	r2, [r3, #10]
 80050ea:	e016      	b.n	800511a <Principal_Receive_Config+0x3f2>
 80050ec:	4b76      	ldr	r3, [pc, #472]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80050ee:	2214      	movs	r2, #20
 80050f0:	815a      	strh	r2, [r3, #10]
 80050f2:	e012      	b.n	800511a <Principal_Receive_Config+0x3f2>
 80050f4:	4b74      	ldr	r3, [pc, #464]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80050f6:	220a      	movs	r2, #10
 80050f8:	815a      	strh	r2, [r3, #10]
 80050fa:	e00e      	b.n	800511a <Principal_Receive_Config+0x3f2>
 80050fc:	4b72      	ldr	r3, [pc, #456]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80050fe:	2205      	movs	r2, #5
 8005100:	815a      	strh	r2, [r3, #10]
 8005102:	e00a      	b.n	800511a <Principal_Receive_Config+0x3f2>
 8005104:	4b70      	ldr	r3, [pc, #448]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005106:	2203      	movs	r2, #3
 8005108:	815a      	strh	r2, [r3, #10]
 800510a:	e006      	b.n	800511a <Principal_Receive_Config+0x3f2>
 800510c:	4b6e      	ldr	r3, [pc, #440]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 800510e:	2202      	movs	r2, #2
 8005110:	815a      	strh	r2, [r3, #10]
 8005112:	e002      	b.n	800511a <Principal_Receive_Config+0x3f2>
 8005114:	4b6c      	ldr	r3, [pc, #432]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005116:	2200      	movs	r2, #0
 8005118:	815a      	strh	r2, [r3, #10]
 800511a:	bf00      	nop
			__LOAD_FREQ(data[7], Per_Msg[PDM_Save]);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	3307      	adds	r3, #7
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	3b01      	subs	r3, #1
 8005124:	2b0a      	cmp	r3, #10
 8005126:	d847      	bhi.n	80051b8 <Principal_Receive_Config+0x490>
 8005128:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <Principal_Receive_Config+0x408>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	0800515d 	.word	0x0800515d
 8005134:	08005167 	.word	0x08005167
 8005138:	08005171 	.word	0x08005171
 800513c:	08005179 	.word	0x08005179
 8005140:	08005181 	.word	0x08005181
 8005144:	08005189 	.word	0x08005189
 8005148:	08005191 	.word	0x08005191
 800514c:	08005199 	.word	0x08005199
 8005150:	080051a1 	.word	0x080051a1
 8005154:	080051a9 	.word	0x080051a9
 8005158:	080051b1 	.word	0x080051b1
 800515c:	4b5a      	ldr	r3, [pc, #360]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 800515e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005162:	819a      	strh	r2, [r3, #12]
 8005164:	e02b      	b.n	80051be <Principal_Receive_Config+0x496>
 8005166:	4b58      	ldr	r3, [pc, #352]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005168:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800516c:	819a      	strh	r2, [r3, #12]
 800516e:	e026      	b.n	80051be <Principal_Receive_Config+0x496>
 8005170:	4b55      	ldr	r3, [pc, #340]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005172:	22c8      	movs	r2, #200	; 0xc8
 8005174:	819a      	strh	r2, [r3, #12]
 8005176:	e022      	b.n	80051be <Principal_Receive_Config+0x496>
 8005178:	4b53      	ldr	r3, [pc, #332]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 800517a:	2264      	movs	r2, #100	; 0x64
 800517c:	819a      	strh	r2, [r3, #12]
 800517e:	e01e      	b.n	80051be <Principal_Receive_Config+0x496>
 8005180:	4b51      	ldr	r3, [pc, #324]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005182:	2232      	movs	r2, #50	; 0x32
 8005184:	819a      	strh	r2, [r3, #12]
 8005186:	e01a      	b.n	80051be <Principal_Receive_Config+0x496>
 8005188:	4b4f      	ldr	r3, [pc, #316]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 800518a:	2228      	movs	r2, #40	; 0x28
 800518c:	819a      	strh	r2, [r3, #12]
 800518e:	e016      	b.n	80051be <Principal_Receive_Config+0x496>
 8005190:	4b4d      	ldr	r3, [pc, #308]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 8005192:	2214      	movs	r2, #20
 8005194:	819a      	strh	r2, [r3, #12]
 8005196:	e012      	b.n	80051be <Principal_Receive_Config+0x496>
 8005198:	4b4b      	ldr	r3, [pc, #300]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 800519a:	220a      	movs	r2, #10
 800519c:	819a      	strh	r2, [r3, #12]
 800519e:	e00e      	b.n	80051be <Principal_Receive_Config+0x496>
 80051a0:	4b49      	ldr	r3, [pc, #292]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80051a2:	2205      	movs	r2, #5
 80051a4:	819a      	strh	r2, [r3, #12]
 80051a6:	e00a      	b.n	80051be <Principal_Receive_Config+0x496>
 80051a8:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80051aa:	2203      	movs	r2, #3
 80051ac:	819a      	strh	r2, [r3, #12]
 80051ae:	e006      	b.n	80051be <Principal_Receive_Config+0x496>
 80051b0:	4b45      	ldr	r3, [pc, #276]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80051b2:	2202      	movs	r2, #2
 80051b4:	819a      	strh	r2, [r3, #12]
 80051b6:	e002      	b.n	80051be <Principal_Receive_Config+0x496>
 80051b8:	4b43      	ldr	r3, [pc, #268]	; (80052c8 <Principal_Receive_Config+0x5a0>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	819a      	strh	r2, [r3, #12]
 80051be:	bf00      	nop
			break;
 80051c0:	e151      	b.n	8005466 <Principal_Receive_Config+0x73e>

		case 1:
			__LOAD_FREQ(data[1], Per_CAN[Analog_1_4]);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	3301      	adds	r3, #1
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	2b0a      	cmp	r3, #10
 80051cc:	d846      	bhi.n	800525c <Principal_Receive_Config+0x534>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <Principal_Receive_Config+0x4ac>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	08005201 	.word	0x08005201
 80051d8:	0800520b 	.word	0x0800520b
 80051dc:	08005215 	.word	0x08005215
 80051e0:	0800521d 	.word	0x0800521d
 80051e4:	08005225 	.word	0x08005225
 80051e8:	0800522d 	.word	0x0800522d
 80051ec:	08005235 	.word	0x08005235
 80051f0:	0800523d 	.word	0x0800523d
 80051f4:	08005245 	.word	0x08005245
 80051f8:	0800524d 	.word	0x0800524d
 80051fc:	08005255 	.word	0x08005255
 8005200:	4b32      	ldr	r3, [pc, #200]	; (80052cc <Principal_Receive_Config+0x5a4>)
 8005202:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005206:	801a      	strh	r2, [r3, #0]
 8005208:	e02b      	b.n	8005262 <Principal_Receive_Config+0x53a>
 800520a:	4b30      	ldr	r3, [pc, #192]	; (80052cc <Principal_Receive_Config+0x5a4>)
 800520c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	e026      	b.n	8005262 <Principal_Receive_Config+0x53a>
 8005214:	4b2d      	ldr	r3, [pc, #180]	; (80052cc <Principal_Receive_Config+0x5a4>)
 8005216:	22c8      	movs	r2, #200	; 0xc8
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	e022      	b.n	8005262 <Principal_Receive_Config+0x53a>
 800521c:	4b2b      	ldr	r3, [pc, #172]	; (80052cc <Principal_Receive_Config+0x5a4>)
 800521e:	2264      	movs	r2, #100	; 0x64
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	e01e      	b.n	8005262 <Principal_Receive_Config+0x53a>
 8005224:	4b29      	ldr	r3, [pc, #164]	; (80052cc <Principal_Receive_Config+0x5a4>)
 8005226:	2232      	movs	r2, #50	; 0x32
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	e01a      	b.n	8005262 <Principal_Receive_Config+0x53a>
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <Principal_Receive_Config+0x5a4>)
 800522e:	2228      	movs	r2, #40	; 0x28
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e016      	b.n	8005262 <Principal_Receive_Config+0x53a>
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <Principal_Receive_Config+0x5a4>)
 8005236:	2214      	movs	r2, #20
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e012      	b.n	8005262 <Principal_Receive_Config+0x53a>
 800523c:	4b23      	ldr	r3, [pc, #140]	; (80052cc <Principal_Receive_Config+0x5a4>)
 800523e:	220a      	movs	r2, #10
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	e00e      	b.n	8005262 <Principal_Receive_Config+0x53a>
 8005244:	4b21      	ldr	r3, [pc, #132]	; (80052cc <Principal_Receive_Config+0x5a4>)
 8005246:	2205      	movs	r2, #5
 8005248:	801a      	strh	r2, [r3, #0]
 800524a:	e00a      	b.n	8005262 <Principal_Receive_Config+0x53a>
 800524c:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <Principal_Receive_Config+0x5a4>)
 800524e:	2203      	movs	r2, #3
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	e006      	b.n	8005262 <Principal_Receive_Config+0x53a>
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <Principal_Receive_Config+0x5a4>)
 8005256:	2202      	movs	r2, #2
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	e002      	b.n	8005262 <Principal_Receive_Config+0x53a>
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <Principal_Receive_Config+0x5a4>)
 800525e:	2200      	movs	r2, #0
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	bf00      	nop
			__LOAD_FREQ(data[2], Per_CAN[Analog_5_8]);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	3302      	adds	r3, #2
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	3b01      	subs	r3, #1
 800526c:	2b0a      	cmp	r3, #10
 800526e:	d84b      	bhi.n	8005308 <Principal_Receive_Config+0x5e0>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <Principal_Receive_Config+0x550>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	080052a5 	.word	0x080052a5
 800527c:	080052af 	.word	0x080052af
 8005280:	080052b9 	.word	0x080052b9
 8005284:	080052c1 	.word	0x080052c1
 8005288:	080052d1 	.word	0x080052d1
 800528c:	080052d9 	.word	0x080052d9
 8005290:	080052e1 	.word	0x080052e1
 8005294:	080052e9 	.word	0x080052e9
 8005298:	080052f1 	.word	0x080052f1
 800529c:	080052f9 	.word	0x080052f9
 80052a0:	08005301 	.word	0x08005301
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <Principal_Receive_Config+0x5a4>)
 80052a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052aa:	805a      	strh	r2, [r3, #2]
 80052ac:	e02f      	b.n	800530e <Principal_Receive_Config+0x5e6>
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <Principal_Receive_Config+0x5a4>)
 80052b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80052b4:	805a      	strh	r2, [r3, #2]
 80052b6:	e02a      	b.n	800530e <Principal_Receive_Config+0x5e6>
 80052b8:	4b04      	ldr	r3, [pc, #16]	; (80052cc <Principal_Receive_Config+0x5a4>)
 80052ba:	22c8      	movs	r2, #200	; 0xc8
 80052bc:	805a      	strh	r2, [r3, #2]
 80052be:	e026      	b.n	800530e <Principal_Receive_Config+0x5e6>
 80052c0:	4b02      	ldr	r3, [pc, #8]	; (80052cc <Principal_Receive_Config+0x5a4>)
 80052c2:	2264      	movs	r2, #100	; 0x64
 80052c4:	805a      	strh	r2, [r3, #2]
 80052c6:	e022      	b.n	800530e <Principal_Receive_Config+0x5e6>
 80052c8:	20002e78 	.word	0x20002e78
 80052cc:	200006fc 	.word	0x200006fc
 80052d0:	4b69      	ldr	r3, [pc, #420]	; (8005478 <Principal_Receive_Config+0x750>)
 80052d2:	2232      	movs	r2, #50	; 0x32
 80052d4:	805a      	strh	r2, [r3, #2]
 80052d6:	e01a      	b.n	800530e <Principal_Receive_Config+0x5e6>
 80052d8:	4b67      	ldr	r3, [pc, #412]	; (8005478 <Principal_Receive_Config+0x750>)
 80052da:	2228      	movs	r2, #40	; 0x28
 80052dc:	805a      	strh	r2, [r3, #2]
 80052de:	e016      	b.n	800530e <Principal_Receive_Config+0x5e6>
 80052e0:	4b65      	ldr	r3, [pc, #404]	; (8005478 <Principal_Receive_Config+0x750>)
 80052e2:	2214      	movs	r2, #20
 80052e4:	805a      	strh	r2, [r3, #2]
 80052e6:	e012      	b.n	800530e <Principal_Receive_Config+0x5e6>
 80052e8:	4b63      	ldr	r3, [pc, #396]	; (8005478 <Principal_Receive_Config+0x750>)
 80052ea:	220a      	movs	r2, #10
 80052ec:	805a      	strh	r2, [r3, #2]
 80052ee:	e00e      	b.n	800530e <Principal_Receive_Config+0x5e6>
 80052f0:	4b61      	ldr	r3, [pc, #388]	; (8005478 <Principal_Receive_Config+0x750>)
 80052f2:	2205      	movs	r2, #5
 80052f4:	805a      	strh	r2, [r3, #2]
 80052f6:	e00a      	b.n	800530e <Principal_Receive_Config+0x5e6>
 80052f8:	4b5f      	ldr	r3, [pc, #380]	; (8005478 <Principal_Receive_Config+0x750>)
 80052fa:	2203      	movs	r2, #3
 80052fc:	805a      	strh	r2, [r3, #2]
 80052fe:	e006      	b.n	800530e <Principal_Receive_Config+0x5e6>
 8005300:	4b5d      	ldr	r3, [pc, #372]	; (8005478 <Principal_Receive_Config+0x750>)
 8005302:	2202      	movs	r2, #2
 8005304:	805a      	strh	r2, [r3, #2]
 8005306:	e002      	b.n	800530e <Principal_Receive_Config+0x5e6>
 8005308:	4b5b      	ldr	r3, [pc, #364]	; (8005478 <Principal_Receive_Config+0x750>)
 800530a:	2200      	movs	r2, #0
 800530c:	805a      	strh	r2, [r3, #2]
 800530e:	bf00      	nop
			__LOAD_FREQ(data[3], Per_CAN[Analog_9_12]);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	3303      	adds	r3, #3
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	3b01      	subs	r3, #1
 8005318:	2b0a      	cmp	r3, #10
 800531a:	d847      	bhi.n	80053ac <Principal_Receive_Config+0x684>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <Principal_Receive_Config+0x5fc>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005351 	.word	0x08005351
 8005328:	0800535b 	.word	0x0800535b
 800532c:	08005365 	.word	0x08005365
 8005330:	0800536d 	.word	0x0800536d
 8005334:	08005375 	.word	0x08005375
 8005338:	0800537d 	.word	0x0800537d
 800533c:	08005385 	.word	0x08005385
 8005340:	0800538d 	.word	0x0800538d
 8005344:	08005395 	.word	0x08005395
 8005348:	0800539d 	.word	0x0800539d
 800534c:	080053a5 	.word	0x080053a5
 8005350:	4b49      	ldr	r3, [pc, #292]	; (8005478 <Principal_Receive_Config+0x750>)
 8005352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005356:	809a      	strh	r2, [r3, #4]
 8005358:	e02b      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 800535a:	4b47      	ldr	r3, [pc, #284]	; (8005478 <Principal_Receive_Config+0x750>)
 800535c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005360:	809a      	strh	r2, [r3, #4]
 8005362:	e026      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 8005364:	4b44      	ldr	r3, [pc, #272]	; (8005478 <Principal_Receive_Config+0x750>)
 8005366:	22c8      	movs	r2, #200	; 0xc8
 8005368:	809a      	strh	r2, [r3, #4]
 800536a:	e022      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 800536c:	4b42      	ldr	r3, [pc, #264]	; (8005478 <Principal_Receive_Config+0x750>)
 800536e:	2264      	movs	r2, #100	; 0x64
 8005370:	809a      	strh	r2, [r3, #4]
 8005372:	e01e      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 8005374:	4b40      	ldr	r3, [pc, #256]	; (8005478 <Principal_Receive_Config+0x750>)
 8005376:	2232      	movs	r2, #50	; 0x32
 8005378:	809a      	strh	r2, [r3, #4]
 800537a:	e01a      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 800537c:	4b3e      	ldr	r3, [pc, #248]	; (8005478 <Principal_Receive_Config+0x750>)
 800537e:	2228      	movs	r2, #40	; 0x28
 8005380:	809a      	strh	r2, [r3, #4]
 8005382:	e016      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 8005384:	4b3c      	ldr	r3, [pc, #240]	; (8005478 <Principal_Receive_Config+0x750>)
 8005386:	2214      	movs	r2, #20
 8005388:	809a      	strh	r2, [r3, #4]
 800538a:	e012      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 800538c:	4b3a      	ldr	r3, [pc, #232]	; (8005478 <Principal_Receive_Config+0x750>)
 800538e:	220a      	movs	r2, #10
 8005390:	809a      	strh	r2, [r3, #4]
 8005392:	e00e      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 8005394:	4b38      	ldr	r3, [pc, #224]	; (8005478 <Principal_Receive_Config+0x750>)
 8005396:	2205      	movs	r2, #5
 8005398:	809a      	strh	r2, [r3, #4]
 800539a:	e00a      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 800539c:	4b36      	ldr	r3, [pc, #216]	; (8005478 <Principal_Receive_Config+0x750>)
 800539e:	2203      	movs	r2, #3
 80053a0:	809a      	strh	r2, [r3, #4]
 80053a2:	e006      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 80053a4:	4b34      	ldr	r3, [pc, #208]	; (8005478 <Principal_Receive_Config+0x750>)
 80053a6:	2202      	movs	r2, #2
 80053a8:	809a      	strh	r2, [r3, #4]
 80053aa:	e002      	b.n	80053b2 <Principal_Receive_Config+0x68a>
 80053ac:	4b32      	ldr	r3, [pc, #200]	; (8005478 <Principal_Receive_Config+0x750>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	809a      	strh	r2, [r3, #4]
 80053b2:	bf00      	nop
			__LOAD_FREQ(data[4], Per_CAN[RTC_Msg]);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	3304      	adds	r3, #4
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	2b0a      	cmp	r3, #10
 80053be:	d847      	bhi.n	8005450 <Principal_Receive_Config+0x728>
 80053c0:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <Principal_Receive_Config+0x6a0>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053f5 	.word	0x080053f5
 80053cc:	080053ff 	.word	0x080053ff
 80053d0:	08005409 	.word	0x08005409
 80053d4:	08005411 	.word	0x08005411
 80053d8:	08005419 	.word	0x08005419
 80053dc:	08005421 	.word	0x08005421
 80053e0:	08005429 	.word	0x08005429
 80053e4:	08005431 	.word	0x08005431
 80053e8:	08005439 	.word	0x08005439
 80053ec:	08005441 	.word	0x08005441
 80053f0:	08005449 	.word	0x08005449
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <Principal_Receive_Config+0x750>)
 80053f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053fa:	80da      	strh	r2, [r3, #6]
 80053fc:	e02b      	b.n	8005456 <Principal_Receive_Config+0x72e>
 80053fe:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <Principal_Receive_Config+0x750>)
 8005400:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005404:	80da      	strh	r2, [r3, #6]
 8005406:	e026      	b.n	8005456 <Principal_Receive_Config+0x72e>
 8005408:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <Principal_Receive_Config+0x750>)
 800540a:	22c8      	movs	r2, #200	; 0xc8
 800540c:	80da      	strh	r2, [r3, #6]
 800540e:	e022      	b.n	8005456 <Principal_Receive_Config+0x72e>
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <Principal_Receive_Config+0x750>)
 8005412:	2264      	movs	r2, #100	; 0x64
 8005414:	80da      	strh	r2, [r3, #6]
 8005416:	e01e      	b.n	8005456 <Principal_Receive_Config+0x72e>
 8005418:	4b17      	ldr	r3, [pc, #92]	; (8005478 <Principal_Receive_Config+0x750>)
 800541a:	2232      	movs	r2, #50	; 0x32
 800541c:	80da      	strh	r2, [r3, #6]
 800541e:	e01a      	b.n	8005456 <Principal_Receive_Config+0x72e>
 8005420:	4b15      	ldr	r3, [pc, #84]	; (8005478 <Principal_Receive_Config+0x750>)
 8005422:	2228      	movs	r2, #40	; 0x28
 8005424:	80da      	strh	r2, [r3, #6]
 8005426:	e016      	b.n	8005456 <Principal_Receive_Config+0x72e>
 8005428:	4b13      	ldr	r3, [pc, #76]	; (8005478 <Principal_Receive_Config+0x750>)
 800542a:	2214      	movs	r2, #20
 800542c:	80da      	strh	r2, [r3, #6]
 800542e:	e012      	b.n	8005456 <Principal_Receive_Config+0x72e>
 8005430:	4b11      	ldr	r3, [pc, #68]	; (8005478 <Principal_Receive_Config+0x750>)
 8005432:	220a      	movs	r2, #10
 8005434:	80da      	strh	r2, [r3, #6]
 8005436:	e00e      	b.n	8005456 <Principal_Receive_Config+0x72e>
 8005438:	4b0f      	ldr	r3, [pc, #60]	; (8005478 <Principal_Receive_Config+0x750>)
 800543a:	2205      	movs	r2, #5
 800543c:	80da      	strh	r2, [r3, #6]
 800543e:	e00a      	b.n	8005456 <Principal_Receive_Config+0x72e>
 8005440:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <Principal_Receive_Config+0x750>)
 8005442:	2203      	movs	r2, #3
 8005444:	80da      	strh	r2, [r3, #6]
 8005446:	e006      	b.n	8005456 <Principal_Receive_Config+0x72e>
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <Principal_Receive_Config+0x750>)
 800544a:	2202      	movs	r2, #2
 800544c:	80da      	strh	r2, [r3, #6]
 800544e:	e002      	b.n	8005456 <Principal_Receive_Config+0x72e>
 8005450:	4b09      	ldr	r3, [pc, #36]	; (8005478 <Principal_Receive_Config+0x750>)
 8005452:	2200      	movs	r2, #0
 8005454:	80da      	strh	r2, [r3, #6]
 8005456:	bf00      	nop
			Input_Config = data[5];
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	795a      	ldrb	r2, [r3, #5]
 800545c:	4b07      	ldr	r3, [pc, #28]	; (800547c <Principal_Receive_Config+0x754>)
 800545e:	701a      	strb	r2, [r3, #0]
			break;
 8005460:	e001      	b.n	8005466 <Principal_Receive_Config+0x73e>

		default:
			return HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	e003      	b.n	800546e <Principal_Receive_Config+0x746>
	}

	return Save_EEPROM(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fe fca6 	bl	8003db8 <Save_EEPROM>
 800546c:	4603      	mov	r3, r0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200006fc 	.word	0x200006fc
 800547c:	200006f8 	.word	0x200006f8

08005480 <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
	Per_Msg[Analog_1_4] = MSG_FREQ_20HZ;
 8005484:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <Principal_Hard_Code_Config+0x24>)
 8005486:	2232      	movs	r2, #50	; 0x32
 8005488:	801a      	strh	r2, [r3, #0]
	Threshold_RPM = 7000;
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <Principal_Hard_Code_Config+0x28>)
 800548c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005490:	801a      	strh	r2, [r3, #0]
	Threshold_Speed = 1;
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <Principal_Hard_Code_Config+0x2c>)
 8005494:	2201      	movs	r2, #1
 8005496:	801a      	strh	r2, [r3, #0]
}
 8005498:	bf00      	nop
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20002e78 	.word	0x20002e78
 80054a8:	20001c58 	.word	0x20001c58
 80054ac:	20001a5c 	.word	0x20001a5c

080054b0 <Principal_Datalogger_Init>:
#include "string.h"

FRESULT res[3];

FRESULT Principal_Datalogger_Init(FATFS* fatfs_struct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	FRESULT retVal = FR_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	4813      	ldr	r0, [pc, #76]	; (800550c <Principal_Datalogger_Init+0x5c>)
 80054c0:	f003 f92a 	bl	8008718 <HAL_GPIO_ReadPin>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d104      	bne.n	80054d4 <Principal_Datalogger_Init+0x24>
	{
		Flag_Datalogger = DL_No_Card;
 80054ca:	4b11      	ldr	r3, [pc, #68]	; (8005510 <Principal_Datalogger_Init+0x60>)
 80054cc:	2202      	movs	r2, #2
 80054ce:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e017      	b.n	8005504 <Principal_Datalogger_Init+0x54>
	}

	BSP_SD_Init();
 80054d4:	f00a fea4 	bl	8010220 <BSP_SD_Init>

	retVal = f_mount(fatfs_struct, SDPath, 1);
 80054d8:	2201      	movs	r2, #1
 80054da:	490e      	ldr	r1, [pc, #56]	; (8005514 <Principal_Datalogger_Init+0x64>)
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f010 f8af 	bl	8015640 <f_mount>
 80054e2:	4603      	mov	r3, r0
 80054e4:	73fb      	strb	r3, [r7, #15]

	Flag_Datalogger = DL_No_Save;
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <Principal_Datalogger_Init+0x60>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <Principal_Datalogger_Init+0x52>
	{
		Flag_Datalogger = DL_Error;
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <Principal_Datalogger_Init+0x60>)
 80054f4:	2204      	movs	r2, #4
 80054f6:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 80054f8:	2200      	movs	r2, #0
 80054fa:	4906      	ldr	r1, [pc, #24]	; (8005514 <Principal_Datalogger_Init+0x64>)
 80054fc:	2000      	movs	r0, #0
 80054fe:	f010 f89f 	bl	8015640 <f_mount>
	}

	return retVal;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40020800 	.word	0x40020800
 8005510:	20001bcc 	.word	0x20001bcc
 8005514:	20002e94 	.word	0x20002e94

08005518 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start(RTC_DateTypeDef* sDate, RTC_TimeTypeDef* sTime, char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	75fb      	strb	r3, [r7, #23]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 800552a:	2180      	movs	r1, #128	; 0x80
 800552c:	4855      	ldr	r0, [pc, #340]	; (8005684 <Principal_Datalogger_Start+0x16c>)
 800552e:	f003 f8f3 	bl	8008718 <HAL_GPIO_ReadPin>
 8005532:	4603      	mov	r3, r0
 8005534:	2b01      	cmp	r3, #1
 8005536:	d104      	bne.n	8005542 <Principal_Datalogger_Start+0x2a>
	{
		Flag_Datalogger = DL_No_Card;
 8005538:	4b53      	ldr	r3, [pc, #332]	; (8005688 <Principal_Datalogger_Start+0x170>)
 800553a:	2202      	movs	r2, #2
 800553c:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 800553e:	2301      	movs	r3, #1
 8005540:	e09b      	b.n	800567a <Principal_Datalogger_Start+0x162>
	}

	if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET)
 8005542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005546:	4851      	ldr	r0, [pc, #324]	; (800568c <Principal_Datalogger_Start+0x174>)
 8005548:	f003 f8e6 	bl	8008718 <HAL_GPIO_ReadPin>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d135      	bne.n	80055be <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.rpm < Threshold_RPM)
 8005552:	4b4f      	ldr	r3, [pc, #316]	; (8005690 <Principal_Datalogger_Start+0x178>)
 8005554:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8005558:	4b4e      	ldr	r3, [pc, #312]	; (8005694 <Principal_Datalogger_Start+0x17c>)
 800555a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800555e:	429a      	cmp	r2, r3
 8005560:	da2d      	bge.n	80055be <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_fl < Threshold_Speed)
 8005562:	4b4b      	ldr	r3, [pc, #300]	; (8005690 <Principal_Datalogger_Start+0x178>)
 8005564:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8005568:	4b4b      	ldr	r3, [pc, #300]	; (8005698 <Principal_Datalogger_Start+0x180>)
 800556a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800556e:	429a      	cmp	r2, r3
 8005570:	da25      	bge.n	80055be <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_fr < Threshold_Speed)
 8005572:	4b47      	ldr	r3, [pc, #284]	; (8005690 <Principal_Datalogger_Start+0x178>)
 8005574:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8005578:	4b47      	ldr	r3, [pc, #284]	; (8005698 <Principal_Datalogger_Start+0x180>)
 800557a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800557e:	429a      	cmp	r2, r3
 8005580:	da1d      	bge.n	80055be <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_rl < Threshold_Speed)
 8005582:	4b43      	ldr	r3, [pc, #268]	; (8005690 <Principal_Datalogger_Start+0x178>)
 8005584:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 8005588:	4b43      	ldr	r3, [pc, #268]	; (8005698 <Principal_Datalogger_Start+0x180>)
 800558a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800558e:	429a      	cmp	r2, r3
 8005590:	da15      	bge.n	80055be <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_rr < Threshold_Speed)
 8005592:	4b3f      	ldr	r3, [pc, #252]	; (8005690 <Principal_Datalogger_Start+0x178>)
 8005594:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 8005598:	4b3f      	ldr	r3, [pc, #252]	; (8005698 <Principal_Datalogger_Start+0x180>)
 800559a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800559e:	429a      	cmp	r2, r3
 80055a0:	da0d      	bge.n	80055be <Principal_Datalogger_Start+0xa6>
			&& (Flag_Datalogger != DL_But_Press)
 80055a2:	4b39      	ldr	r3, [pc, #228]	; (8005688 <Principal_Datalogger_Start+0x170>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d009      	beq.n	80055be <Principal_Datalogger_Start+0xa6>
			&& (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET))
 80055aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055ae:	4837      	ldr	r0, [pc, #220]	; (800568c <Principal_Datalogger_Start+0x174>)
 80055b0:	f003 f8b2 	bl	8008718 <HAL_GPIO_ReadPin>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <Principal_Datalogger_Start+0xa6>
		return FR_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	e05d      	b.n	800567a <Principal_Datalogger_Start+0x162>

	Principal_RTC_Get_Date(sDate, sTime);
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 faef 	bl	8005ba4 <Principal_RTC_Get_Date>
	sprintf(dir, "%02d_%02d_%02d", sDate->Year, sDate->Month, sDate->Date);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	78db      	ldrb	r3, [r3, #3]
 80055ca:	461a      	mov	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	4619      	mov	r1, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	789b      	ldrb	r3, [r3, #2]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	460b      	mov	r3, r1
 80055da:	4930      	ldr	r1, [pc, #192]	; (800569c <Principal_Datalogger_Start+0x184>)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f011 fc67 	bl	8016eb0 <siprintf>

	retVal = f_mkdir(dir);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f010 fcae 	bl	8015f44 <f_mkdir>
 80055e8:	4603      	mov	r3, r0
 80055ea:	75fb      	strb	r3, [r7, #23]

	res[0] = retVal;
 80055ec:	4a2c      	ldr	r2, [pc, #176]	; (80056a0 <Principal_Datalogger_Start+0x188>)
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	7013      	strb	r3, [r2, #0]

	if((retVal != FR_OK) && (retVal != FR_EXIST))
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <Principal_Datalogger_Start+0xf0>
 80055f8:	7dfb      	ldrb	r3, [r7, #23]
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d004      	beq.n	8005608 <Principal_Datalogger_Start+0xf0>
	{
		Flag_Datalogger = DL_Error;
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <Principal_Datalogger_Start+0x170>)
 8005600:	2204      	movs	r2, #4
 8005602:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	e038      	b.n	800567a <Principal_Datalogger_Start+0x162>
	}

	retVal = f_opendir(dir_struct, dir);
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	6a38      	ldr	r0, [r7, #32]
 800560c:	f010 fc27 	bl	8015e5e <f_opendir>
 8005610:	4603      	mov	r3, r0
 8005612:	75fb      	strb	r3, [r7, #23]

	res[1] = retVal;
 8005614:	4a22      	ldr	r2, [pc, #136]	; (80056a0 <Principal_Datalogger_Start+0x188>)
 8005616:	7dfb      	ldrb	r3, [r7, #23]
 8005618:	7053      	strb	r3, [r2, #1]

	if(retVal != FR_OK)
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <Principal_Datalogger_Start+0x112>
	{
		Flag_Datalogger = DL_Error;
 8005620:	4b19      	ldr	r3, [pc, #100]	; (8005688 <Principal_Datalogger_Start+0x170>)
 8005622:	2204      	movs	r2, #4
 8005624:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	e027      	b.n	800567a <Principal_Datalogger_Start+0x162>
	}

//	sprintf(file, "%s/%02d_%02d_%02d_%02d_%02d_%02d.sd", dir, sDate->Year, sDate->Month, sDate->Date, sTime->Hours, sTime->Minutes, sTime->Seconds);
	sprintf(file, "%s/%02d_%02d_%02d.sd", dir, sTime->Hours, sTime->Minutes, sTime->Seconds);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	4619      	mov	r1, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	461a      	mov	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	789b      	ldrb	r3, [r3, #2]
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	9200      	str	r2, [sp, #0]
 800563e:	460b      	mov	r3, r1
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4918      	ldr	r1, [pc, #96]	; (80056a4 <Principal_Datalogger_Start+0x18c>)
 8005644:	6838      	ldr	r0, [r7, #0]
 8005646:	f011 fc33 	bl	8016eb0 <siprintf>

	retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 800564a:	220a      	movs	r2, #10
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005650:	f010 f83a 	bl	80156c8 <f_open>
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]

	res[2] = retVal;
 8005658:	4a11      	ldr	r2, [pc, #68]	; (80056a0 <Principal_Datalogger_Start+0x188>)
 800565a:	7dfb      	ldrb	r3, [r7, #23]
 800565c:	7093      	strb	r3, [r2, #2]

	f_close(file_struct);
 800565e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005660:	f010 fbdd 	bl	8015e1e <f_close>

	if(retVal == FR_OK)
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d103      	bne.n	8005672 <Principal_Datalogger_Start+0x15a>
		Flag_Datalogger = DL_Save;
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <Principal_Datalogger_Start+0x170>)
 800566c:	2201      	movs	r2, #1
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	e002      	b.n	8005678 <Principal_Datalogger_Start+0x160>
	else
		Flag_Datalogger = DL_Error;
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <Principal_Datalogger_Start+0x170>)
 8005674:	2204      	movs	r2, #4
 8005676:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40020800 	.word	0x40020800
 8005688:	20001bcc 	.word	0x20001bcc
 800568c:	40020000 	.word	0x40020000
 8005690:	20002e20 	.word	0x20002e20
 8005694:	20001c58 	.word	0x20001c58
 8005698:	20001a5c 	.word	0x20001a5c
 800569c:	08017708 	.word	0x08017708
 80056a0:	20002e88 	.word	0x20002e88
 80056a4:	08017718 	.word	0x08017718

080056a8 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish(DIR* dir_struct, FIL* file_struct)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
	FRESULT retVal = FR_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 80056b6:	2180      	movs	r1, #128	; 0x80
 80056b8:	4814      	ldr	r0, [pc, #80]	; (800570c <Principal_Datalogger_Finish+0x64>)
 80056ba:	f003 f82d 	bl	8008718 <HAL_GPIO_ReadPin>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d110      	bne.n	80056e6 <Principal_Datalogger_Finish+0x3e>
	{
		f_close(file_struct);
 80056c4:	6838      	ldr	r0, [r7, #0]
 80056c6:	f010 fbaa 	bl	8015e1e <f_close>
		f_closedir(dir_struct);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f010 fc22 	bl	8015f14 <f_closedir>
		retVal = f_mount(0, SDPath, 0);
 80056d0:	2200      	movs	r2, #0
 80056d2:	490f      	ldr	r1, [pc, #60]	; (8005710 <Principal_Datalogger_Finish+0x68>)
 80056d4:	2000      	movs	r0, #0
 80056d6:	f00f ffb3 	bl	8015640 <f_mount>
 80056da:	4603      	mov	r3, r0
 80056dc:	73fb      	strb	r3, [r7, #15]
		Flag_Datalogger = DL_No_Card;
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <Principal_Datalogger_Finish+0x6c>)
 80056e0:	2202      	movs	r2, #2
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e00a      	b.n	80056fc <Principal_Datalogger_Finish+0x54>
	}

	else
	{
		retVal = f_close(file_struct);
 80056e6:	6838      	ldr	r0, [r7, #0]
 80056e8:	f010 fb99 	bl	8015e1e <f_close>
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
		f_closedir(dir_struct);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f010 fc0f 	bl	8015f14 <f_closedir>
		Flag_Datalogger = DL_No_Save;
 80056f6:	4b07      	ldr	r3, [pc, #28]	; (8005714 <Principal_Datalogger_Finish+0x6c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
	}

	Verify_Datalogger = 0;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <Principal_Datalogger_Finish+0x70>)
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40020800 	.word	0x40020800
 8005710:	20002e94 	.word	0x20002e94
 8005714:	20001bcc 	.word	0x20001bcc
 8005718:	20001a0c 	.word	0x20001a0c

0800571c <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(uint32_t Data_ID, uint8_t Data_Length, uint8_t* Data_Buffer, FIL* file_struct)
{
 800571c:	b5b0      	push	{r4, r5, r7, lr}
 800571e:	b08a      	sub	sp, #40	; 0x28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	460b      	mov	r3, r1
 800572a:	72fb      	strb	r3, [r7, #11]
 800572c:	466b      	mov	r3, sp
 800572e:	461d      	mov	r5, r3
	uint8_t buffer[5 + Data_Length];
 8005730:	7afb      	ldrb	r3, [r7, #11]
 8005732:	1d5c      	adds	r4, r3, #5
 8005734:	1e63      	subs	r3, r4, #1
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	4623      	mov	r3, r4
 800573a:	4618      	mov	r0, r3
 800573c:	f04f 0100 	mov.w	r1, #0
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	00cb      	lsls	r3, r1, #3
 800574a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800574e:	00c2      	lsls	r2, r0, #3
 8005750:	4623      	mov	r3, r4
 8005752:	4618      	mov	r0, r3
 8005754:	f04f 0100 	mov.w	r1, #0
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	00cb      	lsls	r3, r1, #3
 8005762:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005766:	00c2      	lsls	r2, r0, #3
 8005768:	4623      	mov	r3, r4
 800576a:	3307      	adds	r3, #7
 800576c:	08db      	lsrs	r3, r3, #3
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	ebad 0d03 	sub.w	sp, sp, r3
 8005774:	466b      	mov	r3, sp
 8005776:	3300      	adds	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
	UINT byte;
	FRESULT verify[2];

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 800577a:	2180      	movs	r1, #128	; 0x80
 800577c:	4840      	ldr	r0, [pc, #256]	; (8005880 <Principal_Datalogger_Save_Buffer+0x164>)
 800577e:	f002 ffcb 	bl	8008718 <HAL_GPIO_ReadPin>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d109      	bne.n	800579c <Principal_Datalogger_Save_Buffer+0x80>
	{
		Flag_Datalogger = DL_No_Card;
 8005788:	4b3e      	ldr	r3, [pc, #248]	; (8005884 <Principal_Datalogger_Save_Buffer+0x168>)
 800578a:	2202      	movs	r2, #2
 800578c:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 800578e:	2200      	movs	r2, #0
 8005790:	493d      	ldr	r1, [pc, #244]	; (8005888 <Principal_Datalogger_Save_Buffer+0x16c>)
 8005792:	2000      	movs	r0, #0
 8005794:	f00f ff54 	bl	8015640 <f_mount>
 8005798:	46ad      	mov	sp, r5
 800579a:	e06d      	b.n	8005878 <Principal_Datalogger_Save_Buffer+0x15c>
		return;
	}

	buffer[0] = 'D';
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	2244      	movs	r2, #68	; 0x44
 80057a0:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'L';
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	224c      	movs	r2, #76	; 0x4c
 80057a6:	705a      	strb	r2, [r3, #1]
	buffer[2] = Data_ID & 0xff;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	709a      	strb	r2, [r3, #2]
	buffer[3] = Data_Length;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	7afa      	ldrb	r2, [r7, #11]
 80057b4:	70da      	strb	r2, [r3, #3]
	buffer[4] = Acc_Datalogger[0];
 80057b6:	4b35      	ldr	r3, [pc, #212]	; (800588c <Principal_Datalogger_Save_Buffer+0x170>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	711a      	strb	r2, [r3, #4]

	Acc_Datalogger[0] = 0;
 80057c0:	4b32      	ldr	r3, [pc, #200]	; (800588c <Principal_Datalogger_Save_Buffer+0x170>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

	for(uint8_t i = 0; i < Data_Length; i++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057cc:	e00e      	b.n	80057ec <Principal_Datalogger_Save_Buffer+0xd0>
		buffer[5 + i] = Data_Buffer[i];
 80057ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	441a      	add	r2, r3
 80057d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057da:	3305      	adds	r3, #5
 80057dc:	7811      	ldrb	r1, [r2, #0]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Data_Length; i++)
 80057e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057e6:	3301      	adds	r3, #1
 80057e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80057f0:	7afb      	ldrb	r3, [r7, #11]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d3eb      	bcc.n	80057ce <Principal_Datalogger_Save_Buffer+0xb2>

	memcpy(Datalogger_Buffer + Datalogger_Buffer_Position, buffer, 5 + Data_Length);
 80057f6:	4b26      	ldr	r3, [pc, #152]	; (8005890 <Principal_Datalogger_Save_Buffer+0x174>)
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <Principal_Datalogger_Save_Buffer+0x178>)
 80057fe:	18d0      	adds	r0, r2, r3
 8005800:	69f9      	ldr	r1, [r7, #28]
 8005802:	7afb      	ldrb	r3, [r7, #11]
 8005804:	3305      	adds	r3, #5
 8005806:	461a      	mov	r2, r3
 8005808:	f011 fb3c 	bl	8016e84 <memcpy>

	Datalogger_Buffer_Position += (5 + Data_Length);
 800580c:	7afb      	ldrb	r3, [r7, #11]
 800580e:	b29a      	uxth	r2, r3
 8005810:	4b1f      	ldr	r3, [pc, #124]	; (8005890 <Principal_Datalogger_Save_Buffer+0x174>)
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	4413      	add	r3, r2
 8005816:	b29b      	uxth	r3, r3
 8005818:	3305      	adds	r3, #5
 800581a:	b29a      	uxth	r2, r3
 800581c:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <Principal_Datalogger_Save_Buffer+0x174>)
 800581e:	801a      	strh	r2, [r3, #0]

	if(Datalogger_Buffer_Position > (DATALOGGER_BUFFER_SIZE - DATALOGGER_MSG_MAX_SIZE))
 8005820:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <Principal_Datalogger_Save_Buffer+0x174>)
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	f5b3 7ff6 	cmp.w	r3, #492	; 0x1ec
 8005828:	d325      	bcc.n	8005876 <Principal_Datalogger_Save_Buffer+0x15a>
	{
		verify[0] = f_write(file_struct, &Datalogger_Buffer, Datalogger_Buffer_Position, &byte);
 800582a:	4b19      	ldr	r3, [pc, #100]	; (8005890 <Principal_Datalogger_Save_Buffer+0x174>)
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	f107 0318 	add.w	r3, r7, #24
 8005834:	4917      	ldr	r1, [pc, #92]	; (8005894 <Principal_Datalogger_Save_Buffer+0x178>)
 8005836:	6838      	ldr	r0, [r7, #0]
 8005838:	f010 f8df 	bl	80159fa <f_write>
 800583c:	4603      	mov	r3, r0
 800583e:	753b      	strb	r3, [r7, #20]

		verify[1] = f_sync(file_struct);
 8005840:	6838      	ldr	r0, [r7, #0]
 8005842:	f010 fa6e 	bl	8015d22 <f_sync>
 8005846:	4603      	mov	r3, r0
 8005848:	757b      	strb	r3, [r7, #21]

		if((verify[0] == FR_OK) && (verify[1] == FR_OK) && (Datalogger_Buffer_Position == byte))
 800584a:	7d3b      	ldrb	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10c      	bne.n	800586a <Principal_Datalogger_Save_Buffer+0x14e>
 8005850:	7d7b      	ldrb	r3, [r7, #21]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <Principal_Datalogger_Save_Buffer+0x14e>
 8005856:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <Principal_Datalogger_Save_Buffer+0x174>)
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	429a      	cmp	r2, r3
 8005860:	d103      	bne.n	800586a <Principal_Datalogger_Save_Buffer+0x14e>
			Verify_Datalogger = 1;
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <Principal_Datalogger_Save_Buffer+0x17c>)
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e002      	b.n	8005870 <Principal_Datalogger_Save_Buffer+0x154>
		else
			Verify_Datalogger = 0;
 800586a:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <Principal_Datalogger_Save_Buffer+0x17c>)
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]

		Datalogger_Buffer_Position = 0;
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <Principal_Datalogger_Save_Buffer+0x174>)
 8005872:	2200      	movs	r2, #0
 8005874:	801a      	strh	r2, [r3, #0]
 8005876:	46ad      	mov	sp, r5
	}
}
 8005878:	3728      	adds	r7, #40	; 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bdb0      	pop	{r4, r5, r7, pc}
 800587e:	bf00      	nop
 8005880:	40020800 	.word	0x40020800
 8005884:	20001bcc 	.word	0x20001bcc
 8005888:	20002e94 	.word	0x20002e94
 800588c:	20002e18 	.word	0x20002e18
 8005890:	200007b8 	.word	0x200007b8
 8005894:	200007c8 	.word	0x200007c8
 8005898:	20001a0c 	.word	0x20001a0c

0800589c <Principal_Datalogger_Button>:

void Principal_Datalogger_Button(RTC_DateTypeDef* sDate, RTC_TimeTypeDef* sTime, char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
	if(Acc_Datalogger[1] == 0)
 80058aa:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <Principal_Datalogger_Button+0x38>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <Principal_Datalogger_Button+0x2c>
	{
		Acc_Datalogger[1] = BUTTON_COOLDOWN;
 80058b2:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <Principal_Datalogger_Button+0x38>)
 80058b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058b8:	605a      	str	r2, [r3, #4]

		if(Flag_Datalogger == DL_No_Save)
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <Principal_Datalogger_Button+0x3c>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <Principal_Datalogger_Button+0x2c>
			Flag_Datalogger = DL_But_Press;
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <Principal_Datalogger_Button+0x3c>)
 80058c4:	2203      	movs	r2, #3
 80058c6:	701a      	strb	r2, [r3, #0]
	}
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	20002e18 	.word	0x20002e18
 80058d8:	20001bcc 	.word	0x20001bcc

080058dc <Principal_Card_Detection>:

void Principal_Card_Detection()
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 80058e2:	2180      	movs	r1, #128	; 0x80
 80058e4:	4812      	ldr	r0, [pc, #72]	; (8005930 <Principal_Card_Detection+0x54>)
 80058e6:	f002 ff17 	bl	8008718 <HAL_GPIO_ReadPin>
 80058ea:	4603      	mov	r3, r0
 80058ec:	71fb      	strb	r3, [r7, #7]

	if((cd_pin == GPIO_PIN_SET) && (Datalogger_CD == GPIO_PIN_RESET))
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d10b      	bne.n	800590c <Principal_Card_Detection+0x30>
 80058f4:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <Principal_Card_Detection+0x58>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d107      	bne.n	800590c <Principal_Card_Detection+0x30>
	{
		Datalogger_CD = GPIO_PIN_SET;
 80058fc:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <Principal_Card_Detection+0x58>)
 80058fe:	2201      	movs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
		Principal_Datalogger_Finish(&Dir_Struct, &File_Struct);
 8005902:	490d      	ldr	r1, [pc, #52]	; (8005938 <Principal_Card_Detection+0x5c>)
 8005904:	480d      	ldr	r0, [pc, #52]	; (800593c <Principal_Card_Detection+0x60>)
 8005906:	f7ff fecf 	bl	80056a8 <Principal_Datalogger_Finish>
	else if((cd_pin == GPIO_PIN_RESET) && (Datalogger_CD == GPIO_PIN_SET))
	{
		Datalogger_CD = GPIO_PIN_RESET;
		Principal_Datalogger_Init(&Fatfs_Struct);
	}
}
 800590a:	e00c      	b.n	8005926 <Principal_Card_Detection+0x4a>
	else if((cd_pin == GPIO_PIN_RESET) && (Datalogger_CD == GPIO_PIN_SET))
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <Principal_Card_Detection+0x4a>
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <Principal_Card_Detection+0x58>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d105      	bne.n	8005926 <Principal_Card_Detection+0x4a>
		Datalogger_CD = GPIO_PIN_RESET;
 800591a:	4b06      	ldr	r3, [pc, #24]	; (8005934 <Principal_Card_Detection+0x58>)
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
		Principal_Datalogger_Init(&Fatfs_Struct);
 8005920:	4807      	ldr	r0, [pc, #28]	; (8005940 <Principal_Card_Detection+0x64>)
 8005922:	f7ff fdc5 	bl	80054b0 <Principal_Datalogger_Init>
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40020800 	.word	0x40020800
 8005934:	20001b60 	.word	0x20001b60
 8005938:	20001c80 	.word	0x20001c80
 800593c:	20001a60 	.word	0x20001a60
 8005940:	200009d4 	.word	0x200009d4

08005944 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
	Lap_Number++;
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <Principal_Beacon_Detect+0x1c>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	3301      	adds	r3, #1
 800594e:	b2da      	uxtb	r2, r3
 8005950:	4b03      	ldr	r3, [pc, #12]	; (8005960 <Principal_Beacon_Detect+0x1c>)
 8005952:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, Beacon_Msg);
 8005954:	2107      	movs	r1, #7
 8005956:	4803      	ldr	r0, [pc, #12]	; (8005964 <Principal_Beacon_Detect+0x20>)
 8005958:	f7fd fe50 	bl	80035fc <Principal_Transmit_Msg>
}
 800595c:	bf00      	nop
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20002cc0 	.word	0x20002cc0
 8005964:	20002d28 	.word	0x20002d28

08005968 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8005970:	4b2c      	ldr	r3, [pc, #176]	; (8005a24 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005972:	4a2d      	ldr	r2, [pc, #180]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005974:	2100      	movs	r1, #0
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f001 fd22 	bl	80073c0 <HAL_CAN_GetRxMessage>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d143      	bne.n	8005a0a <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
	{
		Verify_CAN |= 2;
 8005982:	4b2a      	ldr	r3, [pc, #168]	; (8005a2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	f043 0302 	orr.w	r3, r3, #2
 800598a:	b2da      	uxtb	r2, r3
 800598c:	4b27      	ldr	r3, [pc, #156]	; (8005a2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800598e:	701a      	strb	r2, [r3, #0]

		if((RxHeader.IDE == CAN_ID_STD) && (Flag_Datalogger == DL_Save))
 8005990:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10d      	bne.n	80059b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 8005998:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d109      	bne.n	80059b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			Principal_Datalogger_Save_Buffer(RxHeader.StdId, RxHeader.DLC, RxData, &File_Struct);
 80059a0:	4b21      	ldr	r3, [pc, #132]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	b2d9      	uxtb	r1, r3
 80059aa:	4b22      	ldr	r3, [pc, #136]	; (8005a34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80059ac:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80059ae:	f7ff feb5 	bl	800571c <Principal_Datalogger_Save_Buffer>
 80059b2:	e032      	b.n	8005a1a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>

		else if(((RxHeader.ExtId & 0x1FFFF000) == 0x1E35C000) && (RxHeader.IDE == CAN_ID_EXT))
 80059b4:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	4b1f      	ldr	r3, [pc, #124]	; (8005a38 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10d      	bne.n	80059de <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
 80059c2:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d109      	bne.n	80059de <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
			PDM_CAN_Process_Data(RxHeader.ExtId, RxHeader.DLC, RxData, &PDM_Readings);
 80059ca:	4b17      	ldr	r3, [pc, #92]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059cc:	6858      	ldr	r0, [r3, #4]
 80059ce:	4b16      	ldr	r3, [pc, #88]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	b2d9      	uxtb	r1, r3
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80059d6:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80059d8:	f7fc fb72 	bl	80020c0 <PDM_CAN_Process_Data>
 80059dc:	e01d      	b.n	8005a1a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>

		else if((RxHeader.ExtId == CONFIG_ID) && (RxHeader.IDE == CAN_ID_EXT))
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d108      	bne.n	80059f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 80059e6:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d104      	bne.n	80059f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			Principal_Receive_Config(&hi2c1, RxData);
 80059ee:	490d      	ldr	r1, [pc, #52]	; (8005a24 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80059f0:	4814      	ldr	r0, [pc, #80]	; (8005a44 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80059f2:	f7ff f999 	bl	8004d28 <Principal_Receive_Config>
 80059f6:	e010      	b.n	8005a1a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>

		else
			FT_CAN_ReceiveData(RxHeader.ExtId, RxHeader.DLC, RxData, &ECU_Data);
 80059f8:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059fa:	6858      	ldr	r0, [r3, #4]
 80059fc:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059fe:	6919      	ldr	r1, [r3, #16]
 8005a00:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8005a02:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005a04:	f7fb f864 	bl	8000ad0 <FT_CAN_ReceiveData>
	}

	else
		Verify_CAN &= 1;
}
 8005a08:	e007      	b.n	8005a1a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
		Verify_CAN &= 1;
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005a16:	701a      	strb	r2, [r3, #0]
}
 8005a18:	e7ff      	b.n	8005a1a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20001c78 	.word	0x20001c78
 8005a28:	20002dac 	.word	0x20002dac
 8005a2c:	20001a54 	.word	0x20001a54
 8005a30:	20001bcc 	.word	0x20001bcc
 8005a34:	20001c80 	.word	0x20001c80
 8005a38:	1ffff000 	.word	0x1ffff000
 8005a3c:	1e35c000 	.word	0x1e35c000
 8005a40:	20001a10 	.word	0x20001a10
 8005a44:	20000764 	.word	0x20000764
 8005a48:	20002e20 	.word	0x20002e20

08005a4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	4603      	mov	r3, r0
 8005a54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXTI0_Pin)
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a5c:	d117      	bne.n	8005a8e <HAL_GPIO_EXTI_Callback+0x42>
	{
		if((Input_Config & 0x01) == 0)
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <HAL_GPIO_EXTI_Callback+0x84>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_GPIO_EXTI_Callback+0x22>
			Principal_Beacon_Detect();
 8005a6a:	f7ff ff6b 	bl	8005944 <Principal_Beacon_Detect>

		if((Input_Config & 0x02) == 0)
 8005a6e:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <HAL_GPIO_EXTI_Callback+0x84>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <HAL_GPIO_EXTI_Callback+0x42>
			Principal_Datalogger_Button(&Date, &Time, Dir_String, Log_String, &Dir_Struct, &File_Struct);
 8005a7a:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <HAL_GPIO_EXTI_Callback+0x88>)
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	4b16      	ldr	r3, [pc, #88]	; (8005ad8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4b16      	ldr	r3, [pc, #88]	; (8005adc <HAL_GPIO_EXTI_Callback+0x90>)
 8005a84:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <HAL_GPIO_EXTI_Callback+0x94>)
 8005a86:	4917      	ldr	r1, [pc, #92]	; (8005ae4 <HAL_GPIO_EXTI_Callback+0x98>)
 8005a88:	4817      	ldr	r0, [pc, #92]	; (8005ae8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005a8a:	f7ff ff07 	bl	800589c <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a94:	d117      	bne.n	8005ac6 <HAL_GPIO_EXTI_Callback+0x7a>
	{
		if((Input_Config & 0x01) == 1)
 8005a96:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <HAL_GPIO_EXTI_Callback+0x84>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_GPIO_EXTI_Callback+0x5a>
			Principal_Beacon_Detect();
 8005aa2:	f7ff ff4f 	bl	8005944 <Principal_Beacon_Detect>

		if((Input_Config & 0x02) == 2)
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <HAL_GPIO_EXTI_Callback+0x84>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_GPIO_EXTI_Callback+0x7a>
			Principal_Datalogger_Button(&Date, &Time, Dir_String, Log_String, &Dir_Struct, &File_Struct);
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <HAL_GPIO_EXTI_Callback+0x88>)
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4b08      	ldr	r3, [pc, #32]	; (8005adc <HAL_GPIO_EXTI_Callback+0x90>)
 8005abc:	4a08      	ldr	r2, [pc, #32]	; (8005ae0 <HAL_GPIO_EXTI_Callback+0x94>)
 8005abe:	4909      	ldr	r1, [pc, #36]	; (8005ae4 <HAL_GPIO_EXTI_Callback+0x98>)
 8005ac0:	4809      	ldr	r0, [pc, #36]	; (8005ae8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005ac2:	f7ff feeb 	bl	800589c <Principal_Datalogger_Button>
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	200006f8 	.word	0x200006f8
 8005ad4:	20001c80 	.word	0x20001c80
 8005ad8:	20001a60 	.word	0x20001a60
 8005adc:	20002d60 	.word	0x20002d60
 8005ae0:	200009c8 	.word	0x200009c8
 8005ae4:	20002cac 	.word	0x20002cac
 8005ae8:	20001a58 	.word	0x20001a58

08005aec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a26      	ldr	r2, [pc, #152]	; (8005b94 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d144      	bne.n	8005b88 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		Acc_Datalogger[0]++;
 8005afe:	4b26      	ldr	r3, [pc, #152]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b06:	6013      	str	r3, [r2, #0]
		if(Acc_Datalogger[1] > 0) Acc_Datalogger[1]--;
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d004      	beq.n	8005b1a <HAL_TIM_PeriodElapsedCallback+0x2e>
 8005b10:	4b21      	ldr	r3, [pc, #132]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	4a20      	ldr	r2, [pc, #128]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b18:	6053      	str	r3, [r2, #4]

		Acc_CAN[Analog_1_4]++;
 8005b1a:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	4a1e      	ldr	r2, [pc, #120]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b22:	6013      	str	r3, [r2, #0]
		Acc_CAN[Analog_5_8]++;
 8005b24:	4b1d      	ldr	r3, [pc, #116]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b2c:	6053      	str	r3, [r2, #4]
		Acc_CAN[Analog_9_12]++;
 8005b2e:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	3301      	adds	r3, #1
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b36:	6093      	str	r3, [r2, #8]
		Acc_CAN[RTC_Msg]++;
 8005b38:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	4a17      	ldr	r2, [pc, #92]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b40:	60d3      	str	r3, [r2, #12]

		Acc_Msg[Analog_1_4]++;
 8005b42:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3301      	adds	r3, #1
 8005b48:	4a15      	ldr	r2, [pc, #84]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b4a:	6013      	str	r3, [r2, #0]
		Acc_Msg[Analog_5_8]++;
 8005b4c:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	3301      	adds	r3, #1
 8005b52:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b54:	6053      	str	r3, [r2, #4]
		Acc_Msg[Analog_9_12]++;
 8005b56:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	4a10      	ldr	r2, [pc, #64]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b5e:	6093      	str	r3, [r2, #8]
		Acc_Msg[RTC_Msg]++;
 8005b60:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	3301      	adds	r3, #1
 8005b66:	4a0e      	ldr	r2, [pc, #56]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b68:	60d3      	str	r3, [r2, #12]
		Acc_Msg[Verify_Msg]++;
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	4a0b      	ldr	r2, [pc, #44]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b72:	6113      	str	r3, [r2, #16]
		Acc_Msg[ECU_Save]++;
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b7c:	6153      	str	r3, [r2, #20]
		Acc_Msg[PDM_Save]++;
 8005b7e:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	3301      	adds	r3, #1
 8005b84:	4a06      	ldr	r2, [pc, #24]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b86:	6193      	str	r3, [r2, #24]
	}
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	40001400 	.word	0x40001400
 8005b98:	20002e18 	.word	0x20002e18
 8005b9c:	20002d50 	.word	0x20002d50
 8005ba0:	20001c5c 	.word	0x20001c5c

08005ba4 <Principal_RTC_Get_Date>:

	return;
}

void Principal_RTC_Get_Date(RTC_DateTypeDef *sDate, RTC_TimeTypeDef *sTime)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate(&hrtc, sDate, RTC_FORMAT_BIN);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4806      	ldr	r0, [pc, #24]	; (8005bcc <Principal_RTC_Get_Date+0x28>)
 8005bb4:	f006 fb1b 	bl	800c1ee <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, sTime, RTC_FORMAT_BIN);
 8005bb8:	2200      	movs	r2, #0
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	4803      	ldr	r0, [pc, #12]	; (8005bcc <Principal_RTC_Get_Date+0x28>)
 8005bbe:	f006 fa11 	bl	800bfe4 <HAL_RTC_GetTime>
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20001b40 	.word	0x20001b40

08005bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
 8005bda:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <HAL_MspInit+0x4c>)
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	4a0f      	ldr	r2, [pc, #60]	; (8005c1c <HAL_MspInit+0x4c>)
 8005be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be4:	6453      	str	r3, [r2, #68]	; 0x44
 8005be6:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <HAL_MspInit+0x4c>)
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bee:	607b      	str	r3, [r7, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_MspInit+0x4c>)
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	4a08      	ldr	r2, [pc, #32]	; (8005c1c <HAL_MspInit+0x4c>)
 8005bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c00:	6413      	str	r3, [r2, #64]	; 0x40
 8005c02:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <HAL_MspInit+0x4c>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40023800 	.word	0x40023800

08005c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08e      	sub	sp, #56	; 0x38
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	605a      	str	r2, [r3, #4]
 8005c32:	609a      	str	r2, [r3, #8]
 8005c34:	60da      	str	r2, [r3, #12]
 8005c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a79      	ldr	r2, [pc, #484]	; (8005e24 <HAL_ADC_MspInit+0x204>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d158      	bne.n	8005cf4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005c42:	2300      	movs	r3, #0
 8005c44:	623b      	str	r3, [r7, #32]
 8005c46:	4b78      	ldr	r3, [pc, #480]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	4a77      	ldr	r2, [pc, #476]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c50:	6453      	str	r3, [r2, #68]	; 0x44
 8005c52:	4b75      	ldr	r3, [pc, #468]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	623b      	str	r3, [r7, #32]
 8005c5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	4b71      	ldr	r3, [pc, #452]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	4a70      	ldr	r2, [pc, #448]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c6e:	4b6e      	ldr	r3, [pc, #440]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	69fb      	ldr	r3, [r7, #28]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005c7a:	233f      	movs	r3, #63	; 0x3f
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4867      	ldr	r0, [pc, #412]	; (8005e2c <HAL_ADC_MspInit+0x20c>)
 8005c8e:	f002 fbaf 	bl	80083f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005c92:	4b67      	ldr	r3, [pc, #412]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005c94:	4a67      	ldr	r2, [pc, #412]	; (8005e34 <HAL_ADC_MspInit+0x214>)
 8005c96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005c98:	4b65      	ldr	r3, [pc, #404]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c9e:	4b64      	ldr	r3, [pc, #400]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ca4:	4b62      	ldr	r3, [pc, #392]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005caa:	4b61      	ldr	r3, [pc, #388]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005cb2:	4b5f      	ldr	r3, [pc, #380]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005cba:	4b5d      	ldr	r3, [pc, #372]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005cbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005cc2:	4b5b      	ldr	r3, [pc, #364]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005cca:	4b59      	ldr	r3, [pc, #356]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cd0:	4b57      	ldr	r3, [pc, #348]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005cd6:	4856      	ldr	r0, [pc, #344]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005cd8:	f001 ffec 	bl	8007cb4 <HAL_DMA_Init>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005ce2:	f7fb ffa5 	bl	8001c30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a51      	ldr	r2, [pc, #324]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
 8005cec:	4a50      	ldr	r2, [pc, #320]	; (8005e30 <HAL_ADC_MspInit+0x210>)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005cf2:	e092      	b.n	8005e1a <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a4f      	ldr	r2, [pc, #316]	; (8005e38 <HAL_ADC_MspInit+0x218>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	f040 808d 	bne.w	8005e1a <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005d00:	2300      	movs	r3, #0
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	4b48      	ldr	r3, [pc, #288]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	4a47      	ldr	r2, [pc, #284]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d0e:	6453      	str	r3, [r2, #68]	; 0x44
 8005d10:	4b45      	ldr	r3, [pc, #276]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	4b41      	ldr	r3, [pc, #260]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	4a40      	ldr	r2, [pc, #256]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8005d2c:	4b3e      	ldr	r3, [pc, #248]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d38:	2300      	movs	r3, #0
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	4b3a      	ldr	r3, [pc, #232]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	4a39      	ldr	r2, [pc, #228]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d42:	f043 0304 	orr.w	r3, r3, #4
 8005d46:	6313      	str	r3, [r2, #48]	; 0x30
 8005d48:	4b37      	ldr	r3, [pc, #220]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	4b33      	ldr	r3, [pc, #204]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	4a32      	ldr	r2, [pc, #200]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d5e:	f043 0302 	orr.w	r3, r3, #2
 8005d62:	6313      	str	r3, [r2, #48]	; 0x30
 8005d64:	4b30      	ldr	r3, [pc, #192]	; (8005e28 <HAL_ADC_MspInit+0x208>)
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d70:	23c0      	movs	r3, #192	; 0xc0
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d74:	2303      	movs	r3, #3
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d80:	4619      	mov	r1, r3
 8005d82:	482a      	ldr	r0, [pc, #168]	; (8005e2c <HAL_ADC_MspInit+0x20c>)
 8005d84:	f002 fb34 	bl	80083f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005d88:	2330      	movs	r3, #48	; 0x30
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4828      	ldr	r0, [pc, #160]	; (8005e3c <HAL_ADC_MspInit+0x21c>)
 8005d9c:	f002 fb28 	bl	80083f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005da0:	2303      	movs	r3, #3
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005da4:	2303      	movs	r3, #3
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005db0:	4619      	mov	r1, r3
 8005db2:	4823      	ldr	r0, [pc, #140]	; (8005e40 <HAL_ADC_MspInit+0x220>)
 8005db4:	f002 fb1c 	bl	80083f0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005db8:	4b22      	ldr	r3, [pc, #136]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005dba:	4a23      	ldr	r2, [pc, #140]	; (8005e48 <HAL_ADC_MspInit+0x228>)
 8005dbc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005dbe:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005dc4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dc6:	4b1f      	ldr	r3, [pc, #124]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005dd2:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dd8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005dda:	4b1a      	ldr	r3, [pc, #104]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005de2:	4b18      	ldr	r3, [pc, #96]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005de4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005de8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005dea:	4b16      	ldr	r3, [pc, #88]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005df0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005df2:	4b14      	ldr	r3, [pc, #80]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005df8:	4b12      	ldr	r3, [pc, #72]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005dfe:	4811      	ldr	r0, [pc, #68]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005e00:	f001 ff58 	bl	8007cb4 <HAL_DMA_Init>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005e0a:	f7fb ff11 	bl	8001c30 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a0c      	ldr	r2, [pc, #48]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
 8005e14:	4a0b      	ldr	r2, [pc, #44]	; (8005e44 <HAL_ADC_MspInit+0x224>)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005e1a:	bf00      	nop
 8005e1c:	3738      	adds	r7, #56	; 0x38
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40012000 	.word	0x40012000
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	40020000 	.word	0x40020000
 8005e30:	20001ae0 	.word	0x20001ae0
 8005e34:	40026410 	.word	0x40026410
 8005e38:	40012100 	.word	0x40012100
 8005e3c:	40020800 	.word	0x40020800
 8005e40:	40020400 	.word	0x40020400
 8005e44:	20002cc8 	.word	0x20002cc8
 8005e48:	40026440 	.word	0x40026440

08005e4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	; 0x28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e54:	f107 0314 	add.w	r3, r7, #20
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	609a      	str	r2, [r3, #8]
 8005e60:	60da      	str	r2, [r3, #12]
 8005e62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_CAN_MspInit+0x94>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d134      	bne.n	8005ed8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005e6e:	2300      	movs	r3, #0
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <HAL_CAN_MspInit+0x98>)
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <HAL_CAN_MspInit+0x98>)
 8005e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e7e:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <HAL_CAN_MspInit+0x98>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	4b15      	ldr	r3, [pc, #84]	; (8005ee4 <HAL_CAN_MspInit+0x98>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	4a14      	ldr	r2, [pc, #80]	; (8005ee4 <HAL_CAN_MspInit+0x98>)
 8005e94:	f043 0302 	orr.w	r3, r3, #2
 8005e98:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <HAL_CAN_MspInit+0x98>)
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005ea6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eac:	2302      	movs	r3, #2
 8005eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005eb8:	2309      	movs	r3, #9
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ebc:	f107 0314 	add.w	r3, r7, #20
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4809      	ldr	r0, [pc, #36]	; (8005ee8 <HAL_CAN_MspInit+0x9c>)
 8005ec4:	f002 fa94 	bl	80083f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2102      	movs	r1, #2
 8005ecc:	2014      	movs	r0, #20
 8005ece:	f001 feba 	bl	8007c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005ed2:	2014      	movs	r0, #20
 8005ed4:	f001 fed3 	bl	8007c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005ed8:	bf00      	nop
 8005eda:	3728      	adds	r7, #40	; 0x28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40006400 	.word	0x40006400
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	40020400 	.word	0x40020400

08005eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef4:	f107 0314 	add.w	r3, r7, #20
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	609a      	str	r2, [r3, #8]
 8005f00:	60da      	str	r2, [r3, #12]
 8005f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a19      	ldr	r2, [pc, #100]	; (8005f70 <HAL_I2C_MspInit+0x84>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d12b      	bne.n	8005f66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f0e:	2300      	movs	r3, #0
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	4b18      	ldr	r3, [pc, #96]	; (8005f74 <HAL_I2C_MspInit+0x88>)
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	4a17      	ldr	r2, [pc, #92]	; (8005f74 <HAL_I2C_MspInit+0x88>)
 8005f18:	f043 0302 	orr.w	r3, r3, #2
 8005f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f1e:	4b15      	ldr	r3, [pc, #84]	; (8005f74 <HAL_I2C_MspInit+0x88>)
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f2a:	23c0      	movs	r3, #192	; 0xc0
 8005f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f2e:	2312      	movs	r3, #18
 8005f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f36:	2303      	movs	r3, #3
 8005f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f3a:	2304      	movs	r3, #4
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f3e:	f107 0314 	add.w	r3, r7, #20
 8005f42:	4619      	mov	r1, r3
 8005f44:	480c      	ldr	r0, [pc, #48]	; (8005f78 <HAL_I2C_MspInit+0x8c>)
 8005f46:	f002 fa53 	bl	80083f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <HAL_I2C_MspInit+0x88>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <HAL_I2C_MspInit+0x88>)
 8005f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f58:	6413      	str	r3, [r2, #64]	; 0x40
 8005f5a:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <HAL_I2C_MspInit+0x88>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005f66:	bf00      	nop
 8005f68:	3728      	adds	r7, #40	; 0x28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40005400 	.word	0x40005400
 8005f74:	40023800 	.word	0x40023800
 8005f78:	40020400 	.word	0x40020400

08005f7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b09a      	sub	sp, #104	; 0x68
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f84:	f107 030c 	add.w	r3, r7, #12
 8005f88:	225c      	movs	r2, #92	; 0x5c
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f010 ff87 	bl	8016ea0 <memset>
  if(hrtc->Instance==RTC)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a0c      	ldr	r2, [pc, #48]	; (8005fc8 <HAL_RTC_MspInit+0x4c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d111      	bne.n	8005fc0 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fa6:	f107 030c 	add.w	r3, r7, #12
 8005faa:	4618      	mov	r0, r3
 8005fac:	f004 ff52 	bl	800ae54 <HAL_RCCEx_PeriphCLKConfig>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005fb6:	f7fb fe3b 	bl	8001c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005fba:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <HAL_RTC_MspInit+0x50>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005fc0:	bf00      	nop
 8005fc2:	3768      	adds	r7, #104	; 0x68
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40002800 	.word	0x40002800
 8005fcc:	42470e3c 	.word	0x42470e3c

08005fd0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08a      	sub	sp, #40	; 0x28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fd8:	f107 0314 	add.w	r3, r7, #20
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	605a      	str	r2, [r3, #4]
 8005fe2:	609a      	str	r2, [r3, #8]
 8005fe4:	60da      	str	r2, [r3, #12]
 8005fe6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a68      	ldr	r2, [pc, #416]	; (8006190 <HAL_SD_MspInit+0x1c0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	f040 80c9 	bne.w	8006186 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	4b66      	ldr	r3, [pc, #408]	; (8006194 <HAL_SD_MspInit+0x1c4>)
 8005ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffc:	4a65      	ldr	r2, [pc, #404]	; (8006194 <HAL_SD_MspInit+0x1c4>)
 8005ffe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006002:	6453      	str	r3, [r2, #68]	; 0x44
 8006004:	4b63      	ldr	r3, [pc, #396]	; (8006194 <HAL_SD_MspInit+0x1c4>)
 8006006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	4b5f      	ldr	r3, [pc, #380]	; (8006194 <HAL_SD_MspInit+0x1c4>)
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	4a5e      	ldr	r2, [pc, #376]	; (8006194 <HAL_SD_MspInit+0x1c4>)
 800601a:	f043 0304 	orr.w	r3, r3, #4
 800601e:	6313      	str	r3, [r2, #48]	; 0x30
 8006020:	4b5c      	ldr	r3, [pc, #368]	; (8006194 <HAL_SD_MspInit+0x1c4>)
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800602c:	2300      	movs	r3, #0
 800602e:	60bb      	str	r3, [r7, #8]
 8006030:	4b58      	ldr	r3, [pc, #352]	; (8006194 <HAL_SD_MspInit+0x1c4>)
 8006032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006034:	4a57      	ldr	r2, [pc, #348]	; (8006194 <HAL_SD_MspInit+0x1c4>)
 8006036:	f043 0308 	orr.w	r3, r3, #8
 800603a:	6313      	str	r3, [r2, #48]	; 0x30
 800603c:	4b55      	ldr	r3, [pc, #340]	; (8006194 <HAL_SD_MspInit+0x1c4>)
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006048:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800604c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604e:	2302      	movs	r3, #2
 8006050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006056:	2303      	movs	r3, #3
 8006058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800605a:	230c      	movs	r3, #12
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800605e:	f107 0314 	add.w	r3, r7, #20
 8006062:	4619      	mov	r1, r3
 8006064:	484c      	ldr	r0, [pc, #304]	; (8006198 <HAL_SD_MspInit+0x1c8>)
 8006066:	f002 f9c3 	bl	80083f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800606a:	2304      	movs	r3, #4
 800606c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800606e:	2302      	movs	r3, #2
 8006070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006072:	2300      	movs	r3, #0
 8006074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006076:	2303      	movs	r3, #3
 8006078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800607a:	230c      	movs	r3, #12
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800607e:	f107 0314 	add.w	r3, r7, #20
 8006082:	4619      	mov	r1, r3
 8006084:	4845      	ldr	r0, [pc, #276]	; (800619c <HAL_SD_MspInit+0x1cc>)
 8006086:	f002 f9b3 	bl	80083f0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800608a:	4b45      	ldr	r3, [pc, #276]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 800608c:	4a45      	ldr	r2, [pc, #276]	; (80061a4 <HAL_SD_MspInit+0x1d4>)
 800608e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006090:	4b43      	ldr	r3, [pc, #268]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 8006092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006096:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006098:	4b41      	ldr	r3, [pc, #260]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800609e:	4b40      	ldr	r3, [pc, #256]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060a4:	4b3e      	ldr	r3, [pc, #248]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060aa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80060ac:	4b3c      	ldr	r3, [pc, #240]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060b2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80060b4:	4b3a      	ldr	r3, [pc, #232]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060ba:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80060bc:	4b38      	ldr	r3, [pc, #224]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060be:	2220      	movs	r2, #32
 80060c0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80060c2:	4b37      	ldr	r3, [pc, #220]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80060c8:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060ca:	2204      	movs	r2, #4
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80060ce:	4b34      	ldr	r3, [pc, #208]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060d0:	2203      	movs	r2, #3
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80060d4:	4b32      	ldr	r3, [pc, #200]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80060da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80060dc:	4b30      	ldr	r3, [pc, #192]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80060e4:	482e      	ldr	r0, [pc, #184]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060e6:	f001 fde5 	bl	8007cb4 <HAL_DMA_Init>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80060f0:	f7fb fd9e 	bl	8001c30 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a2a      	ldr	r2, [pc, #168]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40
 80060fa:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <HAL_SD_MspInit+0x1d0>)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006100:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 8006102:	4a2a      	ldr	r2, [pc, #168]	; (80061ac <HAL_SD_MspInit+0x1dc>)
 8006104:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006106:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 8006108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800610c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800610e:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 8006110:	2240      	movs	r2, #64	; 0x40
 8006112:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006114:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 8006116:	2200      	movs	r2, #0
 8006118:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800611a:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 800611c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006120:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006122:	4b21      	ldr	r3, [pc, #132]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 8006124:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006128:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800612a:	4b1f      	ldr	r3, [pc, #124]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 800612c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006130:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006132:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 8006134:	2220      	movs	r2, #32
 8006136:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006138:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 800613a:	2200      	movs	r2, #0
 800613c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800613e:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 8006140:	2204      	movs	r2, #4
 8006142:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006144:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 8006146:	2203      	movs	r2, #3
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800614a:	4b17      	ldr	r3, [pc, #92]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 800614c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006150:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006152:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 8006154:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800615a:	4813      	ldr	r0, [pc, #76]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 800615c:	f001 fdaa 	bl	8007cb4 <HAL_DMA_Init>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8006166:	f7fb fd63 	bl	8001c30 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a0e      	ldr	r2, [pc, #56]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 800616e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006170:	4a0d      	ldr	r2, [pc, #52]	; (80061a8 <HAL_SD_MspInit+0x1d8>)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006176:	2200      	movs	r2, #0
 8006178:	2100      	movs	r1, #0
 800617a:	2031      	movs	r0, #49	; 0x31
 800617c:	f001 fd63 	bl	8007c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006180:	2031      	movs	r0, #49	; 0x31
 8006182:	f001 fd7c 	bl	8007c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006186:	bf00      	nop
 8006188:	3728      	adds	r7, #40	; 0x28
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40023800 	.word	0x40023800
 8006198:	40020800 	.word	0x40020800
 800619c:	40020c00 	.word	0x40020c00
 80061a0:	20000698 	.word	0x20000698
 80061a4:	40026458 	.word	0x40026458
 80061a8:	20001b64 	.word	0x20001b64
 80061ac:	400264a0 	.word	0x400264a0

080061b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a0e      	ldr	r2, [pc, #56]	; (80061f8 <HAL_TIM_Base_MspInit+0x48>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d115      	bne.n	80061ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <HAL_TIM_Base_MspInit+0x4c>)
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <HAL_TIM_Base_MspInit+0x4c>)
 80061cc:	f043 0320 	orr.w	r3, r3, #32
 80061d0:	6413      	str	r3, [r2, #64]	; 0x40
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <HAL_TIM_Base_MspInit+0x4c>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	2037      	movs	r0, #55	; 0x37
 80061e4:	f001 fd2f 	bl	8007c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80061e8:	2037      	movs	r0, #55	; 0x37
 80061ea:	f001 fd48 	bl	8007c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40001400 	.word	0x40001400
 80061fc:	40023800 	.word	0x40023800

08006200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006204:	e7fe      	b.n	8006204 <NMI_Handler+0x4>

08006206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006206:	b480      	push	{r7}
 8006208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800620a:	e7fe      	b.n	800620a <HardFault_Handler+0x4>

0800620c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006210:	e7fe      	b.n	8006210 <MemManage_Handler+0x4>

08006212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006212:	b480      	push	{r7}
 8006214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006216:	e7fe      	b.n	8006216 <BusFault_Handler+0x4>

08006218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800621c:	e7fe      	b.n	800621c <UsageFault_Handler+0x4>

0800621e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800621e:	b480      	push	{r7}
 8006220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006222:	bf00      	nop
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006230:	bf00      	nop
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800623a:	b480      	push	{r7}
 800623c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800623e:	bf00      	nop
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800624c:	f000 f922 	bl	8006494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006250:	bf00      	nop
 8006252:	bd80      	pop	{r7, pc}

08006254 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006258:	4802      	ldr	r0, [pc, #8]	; (8006264 <CAN1_RX0_IRQHandler+0x10>)
 800625a:	f001 f9e9 	bl	8007630 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20002d28 	.word	0x20002d28

08006268 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 800626c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006270:	f002 fa9e 	bl	80087b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8006274:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006278:	f002 fa9a 	bl	80087b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800627c:	bf00      	nop
 800627e:	bd80      	pop	{r7, pc}

08006280 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006284:	4802      	ldr	r0, [pc, #8]	; (8006290 <SDIO_IRQHandler+0x10>)
 8006286:	f006 fb01 	bl	800c88c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800628a:	bf00      	nop
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20001bd0 	.word	0x20001bd0

08006294 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006298:	4802      	ldr	r0, [pc, #8]	; (80062a4 <TIM7_IRQHandler+0x10>)
 800629a:	f007 fc5f 	bl	800db5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800629e:	bf00      	nop
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20002dc8 	.word	0x20002dc8

080062a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80062ac:	4802      	ldr	r0, [pc, #8]	; (80062b8 <DMA2_Stream0_IRQHandler+0x10>)
 80062ae:	f001 fe29 	bl	8007f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80062b2:	bf00      	nop
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20001ae0 	.word	0x20001ae0

080062bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80062c0:	4802      	ldr	r0, [pc, #8]	; (80062cc <DMA2_Stream2_IRQHandler+0x10>)
 80062c2:	f001 fe1f 	bl	8007f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80062c6:	bf00      	nop
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20002cc8 	.word	0x20002cc8

080062d0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80062d4:	4802      	ldr	r0, [pc, #8]	; (80062e0 <DMA2_Stream3_IRQHandler+0x10>)
 80062d6:	f001 fe15 	bl	8007f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80062da:	bf00      	nop
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000698 	.word	0x20000698

080062e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80062e8:	4802      	ldr	r0, [pc, #8]	; (80062f4 <OTG_FS_IRQHandler+0x10>)
 80062ea:	f003 fbb7 	bl	8009a5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80062ee:	bf00      	nop
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	200053cc 	.word	0x200053cc

080062f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80062fc:	4802      	ldr	r0, [pc, #8]	; (8006308 <DMA2_Stream6_IRQHandler+0x10>)
 80062fe:	f001 fe01 	bl	8007f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006302:	bf00      	nop
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20001b64 	.word	0x20001b64

0800630c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006314:	4a14      	ldr	r2, [pc, #80]	; (8006368 <_sbrk+0x5c>)
 8006316:	4b15      	ldr	r3, [pc, #84]	; (800636c <_sbrk+0x60>)
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006320:	4b13      	ldr	r3, [pc, #76]	; (8006370 <_sbrk+0x64>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <_sbrk+0x64>)
 800632a:	4a12      	ldr	r2, [pc, #72]	; (8006374 <_sbrk+0x68>)
 800632c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800632e:	4b10      	ldr	r3, [pc, #64]	; (8006370 <_sbrk+0x64>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	429a      	cmp	r2, r3
 800633a:	d207      	bcs.n	800634c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800633c:	f010 fd78 	bl	8016e30 <__errno>
 8006340:	4603      	mov	r3, r0
 8006342:	220c      	movs	r2, #12
 8006344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006346:	f04f 33ff 	mov.w	r3, #4294967295
 800634a:	e009      	b.n	8006360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800634c:	4b08      	ldr	r3, [pc, #32]	; (8006370 <_sbrk+0x64>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <_sbrk+0x64>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	4a05      	ldr	r2, [pc, #20]	; (8006370 <_sbrk+0x64>)
 800635c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800635e:	68fb      	ldr	r3, [r7, #12]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20020000 	.word	0x20020000
 800636c:	00006000 	.word	0x00006000
 8006370:	200001f4 	.word	0x200001f4
 8006374:	200057e8 	.word	0x200057e8

08006378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800637c:	4b06      	ldr	r3, [pc, #24]	; (8006398 <SystemInit+0x20>)
 800637e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006382:	4a05      	ldr	r2, [pc, #20]	; (8006398 <SystemInit+0x20>)
 8006384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	e000ed00 	.word	0xe000ed00

0800639c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800639c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80063a0:	480d      	ldr	r0, [pc, #52]	; (80063d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80063a2:	490e      	ldr	r1, [pc, #56]	; (80063dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80063a4:	4a0e      	ldr	r2, [pc, #56]	; (80063e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80063a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063a8:	e002      	b.n	80063b0 <LoopCopyDataInit>

080063aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063ae:	3304      	adds	r3, #4

080063b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063b4:	d3f9      	bcc.n	80063aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063b6:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80063b8:	4c0b      	ldr	r4, [pc, #44]	; (80063e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80063ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063bc:	e001      	b.n	80063c2 <LoopFillZerobss>

080063be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063c0:	3204      	adds	r2, #4

080063c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063c4:	d3fb      	bcc.n	80063be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80063c6:	f7ff ffd7 	bl	8006378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063ca:	f010 fd37 	bl	8016e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063ce:	f7fa ff47 	bl	8001260 <main>
  bx  lr    
 80063d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80063d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80063d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80063e0:	08017c98 	.word	0x08017c98
  ldr r2, =_sbss
 80063e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80063e8:	200057e4 	.word	0x200057e4

080063ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063ec:	e7fe      	b.n	80063ec <ADC_IRQHandler>
	...

080063f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <HAL_Init+0x40>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a0d      	ldr	r2, [pc, #52]	; (8006430 <HAL_Init+0x40>)
 80063fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <HAL_Init+0x40>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a0a      	ldr	r2, [pc, #40]	; (8006430 <HAL_Init+0x40>)
 8006406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800640a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800640c:	4b08      	ldr	r3, [pc, #32]	; (8006430 <HAL_Init+0x40>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a07      	ldr	r2, [pc, #28]	; (8006430 <HAL_Init+0x40>)
 8006412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006418:	2003      	movs	r0, #3
 800641a:	f001 fc09 	bl	8007c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800641e:	200f      	movs	r0, #15
 8006420:	f000 f808 	bl	8006434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006424:	f7ff fbd4 	bl	8005bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40023c00 	.word	0x40023c00

08006434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800643c:	4b12      	ldr	r3, [pc, #72]	; (8006488 <HAL_InitTick+0x54>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_InitTick+0x58>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	4619      	mov	r1, r3
 8006446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800644a:	fbb3 f3f1 	udiv	r3, r3, r1
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	4618      	mov	r0, r3
 8006454:	f001 fc21 	bl	8007c9a <HAL_SYSTICK_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e00e      	b.n	8006480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b0f      	cmp	r3, #15
 8006466:	d80a      	bhi.n	800647e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006468:	2200      	movs	r2, #0
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	f001 fbe9 	bl	8007c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006474:	4a06      	ldr	r2, [pc, #24]	; (8006490 <HAL_InitTick+0x5c>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e000      	b.n	8006480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000000 	.word	0x20000000
 800648c:	20000008 	.word	0x20000008
 8006490:	20000004 	.word	0x20000004

08006494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <HAL_IncTick+0x20>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <HAL_IncTick+0x24>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4413      	add	r3, r2
 80064a4:	4a04      	ldr	r2, [pc, #16]	; (80064b8 <HAL_IncTick+0x24>)
 80064a6:	6013      	str	r3, [r2, #0]
}
 80064a8:	bf00      	nop
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	20000008 	.word	0x20000008
 80064b8:	20002e8c 	.word	0x20002e8c

080064bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
  return uwTick;
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <HAL_GetTick+0x14>)
 80064c2:	681b      	ldr	r3, [r3, #0]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20002e8c 	.word	0x20002e8c

080064d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064dc:	f7ff ffee 	bl	80064bc <HAL_GetTick>
 80064e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d005      	beq.n	80064fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <HAL_Delay+0x44>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80064fa:	bf00      	nop
 80064fc:	f7ff ffde 	bl	80064bc <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	429a      	cmp	r2, r3
 800650a:	d8f7      	bhi.n	80064fc <HAL_Delay+0x28>
  {
  }
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000008 	.word	0x20000008

0800651c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e033      	b.n	800659a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d109      	bne.n	800654e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff fb70 	bl	8005c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b00      	cmp	r3, #0
 8006558:	d118      	bne.n	800658c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006562:	f023 0302 	bic.w	r3, r3, #2
 8006566:	f043 0202 	orr.w	r2, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa78 	bl	8006a64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f023 0303 	bic.w	r3, r3, #3
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	641a      	str	r2, [r3, #64]	; 0x40
 800658a:	e001      	b.n	8006590 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_ADC_Start_DMA+0x1e>
 80065be:	2302      	movs	r3, #2
 80065c0:	e0e9      	b.n	8006796 <HAL_ADC_Start_DMA+0x1f2>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d018      	beq.n	800660a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80065e8:	4b6d      	ldr	r3, [pc, #436]	; (80067a0 <HAL_ADC_Start_DMA+0x1fc>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a6d      	ldr	r2, [pc, #436]	; (80067a4 <HAL_ADC_Start_DMA+0x200>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	0c9a      	lsrs	r2, r3, #18
 80065f4:	4613      	mov	r3, r2
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	4413      	add	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80065fc:	e002      	b.n	8006604 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3b01      	subs	r3, #1
 8006602:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f9      	bne.n	80065fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006618:	d107      	bne.n	800662a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006628:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b01      	cmp	r3, #1
 8006636:	f040 80a1 	bne.w	800677c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006642:	f023 0301 	bic.w	r3, r3, #1
 8006646:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006664:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006678:	d106      	bne.n	8006688 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667e:	f023 0206 	bic.w	r2, r3, #6
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	645a      	str	r2, [r3, #68]	; 0x44
 8006686:	e002      	b.n	800668e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006696:	4b44      	ldr	r3, [pc, #272]	; (80067a8 <HAL_ADC_Start_DMA+0x204>)
 8006698:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669e:	4a43      	ldr	r2, [pc, #268]	; (80067ac <HAL_ADC_Start_DMA+0x208>)
 80066a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	4a42      	ldr	r2, [pc, #264]	; (80067b0 <HAL_ADC_Start_DMA+0x20c>)
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	4a41      	ldr	r2, [pc, #260]	; (80067b4 <HAL_ADC_Start_DMA+0x210>)
 80066b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80066ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80066ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	334c      	adds	r3, #76	; 0x4c
 80066e6:	4619      	mov	r1, r3
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f001 fb90 	bl	8007e10 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d12a      	bne.n	8006752 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a2d      	ldr	r2, [pc, #180]	; (80067b8 <HAL_ADC_Start_DMA+0x214>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d015      	beq.n	8006732 <HAL_ADC_Start_DMA+0x18e>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a2c      	ldr	r2, [pc, #176]	; (80067bc <HAL_ADC_Start_DMA+0x218>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d105      	bne.n	800671c <HAL_ADC_Start_DMA+0x178>
 8006710:	4b25      	ldr	r3, [pc, #148]	; (80067a8 <HAL_ADC_Start_DMA+0x204>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a27      	ldr	r2, [pc, #156]	; (80067c0 <HAL_ADC_Start_DMA+0x21c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d136      	bne.n	8006794 <HAL_ADC_Start_DMA+0x1f0>
 8006726:	4b20      	ldr	r3, [pc, #128]	; (80067a8 <HAL_ADC_Start_DMA+0x204>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b00      	cmp	r3, #0
 8006730:	d130      	bne.n	8006794 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d129      	bne.n	8006794 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800674e:	609a      	str	r2, [r3, #8]
 8006750:	e020      	b.n	8006794 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_ADC_Start_DMA+0x214>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d11b      	bne.n	8006794 <HAL_ADC_Start_DMA+0x1f0>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d114      	bne.n	8006794 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006778:	609a      	str	r2, [r3, #8]
 800677a:	e00b      	b.n	8006794 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	f043 0210 	orr.w	r2, r3, #16
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678c:	f043 0201 	orr.w	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20000000 	.word	0x20000000
 80067a4:	431bde83 	.word	0x431bde83
 80067a8:	40012300 	.word	0x40012300
 80067ac:	08006c5d 	.word	0x08006c5d
 80067b0:	08006d17 	.word	0x08006d17
 80067b4:	08006d33 	.word	0x08006d33
 80067b8:	40012000 	.word	0x40012000
 80067bc:	40012100 	.word	0x40012100
 80067c0:	40012200 	.word	0x40012200

080067c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_ADC_ConfigChannel+0x1c>
 8006818:	2302      	movs	r3, #2
 800681a:	e113      	b.n	8006a44 <HAL_ADC_ConfigChannel+0x244>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b09      	cmp	r3, #9
 800682a:	d925      	bls.n	8006878 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68d9      	ldr	r1, [r3, #12]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	4613      	mov	r3, r2
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	4413      	add	r3, r2
 8006840:	3b1e      	subs	r3, #30
 8006842:	2207      	movs	r2, #7
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	43da      	mvns	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	400a      	ands	r2, r1
 8006850:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68d9      	ldr	r1, [r3, #12]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	4618      	mov	r0, r3
 8006864:	4603      	mov	r3, r0
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	4403      	add	r3, r0
 800686a:	3b1e      	subs	r3, #30
 800686c:	409a      	lsls	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	60da      	str	r2, [r3, #12]
 8006876:	e022      	b.n	80068be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6919      	ldr	r1, [r3, #16]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	461a      	mov	r2, r3
 8006886:	4613      	mov	r3, r2
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4413      	add	r3, r2
 800688c:	2207      	movs	r2, #7
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	43da      	mvns	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	400a      	ands	r2, r1
 800689a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6919      	ldr	r1, [r3, #16]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	4618      	mov	r0, r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	4403      	add	r3, r0
 80068b4:	409a      	lsls	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b06      	cmp	r3, #6
 80068c4:	d824      	bhi.n	8006910 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	3b05      	subs	r3, #5
 80068d8:	221f      	movs	r2, #31
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	43da      	mvns	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	400a      	ands	r2, r1
 80068e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4618      	mov	r0, r3
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	4613      	mov	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	3b05      	subs	r3, #5
 8006902:	fa00 f203 	lsl.w	r2, r0, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	635a      	str	r2, [r3, #52]	; 0x34
 800690e:	e04c      	b.n	80069aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b0c      	cmp	r3, #12
 8006916:	d824      	bhi.n	8006962 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	3b23      	subs	r3, #35	; 0x23
 800692a:	221f      	movs	r2, #31
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	43da      	mvns	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	400a      	ands	r2, r1
 8006938:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	4618      	mov	r0, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	3b23      	subs	r3, #35	; 0x23
 8006954:	fa00 f203 	lsl.w	r2, r0, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
 8006960:	e023      	b.n	80069aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	3b41      	subs	r3, #65	; 0x41
 8006974:	221f      	movs	r2, #31
 8006976:	fa02 f303 	lsl.w	r3, r2, r3
 800697a:	43da      	mvns	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	400a      	ands	r2, r1
 8006982:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	4618      	mov	r0, r3
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	3b41      	subs	r3, #65	; 0x41
 800699e:	fa00 f203 	lsl.w	r2, r0, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069aa:	4b29      	ldr	r3, [pc, #164]	; (8006a50 <HAL_ADC_ConfigChannel+0x250>)
 80069ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a28      	ldr	r2, [pc, #160]	; (8006a54 <HAL_ADC_ConfigChannel+0x254>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d10f      	bne.n	80069d8 <HAL_ADC_ConfigChannel+0x1d8>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b12      	cmp	r3, #18
 80069be:	d10b      	bne.n	80069d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <HAL_ADC_ConfigChannel+0x254>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d12b      	bne.n	8006a3a <HAL_ADC_ConfigChannel+0x23a>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <HAL_ADC_ConfigChannel+0x258>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <HAL_ADC_ConfigChannel+0x1f4>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b11      	cmp	r3, #17
 80069f2:	d122      	bne.n	8006a3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a11      	ldr	r2, [pc, #68]	; (8006a58 <HAL_ADC_ConfigChannel+0x258>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d111      	bne.n	8006a3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a16:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <HAL_ADC_ConfigChannel+0x25c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a11      	ldr	r2, [pc, #68]	; (8006a60 <HAL_ADC_ConfigChannel+0x260>)
 8006a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a20:	0c9a      	lsrs	r2, r3, #18
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a2c:	e002      	b.n	8006a34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f9      	bne.n	8006a2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	40012300 	.word	0x40012300
 8006a54:	40012000 	.word	0x40012000
 8006a58:	10000012 	.word	0x10000012
 8006a5c:	20000000 	.word	0x20000000
 8006a60:	431bde83 	.word	0x431bde83

08006a64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a6c:	4b79      	ldr	r3, [pc, #484]	; (8006c54 <ADC_Init+0x1f0>)
 8006a6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	431a      	orrs	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6859      	ldr	r1, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	021a      	lsls	r2, r3, #8
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6859      	ldr	r1, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6899      	ldr	r1, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	4a58      	ldr	r2, [pc, #352]	; (8006c58 <ADC_Init+0x1f4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d022      	beq.n	8006b42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6899      	ldr	r1, [r3, #8]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6899      	ldr	r1, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	609a      	str	r2, [r3, #8]
 8006b40:	e00f      	b.n	8006b62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0202 	bic.w	r2, r2, #2
 8006b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6899      	ldr	r1, [r3, #8]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7e1b      	ldrb	r3, [r3, #24]
 8006b7c:	005a      	lsls	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01b      	beq.n	8006bc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006bae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6859      	ldr	r1, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	035a      	lsls	r2, r3, #13
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
 8006bc6:	e007      	b.n	8006bd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	051a      	lsls	r2, r3, #20
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6899      	ldr	r1, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c1a:	025a      	lsls	r2, r3, #9
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6899      	ldr	r1, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	029a      	lsls	r2, r3, #10
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	609a      	str	r2, [r3, #8]
}
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	40012300 	.word	0x40012300
 8006c58:	0f000001 	.word	0x0f000001

08006c5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d13c      	bne.n	8006cf0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d12b      	bne.n	8006ce8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d127      	bne.n	8006ce8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d006      	beq.n	8006cb4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d119      	bne.n	8006ce8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0220 	bic.w	r2, r2, #32
 8006cc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d105      	bne.n	8006ce8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	f043 0201 	orr.w	r2, r3, #1
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7ff fd6b 	bl	80067c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006cee:	e00e      	b.n	8006d0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fd75 	bl	80067ec <HAL_ADC_ErrorCallback>
}
 8006d02:	e004      	b.n	8006d0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fd57 	bl	80067d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4a:	f043 0204 	orr.w	r2, r3, #4
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fd4a 	bl	80067ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e0ed      	b.n	8006f4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7ff f864 	bl	8005e4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d94:	f7ff fb92 	bl	80064bc <HAL_GetTick>
 8006d98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d9a:	e012      	b.n	8006dc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d9c:	f7ff fb8e 	bl	80064bc <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b0a      	cmp	r3, #10
 8006da8:	d90b      	bls.n	8006dc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2205      	movs	r2, #5
 8006dba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e0c5      	b.n	8006f4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0e5      	beq.n	8006d9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0202 	bic.w	r2, r2, #2
 8006dde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006de0:	f7ff fb6c 	bl	80064bc <HAL_GetTick>
 8006de4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006de6:	e012      	b.n	8006e0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006de8:	f7ff fb68 	bl	80064bc <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b0a      	cmp	r3, #10
 8006df4:	d90b      	bls.n	8006e0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2205      	movs	r2, #5
 8006e06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e09f      	b.n	8006f4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e5      	bne.n	8006de8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	7e1b      	ldrb	r3, [r3, #24]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d108      	bne.n	8006e36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e007      	b.n	8006e46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7e5b      	ldrb	r3, [r3, #25]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d108      	bne.n	8006e60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e007      	b.n	8006e70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	7e9b      	ldrb	r3, [r3, #26]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d108      	bne.n	8006e8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0220 	orr.w	r2, r2, #32
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	e007      	b.n	8006e9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0220 	bic.w	r2, r2, #32
 8006e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	7edb      	ldrb	r3, [r3, #27]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d108      	bne.n	8006eb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0210 	bic.w	r2, r2, #16
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	e007      	b.n	8006ec4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f042 0210 	orr.w	r2, r2, #16
 8006ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7f1b      	ldrb	r3, [r3, #28]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d108      	bne.n	8006ede <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0208 	orr.w	r2, r2, #8
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	e007      	b.n	8006eee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0208 	bic.w	r2, r2, #8
 8006eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	7f5b      	ldrb	r3, [r3, #29]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d108      	bne.n	8006f08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0204 	orr.w	r2, r2, #4
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	e007      	b.n	8006f18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0204 	bic.w	r2, r2, #4
 8006f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	ea42 0103 	orr.w	r1, r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	1e5a      	subs	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f6e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006f70:	7cfb      	ldrb	r3, [r7, #19]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d003      	beq.n	8006f7e <HAL_CAN_ConfigFilter+0x26>
 8006f76:	7cfb      	ldrb	r3, [r7, #19]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	f040 80be 	bne.w	80070fa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006f7e:	4b65      	ldr	r3, [pc, #404]	; (8007114 <HAL_CAN_ConfigFilter+0x1bc>)
 8006f80:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f88:	f043 0201 	orr.w	r2, r3, #1
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	43db      	mvns	r3, r3
 8006fd0:	401a      	ands	r2, r3
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d123      	bne.n	8007028 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	401a      	ands	r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007002:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	3248      	adds	r2, #72	; 0x48
 8007008:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800701c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800701e:	6979      	ldr	r1, [r7, #20]
 8007020:	3348      	adds	r3, #72	; 0x48
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	440b      	add	r3, r1
 8007026:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d122      	bne.n	8007076 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	431a      	orrs	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007050:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	3248      	adds	r2, #72	; 0x48
 8007056:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800706a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800706c:	6979      	ldr	r1, [r7, #20]
 800706e:	3348      	adds	r3, #72	; 0x48
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	440b      	add	r3, r1
 8007074:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	43db      	mvns	r3, r3
 8007088:	401a      	ands	r2, r3
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007090:	e007      	b.n	80070a2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	431a      	orrs	r2, r3
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d109      	bne.n	80070be <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	43db      	mvns	r3, r3
 80070b4:	401a      	ands	r2, r3
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80070bc:	e007      	b.n	80070ce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d107      	bne.n	80070e6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	431a      	orrs	r2, r3
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070ec:	f023 0201 	bic.w	r2, r3, #1
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	e006      	b.n	8007108 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
  }
}
 8007108:	4618      	mov	r0, r3
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	40006400 	.word	0x40006400

08007118 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	d12e      	bne.n	800718a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0201 	bic.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007144:	f7ff f9ba 	bl	80064bc <HAL_GetTick>
 8007148:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800714a:	e012      	b.n	8007172 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800714c:	f7ff f9b6 	bl	80064bc <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b0a      	cmp	r3, #10
 8007158:	d90b      	bls.n	8007172 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2205      	movs	r2, #5
 800716a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e012      	b.n	8007198 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e5      	bne.n	800714c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	e006      	b.n	8007198 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
  }
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b089      	sub	sp, #36	; 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80071be:	7ffb      	ldrb	r3, [r7, #31]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d003      	beq.n	80071cc <HAL_CAN_AddTxMessage+0x2c>
 80071c4:	7ffb      	ldrb	r3, [r7, #31]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	f040 80b8 	bne.w	800733c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 80a0 	beq.w	800732c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	0e1b      	lsrs	r3, r3, #24
 80071f0:	f003 0303 	and.w	r3, r3, #3
 80071f4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d907      	bls.n	800720c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e09e      	b.n	800734a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800720c:	2201      	movs	r2, #1
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	409a      	lsls	r2, r3
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10d      	bne.n	800723a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007228:	68f9      	ldr	r1, [r7, #12]
 800722a:	6809      	ldr	r1, [r1, #0]
 800722c:	431a      	orrs	r2, r3
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	3318      	adds	r3, #24
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	440b      	add	r3, r1
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	e00f      	b.n	800725a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007244:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800724e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	3318      	adds	r3, #24
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	440b      	add	r3, r1
 8007258:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6819      	ldr	r1, [r3, #0]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	3318      	adds	r3, #24
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	440b      	add	r3, r1
 800726a:	3304      	adds	r3, #4
 800726c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	7d1b      	ldrb	r3, [r3, #20]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d111      	bne.n	800729a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	3318      	adds	r3, #24
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	4413      	add	r3, r2
 8007282:	3304      	adds	r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	6811      	ldr	r1, [r2, #0]
 800728a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	3318      	adds	r3, #24
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	440b      	add	r3, r1
 8007296:	3304      	adds	r3, #4
 8007298:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3307      	adds	r3, #7
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	061a      	lsls	r2, r3, #24
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3306      	adds	r3, #6
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	041b      	lsls	r3, r3, #16
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3305      	adds	r3, #5
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	4313      	orrs	r3, r2
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	3204      	adds	r2, #4
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	4610      	mov	r0, r2
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	6811      	ldr	r1, [r2, #0]
 80072c2:	ea43 0200 	orr.w	r2, r3, r0
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	440b      	add	r3, r1
 80072cc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80072d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3303      	adds	r3, #3
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	061a      	lsls	r2, r3, #24
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3302      	adds	r3, #2
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	041b      	lsls	r3, r3, #16
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3301      	adds	r3, #1
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	021b      	lsls	r3, r3, #8
 80072ec:	4313      	orrs	r3, r2
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	7812      	ldrb	r2, [r2, #0]
 80072f2:	4610      	mov	r0, r2
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	6811      	ldr	r1, [r2, #0]
 80072f8:	ea43 0200 	orr.w	r2, r3, r0
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	440b      	add	r3, r1
 8007302:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007306:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	3318      	adds	r3, #24
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	4413      	add	r3, r2
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	6811      	ldr	r1, [r2, #0]
 800731a:	f043 0201 	orr.w	r2, r3, #1
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	3318      	adds	r3, #24
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	440b      	add	r3, r1
 8007326:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	e00e      	b.n	800734a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e006      	b.n	800734a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
  }
}
 800734a:	4618      	mov	r0, r3
 800734c:	3724      	adds	r7, #36	; 0x24
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007368:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d002      	beq.n	8007376 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d11d      	bne.n	80073b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3301      	adds	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3301      	adds	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80073b2:	68fb      	ldr	r3, [r7, #12]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d003      	beq.n	80073e4 <HAL_CAN_GetRxMessage+0x24>
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	f040 80f3 	bne.w	80075ca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10e      	bne.n	8007408 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d116      	bne.n	8007426 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e0e7      	b.n	80075d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d107      	bne.n	8007426 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e0d8      	b.n	80075d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	331b      	adds	r3, #27
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	4413      	add	r3, r2
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0204 	and.w	r2, r3, #4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10c      	bne.n	800745e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	331b      	adds	r3, #27
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	4413      	add	r3, r2
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	0d5b      	lsrs	r3, r3, #21
 8007454:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	e00b      	b.n	8007476 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	331b      	adds	r3, #27
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	4413      	add	r3, r2
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	08db      	lsrs	r3, r3, #3
 800746e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	331b      	adds	r3, #27
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	4413      	add	r3, r2
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0202 	and.w	r2, r3, #2
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	331b      	adds	r3, #27
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	4413      	add	r3, r2
 8007498:	3304      	adds	r3, #4
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 020f 	and.w	r2, r3, #15
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	331b      	adds	r3, #27
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	4413      	add	r3, r2
 80074b0:	3304      	adds	r3, #4
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	331b      	adds	r3, #27
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	4413      	add	r3, r2
 80074c8:	3304      	adds	r3, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	4413      	add	r3, r2
 80074de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	0a1a      	lsrs	r2, r3, #8
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	3301      	adds	r3, #1
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	4413      	add	r3, r2
 800750e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	0c1a      	lsrs	r2, r3, #16
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	3302      	adds	r3, #2
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	4413      	add	r3, r2
 8007528:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	0e1a      	lsrs	r2, r3, #24
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	3303      	adds	r3, #3
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	4413      	add	r3, r2
 8007542:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	3304      	adds	r3, #4
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	011b      	lsls	r3, r3, #4
 8007558:	4413      	add	r3, r2
 800755a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	0a1a      	lsrs	r2, r3, #8
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	3305      	adds	r3, #5
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	4413      	add	r3, r2
 8007574:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	0c1a      	lsrs	r2, r3, #16
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	3306      	adds	r3, #6
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	4413      	add	r3, r2
 800758e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	0e1a      	lsrs	r2, r3, #24
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	3307      	adds	r3, #7
 800759a:	b2d2      	uxtb	r2, r2
 800759c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d108      	bne.n	80075b6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0220 	orr.w	r2, r2, #32
 80075b2:	60da      	str	r2, [r3, #12]
 80075b4:	e007      	b.n	80075c6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0220 	orr.w	r2, r2, #32
 80075c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	e006      	b.n	80075d8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
  }
}
 80075d8:	4618      	mov	r0, r3
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d002      	beq.n	8007602 <HAL_CAN_ActivateNotification+0x1e>
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d109      	bne.n	8007616 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6959      	ldr	r1, [r3, #20]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	e006      	b.n	8007624 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
  }
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007638:	2300      	movs	r3, #0
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d07c      	beq.n	8007770 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d023      	beq.n	80076c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2201      	movs	r2, #1
 8007686:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f983 	bl	800799e <HAL_CAN_TxMailbox0CompleteCallback>
 8007698:	e016      	b.n	80076c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
 80076ac:	e00c      	b.n	80076c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d004      	beq.n	80076c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
 80076c0:	e002      	b.n	80076c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f989 	bl	80079da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d024      	beq.n	800771c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f963 	bl	80079b2 <HAL_CAN_TxMailbox1CompleteCallback>
 80076ec:	e016      	b.n	800771c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007700:	e00c      	b.n	800771c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
 8007714:	e002      	b.n	800771c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f969 	bl	80079ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d024      	beq.n	8007770 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800772e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f943 	bl	80079c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8007740:	e016      	b.n	8007770 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
 8007754:	e00c      	b.n	8007770 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d004      	beq.n	800776a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
 8007768:	e002      	b.n	8007770 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f949 	bl	8007a02 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00c      	beq.n	8007794 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f003 0310 	and.w	r3, r3, #16
 8007780:	2b00      	cmp	r3, #0
 8007782:	d007      	beq.n	8007794 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800778a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2210      	movs	r2, #16
 8007792:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00b      	beq.n	80077b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f003 0308 	and.w	r3, r3, #8
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d006      	beq.n	80077b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2208      	movs	r2, #8
 80077ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f930 	bl	8007a16 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d009      	beq.n	80077d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fe f8ca 	bl	8005968 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00c      	beq.n	80077f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f003 0310 	and.w	r3, r3, #16
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d007      	beq.n	80077f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2210      	movs	r2, #16
 80077f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f003 0308 	and.w	r3, r3, #8
 8007808:	2b00      	cmp	r3, #0
 800780a:	d006      	beq.n	800781a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2208      	movs	r2, #8
 8007812:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f912 	bl	8007a3e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f8f9 	bl	8007a2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00b      	beq.n	800785a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	2b00      	cmp	r3, #0
 800784a:	d006      	beq.n	800785a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2210      	movs	r2, #16
 8007852:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f8fc 	bl	8007a52 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00b      	beq.n	800787c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d006      	beq.n	800787c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2208      	movs	r2, #8
 8007874:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f8f5 	bl	8007a66 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d07b      	beq.n	800797e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d072      	beq.n	8007976 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007896:	2b00      	cmp	r3, #0
 8007898:	d008      	beq.n	80078ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	f043 0301 	orr.w	r3, r3, #1
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	f043 0302 	orr.w	r3, r3, #2
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	f043 0304 	orr.w	r3, r3, #4
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d043      	beq.n	8007976 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d03e      	beq.n	8007976 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078fe:	2b60      	cmp	r3, #96	; 0x60
 8007900:	d02b      	beq.n	800795a <HAL_CAN_IRQHandler+0x32a>
 8007902:	2b60      	cmp	r3, #96	; 0x60
 8007904:	d82e      	bhi.n	8007964 <HAL_CAN_IRQHandler+0x334>
 8007906:	2b50      	cmp	r3, #80	; 0x50
 8007908:	d022      	beq.n	8007950 <HAL_CAN_IRQHandler+0x320>
 800790a:	2b50      	cmp	r3, #80	; 0x50
 800790c:	d82a      	bhi.n	8007964 <HAL_CAN_IRQHandler+0x334>
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d019      	beq.n	8007946 <HAL_CAN_IRQHandler+0x316>
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d826      	bhi.n	8007964 <HAL_CAN_IRQHandler+0x334>
 8007916:	2b30      	cmp	r3, #48	; 0x30
 8007918:	d010      	beq.n	800793c <HAL_CAN_IRQHandler+0x30c>
 800791a:	2b30      	cmp	r3, #48	; 0x30
 800791c:	d822      	bhi.n	8007964 <HAL_CAN_IRQHandler+0x334>
 800791e:	2b10      	cmp	r3, #16
 8007920:	d002      	beq.n	8007928 <HAL_CAN_IRQHandler+0x2f8>
 8007922:	2b20      	cmp	r3, #32
 8007924:	d005      	beq.n	8007932 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007926:	e01d      	b.n	8007964 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	f043 0308 	orr.w	r3, r3, #8
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007930:	e019      	b.n	8007966 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	f043 0310 	orr.w	r3, r3, #16
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800793a:	e014      	b.n	8007966 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	f043 0320 	orr.w	r3, r3, #32
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007944:	e00f      	b.n	8007966 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800794e:	e00a      	b.n	8007966 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007958:	e005      	b.n	8007966 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007962:	e000      	b.n	8007966 <HAL_CAN_IRQHandler+0x336>
            break;
 8007964:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	699a      	ldr	r2, [r3, #24]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007974:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2204      	movs	r2, #4
 800797c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	2b00      	cmp	r3, #0
 8007982:	d008      	beq.n	8007996 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f872 	bl	8007a7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007996:	bf00      	nop
 8007998:	3728      	adds	r7, #40	; 0x28
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b083      	sub	sp, #12
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
	...

08007a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007aac:	4013      	ands	r3, r2
 8007aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ac2:	4a04      	ldr	r2, [pc, #16]	; (8007ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	60d3      	str	r3, [r2, #12]
}
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	e000ed00 	.word	0xe000ed00

08007ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007adc:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <__NVIC_GetPriorityGrouping+0x18>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	0a1b      	lsrs	r3, r3, #8
 8007ae2:	f003 0307 	and.w	r3, r3, #7
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	db0b      	blt.n	8007b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	f003 021f 	and.w	r2, r3, #31
 8007b0c:	4907      	ldr	r1, [pc, #28]	; (8007b2c <__NVIC_EnableIRQ+0x38>)
 8007b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b12:	095b      	lsrs	r3, r3, #5
 8007b14:	2001      	movs	r0, #1
 8007b16:	fa00 f202 	lsl.w	r2, r0, r2
 8007b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	e000e100 	.word	0xe000e100

08007b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	db0a      	blt.n	8007b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	490c      	ldr	r1, [pc, #48]	; (8007b7c <__NVIC_SetPriority+0x4c>)
 8007b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b4e:	0112      	lsls	r2, r2, #4
 8007b50:	b2d2      	uxtb	r2, r2
 8007b52:	440b      	add	r3, r1
 8007b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b58:	e00a      	b.n	8007b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	4908      	ldr	r1, [pc, #32]	; (8007b80 <__NVIC_SetPriority+0x50>)
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	3b04      	subs	r3, #4
 8007b68:	0112      	lsls	r2, r2, #4
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	761a      	strb	r2, [r3, #24]
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	e000e100 	.word	0xe000e100
 8007b80:	e000ed00 	.word	0xe000ed00

08007b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b089      	sub	sp, #36	; 0x24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f1c3 0307 	rsb	r3, r3, #7
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	bf28      	it	cs
 8007ba2:	2304      	movcs	r3, #4
 8007ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	2b06      	cmp	r3, #6
 8007bac:	d902      	bls.n	8007bb4 <NVIC_EncodePriority+0x30>
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	3b03      	subs	r3, #3
 8007bb2:	e000      	b.n	8007bb6 <NVIC_EncodePriority+0x32>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc2:	43da      	mvns	r2, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	401a      	ands	r2, r3
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd6:	43d9      	mvns	r1, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bdc:	4313      	orrs	r3, r2
         );
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3724      	adds	r7, #36	; 0x24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bfc:	d301      	bcc.n	8007c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e00f      	b.n	8007c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c02:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <SysTick_Config+0x40>)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c0a:	210f      	movs	r1, #15
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	f7ff ff8e 	bl	8007b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c14:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <SysTick_Config+0x40>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c1a:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <SysTick_Config+0x40>)
 8007c1c:	2207      	movs	r2, #7
 8007c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	e000e010 	.word	0xe000e010

08007c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff ff29 	bl	8007a90 <__NVIC_SetPriorityGrouping>
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b086      	sub	sp, #24
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	607a      	str	r2, [r7, #4]
 8007c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c58:	f7ff ff3e 	bl	8007ad8 <__NVIC_GetPriorityGrouping>
 8007c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	68b9      	ldr	r1, [r7, #8]
 8007c62:	6978      	ldr	r0, [r7, #20]
 8007c64:	f7ff ff8e 	bl	8007b84 <NVIC_EncodePriority>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c6e:	4611      	mov	r1, r2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7ff ff5d 	bl	8007b30 <__NVIC_SetPriority>
}
 8007c76:	bf00      	nop
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	4603      	mov	r3, r0
 8007c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff ff31 	bl	8007af4 <__NVIC_EnableIRQ>
}
 8007c92:	bf00      	nop
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff ffa2 	bl	8007bec <SysTick_Config>
 8007ca8:	4603      	mov	r3, r0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007cc0:	f7fe fbfc 	bl	80064bc <HAL_GetTick>
 8007cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e099      	b.n	8007e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 0201 	bic.w	r2, r2, #1
 8007cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cf0:	e00f      	b.n	8007d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007cf2:	f7fe fbe3 	bl	80064bc <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b05      	cmp	r3, #5
 8007cfe:	d908      	bls.n	8007d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2203      	movs	r2, #3
 8007d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e078      	b.n	8007e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e8      	bne.n	8007cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	4b38      	ldr	r3, [pc, #224]	; (8007e0c <HAL_DMA_Init+0x158>)
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d107      	bne.n	8007d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d74:	4313      	orrs	r3, r2
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f023 0307 	bic.w	r3, r3, #7
 8007d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d117      	bne.n	8007dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00e      	beq.n	8007dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fa9d 	bl	80082f8 <DMA_CheckFifoParam>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d008      	beq.n	8007dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2240      	movs	r2, #64	; 0x40
 8007dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e016      	b.n	8007e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fa54 	bl	800828c <DMA_CalcBaseAndBitshift>
 8007de4:	4603      	mov	r3, r0
 8007de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dec:	223f      	movs	r2, #63	; 0x3f
 8007dee:	409a      	lsls	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	f010803f 	.word	0xf010803f

08007e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_DMA_Start_IT+0x26>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e040      	b.n	8007eb8 <HAL_DMA_Start_IT+0xa8>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d12f      	bne.n	8007eaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 f9e6 	bl	8008230 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e68:	223f      	movs	r2, #63	; 0x3f
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0216 	orr.w	r2, r2, #22
 8007e7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0208 	orr.w	r2, r2, #8
 8007e96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	e005      	b.n	8007eb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d004      	beq.n	8007ede <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2280      	movs	r2, #128	; 0x80
 8007ed8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e00c      	b.n	8007ef8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2205      	movs	r2, #5
 8007ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0201 	bic.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007f10:	4b92      	ldr	r3, [pc, #584]	; (800815c <HAL_DMA_IRQHandler+0x258>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a92      	ldr	r2, [pc, #584]	; (8008160 <HAL_DMA_IRQHandler+0x25c>)
 8007f16:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1a:	0a9b      	lsrs	r3, r3, #10
 8007f1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2e:	2208      	movs	r2, #8
 8007f30:	409a      	lsls	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4013      	ands	r3, r2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01a      	beq.n	8007f70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d013      	beq.n	8007f70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0204 	bic.w	r2, r2, #4
 8007f56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	409a      	lsls	r2, r3
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f68:	f043 0201 	orr.w	r2, r3, #1
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f74:	2201      	movs	r2, #1
 8007f76:	409a      	lsls	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d012      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00b      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f92:	2201      	movs	r2, #1
 8007f94:	409a      	lsls	r2, r3
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9e:	f043 0202 	orr.w	r2, r3, #2
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007faa:	2204      	movs	r2, #4
 8007fac:	409a      	lsls	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d012      	beq.n	8007fdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc8:	2204      	movs	r2, #4
 8007fca:	409a      	lsls	r2, r3
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd4:	f043 0204 	orr.w	r2, r3, #4
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe0:	2210      	movs	r2, #16
 8007fe2:	409a      	lsls	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d043      	beq.n	8008074 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0308 	and.w	r3, r3, #8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d03c      	beq.n	8008074 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ffe:	2210      	movs	r2, #16
 8008000:	409a      	lsls	r2, r3
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d018      	beq.n	8008046 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d108      	bne.n	8008034 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d024      	beq.n	8008074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
 8008032:	e01f      	b.n	8008074 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01b      	beq.n	8008074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
 8008044:	e016      	b.n	8008074 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008050:	2b00      	cmp	r3, #0
 8008052:	d107      	bne.n	8008064 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0208 	bic.w	r2, r2, #8
 8008062:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008078:	2220      	movs	r2, #32
 800807a:	409a      	lsls	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4013      	ands	r3, r2
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 808e 	beq.w	80081a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0310 	and.w	r3, r3, #16
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 8086 	beq.w	80081a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809a:	2220      	movs	r2, #32
 800809c:	409a      	lsls	r2, r3
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	d136      	bne.n	800811c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0216 	bic.w	r2, r2, #22
 80080bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	695a      	ldr	r2, [r3, #20]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d103      	bne.n	80080de <HAL_DMA_IRQHandler+0x1da>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d007      	beq.n	80080ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0208 	bic.w	r2, r2, #8
 80080ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f2:	223f      	movs	r2, #63	; 0x3f
 80080f4:	409a      	lsls	r2, r3
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800810e:	2b00      	cmp	r3, #0
 8008110:	d07d      	beq.n	800820e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	4798      	blx	r3
        }
        return;
 800811a:	e078      	b.n	800820e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01c      	beq.n	8008164 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d108      	bne.n	800814a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813c:	2b00      	cmp	r3, #0
 800813e:	d030      	beq.n	80081a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
 8008148:	e02b      	b.n	80081a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d027      	beq.n	80081a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
 800815a:	e022      	b.n	80081a2 <HAL_DMA_IRQHandler+0x29e>
 800815c:	20000000 	.word	0x20000000
 8008160:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10f      	bne.n	8008192 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0210 	bic.w	r2, r2, #16
 8008180:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d032      	beq.n	8008210 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d022      	beq.n	80081fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2205      	movs	r2, #5
 80081ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0201 	bic.w	r2, r2, #1
 80081cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	3301      	adds	r3, #1
 80081d2:	60bb      	str	r3, [r7, #8]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d307      	bcc.n	80081ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1f2      	bne.n	80081ce <HAL_DMA_IRQHandler+0x2ca>
 80081e8:	e000      	b.n	80081ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80081ea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	4798      	blx	r3
 800820c:	e000      	b.n	8008210 <HAL_DMA_IRQHandler+0x30c>
        return;
 800820e:	bf00      	nop
    }
  }
}
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop

08008218 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008224:	4618      	mov	r0, r3
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800824c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b40      	cmp	r3, #64	; 0x40
 800825c:	d108      	bne.n	8008270 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800826e:	e007      	b.n	8008280 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	60da      	str	r2, [r3, #12]
}
 8008280:	bf00      	nop
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	b2db      	uxtb	r3, r3
 800829a:	3b10      	subs	r3, #16
 800829c:	4a14      	ldr	r2, [pc, #80]	; (80082f0 <DMA_CalcBaseAndBitshift+0x64>)
 800829e:	fba2 2303 	umull	r2, r3, r2, r3
 80082a2:	091b      	lsrs	r3, r3, #4
 80082a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80082a6:	4a13      	ldr	r2, [pc, #76]	; (80082f4 <DMA_CalcBaseAndBitshift+0x68>)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d909      	bls.n	80082ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	659a      	str	r2, [r3, #88]	; 0x58
 80082cc:	e007      	b.n	80082de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	aaaaaaab 	.word	0xaaaaaaab
 80082f4:	080177d4 	.word	0x080177d4

080082f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d11f      	bne.n	8008352 <DMA_CheckFifoParam+0x5a>
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b03      	cmp	r3, #3
 8008316:	d856      	bhi.n	80083c6 <DMA_CheckFifoParam+0xce>
 8008318:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <DMA_CheckFifoParam+0x28>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008331 	.word	0x08008331
 8008324:	08008343 	.word	0x08008343
 8008328:	08008331 	.word	0x08008331
 800832c:	080083c7 	.word	0x080083c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d046      	beq.n	80083ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008340:	e043      	b.n	80083ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800834a:	d140      	bne.n	80083ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008350:	e03d      	b.n	80083ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800835a:	d121      	bne.n	80083a0 <DMA_CheckFifoParam+0xa8>
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b03      	cmp	r3, #3
 8008360:	d837      	bhi.n	80083d2 <DMA_CheckFifoParam+0xda>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <DMA_CheckFifoParam+0x70>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	08008379 	.word	0x08008379
 800836c:	0800837f 	.word	0x0800837f
 8008370:	08008379 	.word	0x08008379
 8008374:	08008391 	.word	0x08008391
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	73fb      	strb	r3, [r7, #15]
      break;
 800837c:	e030      	b.n	80083e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d025      	beq.n	80083d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800838e:	e022      	b.n	80083d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008398:	d11f      	bne.n	80083da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800839e:	e01c      	b.n	80083da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d903      	bls.n	80083ae <DMA_CheckFifoParam+0xb6>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d003      	beq.n	80083b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80083ac:	e018      	b.n	80083e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	73fb      	strb	r3, [r7, #15]
      break;
 80083b2:	e015      	b.n	80083e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00e      	beq.n	80083de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	73fb      	strb	r3, [r7, #15]
      break;
 80083c4:	e00b      	b.n	80083de <DMA_CheckFifoParam+0xe6>
      break;
 80083c6:	bf00      	nop
 80083c8:	e00a      	b.n	80083e0 <DMA_CheckFifoParam+0xe8>
      break;
 80083ca:	bf00      	nop
 80083cc:	e008      	b.n	80083e0 <DMA_CheckFifoParam+0xe8>
      break;
 80083ce:	bf00      	nop
 80083d0:	e006      	b.n	80083e0 <DMA_CheckFifoParam+0xe8>
      break;
 80083d2:	bf00      	nop
 80083d4:	e004      	b.n	80083e0 <DMA_CheckFifoParam+0xe8>
      break;
 80083d6:	bf00      	nop
 80083d8:	e002      	b.n	80083e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80083da:	bf00      	nop
 80083dc:	e000      	b.n	80083e0 <DMA_CheckFifoParam+0xe8>
      break;
 80083de:	bf00      	nop
    }
  } 
  
  return status; 
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop

080083f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b089      	sub	sp, #36	; 0x24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80083fe:	2300      	movs	r3, #0
 8008400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008402:	2300      	movs	r3, #0
 8008404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008406:	2300      	movs	r3, #0
 8008408:	61fb      	str	r3, [r7, #28]
 800840a:	e165      	b.n	80086d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800840c:	2201      	movs	r2, #1
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	fa02 f303 	lsl.w	r3, r2, r3
 8008414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	4013      	ands	r3, r2
 800841e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	429a      	cmp	r2, r3
 8008426:	f040 8154 	bne.w	80086d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	2b01      	cmp	r3, #1
 8008434:	d005      	beq.n	8008442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800843e:	2b02      	cmp	r3, #2
 8008440:	d130      	bne.n	80084a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	2203      	movs	r2, #3
 800844e:	fa02 f303 	lsl.w	r3, r2, r3
 8008452:	43db      	mvns	r3, r3
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	4013      	ands	r3, r2
 8008458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	fa02 f303 	lsl.w	r3, r2, r3
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	4313      	orrs	r3, r2
 800846a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008478:	2201      	movs	r2, #1
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	fa02 f303 	lsl.w	r3, r2, r3
 8008480:	43db      	mvns	r3, r3
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	4013      	ands	r3, r2
 8008486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	091b      	lsrs	r3, r3, #4
 800848e:	f003 0201 	and.w	r2, r3, #1
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	fa02 f303 	lsl.w	r3, r2, r3
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	4313      	orrs	r3, r2
 800849c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f003 0303 	and.w	r3, r3, #3
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d017      	beq.n	80084e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	2203      	movs	r2, #3
 80084bc:	fa02 f303 	lsl.w	r3, r2, r3
 80084c0:	43db      	mvns	r3, r3
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	4013      	ands	r3, r2
 80084c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	fa02 f303 	lsl.w	r3, r2, r3
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f003 0303 	and.w	r3, r3, #3
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d123      	bne.n	8008534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	08da      	lsrs	r2, r3, #3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3208      	adds	r2, #8
 80084f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	f003 0307 	and.w	r3, r3, #7
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	220f      	movs	r2, #15
 8008504:	fa02 f303 	lsl.w	r3, r2, r3
 8008508:	43db      	mvns	r3, r3
 800850a:	69ba      	ldr	r2, [r7, #24]
 800850c:	4013      	ands	r3, r2
 800850e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	691a      	ldr	r2, [r3, #16]
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	fa02 f303 	lsl.w	r3, r2, r3
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	4313      	orrs	r3, r2
 8008524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	08da      	lsrs	r2, r3, #3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3208      	adds	r2, #8
 800852e:	69b9      	ldr	r1, [r7, #24]
 8008530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	2203      	movs	r2, #3
 8008540:	fa02 f303 	lsl.w	r3, r2, r3
 8008544:	43db      	mvns	r3, r3
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	4013      	ands	r3, r2
 800854a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f003 0203 	and.w	r2, r3, #3
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	fa02 f303 	lsl.w	r3, r2, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	4313      	orrs	r3, r2
 8008560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 80ae 	beq.w	80086d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	4b5d      	ldr	r3, [pc, #372]	; (80086f0 <HAL_GPIO_Init+0x300>)
 800857c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857e:	4a5c      	ldr	r2, [pc, #368]	; (80086f0 <HAL_GPIO_Init+0x300>)
 8008580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008584:	6453      	str	r3, [r2, #68]	; 0x44
 8008586:	4b5a      	ldr	r3, [pc, #360]	; (80086f0 <HAL_GPIO_Init+0x300>)
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008592:	4a58      	ldr	r2, [pc, #352]	; (80086f4 <HAL_GPIO_Init+0x304>)
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	089b      	lsrs	r3, r3, #2
 8008598:	3302      	adds	r3, #2
 800859a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	220f      	movs	r2, #15
 80085aa:	fa02 f303 	lsl.w	r3, r2, r3
 80085ae:	43db      	mvns	r3, r3
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	4013      	ands	r3, r2
 80085b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a4f      	ldr	r2, [pc, #316]	; (80086f8 <HAL_GPIO_Init+0x308>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d025      	beq.n	800860a <HAL_GPIO_Init+0x21a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a4e      	ldr	r2, [pc, #312]	; (80086fc <HAL_GPIO_Init+0x30c>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d01f      	beq.n	8008606 <HAL_GPIO_Init+0x216>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a4d      	ldr	r2, [pc, #308]	; (8008700 <HAL_GPIO_Init+0x310>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d019      	beq.n	8008602 <HAL_GPIO_Init+0x212>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a4c      	ldr	r2, [pc, #304]	; (8008704 <HAL_GPIO_Init+0x314>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d013      	beq.n	80085fe <HAL_GPIO_Init+0x20e>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a4b      	ldr	r2, [pc, #300]	; (8008708 <HAL_GPIO_Init+0x318>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00d      	beq.n	80085fa <HAL_GPIO_Init+0x20a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a4a      	ldr	r2, [pc, #296]	; (800870c <HAL_GPIO_Init+0x31c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d007      	beq.n	80085f6 <HAL_GPIO_Init+0x206>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a49      	ldr	r2, [pc, #292]	; (8008710 <HAL_GPIO_Init+0x320>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d101      	bne.n	80085f2 <HAL_GPIO_Init+0x202>
 80085ee:	2306      	movs	r3, #6
 80085f0:	e00c      	b.n	800860c <HAL_GPIO_Init+0x21c>
 80085f2:	2307      	movs	r3, #7
 80085f4:	e00a      	b.n	800860c <HAL_GPIO_Init+0x21c>
 80085f6:	2305      	movs	r3, #5
 80085f8:	e008      	b.n	800860c <HAL_GPIO_Init+0x21c>
 80085fa:	2304      	movs	r3, #4
 80085fc:	e006      	b.n	800860c <HAL_GPIO_Init+0x21c>
 80085fe:	2303      	movs	r3, #3
 8008600:	e004      	b.n	800860c <HAL_GPIO_Init+0x21c>
 8008602:	2302      	movs	r3, #2
 8008604:	e002      	b.n	800860c <HAL_GPIO_Init+0x21c>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <HAL_GPIO_Init+0x21c>
 800860a:	2300      	movs	r3, #0
 800860c:	69fa      	ldr	r2, [r7, #28]
 800860e:	f002 0203 	and.w	r2, r2, #3
 8008612:	0092      	lsls	r2, r2, #2
 8008614:	4093      	lsls	r3, r2
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	4313      	orrs	r3, r2
 800861a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800861c:	4935      	ldr	r1, [pc, #212]	; (80086f4 <HAL_GPIO_Init+0x304>)
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	089b      	lsrs	r3, r3, #2
 8008622:	3302      	adds	r3, #2
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800862a:	4b3a      	ldr	r3, [pc, #232]	; (8008714 <HAL_GPIO_Init+0x324>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	43db      	mvns	r3, r3
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	4013      	ands	r3, r2
 8008638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	4313      	orrs	r3, r2
 800864c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800864e:	4a31      	ldr	r2, [pc, #196]	; (8008714 <HAL_GPIO_Init+0x324>)
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008654:	4b2f      	ldr	r3, [pc, #188]	; (8008714 <HAL_GPIO_Init+0x324>)
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	43db      	mvns	r3, r3
 800865e:	69ba      	ldr	r2, [r7, #24]
 8008660:	4013      	ands	r3, r2
 8008662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d003      	beq.n	8008678 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	4313      	orrs	r3, r2
 8008676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008678:	4a26      	ldr	r2, [pc, #152]	; (8008714 <HAL_GPIO_Init+0x324>)
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800867e:	4b25      	ldr	r3, [pc, #148]	; (8008714 <HAL_GPIO_Init+0x324>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	43db      	mvns	r3, r3
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	4013      	ands	r3, r2
 800868c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80086a2:	4a1c      	ldr	r2, [pc, #112]	; (8008714 <HAL_GPIO_Init+0x324>)
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80086a8:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <HAL_GPIO_Init+0x324>)
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	43db      	mvns	r3, r3
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	4013      	ands	r3, r2
 80086b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80086cc:	4a11      	ldr	r2, [pc, #68]	; (8008714 <HAL_GPIO_Init+0x324>)
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	3301      	adds	r3, #1
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b0f      	cmp	r3, #15
 80086dc:	f67f ae96 	bls.w	800840c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	3724      	adds	r7, #36	; 0x24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	40023800 	.word	0x40023800
 80086f4:	40013800 	.word	0x40013800
 80086f8:	40020000 	.word	0x40020000
 80086fc:	40020400 	.word	0x40020400
 8008700:	40020800 	.word	0x40020800
 8008704:	40020c00 	.word	0x40020c00
 8008708:	40021000 	.word	0x40021000
 800870c:	40021400 	.word	0x40021400
 8008710:	40021800 	.word	0x40021800
 8008714:	40013c00 	.word	0x40013c00

08008718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691a      	ldr	r2, [r3, #16]
 8008728:	887b      	ldrh	r3, [r7, #2]
 800872a:	4013      	ands	r3, r2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	e001      	b.n	800873a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800873a:	7bfb      	ldrb	r3, [r7, #15]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	807b      	strh	r3, [r7, #2]
 8008754:	4613      	mov	r3, r2
 8008756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008758:	787b      	ldrb	r3, [r7, #1]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800875e:	887a      	ldrh	r2, [r7, #2]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008764:	e003      	b.n	800876e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008766:	887b      	ldrh	r3, [r7, #2]
 8008768:	041a      	lsls	r2, r3, #16
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	619a      	str	r2, [r3, #24]
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800877a:	b480      	push	{r7}
 800877c:	b085      	sub	sp, #20
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800878c:	887a      	ldrh	r2, [r7, #2]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4013      	ands	r3, r2
 8008792:	041a      	lsls	r2, r3, #16
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	43d9      	mvns	r1, r3
 8008798:	887b      	ldrh	r3, [r7, #2]
 800879a:	400b      	ands	r3, r1
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	619a      	str	r2, [r3, #24]
}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
	...

080087b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80087ba:	4b08      	ldr	r3, [pc, #32]	; (80087dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	88fb      	ldrh	r3, [r7, #6]
 80087c0:	4013      	ands	r3, r2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d006      	beq.n	80087d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80087c6:	4a05      	ldr	r2, [pc, #20]	; (80087dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80087c8:	88fb      	ldrh	r3, [r7, #6]
 80087ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80087cc:	88fb      	ldrh	r3, [r7, #6]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fd f93c 	bl	8005a4c <HAL_GPIO_EXTI_Callback>
  }
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	40013c00 	.word	0x40013c00

080087e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e12b      	b.n	8008a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7fd fb70 	bl	8005eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2224      	movs	r2, #36	; 0x24
 8008810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0201 	bic.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008844:	f002 faf2 	bl	800ae2c <HAL_RCC_GetPCLK1Freq>
 8008848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	4a81      	ldr	r2, [pc, #516]	; (8008a54 <HAL_I2C_Init+0x274>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d807      	bhi.n	8008864 <HAL_I2C_Init+0x84>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4a80      	ldr	r2, [pc, #512]	; (8008a58 <HAL_I2C_Init+0x278>)
 8008858:	4293      	cmp	r3, r2
 800885a:	bf94      	ite	ls
 800885c:	2301      	movls	r3, #1
 800885e:	2300      	movhi	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	e006      	b.n	8008872 <HAL_I2C_Init+0x92>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4a7d      	ldr	r2, [pc, #500]	; (8008a5c <HAL_I2C_Init+0x27c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	bf94      	ite	ls
 800886c:	2301      	movls	r3, #1
 800886e:	2300      	movhi	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e0e7      	b.n	8008a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4a78      	ldr	r2, [pc, #480]	; (8008a60 <HAL_I2C_Init+0x280>)
 800887e:	fba2 2303 	umull	r2, r3, r2, r3
 8008882:	0c9b      	lsrs	r3, r3, #18
 8008884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	430a      	orrs	r2, r1
 8008898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	4a6a      	ldr	r2, [pc, #424]	; (8008a54 <HAL_I2C_Init+0x274>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d802      	bhi.n	80088b4 <HAL_I2C_Init+0xd4>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	3301      	adds	r3, #1
 80088b2:	e009      	b.n	80088c8 <HAL_I2C_Init+0xe8>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80088ba:	fb02 f303 	mul.w	r3, r2, r3
 80088be:	4a69      	ldr	r2, [pc, #420]	; (8008a64 <HAL_I2C_Init+0x284>)
 80088c0:	fba2 2303 	umull	r2, r3, r2, r3
 80088c4:	099b      	lsrs	r3, r3, #6
 80088c6:	3301      	adds	r3, #1
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6812      	ldr	r2, [r2, #0]
 80088cc:	430b      	orrs	r3, r1
 80088ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80088da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	495c      	ldr	r1, [pc, #368]	; (8008a54 <HAL_I2C_Init+0x274>)
 80088e4:	428b      	cmp	r3, r1
 80088e6:	d819      	bhi.n	800891c <HAL_I2C_Init+0x13c>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	1e59      	subs	r1, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80088f6:	1c59      	adds	r1, r3, #1
 80088f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80088fc:	400b      	ands	r3, r1
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <HAL_I2C_Init+0x138>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	1e59      	subs	r1, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008910:	3301      	adds	r3, #1
 8008912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008916:	e051      	b.n	80089bc <HAL_I2C_Init+0x1dc>
 8008918:	2304      	movs	r3, #4
 800891a:	e04f      	b.n	80089bc <HAL_I2C_Init+0x1dc>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d111      	bne.n	8008948 <HAL_I2C_Init+0x168>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	1e58      	subs	r0, r3, #1
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6859      	ldr	r1, [r3, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	440b      	add	r3, r1
 8008932:	fbb0 f3f3 	udiv	r3, r0, r3
 8008936:	3301      	adds	r3, #1
 8008938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800893c:	2b00      	cmp	r3, #0
 800893e:	bf0c      	ite	eq
 8008940:	2301      	moveq	r3, #1
 8008942:	2300      	movne	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	e012      	b.n	800896e <HAL_I2C_Init+0x18e>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	1e58      	subs	r0, r3, #1
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6859      	ldr	r1, [r3, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	0099      	lsls	r1, r3, #2
 8008958:	440b      	add	r3, r1
 800895a:	fbb0 f3f3 	udiv	r3, r0, r3
 800895e:	3301      	adds	r3, #1
 8008960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008964:	2b00      	cmp	r3, #0
 8008966:	bf0c      	ite	eq
 8008968:	2301      	moveq	r3, #1
 800896a:	2300      	movne	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_I2C_Init+0x196>
 8008972:	2301      	movs	r3, #1
 8008974:	e022      	b.n	80089bc <HAL_I2C_Init+0x1dc>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10e      	bne.n	800899c <HAL_I2C_Init+0x1bc>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1e58      	subs	r0, r3, #1
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6859      	ldr	r1, [r3, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	440b      	add	r3, r1
 800898c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008990:	3301      	adds	r3, #1
 8008992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800899a:	e00f      	b.n	80089bc <HAL_I2C_Init+0x1dc>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	1e58      	subs	r0, r3, #1
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6859      	ldr	r1, [r3, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	440b      	add	r3, r1
 80089aa:	0099      	lsls	r1, r3, #2
 80089ac:	440b      	add	r3, r1
 80089ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80089b2:	3301      	adds	r3, #1
 80089b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	6809      	ldr	r1, [r1, #0]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69da      	ldr	r2, [r3, #28]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80089ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6911      	ldr	r1, [r2, #16]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	68d2      	ldr	r2, [r2, #12]
 80089f6:	4311      	orrs	r1, r2
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	6812      	ldr	r2, [r2, #0]
 80089fc:	430b      	orrs	r3, r1
 80089fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695a      	ldr	r2, [r3, #20]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	431a      	orrs	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 0201 	orr.w	r2, r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	000186a0 	.word	0x000186a0
 8008a58:	001e847f 	.word	0x001e847f
 8008a5c:	003d08ff 	.word	0x003d08ff
 8008a60:	431bde83 	.word	0x431bde83
 8008a64:	10624dd3 	.word	0x10624dd3

08008a68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af02      	add	r7, sp, #8
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	461a      	mov	r2, r3
 8008a74:	460b      	mov	r3, r1
 8008a76:	817b      	strh	r3, [r7, #10]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a7c:	f7fd fd1e 	bl	80064bc <HAL_GetTick>
 8008a80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	f040 80e0 	bne.w	8008c50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	2319      	movs	r3, #25
 8008a96:	2201      	movs	r2, #1
 8008a98:	4970      	ldr	r1, [pc, #448]	; (8008c5c <HAL_I2C_Master_Transmit+0x1f4>)
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 fc58 	bl	8009350 <I2C_WaitOnFlagUntilTimeout>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	e0d3      	b.n	8008c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d101      	bne.n	8008ab8 <HAL_I2C_Master_Transmit+0x50>
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e0cc      	b.n	8008c52 <HAL_I2C_Master_Transmit+0x1ea>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d007      	beq.n	8008ade <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f042 0201 	orr.w	r2, r2, #1
 8008adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008aec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2221      	movs	r2, #33	; 0x21
 8008af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2210      	movs	r2, #16
 8008afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	893a      	ldrh	r2, [r7, #8]
 8008b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4a50      	ldr	r2, [pc, #320]	; (8008c60 <HAL_I2C_Master_Transmit+0x1f8>)
 8008b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008b20:	8979      	ldrh	r1, [r7, #10]
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	6a3a      	ldr	r2, [r7, #32]
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fac2 	bl	80090b0 <I2C_MasterRequestWrite>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e08d      	b.n	8008c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b36:	2300      	movs	r3, #0
 8008b38:	613b      	str	r3, [r7, #16]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	613b      	str	r3, [r7, #16]
 8008b4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008b4c:	e066      	b.n	8008c1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	6a39      	ldr	r1, [r7, #32]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 fcd2 	bl	80094fc <I2C_WaitOnTXEFlagUntilTimeout>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00d      	beq.n	8008b7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d107      	bne.n	8008b76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e06b      	b.n	8008c52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	3b01      	subs	r3, #1
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d11b      	bne.n	8008bf0 <HAL_I2C_Master_Transmit+0x188>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d017      	beq.n	8008bf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	781a      	ldrb	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	6a39      	ldr	r1, [r7, #32]
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fcc2 	bl	800957e <I2C_WaitOnBTFFlagUntilTimeout>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00d      	beq.n	8008c1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	d107      	bne.n	8008c18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e01a      	b.n	8008c52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d194      	bne.n	8008b4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e000      	b.n	8008c52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008c50:	2302      	movs	r3, #2
  }
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	00100002 	.word	0x00100002
 8008c60:	ffff0000 	.word	0xffff0000

08008c64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08c      	sub	sp, #48	; 0x30
 8008c68:	af02      	add	r7, sp, #8
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	460b      	mov	r3, r1
 8008c72:	817b      	strh	r3, [r7, #10]
 8008c74:	4613      	mov	r3, r2
 8008c76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c78:	f7fd fc20 	bl	80064bc <HAL_GetTick>
 8008c7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	f040 820b 	bne.w	80090a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	2319      	movs	r3, #25
 8008c92:	2201      	movs	r2, #1
 8008c94:	497c      	ldr	r1, [pc, #496]	; (8008e88 <HAL_I2C_Master_Receive+0x224>)
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 fb5a 	bl	8009350 <I2C_WaitOnFlagUntilTimeout>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	e1fe      	b.n	80090a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_I2C_Master_Receive+0x50>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e1f7      	b.n	80090a4 <HAL_I2C_Master_Receive+0x440>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d007      	beq.n	8008cda <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0201 	orr.w	r2, r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ce8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2222      	movs	r2, #34	; 0x22
 8008cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2210      	movs	r2, #16
 8008cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	893a      	ldrh	r2, [r7, #8]
 8008d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4a5c      	ldr	r2, [pc, #368]	; (8008e8c <HAL_I2C_Master_Receive+0x228>)
 8008d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008d1c:	8979      	ldrh	r1, [r7, #10]
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fa46 	bl	80091b4 <I2C_MasterRequestRead>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e1b8      	b.n	80090a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d113      	bne.n	8008d62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	623b      	str	r3, [r7, #32]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	623b      	str	r3, [r7, #32]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	623b      	str	r3, [r7, #32]
 8008d4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	e18c      	b.n	800907c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d11b      	bne.n	8008da2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61fb      	str	r3, [r7, #28]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	61fb      	str	r3, [r7, #28]
 8008d8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	e16c      	b.n	800907c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d11b      	bne.n	8008de2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008db8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61bb      	str	r3, [r7, #24]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	695b      	ldr	r3, [r3, #20]
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	61bb      	str	r3, [r7, #24]
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	e14c      	b.n	800907c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008df2:	2300      	movs	r3, #0
 8008df4:	617b      	str	r3, [r7, #20]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	617b      	str	r3, [r7, #20]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008e08:	e138      	b.n	800907c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	f200 80f1 	bhi.w	8008ff6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d123      	bne.n	8008e64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f000 fbed 	bl	8009600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e139      	b.n	80090a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	691a      	ldr	r2, [r3, #16]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e62:	e10b      	b.n	800907c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d14e      	bne.n	8008f0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	2200      	movs	r2, #0
 8008e74:	4906      	ldr	r1, [pc, #24]	; (8008e90 <HAL_I2C_Master_Receive+0x22c>)
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 fa6a 	bl	8009350 <I2C_WaitOnFlagUntilTimeout>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d008      	beq.n	8008e94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e10e      	b.n	80090a4 <HAL_I2C_Master_Receive+0x440>
 8008e86:	bf00      	nop
 8008e88:	00100002 	.word	0x00100002
 8008e8c:	ffff0000 	.word	0xffff0000
 8008e90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691a      	ldr	r2, [r3, #16]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	691a      	ldr	r2, [r3, #16]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	b2d2      	uxtb	r2, r2
 8008ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f08:	e0b8      	b.n	800907c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	2200      	movs	r2, #0
 8008f12:	4966      	ldr	r1, [pc, #408]	; (80090ac <HAL_I2C_Master_Receive+0x448>)
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f000 fa1b 	bl	8009350 <I2C_WaitOnFlagUntilTimeout>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e0bf      	b.n	80090a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691a      	ldr	r2, [r3, #16]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	b2d2      	uxtb	r2, r2
 8008f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	494f      	ldr	r1, [pc, #316]	; (80090ac <HAL_I2C_Master_Receive+0x448>)
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f9ed 	bl	8009350 <I2C_WaitOnFlagUntilTimeout>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e091      	b.n	80090a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	691a      	ldr	r2, [r3, #16]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fac:	3b01      	subs	r3, #1
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	691a      	ldr	r2, [r3, #16]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ff4:	e042      	b.n	800907c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 fb00 	bl	8009600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e04c      	b.n	80090a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	691a      	ldr	r2, [r3, #16]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901c:	1c5a      	adds	r2, r3, #1
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009026:	3b01      	subs	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009032:	b29b      	uxth	r3, r3
 8009034:	3b01      	subs	r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b04      	cmp	r3, #4
 8009048:	d118      	bne.n	800907c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691a      	ldr	r2, [r3, #16]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	b2d2      	uxtb	r2, r2
 8009056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009066:	3b01      	subs	r3, #1
 8009068:	b29a      	uxth	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009072:	b29b      	uxth	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009080:	2b00      	cmp	r3, #0
 8009082:	f47f aec2 	bne.w	8008e0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2220      	movs	r2, #32
 800908a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	e000      	b.n	80090a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80090a2:	2302      	movs	r3, #2
  }
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3728      	adds	r7, #40	; 0x28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	00010004 	.word	0x00010004

080090b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af02      	add	r7, sp, #8
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	607a      	str	r2, [r7, #4]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	460b      	mov	r3, r1
 80090be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d006      	beq.n	80090da <I2C_MasterRequestWrite+0x2a>
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d003      	beq.n	80090da <I2C_MasterRequestWrite+0x2a>
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090d8:	d108      	bne.n	80090ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	e00b      	b.n	8009104 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f0:	2b12      	cmp	r3, #18
 80090f2:	d107      	bne.n	8009104 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009102:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 f91d 	bl	8009350 <I2C_WaitOnFlagUntilTimeout>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00d      	beq.n	8009138 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800912a:	d103      	bne.n	8009134 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009132:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e035      	b.n	80091a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009140:	d108      	bne.n	8009154 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009142:	897b      	ldrh	r3, [r7, #10]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	461a      	mov	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009150:	611a      	str	r2, [r3, #16]
 8009152:	e01b      	b.n	800918c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009154:	897b      	ldrh	r3, [r7, #10]
 8009156:	11db      	asrs	r3, r3, #7
 8009158:	b2db      	uxtb	r3, r3
 800915a:	f003 0306 	and.w	r3, r3, #6
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f063 030f 	orn	r3, r3, #15
 8009164:	b2da      	uxtb	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	490e      	ldr	r1, [pc, #56]	; (80091ac <I2C_MasterRequestWrite+0xfc>)
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 f943 	bl	80093fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e010      	b.n	80091a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009182:	897b      	ldrh	r3, [r7, #10]
 8009184:	b2da      	uxtb	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	4907      	ldr	r1, [pc, #28]	; (80091b0 <I2C_MasterRequestWrite+0x100>)
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 f933 	bl	80093fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e000      	b.n	80091a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	00010008 	.word	0x00010008
 80091b0:	00010002 	.word	0x00010002

080091b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b088      	sub	sp, #32
 80091b8:	af02      	add	r7, sp, #8
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	607a      	str	r2, [r7, #4]
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	460b      	mov	r3, r1
 80091c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d006      	beq.n	80091ee <I2C_MasterRequestRead+0x3a>
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d003      	beq.n	80091ee <I2C_MasterRequestRead+0x3a>
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80091ec:	d108      	bne.n	8009200 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	e00b      	b.n	8009218 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009204:	2b11      	cmp	r3, #17
 8009206:	d107      	bne.n	8009218 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009216:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 f893 	bl	8009350 <I2C_WaitOnFlagUntilTimeout>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00d      	beq.n	800924c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800923e:	d103      	bne.n	8009248 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e079      	b.n	8009340 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009254:	d108      	bne.n	8009268 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009256:	897b      	ldrh	r3, [r7, #10]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	f043 0301 	orr.w	r3, r3, #1
 800925e:	b2da      	uxtb	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	611a      	str	r2, [r3, #16]
 8009266:	e05f      	b.n	8009328 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009268:	897b      	ldrh	r3, [r7, #10]
 800926a:	11db      	asrs	r3, r3, #7
 800926c:	b2db      	uxtb	r3, r3
 800926e:	f003 0306 	and.w	r3, r3, #6
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f063 030f 	orn	r3, r3, #15
 8009278:	b2da      	uxtb	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	4930      	ldr	r1, [pc, #192]	; (8009348 <I2C_MasterRequestRead+0x194>)
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 f8b9 	bl	80093fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e054      	b.n	8009340 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009296:	897b      	ldrh	r3, [r7, #10]
 8009298:	b2da      	uxtb	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	4929      	ldr	r1, [pc, #164]	; (800934c <I2C_MasterRequestRead+0x198>)
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 f8a9 	bl	80093fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e044      	b.n	8009340 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092b6:	2300      	movs	r3, #0
 80092b8:	613b      	str	r3, [r7, #16]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	613b      	str	r3, [r7, #16]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	613b      	str	r3, [r7, #16]
 80092ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f831 	bl	8009350 <I2C_WaitOnFlagUntilTimeout>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00d      	beq.n	8009310 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009302:	d103      	bne.n	800930c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800930a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e017      	b.n	8009340 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009310:	897b      	ldrh	r3, [r7, #10]
 8009312:	11db      	asrs	r3, r3, #7
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f003 0306 	and.w	r3, r3, #6
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f063 030e 	orn	r3, r3, #14
 8009320:	b2da      	uxtb	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	4907      	ldr	r1, [pc, #28]	; (800934c <I2C_MasterRequestRead+0x198>)
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 f865 	bl	80093fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e000      	b.n	8009340 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	00010008 	.word	0x00010008
 800934c:	00010002 	.word	0x00010002

08009350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	4613      	mov	r3, r2
 800935e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009360:	e025      	b.n	80093ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009368:	d021      	beq.n	80093ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800936a:	f7fd f8a7 	bl	80064bc <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	d302      	bcc.n	8009380 <I2C_WaitOnFlagUntilTimeout+0x30>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d116      	bne.n	80093ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939a:	f043 0220 	orr.w	r2, r3, #32
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e023      	b.n	80093f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	0c1b      	lsrs	r3, r3, #16
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d10d      	bne.n	80093d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	43da      	mvns	r2, r3
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	4013      	ands	r3, r2
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	bf0c      	ite	eq
 80093ca:	2301      	moveq	r3, #1
 80093cc:	2300      	movne	r3, #0
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	e00c      	b.n	80093ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	43da      	mvns	r2, r3
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4013      	ands	r3, r2
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bf0c      	ite	eq
 80093e6:	2301      	moveq	r3, #1
 80093e8:	2300      	movne	r3, #0
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	461a      	mov	r2, r3
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d0b6      	beq.n	8009362 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	60b9      	str	r1, [r7, #8]
 8009408:	607a      	str	r2, [r7, #4]
 800940a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800940c:	e051      	b.n	80094b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800941c:	d123      	bne.n	8009466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800942c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009436:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2220      	movs	r2, #32
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009452:	f043 0204 	orr.w	r2, r3, #4
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e046      	b.n	80094f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946c:	d021      	beq.n	80094b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800946e:	f7fd f825 	bl	80064bc <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	429a      	cmp	r2, r3
 800947c:	d302      	bcc.n	8009484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d116      	bne.n	80094b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2220      	movs	r2, #32
 800948e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	f043 0220 	orr.w	r2, r3, #32
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e020      	b.n	80094f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	0c1b      	lsrs	r3, r3, #16
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d10c      	bne.n	80094d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	43da      	mvns	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	4013      	ands	r3, r2
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	bf14      	ite	ne
 80094ce:	2301      	movne	r3, #1
 80094d0:	2300      	moveq	r3, #0
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	e00b      	b.n	80094ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	43da      	mvns	r2, r3
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	4013      	ands	r3, r2
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	bf14      	ite	ne
 80094e8:	2301      	movne	r3, #1
 80094ea:	2300      	moveq	r3, #0
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d18d      	bne.n	800940e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009508:	e02d      	b.n	8009566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 f8ce 	bl	80096ac <I2C_IsAcknowledgeFailed>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e02d      	b.n	8009576 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009520:	d021      	beq.n	8009566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009522:	f7fc ffcb 	bl	80064bc <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	429a      	cmp	r2, r3
 8009530:	d302      	bcc.n	8009538 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d116      	bne.n	8009566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2220      	movs	r2, #32
 8009542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	f043 0220 	orr.w	r2, r3, #32
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e007      	b.n	8009576 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009570:	2b80      	cmp	r3, #128	; 0x80
 8009572:	d1ca      	bne.n	800950a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800958a:	e02d      	b.n	80095e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f88d 	bl	80096ac <I2C_IsAcknowledgeFailed>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e02d      	b.n	80095f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a2:	d021      	beq.n	80095e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095a4:	f7fc ff8a 	bl	80064bc <HAL_GetTick>
 80095a8:	4602      	mov	r2, r0
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d302      	bcc.n	80095ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d116      	bne.n	80095e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d4:	f043 0220 	orr.w	r2, r3, #32
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e007      	b.n	80095f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	f003 0304 	and.w	r3, r3, #4
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	d1ca      	bne.n	800958c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800960c:	e042      	b.n	8009694 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	f003 0310 	and.w	r3, r3, #16
 8009618:	2b10      	cmp	r3, #16
 800961a:	d119      	bne.n	8009650 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f06f 0210 	mvn.w	r2, #16
 8009624:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2220      	movs	r2, #32
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e029      	b.n	80096a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009650:	f7fc ff34 	bl	80064bc <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	429a      	cmp	r2, r3
 800965e:	d302      	bcc.n	8009666 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d116      	bne.n	8009694 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2220      	movs	r2, #32
 8009670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009680:	f043 0220 	orr.w	r2, r3, #32
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e007      	b.n	80096a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969e:	2b40      	cmp	r3, #64	; 0x40
 80096a0:	d1b5      	bne.n	800960e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096c2:	d11b      	bne.n	80096fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2220      	movs	r2, #32
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	f043 0204 	orr.w	r2, r3, #4
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e000      	b.n	80096fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e034      	b.n	8009786 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009724:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f245 5255 	movw	r2, #21845	; 0x5555
 800972e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	6852      	ldr	r2, [r2, #4]
 8009738:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	6892      	ldr	r2, [r2, #8]
 8009742:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009744:	f7fc feba 	bl	80064bc <HAL_GetTick>
 8009748:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800974a:	e00f      	b.n	800976c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800974c:	f7fc feb6 	bl	80064bc <HAL_GetTick>
 8009750:	4602      	mov	r2, r0
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	2b31      	cmp	r3, #49	; 0x31
 8009758:	d908      	bls.n	800976c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f003 0303 	and.w	r3, r3, #3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e00c      	b.n	8009786 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e8      	bne.n	800974c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009782:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800978e:	b480      	push	{r7}
 8009790:	b083      	sub	sp, #12
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800979e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80097ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097b0:	b08f      	sub	sp, #60	; 0x3c
 80097b2:	af0a      	add	r7, sp, #40	; 0x28
 80097b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e116      	b.n	80099ee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d106      	bne.n	80097e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f00c ff98 	bl	8016710 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2203      	movs	r2, #3
 80097e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d102      	bne.n	80097fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4618      	mov	r0, r3
 8009800:	f005 fa95 	bl	800ed2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	603b      	str	r3, [r7, #0]
 800980a:	687e      	ldr	r6, [r7, #4]
 800980c:	466d      	mov	r5, sp
 800980e:	f106 0410 	add.w	r4, r6, #16
 8009812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800981a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800981e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009822:	1d33      	adds	r3, r6, #4
 8009824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009826:	6838      	ldr	r0, [r7, #0]
 8009828:	f005 f96c 	bl	800eb04 <USB_CoreInit>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d005      	beq.n	800983e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2202      	movs	r2, #2
 8009836:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e0d7      	b.n	80099ee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2100      	movs	r1, #0
 8009844:	4618      	mov	r0, r3
 8009846:	f005 fa83 	bl	800ed50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]
 800984e:	e04a      	b.n	80098e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009850:	7bfa      	ldrb	r2, [r7, #15]
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4613      	mov	r3, r2
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	333d      	adds	r3, #61	; 0x3d
 8009860:	2201      	movs	r2, #1
 8009862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009864:	7bfa      	ldrb	r2, [r7, #15]
 8009866:	6879      	ldr	r1, [r7, #4]
 8009868:	4613      	mov	r3, r2
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	1a9b      	subs	r3, r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	440b      	add	r3, r1
 8009872:	333c      	adds	r3, #60	; 0x3c
 8009874:	7bfa      	ldrb	r2, [r7, #15]
 8009876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009878:	7bfa      	ldrb	r2, [r7, #15]
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	b298      	uxth	r0, r3
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	4613      	mov	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	3342      	adds	r3, #66	; 0x42
 800988c:	4602      	mov	r2, r0
 800988e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009890:	7bfa      	ldrb	r2, [r7, #15]
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	4613      	mov	r3, r2
 8009896:	00db      	lsls	r3, r3, #3
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	440b      	add	r3, r1
 800989e:	333f      	adds	r3, #63	; 0x3f
 80098a0:	2200      	movs	r2, #0
 80098a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80098a4:	7bfa      	ldrb	r2, [r7, #15]
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	4613      	mov	r3, r2
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	1a9b      	subs	r3, r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	440b      	add	r3, r1
 80098b2:	3344      	adds	r3, #68	; 0x44
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80098b8:	7bfa      	ldrb	r2, [r7, #15]
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4613      	mov	r3, r2
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	1a9b      	subs	r3, r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	440b      	add	r3, r1
 80098c6:	3348      	adds	r3, #72	; 0x48
 80098c8:	2200      	movs	r2, #0
 80098ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80098cc:	7bfa      	ldrb	r2, [r7, #15]
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	4613      	mov	r3, r2
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	1a9b      	subs	r3, r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	3350      	adds	r3, #80	; 0x50
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	3301      	adds	r3, #1
 80098e4:	73fb      	strb	r3, [r7, #15]
 80098e6:	7bfa      	ldrb	r2, [r7, #15]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d3af      	bcc.n	8009850 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098f0:	2300      	movs	r3, #0
 80098f2:	73fb      	strb	r3, [r7, #15]
 80098f4:	e044      	b.n	8009980 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80098f6:	7bfa      	ldrb	r2, [r7, #15]
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	00db      	lsls	r3, r3, #3
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009908:	2200      	movs	r2, #0
 800990a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800990c:	7bfa      	ldrb	r2, [r7, #15]
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	4613      	mov	r3, r2
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	1a9b      	subs	r3, r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800991e:	7bfa      	ldrb	r2, [r7, #15]
 8009920:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009922:	7bfa      	ldrb	r2, [r7, #15]
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	4613      	mov	r3, r2
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	1a9b      	subs	r3, r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	440b      	add	r3, r1
 8009930:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009938:	7bfa      	ldrb	r2, [r7, #15]
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	4613      	mov	r3, r2
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	440b      	add	r3, r1
 8009946:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800994e:	7bfa      	ldrb	r2, [r7, #15]
 8009950:	6879      	ldr	r1, [r7, #4]
 8009952:	4613      	mov	r3, r2
 8009954:	00db      	lsls	r3, r3, #3
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	440b      	add	r3, r1
 800995c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009964:	7bfa      	ldrb	r2, [r7, #15]
 8009966:	6879      	ldr	r1, [r7, #4]
 8009968:	4613      	mov	r3, r2
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	1a9b      	subs	r3, r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	440b      	add	r3, r1
 8009972:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009976:	2200      	movs	r2, #0
 8009978:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800997a:	7bfb      	ldrb	r3, [r7, #15]
 800997c:	3301      	adds	r3, #1
 800997e:	73fb      	strb	r3, [r7, #15]
 8009980:	7bfa      	ldrb	r2, [r7, #15]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d3b5      	bcc.n	80098f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	687e      	ldr	r6, [r7, #4]
 8009992:	466d      	mov	r5, sp
 8009994:	f106 0410 	add.w	r4, r6, #16
 8009998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800999a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800999c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800999e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80099a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80099a8:	1d33      	adds	r3, r6, #4
 80099aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099ac:	6838      	ldr	r0, [r7, #0]
 80099ae:	f005 fa1b 	bl	800ede8 <USB_DevInit>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d005      	beq.n	80099c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2202      	movs	r2, #2
 80099bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	e014      	b.n	80099ee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d102      	bne.n	80099e2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f001 f8bf 	bl	800ab60 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f006 fa8a 	bl	800ff00 <USB_DevDisconnect>

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <HAL_PCD_Start+0x1c>
 8009a0e:	2302      	movs	r3, #2
 8009a10:	e020      	b.n	8009a54 <HAL_PCD_Start+0x5e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d109      	bne.n	8009a36 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d005      	beq.n	8009a36 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f005 f966 	bl	800ed0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f006 fa3a 	bl	800febe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009a5c:	b590      	push	{r4, r7, lr}
 8009a5e:	b08d      	sub	sp, #52	; 0x34
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f006 faf8 	bl	8010068 <USB_GetMode>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f040 83ca 	bne.w	800a214 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f006 fa5c 	bl	800ff42 <USB_ReadInterrupts>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 83c0 	beq.w	800a212 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f006 fa53 	bl	800ff42 <USB_ReadInterrupts>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f003 0302 	and.w	r3, r3, #2
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d107      	bne.n	8009ab6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	695a      	ldr	r2, [r3, #20]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f002 0202 	and.w	r2, r2, #2
 8009ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f006 fa41 	bl	800ff42 <USB_ReadInterrupts>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	f003 0310 	and.w	r3, r3, #16
 8009ac6:	2b10      	cmp	r3, #16
 8009ac8:	d161      	bne.n	8009b8e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0210 	bic.w	r2, r2, #16
 8009ad8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	f003 020f 	and.w	r2, r3, #15
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	1a9b      	subs	r3, r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	4413      	add	r3, r2
 8009af6:	3304      	adds	r3, #4
 8009af8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	0c5b      	lsrs	r3, r3, #17
 8009afe:	f003 030f 	and.w	r3, r3, #15
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d124      	bne.n	8009b50 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009b06:	69ba      	ldr	r2, [r7, #24]
 8009b08:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d035      	beq.n	8009b7e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	091b      	lsrs	r3, r3, #4
 8009b1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	6a38      	ldr	r0, [r7, #32]
 8009b26:	f006 f878 	bl	800fc1a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	091b      	lsrs	r3, r3, #4
 8009b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b36:	441a      	add	r2, r3
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	699a      	ldr	r2, [r3, #24]
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	091b      	lsrs	r3, r3, #4
 8009b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b48:	441a      	add	r2, r3
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	619a      	str	r2, [r3, #24]
 8009b4e:	e016      	b.n	8009b7e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	0c5b      	lsrs	r3, r3, #17
 8009b54:	f003 030f 	and.w	r3, r3, #15
 8009b58:	2b06      	cmp	r3, #6
 8009b5a:	d110      	bne.n	8009b7e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b62:	2208      	movs	r2, #8
 8009b64:	4619      	mov	r1, r3
 8009b66:	6a38      	ldr	r0, [r7, #32]
 8009b68:	f006 f857 	bl	800fc1a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	699a      	ldr	r2, [r3, #24]
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	091b      	lsrs	r3, r3, #4
 8009b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b78:	441a      	add	r2, r3
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699a      	ldr	r2, [r3, #24]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0210 	orr.w	r2, r2, #16
 8009b8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f006 f9d5 	bl	800ff42 <USB_ReadInterrupts>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ba2:	d16e      	bne.n	8009c82 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f006 f9db 	bl	800ff68 <USB_ReadDevAllOutEpInterrupt>
 8009bb2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009bb4:	e062      	b.n	8009c7c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d057      	beq.n	8009c70 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc6:	b2d2      	uxtb	r2, r2
 8009bc8:	4611      	mov	r1, r2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f006 fa00 	bl	800ffd0 <USB_ReadDevOutEPInterrupt>
 8009bd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	f003 0301 	and.w	r3, r3, #1
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00c      	beq.n	8009bf6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be8:	461a      	mov	r2, r3
 8009bea:	2301      	movs	r3, #1
 8009bec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fe0b 	bl	800a80c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f003 0308 	and.w	r3, r3, #8
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00c      	beq.n	8009c1a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	2308      	movs	r3, #8
 8009c10:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 ff05 	bl	800aa24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f003 0310 	and.w	r3, r3, #16
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d008      	beq.n	8009c36 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c30:	461a      	mov	r2, r3
 8009c32:	2310      	movs	r3, #16
 8009c34:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f003 0320 	and.w	r3, r3, #32
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d008      	beq.n	8009c52 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	2320      	movs	r3, #32
 8009c50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d009      	beq.n	8009c70 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c68:	461a      	mov	r2, r3
 8009c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	3301      	adds	r3, #1
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c78:	085b      	lsrs	r3, r3, #1
 8009c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d199      	bne.n	8009bb6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f006 f95b 	bl	800ff42 <USB_ReadInterrupts>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c96:	f040 80c0 	bne.w	8009e1a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f006 f97c 	bl	800ff9c <USB_ReadDevAllInEpInterrupt>
 8009ca4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009caa:	e0b2      	b.n	8009e12 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 80a7 	beq.w	8009e06 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	b2d2      	uxtb	r2, r2
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f006 f9a2 	bl	801000c <USB_ReadDevInEPInterrupt>
 8009cc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d057      	beq.n	8009d84 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	f003 030f 	and.w	r3, r3, #15
 8009cda:	2201      	movs	r2, #1
 8009cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	43db      	mvns	r3, r3
 8009cee:	69f9      	ldr	r1, [r7, #28]
 8009cf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d04:	461a      	mov	r2, r3
 8009d06:	2301      	movs	r3, #1
 8009d08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d132      	bne.n	8009d78 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009d12:	6879      	ldr	r1, [r7, #4]
 8009d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d16:	4613      	mov	r3, r2
 8009d18:	00db      	lsls	r3, r3, #3
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	440b      	add	r3, r1
 8009d20:	3348      	adds	r3, #72	; 0x48
 8009d22:	6819      	ldr	r1, [r3, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d28:	4613      	mov	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4403      	add	r3, r0
 8009d32:	3344      	adds	r3, #68	; 0x44
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4419      	add	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	00db      	lsls	r3, r3, #3
 8009d40:	1a9b      	subs	r3, r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4403      	add	r3, r0
 8009d46:	3348      	adds	r3, #72	; 0x48
 8009d48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d113      	bne.n	8009d78 <HAL_PCD_IRQHandler+0x31c>
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d54:	4613      	mov	r3, r2
 8009d56:	00db      	lsls	r3, r3, #3
 8009d58:	1a9b      	subs	r3, r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	3350      	adds	r3, #80	; 0x50
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d108      	bne.n	8009d78 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6818      	ldr	r0, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d70:	461a      	mov	r2, r3
 8009d72:	2101      	movs	r1, #1
 8009d74:	f006 f9aa 	bl	80100cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f00c fd55 	bl	801682e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f003 0308 	and.w	r3, r3, #8
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d008      	beq.n	8009da0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	2308      	movs	r3, #8
 8009d9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f003 0310 	and.w	r3, r3, #16
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db6:	461a      	mov	r2, r3
 8009db8:	2310      	movs	r3, #16
 8009dba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d008      	beq.n	8009dd8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	2340      	movs	r3, #64	; 0x40
 8009dd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d008      	beq.n	8009df4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dee:	461a      	mov	r2, r3
 8009df0:	2302      	movs	r3, #2
 8009df2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009dfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fc75 	bl	800a6f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	3301      	adds	r3, #1
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	085b      	lsrs	r3, r3, #1
 8009e10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f47f af49 	bne.w	8009cac <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f006 f88f 	bl	800ff42 <USB_ReadInterrupts>
 8009e24:	4603      	mov	r3, r0
 8009e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e2e:	d122      	bne.n	8009e76 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	69fa      	ldr	r2, [r7, #28]
 8009e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e3e:	f023 0301 	bic.w	r3, r3, #1
 8009e42:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d108      	bne.n	8009e60 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009e56:	2100      	movs	r1, #0
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f00c ff57 	bl	8016d0c <HAL_PCDEx_LPM_Callback>
 8009e5e:	e002      	b.n	8009e66 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f00c fd5b 	bl	801691c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	695a      	ldr	r2, [r3, #20]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f006 f861 	bl	800ff42 <USB_ReadInterrupts>
 8009e80:	4603      	mov	r3, r0
 8009e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e8a:	d112      	bne.n	8009eb2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f003 0301 	and.w	r3, r3, #1
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d102      	bne.n	8009ea2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f00c fd17 	bl	80168d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	695a      	ldr	r2, [r3, #20]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009eb0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f006 f843 	bl	800ff42 <USB_ReadInterrupts>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ec6:	d121      	bne.n	8009f0c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	695a      	ldr	r2, [r3, #20]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009ed6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d111      	bne.n	8009f06 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef0:	089b      	lsrs	r3, r3, #2
 8009ef2:	f003 020f 	and.w	r2, r3, #15
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009efc:	2101      	movs	r1, #1
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f00c ff04 	bl	8016d0c <HAL_PCDEx_LPM_Callback>
 8009f04:	e002      	b.n	8009f0c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f00c fce2 	bl	80168d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f006 f816 	bl	800ff42 <USB_ReadInterrupts>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f20:	f040 80c7 	bne.w	800a0b2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	69fa      	ldr	r2, [r7, #28]
 8009f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f32:	f023 0301 	bic.w	r3, r3, #1
 8009f36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2110      	movs	r1, #16
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f005 f8b0 	bl	800f0a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f44:	2300      	movs	r3, #0
 8009f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f48:	e056      	b.n	8009ff8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f56:	461a      	mov	r2, r3
 8009f58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f6e:	0151      	lsls	r1, r2, #5
 8009f70:	69fa      	ldr	r2, [r7, #28]
 8009f72:	440a      	add	r2, r1
 8009f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f7c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f80:	015a      	lsls	r2, r3, #5
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f8e:	0151      	lsls	r1, r2, #5
 8009f90:	69fa      	ldr	r2, [r7, #28]
 8009f92:	440a      	add	r2, r1
 8009f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009faa:	461a      	mov	r2, r3
 8009fac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009fb0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fc2:	0151      	lsls	r1, r2, #5
 8009fc4:	69fa      	ldr	r2, [r7, #28]
 8009fc6:	440a      	add	r2, r1
 8009fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009fd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe2:	0151      	lsls	r1, r2, #5
 8009fe4:	69fa      	ldr	r2, [r7, #28]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ff0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d3a3      	bcc.n	8009f4a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a010:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a014:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d016      	beq.n	800a04c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a02e:	f043 030b 	orr.w	r3, r3, #11
 800a032:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03e:	69fa      	ldr	r2, [r7, #28]
 800a040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a044:	f043 030b 	orr.w	r3, r3, #11
 800a048:	6453      	str	r3, [r2, #68]	; 0x44
 800a04a:	e015      	b.n	800a078 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	69fa      	ldr	r2, [r7, #28]
 800a056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a05a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a05e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a062:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	69fa      	ldr	r2, [r7, #28]
 800a06e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a072:	f043 030b 	orr.w	r3, r3, #11
 800a076:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	69fa      	ldr	r2, [r7, #28]
 800a082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a086:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a08a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a09c:	461a      	mov	r2, r3
 800a09e:	f006 f815 	bl	80100cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	695a      	ldr	r2, [r3, #20]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a0b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f005 ff43 	bl	800ff42 <USB_ReadInterrupts>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c6:	d124      	bne.n	800a112 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f005 ffd9 	bl	8010084 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f005 f841 	bl	800f15e <USB_GetDevSpeed>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	461a      	mov	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681c      	ldr	r4, [r3, #0]
 800a0e8:	f000 fe94 	bl	800ae14 <HAL_RCC_GetHCLKFreq>
 800a0ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f004 fd66 	bl	800ebc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f00c fbbe 	bl	801687e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	695a      	ldr	r2, [r3, #20]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a110:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4618      	mov	r0, r3
 800a118:	f005 ff13 	bl	800ff42 <USB_ReadInterrupts>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f003 0308 	and.w	r3, r3, #8
 800a122:	2b08      	cmp	r3, #8
 800a124:	d10a      	bne.n	800a13c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f00c fb9b 	bl	8016862 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	695a      	ldr	r2, [r3, #20]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f002 0208 	and.w	r2, r2, #8
 800a13a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4618      	mov	r0, r3
 800a142:	f005 fefe 	bl	800ff42 <USB_ReadInterrupts>
 800a146:	4603      	mov	r3, r0
 800a148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a14c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a150:	d10f      	bne.n	800a172 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f00c fbfd 	bl	801695c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	695a      	ldr	r2, [r3, #20]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4618      	mov	r0, r3
 800a178:	f005 fee3 	bl	800ff42 <USB_ReadInterrupts>
 800a17c:	4603      	mov	r3, r0
 800a17e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a186:	d10f      	bne.n	800a1a8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	4619      	mov	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f00c fbd0 	bl	8016938 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	695a      	ldr	r2, [r3, #20]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a1a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f005 fec8 	bl	800ff42 <USB_ReadInterrupts>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1bc:	d10a      	bne.n	800a1d4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f00c fbde 	bl	8016980 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	695a      	ldr	r2, [r3, #20]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a1d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f005 feb2 	bl	800ff42 <USB_ReadInterrupts>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f003 0304 	and.w	r3, r3, #4
 800a1e4:	2b04      	cmp	r3, #4
 800a1e6:	d115      	bne.n	800a214 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f003 0304 	and.w	r3, r3, #4
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d002      	beq.n	800a200 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f00c fbce 	bl	801699c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6859      	ldr	r1, [r3, #4]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	69ba      	ldr	r2, [r7, #24]
 800a20c:	430a      	orrs	r2, r1
 800a20e:	605a      	str	r2, [r3, #4]
 800a210:	e000      	b.n	800a214 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800a212:	bf00      	nop
    }
  }
}
 800a214:	3734      	adds	r7, #52	; 0x34
 800a216:	46bd      	mov	sp, r7
 800a218:	bd90      	pop	{r4, r7, pc}

0800a21a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b082      	sub	sp, #8
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	460b      	mov	r3, r1
 800a224:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d101      	bne.n	800a234 <HAL_PCD_SetAddress+0x1a>
 800a230:	2302      	movs	r3, #2
 800a232:	e013      	b.n	800a25c <HAL_PCD_SetAddress+0x42>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	78fa      	ldrb	r2, [r7, #3]
 800a240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	78fa      	ldrb	r2, [r7, #3]
 800a24a:	4611      	mov	r1, r2
 800a24c:	4618      	mov	r0, r3
 800a24e:	f005 fe10 	bl	800fe72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	4608      	mov	r0, r1
 800a26e:	4611      	mov	r1, r2
 800a270:	461a      	mov	r2, r3
 800a272:	4603      	mov	r3, r0
 800a274:	70fb      	strb	r3, [r7, #3]
 800a276:	460b      	mov	r3, r1
 800a278:	803b      	strh	r3, [r7, #0]
 800a27a:	4613      	mov	r3, r2
 800a27c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a286:	2b00      	cmp	r3, #0
 800a288:	da0f      	bge.n	800a2aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a28a:	78fb      	ldrb	r3, [r7, #3]
 800a28c:	f003 020f 	and.w	r2, r3, #15
 800a290:	4613      	mov	r3, r2
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	1a9b      	subs	r3, r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	3338      	adds	r3, #56	; 0x38
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	4413      	add	r3, r2
 800a29e:	3304      	adds	r3, #4
 800a2a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	705a      	strb	r2, [r3, #1]
 800a2a8:	e00f      	b.n	800a2ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2aa:	78fb      	ldrb	r3, [r7, #3]
 800a2ac:	f003 020f 	and.w	r2, r3, #15
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	1a9b      	subs	r3, r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	4413      	add	r3, r2
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	f003 030f 	and.w	r3, r3, #15
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a2d6:	883a      	ldrh	r2, [r7, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	78ba      	ldrb	r2, [r7, #2]
 800a2e0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	785b      	ldrb	r3, [r3, #1]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d004      	beq.n	800a2f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a2f4:	78bb      	ldrb	r3, [r7, #2]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d102      	bne.n	800a300 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a306:	2b01      	cmp	r3, #1
 800a308:	d101      	bne.n	800a30e <HAL_PCD_EP_Open+0xaa>
 800a30a:	2302      	movs	r3, #2
 800a30c:	e00e      	b.n	800a32c <HAL_PCD_EP_Open+0xc8>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68f9      	ldr	r1, [r7, #12]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f004 ff43 	bl	800f1a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a32a:	7afb      	ldrb	r3, [r7, #11]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a344:	2b00      	cmp	r3, #0
 800a346:	da0f      	bge.n	800a368 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	f003 020f 	and.w	r2, r3, #15
 800a34e:	4613      	mov	r3, r2
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	1a9b      	subs	r3, r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	3338      	adds	r3, #56	; 0x38
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	4413      	add	r3, r2
 800a35c:	3304      	adds	r3, #4
 800a35e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2201      	movs	r2, #1
 800a364:	705a      	strb	r2, [r3, #1]
 800a366:	e00f      	b.n	800a388 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a368:	78fb      	ldrb	r3, [r7, #3]
 800a36a:	f003 020f 	and.w	r2, r3, #15
 800a36e:	4613      	mov	r3, r2
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	1a9b      	subs	r3, r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	4413      	add	r3, r2
 800a37e:	3304      	adds	r3, #4
 800a380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a388:	78fb      	ldrb	r3, [r7, #3]
 800a38a:	f003 030f 	and.w	r3, r3, #15
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d101      	bne.n	800a3a2 <HAL_PCD_EP_Close+0x6e>
 800a39e:	2302      	movs	r3, #2
 800a3a0:	e00e      	b.n	800a3c0 <HAL_PCD_EP_Close+0x8c>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68f9      	ldr	r1, [r7, #12]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f004 ff81 	bl	800f2b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	607a      	str	r2, [r7, #4]
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3d8:	7afb      	ldrb	r3, [r7, #11]
 800a3da:	f003 020f 	and.w	r2, r3, #15
 800a3de:	4613      	mov	r3, r2
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	1a9b      	subs	r3, r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2200      	movs	r2, #0
 800a402:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2200      	movs	r2, #0
 800a408:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a40a:	7afb      	ldrb	r3, [r7, #11]
 800a40c:	f003 030f 	and.w	r3, r3, #15
 800a410:	b2da      	uxtb	r2, r3
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d102      	bne.n	800a424 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a424:	7afb      	ldrb	r3, [r7, #11]
 800a426:	f003 030f 	and.w	r3, r3, #15
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d109      	bne.n	800a442 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6818      	ldr	r0, [r3, #0]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	b2db      	uxtb	r3, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	6979      	ldr	r1, [r7, #20]
 800a43c:	f005 fa5c 	bl	800f8f8 <USB_EP0StartXfer>
 800a440:	e008      	b.n	800a454 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6818      	ldr	r0, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	461a      	mov	r2, r3
 800a44e:	6979      	ldr	r1, [r7, #20]
 800a450:	f005 f80e 	bl	800f470 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	460b      	mov	r3, r1
 800a468:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a46a:	78fb      	ldrb	r3, [r7, #3]
 800a46c:	f003 020f 	and.w	r2, r3, #15
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	4613      	mov	r3, r2
 800a474:	00db      	lsls	r3, r3, #3
 800a476:	1a9b      	subs	r3, r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	440b      	add	r3, r1
 800a47c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a480:	681b      	ldr	r3, [r3, #0]
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b086      	sub	sp, #24
 800a492:	af00      	add	r7, sp, #0
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	607a      	str	r2, [r7, #4]
 800a498:	603b      	str	r3, [r7, #0]
 800a49a:	460b      	mov	r3, r1
 800a49c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a49e:	7afb      	ldrb	r3, [r7, #11]
 800a4a0:	f003 020f 	and.w	r2, r3, #15
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	1a9b      	subs	r3, r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	3338      	adds	r3, #56	; 0x38
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d102      	bne.n	800a4e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a4e8:	7afb      	ldrb	r3, [r7, #11]
 800a4ea:	f003 030f 	and.w	r3, r3, #15
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d109      	bne.n	800a506 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	6979      	ldr	r1, [r7, #20]
 800a500:	f005 f9fa 	bl	800f8f8 <USB_EP0StartXfer>
 800a504:	e008      	b.n	800a518 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6818      	ldr	r0, [r3, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	461a      	mov	r2, r3
 800a512:	6979      	ldr	r1, [r7, #20]
 800a514:	f004 ffac 	bl	800f470 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3718      	adds	r7, #24
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	460b      	mov	r3, r1
 800a52c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a52e:	78fb      	ldrb	r3, [r7, #3]
 800a530:	f003 020f 	and.w	r2, r3, #15
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d901      	bls.n	800a540 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e050      	b.n	800a5e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a544:	2b00      	cmp	r3, #0
 800a546:	da0f      	bge.n	800a568 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a548:	78fb      	ldrb	r3, [r7, #3]
 800a54a:	f003 020f 	and.w	r2, r3, #15
 800a54e:	4613      	mov	r3, r2
 800a550:	00db      	lsls	r3, r3, #3
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	3338      	adds	r3, #56	; 0x38
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	4413      	add	r3, r2
 800a55c:	3304      	adds	r3, #4
 800a55e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2201      	movs	r2, #1
 800a564:	705a      	strb	r2, [r3, #1]
 800a566:	e00d      	b.n	800a584 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a568:	78fa      	ldrb	r2, [r7, #3]
 800a56a:	4613      	mov	r3, r2
 800a56c:	00db      	lsls	r3, r3, #3
 800a56e:	1a9b      	subs	r3, r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	4413      	add	r3, r2
 800a57a:	3304      	adds	r3, #4
 800a57c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2201      	movs	r2, #1
 800a588:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	f003 030f 	and.w	r3, r3, #15
 800a590:	b2da      	uxtb	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d101      	bne.n	800a5a4 <HAL_PCD_EP_SetStall+0x82>
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	e01e      	b.n	800a5e2 <HAL_PCD_EP_SetStall+0xc0>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68f9      	ldr	r1, [r7, #12]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f005 fb89 	bl	800fcca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5b8:	78fb      	ldrb	r3, [r7, #3]
 800a5ba:	f003 030f 	and.w	r3, r3, #15
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6818      	ldr	r0, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	b2d9      	uxtb	r1, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f005 fd7a 	bl	80100cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a5f6:	78fb      	ldrb	r3, [r7, #3]
 800a5f8:	f003 020f 	and.w	r2, r3, #15
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	429a      	cmp	r2, r3
 800a602:	d901      	bls.n	800a608 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e042      	b.n	800a68e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	da0f      	bge.n	800a630 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	f003 020f 	and.w	r2, r3, #15
 800a616:	4613      	mov	r3, r2
 800a618:	00db      	lsls	r3, r3, #3
 800a61a:	1a9b      	subs	r3, r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	3338      	adds	r3, #56	; 0x38
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	4413      	add	r3, r2
 800a624:	3304      	adds	r3, #4
 800a626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2201      	movs	r2, #1
 800a62c:	705a      	strb	r2, [r3, #1]
 800a62e:	e00f      	b.n	800a650 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a630:	78fb      	ldrb	r3, [r7, #3]
 800a632:	f003 020f 	and.w	r2, r3, #15
 800a636:	4613      	mov	r3, r2
 800a638:	00db      	lsls	r3, r3, #3
 800a63a:	1a9b      	subs	r3, r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	4413      	add	r3, r2
 800a646:	3304      	adds	r3, #4
 800a648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a656:	78fb      	ldrb	r3, [r7, #3]
 800a658:	f003 030f 	and.w	r3, r3, #15
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d101      	bne.n	800a670 <HAL_PCD_EP_ClrStall+0x86>
 800a66c:	2302      	movs	r3, #2
 800a66e:	e00e      	b.n	800a68e <HAL_PCD_EP_ClrStall+0xa4>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68f9      	ldr	r1, [r7, #12]
 800a67e:	4618      	mov	r0, r3
 800a680:	f005 fb91 	bl	800fda6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b082      	sub	sp, #8
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d101      	bne.n	800a6b0 <HAL_PCD_EP_Flush+0x1a>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e01b      	b.n	800a6e8 <HAL_PCD_EP_Flush+0x52>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800a6b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da09      	bge.n	800a6d4 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	f003 030f 	and.w	r3, r3, #15
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	f004 fce9 	bl	800f0a4 <USB_FlushTxFifo>
 800a6d2:	e004      	b.n	800a6de <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f004 fd07 	bl	800f0ec <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08a      	sub	sp, #40	; 0x28
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	4613      	mov	r3, r2
 800a708:	00db      	lsls	r3, r3, #3
 800a70a:	1a9b      	subs	r3, r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	3338      	adds	r3, #56	; 0x38
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	4413      	add	r3, r2
 800a714:	3304      	adds	r3, #4
 800a716:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	699a      	ldr	r2, [r3, #24]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	695b      	ldr	r3, [r3, #20]
 800a720:	429a      	cmp	r2, r3
 800a722:	d901      	bls.n	800a728 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e06c      	b.n	800a802 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	695a      	ldr	r2, [r3, #20]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	69fa      	ldr	r2, [r7, #28]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d902      	bls.n	800a744 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	3303      	adds	r3, #3
 800a748:	089b      	lsrs	r3, r3, #2
 800a74a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a74c:	e02b      	b.n	800a7a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	695a      	ldr	r2, [r3, #20]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	429a      	cmp	r2, r3
 800a762:	d902      	bls.n	800a76a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	3303      	adds	r3, #3
 800a76e:	089b      	lsrs	r3, r3, #2
 800a770:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	68d9      	ldr	r1, [r3, #12]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a782:	b2db      	uxtb	r3, r3
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	4603      	mov	r3, r0
 800a788:	6978      	ldr	r0, [r7, #20]
 800a78a:	f005 fa08 	bl	800fb9e <USB_WritePacket>

    ep->xfer_buff  += len;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	68da      	ldr	r2, [r3, #12]
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	441a      	add	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	441a      	add	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d809      	bhi.n	800a7d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	699a      	ldr	r2, [r3, #24]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d203      	bcs.n	800a7d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1be      	bne.n	800a74e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	695a      	ldr	r2, [r3, #20]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d811      	bhi.n	800a800 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	f003 030f 	and.w	r3, r3, #15
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	43db      	mvns	r3, r3
 800a7f6:	6939      	ldr	r1, [r7, #16]
 800a7f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3720      	adds	r7, #32
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
	...

0800a80c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	333c      	adds	r3, #60	; 0x3c
 800a824:	3304      	adds	r3, #4
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	015a      	lsls	r2, r3, #5
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	4413      	add	r3, r2
 800a832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	f040 80a0 	bne.w	800a984 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f003 0308 	and.w	r3, r3, #8
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d015      	beq.n	800a87a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	4a72      	ldr	r2, [pc, #456]	; (800aa1c <PCD_EP_OutXfrComplete_int+0x210>)
 800a852:	4293      	cmp	r3, r2
 800a854:	f240 80dd 	bls.w	800aa12 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f000 80d7 	beq.w	800aa12 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a870:	461a      	mov	r2, r3
 800a872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a876:	6093      	str	r3, [r2, #8]
 800a878:	e0cb      	b.n	800aa12 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b00      	cmp	r3, #0
 800a882:	d009      	beq.n	800a898 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a890:	461a      	mov	r2, r3
 800a892:	2320      	movs	r3, #32
 800a894:	6093      	str	r3, [r2, #8]
 800a896:	e0bc      	b.n	800aa12 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f040 80b7 	bne.w	800aa12 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	4a5d      	ldr	r2, [pc, #372]	; (800aa1c <PCD_EP_OutXfrComplete_int+0x210>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d90f      	bls.n	800a8cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	015a      	lsls	r2, r3, #5
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	4413      	add	r3, r2
 800a8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8c8:	6093      	str	r3, [r2, #8]
 800a8ca:	e0a2      	b.n	800aa12 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a8cc:	6879      	ldr	r1, [r7, #4]
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	00db      	lsls	r3, r3, #3
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	440b      	add	r3, r1
 800a8da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a8de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	0159      	lsls	r1, r3, #5
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	440b      	add	r3, r1
 800a8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a8f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	1a9b      	subs	r3, r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4403      	add	r3, r0
 800a902:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a906:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a908:	6879      	ldr	r1, [r7, #4]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	4613      	mov	r3, r2
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	1a9b      	subs	r3, r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a91a:	6819      	ldr	r1, [r3, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	4613      	mov	r3, r2
 800a922:	00db      	lsls	r3, r3, #3
 800a924:	1a9b      	subs	r3, r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4403      	add	r3, r0
 800a92a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4419      	add	r1, r3
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	4613      	mov	r3, r2
 800a938:	00db      	lsls	r3, r3, #3
 800a93a:	1a9b      	subs	r3, r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4403      	add	r3, r0
 800a940:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a944:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d114      	bne.n	800a976 <PCD_EP_OutXfrComplete_int+0x16a>
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	4613      	mov	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	440b      	add	r3, r1
 800a95a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d108      	bne.n	800a976 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6818      	ldr	r0, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a96e:	461a      	mov	r2, r3
 800a970:	2101      	movs	r1, #1
 800a972:	f005 fbab 	bl	80100cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f00b ff3b 	bl	80167f8 <HAL_PCD_DataOutStageCallback>
 800a982:	e046      	b.n	800aa12 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4a26      	ldr	r2, [pc, #152]	; (800aa20 <PCD_EP_OutXfrComplete_int+0x214>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d124      	bne.n	800a9d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00a      	beq.n	800a9ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9a8:	6093      	str	r3, [r2, #8]
 800a9aa:	e032      	b.n	800aa12 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	f003 0320 	and.w	r3, r3, #32
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d008      	beq.n	800a9c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	015a      	lsls	r2, r3, #5
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	4413      	add	r3, r2
 800a9be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	2320      	movs	r3, #32
 800a9c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f00b ff12 	bl	80167f8 <HAL_PCD_DataOutStageCallback>
 800a9d4:	e01d      	b.n	800aa12 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d114      	bne.n	800aa06 <PCD_EP_OutXfrComplete_int+0x1fa>
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	00db      	lsls	r3, r3, #3
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	440b      	add	r3, r1
 800a9ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d108      	bne.n	800aa06 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a9fe:	461a      	mov	r2, r3
 800aa00:	2100      	movs	r1, #0
 800aa02:	f005 fb63 	bl	80100cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f00b fef3 	bl	80167f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	4f54300a 	.word	0x4f54300a
 800aa20:	4f54310a 	.word	0x4f54310a

0800aa24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	333c      	adds	r3, #60	; 0x3c
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	4a15      	ldr	r2, [pc, #84]	; (800aaac <PCD_EP_OutSetupPacket_int+0x88>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d90e      	bls.n	800aa78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d009      	beq.n	800aa78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa70:	461a      	mov	r2, r3
 800aa72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f00b feab 	bl	80167d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	4a0a      	ldr	r2, [pc, #40]	; (800aaac <PCD_EP_OutSetupPacket_int+0x88>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d90c      	bls.n	800aaa0 <PCD_EP_OutSetupPacket_int+0x7c>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d108      	bne.n	800aaa0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa98:	461a      	mov	r2, r3
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	f005 fb16 	bl	80100cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	4f54300a 	.word	0x4f54300a

0800aab0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70fb      	strb	r3, [r7, #3]
 800aabc:	4613      	mov	r3, r2
 800aabe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800aac8:	78fb      	ldrb	r3, [r7, #3]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d107      	bne.n	800aade <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800aace:	883b      	ldrh	r3, [r7, #0]
 800aad0:	0419      	lsls	r1, r3, #16
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	430a      	orrs	r2, r1
 800aada:	629a      	str	r2, [r3, #40]	; 0x28
 800aadc:	e028      	b.n	800ab30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae4:	0c1b      	lsrs	r3, r3, #16
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	4413      	add	r3, r2
 800aaea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aaec:	2300      	movs	r3, #0
 800aaee:	73fb      	strb	r3, [r7, #15]
 800aaf0:	e00d      	b.n	800ab0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	3340      	adds	r3, #64	; 0x40
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	0c1b      	lsrs	r3, r3, #16
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	4413      	add	r3, r2
 800ab06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	73fb      	strb	r3, [r7, #15]
 800ab0e:	7bfa      	ldrb	r2, [r7, #15]
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	3b01      	subs	r3, #1
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d3ec      	bcc.n	800aaf2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ab18:	883b      	ldrh	r3, [r7, #0]
 800ab1a:	0418      	lsls	r0, r3, #16
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6819      	ldr	r1, [r3, #0]
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	4302      	orrs	r2, r0
 800ab28:	3340      	adds	r3, #64	; 0x40
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b083      	sub	sp, #12
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	460b      	mov	r3, r1
 800ab48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	887a      	ldrh	r2, [r7, #2]
 800ab50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab92:	f043 0303 	orr.w	r3, r3, #3
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800abae:	2300      	movs	r3, #0
 800abb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800abb2:	2300      	movs	r3, #0
 800abb4:	603b      	str	r3, [r7, #0]
 800abb6:	4b20      	ldr	r3, [pc, #128]	; (800ac38 <HAL_PWREx_EnableOverDrive+0x90>)
 800abb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abba:	4a1f      	ldr	r2, [pc, #124]	; (800ac38 <HAL_PWREx_EnableOverDrive+0x90>)
 800abbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abc0:	6413      	str	r3, [r2, #64]	; 0x40
 800abc2:	4b1d      	ldr	r3, [pc, #116]	; (800ac38 <HAL_PWREx_EnableOverDrive+0x90>)
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800abce:	4b1b      	ldr	r3, [pc, #108]	; (800ac3c <HAL_PWREx_EnableOverDrive+0x94>)
 800abd0:	2201      	movs	r2, #1
 800abd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800abd4:	f7fb fc72 	bl	80064bc <HAL_GetTick>
 800abd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800abda:	e009      	b.n	800abf0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800abdc:	f7fb fc6e 	bl	80064bc <HAL_GetTick>
 800abe0:	4602      	mov	r2, r0
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abea:	d901      	bls.n	800abf0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800abec:	2303      	movs	r3, #3
 800abee:	e01f      	b.n	800ac30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800abf0:	4b13      	ldr	r3, [pc, #76]	; (800ac40 <HAL_PWREx_EnableOverDrive+0x98>)
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abfc:	d1ee      	bne.n	800abdc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800abfe:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac00:	2201      	movs	r2, #1
 800ac02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac04:	f7fb fc5a 	bl	80064bc <HAL_GetTick>
 800ac08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac0a:	e009      	b.n	800ac20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac0c:	f7fb fc56 	bl	80064bc <HAL_GetTick>
 800ac10:	4602      	mov	r2, r0
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac1a:	d901      	bls.n	800ac20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e007      	b.n	800ac30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac20:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac2c:	d1ee      	bne.n	800ac0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	40023800 	.word	0x40023800
 800ac3c:	420e0040 	.word	0x420e0040
 800ac40:	40007000 	.word	0x40007000
 800ac44:	420e0044 	.word	0x420e0044

0800ac48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e0cc      	b.n	800adf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ac5c:	4b68      	ldr	r3, [pc, #416]	; (800ae00 <HAL_RCC_ClockConfig+0x1b8>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 030f 	and.w	r3, r3, #15
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d90c      	bls.n	800ac84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac6a:	4b65      	ldr	r3, [pc, #404]	; (800ae00 <HAL_RCC_ClockConfig+0x1b8>)
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	b2d2      	uxtb	r2, r2
 800ac70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac72:	4b63      	ldr	r3, [pc, #396]	; (800ae00 <HAL_RCC_ClockConfig+0x1b8>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 030f 	and.w	r3, r3, #15
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d001      	beq.n	800ac84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e0b8      	b.n	800adf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d020      	beq.n	800acd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0304 	and.w	r3, r3, #4
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d005      	beq.n	800aca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac9c:	4b59      	ldr	r3, [pc, #356]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	4a58      	ldr	r2, [pc, #352]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800aca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 0308 	and.w	r3, r3, #8
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d005      	beq.n	800acc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800acb4:	4b53      	ldr	r3, [pc, #332]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	4a52      	ldr	r2, [pc, #328]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800acba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800acbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acc0:	4b50      	ldr	r3, [pc, #320]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	494d      	ldr	r1, [pc, #308]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800acce:	4313      	orrs	r3, r2
 800acd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 0301 	and.w	r3, r3, #1
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d044      	beq.n	800ad68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d107      	bne.n	800acf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ace6:	4b47      	ldr	r3, [pc, #284]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d119      	bne.n	800ad26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e07f      	b.n	800adf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d003      	beq.n	800ad06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad02:	2b03      	cmp	r3, #3
 800ad04:	d107      	bne.n	800ad16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad06:	4b3f      	ldr	r3, [pc, #252]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d109      	bne.n	800ad26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e06f      	b.n	800adf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad16:	4b3b      	ldr	r3, [pc, #236]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e067      	b.n	800adf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad26:	4b37      	ldr	r3, [pc, #220]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f023 0203 	bic.w	r2, r3, #3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	4934      	ldr	r1, [pc, #208]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800ad34:	4313      	orrs	r3, r2
 800ad36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad38:	f7fb fbc0 	bl	80064bc <HAL_GetTick>
 800ad3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad3e:	e00a      	b.n	800ad56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad40:	f7fb fbbc 	bl	80064bc <HAL_GetTick>
 800ad44:	4602      	mov	r2, r0
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d901      	bls.n	800ad56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e04f      	b.n	800adf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad56:	4b2b      	ldr	r3, [pc, #172]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f003 020c 	and.w	r2, r3, #12
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d1eb      	bne.n	800ad40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ad68:	4b25      	ldr	r3, [pc, #148]	; (800ae00 <HAL_RCC_ClockConfig+0x1b8>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 030f 	and.w	r3, r3, #15
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d20c      	bcs.n	800ad90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad76:	4b22      	ldr	r3, [pc, #136]	; (800ae00 <HAL_RCC_ClockConfig+0x1b8>)
 800ad78:	683a      	ldr	r2, [r7, #0]
 800ad7a:	b2d2      	uxtb	r2, r2
 800ad7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad7e:	4b20      	ldr	r3, [pc, #128]	; (800ae00 <HAL_RCC_ClockConfig+0x1b8>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 030f 	and.w	r3, r3, #15
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d001      	beq.n	800ad90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e032      	b.n	800adf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d008      	beq.n	800adae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad9c:	4b19      	ldr	r3, [pc, #100]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	4916      	ldr	r1, [pc, #88]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800adaa:	4313      	orrs	r3, r2
 800adac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 0308 	and.w	r3, r3, #8
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d009      	beq.n	800adce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800adba:	4b12      	ldr	r3, [pc, #72]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	490e      	ldr	r1, [pc, #56]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800adca:	4313      	orrs	r3, r2
 800adcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800adce:	f000 fb6b 	bl	800b4a8 <HAL_RCC_GetSysClockFreq>
 800add2:	4602      	mov	r2, r0
 800add4:	4b0b      	ldr	r3, [pc, #44]	; (800ae04 <HAL_RCC_ClockConfig+0x1bc>)
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	091b      	lsrs	r3, r3, #4
 800adda:	f003 030f 	and.w	r3, r3, #15
 800adde:	490a      	ldr	r1, [pc, #40]	; (800ae08 <HAL_RCC_ClockConfig+0x1c0>)
 800ade0:	5ccb      	ldrb	r3, [r1, r3]
 800ade2:	fa22 f303 	lsr.w	r3, r2, r3
 800ade6:	4a09      	ldr	r2, [pc, #36]	; (800ae0c <HAL_RCC_ClockConfig+0x1c4>)
 800ade8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800adea:	4b09      	ldr	r3, [pc, #36]	; (800ae10 <HAL_RCC_ClockConfig+0x1c8>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fb fb20 	bl	8006434 <HAL_InitTick>

  return HAL_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	40023c00 	.word	0x40023c00
 800ae04:	40023800 	.word	0x40023800
 800ae08:	080177bc 	.word	0x080177bc
 800ae0c:	20000000 	.word	0x20000000
 800ae10:	20000004 	.word	0x20000004

0800ae14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae14:	b480      	push	{r7}
 800ae16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae18:	4b03      	ldr	r3, [pc, #12]	; (800ae28 <HAL_RCC_GetHCLKFreq+0x14>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	20000000 	.word	0x20000000

0800ae2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ae30:	f7ff fff0 	bl	800ae14 <HAL_RCC_GetHCLKFreq>
 800ae34:	4602      	mov	r2, r0
 800ae36:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	0a9b      	lsrs	r3, r3, #10
 800ae3c:	f003 0307 	and.w	r3, r3, #7
 800ae40:	4903      	ldr	r1, [pc, #12]	; (800ae50 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae42:	5ccb      	ldrb	r3, [r1, r3]
 800ae44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	40023800 	.word	0x40023800
 800ae50:	080177cc 	.word	0x080177cc

0800ae54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b08c      	sub	sp, #48	; 0x30
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800ae60:	2300      	movs	r3, #0
 800ae62:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800ae70:	2300      	movs	r3, #0
 800ae72:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 0301 	and.w	r3, r3, #1
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d010      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800ae8c:	4b6f      	ldr	r3, [pc, #444]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ae8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae92:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae9a:	496c      	ldr	r1, [pc, #432]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d010      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800aeba:	4b64      	ldr	r3, [pc, #400]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec8:	4960      	ldr	r1, [pc, #384]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800aed8:	2301      	movs	r3, #1
 800aeda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0304 	and.w	r3, r3, #4
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d017      	beq.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aee8:	4b58      	ldr	r3, [pc, #352]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aeea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef6:	4955      	ldr	r1, [pc, #340]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af06:	d101      	bne.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800af08:	2301      	movs	r3, #1
 800af0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800af14:	2301      	movs	r3, #1
 800af16:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0308 	and.w	r3, r3, #8
 800af20:	2b00      	cmp	r3, #0
 800af22:	d017      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800af24:	4b49      	ldr	r3, [pc, #292]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af32:	4946      	ldr	r1, [pc, #280]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af34:	4313      	orrs	r3, r2
 800af36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af42:	d101      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800af44:	2301      	movs	r3, #1
 800af46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d101      	bne.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800af50:	2301      	movs	r3, #1
 800af52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 0320 	and.w	r3, r3, #32
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 808a 	beq.w	800b076 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800af62:	2300      	movs	r3, #0
 800af64:	60bb      	str	r3, [r7, #8]
 800af66:	4b39      	ldr	r3, [pc, #228]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6a:	4a38      	ldr	r2, [pc, #224]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af70:	6413      	str	r3, [r2, #64]	; 0x40
 800af72:	4b36      	ldr	r3, [pc, #216]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af7a:	60bb      	str	r3, [r7, #8]
 800af7c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800af7e:	4b34      	ldr	r3, [pc, #208]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a33      	ldr	r2, [pc, #204]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800af84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af8a:	f7fb fa97 	bl	80064bc <HAL_GetTick>
 800af8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800af90:	e008      	b.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800af92:	f7fb fa93 	bl	80064bc <HAL_GetTick>
 800af96:	4602      	mov	r2, r0
 800af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d901      	bls.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e278      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800afa4:	4b2a      	ldr	r3, [pc, #168]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afac:	2b00      	cmp	r3, #0
 800afae:	d0f0      	beq.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800afb0:	4b26      	ldr	r3, [pc, #152]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afb8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d02f      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afc8:	6a3a      	ldr	r2, [r7, #32]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d028      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afce:	4b1f      	ldr	r3, [pc, #124]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afd6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800afd8:	4b1e      	ldr	r3, [pc, #120]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800afda:	2201      	movs	r2, #1
 800afdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800afde:	4b1d      	ldr	r3, [pc, #116]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800afe4:	4a19      	ldr	r2, [pc, #100]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800afea:	4b18      	ldr	r3, [pc, #96]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d114      	bne.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800aff6:	f7fb fa61 	bl	80064bc <HAL_GetTick>
 800affa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800affc:	e00a      	b.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800affe:	f7fb fa5d 	bl	80064bc <HAL_GetTick>
 800b002:	4602      	mov	r2, r0
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	f241 3288 	movw	r2, #5000	; 0x1388
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d901      	bls.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800b010:	2303      	movs	r3, #3
 800b012:	e240      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b014:	4b0d      	ldr	r3, [pc, #52]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b018:	f003 0302 	and.w	r3, r3, #2
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0ee      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b02c:	d114      	bne.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800b02e:	4b07      	ldr	r3, [pc, #28]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b03e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b042:	4902      	ldr	r1, [pc, #8]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b044:	4313      	orrs	r3, r2
 800b046:	608b      	str	r3, [r1, #8]
 800b048:	e00c      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b04a:	bf00      	nop
 800b04c:	40023800 	.word	0x40023800
 800b050:	40007000 	.word	0x40007000
 800b054:	42470e40 	.word	0x42470e40
 800b058:	4b4a      	ldr	r3, [pc, #296]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	4a49      	ldr	r2, [pc, #292]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b05e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b062:	6093      	str	r3, [r2, #8]
 800b064:	4b47      	ldr	r3, [pc, #284]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b070:	4944      	ldr	r1, [pc, #272]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b072:	4313      	orrs	r3, r2
 800b074:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0310 	and.w	r3, r3, #16
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d004      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b088:	4b3f      	ldr	r3, [pc, #252]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800b08a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00a      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800b098:	4b3a      	ldr	r3, [pc, #232]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b09a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b09e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0a6:	4937      	ldr	r1, [pc, #220]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b0ba:	4b32      	ldr	r3, [pc, #200]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b0bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0c0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0c8:	492e      	ldr	r1, [pc, #184]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d011      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b0dc:	4b29      	ldr	r3, [pc, #164]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b0de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0e2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ea:	4926      	ldr	r1, [pc, #152]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0fa:	d101      	bne.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b10c:	4b1d      	ldr	r3, [pc, #116]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b10e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b112:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11a:	491a      	ldr	r1, [pc, #104]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b11c:	4313      	orrs	r3, r2
 800b11e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d011      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b12e:	4b15      	ldr	r3, [pc, #84]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b134:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b13c:	4911      	ldr	r1, [pc, #68]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b13e:	4313      	orrs	r3, r2
 800b140:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b14c:	d101      	bne.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b14e:	2301      	movs	r3, #1
 800b150:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b154:	2b01      	cmp	r3, #1
 800b156:	d005      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b160:	f040 80ff 	bne.w	800b362 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b164:	4b09      	ldr	r3, [pc, #36]	; (800b18c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b16a:	f7fb f9a7 	bl	80064bc <HAL_GetTick>
 800b16e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b170:	e00e      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b172:	f7fb f9a3 	bl	80064bc <HAL_GetTick>
 800b176:	4602      	mov	r2, r0
 800b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d907      	bls.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	e188      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b184:	40023800 	.word	0x40023800
 800b188:	424711e0 	.word	0x424711e0
 800b18c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b190:	4b7e      	ldr	r3, [pc, #504]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1ea      	bne.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d009      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d028      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d124      	bne.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b1c4:	4b71      	ldr	r3, [pc, #452]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1ca:	0c1b      	lsrs	r3, r3, #16
 800b1cc:	f003 0303 	and.w	r3, r3, #3
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b1d6:	4b6d      	ldr	r3, [pc, #436]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1dc:	0e1b      	lsrs	r3, r3, #24
 800b1de:	f003 030f 	and.w	r3, r3, #15
 800b1e2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	019b      	lsls	r3, r3, #6
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	085b      	lsrs	r3, r3, #1
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	041b      	lsls	r3, r3, #16
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	061b      	lsls	r3, r3, #24
 800b1fe:	431a      	orrs	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	695b      	ldr	r3, [r3, #20]
 800b204:	071b      	lsls	r3, r3, #28
 800b206:	4961      	ldr	r1, [pc, #388]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b208:	4313      	orrs	r3, r2
 800b20a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 0304 	and.w	r3, r3, #4
 800b216:	2b00      	cmp	r3, #0
 800b218:	d004      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b222:	d00a      	beq.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d035      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b238:	d130      	bne.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b23a:	4b54      	ldr	r3, [pc, #336]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b240:	0c1b      	lsrs	r3, r3, #16
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	3301      	adds	r3, #1
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b24c:	4b4f      	ldr	r3, [pc, #316]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b252:	0f1b      	lsrs	r3, r3, #28
 800b254:	f003 0307 	and.w	r3, r3, #7
 800b258:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685a      	ldr	r2, [r3, #4]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	019b      	lsls	r3, r3, #6
 800b264:	431a      	orrs	r2, r3
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	085b      	lsrs	r3, r3, #1
 800b26a:	3b01      	subs	r3, #1
 800b26c:	041b      	lsls	r3, r3, #16
 800b26e:	431a      	orrs	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	061b      	lsls	r3, r3, #24
 800b276:	431a      	orrs	r2, r3
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	071b      	lsls	r3, r3, #28
 800b27c:	4943      	ldr	r1, [pc, #268]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b284:	4b41      	ldr	r3, [pc, #260]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b28a:	f023 021f 	bic.w	r2, r3, #31
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b292:	3b01      	subs	r3, #1
 800b294:	493d      	ldr	r1, [pc, #244]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b296:	4313      	orrs	r3, r2
 800b298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d029      	beq.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2b0:	d124      	bne.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b2b2:	4b36      	ldr	r3, [pc, #216]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2b8:	0c1b      	lsrs	r3, r3, #16
 800b2ba:	f003 0303 	and.w	r3, r3, #3
 800b2be:	3301      	adds	r3, #1
 800b2c0:	005b      	lsls	r3, r3, #1
 800b2c2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b2c4:	4b31      	ldr	r3, [pc, #196]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2ca:	0f1b      	lsrs	r3, r3, #28
 800b2cc:	f003 0307 	and.w	r3, r3, #7
 800b2d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	019b      	lsls	r3, r3, #6
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	085b      	lsrs	r3, r3, #1
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	041b      	lsls	r3, r3, #16
 800b2e8:	431a      	orrs	r2, r3
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	061b      	lsls	r3, r3, #24
 800b2ee:	431a      	orrs	r2, r3
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	071b      	lsls	r3, r3, #28
 800b2f4:	4925      	ldr	r1, [pc, #148]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b304:	2b00      	cmp	r3, #0
 800b306:	d016      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	019b      	lsls	r3, r3, #6
 800b312:	431a      	orrs	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	085b      	lsrs	r3, r3, #1
 800b31a:	3b01      	subs	r3, #1
 800b31c:	041b      	lsls	r3, r3, #16
 800b31e:	431a      	orrs	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	061b      	lsls	r3, r3, #24
 800b326:	431a      	orrs	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	071b      	lsls	r3, r3, #28
 800b32e:	4917      	ldr	r1, [pc, #92]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b330:	4313      	orrs	r3, r2
 800b332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b336:	4b16      	ldr	r3, [pc, #88]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800b338:	2201      	movs	r2, #1
 800b33a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b33c:	f7fb f8be 	bl	80064bc <HAL_GetTick>
 800b340:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b342:	e008      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b344:	f7fb f8ba 	bl	80064bc <HAL_GetTick>
 800b348:	4602      	mov	r2, r0
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d901      	bls.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b352:	2303      	movs	r3, #3
 800b354:	e09f      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b356:	4b0d      	ldr	r3, [pc, #52]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d0f0      	beq.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	2b01      	cmp	r3, #1
 800b366:	f040 8095 	bne.w	800b494 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b36a:	4b0a      	ldr	r3, [pc, #40]	; (800b394 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b370:	f7fb f8a4 	bl	80064bc <HAL_GetTick>
 800b374:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b376:	e00f      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b378:	f7fb f8a0 	bl	80064bc <HAL_GetTick>
 800b37c:	4602      	mov	r2, r0
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	2b02      	cmp	r3, #2
 800b384:	d908      	bls.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e085      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b38a:	bf00      	nop
 800b38c:	40023800 	.word	0x40023800
 800b390:	42470068 	.word	0x42470068
 800b394:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b398:	4b41      	ldr	r3, [pc, #260]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3a4:	d0e8      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0304 	and.w	r3, r3, #4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x566>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d009      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d02b      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d127      	bne.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b3ce:	4b34      	ldr	r3, [pc, #208]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3d4:	0c1b      	lsrs	r3, r3, #16
 800b3d6:	f003 0303 	and.w	r3, r3, #3
 800b3da:	3301      	adds	r3, #1
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	699a      	ldr	r2, [r3, #24]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	69db      	ldr	r3, [r3, #28]
 800b3e8:	019b      	lsls	r3, r3, #6
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	085b      	lsrs	r3, r3, #1
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	041b      	lsls	r3, r3, #16
 800b3f4:	431a      	orrs	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	061b      	lsls	r3, r3, #24
 800b3fc:	4928      	ldr	r1, [pc, #160]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b3fe:	4313      	orrs	r3, r2
 800b400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b404:	4b26      	ldr	r3, [pc, #152]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b40a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b412:	3b01      	subs	r3, #1
 800b414:	021b      	lsls	r3, r3, #8
 800b416:	4922      	ldr	r1, [pc, #136]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b426:	2b00      	cmp	r3, #0
 800b428:	d01d      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b42e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b432:	d118      	bne.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b434:	4b1a      	ldr	r3, [pc, #104]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b43a:	0e1b      	lsrs	r3, r3, #24
 800b43c:	f003 030f 	and.w	r3, r3, #15
 800b440:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	699a      	ldr	r2, [r3, #24]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	69db      	ldr	r3, [r3, #28]
 800b44a:	019b      	lsls	r3, r3, #6
 800b44c:	431a      	orrs	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	085b      	lsrs	r3, r3, #1
 800b454:	3b01      	subs	r3, #1
 800b456:	041b      	lsls	r3, r3, #16
 800b458:	431a      	orrs	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	061b      	lsls	r3, r3, #24
 800b45e:	4910      	ldr	r1, [pc, #64]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b460:	4313      	orrs	r3, r2
 800b462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b466:	4b0f      	ldr	r3, [pc, #60]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800b468:	2201      	movs	r2, #1
 800b46a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b46c:	f7fb f826 	bl	80064bc <HAL_GetTick>
 800b470:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b472:	e008      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b474:	f7fb f822 	bl	80064bc <HAL_GetTick>
 800b478:	4602      	mov	r2, r0
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d901      	bls.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e007      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b486:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b48e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b492:	d1ef      	bne.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3730      	adds	r7, #48	; 0x30
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	40023800 	.word	0x40023800
 800b4a4:	42470070 	.word	0x42470070

0800b4a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4ac:	b088      	sub	sp, #32
 800b4ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b4c4:	4bce      	ldr	r3, [pc, #824]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	f003 030c 	and.w	r3, r3, #12
 800b4cc:	2b0c      	cmp	r3, #12
 800b4ce:	f200 818d 	bhi.w	800b7ec <HAL_RCC_GetSysClockFreq+0x344>
 800b4d2:	a201      	add	r2, pc, #4	; (adr r2, 800b4d8 <HAL_RCC_GetSysClockFreq+0x30>)
 800b4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d8:	0800b50d 	.word	0x0800b50d
 800b4dc:	0800b7ed 	.word	0x0800b7ed
 800b4e0:	0800b7ed 	.word	0x0800b7ed
 800b4e4:	0800b7ed 	.word	0x0800b7ed
 800b4e8:	0800b513 	.word	0x0800b513
 800b4ec:	0800b7ed 	.word	0x0800b7ed
 800b4f0:	0800b7ed 	.word	0x0800b7ed
 800b4f4:	0800b7ed 	.word	0x0800b7ed
 800b4f8:	0800b519 	.word	0x0800b519
 800b4fc:	0800b7ed 	.word	0x0800b7ed
 800b500:	0800b7ed 	.word	0x0800b7ed
 800b504:	0800b7ed 	.word	0x0800b7ed
 800b508:	0800b68d 	.word	0x0800b68d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b50c:	4bbd      	ldr	r3, [pc, #756]	; (800b804 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b50e:	61bb      	str	r3, [r7, #24]
       break;
 800b510:	e16f      	b.n	800b7f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b512:	4bbd      	ldr	r3, [pc, #756]	; (800b808 <HAL_RCC_GetSysClockFreq+0x360>)
 800b514:	61bb      	str	r3, [r7, #24]
      break;
 800b516:	e16c      	b.n	800b7f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b518:	4bb9      	ldr	r3, [pc, #740]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b520:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b522:	4bb7      	ldr	r3, [pc, #732]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d053      	beq.n	800b5d6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b52e:	4bb4      	ldr	r3, [pc, #720]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	099b      	lsrs	r3, r3, #6
 800b534:	461a      	mov	r2, r3
 800b536:	f04f 0300 	mov.w	r3, #0
 800b53a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b53e:	f04f 0100 	mov.w	r1, #0
 800b542:	ea02 0400 	and.w	r4, r2, r0
 800b546:	603c      	str	r4, [r7, #0]
 800b548:	400b      	ands	r3, r1
 800b54a:	607b      	str	r3, [r7, #4]
 800b54c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b550:	4620      	mov	r0, r4
 800b552:	4629      	mov	r1, r5
 800b554:	f04f 0200 	mov.w	r2, #0
 800b558:	f04f 0300 	mov.w	r3, #0
 800b55c:	014b      	lsls	r3, r1, #5
 800b55e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b562:	0142      	lsls	r2, r0, #5
 800b564:	4610      	mov	r0, r2
 800b566:	4619      	mov	r1, r3
 800b568:	4623      	mov	r3, r4
 800b56a:	1ac0      	subs	r0, r0, r3
 800b56c:	462b      	mov	r3, r5
 800b56e:	eb61 0103 	sbc.w	r1, r1, r3
 800b572:	f04f 0200 	mov.w	r2, #0
 800b576:	f04f 0300 	mov.w	r3, #0
 800b57a:	018b      	lsls	r3, r1, #6
 800b57c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b580:	0182      	lsls	r2, r0, #6
 800b582:	1a12      	subs	r2, r2, r0
 800b584:	eb63 0301 	sbc.w	r3, r3, r1
 800b588:	f04f 0000 	mov.w	r0, #0
 800b58c:	f04f 0100 	mov.w	r1, #0
 800b590:	00d9      	lsls	r1, r3, #3
 800b592:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b596:	00d0      	lsls	r0, r2, #3
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4621      	mov	r1, r4
 800b59e:	1852      	adds	r2, r2, r1
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	eb43 0101 	adc.w	r1, r3, r1
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	f04f 0000 	mov.w	r0, #0
 800b5ac:	f04f 0100 	mov.w	r1, #0
 800b5b0:	0259      	lsls	r1, r3, #9
 800b5b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b5b6:	0250      	lsls	r0, r2, #9
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4619      	mov	r1, r3
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f04f 0300 	mov.w	r3, #0
 800b5c8:	f7f4 fe72 	bl	80002b0 <__aeabi_uldivmod>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	61fb      	str	r3, [r7, #28]
 800b5d4:	e04c      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5d6:	4b8a      	ldr	r3, [pc, #552]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	099b      	lsrs	r3, r3, #6
 800b5dc:	461a      	mov	r2, r3
 800b5de:	f04f 0300 	mov.w	r3, #0
 800b5e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b5e6:	f04f 0100 	mov.w	r1, #0
 800b5ea:	ea02 0a00 	and.w	sl, r2, r0
 800b5ee:	ea03 0b01 	and.w	fp, r3, r1
 800b5f2:	4650      	mov	r0, sl
 800b5f4:	4659      	mov	r1, fp
 800b5f6:	f04f 0200 	mov.w	r2, #0
 800b5fa:	f04f 0300 	mov.w	r3, #0
 800b5fe:	014b      	lsls	r3, r1, #5
 800b600:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b604:	0142      	lsls	r2, r0, #5
 800b606:	4610      	mov	r0, r2
 800b608:	4619      	mov	r1, r3
 800b60a:	ebb0 000a 	subs.w	r0, r0, sl
 800b60e:	eb61 010b 	sbc.w	r1, r1, fp
 800b612:	f04f 0200 	mov.w	r2, #0
 800b616:	f04f 0300 	mov.w	r3, #0
 800b61a:	018b      	lsls	r3, r1, #6
 800b61c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b620:	0182      	lsls	r2, r0, #6
 800b622:	1a12      	subs	r2, r2, r0
 800b624:	eb63 0301 	sbc.w	r3, r3, r1
 800b628:	f04f 0000 	mov.w	r0, #0
 800b62c:	f04f 0100 	mov.w	r1, #0
 800b630:	00d9      	lsls	r1, r3, #3
 800b632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b636:	00d0      	lsls	r0, r2, #3
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	eb12 020a 	adds.w	r2, r2, sl
 800b640:	eb43 030b 	adc.w	r3, r3, fp
 800b644:	f04f 0000 	mov.w	r0, #0
 800b648:	f04f 0100 	mov.w	r1, #0
 800b64c:	0299      	lsls	r1, r3, #10
 800b64e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b652:	0290      	lsls	r0, r2, #10
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4610      	mov	r0, r2
 800b65a:	4619      	mov	r1, r3
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	461a      	mov	r2, r3
 800b660:	f04f 0300 	mov.w	r3, #0
 800b664:	f7f4 fe24 	bl	80002b0 <__aeabi_uldivmod>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	4613      	mov	r3, r2
 800b66e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b670:	4b63      	ldr	r3, [pc, #396]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	0c1b      	lsrs	r3, r3, #16
 800b676:	f003 0303 	and.w	r3, r3, #3
 800b67a:	3301      	adds	r3, #1
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800b680:	69fa      	ldr	r2, [r7, #28]
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	fbb2 f3f3 	udiv	r3, r2, r3
 800b688:	61bb      	str	r3, [r7, #24]
      break;
 800b68a:	e0b2      	b.n	800b7f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b68c:	4b5c      	ldr	r3, [pc, #368]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b694:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b696:	4b5a      	ldr	r3, [pc, #360]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d04d      	beq.n	800b73e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6a2:	4b57      	ldr	r3, [pc, #348]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	099b      	lsrs	r3, r3, #6
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	f04f 0300 	mov.w	r3, #0
 800b6ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b6b2:	f04f 0100 	mov.w	r1, #0
 800b6b6:	ea02 0800 	and.w	r8, r2, r0
 800b6ba:	ea03 0901 	and.w	r9, r3, r1
 800b6be:	4640      	mov	r0, r8
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	f04f 0200 	mov.w	r2, #0
 800b6c6:	f04f 0300 	mov.w	r3, #0
 800b6ca:	014b      	lsls	r3, r1, #5
 800b6cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b6d0:	0142      	lsls	r2, r0, #5
 800b6d2:	4610      	mov	r0, r2
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	ebb0 0008 	subs.w	r0, r0, r8
 800b6da:	eb61 0109 	sbc.w	r1, r1, r9
 800b6de:	f04f 0200 	mov.w	r2, #0
 800b6e2:	f04f 0300 	mov.w	r3, #0
 800b6e6:	018b      	lsls	r3, r1, #6
 800b6e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b6ec:	0182      	lsls	r2, r0, #6
 800b6ee:	1a12      	subs	r2, r2, r0
 800b6f0:	eb63 0301 	sbc.w	r3, r3, r1
 800b6f4:	f04f 0000 	mov.w	r0, #0
 800b6f8:	f04f 0100 	mov.w	r1, #0
 800b6fc:	00d9      	lsls	r1, r3, #3
 800b6fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b702:	00d0      	lsls	r0, r2, #3
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	eb12 0208 	adds.w	r2, r2, r8
 800b70c:	eb43 0309 	adc.w	r3, r3, r9
 800b710:	f04f 0000 	mov.w	r0, #0
 800b714:	f04f 0100 	mov.w	r1, #0
 800b718:	0259      	lsls	r1, r3, #9
 800b71a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b71e:	0250      	lsls	r0, r2, #9
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4610      	mov	r0, r2
 800b726:	4619      	mov	r1, r3
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f04f 0300 	mov.w	r3, #0
 800b730:	f7f4 fdbe 	bl	80002b0 <__aeabi_uldivmod>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4613      	mov	r3, r2
 800b73a:	61fb      	str	r3, [r7, #28]
 800b73c:	e04a      	b.n	800b7d4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b73e:	4b30      	ldr	r3, [pc, #192]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	099b      	lsrs	r3, r3, #6
 800b744:	461a      	mov	r2, r3
 800b746:	f04f 0300 	mov.w	r3, #0
 800b74a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b74e:	f04f 0100 	mov.w	r1, #0
 800b752:	ea02 0400 	and.w	r4, r2, r0
 800b756:	ea03 0501 	and.w	r5, r3, r1
 800b75a:	4620      	mov	r0, r4
 800b75c:	4629      	mov	r1, r5
 800b75e:	f04f 0200 	mov.w	r2, #0
 800b762:	f04f 0300 	mov.w	r3, #0
 800b766:	014b      	lsls	r3, r1, #5
 800b768:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b76c:	0142      	lsls	r2, r0, #5
 800b76e:	4610      	mov	r0, r2
 800b770:	4619      	mov	r1, r3
 800b772:	1b00      	subs	r0, r0, r4
 800b774:	eb61 0105 	sbc.w	r1, r1, r5
 800b778:	f04f 0200 	mov.w	r2, #0
 800b77c:	f04f 0300 	mov.w	r3, #0
 800b780:	018b      	lsls	r3, r1, #6
 800b782:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b786:	0182      	lsls	r2, r0, #6
 800b788:	1a12      	subs	r2, r2, r0
 800b78a:	eb63 0301 	sbc.w	r3, r3, r1
 800b78e:	f04f 0000 	mov.w	r0, #0
 800b792:	f04f 0100 	mov.w	r1, #0
 800b796:	00d9      	lsls	r1, r3, #3
 800b798:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b79c:	00d0      	lsls	r0, r2, #3
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	1912      	adds	r2, r2, r4
 800b7a4:	eb45 0303 	adc.w	r3, r5, r3
 800b7a8:	f04f 0000 	mov.w	r0, #0
 800b7ac:	f04f 0100 	mov.w	r1, #0
 800b7b0:	0299      	lsls	r1, r3, #10
 800b7b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b7b6:	0290      	lsls	r0, r2, #10
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4610      	mov	r0, r2
 800b7be:	4619      	mov	r1, r3
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f04f 0300 	mov.w	r3, #0
 800b7c8:	f7f4 fd72 	bl	80002b0 <__aeabi_uldivmod>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b7d4:	4b0a      	ldr	r3, [pc, #40]	; (800b800 <HAL_RCC_GetSysClockFreq+0x358>)
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	0f1b      	lsrs	r3, r3, #28
 800b7da:	f003 0307 	and.w	r3, r3, #7
 800b7de:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800b7e0:	69fa      	ldr	r2, [r7, #28]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e8:	61bb      	str	r3, [r7, #24]
      break;
 800b7ea:	e002      	b.n	800b7f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b7ec:	4b05      	ldr	r3, [pc, #20]	; (800b804 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b7ee:	61bb      	str	r3, [r7, #24]
      break;
 800b7f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b7f2:	69bb      	ldr	r3, [r7, #24]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7fe:	bf00      	nop
 800b800:	40023800 	.word	0x40023800
 800b804:	00f42400 	.word	0x00f42400
 800b808:	007a1200 	.word	0x007a1200

0800b80c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e28d      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 8083 	beq.w	800b932 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b82c:	4b94      	ldr	r3, [pc, #592]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	f003 030c 	and.w	r3, r3, #12
 800b834:	2b04      	cmp	r3, #4
 800b836:	d019      	beq.n	800b86c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b838:	4b91      	ldr	r3, [pc, #580]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b840:	2b08      	cmp	r3, #8
 800b842:	d106      	bne.n	800b852 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b844:	4b8e      	ldr	r3, [pc, #568]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b84c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b850:	d00c      	beq.n	800b86c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b852:	4b8b      	ldr	r3, [pc, #556]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b85a:	2b0c      	cmp	r3, #12
 800b85c:	d112      	bne.n	800b884 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b85e:	4b88      	ldr	r3, [pc, #544]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b86a:	d10b      	bne.n	800b884 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b86c:	4b84      	ldr	r3, [pc, #528]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d05b      	beq.n	800b930 <HAL_RCC_OscConfig+0x124>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d157      	bne.n	800b930 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e25a      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b88c:	d106      	bne.n	800b89c <HAL_RCC_OscConfig+0x90>
 800b88e:	4b7c      	ldr	r3, [pc, #496]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a7b      	ldr	r2, [pc, #492]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	e01d      	b.n	800b8d8 <HAL_RCC_OscConfig+0xcc>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8a4:	d10c      	bne.n	800b8c0 <HAL_RCC_OscConfig+0xb4>
 800b8a6:	4b76      	ldr	r3, [pc, #472]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a75      	ldr	r2, [pc, #468]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b8ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	4b73      	ldr	r3, [pc, #460]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a72      	ldr	r2, [pc, #456]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b8b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8bc:	6013      	str	r3, [r2, #0]
 800b8be:	e00b      	b.n	800b8d8 <HAL_RCC_OscConfig+0xcc>
 800b8c0:	4b6f      	ldr	r3, [pc, #444]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a6e      	ldr	r2, [pc, #440]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b8c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8ca:	6013      	str	r3, [r2, #0]
 800b8cc:	4b6c      	ldr	r3, [pc, #432]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a6b      	ldr	r2, [pc, #428]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b8d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d013      	beq.n	800b908 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8e0:	f7fa fdec 	bl	80064bc <HAL_GetTick>
 800b8e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8e6:	e008      	b.n	800b8fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b8e8:	f7fa fde8 	bl	80064bc <HAL_GetTick>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	2b64      	cmp	r3, #100	; 0x64
 800b8f4:	d901      	bls.n	800b8fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	e21f      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8fa:	4b61      	ldr	r3, [pc, #388]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0f0      	beq.n	800b8e8 <HAL_RCC_OscConfig+0xdc>
 800b906:	e014      	b.n	800b932 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b908:	f7fa fdd8 	bl	80064bc <HAL_GetTick>
 800b90c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b90e:	e008      	b.n	800b922 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b910:	f7fa fdd4 	bl	80064bc <HAL_GetTick>
 800b914:	4602      	mov	r2, r0
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	2b64      	cmp	r3, #100	; 0x64
 800b91c:	d901      	bls.n	800b922 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b91e:	2303      	movs	r3, #3
 800b920:	e20b      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b922:	4b57      	ldr	r3, [pc, #348]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1f0      	bne.n	800b910 <HAL_RCC_OscConfig+0x104>
 800b92e:	e000      	b.n	800b932 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 0302 	and.w	r3, r3, #2
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d06f      	beq.n	800ba1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b93e:	4b50      	ldr	r3, [pc, #320]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	f003 030c 	and.w	r3, r3, #12
 800b946:	2b00      	cmp	r3, #0
 800b948:	d017      	beq.n	800b97a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b94a:	4b4d      	ldr	r3, [pc, #308]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b952:	2b08      	cmp	r3, #8
 800b954:	d105      	bne.n	800b962 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b956:	4b4a      	ldr	r3, [pc, #296]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00b      	beq.n	800b97a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b962:	4b47      	ldr	r3, [pc, #284]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b96a:	2b0c      	cmp	r3, #12
 800b96c:	d11c      	bne.n	800b9a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b96e:	4b44      	ldr	r3, [pc, #272]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b976:	2b00      	cmp	r3, #0
 800b978:	d116      	bne.n	800b9a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b97a:	4b41      	ldr	r3, [pc, #260]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 0302 	and.w	r3, r3, #2
 800b982:	2b00      	cmp	r3, #0
 800b984:	d005      	beq.n	800b992 <HAL_RCC_OscConfig+0x186>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d001      	beq.n	800b992 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e1d3      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b992:	4b3b      	ldr	r3, [pc, #236]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	4937      	ldr	r1, [pc, #220]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b9a6:	e03a      	b.n	800ba1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d020      	beq.n	800b9f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b9b0:	4b34      	ldr	r3, [pc, #208]	; (800ba84 <HAL_RCC_OscConfig+0x278>)
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9b6:	f7fa fd81 	bl	80064bc <HAL_GetTick>
 800b9ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9bc:	e008      	b.n	800b9d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b9be:	f7fa fd7d 	bl	80064bc <HAL_GetTick>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	d901      	bls.n	800b9d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	e1b4      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9d0:	4b2b      	ldr	r3, [pc, #172]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 0302 	and.w	r3, r3, #2
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d0f0      	beq.n	800b9be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9dc:	4b28      	ldr	r3, [pc, #160]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	4925      	ldr	r1, [pc, #148]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	600b      	str	r3, [r1, #0]
 800b9f0:	e015      	b.n	800ba1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b9f2:	4b24      	ldr	r3, [pc, #144]	; (800ba84 <HAL_RCC_OscConfig+0x278>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9f8:	f7fa fd60 	bl	80064bc <HAL_GetTick>
 800b9fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9fe:	e008      	b.n	800ba12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ba00:	f7fa fd5c 	bl	80064bc <HAL_GetTick>
 800ba04:	4602      	mov	r2, r0
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d901      	bls.n	800ba12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	e193      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba12:	4b1b      	ldr	r3, [pc, #108]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f003 0302 	and.w	r3, r3, #2
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1f0      	bne.n	800ba00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d036      	beq.n	800ba98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d016      	beq.n	800ba60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba32:	4b15      	ldr	r3, [pc, #84]	; (800ba88 <HAL_RCC_OscConfig+0x27c>)
 800ba34:	2201      	movs	r2, #1
 800ba36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba38:	f7fa fd40 	bl	80064bc <HAL_GetTick>
 800ba3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba3e:	e008      	b.n	800ba52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ba40:	f7fa fd3c 	bl	80064bc <HAL_GetTick>
 800ba44:	4602      	mov	r2, r0
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d901      	bls.n	800ba52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800ba4e:	2303      	movs	r3, #3
 800ba50:	e173      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba52:	4b0b      	ldr	r3, [pc, #44]	; (800ba80 <HAL_RCC_OscConfig+0x274>)
 800ba54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba56:	f003 0302 	and.w	r3, r3, #2
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d0f0      	beq.n	800ba40 <HAL_RCC_OscConfig+0x234>
 800ba5e:	e01b      	b.n	800ba98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba60:	4b09      	ldr	r3, [pc, #36]	; (800ba88 <HAL_RCC_OscConfig+0x27c>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba66:	f7fa fd29 	bl	80064bc <HAL_GetTick>
 800ba6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba6c:	e00e      	b.n	800ba8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ba6e:	f7fa fd25 	bl	80064bc <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d907      	bls.n	800ba8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e15c      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
 800ba80:	40023800 	.word	0x40023800
 800ba84:	42470000 	.word	0x42470000
 800ba88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba8c:	4b8a      	ldr	r3, [pc, #552]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800ba8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba90:	f003 0302 	and.w	r3, r3, #2
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1ea      	bne.n	800ba6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f003 0304 	and.w	r3, r3, #4
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 8097 	beq.w	800bbd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800baa6:	2300      	movs	r3, #0
 800baa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800baaa:	4b83      	ldr	r3, [pc, #524]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800baac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10f      	bne.n	800bad6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bab6:	2300      	movs	r3, #0
 800bab8:	60bb      	str	r3, [r7, #8]
 800baba:	4b7f      	ldr	r3, [pc, #508]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	4a7e      	ldr	r2, [pc, #504]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bac4:	6413      	str	r3, [r2, #64]	; 0x40
 800bac6:	4b7c      	ldr	r3, [pc, #496]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bace:	60bb      	str	r3, [r7, #8]
 800bad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bad2:	2301      	movs	r3, #1
 800bad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bad6:	4b79      	ldr	r3, [pc, #484]	; (800bcbc <HAL_RCC_OscConfig+0x4b0>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d118      	bne.n	800bb14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bae2:	4b76      	ldr	r3, [pc, #472]	; (800bcbc <HAL_RCC_OscConfig+0x4b0>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a75      	ldr	r2, [pc, #468]	; (800bcbc <HAL_RCC_OscConfig+0x4b0>)
 800bae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800baee:	f7fa fce5 	bl	80064bc <HAL_GetTick>
 800baf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800baf4:	e008      	b.n	800bb08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800baf6:	f7fa fce1 	bl	80064bc <HAL_GetTick>
 800bafa:	4602      	mov	r2, r0
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d901      	bls.n	800bb08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800bb04:	2303      	movs	r3, #3
 800bb06:	e118      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb08:	4b6c      	ldr	r3, [pc, #432]	; (800bcbc <HAL_RCC_OscConfig+0x4b0>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d0f0      	beq.n	800baf6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d106      	bne.n	800bb2a <HAL_RCC_OscConfig+0x31e>
 800bb1c:	4b66      	ldr	r3, [pc, #408]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb20:	4a65      	ldr	r2, [pc, #404]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb22:	f043 0301 	orr.w	r3, r3, #1
 800bb26:	6713      	str	r3, [r2, #112]	; 0x70
 800bb28:	e01c      	b.n	800bb64 <HAL_RCC_OscConfig+0x358>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	2b05      	cmp	r3, #5
 800bb30:	d10c      	bne.n	800bb4c <HAL_RCC_OscConfig+0x340>
 800bb32:	4b61      	ldr	r3, [pc, #388]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb36:	4a60      	ldr	r2, [pc, #384]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb38:	f043 0304 	orr.w	r3, r3, #4
 800bb3c:	6713      	str	r3, [r2, #112]	; 0x70
 800bb3e:	4b5e      	ldr	r3, [pc, #376]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb42:	4a5d      	ldr	r2, [pc, #372]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb44:	f043 0301 	orr.w	r3, r3, #1
 800bb48:	6713      	str	r3, [r2, #112]	; 0x70
 800bb4a:	e00b      	b.n	800bb64 <HAL_RCC_OscConfig+0x358>
 800bb4c:	4b5a      	ldr	r3, [pc, #360]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb50:	4a59      	ldr	r2, [pc, #356]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb52:	f023 0301 	bic.w	r3, r3, #1
 800bb56:	6713      	str	r3, [r2, #112]	; 0x70
 800bb58:	4b57      	ldr	r3, [pc, #348]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5c:	4a56      	ldr	r2, [pc, #344]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb5e:	f023 0304 	bic.w	r3, r3, #4
 800bb62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d015      	beq.n	800bb98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb6c:	f7fa fca6 	bl	80064bc <HAL_GetTick>
 800bb70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb72:	e00a      	b.n	800bb8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb74:	f7fa fca2 	bl	80064bc <HAL_GetTick>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d901      	bls.n	800bb8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e0d7      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb8a:	4b4b      	ldr	r3, [pc, #300]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb8e:	f003 0302 	and.w	r3, r3, #2
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d0ee      	beq.n	800bb74 <HAL_RCC_OscConfig+0x368>
 800bb96:	e014      	b.n	800bbc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb98:	f7fa fc90 	bl	80064bc <HAL_GetTick>
 800bb9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb9e:	e00a      	b.n	800bbb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bba0:	f7fa fc8c 	bl	80064bc <HAL_GetTick>
 800bba4:	4602      	mov	r2, r0
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d901      	bls.n	800bbb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800bbb2:	2303      	movs	r3, #3
 800bbb4:	e0c1      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bbb6:	4b40      	ldr	r3, [pc, #256]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbba:	f003 0302 	and.w	r3, r3, #2
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1ee      	bne.n	800bba0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d105      	bne.n	800bbd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bbc8:	4b3b      	ldr	r3, [pc, #236]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bbca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbcc:	4a3a      	ldr	r2, [pc, #232]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bbce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 80ad 	beq.w	800bd38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bbde:	4b36      	ldr	r3, [pc, #216]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	f003 030c 	and.w	r3, r3, #12
 800bbe6:	2b08      	cmp	r3, #8
 800bbe8:	d060      	beq.n	800bcac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	2b02      	cmp	r3, #2
 800bbf0:	d145      	bne.n	800bc7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbf2:	4b33      	ldr	r3, [pc, #204]	; (800bcc0 <HAL_RCC_OscConfig+0x4b4>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbf8:	f7fa fc60 	bl	80064bc <HAL_GetTick>
 800bbfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bbfe:	e008      	b.n	800bc12 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc00:	f7fa fc5c 	bl	80064bc <HAL_GetTick>
 800bc04:	4602      	mov	r2, r0
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d901      	bls.n	800bc12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e093      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc12:	4b29      	ldr	r3, [pc, #164]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1f0      	bne.n	800bc00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	69da      	ldr	r2, [r3, #28]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	431a      	orrs	r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	019b      	lsls	r3, r3, #6
 800bc2e:	431a      	orrs	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc34:	085b      	lsrs	r3, r3, #1
 800bc36:	3b01      	subs	r3, #1
 800bc38:	041b      	lsls	r3, r3, #16
 800bc3a:	431a      	orrs	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc40:	061b      	lsls	r3, r3, #24
 800bc42:	431a      	orrs	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc48:	071b      	lsls	r3, r3, #28
 800bc4a:	491b      	ldr	r1, [pc, #108]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc50:	4b1b      	ldr	r3, [pc, #108]	; (800bcc0 <HAL_RCC_OscConfig+0x4b4>)
 800bc52:	2201      	movs	r2, #1
 800bc54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc56:	f7fa fc31 	bl	80064bc <HAL_GetTick>
 800bc5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc5c:	e008      	b.n	800bc70 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc5e:	f7fa fc2d 	bl	80064bc <HAL_GetTick>
 800bc62:	4602      	mov	r2, r0
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d901      	bls.n	800bc70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	e064      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc70:	4b11      	ldr	r3, [pc, #68]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0f0      	beq.n	800bc5e <HAL_RCC_OscConfig+0x452>
 800bc7c:	e05c      	b.n	800bd38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc7e:	4b10      	ldr	r3, [pc, #64]	; (800bcc0 <HAL_RCC_OscConfig+0x4b4>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc84:	f7fa fc1a 	bl	80064bc <HAL_GetTick>
 800bc88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc8a:	e008      	b.n	800bc9e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc8c:	f7fa fc16 	bl	80064bc <HAL_GetTick>
 800bc90:	4602      	mov	r2, r0
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	d901      	bls.n	800bc9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e04d      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc9e:	4b06      	ldr	r3, [pc, #24]	; (800bcb8 <HAL_RCC_OscConfig+0x4ac>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1f0      	bne.n	800bc8c <HAL_RCC_OscConfig+0x480>
 800bcaa:	e045      	b.n	800bd38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d107      	bne.n	800bcc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e040      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
 800bcb8:	40023800 	.word	0x40023800
 800bcbc:	40007000 	.word	0x40007000
 800bcc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bcc4:	4b1f      	ldr	r3, [pc, #124]	; (800bd44 <HAL_RCC_OscConfig+0x538>)
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d030      	beq.n	800bd34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d129      	bne.n	800bd34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d122      	bne.n	800bd34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bcfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d119      	bne.n	800bd34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd0a:	085b      	lsrs	r3, r3, #1
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d10f      	bne.n	800bd34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d107      	bne.n	800bd34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d001      	beq.n	800bd38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e000      	b.n	800bd3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	40023800 	.word	0x40023800

0800bd48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e083      	b.n	800be62 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	7f5b      	ldrb	r3, [r3, #29]
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d105      	bne.n	800bd70 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7fa f906 	bl	8005f7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2202      	movs	r2, #2
 800bd74:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	22ca      	movs	r2, #202	; 0xca
 800bd7c:	625a      	str	r2, [r3, #36]	; 0x24
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2253      	movs	r2, #83	; 0x53
 800bd84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 faa8 	bl	800c2dc <RTC_EnterInitMode>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d008      	beq.n	800bda4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	22ff      	movs	r2, #255	; 0xff
 800bd98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2204      	movs	r2, #4
 800bd9e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	e05e      	b.n	800be62 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bdb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdb6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	6899      	ldr	r1, [r3, #8]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685a      	ldr	r2, [r3, #4]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	431a      	orrs	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	431a      	orrs	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	430a      	orrs	r2, r1
 800bdd4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	68d2      	ldr	r2, [r2, #12]
 800bdde:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6919      	ldr	r1, [r3, #16]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	041a      	lsls	r2, r3, #16
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	430a      	orrs	r2, r1
 800bdf2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68da      	ldr	r2, [r3, #12]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be02:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	f003 0320 	and.w	r3, r3, #32
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10e      	bne.n	800be30 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fa3a 	bl	800c28c <HAL_RTC_WaitForSynchro>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d008      	beq.n	800be30 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	22ff      	movs	r2, #255	; 0xff
 800be24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2204      	movs	r2, #4
 800be2a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e018      	b.n	800be62 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800be3e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	699a      	ldr	r2, [r3, #24]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	430a      	orrs	r2, r1
 800be50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	22ff      	movs	r2, #255	; 0xff
 800be58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800be60:	2300      	movs	r3, #0
  }
}
 800be62:	4618      	mov	r0, r3
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800be6a:	b590      	push	{r4, r7, lr}
 800be6c:	b087      	sub	sp, #28
 800be6e:	af00      	add	r7, sp, #0
 800be70:	60f8      	str	r0, [r7, #12]
 800be72:	60b9      	str	r1, [r7, #8]
 800be74:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800be76:	2300      	movs	r3, #0
 800be78:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	7f1b      	ldrb	r3, [r3, #28]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d101      	bne.n	800be86 <HAL_RTC_SetTime+0x1c>
 800be82:	2302      	movs	r3, #2
 800be84:	e0aa      	b.n	800bfdc <HAL_RTC_SetTime+0x172>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2201      	movs	r2, #1
 800be8a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2202      	movs	r2, #2
 800be90:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d126      	bne.n	800bee6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2200      	movs	r2, #0
 800beaa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 fa3f 	bl	800c334 <RTC_ByteToBcd2>
 800beb6:	4603      	mov	r3, r0
 800beb8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	785b      	ldrb	r3, [r3, #1]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 fa38 	bl	800c334 <RTC_ByteToBcd2>
 800bec4:	4603      	mov	r3, r0
 800bec6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bec8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	789b      	ldrb	r3, [r3, #2]
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 fa30 	bl	800c334 <RTC_ByteToBcd2>
 800bed4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bed6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	78db      	ldrb	r3, [r3, #3]
 800bede:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bee0:	4313      	orrs	r3, r2
 800bee2:	617b      	str	r3, [r7, #20]
 800bee4:	e018      	b.n	800bf18 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d102      	bne.n	800befa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2200      	movs	r2, #0
 800bef8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	785b      	ldrb	r3, [r3, #1]
 800bf04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bf06:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bf0c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	78db      	ldrb	r3, [r3, #3]
 800bf12:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bf14:	4313      	orrs	r3, r2
 800bf16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	22ca      	movs	r2, #202	; 0xca
 800bf1e:	625a      	str	r2, [r3, #36]	; 0x24
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2253      	movs	r2, #83	; 0x53
 800bf26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f000 f9d7 	bl	800c2dc <RTC_EnterInitMode>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00b      	beq.n	800bf4c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	22ff      	movs	r2, #255	; 0xff
 800bf3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2204      	movs	r2, #4
 800bf40:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e047      	b.n	800bfdc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bf56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bf5a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689a      	ldr	r2, [r3, #8]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bf6a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6899      	ldr	r1, [r3, #8]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	68da      	ldr	r2, [r3, #12]
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	431a      	orrs	r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	430a      	orrs	r2, r1
 800bf82:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68da      	ldr	r2, [r3, #12]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf92:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f003 0320 	and.w	r3, r3, #32
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d111      	bne.n	800bfc6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f000 f972 	bl	800c28c <HAL_RTC_WaitForSynchro>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00b      	beq.n	800bfc6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	22ff      	movs	r2, #255	; 0xff
 800bfb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2204      	movs	r2, #4
 800bfba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e00a      	b.n	800bfdc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	22ff      	movs	r2, #255	; 0xff
 800bfcc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800bfda:	2300      	movs	r3, #0
  }
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	371c      	adds	r7, #28
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd90      	pop	{r4, r7, pc}

0800bfe4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bff0:	2300      	movs	r3, #0
 800bff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c016:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c01a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	0c1b      	lsrs	r3, r3, #16
 800c020:	b2db      	uxtb	r3, r3
 800c022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c026:	b2da      	uxtb	r2, r3
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	0a1b      	lsrs	r3, r3, #8
 800c030:	b2db      	uxtb	r3, r3
 800c032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c036:	b2da      	uxtb	r2, r3
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c044:	b2da      	uxtb	r2, r3
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	0c1b      	lsrs	r3, r3, #16
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c054:	b2da      	uxtb	r2, r3
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d11a      	bne.n	800c096 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	4618      	mov	r0, r3
 800c066:	f000 f983 	bl	800c370 <RTC_Bcd2ToByte>
 800c06a:	4603      	mov	r3, r0
 800c06c:	461a      	mov	r2, r3
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	785b      	ldrb	r3, [r3, #1]
 800c076:	4618      	mov	r0, r3
 800c078:	f000 f97a 	bl	800c370 <RTC_Bcd2ToByte>
 800c07c:	4603      	mov	r3, r0
 800c07e:	461a      	mov	r2, r3
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	789b      	ldrb	r3, [r3, #2]
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 f971 	bl	800c370 <RTC_Bcd2ToByte>
 800c08e:	4603      	mov	r3, r0
 800c090:	461a      	mov	r2, r3
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c0a0:	b590      	push	{r4, r7, lr}
 800c0a2:	b087      	sub	sp, #28
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	7f1b      	ldrb	r3, [r3, #28]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d101      	bne.n	800c0bc <HAL_RTC_SetDate+0x1c>
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e094      	b.n	800c1e6 <HAL_RTC_SetDate+0x146>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10e      	bne.n	800c0ec <HAL_RTC_SetDate+0x4c>
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	785b      	ldrb	r3, [r3, #1]
 800c0d2:	f003 0310 	and.w	r3, r3, #16
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d008      	beq.n	800c0ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	785b      	ldrb	r3, [r3, #1]
 800c0de:	f023 0310 	bic.w	r3, r3, #16
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	330a      	adds	r3, #10
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d11c      	bne.n	800c12c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	78db      	ldrb	r3, [r3, #3]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f000 f91c 	bl	800c334 <RTC_ByteToBcd2>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	785b      	ldrb	r3, [r3, #1]
 800c104:	4618      	mov	r0, r3
 800c106:	f000 f915 	bl	800c334 <RTC_ByteToBcd2>
 800c10a:	4603      	mov	r3, r0
 800c10c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c10e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	789b      	ldrb	r3, [r3, #2]
 800c114:	4618      	mov	r0, r3
 800c116:	f000 f90d 	bl	800c334 <RTC_ByteToBcd2>
 800c11a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c11c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c126:	4313      	orrs	r3, r2
 800c128:	617b      	str	r3, [r7, #20]
 800c12a:	e00e      	b.n	800c14a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	78db      	ldrb	r3, [r3, #3]
 800c130:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	785b      	ldrb	r3, [r3, #1]
 800c136:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c138:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c13e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c146:	4313      	orrs	r3, r2
 800c148:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	22ca      	movs	r2, #202	; 0xca
 800c150:	625a      	str	r2, [r3, #36]	; 0x24
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2253      	movs	r2, #83	; 0x53
 800c158:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f000 f8be 	bl	800c2dc <RTC_EnterInitMode>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d00b      	beq.n	800c17e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	22ff      	movs	r2, #255	; 0xff
 800c16c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2204      	movs	r2, #4
 800c172:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e033      	b.n	800c1e6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c188:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c18c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68da      	ldr	r2, [r3, #12]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c19c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f003 0320 	and.w	r3, r3, #32
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d111      	bne.n	800c1d0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 f86d 	bl	800c28c <HAL_RTC_WaitForSynchro>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00b      	beq.n	800c1d0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	22ff      	movs	r2, #255	; 0xff
 800c1be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2204      	movs	r2, #4
 800c1c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e00a      	b.n	800c1e6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	22ff      	movs	r2, #255	; 0xff
 800c1d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
  }
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	371c      	adds	r7, #28
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd90      	pop	{r4, r7, pc}

0800c1ee <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b086      	sub	sp, #24
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	60f8      	str	r0, [r7, #12]
 800c1f6:	60b9      	str	r1, [r7, #8]
 800c1f8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c208:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c20c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	0c1b      	lsrs	r3, r3, #16
 800c212:	b2da      	uxtb	r2, r3
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	0a1b      	lsrs	r3, r3, #8
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	f003 031f 	and.w	r3, r3, #31
 800c222:	b2da      	uxtb	r2, r3
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c230:	b2da      	uxtb	r2, r3
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	0b5b      	lsrs	r3, r3, #13
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	f003 0307 	and.w	r3, r3, #7
 800c240:	b2da      	uxtb	r2, r3
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d11a      	bne.n	800c282 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	78db      	ldrb	r3, [r3, #3]
 800c250:	4618      	mov	r0, r3
 800c252:	f000 f88d 	bl	800c370 <RTC_Bcd2ToByte>
 800c256:	4603      	mov	r3, r0
 800c258:	461a      	mov	r2, r3
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	785b      	ldrb	r3, [r3, #1]
 800c262:	4618      	mov	r0, r3
 800c264:	f000 f884 	bl	800c370 <RTC_Bcd2ToByte>
 800c268:	4603      	mov	r3, r0
 800c26a:	461a      	mov	r2, r3
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	789b      	ldrb	r3, [r3, #2]
 800c274:	4618      	mov	r0, r3
 800c276:	f000 f87b 	bl	800c370 <RTC_Bcd2ToByte>
 800c27a:	4603      	mov	r3, r0
 800c27c:	461a      	mov	r2, r3
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3718      	adds	r7, #24
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c294:	2300      	movs	r3, #0
 800c296:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68da      	ldr	r2, [r3, #12]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c2a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c2a8:	f7fa f908 	bl	80064bc <HAL_GetTick>
 800c2ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c2ae:	e009      	b.n	800c2c4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c2b0:	f7fa f904 	bl	80064bc <HAL_GetTick>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2be:	d901      	bls.n	800c2c4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	e007      	b.n	800c2d4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	f003 0320 	and.w	r3, r3, #32
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d0ee      	beq.n	800c2b0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d119      	bne.n	800c32a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c2fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c300:	f7fa f8dc 	bl	80064bc <HAL_GetTick>
 800c304:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c306:	e009      	b.n	800c31c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c308:	f7fa f8d8 	bl	80064bc <HAL_GetTick>
 800c30c:	4602      	mov	r2, r0
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c316:	d901      	bls.n	800c31c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c318:	2303      	movs	r3, #3
 800c31a:	e007      	b.n	800c32c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c326:	2b00      	cmp	r3, #0
 800c328:	d0ee      	beq.n	800c308 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	4603      	mov	r3, r0
 800c33c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c33e:	2300      	movs	r3, #0
 800c340:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c342:	e005      	b.n	800c350 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	3301      	adds	r3, #1
 800c348:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c34a:	79fb      	ldrb	r3, [r7, #7]
 800c34c:	3b0a      	subs	r3, #10
 800c34e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c350:	79fb      	ldrb	r3, [r7, #7]
 800c352:	2b09      	cmp	r3, #9
 800c354:	d8f6      	bhi.n	800c344 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	011b      	lsls	r3, r3, #4
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	79fb      	ldrb	r3, [r7, #7]
 800c360:	4313      	orrs	r3, r2
 800c362:	b2db      	uxtb	r3, r3
}
 800c364:	4618      	mov	r0, r3
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c37a:	2300      	movs	r3, #0
 800c37c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c37e:	79fb      	ldrb	r3, [r7, #7]
 800c380:	091b      	lsrs	r3, r3, #4
 800c382:	b2db      	uxtb	r3, r3
 800c384:	461a      	mov	r2, r3
 800c386:	4613      	mov	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4413      	add	r3, r2
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c390:	79fb      	ldrb	r3, [r7, #7]
 800c392:	f003 030f 	and.w	r3, r3, #15
 800c396:	b2da      	uxtb	r2, r3
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	4413      	add	r3, r2
 800c39e:	b2db      	uxtb	r3, r3
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3714      	adds	r7, #20
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d101      	bne.n	800c3be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e022      	b.n	800c404 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d105      	bne.n	800c3d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7f9 fdfd 	bl	8005fd0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2203      	movs	r2, #3
 800c3da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 f814 	bl	800c40c <HAL_SD_InitCard>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e00a      	b.n	800c404 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c40c:	b5b0      	push	{r4, r5, r7, lr}
 800c40e:	b08e      	sub	sp, #56	; 0x38
 800c410:	af04      	add	r7, sp, #16
 800c412:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c414:	2300      	movs	r3, #0
 800c416:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c418:	2300      	movs	r3, #0
 800c41a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c41c:	2300      	movs	r3, #0
 800c41e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c424:	2300      	movs	r3, #0
 800c426:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c428:	2376      	movs	r3, #118	; 0x76
 800c42a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681d      	ldr	r5, [r3, #0]
 800c430:	466c      	mov	r4, sp
 800c432:	f107 0314 	add.w	r3, r7, #20
 800c436:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c43a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c43e:	f107 0308 	add.w	r3, r7, #8
 800c442:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c444:	4628      	mov	r0, r5
 800c446:	f001 fde9 	bl	800e01c <SDIO_Init>
 800c44a:	4603      	mov	r3, r0
 800c44c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c454:	2b00      	cmp	r3, #0
 800c456:	d001      	beq.n	800c45c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	e04c      	b.n	800c4f6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c45c:	4b28      	ldr	r3, [pc, #160]	; (800c500 <HAL_SD_InitCard+0xf4>)
 800c45e:	2200      	movs	r2, #0
 800c460:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4618      	mov	r0, r3
 800c468:	f001 fe21 	bl	800e0ae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c46c:	4b24      	ldr	r3, [pc, #144]	; (800c500 <HAL_SD_InitCard+0xf4>)
 800c46e:	2201      	movs	r2, #1
 800c470:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 ffee 	bl	800d454 <SD_PowerON>
 800c478:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	431a      	orrs	r2, r3
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e02e      	b.n	800c4f6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 ff0f 	bl	800d2bc <SD_InitCard>
 800c49e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4a0:	6a3b      	ldr	r3, [r7, #32]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	431a      	orrs	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e01b      	b.n	800c4f6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f001 fe84 	bl	800e1d4 <SDMMC_CmdBlockLength>
 800c4cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4ce:	6a3b      	ldr	r3, [r7, #32]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00f      	beq.n	800c4f4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a0a      	ldr	r2, [pc, #40]	; (800c504 <HAL_SD_InitCard+0xf8>)
 800c4da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4e0:	6a3b      	ldr	r3, [r7, #32]
 800c4e2:	431a      	orrs	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e000      	b.n	800c4f6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3728      	adds	r7, #40	; 0x28
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bdb0      	pop	{r4, r5, r7, pc}
 800c4fe:	bf00      	nop
 800c500:	422580a0 	.word	0x422580a0
 800c504:	004005ff 	.word	0x004005ff

0800c508 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b08c      	sub	sp, #48	; 0x30
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
 800c514:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d107      	bne.n	800c530 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c524:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e0be      	b.n	800c6ae <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b01      	cmp	r3, #1
 800c53a:	f040 80b7 	bne.w	800c6ac <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	441a      	add	r2, r3
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c54e:	429a      	cmp	r2, r3
 800c550:	d907      	bls.n	800c562 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c556:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	e0a5      	b.n	800c6ae <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2203      	movs	r2, #3
 800c566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2200      	movs	r2, #0
 800c570:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c580:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c586:	4a4c      	ldr	r2, [pc, #304]	; (800c6b8 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800c588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58e:	4a4b      	ldr	r2, [pc, #300]	; (800c6bc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800c590:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c596:	2200      	movs	r2, #0
 800c598:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c59e:	2200      	movs	r2, #0
 800c5a0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b2:	689a      	ldr	r2, [r3, #8]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	430a      	orrs	r2, r1
 800c5bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	3380      	adds	r3, #128	; 0x80
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	025b      	lsls	r3, r3, #9
 800c5d0:	089b      	lsrs	r3, r3, #2
 800c5d2:	f7fb fc1d 	bl	8007e10 <HAL_DMA_Start_IT>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d017      	beq.n	800c60c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c5ea:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a33      	ldr	r2, [pc, #204]	; (800c6c0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c5f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c608:	2301      	movs	r3, #1
 800c60a:	e050      	b.n	800c6ae <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c60c:	4b2d      	ldr	r3, [pc, #180]	; (800c6c4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c60e:	2201      	movs	r2, #1
 800c610:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c616:	2b01      	cmp	r3, #1
 800c618:	d002      	beq.n	800c620 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800c61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61c:	025b      	lsls	r3, r3, #9
 800c61e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c620:	f04f 33ff 	mov.w	r3, #4294967295
 800c624:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	025b      	lsls	r3, r3, #9
 800c62a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c62c:	2390      	movs	r3, #144	; 0x90
 800c62e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c630:	2302      	movs	r3, #2
 800c632:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c634:	2300      	movs	r3, #0
 800c636:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c638:	2301      	movs	r3, #1
 800c63a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f107 0210 	add.w	r2, r7, #16
 800c644:	4611      	mov	r1, r2
 800c646:	4618      	mov	r0, r3
 800c648:	f001 fd98 	bl	800e17c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d90a      	bls.n	800c668 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2282      	movs	r2, #130	; 0x82
 800c656:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c65e:	4618      	mov	r0, r3
 800c660:	f001 fdfc 	bl	800e25c <SDMMC_CmdReadMultiBlock>
 800c664:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c666:	e009      	b.n	800c67c <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2281      	movs	r2, #129	; 0x81
 800c66c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c674:	4618      	mov	r0, r3
 800c676:	f001 fdcf 	bl	800e218 <SDMMC_CmdReadSingleBlock>
 800c67a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d012      	beq.n	800c6a8 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a0e      	ldr	r2, [pc, #56]	; (800c6c0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c688:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c690:	431a      	orrs	r2, r3
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2201      	movs	r2, #1
 800c69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e002      	b.n	800c6ae <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	e000      	b.n	800c6ae <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c6ac:	2302      	movs	r3, #2
  }
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3730      	adds	r7, #48	; 0x30
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	0800d0cb 	.word	0x0800d0cb
 800c6bc:	0800d13d 	.word	0x0800d13d
 800c6c0:	004005ff 	.word	0x004005ff
 800c6c4:	4225858c 	.word	0x4225858c

0800c6c8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08c      	sub	sp, #48	; 0x30
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
 800c6d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d107      	bne.n	800c6f0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e0c1      	b.n	800c874 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	f040 80ba 	bne.w	800c872 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	441a      	add	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c70e:	429a      	cmp	r2, r3
 800c710:	d907      	bls.n	800c722 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c716:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	e0a8      	b.n	800c874 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2203      	movs	r2, #3
 800c726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2200      	movs	r2, #0
 800c730:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f042 021a 	orr.w	r2, r2, #26
 800c740:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c746:	4a4d      	ldr	r2, [pc, #308]	; (800c87c <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800c748:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c74e:	4a4c      	ldr	r2, [pc, #304]	; (800c880 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800c750:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c756:	2200      	movs	r2, #0
 800c758:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d002      	beq.n	800c768 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	025b      	lsls	r3, r3, #9
 800c766:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d90a      	bls.n	800c784 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	22a0      	movs	r2, #160	; 0xa0
 800c772:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c77a:	4618      	mov	r0, r3
 800c77c:	f001 fdb2 	bl	800e2e4 <SDMMC_CmdWriteMultiBlock>
 800c780:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c782:	e009      	b.n	800c798 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2290      	movs	r2, #144	; 0x90
 800c788:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c790:	4618      	mov	r0, r3
 800c792:	f001 fd85 	bl	800e2a0 <SDMMC_CmdWriteSingleBlock>
 800c796:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d012      	beq.n	800c7c4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a38      	ldr	r2, [pc, #224]	; (800c884 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800c7a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ac:	431a      	orrs	r2, r3
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e057      	b.n	800c874 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c7c4:	4b30      	ldr	r3, [pc, #192]	; (800c888 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ce:	2240      	movs	r2, #64	; 0x40
 800c7d0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e2:	689a      	ldr	r2, [r3, #8]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	430a      	orrs	r2, r1
 800c7ec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c7f2:	68b9      	ldr	r1, [r7, #8]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	3380      	adds	r3, #128	; 0x80
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	025b      	lsls	r3, r3, #9
 800c800:	089b      	lsrs	r3, r3, #2
 800c802:	f7fb fb05 	bl	8007e10 <HAL_DMA_Start_IT>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d01a      	beq.n	800c842 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f022 021a 	bic.w	r2, r2, #26
 800c81a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a18      	ldr	r2, [pc, #96]	; (800c884 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800c822:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c828:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2200      	movs	r2, #0
 800c83c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c83e:	2301      	movs	r3, #1
 800c840:	e018      	b.n	800c874 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c842:	f04f 33ff 	mov.w	r3, #4294967295
 800c846:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	025b      	lsls	r3, r3, #9
 800c84c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c84e:	2390      	movs	r3, #144	; 0x90
 800c850:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c852:	2300      	movs	r3, #0
 800c854:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c856:	2300      	movs	r3, #0
 800c858:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c85a:	2301      	movs	r3, #1
 800c85c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f107 0210 	add.w	r2, r7, #16
 800c866:	4611      	mov	r1, r2
 800c868:	4618      	mov	r0, r3
 800c86a:	f001 fc87 	bl	800e17c <SDIO_ConfigData>

      return HAL_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	e000      	b.n	800c874 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800c872:	2302      	movs	r3, #2
  }
}
 800c874:	4618      	mov	r0, r3
 800c876:	3730      	adds	r7, #48	; 0x30
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	0800d0a1 	.word	0x0800d0a1
 800c880:	0800d13d 	.word	0x0800d13d
 800c884:	004005ff 	.word	0x004005ff
 800c888:	4225858c 	.word	0x4225858c

0800c88c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c898:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d008      	beq.n	800c8ba <HAL_SD_IRQHandler+0x2e>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f003 0308 	and.w	r3, r3, #8
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d003      	beq.n	800c8ba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 ffed 	bl	800d892 <SD_Read_IT>
 800c8b8:	e155      	b.n	800cb66 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f000 808f 	beq.w	800c9e8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8d2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	6812      	ldr	r2, [r2, #0]
 800c8de:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800c8e2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c8e6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f022 0201 	bic.w	r2, r2, #1
 800c8f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f003 0308 	and.w	r3, r3, #8
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d039      	beq.n	800c976 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f003 0302 	and.w	r3, r3, #2
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d104      	bne.n	800c916 <HAL_SD_IRQHandler+0x8a>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f003 0320 	and.w	r3, r3, #32
 800c912:	2b00      	cmp	r3, #0
 800c914:	d011      	beq.n	800c93a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f001 fd04 	bl	800e328 <SDMMC_CmdStopTransfer>
 800c920:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d008      	beq.n	800c93a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	431a      	orrs	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 f91f 	bl	800cb78 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f240 523a 	movw	r2, #1338	; 0x53a
 800c942:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2201      	movs	r2, #1
 800c948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d104      	bne.n	800c966 <HAL_SD_IRQHandler+0xda>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f003 0302 	and.w	r3, r3, #2
 800c962:	2b00      	cmp	r3, #0
 800c964:	d003      	beq.n	800c96e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f003 fce6 	bl	8010338 <HAL_SD_RxCpltCallback>
 800c96c:	e0fb      	b.n	800cb66 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f003 fcd8 	bl	8010324 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c974:	e0f7      	b.n	800cb66 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 80f2 	beq.w	800cb66 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f003 0320 	and.w	r3, r3, #32
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d011      	beq.n	800c9b0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4618      	mov	r0, r3
 800c992:	f001 fcc9 	bl	800e328 <SDMMC_CmdStopTransfer>
 800c996:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d008      	beq.n	800c9b0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	431a      	orrs	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f8e4 	bl	800cb78 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f003 0301 	and.w	r3, r3, #1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f040 80d5 	bne.w	800cb66 <HAL_SD_IRQHandler+0x2da>
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f003 0302 	and.w	r3, r3, #2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f040 80cf 	bne.w	800cb66 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f022 0208 	bic.w	r2, r2, #8
 800c9d6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f003 fc9f 	bl	8010324 <HAL_SD_TxCpltCallback>
}
 800c9e6:	e0be      	b.n	800cb66 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d008      	beq.n	800ca08 <HAL_SD_IRQHandler+0x17c>
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f003 0308 	and.w	r3, r3, #8
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d003      	beq.n	800ca08 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 ff97 	bl	800d934 <SD_Write_IT>
 800ca06:	e0ae      	b.n	800cb66 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca0e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f000 80a7 	beq.w	800cb66 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca1e:	f003 0302 	and.w	r3, r3, #2
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d005      	beq.n	800ca32 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca2a:	f043 0202 	orr.w	r2, r3, #2
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca38:	f003 0308 	and.w	r3, r3, #8
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d005      	beq.n	800ca4c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca44:	f043 0208 	orr.w	r2, r3, #8
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca52:	f003 0320 	and.w	r3, r3, #32
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d005      	beq.n	800ca66 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5e:	f043 0220 	orr.w	r2, r3, #32
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca6c:	f003 0310 	and.w	r3, r3, #16
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d005      	beq.n	800ca80 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca78:	f043 0210 	orr.w	r2, r3, #16
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f240 523a 	movw	r2, #1338	; 0x53a
 800ca88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ca98:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f001 fc42 	bl	800e328 <SDMMC_CmdStopTransfer>
 800caa4:	4602      	mov	r2, r0
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caaa:	431a      	orrs	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f003 0308 	and.w	r3, r3, #8
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00a      	beq.n	800cad0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 f855 	bl	800cb78 <HAL_SD_ErrorCallback>
}
 800cace:	e04a      	b.n	800cb66 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d045      	beq.n	800cb66 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f003 0310 	and.w	r3, r3, #16
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d104      	bne.n	800caee <HAL_SD_IRQHandler+0x262>
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f003 0320 	and.w	r3, r3, #32
 800caea:	2b00      	cmp	r3, #0
 800caec:	d011      	beq.n	800cb12 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf2:	4a1f      	ldr	r2, [pc, #124]	; (800cb70 <HAL_SD_IRQHandler+0x2e4>)
 800caf4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fb f9e0 	bl	8007ec0 <HAL_DMA_Abort_IT>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d02f      	beq.n	800cb66 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 fb68 	bl	800d1e0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cb10:	e029      	b.n	800cb66 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f003 0301 	and.w	r3, r3, #1
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d104      	bne.n	800cb26 <HAL_SD_IRQHandler+0x29a>
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f003 0302 	and.w	r3, r3, #2
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d011      	beq.n	800cb4a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb2a:	4a12      	ldr	r2, [pc, #72]	; (800cb74 <HAL_SD_IRQHandler+0x2e8>)
 800cb2c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fb f9c4 	bl	8007ec0 <HAL_DMA_Abort_IT>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d013      	beq.n	800cb66 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 fb83 	bl	800d24e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800cb48:	e00d      	b.n	800cb66 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f003 fbd6 	bl	8010310 <HAL_SD_AbortCallback>
}
 800cb64:	e7ff      	b.n	800cb66 <HAL_SD_IRQHandler+0x2da>
 800cb66:	bf00      	nop
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	0800d1e1 	.word	0x0800d1e1
 800cb74:	0800d24f 	.word	0x0800d24f

0800cb78 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb9a:	0f9b      	lsrs	r3, r3, #30
 800cb9c:	b2da      	uxtb	r2, r3
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cba6:	0e9b      	lsrs	r3, r3, #26
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	f003 030f 	and.w	r3, r3, #15
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbb8:	0e1b      	lsrs	r3, r3, #24
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	f003 0303 	and.w	r3, r3, #3
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbca:	0c1b      	lsrs	r3, r3, #16
 800cbcc:	b2da      	uxtb	r2, r3
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbd6:	0a1b      	lsrs	r3, r3, #8
 800cbd8:	b2da      	uxtb	r2, r3
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbec:	0d1b      	lsrs	r3, r3, #20
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbf8:	0c1b      	lsrs	r3, r3, #16
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	f003 030f 	and.w	r3, r3, #15
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc0a:	0bdb      	lsrs	r3, r3, #15
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	f003 0301 	and.w	r3, r3, #1
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc1c:	0b9b      	lsrs	r3, r3, #14
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	f003 0301 	and.w	r3, r3, #1
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc2e:	0b5b      	lsrs	r3, r3, #13
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	f003 0301 	and.w	r3, r3, #1
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc40:	0b1b      	lsrs	r3, r3, #12
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	f003 0301 	and.w	r3, r3, #1
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2200      	movs	r2, #0
 800cc52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d163      	bne.n	800cd24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc60:	009a      	lsls	r2, r3, #2
 800cc62:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cc66:	4013      	ands	r3, r2
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800cc6c:	0f92      	lsrs	r2, r2, #30
 800cc6e:	431a      	orrs	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc78:	0edb      	lsrs	r3, r3, #27
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	f003 0307 	and.w	r3, r3, #7
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc8a:	0e1b      	lsrs	r3, r3, #24
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	f003 0307 	and.w	r3, r3, #7
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc9c:	0d5b      	lsrs	r3, r3, #21
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	f003 0307 	and.w	r3, r3, #7
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccae:	0c9b      	lsrs	r3, r3, #18
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 0307 	and.w	r3, r3, #7
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccc0:	0bdb      	lsrs	r3, r3, #15
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	f003 0307 	and.w	r3, r3, #7
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	7e1b      	ldrb	r3, [r3, #24]
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	f003 0307 	and.w	r3, r3, #7
 800cce2:	3302      	adds	r3, #2
 800cce4:	2201      	movs	r2, #1
 800cce6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ccee:	fb02 f203 	mul.w	r2, r2, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	7a1b      	ldrb	r3, [r3, #8]
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	f003 030f 	and.w	r3, r3, #15
 800cd00:	2201      	movs	r2, #1
 800cd02:	409a      	lsls	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cd10:	0a52      	lsrs	r2, r2, #9
 800cd12:	fb02 f203 	mul.w	r2, r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd20:	661a      	str	r2, [r3, #96]	; 0x60
 800cd22:	e031      	b.n	800cd88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d11d      	bne.n	800cd68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd30:	041b      	lsls	r3, r3, #16
 800cd32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd3a:	0c1b      	lsrs	r3, r3, #16
 800cd3c:	431a      	orrs	r2, r3
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	3301      	adds	r3, #1
 800cd48:	029a      	lsls	r2, r3, #10
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	661a      	str	r2, [r3, #96]	; 0x60
 800cd66:	e00f      	b.n	800cd88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a58      	ldr	r2, [pc, #352]	; (800ced0 <HAL_SD_GetCardCSD+0x344>)
 800cd6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cd84:	2301      	movs	r3, #1
 800cd86:	e09d      	b.n	800cec4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd8c:	0b9b      	lsrs	r3, r3, #14
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	f003 0301 	and.w	r3, r3, #1
 800cd94:	b2da      	uxtb	r2, r3
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd9e:	09db      	lsrs	r3, r3, #7
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cda6:	b2da      	uxtb	r2, r3
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdb6:	b2da      	uxtb	r2, r3
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdc0:	0fdb      	lsrs	r3, r3, #31
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdcc:	0f5b      	lsrs	r3, r3, #29
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	f003 0303 	and.w	r3, r3, #3
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdde:	0e9b      	lsrs	r3, r3, #26
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	f003 0307 	and.w	r3, r3, #7
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdf0:	0d9b      	lsrs	r3, r3, #22
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	f003 030f 	and.w	r3, r3, #15
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce02:	0d5b      	lsrs	r3, r3, #21
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	f003 0301 	and.w	r3, r3, #1
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce1e:	0c1b      	lsrs	r3, r3, #16
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	f003 0301 	and.w	r3, r3, #1
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce32:	0bdb      	lsrs	r3, r3, #15
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	f003 0301 	and.w	r3, r3, #1
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce46:	0b9b      	lsrs	r3, r3, #14
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	f003 0301 	and.w	r3, r3, #1
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce5a:	0b5b      	lsrs	r3, r3, #13
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	f003 0301 	and.w	r3, r3, #1
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce6e:	0b1b      	lsrs	r3, r3, #12
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	f003 0301 	and.w	r3, r3, #1
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce82:	0a9b      	lsrs	r3, r3, #10
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce96:	0a1b      	lsrs	r3, r3, #8
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	f003 0303 	and.w	r3, r3, #3
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceaa:	085b      	lsrs	r3, r3, #1
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	2201      	movs	r2, #1
 800cebe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr
 800ced0:	004005ff 	.word	0x004005ff

0800ced4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cf2c:	b5b0      	push	{r4, r5, r7, lr}
 800cf2e:	b08e      	sub	sp, #56	; 0x38
 800cf30:	af04      	add	r7, sp, #16
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cf36:	2300      	movs	r3, #0
 800cf38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2203      	movs	r2, #3
 800cf40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf48:	2b03      	cmp	r3, #3
 800cf4a:	d02e      	beq.n	800cfaa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf52:	d106      	bne.n	800cf62 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	639a      	str	r2, [r3, #56]	; 0x38
 800cf60:	e029      	b.n	800cfb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf68:	d10a      	bne.n	800cf80 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 fb28 	bl	800d5c0 <SD_WideBus_Enable>
 800cf70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf76:	6a3b      	ldr	r3, [r7, #32]
 800cf78:	431a      	orrs	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	639a      	str	r2, [r3, #56]	; 0x38
 800cf7e:	e01a      	b.n	800cfb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10a      	bne.n	800cf9c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fb65 	bl	800d656 <SD_WideBus_Disable>
 800cf8c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf92:	6a3b      	ldr	r3, [r7, #32]
 800cf94:	431a      	orrs	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	639a      	str	r2, [r3, #56]	; 0x38
 800cf9a:	e00c      	b.n	800cfb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	639a      	str	r2, [r3, #56]	; 0x38
 800cfa8:	e005      	b.n	800cfb6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00b      	beq.n	800cfd6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a26      	ldr	r2, [pc, #152]	; (800d05c <HAL_SD_ConfigWideBusOperation+0x130>)
 800cfc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfd4:	e01f      	b.n	800d016 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	695b      	ldr	r3, [r3, #20]
 800cff0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	699b      	ldr	r3, [r3, #24]
 800cff6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681d      	ldr	r5, [r3, #0]
 800cffc:	466c      	mov	r4, sp
 800cffe:	f107 0314 	add.w	r3, r7, #20
 800d002:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d006:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d00a:	f107 0308 	add.w	r3, r7, #8
 800d00e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d010:	4628      	mov	r0, r5
 800d012:	f001 f803 	bl	800e01c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d01e:	4618      	mov	r0, r3
 800d020:	f001 f8d8 	bl	800e1d4 <SDMMC_CmdBlockLength>
 800d024:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00c      	beq.n	800d046 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a0a      	ldr	r2, [pc, #40]	; (800d05c <HAL_SD_ConfigWideBusOperation+0x130>)
 800d032:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d038:	6a3b      	ldr	r3, [r7, #32]
 800d03a:	431a      	orrs	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d04e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d052:	4618      	mov	r0, r3
 800d054:	3728      	adds	r7, #40	; 0x28
 800d056:	46bd      	mov	sp, r7
 800d058:	bdb0      	pop	{r4, r5, r7, pc}
 800d05a:	bf00      	nop
 800d05c:	004005ff 	.word	0x004005ff

0800d060 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d06c:	f107 030c 	add.w	r3, r7, #12
 800d070:	4619      	mov	r1, r3
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fa7c 	bl	800d570 <SD_SendStatus>
 800d078:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d005      	beq.n	800d08c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	431a      	orrs	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	0a5b      	lsrs	r3, r3, #9
 800d090:	f003 030f 	and.w	r3, r3, #15
 800d094:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d096:	693b      	ldr	r3, [r7, #16]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3718      	adds	r7, #24
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d0be:	bf00      	nop
 800d0c0:	3714      	adds	r7, #20
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr

0800d0ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b084      	sub	sp, #16
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0dc:	2b82      	cmp	r3, #130	; 0x82
 800d0de:	d111      	bne.n	800d104 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f001 f91f 	bl	800e328 <SDMMC_CmdStopTransfer>
 800d0ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d008      	beq.n	800d104 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	431a      	orrs	r2, r3
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f7ff fd3a 	bl	800cb78 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f022 0208 	bic.w	r2, r2, #8
 800d112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f240 523a 	movw	r2, #1338	; 0x53a
 800d11c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f003 f903 	bl	8010338 <HAL_SD_RxCpltCallback>
#endif
}
 800d132:	bf00      	nop
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d148:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7fb f864 	bl	8008218 <HAL_DMA_GetError>
 800d150:	4603      	mov	r3, r0
 800d152:	2b02      	cmp	r3, #2
 800d154:	d03e      	beq.n	800d1d4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d15c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d164:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d002      	beq.n	800d172 <SD_DMAError+0x36>
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d12d      	bne.n	800d1ce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a19      	ldr	r2, [pc, #100]	; (800d1dc <SD_DMAError+0xa0>)
 800d178:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d188:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d18e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d196:	6978      	ldr	r0, [r7, #20]
 800d198:	f7ff ff62 	bl	800d060 <HAL_SD_GetCardState>
 800d19c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	2b06      	cmp	r3, #6
 800d1a2:	d002      	beq.n	800d1aa <SD_DMAError+0x6e>
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2b05      	cmp	r3, #5
 800d1a8:	d10a      	bne.n	800d1c0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f001 f8ba 	bl	800e328 <SDMMC_CmdStopTransfer>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ba:	431a      	orrs	r2, r3
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d1ce:	6978      	ldr	r0, [r7, #20]
 800d1d0:	f7ff fcd2 	bl	800cb78 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d1d4:	bf00      	nop
 800d1d6:	3718      	adds	r7, #24
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	004005ff 	.word	0x004005ff

0800d1e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f240 523a 	movw	r2, #1338	; 0x53a
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f7ff ff31 	bl	800d060 <HAL_SD_GetCardState>
 800d1fe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2200      	movs	r2, #0
 800d20c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2b06      	cmp	r3, #6
 800d212:	d002      	beq.n	800d21a <SD_DMATxAbort+0x3a>
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	2b05      	cmp	r3, #5
 800d218:	d10a      	bne.n	800d230 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4618      	mov	r0, r3
 800d220:	f001 f882 	bl	800e328 <SDMMC_CmdStopTransfer>
 800d224:	4602      	mov	r2, r0
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d22a:	431a      	orrs	r2, r3
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d234:	2b00      	cmp	r3, #0
 800d236:	d103      	bne.n	800d240 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f003 f869 	bl	8010310 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d23e:	e002      	b.n	800d246 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f7ff fc99 	bl	800cb78 <HAL_SD_ErrorCallback>
}
 800d246:	bf00      	nop
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f240 523a 	movw	r2, #1338	; 0x53a
 800d264:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f7ff fefa 	bl	800d060 <HAL_SD_GetCardState>
 800d26c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2201      	movs	r2, #1
 800d272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2200      	movs	r2, #0
 800d27a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	2b06      	cmp	r3, #6
 800d280:	d002      	beq.n	800d288 <SD_DMARxAbort+0x3a>
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	2b05      	cmp	r3, #5
 800d286:	d10a      	bne.n	800d29e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f001 f84b 	bl	800e328 <SDMMC_CmdStopTransfer>
 800d292:	4602      	mov	r2, r0
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d298:	431a      	orrs	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d103      	bne.n	800d2ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f003 f832 	bl	8010310 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d2ac:	e002      	b.n	800d2b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f7ff fc62 	bl	800cb78 <HAL_SD_ErrorCallback>
}
 800d2b4:	bf00      	nop
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d2bc:	b5b0      	push	{r4, r5, r7, lr}
 800d2be:	b094      	sub	sp, #80	; 0x50
 800d2c0:	af04      	add	r7, sp, #16
 800d2c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 fefd 	bl	800e0cc <SDIO_GetPowerState>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d102      	bne.n	800d2de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d2d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d2dc:	e0b6      	b.n	800d44c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d02f      	beq.n	800d346 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f001 f926 	bl	800e53c <SDMMC_CmdSendCID>
 800d2f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d001      	beq.n	800d2fc <SD_InitCard+0x40>
    {
      return errorstate;
 800d2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2fa:	e0a7      	b.n	800d44c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2100      	movs	r1, #0
 800d302:	4618      	mov	r0, r3
 800d304:	f000 ff27 	bl	800e156 <SDIO_GetResponse>
 800d308:	4602      	mov	r2, r0
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2104      	movs	r1, #4
 800d314:	4618      	mov	r0, r3
 800d316:	f000 ff1e 	bl	800e156 <SDIO_GetResponse>
 800d31a:	4602      	mov	r2, r0
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2108      	movs	r1, #8
 800d326:	4618      	mov	r0, r3
 800d328:	f000 ff15 	bl	800e156 <SDIO_GetResponse>
 800d32c:	4602      	mov	r2, r0
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	210c      	movs	r1, #12
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 ff0c 	bl	800e156 <SDIO_GetResponse>
 800d33e:	4602      	mov	r2, r0
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	d00d      	beq.n	800d36a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f107 020e 	add.w	r2, r7, #14
 800d356:	4611      	mov	r1, r2
 800d358:	4618      	mov	r0, r3
 800d35a:	f001 f92c 	bl	800e5b6 <SDMMC_CmdSetRelAdd>
 800d35e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <SD_InitCard+0xae>
    {
      return errorstate;
 800d366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d368:	e070      	b.n	800d44c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d036      	beq.n	800d3e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d372:	89fb      	ldrh	r3, [r7, #14]
 800d374:	461a      	mov	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d382:	041b      	lsls	r3, r3, #16
 800d384:	4619      	mov	r1, r3
 800d386:	4610      	mov	r0, r2
 800d388:	f001 f8f6 	bl	800e578 <SDMMC_CmdSendCSD>
 800d38c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d390:	2b00      	cmp	r3, #0
 800d392:	d001      	beq.n	800d398 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d396:	e059      	b.n	800d44c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2100      	movs	r1, #0
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f000 fed9 	bl	800e156 <SDIO_GetResponse>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2104      	movs	r1, #4
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f000 fed0 	bl	800e156 <SDIO_GetResponse>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2108      	movs	r1, #8
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f000 fec7 	bl	800e156 <SDIO_GetResponse>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	210c      	movs	r1, #12
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 febe 	bl	800e156 <SDIO_GetResponse>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2104      	movs	r1, #4
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 feb5 	bl	800e156 <SDIO_GetResponse>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	0d1a      	lsrs	r2, r3, #20
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d3f4:	f107 0310 	add.w	r3, r7, #16
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7ff fbc6 	bl	800cb8c <HAL_SD_GetCardCSD>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d002      	beq.n	800d40c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d406:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d40a:	e01f      	b.n	800d44c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6819      	ldr	r1, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d414:	041b      	lsls	r3, r3, #16
 800d416:	461a      	mov	r2, r3
 800d418:	f04f 0300 	mov.w	r3, #0
 800d41c:	4608      	mov	r0, r1
 800d41e:	f000 ffa5 	bl	800e36c <SDMMC_CmdSelDesel>
 800d422:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d426:	2b00      	cmp	r3, #0
 800d428:	d001      	beq.n	800d42e <SD_InitCard+0x172>
  {
    return errorstate;
 800d42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42c:	e00e      	b.n	800d44c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681d      	ldr	r5, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	466c      	mov	r4, sp
 800d436:	f103 0210 	add.w	r2, r3, #16
 800d43a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d43c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d440:	3304      	adds	r3, #4
 800d442:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d444:	4628      	mov	r0, r5
 800d446:	f000 fde9 	bl	800e01c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d44a:	2300      	movs	r3, #0
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3740      	adds	r7, #64	; 0x40
 800d450:	46bd      	mov	sp, r7
 800d452:	bdb0      	pop	{r4, r5, r7, pc}

0800d454 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b086      	sub	sp, #24
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d45c:	2300      	movs	r3, #0
 800d45e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d460:	2300      	movs	r3, #0
 800d462:	617b      	str	r3, [r7, #20]
 800d464:	2300      	movs	r3, #0
 800d466:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 ffa0 	bl	800e3b2 <SDMMC_CmdGoIdleState>
 800d472:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	e072      	b.n	800d564 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4618      	mov	r0, r3
 800d484:	f000 ffb3 	bl	800e3ee <SDMMC_CmdOperCond>
 800d488:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00d      	beq.n	800d4ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4618      	mov	r0, r3
 800d49c:	f000 ff89 	bl	800e3b2 <SDMMC_CmdGoIdleState>
 800d4a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d004      	beq.n	800d4b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	e05b      	b.n	800d564 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d137      	bne.n	800d52a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2100      	movs	r1, #0
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f000 ffb3 	bl	800e42c <SDMMC_CmdAppCommand>
 800d4c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d02d      	beq.n	800d52a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d4d2:	e047      	b.n	800d564 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2100      	movs	r1, #0
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 ffa6 	bl	800e42c <SDMMC_CmdAppCommand>
 800d4e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <SD_PowerON+0x98>
    {
      return errorstate;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	e03b      	b.n	800d564 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	491e      	ldr	r1, [pc, #120]	; (800d56c <SD_PowerON+0x118>)
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f000 ffbc 	bl	800e470 <SDMMC_CmdAppOperCommand>
 800d4f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d500:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d504:	e02e      	b.n	800d564 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2100      	movs	r1, #0
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 fe22 	bl	800e156 <SDIO_GetResponse>
 800d512:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	0fdb      	lsrs	r3, r3, #31
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d101      	bne.n	800d520 <SD_PowerON+0xcc>
 800d51c:	2301      	movs	r3, #1
 800d51e:	e000      	b.n	800d522 <SD_PowerON+0xce>
 800d520:	2300      	movs	r3, #0
 800d522:	613b      	str	r3, [r7, #16]

    count++;
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	3301      	adds	r3, #1
 800d528:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d530:	4293      	cmp	r3, r2
 800d532:	d802      	bhi.n	800d53a <SD_PowerON+0xe6>
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d0cc      	beq.n	800d4d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d540:	4293      	cmp	r3, r2
 800d542:	d902      	bls.n	800d54a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d548:	e00c      	b.n	800d564 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d550:	2b00      	cmp	r3, #0
 800d552:	d003      	beq.n	800d55c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	645a      	str	r2, [r3, #68]	; 0x44
 800d55a:	e002      	b.n	800d562 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	c1100000 	.word	0xc1100000

0800d570 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d102      	bne.n	800d586 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d580:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d584:	e018      	b.n	800d5b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d58e:	041b      	lsls	r3, r3, #16
 800d590:	4619      	mov	r1, r3
 800d592:	4610      	mov	r0, r2
 800d594:	f001 f830 	bl	800e5f8 <SDMMC_CmdSendStatus>
 800d598:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d001      	beq.n	800d5a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	e009      	b.n	800d5b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f000 fdd3 	bl	800e156 <SDIO_GetResponse>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	60fb      	str	r3, [r7, #12]
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2100      	movs	r1, #0
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f000 fdbd 	bl	800e156 <SDIO_GetResponse>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d5e6:	d102      	bne.n	800d5ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d5e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5ec:	e02f      	b.n	800d64e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d5ee:	f107 030c 	add.w	r3, r7, #12
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 f879 	bl	800d6ec <SD_FindSCR>
 800d5fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d001      	beq.n	800d606 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	e023      	b.n	800d64e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d01c      	beq.n	800d64a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d618:	041b      	lsls	r3, r3, #16
 800d61a:	4619      	mov	r1, r3
 800d61c:	4610      	mov	r0, r2
 800d61e:	f000 ff05 	bl	800e42c <SDMMC_CmdAppCommand>
 800d622:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d001      	beq.n	800d62e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	e00f      	b.n	800d64e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2102      	movs	r1, #2
 800d634:	4618      	mov	r0, r3
 800d636:	f000 ff3e 	bl	800e4b6 <SDMMC_CmdBusWidth>
 800d63a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d001      	beq.n	800d646 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	e003      	b.n	800d64e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d646:	2300      	movs	r3, #0
 800d648:	e001      	b.n	800d64e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d64a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3718      	adds	r7, #24
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b086      	sub	sp, #24
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d65e:	2300      	movs	r3, #0
 800d660:	60fb      	str	r3, [r7, #12]
 800d662:	2300      	movs	r3, #0
 800d664:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2100      	movs	r1, #0
 800d66c:	4618      	mov	r0, r3
 800d66e:	f000 fd72 	bl	800e156 <SDIO_GetResponse>
 800d672:	4603      	mov	r3, r0
 800d674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d67c:	d102      	bne.n	800d684 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d67e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d682:	e02f      	b.n	800d6e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d684:	f107 030c 	add.w	r3, r7, #12
 800d688:	4619      	mov	r1, r3
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f82e 	bl	800d6ec <SD_FindSCR>
 800d690:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	e023      	b.n	800d6e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d01c      	beq.n	800d6e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6ae:	041b      	lsls	r3, r3, #16
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	f000 feba 	bl	800e42c <SDMMC_CmdAppCommand>
 800d6b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	e00f      	b.n	800d6e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f000 fef3 	bl	800e4b6 <SDMMC_CmdBusWidth>
 800d6d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	e003      	b.n	800d6e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	e001      	b.n	800d6e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d6e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3718      	adds	r7, #24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b08f      	sub	sp, #60	; 0x3c
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d6f6:	f7f8 fee1 	bl	80064bc <HAL_GetTick>
 800d6fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d700:	2300      	movs	r3, #0
 800d702:	60bb      	str	r3, [r7, #8]
 800d704:	2300      	movs	r3, #0
 800d706:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2108      	movs	r1, #8
 800d712:	4618      	mov	r0, r3
 800d714:	f000 fd5e 	bl	800e1d4 <SDMMC_CmdBlockLength>
 800d718:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	e0b2      	b.n	800d88a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d72c:	041b      	lsls	r3, r3, #16
 800d72e:	4619      	mov	r1, r3
 800d730:	4610      	mov	r0, r2
 800d732:	f000 fe7b 	bl	800e42c <SDMMC_CmdAppCommand>
 800d736:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d001      	beq.n	800d742 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	e0a3      	b.n	800d88a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d742:	f04f 33ff 	mov.w	r3, #4294967295
 800d746:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d748:	2308      	movs	r3, #8
 800d74a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d74c:	2330      	movs	r3, #48	; 0x30
 800d74e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d750:	2302      	movs	r3, #2
 800d752:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d754:	2300      	movs	r3, #0
 800d756:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d758:	2301      	movs	r3, #1
 800d75a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f107 0210 	add.w	r2, r7, #16
 800d764:	4611      	mov	r1, r2
 800d766:	4618      	mov	r0, r3
 800d768:	f000 fd08 	bl	800e17c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4618      	mov	r0, r3
 800d772:	f000 fec2 	bl	800e4fa <SDMMC_CmdSendSCR>
 800d776:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d02a      	beq.n	800d7d4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	e083      	b.n	800d88a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00f      	beq.n	800d7b0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6819      	ldr	r1, [r3, #0]
 800d794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	f107 0208 	add.w	r2, r7, #8
 800d79c:	18d4      	adds	r4, r2, r3
 800d79e:	4608      	mov	r0, r1
 800d7a0:	f000 fc67 	bl	800e072 <SDIO_ReadFIFO>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	6023      	str	r3, [r4, #0]
      index++;
 800d7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	637b      	str	r3, [r7, #52]	; 0x34
 800d7ae:	e006      	b.n	800d7be <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d012      	beq.n	800d7e4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d7be:	f7f8 fe7d 	bl	80064bc <HAL_GetTick>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c6:	1ad3      	subs	r3, r2, r3
 800d7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7cc:	d102      	bne.n	800d7d4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d7ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7d2:	e05a      	b.n	800d88a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7da:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d0cf      	beq.n	800d782 <SD_FindSCR+0x96>
 800d7e2:	e000      	b.n	800d7e6 <SD_FindSCR+0xfa>
      break;
 800d7e4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ec:	f003 0308 	and.w	r3, r3, #8
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d005      	beq.n	800d800 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2208      	movs	r2, #8
 800d7fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d7fc:	2308      	movs	r3, #8
 800d7fe:	e044      	b.n	800d88a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d806:	f003 0302 	and.w	r3, r3, #2
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d005      	beq.n	800d81a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2202      	movs	r2, #2
 800d814:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d816:	2302      	movs	r3, #2
 800d818:	e037      	b.n	800d88a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d820:	f003 0320 	and.w	r3, r3, #32
 800d824:	2b00      	cmp	r3, #0
 800d826:	d005      	beq.n	800d834 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2220      	movs	r2, #32
 800d82e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d830:	2320      	movs	r3, #32
 800d832:	e02a      	b.n	800d88a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f240 523a 	movw	r2, #1338	; 0x53a
 800d83c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	061a      	lsls	r2, r3, #24
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	021b      	lsls	r3, r3, #8
 800d846:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d84a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	0a1b      	lsrs	r3, r3, #8
 800d850:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d854:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	0e1b      	lsrs	r3, r3, #24
 800d85a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85e:	601a      	str	r2, [r3, #0]
    scr++;
 800d860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d862:	3304      	adds	r3, #4
 800d864:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	061a      	lsls	r2, r3, #24
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	021b      	lsls	r3, r3, #8
 800d86e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d872:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	0a1b      	lsrs	r3, r3, #8
 800d878:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d87c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	0e1b      	lsrs	r3, r3, #24
 800d882:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d886:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	373c      	adds	r7, #60	; 0x3c
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd90      	pop	{r4, r7, pc}

0800d892 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b086      	sub	sp, #24
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d03f      	beq.n	800d92c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	617b      	str	r3, [r7, #20]
 800d8b0:	e033      	b.n	800d91a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f000 fbdb 	bl	800e072 <SDIO_ReadFIFO>
 800d8bc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	b2da      	uxtb	r2, r3
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	0a1b      	lsrs	r3, r3, #8
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	0c1b      	lsrs	r3, r3, #16
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	0e1b      	lsrs	r3, r3, #24
 800d902:	b2da      	uxtb	r2, r3
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	3301      	adds	r3, #1
 800d90c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	3b01      	subs	r3, #1
 800d912:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	3301      	adds	r3, #1
 800d918:	617b      	str	r3, [r7, #20]
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	2b07      	cmp	r3, #7
 800d91e:	d9c8      	bls.n	800d8b2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d92c:	bf00      	nop
 800d92e:	3718      	adds	r7, #24
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b086      	sub	sp, #24
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6a1b      	ldr	r3, [r3, #32]
 800d940:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d946:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d043      	beq.n	800d9d6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d94e:	2300      	movs	r3, #0
 800d950:	617b      	str	r3, [r7, #20]
 800d952:	e037      	b.n	800d9c4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	3301      	adds	r3, #1
 800d95e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	3b01      	subs	r3, #1
 800d964:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	021a      	lsls	r2, r3, #8
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	4313      	orrs	r3, r2
 800d970:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3301      	adds	r3, #1
 800d976:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	3b01      	subs	r3, #1
 800d97c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	041a      	lsls	r2, r3, #16
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	4313      	orrs	r3, r2
 800d988:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	3301      	adds	r3, #1
 800d98e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	3b01      	subs	r3, #1
 800d994:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	061a      	lsls	r2, r3, #24
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f107 0208 	add.w	r2, r7, #8
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f000 fb67 	bl	800e08c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	617b      	str	r3, [r7, #20]
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	2b07      	cmp	r3, #7
 800d9c8:	d9c4      	bls.n	800d954 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	693a      	ldr	r2, [r7, #16]
 800d9d4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d9d6:	bf00      	nop
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b082      	sub	sp, #8
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d101      	bne.n	800d9f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e041      	b.n	800da74 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d106      	bne.n	800da0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7f8 fbd3 	bl	80061b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2202      	movs	r2, #2
 800da0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	3304      	adds	r3, #4
 800da1a:	4619      	mov	r1, r3
 800da1c:	4610      	mov	r0, r2
 800da1e:	f000 f9cd 	bl	800ddbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2201      	movs	r2, #1
 800da2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2201      	movs	r2, #1
 800da36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2201      	movs	r2, #1
 800da4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2201      	movs	r2, #1
 800da56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2201      	movs	r2, #1
 800da5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2201      	movs	r2, #1
 800da66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2201      	movs	r2, #1
 800da6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da72:	2300      	movs	r3, #0
}
 800da74:	4618      	mov	r0, r3
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d001      	beq.n	800da94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800da90:	2301      	movs	r3, #1
 800da92:	e04e      	b.n	800db32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2202      	movs	r2, #2
 800da98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	68da      	ldr	r2, [r3, #12]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f042 0201 	orr.w	r2, r2, #1
 800daaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a23      	ldr	r2, [pc, #140]	; (800db40 <HAL_TIM_Base_Start_IT+0xc4>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d022      	beq.n	800dafc <HAL_TIM_Base_Start_IT+0x80>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dabe:	d01d      	beq.n	800dafc <HAL_TIM_Base_Start_IT+0x80>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a1f      	ldr	r2, [pc, #124]	; (800db44 <HAL_TIM_Base_Start_IT+0xc8>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d018      	beq.n	800dafc <HAL_TIM_Base_Start_IT+0x80>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a1e      	ldr	r2, [pc, #120]	; (800db48 <HAL_TIM_Base_Start_IT+0xcc>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d013      	beq.n	800dafc <HAL_TIM_Base_Start_IT+0x80>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a1c      	ldr	r2, [pc, #112]	; (800db4c <HAL_TIM_Base_Start_IT+0xd0>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d00e      	beq.n	800dafc <HAL_TIM_Base_Start_IT+0x80>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a1b      	ldr	r2, [pc, #108]	; (800db50 <HAL_TIM_Base_Start_IT+0xd4>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d009      	beq.n	800dafc <HAL_TIM_Base_Start_IT+0x80>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a19      	ldr	r2, [pc, #100]	; (800db54 <HAL_TIM_Base_Start_IT+0xd8>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d004      	beq.n	800dafc <HAL_TIM_Base_Start_IT+0x80>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a18      	ldr	r2, [pc, #96]	; (800db58 <HAL_TIM_Base_Start_IT+0xdc>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d111      	bne.n	800db20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	689b      	ldr	r3, [r3, #8]
 800db02:	f003 0307 	and.w	r3, r3, #7
 800db06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b06      	cmp	r3, #6
 800db0c:	d010      	beq.n	800db30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f042 0201 	orr.w	r2, r2, #1
 800db1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db1e:	e007      	b.n	800db30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f042 0201 	orr.w	r2, r2, #1
 800db2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db30:	2300      	movs	r3, #0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3714      	adds	r7, #20
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	40010000 	.word	0x40010000
 800db44:	40000400 	.word	0x40000400
 800db48:	40000800 	.word	0x40000800
 800db4c:	40000c00 	.word	0x40000c00
 800db50:	40010400 	.word	0x40010400
 800db54:	40014000 	.word	0x40014000
 800db58:	40001800 	.word	0x40001800

0800db5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	f003 0302 	and.w	r3, r3, #2
 800db6e:	2b02      	cmp	r3, #2
 800db70:	d122      	bne.n	800dbb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	f003 0302 	and.w	r3, r3, #2
 800db7c:	2b02      	cmp	r3, #2
 800db7e:	d11b      	bne.n	800dbb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f06f 0202 	mvn.w	r2, #2
 800db88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2201      	movs	r2, #1
 800db8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	699b      	ldr	r3, [r3, #24]
 800db96:	f003 0303 	and.w	r3, r3, #3
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d003      	beq.n	800dba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f8ee 	bl	800dd80 <HAL_TIM_IC_CaptureCallback>
 800dba4:	e005      	b.n	800dbb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 f8e0 	bl	800dd6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 f8f1 	bl	800dd94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	f003 0304 	and.w	r3, r3, #4
 800dbc2:	2b04      	cmp	r3, #4
 800dbc4:	d122      	bne.n	800dc0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	f003 0304 	and.w	r3, r3, #4
 800dbd0:	2b04      	cmp	r3, #4
 800dbd2:	d11b      	bne.n	800dc0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f06f 0204 	mvn.w	r2, #4
 800dbdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	699b      	ldr	r3, [r3, #24]
 800dbea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d003      	beq.n	800dbfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f8c4 	bl	800dd80 <HAL_TIM_IC_CaptureCallback>
 800dbf8:	e005      	b.n	800dc06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f8b6 	bl	800dd6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 f8c7 	bl	800dd94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	691b      	ldr	r3, [r3, #16]
 800dc12:	f003 0308 	and.w	r3, r3, #8
 800dc16:	2b08      	cmp	r3, #8
 800dc18:	d122      	bne.n	800dc60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	f003 0308 	and.w	r3, r3, #8
 800dc24:	2b08      	cmp	r3, #8
 800dc26:	d11b      	bne.n	800dc60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f06f 0208 	mvn.w	r2, #8
 800dc30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2204      	movs	r2, #4
 800dc36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	69db      	ldr	r3, [r3, #28]
 800dc3e:	f003 0303 	and.w	r3, r3, #3
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d003      	beq.n	800dc4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f89a 	bl	800dd80 <HAL_TIM_IC_CaptureCallback>
 800dc4c:	e005      	b.n	800dc5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f88c 	bl	800dd6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f89d 	bl	800dd94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	691b      	ldr	r3, [r3, #16]
 800dc66:	f003 0310 	and.w	r3, r3, #16
 800dc6a:	2b10      	cmp	r3, #16
 800dc6c:	d122      	bne.n	800dcb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	f003 0310 	and.w	r3, r3, #16
 800dc78:	2b10      	cmp	r3, #16
 800dc7a:	d11b      	bne.n	800dcb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f06f 0210 	mvn.w	r2, #16
 800dc84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2208      	movs	r2, #8
 800dc8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	69db      	ldr	r3, [r3, #28]
 800dc92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d003      	beq.n	800dca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f870 	bl	800dd80 <HAL_TIM_IC_CaptureCallback>
 800dca0:	e005      	b.n	800dcae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f862 	bl	800dd6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 f873 	bl	800dd94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	691b      	ldr	r3, [r3, #16]
 800dcba:	f003 0301 	and.w	r3, r3, #1
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d10e      	bne.n	800dce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d107      	bne.n	800dce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f06f 0201 	mvn.w	r2, #1
 800dcd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7f7 ff06 	bl	8005aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	691b      	ldr	r3, [r3, #16]
 800dce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcea:	2b80      	cmp	r3, #128	; 0x80
 800dcec:	d10e      	bne.n	800dd0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcf8:	2b80      	cmp	r3, #128	; 0x80
 800dcfa:	d107      	bne.n	800dd0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dd04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f97e 	bl	800e008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	691b      	ldr	r3, [r3, #16]
 800dd12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd16:	2b40      	cmp	r3, #64	; 0x40
 800dd18:	d10e      	bne.n	800dd38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd24:	2b40      	cmp	r3, #64	; 0x40
 800dd26:	d107      	bne.n	800dd38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dd30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f838 	bl	800dda8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	691b      	ldr	r3, [r3, #16]
 800dd3e:	f003 0320 	and.w	r3, r3, #32
 800dd42:	2b20      	cmp	r3, #32
 800dd44:	d10e      	bne.n	800dd64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	f003 0320 	and.w	r3, r3, #32
 800dd50:	2b20      	cmp	r3, #32
 800dd52:	d107      	bne.n	800dd64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f06f 0220 	mvn.w	r2, #32
 800dd5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f948 	bl	800dff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd74:	bf00      	nop
 800dd76:	370c      	adds	r7, #12
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dd88:	bf00      	nop
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dd9c:	bf00      	nop
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a40      	ldr	r2, [pc, #256]	; (800ded0 <TIM_Base_SetConfig+0x114>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d013      	beq.n	800ddfc <TIM_Base_SetConfig+0x40>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddda:	d00f      	beq.n	800ddfc <TIM_Base_SetConfig+0x40>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a3d      	ldr	r2, [pc, #244]	; (800ded4 <TIM_Base_SetConfig+0x118>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d00b      	beq.n	800ddfc <TIM_Base_SetConfig+0x40>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a3c      	ldr	r2, [pc, #240]	; (800ded8 <TIM_Base_SetConfig+0x11c>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d007      	beq.n	800ddfc <TIM_Base_SetConfig+0x40>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a3b      	ldr	r2, [pc, #236]	; (800dedc <TIM_Base_SetConfig+0x120>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d003      	beq.n	800ddfc <TIM_Base_SetConfig+0x40>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a3a      	ldr	r2, [pc, #232]	; (800dee0 <TIM_Base_SetConfig+0x124>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d108      	bne.n	800de0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	4313      	orrs	r3, r2
 800de0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a2f      	ldr	r2, [pc, #188]	; (800ded0 <TIM_Base_SetConfig+0x114>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d02b      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de1c:	d027      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4a2c      	ldr	r2, [pc, #176]	; (800ded4 <TIM_Base_SetConfig+0x118>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d023      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a2b      	ldr	r2, [pc, #172]	; (800ded8 <TIM_Base_SetConfig+0x11c>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d01f      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a2a      	ldr	r2, [pc, #168]	; (800dedc <TIM_Base_SetConfig+0x120>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d01b      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a29      	ldr	r2, [pc, #164]	; (800dee0 <TIM_Base_SetConfig+0x124>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d017      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a28      	ldr	r2, [pc, #160]	; (800dee4 <TIM_Base_SetConfig+0x128>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d013      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a27      	ldr	r2, [pc, #156]	; (800dee8 <TIM_Base_SetConfig+0x12c>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d00f      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a26      	ldr	r2, [pc, #152]	; (800deec <TIM_Base_SetConfig+0x130>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d00b      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a25      	ldr	r2, [pc, #148]	; (800def0 <TIM_Base_SetConfig+0x134>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d007      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a24      	ldr	r2, [pc, #144]	; (800def4 <TIM_Base_SetConfig+0x138>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d003      	beq.n	800de6e <TIM_Base_SetConfig+0xb2>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a23      	ldr	r2, [pc, #140]	; (800def8 <TIM_Base_SetConfig+0x13c>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d108      	bne.n	800de80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	4313      	orrs	r3, r2
 800de7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	68fa      	ldr	r2, [r7, #12]
 800de92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	689a      	ldr	r2, [r3, #8]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4a0a      	ldr	r2, [pc, #40]	; (800ded0 <TIM_Base_SetConfig+0x114>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d003      	beq.n	800deb4 <TIM_Base_SetConfig+0xf8>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	4a0c      	ldr	r2, [pc, #48]	; (800dee0 <TIM_Base_SetConfig+0x124>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d103      	bne.n	800debc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	691a      	ldr	r2, [r3, #16]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	615a      	str	r2, [r3, #20]
}
 800dec2:	bf00      	nop
 800dec4:	3714      	adds	r7, #20
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr
 800dece:	bf00      	nop
 800ded0:	40010000 	.word	0x40010000
 800ded4:	40000400 	.word	0x40000400
 800ded8:	40000800 	.word	0x40000800
 800dedc:	40000c00 	.word	0x40000c00
 800dee0:	40010400 	.word	0x40010400
 800dee4:	40014000 	.word	0x40014000
 800dee8:	40014400 	.word	0x40014400
 800deec:	40014800 	.word	0x40014800
 800def0:	40001800 	.word	0x40001800
 800def4:	40001c00 	.word	0x40001c00
 800def8:	40002000 	.word	0x40002000

0800defc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d101      	bne.n	800df14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df10:	2302      	movs	r3, #2
 800df12:	e05a      	b.n	800dfca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2201      	movs	r2, #1
 800df18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2202      	movs	r2, #2
 800df20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	4313      	orrs	r3, r2
 800df44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	68fa      	ldr	r2, [r7, #12]
 800df4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a21      	ldr	r2, [pc, #132]	; (800dfd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d022      	beq.n	800df9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df60:	d01d      	beq.n	800df9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a1d      	ldr	r2, [pc, #116]	; (800dfdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d018      	beq.n	800df9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a1b      	ldr	r2, [pc, #108]	; (800dfe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d013      	beq.n	800df9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a1a      	ldr	r2, [pc, #104]	; (800dfe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d00e      	beq.n	800df9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a18      	ldr	r2, [pc, #96]	; (800dfe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d009      	beq.n	800df9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a17      	ldr	r2, [pc, #92]	; (800dfec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d004      	beq.n	800df9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a15      	ldr	r2, [pc, #84]	; (800dff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d10c      	bne.n	800dfb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	4313      	orrs	r3, r2
 800dfae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3714      	adds	r7, #20
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr
 800dfd6:	bf00      	nop
 800dfd8:	40010000 	.word	0x40010000
 800dfdc:	40000400 	.word	0x40000400
 800dfe0:	40000800 	.word	0x40000800
 800dfe4:	40000c00 	.word	0x40000c00
 800dfe8:	40010400 	.word	0x40010400
 800dfec:	40014000 	.word	0x40014000
 800dff0:	40001800 	.word	0x40001800

0800dff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e01c:	b084      	sub	sp, #16
 800e01e:	b480      	push	{r7}
 800e020:	b085      	sub	sp, #20
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
 800e026:	f107 001c 	add.w	r0, r7, #28
 800e02a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e032:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e034:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e036:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e03a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e03e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e042:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e046:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e056:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	431a      	orrs	r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	b004      	add	sp, #16
 800e070:	4770      	bx	lr

0800e072 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e072:	b480      	push	{r7}
 800e074:	b083      	sub	sp, #12
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e080:	4618      	mov	r0, r3
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	370c      	adds	r7, #12
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr

0800e0ae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2203      	movs	r2, #3
 800e0ba:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e0bc:	2002      	movs	r0, #2
 800e0be:	f7f8 fa09 	bl	80064d4 <HAL_Delay>
  
  return HAL_OK;
 800e0c2:	2300      	movs	r3, #0
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f003 0303 	and.w	r3, r3, #3
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e106:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e10c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e112:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e114:	68fa      	ldr	r2, [r7, #12]
 800e116:	4313      	orrs	r3, r2
 800e118:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e122:	f023 030f 	bic.w	r3, r3, #15
 800e126:	68fa      	ldr	r2, [r7, #12]
 800e128:	431a      	orrs	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	b2db      	uxtb	r3, r3
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	370c      	adds	r7, #12
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr

0800e156 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e156:	b480      	push	{r7}
 800e158:	b085      	sub	sp, #20
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
 800e15e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	3314      	adds	r3, #20
 800e164:	461a      	mov	r2, r3
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	4413      	add	r3, r2
 800e16a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
}  
 800e170:	4618      	mov	r0, r3
 800e172:	3714      	adds	r7, #20
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e186:	2300      	movs	r3, #0
 800e188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	685a      	ldr	r2, [r3, #4]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e1a2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e1a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e1ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	431a      	orrs	r2, r3
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0

}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b088      	sub	sp, #32
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e1e2:	2310      	movs	r3, #16
 800e1e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1e6:	2340      	movs	r3, #64	; 0x40
 800e1e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1f4:	f107 0308 	add.w	r3, r7, #8
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7ff ff74 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e200:	f241 3288 	movw	r2, #5000	; 0x1388
 800e204:	2110      	movs	r1, #16
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 fa44 	bl	800e694 <SDMMC_GetCmdResp1>
 800e20c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e20e:	69fb      	ldr	r3, [r7, #28]
}
 800e210:	4618      	mov	r0, r3
 800e212:	3720      	adds	r7, #32
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b088      	sub	sp, #32
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e226:	2311      	movs	r3, #17
 800e228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e22a:	2340      	movs	r3, #64	; 0x40
 800e22c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e22e:	2300      	movs	r3, #0
 800e230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e236:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e238:	f107 0308 	add.w	r3, r7, #8
 800e23c:	4619      	mov	r1, r3
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f7ff ff52 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e244:	f241 3288 	movw	r2, #5000	; 0x1388
 800e248:	2111      	movs	r1, #17
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 fa22 	bl	800e694 <SDMMC_GetCmdResp1>
 800e250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e252:	69fb      	ldr	r3, [r7, #28]
}
 800e254:	4618      	mov	r0, r3
 800e256:	3720      	adds	r7, #32
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b088      	sub	sp, #32
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e26a:	2312      	movs	r3, #18
 800e26c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e26e:	2340      	movs	r3, #64	; 0x40
 800e270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e272:	2300      	movs	r3, #0
 800e274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e27a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e27c:	f107 0308 	add.w	r3, r7, #8
 800e280:	4619      	mov	r1, r3
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7ff ff30 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e288:	f241 3288 	movw	r2, #5000	; 0x1388
 800e28c:	2112      	movs	r1, #18
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fa00 	bl	800e694 <SDMMC_GetCmdResp1>
 800e294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e296:	69fb      	ldr	r3, [r7, #28]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3720      	adds	r7, #32
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b088      	sub	sp, #32
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e2ae:	2318      	movs	r3, #24
 800e2b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2b2:	2340      	movs	r3, #64	; 0x40
 800e2b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2c0:	f107 0308 	add.w	r3, r7, #8
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff ff0e 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e2cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2d0:	2118      	movs	r1, #24
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 f9de 	bl	800e694 <SDMMC_GetCmdResp1>
 800e2d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2da:	69fb      	ldr	r3, [r7, #28]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3720      	adds	r7, #32
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b088      	sub	sp, #32
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e2f2:	2319      	movs	r3, #25
 800e2f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2f6:	2340      	movs	r3, #64	; 0x40
 800e2f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e304:	f107 0308 	add.w	r3, r7, #8
 800e308:	4619      	mov	r1, r3
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7ff feec 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e310:	f241 3288 	movw	r2, #5000	; 0x1388
 800e314:	2119      	movs	r1, #25
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 f9bc 	bl	800e694 <SDMMC_GetCmdResp1>
 800e31c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e31e:	69fb      	ldr	r3, [r7, #28]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3720      	adds	r7, #32
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e330:	2300      	movs	r3, #0
 800e332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e334:	230c      	movs	r3, #12
 800e336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e338:	2340      	movs	r3, #64	; 0x40
 800e33a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e33c:	2300      	movs	r3, #0
 800e33e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e344:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e346:	f107 0308 	add.w	r3, r7, #8
 800e34a:	4619      	mov	r1, r3
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7ff fecb 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e352:	4a05      	ldr	r2, [pc, #20]	; (800e368 <SDMMC_CmdStopTransfer+0x40>)
 800e354:	210c      	movs	r1, #12
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 f99c 	bl	800e694 <SDMMC_GetCmdResp1>
 800e35c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e35e:	69fb      	ldr	r3, [r7, #28]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3720      	adds	r7, #32
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	05f5e100 	.word	0x05f5e100

0800e36c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b08a      	sub	sp, #40	; 0x28
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e37c:	2307      	movs	r3, #7
 800e37e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e380:	2340      	movs	r3, #64	; 0x40
 800e382:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e384:	2300      	movs	r3, #0
 800e386:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e38c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e38e:	f107 0310 	add.w	r3, r7, #16
 800e392:	4619      	mov	r1, r3
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	f7ff fea7 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e39e:	2107      	movs	r1, #7
 800e3a0:	68f8      	ldr	r0, [r7, #12]
 800e3a2:	f000 f977 	bl	800e694 <SDMMC_GetCmdResp1>
 800e3a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3728      	adds	r7, #40	; 0x28
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b088      	sub	sp, #32
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3d0:	f107 0308 	add.w	r3, r7, #8
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7ff fe86 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f92d 	bl	800e63c <SDMMC_GetCmdError>
 800e3e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3e4:	69fb      	ldr	r3, [r7, #28]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3720      	adds	r7, #32
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b088      	sub	sp, #32
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e3f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e3fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e3fc:	2308      	movs	r3, #8
 800e3fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e400:	2340      	movs	r3, #64	; 0x40
 800e402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e404:	2300      	movs	r3, #0
 800e406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e40c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e40e:	f107 0308 	add.w	r3, r7, #8
 800e412:	4619      	mov	r1, r3
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff fe67 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 fb24 	bl	800ea68 <SDMMC_GetCmdResp7>
 800e420:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e422:	69fb      	ldr	r3, [r7, #28]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3720      	adds	r7, #32
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b088      	sub	sp, #32
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e43a:	2337      	movs	r3, #55	; 0x37
 800e43c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e43e:	2340      	movs	r3, #64	; 0x40
 800e440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e442:	2300      	movs	r3, #0
 800e444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e44a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e44c:	f107 0308 	add.w	r3, r7, #8
 800e450:	4619      	mov	r1, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7ff fe48 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e458:	f241 3288 	movw	r2, #5000	; 0x1388
 800e45c:	2137      	movs	r1, #55	; 0x37
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f918 	bl	800e694 <SDMMC_GetCmdResp1>
 800e464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e466:	69fb      	ldr	r3, [r7, #28]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3720      	adds	r7, #32
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b088      	sub	sp, #32
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e486:	2329      	movs	r3, #41	; 0x29
 800e488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e48a:	2340      	movs	r3, #64	; 0x40
 800e48c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e48e:	2300      	movs	r3, #0
 800e490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e496:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e498:	f107 0308 	add.w	r3, r7, #8
 800e49c:	4619      	mov	r1, r3
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7ff fe22 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 fa2b 	bl	800e900 <SDMMC_GetCmdResp3>
 800e4aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4ac:	69fb      	ldr	r3, [r7, #28]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3720      	adds	r7, #32
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b088      	sub	sp, #32
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e4c4:	2306      	movs	r3, #6
 800e4c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4c8:	2340      	movs	r3, #64	; 0x40
 800e4ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4d6:	f107 0308 	add.w	r3, r7, #8
 800e4da:	4619      	mov	r1, r3
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7ff fe03 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e4e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4e6:	2106      	movs	r1, #6
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f8d3 	bl	800e694 <SDMMC_GetCmdResp1>
 800e4ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4f0:	69fb      	ldr	r3, [r7, #28]
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3720      	adds	r7, #32
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b088      	sub	sp, #32
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e502:	2300      	movs	r3, #0
 800e504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e506:	2333      	movs	r3, #51	; 0x33
 800e508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e50a:	2340      	movs	r3, #64	; 0x40
 800e50c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e50e:	2300      	movs	r3, #0
 800e510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e516:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e518:	f107 0308 	add.w	r3, r7, #8
 800e51c:	4619      	mov	r1, r3
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f7ff fde2 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e524:	f241 3288 	movw	r2, #5000	; 0x1388
 800e528:	2133      	movs	r1, #51	; 0x33
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 f8b2 	bl	800e694 <SDMMC_GetCmdResp1>
 800e530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e532:	69fb      	ldr	r3, [r7, #28]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3720      	adds	r7, #32
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b088      	sub	sp, #32
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e544:	2300      	movs	r3, #0
 800e546:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e548:	2302      	movs	r3, #2
 800e54a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e54c:	23c0      	movs	r3, #192	; 0xc0
 800e54e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e550:	2300      	movs	r3, #0
 800e552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e558:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e55a:	f107 0308 	add.w	r3, r7, #8
 800e55e:	4619      	mov	r1, r3
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7ff fdc1 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 f982 	bl	800e870 <SDMMC_GetCmdResp2>
 800e56c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e56e:	69fb      	ldr	r3, [r7, #28]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3720      	adds	r7, #32
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b088      	sub	sp, #32
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e586:	2309      	movs	r3, #9
 800e588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e58a:	23c0      	movs	r3, #192	; 0xc0
 800e58c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e58e:	2300      	movs	r3, #0
 800e590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e596:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e598:	f107 0308 	add.w	r3, r7, #8
 800e59c:	4619      	mov	r1, r3
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fda2 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 f963 	bl	800e870 <SDMMC_GetCmdResp2>
 800e5aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ac:	69fb      	ldr	r3, [r7, #28]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3720      	adds	r7, #32
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b088      	sub	sp, #32
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
 800e5be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e5c4:	2303      	movs	r3, #3
 800e5c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5c8:	2340      	movs	r3, #64	; 0x40
 800e5ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5d6:	f107 0308 	add.w	r3, r7, #8
 800e5da:	4619      	mov	r1, r3
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7ff fd83 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e5e2:	683a      	ldr	r2, [r7, #0]
 800e5e4:	2103      	movs	r1, #3
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f9c8 	bl	800e97c <SDMMC_GetCmdResp6>
 800e5ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ee:	69fb      	ldr	r3, [r7, #28]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3720      	adds	r7, #32
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b088      	sub	sp, #32
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e606:	230d      	movs	r3, #13
 800e608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e60a:	2340      	movs	r3, #64	; 0x40
 800e60c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e60e:	2300      	movs	r3, #0
 800e610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e616:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e618:	f107 0308 	add.w	r3, r7, #8
 800e61c:	4619      	mov	r1, r3
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7ff fd62 	bl	800e0e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e624:	f241 3288 	movw	r2, #5000	; 0x1388
 800e628:	210d      	movs	r1, #13
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 f832 	bl	800e694 <SDMMC_GetCmdResp1>
 800e630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e632:	69fb      	ldr	r3, [r7, #28]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3720      	adds	r7, #32
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e644:	4b11      	ldr	r3, [pc, #68]	; (800e68c <SDMMC_GetCmdError+0x50>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a11      	ldr	r2, [pc, #68]	; (800e690 <SDMMC_GetCmdError+0x54>)
 800e64a:	fba2 2303 	umull	r2, r3, r2, r3
 800e64e:	0a5b      	lsrs	r3, r3, #9
 800e650:	f241 3288 	movw	r2, #5000	; 0x1388
 800e654:	fb02 f303 	mul.w	r3, r2, r3
 800e658:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	1e5a      	subs	r2, r3, #1
 800e65e:	60fa      	str	r2, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d102      	bne.n	800e66a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e664:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e668:	e009      	b.n	800e67e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e672:	2b00      	cmp	r3, #0
 800e674:	d0f1      	beq.n	800e65a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	22c5      	movs	r2, #197	; 0xc5
 800e67a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3714      	adds	r7, #20
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop
 800e68c:	20000000 	.word	0x20000000
 800e690:	10624dd3 	.word	0x10624dd3

0800e694 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b088      	sub	sp, #32
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	460b      	mov	r3, r1
 800e69e:	607a      	str	r2, [r7, #4]
 800e6a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6a2:	4b70      	ldr	r3, [pc, #448]	; (800e864 <SDMMC_GetCmdResp1+0x1d0>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a70      	ldr	r2, [pc, #448]	; (800e868 <SDMMC_GetCmdResp1+0x1d4>)
 800e6a8:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ac:	0a5a      	lsrs	r2, r3, #9
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	fb02 f303 	mul.w	r3, r2, r3
 800e6b4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	1e5a      	subs	r2, r3, #1
 800e6ba:	61fa      	str	r2, [r7, #28]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d102      	bne.n	800e6c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e6c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6c4:	e0c9      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d0ef      	beq.n	800e6b6 <SDMMC_GetCmdResp1+0x22>
 800e6d6:	69bb      	ldr	r3, [r7, #24]
 800e6d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d1ea      	bne.n	800e6b6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e4:	f003 0304 	and.w	r3, r3, #4
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d004      	beq.n	800e6f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2204      	movs	r2, #4
 800e6f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6f2:	2304      	movs	r3, #4
 800e6f4:	e0b1      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6fa:	f003 0301 	and.w	r3, r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d004      	beq.n	800e70c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2201      	movs	r2, #1
 800e706:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e708:	2301      	movs	r3, #1
 800e70a:	e0a6      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	22c5      	movs	r2, #197	; 0xc5
 800e710:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f7ff fd12 	bl	800e13c <SDIO_GetCommandResponse>
 800e718:	4603      	mov	r3, r0
 800e71a:	461a      	mov	r2, r3
 800e71c:	7afb      	ldrb	r3, [r7, #11]
 800e71e:	4293      	cmp	r3, r2
 800e720:	d001      	beq.n	800e726 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e722:	2301      	movs	r3, #1
 800e724:	e099      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e726:	2100      	movs	r1, #0
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f7ff fd14 	bl	800e156 <SDIO_GetResponse>
 800e72e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e730:	697a      	ldr	r2, [r7, #20]
 800e732:	4b4e      	ldr	r3, [pc, #312]	; (800e86c <SDMMC_GetCmdResp1+0x1d8>)
 800e734:	4013      	ands	r3, r2
 800e736:	2b00      	cmp	r3, #0
 800e738:	d101      	bne.n	800e73e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e73a:	2300      	movs	r3, #0
 800e73c:	e08d      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	2b00      	cmp	r3, #0
 800e742:	da02      	bge.n	800e74a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e744:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e748:	e087      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e750:	2b00      	cmp	r3, #0
 800e752:	d001      	beq.n	800e758 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e754:	2340      	movs	r3, #64	; 0x40
 800e756:	e080      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d001      	beq.n	800e766 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e762:	2380      	movs	r3, #128	; 0x80
 800e764:	e079      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d002      	beq.n	800e776 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e770:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e774:	e071      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d002      	beq.n	800e786 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e780:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e784:	e069      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d002      	beq.n	800e796 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e794:	e061      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d002      	beq.n	800e7a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e7a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e7a4:	e059      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d002      	beq.n	800e7b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e7b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7b4:	e051      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e7c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7c4:	e049      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e7d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e7d4:	e041      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d002      	beq.n	800e7e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e7e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7e4:	e039      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d002      	beq.n	800e7f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e7f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e7f4:	e031      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e800:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e804:	e029      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d002      	beq.n	800e816 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e810:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e814:	e021      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d002      	beq.n	800e826 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e820:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e824:	e019      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d002      	beq.n	800e836 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e830:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e834:	e011      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d002      	beq.n	800e846 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e844:	e009      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	f003 0308 	and.w	r3, r3, #8
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e850:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e854:	e001      	b.n	800e85a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3720      	adds	r7, #32
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	20000000 	.word	0x20000000
 800e868:	10624dd3 	.word	0x10624dd3
 800e86c:	fdffe008 	.word	0xfdffe008

0800e870 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e870:	b480      	push	{r7}
 800e872:	b085      	sub	sp, #20
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e878:	4b1f      	ldr	r3, [pc, #124]	; (800e8f8 <SDMMC_GetCmdResp2+0x88>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a1f      	ldr	r2, [pc, #124]	; (800e8fc <SDMMC_GetCmdResp2+0x8c>)
 800e87e:	fba2 2303 	umull	r2, r3, r2, r3
 800e882:	0a5b      	lsrs	r3, r3, #9
 800e884:	f241 3288 	movw	r2, #5000	; 0x1388
 800e888:	fb02 f303 	mul.w	r3, r2, r3
 800e88c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	1e5a      	subs	r2, r3, #1
 800e892:	60fa      	str	r2, [r7, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d102      	bne.n	800e89e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e89c:	e026      	b.n	800e8ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d0ef      	beq.n	800e88e <SDMMC_GetCmdResp2+0x1e>
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1ea      	bne.n	800e88e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8bc:	f003 0304 	and.w	r3, r3, #4
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d004      	beq.n	800e8ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2204      	movs	r2, #4
 800e8c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8ca:	2304      	movs	r3, #4
 800e8cc:	e00e      	b.n	800e8ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d2:	f003 0301 	and.w	r3, r3, #1
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d004      	beq.n	800e8e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2201      	movs	r2, #1
 800e8de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e003      	b.n	800e8ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	22c5      	movs	r2, #197	; 0xc5
 800e8e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3714      	adds	r7, #20
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr
 800e8f8:	20000000 	.word	0x20000000
 800e8fc:	10624dd3 	.word	0x10624dd3

0800e900 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e908:	4b1a      	ldr	r3, [pc, #104]	; (800e974 <SDMMC_GetCmdResp3+0x74>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a1a      	ldr	r2, [pc, #104]	; (800e978 <SDMMC_GetCmdResp3+0x78>)
 800e90e:	fba2 2303 	umull	r2, r3, r2, r3
 800e912:	0a5b      	lsrs	r3, r3, #9
 800e914:	f241 3288 	movw	r2, #5000	; 0x1388
 800e918:	fb02 f303 	mul.w	r3, r2, r3
 800e91c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	1e5a      	subs	r2, r3, #1
 800e922:	60fa      	str	r2, [r7, #12]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d102      	bne.n	800e92e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e928:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e92c:	e01b      	b.n	800e966 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e932:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d0ef      	beq.n	800e91e <SDMMC_GetCmdResp3+0x1e>
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1ea      	bne.n	800e91e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e94c:	f003 0304 	and.w	r3, r3, #4
 800e950:	2b00      	cmp	r3, #0
 800e952:	d004      	beq.n	800e95e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2204      	movs	r2, #4
 800e958:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e95a:	2304      	movs	r3, #4
 800e95c:	e003      	b.n	800e966 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	22c5      	movs	r2, #197	; 0xc5
 800e962:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	20000000 	.word	0x20000000
 800e978:	10624dd3 	.word	0x10624dd3

0800e97c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b088      	sub	sp, #32
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	460b      	mov	r3, r1
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e98a:	4b35      	ldr	r3, [pc, #212]	; (800ea60 <SDMMC_GetCmdResp6+0xe4>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4a35      	ldr	r2, [pc, #212]	; (800ea64 <SDMMC_GetCmdResp6+0xe8>)
 800e990:	fba2 2303 	umull	r2, r3, r2, r3
 800e994:	0a5b      	lsrs	r3, r3, #9
 800e996:	f241 3288 	movw	r2, #5000	; 0x1388
 800e99a:	fb02 f303 	mul.w	r3, r2, r3
 800e99e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	1e5a      	subs	r2, r3, #1
 800e9a4:	61fa      	str	r2, [r7, #28]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d102      	bne.n	800e9b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9ae:	e052      	b.n	800ea56 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d0ef      	beq.n	800e9a0 <SDMMC_GetCmdResp6+0x24>
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d1ea      	bne.n	800e9a0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ce:	f003 0304 	and.w	r3, r3, #4
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d004      	beq.n	800e9e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2204      	movs	r2, #4
 800e9da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9dc:	2304      	movs	r3, #4
 800e9de:	e03a      	b.n	800ea56 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d004      	beq.n	800e9f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e02f      	b.n	800ea56 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f7ff fba0 	bl	800e13c <SDIO_GetCommandResponse>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	461a      	mov	r2, r3
 800ea00:	7afb      	ldrb	r3, [r7, #11]
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d001      	beq.n	800ea0a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea06:	2301      	movs	r3, #1
 800ea08:	e025      	b.n	800ea56 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	22c5      	movs	r2, #197	; 0xc5
 800ea0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ea10:	2100      	movs	r1, #0
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f7ff fb9f 	bl	800e156 <SDIO_GetResponse>
 800ea18:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d106      	bne.n	800ea32 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	0c1b      	lsrs	r3, r3, #16
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	e011      	b.n	800ea56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d002      	beq.n	800ea42 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea40:	e009      	b.n	800ea56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d002      	beq.n	800ea52 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea50:	e001      	b.n	800ea56 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ea52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3720      	adds	r7, #32
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	20000000 	.word	0x20000000
 800ea64:	10624dd3 	.word	0x10624dd3

0800ea68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b085      	sub	sp, #20
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea70:	4b22      	ldr	r3, [pc, #136]	; (800eafc <SDMMC_GetCmdResp7+0x94>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a22      	ldr	r2, [pc, #136]	; (800eb00 <SDMMC_GetCmdResp7+0x98>)
 800ea76:	fba2 2303 	umull	r2, r3, r2, r3
 800ea7a:	0a5b      	lsrs	r3, r3, #9
 800ea7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea80:	fb02 f303 	mul.w	r3, r2, r3
 800ea84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	1e5a      	subs	r2, r3, #1
 800ea8a:	60fa      	str	r2, [r7, #12]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d102      	bne.n	800ea96 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea94:	e02c      	b.n	800eaf0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d0ef      	beq.n	800ea86 <SDMMC_GetCmdResp7+0x1e>
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d1ea      	bne.n	800ea86 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eab4:	f003 0304 	and.w	r3, r3, #4
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d004      	beq.n	800eac6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2204      	movs	r2, #4
 800eac0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eac2:	2304      	movs	r3, #4
 800eac4:	e014      	b.n	800eaf0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaca:	f003 0301 	and.w	r3, r3, #1
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d004      	beq.n	800eadc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2201      	movs	r2, #1
 800ead6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ead8:	2301      	movs	r3, #1
 800eada:	e009      	b.n	800eaf0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2240      	movs	r2, #64	; 0x40
 800eaec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800eaee:	2300      	movs	r3, #0
  
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3714      	adds	r7, #20
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr
 800eafc:	20000000 	.word	0x20000000
 800eb00:	10624dd3 	.word	0x10624dd3

0800eb04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb04:	b084      	sub	sp, #16
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b084      	sub	sp, #16
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	f107 001c 	add.w	r0, r7, #28
 800eb12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d122      	bne.n	800eb62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800eb30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800eb44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d105      	bne.n	800eb56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f001 fb16 	bl	8010188 <USB_CoreReset>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	73fb      	strb	r3, [r7, #15]
 800eb60:	e01a      	b.n	800eb98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f001 fb0a 	bl	8010188 <USB_CoreReset>
 800eb74:	4603      	mov	r3, r0
 800eb76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800eb78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d106      	bne.n	800eb8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	639a      	str	r2, [r3, #56]	; 0x38
 800eb8a:	e005      	b.n	800eb98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800eb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d10b      	bne.n	800ebb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	f043 0206 	orr.w	r2, r3, #6
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	f043 0220 	orr.w	r2, r3, #32
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ebb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ebc2:	b004      	add	sp, #16
 800ebc4:	4770      	bx	lr
	...

0800ebc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b087      	sub	sp, #28
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ebd6:	79fb      	ldrb	r3, [r7, #7]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	d165      	bne.n	800eca8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	4a41      	ldr	r2, [pc, #260]	; (800ece4 <USB_SetTurnaroundTime+0x11c>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d906      	bls.n	800ebf2 <USB_SetTurnaroundTime+0x2a>
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	4a40      	ldr	r2, [pc, #256]	; (800ece8 <USB_SetTurnaroundTime+0x120>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d202      	bcs.n	800ebf2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ebec:	230f      	movs	r3, #15
 800ebee:	617b      	str	r3, [r7, #20]
 800ebf0:	e062      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	4a3c      	ldr	r2, [pc, #240]	; (800ece8 <USB_SetTurnaroundTime+0x120>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d306      	bcc.n	800ec08 <USB_SetTurnaroundTime+0x40>
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	4a3b      	ldr	r2, [pc, #236]	; (800ecec <USB_SetTurnaroundTime+0x124>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d202      	bcs.n	800ec08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ec02:	230e      	movs	r3, #14
 800ec04:	617b      	str	r3, [r7, #20]
 800ec06:	e057      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	4a38      	ldr	r2, [pc, #224]	; (800ecec <USB_SetTurnaroundTime+0x124>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d306      	bcc.n	800ec1e <USB_SetTurnaroundTime+0x56>
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	4a37      	ldr	r2, [pc, #220]	; (800ecf0 <USB_SetTurnaroundTime+0x128>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d202      	bcs.n	800ec1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ec18:	230d      	movs	r3, #13
 800ec1a:	617b      	str	r3, [r7, #20]
 800ec1c:	e04c      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	4a33      	ldr	r2, [pc, #204]	; (800ecf0 <USB_SetTurnaroundTime+0x128>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d306      	bcc.n	800ec34 <USB_SetTurnaroundTime+0x6c>
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	4a32      	ldr	r2, [pc, #200]	; (800ecf4 <USB_SetTurnaroundTime+0x12c>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d802      	bhi.n	800ec34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ec2e:	230c      	movs	r3, #12
 800ec30:	617b      	str	r3, [r7, #20]
 800ec32:	e041      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	4a2f      	ldr	r2, [pc, #188]	; (800ecf4 <USB_SetTurnaroundTime+0x12c>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d906      	bls.n	800ec4a <USB_SetTurnaroundTime+0x82>
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	4a2e      	ldr	r2, [pc, #184]	; (800ecf8 <USB_SetTurnaroundTime+0x130>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d802      	bhi.n	800ec4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ec44:	230b      	movs	r3, #11
 800ec46:	617b      	str	r3, [r7, #20]
 800ec48:	e036      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	4a2a      	ldr	r2, [pc, #168]	; (800ecf8 <USB_SetTurnaroundTime+0x130>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d906      	bls.n	800ec60 <USB_SetTurnaroundTime+0x98>
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	4a29      	ldr	r2, [pc, #164]	; (800ecfc <USB_SetTurnaroundTime+0x134>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d802      	bhi.n	800ec60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ec5a:	230a      	movs	r3, #10
 800ec5c:	617b      	str	r3, [r7, #20]
 800ec5e:	e02b      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	4a26      	ldr	r2, [pc, #152]	; (800ecfc <USB_SetTurnaroundTime+0x134>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d906      	bls.n	800ec76 <USB_SetTurnaroundTime+0xae>
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	4a25      	ldr	r2, [pc, #148]	; (800ed00 <USB_SetTurnaroundTime+0x138>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d202      	bcs.n	800ec76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ec70:	2309      	movs	r3, #9
 800ec72:	617b      	str	r3, [r7, #20]
 800ec74:	e020      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	4a21      	ldr	r2, [pc, #132]	; (800ed00 <USB_SetTurnaroundTime+0x138>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d306      	bcc.n	800ec8c <USB_SetTurnaroundTime+0xc4>
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	4a20      	ldr	r2, [pc, #128]	; (800ed04 <USB_SetTurnaroundTime+0x13c>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d802      	bhi.n	800ec8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ec86:	2308      	movs	r3, #8
 800ec88:	617b      	str	r3, [r7, #20]
 800ec8a:	e015      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	4a1d      	ldr	r2, [pc, #116]	; (800ed04 <USB_SetTurnaroundTime+0x13c>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d906      	bls.n	800eca2 <USB_SetTurnaroundTime+0xda>
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	4a1c      	ldr	r2, [pc, #112]	; (800ed08 <USB_SetTurnaroundTime+0x140>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d202      	bcs.n	800eca2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ec9c:	2307      	movs	r3, #7
 800ec9e:	617b      	str	r3, [r7, #20]
 800eca0:	e00a      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800eca2:	2306      	movs	r3, #6
 800eca4:	617b      	str	r3, [r7, #20]
 800eca6:	e007      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800eca8:	79fb      	ldrb	r3, [r7, #7]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d102      	bne.n	800ecb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ecae:	2309      	movs	r3, #9
 800ecb0:	617b      	str	r3, [r7, #20]
 800ecb2:	e001      	b.n	800ecb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ecb4:	2309      	movs	r3, #9
 800ecb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	68da      	ldr	r2, [r3, #12]
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	029b      	lsls	r3, r3, #10
 800eccc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ecd0:	431a      	orrs	r2, r3
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ecd6:	2300      	movs	r3, #0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	371c      	adds	r7, #28
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr
 800ece4:	00d8acbf 	.word	0x00d8acbf
 800ece8:	00e4e1c0 	.word	0x00e4e1c0
 800ecec:	00f42400 	.word	0x00f42400
 800ecf0:	01067380 	.word	0x01067380
 800ecf4:	011a499f 	.word	0x011a499f
 800ecf8:	01312cff 	.word	0x01312cff
 800ecfc:	014ca43f 	.word	0x014ca43f
 800ed00:	016e3600 	.word	0x016e3600
 800ed04:	01a6ab1f 	.word	0x01a6ab1f
 800ed08:	01e84800 	.word	0x01e84800

0800ed0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	f043 0201 	orr.w	r2, r3, #1
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed20:	2300      	movs	r3, #0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	370c      	adds	r7, #12
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr

0800ed2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed2e:	b480      	push	{r7}
 800ed30:	b083      	sub	sp, #12
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	f023 0201 	bic.w	r2, r3, #1
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed42:	2300      	movs	r3, #0
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	460b      	mov	r3, r1
 800ed5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	68db      	ldr	r3, [r3, #12]
 800ed64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ed6c:	78fb      	ldrb	r3, [r7, #3]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d115      	bne.n	800ed9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ed7e:	2001      	movs	r0, #1
 800ed80:	f7f7 fba8 	bl	80064d4 <HAL_Delay>
      ms++;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	3301      	adds	r3, #1
 800ed88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f001 f96c 	bl	8010068 <USB_GetMode>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d01e      	beq.n	800edd4 <USB_SetCurrentMode+0x84>
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2b31      	cmp	r3, #49	; 0x31
 800ed9a:	d9f0      	bls.n	800ed7e <USB_SetCurrentMode+0x2e>
 800ed9c:	e01a      	b.n	800edd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ed9e:	78fb      	ldrb	r3, [r7, #3]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d115      	bne.n	800edd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800edb0:	2001      	movs	r0, #1
 800edb2:	f7f7 fb8f 	bl	80064d4 <HAL_Delay>
      ms++;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3301      	adds	r3, #1
 800edba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f001 f953 	bl	8010068 <USB_GetMode>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d005      	beq.n	800edd4 <USB_SetCurrentMode+0x84>
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2b31      	cmp	r3, #49	; 0x31
 800edcc:	d9f0      	bls.n	800edb0 <USB_SetCurrentMode+0x60>
 800edce:	e001      	b.n	800edd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800edd0:	2301      	movs	r3, #1
 800edd2:	e005      	b.n	800ede0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2b32      	cmp	r3, #50	; 0x32
 800edd8:	d101      	bne.n	800edde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800edda:	2301      	movs	r3, #1
 800eddc:	e000      	b.n	800ede0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800edde:	2300      	movs	r3, #0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ede8:	b084      	sub	sp, #16
 800edea:	b580      	push	{r7, lr}
 800edec:	b086      	sub	sp, #24
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
 800edf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800edf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ee02:	2300      	movs	r3, #0
 800ee04:	613b      	str	r3, [r7, #16]
 800ee06:	e009      	b.n	800ee1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	3340      	adds	r3, #64	; 0x40
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	4413      	add	r3, r2
 800ee12:	2200      	movs	r2, #0
 800ee14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	613b      	str	r3, [r7, #16]
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	2b0e      	cmp	r3, #14
 800ee20:	d9f2      	bls.n	800ee08 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ee22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d11c      	bne.n	800ee62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee36:	f043 0302 	orr.w	r3, r3, #2
 800ee3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	601a      	str	r2, [r3, #0]
 800ee60:	e005      	b.n	800ee6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee74:	461a      	mov	r2, r3
 800ee76:	2300      	movs	r3, #0
 800ee78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee80:	4619      	mov	r1, r3
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee88:	461a      	mov	r2, r3
 800ee8a:	680b      	ldr	r3, [r1, #0]
 800ee8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ee8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d10c      	bne.n	800eeae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ee94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d104      	bne.n	800eea4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ee9a:	2100      	movs	r1, #0
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f945 	bl	800f12c <USB_SetDevSpeed>
 800eea2:	e008      	b.n	800eeb6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eea4:	2101      	movs	r1, #1
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 f940 	bl	800f12c <USB_SetDevSpeed>
 800eeac:	e003      	b.n	800eeb6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eeae:	2103      	movs	r1, #3
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f000 f93b 	bl	800f12c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eeb6:	2110      	movs	r1, #16
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f8f3 	bl	800f0a4 <USB_FlushTxFifo>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800eec4:	2301      	movs	r3, #1
 800eec6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 f90f 	bl	800f0ec <USB_FlushRxFifo>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d001      	beq.n	800eed8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800eed4:	2301      	movs	r3, #1
 800eed6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eede:	461a      	mov	r2, r3
 800eee0:	2300      	movs	r3, #0
 800eee2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeea:	461a      	mov	r2, r3
 800eeec:	2300      	movs	r3, #0
 800eeee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eef6:	461a      	mov	r2, r3
 800eef8:	2300      	movs	r3, #0
 800eefa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eefc:	2300      	movs	r3, #0
 800eefe:	613b      	str	r3, [r7, #16]
 800ef00:	e043      	b.n	800ef8a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	015a      	lsls	r2, r3, #5
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	4413      	add	r3, r2
 800ef0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef18:	d118      	bne.n	800ef4c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10a      	bne.n	800ef36 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	015a      	lsls	r2, r3, #5
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	4413      	add	r3, r2
 800ef28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef32:	6013      	str	r3, [r2, #0]
 800ef34:	e013      	b.n	800ef5e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	015a      	lsls	r2, r3, #5
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef42:	461a      	mov	r2, r3
 800ef44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef48:	6013      	str	r3, [r2, #0]
 800ef4a:	e008      	b.n	800ef5e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	015a      	lsls	r2, r3, #5
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	4413      	add	r3, r2
 800ef54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef58:	461a      	mov	r2, r3
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	015a      	lsls	r2, r3, #5
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	4413      	add	r3, r2
 800ef66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	015a      	lsls	r2, r3, #5
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	4413      	add	r3, r2
 800ef78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ef82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	3301      	adds	r3, #1
 800ef88:	613b      	str	r3, [r7, #16]
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8c:	693a      	ldr	r2, [r7, #16]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d3b7      	bcc.n	800ef02 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef92:	2300      	movs	r3, #0
 800ef94:	613b      	str	r3, [r7, #16]
 800ef96:	e043      	b.n	800f020 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	015a      	lsls	r2, r3, #5
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	4413      	add	r3, r2
 800efa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efae:	d118      	bne.n	800efe2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d10a      	bne.n	800efcc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	015a      	lsls	r2, r3, #5
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	4413      	add	r3, r2
 800efbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efc2:	461a      	mov	r2, r3
 800efc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800efc8:	6013      	str	r3, [r2, #0]
 800efca:	e013      	b.n	800eff4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	015a      	lsls	r2, r3, #5
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	4413      	add	r3, r2
 800efd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efd8:	461a      	mov	r2, r3
 800efda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800efde:	6013      	str	r3, [r2, #0]
 800efe0:	e008      	b.n	800eff4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	015a      	lsls	r2, r3, #5
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	4413      	add	r3, r2
 800efea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efee:	461a      	mov	r2, r3
 800eff0:	2300      	movs	r3, #0
 800eff2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	015a      	lsls	r2, r3, #5
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	4413      	add	r3, r2
 800effc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f000:	461a      	mov	r2, r3
 800f002:	2300      	movs	r3, #0
 800f004:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	015a      	lsls	r2, r3, #5
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	4413      	add	r3, r2
 800f00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f012:	461a      	mov	r2, r3
 800f014:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f018:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	3301      	adds	r3, #1
 800f01e:	613b      	str	r3, [r7, #16]
 800f020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f022:	693a      	ldr	r2, [r7, #16]
 800f024:	429a      	cmp	r2, r3
 800f026:	d3b7      	bcc.n	800ef98 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f036:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f03a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f048:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d105      	bne.n	800f05c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	699b      	ldr	r3, [r3, #24]
 800f054:	f043 0210 	orr.w	r2, r3, #16
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	699a      	ldr	r2, [r3, #24]
 800f060:	4b0f      	ldr	r3, [pc, #60]	; (800f0a0 <USB_DevInit+0x2b8>)
 800f062:	4313      	orrs	r3, r2
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d005      	beq.n	800f07a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	699b      	ldr	r3, [r3, #24]
 800f072:	f043 0208 	orr.w	r2, r3, #8
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f07a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d107      	bne.n	800f090 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	699b      	ldr	r3, [r3, #24]
 800f084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f088:	f043 0304 	orr.w	r3, r3, #4
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f090:	7dfb      	ldrb	r3, [r7, #23]
}
 800f092:	4618      	mov	r0, r3
 800f094:	3718      	adds	r7, #24
 800f096:	46bd      	mov	sp, r7
 800f098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f09c:	b004      	add	sp, #16
 800f09e:	4770      	bx	lr
 800f0a0:	803c3800 	.word	0x803c3800

0800f0a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	019b      	lsls	r3, r3, #6
 800f0b6:	f043 0220 	orr.w	r2, r3, #32
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	60fb      	str	r3, [r7, #12]
 800f0c4:	4a08      	ldr	r2, [pc, #32]	; (800f0e8 <USB_FlushTxFifo+0x44>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d901      	bls.n	800f0ce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800f0ca:	2303      	movs	r3, #3
 800f0cc:	e006      	b.n	800f0dc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	691b      	ldr	r3, [r3, #16]
 800f0d2:	f003 0320 	and.w	r3, r3, #32
 800f0d6:	2b20      	cmp	r3, #32
 800f0d8:	d0f1      	beq.n	800f0be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f0da:	2300      	movs	r3, #0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3714      	adds	r7, #20
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr
 800f0e8:	00030d40 	.word	0x00030d40

0800f0ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2210      	movs	r2, #16
 800f0fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	3301      	adds	r3, #1
 800f102:	60fb      	str	r3, [r7, #12]
 800f104:	4a08      	ldr	r2, [pc, #32]	; (800f128 <USB_FlushRxFifo+0x3c>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d901      	bls.n	800f10e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800f10a:	2303      	movs	r3, #3
 800f10c:	e006      	b.n	800f11c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	691b      	ldr	r3, [r3, #16]
 800f112:	f003 0310 	and.w	r3, r3, #16
 800f116:	2b10      	cmp	r3, #16
 800f118:	d0f1      	beq.n	800f0fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f11a:	2300      	movs	r3, #0
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3714      	adds	r7, #20
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr
 800f128:	00030d40 	.word	0x00030d40

0800f12c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b085      	sub	sp, #20
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	460b      	mov	r3, r1
 800f136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	78fb      	ldrb	r3, [r7, #3]
 800f146:	68f9      	ldr	r1, [r7, #12]
 800f148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f14c:	4313      	orrs	r3, r2
 800f14e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f150:	2300      	movs	r3, #0
}
 800f152:	4618      	mov	r0, r3
 800f154:	3714      	adds	r7, #20
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr

0800f15e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f15e:	b480      	push	{r7}
 800f160:	b087      	sub	sp, #28
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	f003 0306 	and.w	r3, r3, #6
 800f176:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d102      	bne.n	800f184 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f17e:	2300      	movs	r3, #0
 800f180:	75fb      	strb	r3, [r7, #23]
 800f182:	e00a      	b.n	800f19a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2b02      	cmp	r3, #2
 800f188:	d002      	beq.n	800f190 <USB_GetDevSpeed+0x32>
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2b06      	cmp	r3, #6
 800f18e:	d102      	bne.n	800f196 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f190:	2302      	movs	r3, #2
 800f192:	75fb      	strb	r3, [r7, #23]
 800f194:	e001      	b.n	800f19a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f196:	230f      	movs	r3, #15
 800f198:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	371c      	adds	r7, #28
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	785b      	ldrb	r3, [r3, #1]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d13a      	bne.n	800f23a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1ca:	69da      	ldr	r2, [r3, #28]
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	f003 030f 	and.w	r3, r3, #15
 800f1d4:	2101      	movs	r1, #1
 800f1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	68f9      	ldr	r1, [r7, #12]
 800f1de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1e2:	4313      	orrs	r3, r2
 800f1e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	015a      	lsls	r2, r3, #5
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d155      	bne.n	800f2a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	015a      	lsls	r2, r3, #5
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	4413      	add	r3, r2
 800f204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	78db      	ldrb	r3, [r3, #3]
 800f216:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f218:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	059b      	lsls	r3, r3, #22
 800f21e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f220:	4313      	orrs	r3, r2
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	0151      	lsls	r1, r2, #5
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	440a      	add	r2, r1
 800f22a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f22e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f236:	6013      	str	r3, [r2, #0]
 800f238:	e036      	b.n	800f2a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f240:	69da      	ldr	r2, [r3, #28]
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	f003 030f 	and.w	r3, r3, #15
 800f24a:	2101      	movs	r1, #1
 800f24c:	fa01 f303 	lsl.w	r3, r1, r3
 800f250:	041b      	lsls	r3, r3, #16
 800f252:	68f9      	ldr	r1, [r7, #12]
 800f254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f258:	4313      	orrs	r3, r2
 800f25a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	015a      	lsls	r2, r3, #5
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	4413      	add	r3, r2
 800f264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d11a      	bne.n	800f2a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	015a      	lsls	r2, r3, #5
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	4413      	add	r3, r2
 800f27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	78db      	ldrb	r3, [r3, #3]
 800f28c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f28e:	430b      	orrs	r3, r1
 800f290:	4313      	orrs	r3, r2
 800f292:	68ba      	ldr	r2, [r7, #8]
 800f294:	0151      	lsls	r1, r2, #5
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	440a      	add	r2, r1
 800f29a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f29e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f2a8:	2300      	movs	r3, #0
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3714      	adds	r7, #20
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
	...

0800f2b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b085      	sub	sp, #20
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	785b      	ldrb	r3, [r3, #1]
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d161      	bne.n	800f398 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	015a      	lsls	r2, r3, #5
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	4413      	add	r3, r2
 800f2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2ea:	d11f      	bne.n	800f32c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	015a      	lsls	r2, r3, #5
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	68ba      	ldr	r2, [r7, #8]
 800f2fc:	0151      	lsls	r1, r2, #5
 800f2fe:	68fa      	ldr	r2, [r7, #12]
 800f300:	440a      	add	r2, r1
 800f302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f306:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f30a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	015a      	lsls	r2, r3, #5
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	4413      	add	r3, r2
 800f314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	0151      	lsls	r1, r2, #5
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	440a      	add	r2, r1
 800f322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f32a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	f003 030f 	and.w	r3, r3, #15
 800f33c:	2101      	movs	r1, #1
 800f33e:	fa01 f303 	lsl.w	r3, r1, r3
 800f342:	b29b      	uxth	r3, r3
 800f344:	43db      	mvns	r3, r3
 800f346:	68f9      	ldr	r1, [r7, #12]
 800f348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f34c:	4013      	ands	r3, r2
 800f34e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f356:	69da      	ldr	r2, [r3, #28]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	f003 030f 	and.w	r3, r3, #15
 800f360:	2101      	movs	r1, #1
 800f362:	fa01 f303 	lsl.w	r3, r1, r3
 800f366:	b29b      	uxth	r3, r3
 800f368:	43db      	mvns	r3, r3
 800f36a:	68f9      	ldr	r1, [r7, #12]
 800f36c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f370:	4013      	ands	r3, r2
 800f372:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	015a      	lsls	r2, r3, #5
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	4413      	add	r3, r2
 800f37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	0159      	lsls	r1, r3, #5
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	440b      	add	r3, r1
 800f38a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f38e:	4619      	mov	r1, r3
 800f390:	4b35      	ldr	r3, [pc, #212]	; (800f468 <USB_DeactivateEndpoint+0x1b0>)
 800f392:	4013      	ands	r3, r2
 800f394:	600b      	str	r3, [r1, #0]
 800f396:	e060      	b.n	800f45a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	015a      	lsls	r2, r3, #5
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	4413      	add	r3, r2
 800f3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3ae:	d11f      	bne.n	800f3f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	015a      	lsls	r2, r3, #5
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	4413      	add	r3, r2
 800f3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68ba      	ldr	r2, [r7, #8]
 800f3c0:	0151      	lsls	r1, r2, #5
 800f3c2:	68fa      	ldr	r2, [r7, #12]
 800f3c4:	440a      	add	r2, r1
 800f3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f3ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	015a      	lsls	r2, r3, #5
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	0151      	lsls	r1, r2, #5
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	440a      	add	r2, r1
 800f3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f3ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	f003 030f 	and.w	r3, r3, #15
 800f400:	2101      	movs	r1, #1
 800f402:	fa01 f303 	lsl.w	r3, r1, r3
 800f406:	041b      	lsls	r3, r3, #16
 800f408:	43db      	mvns	r3, r3
 800f40a:	68f9      	ldr	r1, [r7, #12]
 800f40c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f410:	4013      	ands	r3, r2
 800f412:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f41a:	69da      	ldr	r2, [r3, #28]
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	f003 030f 	and.w	r3, r3, #15
 800f424:	2101      	movs	r1, #1
 800f426:	fa01 f303 	lsl.w	r3, r1, r3
 800f42a:	041b      	lsls	r3, r3, #16
 800f42c:	43db      	mvns	r3, r3
 800f42e:	68f9      	ldr	r1, [r7, #12]
 800f430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f434:	4013      	ands	r3, r2
 800f436:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	015a      	lsls	r2, r3, #5
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	4413      	add	r3, r2
 800f440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	0159      	lsls	r1, r3, #5
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	440b      	add	r3, r1
 800f44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f452:	4619      	mov	r1, r3
 800f454:	4b05      	ldr	r3, [pc, #20]	; (800f46c <USB_DeactivateEndpoint+0x1b4>)
 800f456:	4013      	ands	r3, r2
 800f458:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f45a:	2300      	movs	r3, #0
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3714      	adds	r7, #20
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	ec337800 	.word	0xec337800
 800f46c:	eff37800 	.word	0xeff37800

0800f470 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b08a      	sub	sp, #40	; 0x28
 800f474:	af02      	add	r7, sp, #8
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	4613      	mov	r3, r2
 800f47c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	785b      	ldrb	r3, [r3, #1]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	f040 815c 	bne.w	800f74a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	695b      	ldr	r3, [r3, #20]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d132      	bne.n	800f500 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	015a      	lsls	r2, r3, #5
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4a6:	691b      	ldr	r3, [r3, #16]
 800f4a8:	69ba      	ldr	r2, [r7, #24]
 800f4aa:	0151      	lsls	r1, r2, #5
 800f4ac:	69fa      	ldr	r2, [r7, #28]
 800f4ae:	440a      	add	r2, r1
 800f4b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f4b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f4bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	015a      	lsls	r2, r3, #5
 800f4c2:	69fb      	ldr	r3, [r7, #28]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ca:	691b      	ldr	r3, [r3, #16]
 800f4cc:	69ba      	ldr	r2, [r7, #24]
 800f4ce:	0151      	lsls	r1, r2, #5
 800f4d0:	69fa      	ldr	r2, [r7, #28]
 800f4d2:	440a      	add	r2, r1
 800f4d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f4dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	015a      	lsls	r2, r3, #5
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	69ba      	ldr	r2, [r7, #24]
 800f4ee:	0151      	lsls	r1, r2, #5
 800f4f0:	69fa      	ldr	r2, [r7, #28]
 800f4f2:	440a      	add	r2, r1
 800f4f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4f8:	0cdb      	lsrs	r3, r3, #19
 800f4fa:	04db      	lsls	r3, r3, #19
 800f4fc:	6113      	str	r3, [r2, #16]
 800f4fe:	e074      	b.n	800f5ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	015a      	lsls	r2, r3, #5
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	4413      	add	r3, r2
 800f508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f50c:	691b      	ldr	r3, [r3, #16]
 800f50e:	69ba      	ldr	r2, [r7, #24]
 800f510:	0151      	lsls	r1, r2, #5
 800f512:	69fa      	ldr	r2, [r7, #28]
 800f514:	440a      	add	r2, r1
 800f516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f51a:	0cdb      	lsrs	r3, r3, #19
 800f51c:	04db      	lsls	r3, r3, #19
 800f51e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	015a      	lsls	r2, r3, #5
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	4413      	add	r3, r2
 800f528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f52c:	691b      	ldr	r3, [r3, #16]
 800f52e:	69ba      	ldr	r2, [r7, #24]
 800f530:	0151      	lsls	r1, r2, #5
 800f532:	69fa      	ldr	r2, [r7, #28]
 800f534:	440a      	add	r2, r1
 800f536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f53a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f53e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	015a      	lsls	r2, r3, #5
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	4413      	add	r3, r2
 800f54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f550:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	6959      	ldr	r1, [r3, #20]
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	440b      	add	r3, r1
 800f55c:	1e59      	subs	r1, r3, #1
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	689b      	ldr	r3, [r3, #8]
 800f562:	fbb1 f3f3 	udiv	r3, r1, r3
 800f566:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f568:	4b9d      	ldr	r3, [pc, #628]	; (800f7e0 <USB_EPStartXfer+0x370>)
 800f56a:	400b      	ands	r3, r1
 800f56c:	69b9      	ldr	r1, [r7, #24]
 800f56e:	0148      	lsls	r0, r1, #5
 800f570:	69f9      	ldr	r1, [r7, #28]
 800f572:	4401      	add	r1, r0
 800f574:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f578:	4313      	orrs	r3, r2
 800f57a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f57c:	69bb      	ldr	r3, [r7, #24]
 800f57e:	015a      	lsls	r2, r3, #5
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	4413      	add	r3, r2
 800f584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f588:	691a      	ldr	r2, [r3, #16]
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	695b      	ldr	r3, [r3, #20]
 800f58e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f592:	69b9      	ldr	r1, [r7, #24]
 800f594:	0148      	lsls	r0, r1, #5
 800f596:	69f9      	ldr	r1, [r7, #28]
 800f598:	4401      	add	r1, r0
 800f59a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f59e:	4313      	orrs	r3, r2
 800f5a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	78db      	ldrb	r3, [r3, #3]
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d11f      	bne.n	800f5ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	015a      	lsls	r2, r3, #5
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b6:	691b      	ldr	r3, [r3, #16]
 800f5b8:	69ba      	ldr	r2, [r7, #24]
 800f5ba:	0151      	lsls	r1, r2, #5
 800f5bc:	69fa      	ldr	r2, [r7, #28]
 800f5be:	440a      	add	r2, r1
 800f5c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f5c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	015a      	lsls	r2, r3, #5
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5d6:	691b      	ldr	r3, [r3, #16]
 800f5d8:	69ba      	ldr	r2, [r7, #24]
 800f5da:	0151      	lsls	r1, r2, #5
 800f5dc:	69fa      	ldr	r2, [r7, #28]
 800f5de:	440a      	add	r2, r1
 800f5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f5e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f5ea:	79fb      	ldrb	r3, [r7, #7]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d14b      	bne.n	800f688 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	691b      	ldr	r3, [r3, #16]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d009      	beq.n	800f60c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	015a      	lsls	r2, r3, #5
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	4413      	add	r3, r2
 800f600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f604:	461a      	mov	r2, r3
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	691b      	ldr	r3, [r3, #16]
 800f60a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	78db      	ldrb	r3, [r3, #3]
 800f610:	2b01      	cmp	r3, #1
 800f612:	d128      	bne.n	800f666 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f61a:	689b      	ldr	r3, [r3, #8]
 800f61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f620:	2b00      	cmp	r3, #0
 800f622:	d110      	bne.n	800f646 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f624:	69bb      	ldr	r3, [r7, #24]
 800f626:	015a      	lsls	r2, r3, #5
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	4413      	add	r3, r2
 800f62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	69ba      	ldr	r2, [r7, #24]
 800f634:	0151      	lsls	r1, r2, #5
 800f636:	69fa      	ldr	r2, [r7, #28]
 800f638:	440a      	add	r2, r1
 800f63a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f63e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f642:	6013      	str	r3, [r2, #0]
 800f644:	e00f      	b.n	800f666 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	015a      	lsls	r2, r3, #5
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	4413      	add	r3, r2
 800f64e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	69ba      	ldr	r2, [r7, #24]
 800f656:	0151      	lsls	r1, r2, #5
 800f658:	69fa      	ldr	r2, [r7, #28]
 800f65a:	440a      	add	r2, r1
 800f65c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f664:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	015a      	lsls	r2, r3, #5
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	4413      	add	r3, r2
 800f66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	69ba      	ldr	r2, [r7, #24]
 800f676:	0151      	lsls	r1, r2, #5
 800f678:	69fa      	ldr	r2, [r7, #28]
 800f67a:	440a      	add	r2, r1
 800f67c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f680:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f684:	6013      	str	r3, [r2, #0]
 800f686:	e12f      	b.n	800f8e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f688:	69bb      	ldr	r3, [r7, #24]
 800f68a:	015a      	lsls	r2, r3, #5
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	4413      	add	r3, r2
 800f690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	69ba      	ldr	r2, [r7, #24]
 800f698:	0151      	lsls	r1, r2, #5
 800f69a:	69fa      	ldr	r2, [r7, #28]
 800f69c:	440a      	add	r2, r1
 800f69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	78db      	ldrb	r3, [r3, #3]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d015      	beq.n	800f6dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	695b      	ldr	r3, [r3, #20]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	f000 8117 	beq.w	800f8e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	f003 030f 	and.w	r3, r3, #15
 800f6ca:	2101      	movs	r1, #1
 800f6cc:	fa01 f303 	lsl.w	r3, r1, r3
 800f6d0:	69f9      	ldr	r1, [r7, #28]
 800f6d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	634b      	str	r3, [r1, #52]	; 0x34
 800f6da:	e105      	b.n	800f8e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d110      	bne.n	800f70e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	015a      	lsls	r2, r3, #5
 800f6f0:	69fb      	ldr	r3, [r7, #28]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	69ba      	ldr	r2, [r7, #24]
 800f6fc:	0151      	lsls	r1, r2, #5
 800f6fe:	69fa      	ldr	r2, [r7, #28]
 800f700:	440a      	add	r2, r1
 800f702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f70a:	6013      	str	r3, [r2, #0]
 800f70c:	e00f      	b.n	800f72e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f70e:	69bb      	ldr	r3, [r7, #24]
 800f710:	015a      	lsls	r2, r3, #5
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	4413      	add	r3, r2
 800f716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	69ba      	ldr	r2, [r7, #24]
 800f71e:	0151      	lsls	r1, r2, #5
 800f720:	69fa      	ldr	r2, [r7, #28]
 800f722:	440a      	add	r2, r1
 800f724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f72c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	68d9      	ldr	r1, [r3, #12]
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	781a      	ldrb	r2, [r3, #0]
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	695b      	ldr	r3, [r3, #20]
 800f73a:	b298      	uxth	r0, r3
 800f73c:	79fb      	ldrb	r3, [r7, #7]
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	4603      	mov	r3, r0
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f000 fa2b 	bl	800fb9e <USB_WritePacket>
 800f748:	e0ce      	b.n	800f8e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	015a      	lsls	r2, r3, #5
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	4413      	add	r3, r2
 800f752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	69ba      	ldr	r2, [r7, #24]
 800f75a:	0151      	lsls	r1, r2, #5
 800f75c:	69fa      	ldr	r2, [r7, #28]
 800f75e:	440a      	add	r2, r1
 800f760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f764:	0cdb      	lsrs	r3, r3, #19
 800f766:	04db      	lsls	r3, r3, #19
 800f768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f76a:	69bb      	ldr	r3, [r7, #24]
 800f76c:	015a      	lsls	r2, r3, #5
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	4413      	add	r3, r2
 800f772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f776:	691b      	ldr	r3, [r3, #16]
 800f778:	69ba      	ldr	r2, [r7, #24]
 800f77a:	0151      	lsls	r1, r2, #5
 800f77c:	69fa      	ldr	r2, [r7, #28]
 800f77e:	440a      	add	r2, r1
 800f780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f784:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f788:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f78c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d126      	bne.n	800f7e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	015a      	lsls	r2, r3, #5
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	4413      	add	r3, r2
 800f79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7a2:	691a      	ldr	r2, [r3, #16]
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	689b      	ldr	r3, [r3, #8]
 800f7a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7ac:	69b9      	ldr	r1, [r7, #24]
 800f7ae:	0148      	lsls	r0, r1, #5
 800f7b0:	69f9      	ldr	r1, [r7, #28]
 800f7b2:	4401      	add	r1, r0
 800f7b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	015a      	lsls	r2, r3, #5
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7c8:	691b      	ldr	r3, [r3, #16]
 800f7ca:	69ba      	ldr	r2, [r7, #24]
 800f7cc:	0151      	lsls	r1, r2, #5
 800f7ce:	69fa      	ldr	r2, [r7, #28]
 800f7d0:	440a      	add	r2, r1
 800f7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7da:	6113      	str	r3, [r2, #16]
 800f7dc:	e036      	b.n	800f84c <USB_EPStartXfer+0x3dc>
 800f7de:	bf00      	nop
 800f7e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	695a      	ldr	r2, [r3, #20]
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	1e5a      	subs	r2, r3, #1
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	015a      	lsls	r2, r3, #5
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	4413      	add	r3, r2
 800f802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f806:	691a      	ldr	r2, [r3, #16]
 800f808:	8afb      	ldrh	r3, [r7, #22]
 800f80a:	04d9      	lsls	r1, r3, #19
 800f80c:	4b39      	ldr	r3, [pc, #228]	; (800f8f4 <USB_EPStartXfer+0x484>)
 800f80e:	400b      	ands	r3, r1
 800f810:	69b9      	ldr	r1, [r7, #24]
 800f812:	0148      	lsls	r0, r1, #5
 800f814:	69f9      	ldr	r1, [r7, #28]
 800f816:	4401      	add	r1, r0
 800f818:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f81c:	4313      	orrs	r3, r2
 800f81e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	015a      	lsls	r2, r3, #5
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	4413      	add	r3, r2
 800f828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f82c:	691a      	ldr	r2, [r3, #16]
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	689b      	ldr	r3, [r3, #8]
 800f832:	8af9      	ldrh	r1, [r7, #22]
 800f834:	fb01 f303 	mul.w	r3, r1, r3
 800f838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f83c:	69b9      	ldr	r1, [r7, #24]
 800f83e:	0148      	lsls	r0, r1, #5
 800f840:	69f9      	ldr	r1, [r7, #28]
 800f842:	4401      	add	r1, r0
 800f844:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f848:	4313      	orrs	r3, r2
 800f84a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f84c:	79fb      	ldrb	r3, [r7, #7]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d10d      	bne.n	800f86e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d009      	beq.n	800f86e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	68d9      	ldr	r1, [r3, #12]
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	015a      	lsls	r2, r3, #5
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	4413      	add	r3, r2
 800f866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f86a:	460a      	mov	r2, r1
 800f86c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	78db      	ldrb	r3, [r3, #3]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d128      	bne.n	800f8c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f882:	2b00      	cmp	r3, #0
 800f884:	d110      	bne.n	800f8a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	015a      	lsls	r2, r3, #5
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	4413      	add	r3, r2
 800f88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	69ba      	ldr	r2, [r7, #24]
 800f896:	0151      	lsls	r1, r2, #5
 800f898:	69fa      	ldr	r2, [r7, #28]
 800f89a:	440a      	add	r2, r1
 800f89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8a4:	6013      	str	r3, [r2, #0]
 800f8a6:	e00f      	b.n	800f8c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	015a      	lsls	r2, r3, #5
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	69ba      	ldr	r2, [r7, #24]
 800f8b8:	0151      	lsls	r1, r2, #5
 800f8ba:	69fa      	ldr	r2, [r7, #28]
 800f8bc:	440a      	add	r2, r1
 800f8be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	015a      	lsls	r2, r3, #5
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	69ba      	ldr	r2, [r7, #24]
 800f8d8:	0151      	lsls	r1, r2, #5
 800f8da:	69fa      	ldr	r2, [r7, #28]
 800f8dc:	440a      	add	r2, r1
 800f8de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f8e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3720      	adds	r7, #32
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	1ff80000 	.word	0x1ff80000

0800f8f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b087      	sub	sp, #28
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	60b9      	str	r1, [r7, #8]
 800f902:	4613      	mov	r3, r2
 800f904:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	785b      	ldrb	r3, [r3, #1]
 800f914:	2b01      	cmp	r3, #1
 800f916:	f040 80cd 	bne.w	800fab4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	695b      	ldr	r3, [r3, #20]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d132      	bne.n	800f988 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	015a      	lsls	r2, r3, #5
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	4413      	add	r3, r2
 800f92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f92e:	691b      	ldr	r3, [r3, #16]
 800f930:	693a      	ldr	r2, [r7, #16]
 800f932:	0151      	lsls	r1, r2, #5
 800f934:	697a      	ldr	r2, [r7, #20]
 800f936:	440a      	add	r2, r1
 800f938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f93c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f940:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f944:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	015a      	lsls	r2, r3, #5
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	4413      	add	r3, r2
 800f94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f952:	691b      	ldr	r3, [r3, #16]
 800f954:	693a      	ldr	r2, [r7, #16]
 800f956:	0151      	lsls	r1, r2, #5
 800f958:	697a      	ldr	r2, [r7, #20]
 800f95a:	440a      	add	r2, r1
 800f95c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	015a      	lsls	r2, r3, #5
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	4413      	add	r3, r2
 800f96e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f972:	691b      	ldr	r3, [r3, #16]
 800f974:	693a      	ldr	r2, [r7, #16]
 800f976:	0151      	lsls	r1, r2, #5
 800f978:	697a      	ldr	r2, [r7, #20]
 800f97a:	440a      	add	r2, r1
 800f97c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f980:	0cdb      	lsrs	r3, r3, #19
 800f982:	04db      	lsls	r3, r3, #19
 800f984:	6113      	str	r3, [r2, #16]
 800f986:	e04e      	b.n	800fa26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	015a      	lsls	r2, r3, #5
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	4413      	add	r3, r2
 800f990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f994:	691b      	ldr	r3, [r3, #16]
 800f996:	693a      	ldr	r2, [r7, #16]
 800f998:	0151      	lsls	r1, r2, #5
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	440a      	add	r2, r1
 800f99e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9a2:	0cdb      	lsrs	r3, r3, #19
 800f9a4:	04db      	lsls	r3, r3, #19
 800f9a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	015a      	lsls	r2, r3, #5
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9b4:	691b      	ldr	r3, [r3, #16]
 800f9b6:	693a      	ldr	r2, [r7, #16]
 800f9b8:	0151      	lsls	r1, r2, #5
 800f9ba:	697a      	ldr	r2, [r7, #20]
 800f9bc:	440a      	add	r2, r1
 800f9be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f9c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f9ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	695a      	ldr	r2, [r3, #20]
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d903      	bls.n	800f9e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	689a      	ldr	r2, [r3, #8]
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	015a      	lsls	r2, r3, #5
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	4413      	add	r3, r2
 800f9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9ec:	691b      	ldr	r3, [r3, #16]
 800f9ee:	693a      	ldr	r2, [r7, #16]
 800f9f0:	0151      	lsls	r1, r2, #5
 800f9f2:	697a      	ldr	r2, [r7, #20]
 800f9f4:	440a      	add	r2, r1
 800f9f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f9fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	015a      	lsls	r2, r3, #5
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	4413      	add	r3, r2
 800fa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa0c:	691a      	ldr	r2, [r3, #16]
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	695b      	ldr	r3, [r3, #20]
 800fa12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa16:	6939      	ldr	r1, [r7, #16]
 800fa18:	0148      	lsls	r0, r1, #5
 800fa1a:	6979      	ldr	r1, [r7, #20]
 800fa1c:	4401      	add	r1, r0
 800fa1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fa22:	4313      	orrs	r3, r2
 800fa24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fa26:	79fb      	ldrb	r3, [r7, #7]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d11e      	bne.n	800fa6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d009      	beq.n	800fa48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	015a      	lsls	r2, r3, #5
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa40:	461a      	mov	r2, r3
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	691b      	ldr	r3, [r3, #16]
 800fa46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	015a      	lsls	r2, r3, #5
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	4413      	add	r3, r2
 800fa50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	693a      	ldr	r2, [r7, #16]
 800fa58:	0151      	lsls	r1, r2, #5
 800fa5a:	697a      	ldr	r2, [r7, #20]
 800fa5c:	440a      	add	r2, r1
 800fa5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa66:	6013      	str	r3, [r2, #0]
 800fa68:	e092      	b.n	800fb90 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	015a      	lsls	r2, r3, #5
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	4413      	add	r3, r2
 800fa72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	693a      	ldr	r2, [r7, #16]
 800fa7a:	0151      	lsls	r1, r2, #5
 800fa7c:	697a      	ldr	r2, [r7, #20]
 800fa7e:	440a      	add	r2, r1
 800fa80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	695b      	ldr	r3, [r3, #20]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d07e      	beq.n	800fb90 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	f003 030f 	and.w	r3, r3, #15
 800faa2:	2101      	movs	r1, #1
 800faa4:	fa01 f303 	lsl.w	r3, r1, r3
 800faa8:	6979      	ldr	r1, [r7, #20]
 800faaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800faae:	4313      	orrs	r3, r2
 800fab0:	634b      	str	r3, [r1, #52]	; 0x34
 800fab2:	e06d      	b.n	800fb90 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	015a      	lsls	r2, r3, #5
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	4413      	add	r3, r2
 800fabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fac0:	691b      	ldr	r3, [r3, #16]
 800fac2:	693a      	ldr	r2, [r7, #16]
 800fac4:	0151      	lsls	r1, r2, #5
 800fac6:	697a      	ldr	r2, [r7, #20]
 800fac8:	440a      	add	r2, r1
 800faca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800face:	0cdb      	lsrs	r3, r3, #19
 800fad0:	04db      	lsls	r3, r3, #19
 800fad2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	015a      	lsls	r2, r3, #5
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	4413      	add	r3, r2
 800fadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fae0:	691b      	ldr	r3, [r3, #16]
 800fae2:	693a      	ldr	r2, [r7, #16]
 800fae4:	0151      	lsls	r1, r2, #5
 800fae6:	697a      	ldr	r2, [r7, #20]
 800fae8:	440a      	add	r2, r1
 800faea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800faee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800faf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800faf6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	695b      	ldr	r3, [r3, #20]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d003      	beq.n	800fb08 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	689a      	ldr	r2, [r3, #8]
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	015a      	lsls	r2, r3, #5
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	4413      	add	r3, r2
 800fb10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb14:	691b      	ldr	r3, [r3, #16]
 800fb16:	693a      	ldr	r2, [r7, #16]
 800fb18:	0151      	lsls	r1, r2, #5
 800fb1a:	697a      	ldr	r2, [r7, #20]
 800fb1c:	440a      	add	r2, r1
 800fb1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	015a      	lsls	r2, r3, #5
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	4413      	add	r3, r2
 800fb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb34:	691a      	ldr	r2, [r3, #16]
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	689b      	ldr	r3, [r3, #8]
 800fb3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb3e:	6939      	ldr	r1, [r7, #16]
 800fb40:	0148      	lsls	r0, r1, #5
 800fb42:	6979      	ldr	r1, [r7, #20]
 800fb44:	4401      	add	r1, r0
 800fb46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fb4e:	79fb      	ldrb	r3, [r7, #7]
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d10d      	bne.n	800fb70 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d009      	beq.n	800fb70 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	68d9      	ldr	r1, [r3, #12]
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	015a      	lsls	r2, r3, #5
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	4413      	add	r3, r2
 800fb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb6c:	460a      	mov	r2, r1
 800fb6e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	015a      	lsls	r2, r3, #5
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	4413      	add	r3, r2
 800fb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	693a      	ldr	r2, [r7, #16]
 800fb80:	0151      	lsls	r1, r2, #5
 800fb82:	697a      	ldr	r2, [r7, #20]
 800fb84:	440a      	add	r2, r1
 800fb86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	371c      	adds	r7, #28
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr

0800fb9e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fb9e:	b480      	push	{r7}
 800fba0:	b089      	sub	sp, #36	; 0x24
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	60f8      	str	r0, [r7, #12]
 800fba6:	60b9      	str	r1, [r7, #8]
 800fba8:	4611      	mov	r1, r2
 800fbaa:	461a      	mov	r2, r3
 800fbac:	460b      	mov	r3, r1
 800fbae:	71fb      	strb	r3, [r7, #7]
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800fbbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d123      	bne.n	800fc0c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fbc4:	88bb      	ldrh	r3, [r7, #4]
 800fbc6:	3303      	adds	r3, #3
 800fbc8:	089b      	lsrs	r3, r3, #2
 800fbca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fbcc:	2300      	movs	r3, #0
 800fbce:	61bb      	str	r3, [r7, #24]
 800fbd0:	e018      	b.n	800fc04 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fbd2:	79fb      	ldrb	r3, [r7, #7]
 800fbd4:	031a      	lsls	r2, r3, #12
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	4413      	add	r3, r2
 800fbda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbde:	461a      	mov	r2, r3
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	3301      	adds	r3, #1
 800fc02:	61bb      	str	r3, [r7, #24]
 800fc04:	69ba      	ldr	r2, [r7, #24]
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d3e2      	bcc.n	800fbd2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fc0c:	2300      	movs	r3, #0
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3724      	adds	r7, #36	; 0x24
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr

0800fc1a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fc1a:	b480      	push	{r7}
 800fc1c:	b08b      	sub	sp, #44	; 0x2c
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	60f8      	str	r0, [r7, #12]
 800fc22:	60b9      	str	r1, [r7, #8]
 800fc24:	4613      	mov	r3, r2
 800fc26:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fc30:	88fb      	ldrh	r3, [r7, #6]
 800fc32:	089b      	lsrs	r3, r3, #2
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fc38:	88fb      	ldrh	r3, [r7, #6]
 800fc3a:	f003 0303 	and.w	r3, r3, #3
 800fc3e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fc40:	2300      	movs	r3, #0
 800fc42:	623b      	str	r3, [r7, #32]
 800fc44:	e014      	b.n	800fc70 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fc46:	69bb      	ldr	r3, [r7, #24]
 800fc48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	601a      	str	r2, [r3, #0]
    pDest++;
 800fc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc54:	3301      	adds	r3, #1
 800fc56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc60:	3301      	adds	r3, #1
 800fc62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc66:	3301      	adds	r3, #1
 800fc68:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fc6a:	6a3b      	ldr	r3, [r7, #32]
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	623b      	str	r3, [r7, #32]
 800fc70:	6a3a      	ldr	r2, [r7, #32]
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d3e6      	bcc.n	800fc46 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fc78:	8bfb      	ldrh	r3, [r7, #30]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d01e      	beq.n	800fcbc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fc82:	69bb      	ldr	r3, [r7, #24]
 800fc84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc88:	461a      	mov	r2, r3
 800fc8a:	f107 0310 	add.w	r3, r7, #16
 800fc8e:	6812      	ldr	r2, [r2, #0]
 800fc90:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fc92:	693a      	ldr	r2, [r7, #16]
 800fc94:	6a3b      	ldr	r3, [r7, #32]
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	00db      	lsls	r3, r3, #3
 800fc9a:	fa22 f303 	lsr.w	r3, r2, r3
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	701a      	strb	r2, [r3, #0]
      i++;
 800fca4:	6a3b      	ldr	r3, [r7, #32]
 800fca6:	3301      	adds	r3, #1
 800fca8:	623b      	str	r3, [r7, #32]
      pDest++;
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcac:	3301      	adds	r3, #1
 800fcae:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800fcb0:	8bfb      	ldrh	r3, [r7, #30]
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fcb6:	8bfb      	ldrh	r3, [r7, #30]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d1ea      	bne.n	800fc92 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	372c      	adds	r7, #44	; 0x2c
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr

0800fcca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fcca:	b480      	push	{r7}
 800fccc:	b085      	sub	sp, #20
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	785b      	ldrb	r3, [r3, #1]
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d12c      	bne.n	800fd40 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	015a      	lsls	r2, r3, #5
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	4413      	add	r3, r2
 800fcee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	db12      	blt.n	800fd1e <USB_EPSetStall+0x54>
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d00f      	beq.n	800fd1e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	015a      	lsls	r2, r3, #5
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	4413      	add	r3, r2
 800fd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	68ba      	ldr	r2, [r7, #8]
 800fd0e:	0151      	lsls	r1, r2, #5
 800fd10:	68fa      	ldr	r2, [r7, #12]
 800fd12:	440a      	add	r2, r1
 800fd14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fd1c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	015a      	lsls	r2, r3, #5
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	4413      	add	r3, r2
 800fd26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68ba      	ldr	r2, [r7, #8]
 800fd2e:	0151      	lsls	r1, r2, #5
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	440a      	add	r2, r1
 800fd34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fd3c:	6013      	str	r3, [r2, #0]
 800fd3e:	e02b      	b.n	800fd98 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	015a      	lsls	r2, r3, #5
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	4413      	add	r3, r2
 800fd48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	db12      	blt.n	800fd78 <USB_EPSetStall+0xae>
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d00f      	beq.n	800fd78 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	015a      	lsls	r2, r3, #5
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	4413      	add	r3, r2
 800fd60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	68ba      	ldr	r2, [r7, #8]
 800fd68:	0151      	lsls	r1, r2, #5
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	440a      	add	r2, r1
 800fd6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fd76:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	015a      	lsls	r2, r3, #5
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	4413      	add	r3, r2
 800fd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	68ba      	ldr	r2, [r7, #8]
 800fd88:	0151      	lsls	r1, r2, #5
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	440a      	add	r2, r1
 800fd8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fd96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fd98:	2300      	movs	r3, #0
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3714      	adds	r7, #20
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr

0800fda6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fda6:	b480      	push	{r7}
 800fda8:	b085      	sub	sp, #20
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
 800fdae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	785b      	ldrb	r3, [r3, #1]
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d128      	bne.n	800fe14 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	015a      	lsls	r2, r3, #5
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	4413      	add	r3, r2
 800fdca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68ba      	ldr	r2, [r7, #8]
 800fdd2:	0151      	lsls	r1, r2, #5
 800fdd4:	68fa      	ldr	r2, [r7, #12]
 800fdd6:	440a      	add	r2, r1
 800fdd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fde0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	78db      	ldrb	r3, [r3, #3]
 800fde6:	2b03      	cmp	r3, #3
 800fde8:	d003      	beq.n	800fdf2 <USB_EPClearStall+0x4c>
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	78db      	ldrb	r3, [r3, #3]
 800fdee:	2b02      	cmp	r3, #2
 800fdf0:	d138      	bne.n	800fe64 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	015a      	lsls	r2, r3, #5
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	68ba      	ldr	r2, [r7, #8]
 800fe02:	0151      	lsls	r1, r2, #5
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	440a      	add	r2, r1
 800fe08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe10:	6013      	str	r3, [r2, #0]
 800fe12:	e027      	b.n	800fe64 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	015a      	lsls	r2, r3, #5
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	4413      	add	r3, r2
 800fe1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	68ba      	ldr	r2, [r7, #8]
 800fe24:	0151      	lsls	r1, r2, #5
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	440a      	add	r2, r1
 800fe2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	78db      	ldrb	r3, [r3, #3]
 800fe38:	2b03      	cmp	r3, #3
 800fe3a:	d003      	beq.n	800fe44 <USB_EPClearStall+0x9e>
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	78db      	ldrb	r3, [r3, #3]
 800fe40:	2b02      	cmp	r3, #2
 800fe42:	d10f      	bne.n	800fe64 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	015a      	lsls	r2, r3, #5
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	4413      	add	r3, r2
 800fe4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	68ba      	ldr	r2, [r7, #8]
 800fe54:	0151      	lsls	r1, r2, #5
 800fe56:	68fa      	ldr	r2, [r7, #12]
 800fe58:	440a      	add	r2, r1
 800fe5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe62:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3714      	adds	r7, #20
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr

0800fe72 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fe72:	b480      	push	{r7}
 800fe74:	b085      	sub	sp, #20
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	6078      	str	r0, [r7, #4]
 800fe7a:	460b      	mov	r3, r1
 800fe7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	68fa      	ldr	r2, [r7, #12]
 800fe8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fe94:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	78fb      	ldrb	r3, [r7, #3]
 800fea0:	011b      	lsls	r3, r3, #4
 800fea2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fea6:	68f9      	ldr	r1, [r7, #12]
 800fea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800feac:	4313      	orrs	r3, r2
 800feae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3714      	adds	r7, #20
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr

0800febe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800febe:	b480      	push	{r7}
 800fec0:	b085      	sub	sp, #20
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	68fa      	ldr	r2, [r7, #12]
 800fed4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fed8:	f023 0303 	bic.w	r3, r3, #3
 800fedc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800feec:	f023 0302 	bic.w	r3, r3, #2
 800fef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fef2:	2300      	movs	r3, #0
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3714      	adds	r7, #20
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b085      	sub	sp, #20
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff1a:	f023 0303 	bic.w	r3, r3, #3
 800ff1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff2e:	f043 0302 	orr.w	r3, r3, #2
 800ff32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3714      	adds	r7, #20
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr

0800ff42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ff42:	b480      	push	{r7}
 800ff44:	b085      	sub	sp, #20
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	695b      	ldr	r3, [r3, #20]
 800ff4e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	699b      	ldr	r3, [r3, #24]
 800ff54:	68fa      	ldr	r2, [r7, #12]
 800ff56:	4013      	ands	r3, r2
 800ff58:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3714      	adds	r7, #20
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b085      	sub	sp, #20
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff7a:	699b      	ldr	r3, [r3, #24]
 800ff7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff84:	69db      	ldr	r3, [r3, #28]
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	4013      	ands	r3, r2
 800ff8a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	0c1b      	lsrs	r3, r3, #16
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3714      	adds	r7, #20
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr

0800ff9c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b085      	sub	sp, #20
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffae:	699b      	ldr	r3, [r3, #24]
 800ffb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffb8:	69db      	ldr	r3, [r3, #28]
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	4013      	ands	r3, r2
 800ffbe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	b29b      	uxth	r3, r3
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3714      	adds	r7, #20
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b085      	sub	sp, #20
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	460b      	mov	r3, r1
 800ffda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ffe0:	78fb      	ldrb	r3, [r7, #3]
 800ffe2:	015a      	lsls	r2, r3, #5
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fff6:	695b      	ldr	r3, [r3, #20]
 800fff8:	68ba      	ldr	r2, [r7, #8]
 800fffa:	4013      	ands	r3, r2
 800fffc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fffe:	68bb      	ldr	r3, [r7, #8]
}
 8010000:	4618      	mov	r0, r3
 8010002:	3714      	adds	r7, #20
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801000c:	b480      	push	{r7}
 801000e:	b087      	sub	sp, #28
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	460b      	mov	r3, r1
 8010016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010022:	691b      	ldr	r3, [r3, #16]
 8010024:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801002c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801002e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010030:	78fb      	ldrb	r3, [r7, #3]
 8010032:	f003 030f 	and.w	r3, r3, #15
 8010036:	68fa      	ldr	r2, [r7, #12]
 8010038:	fa22 f303 	lsr.w	r3, r2, r3
 801003c:	01db      	lsls	r3, r3, #7
 801003e:	b2db      	uxtb	r3, r3
 8010040:	693a      	ldr	r2, [r7, #16]
 8010042:	4313      	orrs	r3, r2
 8010044:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010046:	78fb      	ldrb	r3, [r7, #3]
 8010048:	015a      	lsls	r2, r3, #5
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	4413      	add	r3, r2
 801004e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010052:	689b      	ldr	r3, [r3, #8]
 8010054:	693a      	ldr	r2, [r7, #16]
 8010056:	4013      	ands	r3, r2
 8010058:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801005a:	68bb      	ldr	r3, [r7, #8]
}
 801005c:	4618      	mov	r0, r3
 801005e:	371c      	adds	r7, #28
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr

08010068 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	695b      	ldr	r3, [r3, #20]
 8010074:	f003 0301 	and.w	r3, r3, #1
}
 8010078:	4618      	mov	r0, r3
 801007a:	370c      	adds	r7, #12
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010084:	b480      	push	{r7}
 8010086:	b085      	sub	sp, #20
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801009e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80100a2:	f023 0307 	bic.w	r3, r3, #7
 80100a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80100bc:	2300      	movs	r3, #0
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3714      	adds	r7, #20
 80100c2:	46bd      	mov	sp, r7
 80100c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c8:	4770      	bx	lr
	...

080100cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b087      	sub	sp, #28
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	460b      	mov	r3, r1
 80100d6:	607a      	str	r2, [r7, #4]
 80100d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	333c      	adds	r3, #60	; 0x3c
 80100e2:	3304      	adds	r3, #4
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	4a26      	ldr	r2, [pc, #152]	; (8010184 <USB_EP0_OutStart+0xb8>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d90a      	bls.n	8010106 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010100:	d101      	bne.n	8010106 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010102:	2300      	movs	r3, #0
 8010104:	e037      	b.n	8010176 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801010c:	461a      	mov	r2, r3
 801010e:	2300      	movs	r3, #0
 8010110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010118:	691b      	ldr	r3, [r3, #16]
 801011a:	697a      	ldr	r2, [r7, #20]
 801011c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	697a      	ldr	r2, [r7, #20]
 8010130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010134:	f043 0318 	orr.w	r3, r3, #24
 8010138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	697a      	ldr	r2, [r7, #20]
 8010144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010148:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801014c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801014e:	7afb      	ldrb	r3, [r7, #11]
 8010150:	2b01      	cmp	r3, #1
 8010152:	d10f      	bne.n	8010174 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801015a:	461a      	mov	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	697a      	ldr	r2, [r7, #20]
 801016a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801016e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010174:	2300      	movs	r3, #0
}
 8010176:	4618      	mov	r0, r3
 8010178:	371c      	adds	r7, #28
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop
 8010184:	4f54300a 	.word	0x4f54300a

08010188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010188:	b480      	push	{r7}
 801018a:	b085      	sub	sp, #20
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010190:	2300      	movs	r3, #0
 8010192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	3301      	adds	r3, #1
 8010198:	60fb      	str	r3, [r7, #12]
 801019a:	4a13      	ldr	r2, [pc, #76]	; (80101e8 <USB_CoreReset+0x60>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d901      	bls.n	80101a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80101a0:	2303      	movs	r3, #3
 80101a2:	e01a      	b.n	80101da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	691b      	ldr	r3, [r3, #16]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	daf3      	bge.n	8010194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80101ac:	2300      	movs	r3, #0
 80101ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	691b      	ldr	r3, [r3, #16]
 80101b4:	f043 0201 	orr.w	r2, r3, #1
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	3301      	adds	r3, #1
 80101c0:	60fb      	str	r3, [r7, #12]
 80101c2:	4a09      	ldr	r2, [pc, #36]	; (80101e8 <USB_CoreReset+0x60>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d901      	bls.n	80101cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80101c8:	2303      	movs	r3, #3
 80101ca:	e006      	b.n	80101da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	691b      	ldr	r3, [r3, #16]
 80101d0:	f003 0301 	and.w	r3, r3, #1
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d0f1      	beq.n	80101bc <USB_CoreReset+0x34>

  return HAL_OK;
 80101d8:	2300      	movs	r3, #0
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3714      	adds	r7, #20
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
 80101e6:	bf00      	nop
 80101e8:	00030d40 	.word	0x00030d40

080101ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80101f0:	4904      	ldr	r1, [pc, #16]	; (8010204 <MX_FATFS_Init+0x18>)
 80101f2:	4805      	ldr	r0, [pc, #20]	; (8010208 <MX_FATFS_Init+0x1c>)
 80101f4:	f006 f800 	bl	80161f8 <FATFS_LinkDriver>
 80101f8:	4603      	mov	r3, r0
 80101fa:	461a      	mov	r2, r3
 80101fc:	4b03      	ldr	r3, [pc, #12]	; (801020c <MX_FATFS_Init+0x20>)
 80101fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010200:	bf00      	nop
 8010202:	bd80      	pop	{r7, pc}
 8010204:	20002e94 	.word	0x20002e94
 8010208:	080177dc 	.word	0x080177dc
 801020c:	20002e90 	.word	0x20002e90

08010210 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010210:	b480      	push	{r7}
 8010212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010214:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010216:	4618      	mov	r0, r3
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010226:	2300      	movs	r3, #0
 8010228:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801022a:	f000 f896 	bl	801035a <BSP_SD_IsDetected>
 801022e:	4603      	mov	r3, r0
 8010230:	2b01      	cmp	r3, #1
 8010232:	d001      	beq.n	8010238 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010234:	2301      	movs	r3, #1
 8010236:	e012      	b.n	801025e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010238:	480b      	ldr	r0, [pc, #44]	; (8010268 <BSP_SD_Init+0x48>)
 801023a:	f7fc f8b7 	bl	800c3ac <HAL_SD_Init>
 801023e:	4603      	mov	r3, r0
 8010240:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010242:	79fb      	ldrb	r3, [r7, #7]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d109      	bne.n	801025c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801024c:	4806      	ldr	r0, [pc, #24]	; (8010268 <BSP_SD_Init+0x48>)
 801024e:	f7fc fe6d 	bl	800cf2c <HAL_SD_ConfigWideBusOperation>
 8010252:	4603      	mov	r3, r0
 8010254:	2b00      	cmp	r3, #0
 8010256:	d001      	beq.n	801025c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010258:	2301      	movs	r3, #1
 801025a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801025c:	79fb      	ldrb	r3, [r7, #7]
}
 801025e:	4618      	mov	r0, r3
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	20001bd0 	.word	0x20001bd0

0801026c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010278:	2300      	movs	r3, #0
 801027a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	68ba      	ldr	r2, [r7, #8]
 8010280:	68f9      	ldr	r1, [r7, #12]
 8010282:	4806      	ldr	r0, [pc, #24]	; (801029c <BSP_SD_ReadBlocks_DMA+0x30>)
 8010284:	f7fc f940 	bl	800c508 <HAL_SD_ReadBlocks_DMA>
 8010288:	4603      	mov	r3, r0
 801028a:	2b00      	cmp	r3, #0
 801028c:	d001      	beq.n	8010292 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801028e:	2301      	movs	r3, #1
 8010290:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010292:	7dfb      	ldrb	r3, [r7, #23]
}
 8010294:	4618      	mov	r0, r3
 8010296:	3718      	adds	r7, #24
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	20001bd0 	.word	0x20001bd0

080102a0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	68ba      	ldr	r2, [r7, #8]
 80102b4:	68f9      	ldr	r1, [r7, #12]
 80102b6:	4806      	ldr	r0, [pc, #24]	; (80102d0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80102b8:	f7fc fa06 	bl	800c6c8 <HAL_SD_WriteBlocks_DMA>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d001      	beq.n	80102c6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80102c2:	2301      	movs	r3, #1
 80102c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80102c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3718      	adds	r7, #24
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	20001bd0 	.word	0x20001bd0

080102d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80102d8:	4805      	ldr	r0, [pc, #20]	; (80102f0 <BSP_SD_GetCardState+0x1c>)
 80102da:	f7fc fec1 	bl	800d060 <HAL_SD_GetCardState>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b04      	cmp	r3, #4
 80102e2:	bf14      	ite	ne
 80102e4:	2301      	movne	r3, #1
 80102e6:	2300      	moveq	r3, #0
 80102e8:	b2db      	uxtb	r3, r3
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	20001bd0 	.word	0x20001bd0

080102f4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80102fc:	6879      	ldr	r1, [r7, #4]
 80102fe:	4803      	ldr	r0, [pc, #12]	; (801030c <BSP_SD_GetCardInfo+0x18>)
 8010300:	f7fc fde8 	bl	800ced4 <HAL_SD_GetCardInfo>
}
 8010304:	bf00      	nop
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	20001bd0 	.word	0x20001bd0

08010310 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010318:	f000 f818 	bl	801034c <BSP_SD_AbortCallback>
}
 801031c:	bf00      	nop
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801032c:	f000 f9a8 	bl	8010680 <BSP_SD_WriteCpltCallback>
}
 8010330:	bf00      	nop
 8010332:	3708      	adds	r7, #8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010340:	f000 f9aa 	bl	8010698 <BSP_SD_ReadCpltCallback>
}
 8010344:	bf00      	nop
 8010346:	3708      	adds	r7, #8
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 801034c:	b480      	push	{r7}
 801034e:	af00      	add	r7, sp, #0

}
 8010350:	bf00      	nop
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr

0801035a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b082      	sub	sp, #8
 801035e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010360:	2301      	movs	r3, #1
 8010362:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010364:	f000 f80c 	bl	8010380 <BSP_PlatformIsDetected>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d101      	bne.n	8010372 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801036e:	2300      	movs	r3, #0
 8010370:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010372:	79fb      	ldrb	r3, [r7, #7]
 8010374:	b2db      	uxtb	r3, r3
}
 8010376:	4618      	mov	r0, r3
 8010378:	3708      	adds	r7, #8
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
	...

08010380 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010386:	2301      	movs	r3, #1
 8010388:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801038a:	2180      	movs	r1, #128	; 0x80
 801038c:	4806      	ldr	r0, [pc, #24]	; (80103a8 <BSP_PlatformIsDetected+0x28>)
 801038e:	f7f8 f9c3 	bl	8008718 <HAL_GPIO_ReadPin>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d001      	beq.n	801039c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8010398:	2300      	movs	r3, #0
 801039a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801039c:	79fb      	ldrb	r3, [r7, #7]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	40020800 	.word	0x40020800

080103ac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80103b4:	f7f6 f882 	bl	80064bc <HAL_GetTick>
 80103b8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80103ba:	e006      	b.n	80103ca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80103bc:	f7ff ff8a 	bl	80102d4 <BSP_SD_GetCardState>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d101      	bne.n	80103ca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80103c6:	2300      	movs	r3, #0
 80103c8:	e009      	b.n	80103de <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80103ca:	f7f6 f877 	bl	80064bc <HAL_GetTick>
 80103ce:	4602      	mov	r2, r0
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	1ad3      	subs	r3, r2, r3
 80103d4:	687a      	ldr	r2, [r7, #4]
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d8f0      	bhi.n	80103bc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80103da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3710      	adds	r7, #16
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
	...

080103e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	4603      	mov	r3, r0
 80103f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80103f2:	4b0b      	ldr	r3, [pc, #44]	; (8010420 <SD_CheckStatus+0x38>)
 80103f4:	2201      	movs	r2, #1
 80103f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80103f8:	f7ff ff6c 	bl	80102d4 <BSP_SD_GetCardState>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d107      	bne.n	8010412 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010402:	4b07      	ldr	r3, [pc, #28]	; (8010420 <SD_CheckStatus+0x38>)
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	b2db      	uxtb	r3, r3
 8010408:	f023 0301 	bic.w	r3, r3, #1
 801040c:	b2da      	uxtb	r2, r3
 801040e:	4b04      	ldr	r3, [pc, #16]	; (8010420 <SD_CheckStatus+0x38>)
 8010410:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010412:	4b03      	ldr	r3, [pc, #12]	; (8010420 <SD_CheckStatus+0x38>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	b2db      	uxtb	r3, r3
}
 8010418:	4618      	mov	r0, r3
 801041a:	3708      	adds	r7, #8
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	20000009 	.word	0x20000009

08010424 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	4603      	mov	r3, r0
 801042c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801042e:	f7ff fef7 	bl	8010220 <BSP_SD_Init>
 8010432:	4603      	mov	r3, r0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d107      	bne.n	8010448 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010438:	79fb      	ldrb	r3, [r7, #7]
 801043a:	4618      	mov	r0, r3
 801043c:	f7ff ffd4 	bl	80103e8 <SD_CheckStatus>
 8010440:	4603      	mov	r3, r0
 8010442:	461a      	mov	r2, r3
 8010444:	4b04      	ldr	r3, [pc, #16]	; (8010458 <SD_initialize+0x34>)
 8010446:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010448:	4b03      	ldr	r3, [pc, #12]	; (8010458 <SD_initialize+0x34>)
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	b2db      	uxtb	r3, r3
}
 801044e:	4618      	mov	r0, r3
 8010450:	3708      	adds	r7, #8
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	20000009 	.word	0x20000009

0801045c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	4603      	mov	r3, r0
 8010464:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010466:	79fb      	ldrb	r3, [r7, #7]
 8010468:	4618      	mov	r0, r3
 801046a:	f7ff ffbd 	bl	80103e8 <SD_CheckStatus>
 801046e:	4603      	mov	r3, r0
}
 8010470:	4618      	mov	r0, r3
 8010472:	3708      	adds	r7, #8
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}

08010478 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b086      	sub	sp, #24
 801047c:	af00      	add	r7, sp, #0
 801047e:	60b9      	str	r1, [r7, #8]
 8010480:	607a      	str	r2, [r7, #4]
 8010482:	603b      	str	r3, [r7, #0]
 8010484:	4603      	mov	r3, r0
 8010486:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010488:	2301      	movs	r3, #1
 801048a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801048c:	f247 5030 	movw	r0, #30000	; 0x7530
 8010490:	f7ff ff8c 	bl	80103ac <SD_CheckStatusWithTimeout>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	da01      	bge.n	801049e <SD_read+0x26>
  {
    return res;
 801049a:	7dfb      	ldrb	r3, [r7, #23]
 801049c:	e03b      	b.n	8010516 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801049e:	683a      	ldr	r2, [r7, #0]
 80104a0:	6879      	ldr	r1, [r7, #4]
 80104a2:	68b8      	ldr	r0, [r7, #8]
 80104a4:	f7ff fee2 	bl	801026c <BSP_SD_ReadBlocks_DMA>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d132      	bne.n	8010514 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80104ae:	4b1c      	ldr	r3, [pc, #112]	; (8010520 <SD_read+0xa8>)
 80104b0:	2200      	movs	r2, #0
 80104b2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80104b4:	f7f6 f802 	bl	80064bc <HAL_GetTick>
 80104b8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80104ba:	bf00      	nop
 80104bc:	4b18      	ldr	r3, [pc, #96]	; (8010520 <SD_read+0xa8>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d108      	bne.n	80104d6 <SD_read+0x5e>
 80104c4:	f7f5 fffa 	bl	80064bc <HAL_GetTick>
 80104c8:	4602      	mov	r2, r0
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	f247 522f 	movw	r2, #29999	; 0x752f
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d9f2      	bls.n	80104bc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80104d6:	4b12      	ldr	r3, [pc, #72]	; (8010520 <SD_read+0xa8>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d102      	bne.n	80104e4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80104de:	2301      	movs	r3, #1
 80104e0:	75fb      	strb	r3, [r7, #23]
 80104e2:	e017      	b.n	8010514 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80104e4:	4b0e      	ldr	r3, [pc, #56]	; (8010520 <SD_read+0xa8>)
 80104e6:	2200      	movs	r2, #0
 80104e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80104ea:	f7f5 ffe7 	bl	80064bc <HAL_GetTick>
 80104ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80104f0:	e007      	b.n	8010502 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80104f2:	f7ff feef 	bl	80102d4 <BSP_SD_GetCardState>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d102      	bne.n	8010502 <SD_read+0x8a>
          {
            res = RES_OK;
 80104fc:	2300      	movs	r3, #0
 80104fe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010500:	e008      	b.n	8010514 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010502:	f7f5 ffdb 	bl	80064bc <HAL_GetTick>
 8010506:	4602      	mov	r2, r0
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	1ad3      	subs	r3, r2, r3
 801050c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010510:	4293      	cmp	r3, r2
 8010512:	d9ee      	bls.n	80104f2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010514:	7dfb      	ldrb	r3, [r7, #23]
}
 8010516:	4618      	mov	r0, r3
 8010518:	3718      	adds	r7, #24
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	200001fc 	.word	0x200001fc

08010524 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b086      	sub	sp, #24
 8010528:	af00      	add	r7, sp, #0
 801052a:	60b9      	str	r1, [r7, #8]
 801052c:	607a      	str	r2, [r7, #4]
 801052e:	603b      	str	r3, [r7, #0]
 8010530:	4603      	mov	r3, r0
 8010532:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010534:	2301      	movs	r3, #1
 8010536:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010538:	4b24      	ldr	r3, [pc, #144]	; (80105cc <SD_write+0xa8>)
 801053a:	2200      	movs	r2, #0
 801053c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801053e:	f247 5030 	movw	r0, #30000	; 0x7530
 8010542:	f7ff ff33 	bl	80103ac <SD_CheckStatusWithTimeout>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	da01      	bge.n	8010550 <SD_write+0x2c>
  {
    return res;
 801054c:	7dfb      	ldrb	r3, [r7, #23]
 801054e:	e038      	b.n	80105c2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010550:	683a      	ldr	r2, [r7, #0]
 8010552:	6879      	ldr	r1, [r7, #4]
 8010554:	68b8      	ldr	r0, [r7, #8]
 8010556:	f7ff fea3 	bl	80102a0 <BSP_SD_WriteBlocks_DMA>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d12f      	bne.n	80105c0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010560:	f7f5 ffac 	bl	80064bc <HAL_GetTick>
 8010564:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010566:	bf00      	nop
 8010568:	4b18      	ldr	r3, [pc, #96]	; (80105cc <SD_write+0xa8>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d108      	bne.n	8010582 <SD_write+0x5e>
 8010570:	f7f5 ffa4 	bl	80064bc <HAL_GetTick>
 8010574:	4602      	mov	r2, r0
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	1ad3      	subs	r3, r2, r3
 801057a:	f247 522f 	movw	r2, #29999	; 0x752f
 801057e:	4293      	cmp	r3, r2
 8010580:	d9f2      	bls.n	8010568 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010582:	4b12      	ldr	r3, [pc, #72]	; (80105cc <SD_write+0xa8>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d102      	bne.n	8010590 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801058a:	2301      	movs	r3, #1
 801058c:	75fb      	strb	r3, [r7, #23]
 801058e:	e017      	b.n	80105c0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010590:	4b0e      	ldr	r3, [pc, #56]	; (80105cc <SD_write+0xa8>)
 8010592:	2200      	movs	r2, #0
 8010594:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010596:	f7f5 ff91 	bl	80064bc <HAL_GetTick>
 801059a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801059c:	e007      	b.n	80105ae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801059e:	f7ff fe99 	bl	80102d4 <BSP_SD_GetCardState>
 80105a2:	4603      	mov	r3, r0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d102      	bne.n	80105ae <SD_write+0x8a>
          {
            res = RES_OK;
 80105a8:	2300      	movs	r3, #0
 80105aa:	75fb      	strb	r3, [r7, #23]
            break;
 80105ac:	e008      	b.n	80105c0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80105ae:	f7f5 ff85 	bl	80064bc <HAL_GetTick>
 80105b2:	4602      	mov	r2, r0
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	1ad3      	subs	r3, r2, r3
 80105b8:	f247 522f 	movw	r2, #29999	; 0x752f
 80105bc:	4293      	cmp	r3, r2
 80105be:	d9ee      	bls.n	801059e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80105c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3718      	adds	r7, #24
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	200001f8 	.word	0x200001f8

080105d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b08c      	sub	sp, #48	; 0x30
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	4603      	mov	r3, r0
 80105d8:	603a      	str	r2, [r7, #0]
 80105da:	71fb      	strb	r3, [r7, #7]
 80105dc:	460b      	mov	r3, r1
 80105de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80105e0:	2301      	movs	r3, #1
 80105e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80105e6:	4b25      	ldr	r3, [pc, #148]	; (801067c <SD_ioctl+0xac>)
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	f003 0301 	and.w	r3, r3, #1
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d001      	beq.n	80105f8 <SD_ioctl+0x28>
 80105f4:	2303      	movs	r3, #3
 80105f6:	e03c      	b.n	8010672 <SD_ioctl+0xa2>

  switch (cmd)
 80105f8:	79bb      	ldrb	r3, [r7, #6]
 80105fa:	2b03      	cmp	r3, #3
 80105fc:	d834      	bhi.n	8010668 <SD_ioctl+0x98>
 80105fe:	a201      	add	r2, pc, #4	; (adr r2, 8010604 <SD_ioctl+0x34>)
 8010600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010604:	08010615 	.word	0x08010615
 8010608:	0801061d 	.word	0x0801061d
 801060c:	08010635 	.word	0x08010635
 8010610:	0801064f 	.word	0x0801064f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010614:	2300      	movs	r3, #0
 8010616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801061a:	e028      	b.n	801066e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801061c:	f107 030c 	add.w	r3, r7, #12
 8010620:	4618      	mov	r0, r3
 8010622:	f7ff fe67 	bl	80102f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801062c:	2300      	movs	r3, #0
 801062e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010632:	e01c      	b.n	801066e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010634:	f107 030c 	add.w	r3, r7, #12
 8010638:	4618      	mov	r0, r3
 801063a:	f7ff fe5b 	bl	80102f4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010640:	b29a      	uxth	r2, r3
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010646:	2300      	movs	r3, #0
 8010648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801064c:	e00f      	b.n	801066e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801064e:	f107 030c 	add.w	r3, r7, #12
 8010652:	4618      	mov	r0, r3
 8010654:	f7ff fe4e 	bl	80102f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065a:	0a5a      	lsrs	r2, r3, #9
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010660:	2300      	movs	r3, #0
 8010662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010666:	e002      	b.n	801066e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010668:	2304      	movs	r3, #4
 801066a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801066e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010672:	4618      	mov	r0, r3
 8010674:	3730      	adds	r7, #48	; 0x30
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	20000009 	.word	0x20000009

08010680 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010680:	b480      	push	{r7}
 8010682:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010684:	4b03      	ldr	r3, [pc, #12]	; (8010694 <BSP_SD_WriteCpltCallback+0x14>)
 8010686:	2201      	movs	r2, #1
 8010688:	601a      	str	r2, [r3, #0]
}
 801068a:	bf00      	nop
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr
 8010694:	200001f8 	.word	0x200001f8

08010698 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010698:	b480      	push	{r7}
 801069a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801069c:	4b03      	ldr	r3, [pc, #12]	; (80106ac <BSP_SD_ReadCpltCallback+0x14>)
 801069e:	2201      	movs	r2, #1
 80106a0:	601a      	str	r2, [r3, #0]
}
 80106a2:	bf00      	nop
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr
 80106ac:	200001fc 	.word	0x200001fc

080106b0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	460b      	mov	r3, r1
 80106ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80106bc:	f44f 701d 	mov.w	r0, #628	; 0x274
 80106c0:	f006 fb72 	bl	8016da8 <USBD_static_malloc>
 80106c4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d105      	bne.n	80106d8 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80106d4:	2302      	movs	r3, #2
 80106d6:	e034      	b.n	8010742 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	68fa      	ldr	r2, [r7, #12]
 80106dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	7c1b      	ldrb	r3, [r3, #16]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d115      	bne.n	8010714 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80106e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106ec:	2202      	movs	r2, #2
 80106ee:	2101      	movs	r1, #1
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f006 f9c8 	bl	8016a86 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2201      	movs	r2, #1
 80106fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80106fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010702:	2202      	movs	r2, #2
 8010704:	2181      	movs	r1, #129	; 0x81
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f006 f9bd 	bl	8016a86 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2201      	movs	r2, #1
 8010710:	871a      	strh	r2, [r3, #56]	; 0x38
 8010712:	e012      	b.n	801073a <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010714:	2340      	movs	r3, #64	; 0x40
 8010716:	2202      	movs	r2, #2
 8010718:	2101      	movs	r1, #1
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f006 f9b3 	bl	8016a86 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2201      	movs	r2, #1
 8010724:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010728:	2340      	movs	r3, #64	; 0x40
 801072a:	2202      	movs	r2, #2
 801072c:	2181      	movs	r1, #129	; 0x81
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f006 f9a9 	bl	8016a86 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2201      	movs	r2, #1
 8010738:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 f999 	bl	8010a72 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}

0801074a <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801074a:	b580      	push	{r7, lr}
 801074c:	b082      	sub	sp, #8
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	460b      	mov	r3, r1
 8010754:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8010756:	2101      	movs	r1, #1
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f006 f9ba 	bl	8016ad2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2200      	movs	r2, #0
 8010762:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8010766:	2181      	movs	r1, #129	; 0x81
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f006 f9b2 	bl	8016ad2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2200      	movs	r2, #0
 8010772:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801077a:	2b00      	cmp	r3, #0
 801077c:	d00c      	beq.n	8010798 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 f9d5 	bl	8010b2e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801078a:	4618      	mov	r0, r3
 801078c:	f006 fb1a 	bl	8016dc4 <USBD_static_free>
    pdev->pClassData = NULL;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2200      	movs	r2, #0
 8010794:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3708      	adds	r7, #8
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
	...

080107a4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b086      	sub	sp, #24
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107b4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80107b6:	2300      	movs	r3, #0
 80107b8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80107ba:	2300      	movs	r3, #0
 80107bc:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d101      	bne.n	80107c8 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80107c4:	2303      	movs	r3, #3
 80107c6:	e0db      	b.n	8010980 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d04e      	beq.n	8010872 <USBD_MSC_Setup+0xce>
 80107d4:	2b20      	cmp	r3, #32
 80107d6:	f040 80cb 	bne.w	8010970 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	785b      	ldrb	r3, [r3, #1]
 80107de:	2bfe      	cmp	r3, #254	; 0xfe
 80107e0:	d002      	beq.n	80107e8 <USBD_MSC_Setup+0x44>
 80107e2:	2bff      	cmp	r3, #255	; 0xff
 80107e4:	d025      	beq.n	8010832 <USBD_MSC_Setup+0x8e>
 80107e6:	e03c      	b.n	8010862 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	885b      	ldrh	r3, [r3, #2]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d119      	bne.n	8010824 <USBD_MSC_Setup+0x80>
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	88db      	ldrh	r3, [r3, #6]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d115      	bne.n	8010824 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80107fe:	2b00      	cmp	r3, #0
 8010800:	da10      	bge.n	8010824 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010808:	699b      	ldr	r3, [r3, #24]
 801080a:	4798      	blx	r3
 801080c:	4603      	mov	r3, r0
 801080e:	461a      	mov	r2, r3
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	2201      	movs	r2, #1
 8010818:	4619      	mov	r1, r3
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f002 fe3d 	bl	801349a <USBD_CtlSendData>
 8010820:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010822:	e025      	b.n	8010870 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8010824:	6839      	ldr	r1, [r7, #0]
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f002 fdc6 	bl	80133b8 <USBD_CtlError>
            ret = USBD_FAIL;
 801082c:	2303      	movs	r3, #3
 801082e:	75fb      	strb	r3, [r7, #23]
          break;
 8010830:	e01e      	b.n	8010870 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	885b      	ldrh	r3, [r3, #2]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d10c      	bne.n	8010854 <USBD_MSC_Setup+0xb0>
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	88db      	ldrh	r3, [r3, #6]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d108      	bne.n	8010854 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010848:	2b00      	cmp	r3, #0
 801084a:	db03      	blt.n	8010854 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 f948 	bl	8010ae2 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010852:	e00d      	b.n	8010870 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8010854:	6839      	ldr	r1, [r7, #0]
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f002 fdae 	bl	80133b8 <USBD_CtlError>
            ret = USBD_FAIL;
 801085c:	2303      	movs	r3, #3
 801085e:	75fb      	strb	r3, [r7, #23]
          break;
 8010860:	e006      	b.n	8010870 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010862:	6839      	ldr	r1, [r7, #0]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f002 fda7 	bl	80133b8 <USBD_CtlError>
          ret = USBD_FAIL;
 801086a:	2303      	movs	r3, #3
 801086c:	75fb      	strb	r3, [r7, #23]
          break;
 801086e:	bf00      	nop
      }
      break;
 8010870:	e085      	b.n	801097e <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	785b      	ldrb	r3, [r3, #1]
 8010876:	2b0b      	cmp	r3, #11
 8010878:	d871      	bhi.n	801095e <USBD_MSC_Setup+0x1ba>
 801087a:	a201      	add	r2, pc, #4	; (adr r2, 8010880 <USBD_MSC_Setup+0xdc>)
 801087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010880:	080108b1 	.word	0x080108b1
 8010884:	0801092d 	.word	0x0801092d
 8010888:	0801095f 	.word	0x0801095f
 801088c:	0801095f 	.word	0x0801095f
 8010890:	0801095f 	.word	0x0801095f
 8010894:	0801095f 	.word	0x0801095f
 8010898:	0801095f 	.word	0x0801095f
 801089c:	0801095f 	.word	0x0801095f
 80108a0:	0801095f 	.word	0x0801095f
 80108a4:	0801095f 	.word	0x0801095f
 80108a8:	080108db 	.word	0x080108db
 80108ac:	08010905 	.word	0x08010905
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	2b03      	cmp	r3, #3
 80108ba:	d107      	bne.n	80108cc <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80108bc:	f107 030e 	add.w	r3, r7, #14
 80108c0:	2202      	movs	r2, #2
 80108c2:	4619      	mov	r1, r3
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f002 fde8 	bl	801349a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80108ca:	e050      	b.n	801096e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80108cc:	6839      	ldr	r1, [r7, #0]
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f002 fd72 	bl	80133b8 <USBD_CtlError>
            ret = USBD_FAIL;
 80108d4:	2303      	movs	r3, #3
 80108d6:	75fb      	strb	r3, [r7, #23]
          break;
 80108d8:	e049      	b.n	801096e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	2b03      	cmp	r3, #3
 80108e4:	d107      	bne.n	80108f6 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	3304      	adds	r3, #4
 80108ea:	2201      	movs	r2, #1
 80108ec:	4619      	mov	r1, r3
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f002 fdd3 	bl	801349a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80108f4:	e03b      	b.n	801096e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80108f6:	6839      	ldr	r1, [r7, #0]
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f002 fd5d 	bl	80133b8 <USBD_CtlError>
            ret = USBD_FAIL;
 80108fe:	2303      	movs	r3, #3
 8010900:	75fb      	strb	r3, [r7, #23]
          break;
 8010902:	e034      	b.n	801096e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801090a:	b2db      	uxtb	r3, r3
 801090c:	2b03      	cmp	r3, #3
 801090e:	d106      	bne.n	801091e <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	885b      	ldrh	r3, [r3, #2]
 8010914:	b2db      	uxtb	r3, r3
 8010916:	461a      	mov	r2, r3
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801091c:	e027      	b.n	801096e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801091e:	6839      	ldr	r1, [r7, #0]
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f002 fd49 	bl	80133b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8010926:	2303      	movs	r3, #3
 8010928:	75fb      	strb	r3, [r7, #23]
          break;
 801092a:	e020      	b.n	801096e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010932:	b2db      	uxtb	r3, r3
 8010934:	2b03      	cmp	r3, #3
 8010936:	d119      	bne.n	801096c <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	885b      	ldrh	r3, [r3, #2]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d115      	bne.n	801096c <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	889b      	ldrh	r3, [r3, #4]
 8010944:	b2db      	uxtb	r3, r3
 8010946:	4619      	mov	r1, r3
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f006 f8e1 	bl	8016b10 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	889b      	ldrh	r3, [r3, #4]
 8010952:	b2db      	uxtb	r3, r3
 8010954:	4619      	mov	r1, r3
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f000 fa82 	bl	8010e60 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801095c:	e006      	b.n	801096c <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801095e:	6839      	ldr	r1, [r7, #0]
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f002 fd29 	bl	80133b8 <USBD_CtlError>
          ret = USBD_FAIL;
 8010966:	2303      	movs	r3, #3
 8010968:	75fb      	strb	r3, [r7, #23]
          break;
 801096a:	e000      	b.n	801096e <USBD_MSC_Setup+0x1ca>
          break;
 801096c:	bf00      	nop
      }
      break;
 801096e:	e006      	b.n	801097e <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8010970:	6839      	ldr	r1, [r7, #0]
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f002 fd20 	bl	80133b8 <USBD_CtlError>
      ret = USBD_FAIL;
 8010978:	2303      	movs	r3, #3
 801097a:	75fb      	strb	r3, [r7, #23]
      break;
 801097c:	bf00      	nop
  }

  return (uint8_t)ret;
 801097e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010980:	4618      	mov	r0, r3
 8010982:	3718      	adds	r7, #24
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	460b      	mov	r3, r1
 8010992:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8010994:	78fb      	ldrb	r3, [r7, #3]
 8010996:	4619      	mov	r1, r3
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f8dc 	bl	8010b56 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801099e:	2300      	movs	r3, #0
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3708      	adds	r7, #8
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	460b      	mov	r3, r1
 80109b2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80109b4:	78fb      	ldrb	r3, [r7, #3]
 80109b6:	4619      	mov	r1, r3
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 f902 	bl	8010bc2 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80109be:	2300      	movs	r3, #0
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3708      	adds	r7, #8
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2220      	movs	r2, #32
 80109d4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80109d6:	4b03      	ldr	r3, [pc, #12]	; (80109e4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80109d8:	4618      	mov	r0, r3
 80109da:	370c      	adds	r7, #12
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr
 80109e4:	20000044 	.word	0x20000044

080109e8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b083      	sub	sp, #12
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2220      	movs	r2, #32
 80109f4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80109f6:	4b03      	ldr	r3, [pc, #12]	; (8010a04 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	370c      	adds	r7, #12
 80109fc:	46bd      	mov	sp, r7
 80109fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a02:	4770      	bx	lr
 8010a04:	20000064 	.word	0x20000064

08010a08 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b083      	sub	sp, #12
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2220      	movs	r2, #32
 8010a14:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8010a16:	4b03      	ldr	r3, [pc, #12]	; (8010a24 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr
 8010a24:	20000084 	.word	0x20000084

08010a28 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	220a      	movs	r2, #10
 8010a34:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8010a36:	4b03      	ldr	r3, [pc, #12]	; (8010a44 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr
 8010a44:	200000a4 	.word	0x200000a4

08010a48 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d101      	bne.n	8010a5c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010a58:	2303      	movs	r3, #3
 8010a5a:	e004      	b.n	8010a66 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	683a      	ldr	r2, [r7, #0]
 8010a60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010a64:	2300      	movs	r3, #0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	370c      	adds	r7, #12
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr

08010a72 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b084      	sub	sp, #16
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a80:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d028      	beq.n	8010ada <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2200      	movs	r2, #0
 8010a92:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2200      	movs	r2, #0
 8010a98:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8010ab8:	2101      	movs	r1, #1
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f006 f828 	bl	8016b10 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8010ac0:	2181      	movs	r1, #129	; 0x81
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f006 f824 	bl	8016b10 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8010ace:	231f      	movs	r3, #31
 8010ad0:	2101      	movs	r1, #1
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f006 f8e5 	bl	8016ca2 <USBD_LL_PrepareReceive>
 8010ad8:	e000      	b.n	8010adc <MSC_BOT_Init+0x6a>
    return;
 8010ada:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8010ae2:	b580      	push	{r7, lr}
 8010ae4:	b084      	sub	sp, #16
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010af0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d016      	beq.n	8010b26 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2200      	movs	r2, #0
 8010afc:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2201      	movs	r2, #1
 8010b02:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8010b04:	2181      	movs	r1, #129	; 0x81
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f006 f840 	bl	8016b8c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8010b0c:	2101      	movs	r1, #1
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f006 f83c 	bl	8016b8c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8010b1a:	231f      	movs	r3, #31
 8010b1c:	2101      	movs	r1, #1
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f006 f8bf 	bl	8016ca2 <USBD_LL_PrepareReceive>
 8010b24:	e000      	b.n	8010b28 <MSC_BOT_Reset+0x46>
    return;
 8010b26:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8010b2e:	b480      	push	{r7}
 8010b30:	b085      	sub	sp, #20
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b3c:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d002      	beq.n	8010b4a <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2200      	movs	r2, #0
 8010b48:	721a      	strb	r2, [r3, #8]
  }
}
 8010b4a:	bf00      	nop
 8010b4c:	3714      	adds	r7, #20
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr

08010b56 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b084      	sub	sp, #16
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
 8010b5e:	460b      	mov	r3, r1
 8010b60:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b68:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d020      	beq.n	8010bb2 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	7a1b      	ldrb	r3, [r3, #8]
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d005      	beq.n	8010b84 <MSC_BOT_DataIn+0x2e>
 8010b78:	2b02      	cmp	r3, #2
 8010b7a:	db1c      	blt.n	8010bb6 <MSC_BOT_DataIn+0x60>
 8010b7c:	3b03      	subs	r3, #3
 8010b7e:	2b01      	cmp	r3, #1
 8010b80:	d819      	bhi.n	8010bb6 <MSC_BOT_DataIn+0x60>
 8010b82:	e011      	b.n	8010ba8 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8010b90:	461a      	mov	r2, r3
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f000 f992 	bl	8010ebc <SCSI_ProcessCmd>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	da0d      	bge.n	8010bba <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010b9e:	2101      	movs	r1, #1
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f000 f8fb 	bl	8010d9c <MSC_BOT_SendCSW>
      }
      break;
 8010ba6:	e008      	b.n	8010bba <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010ba8:	2100      	movs	r1, #0
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f000 f8f6 	bl	8010d9c <MSC_BOT_SendCSW>
      break;
 8010bb0:	e004      	b.n	8010bbc <MSC_BOT_DataIn+0x66>
    return;
 8010bb2:	bf00      	nop
 8010bb4:	e002      	b.n	8010bbc <MSC_BOT_DataIn+0x66>

    default:
      break;
 8010bb6:	bf00      	nop
 8010bb8:	e000      	b.n	8010bbc <MSC_BOT_DataIn+0x66>
      break;
 8010bba:	bf00      	nop
  }
}
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b084      	sub	sp, #16
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	460b      	mov	r3, r1
 8010bcc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bd4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d01c      	beq.n	8010c16 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	7a1b      	ldrb	r3, [r3, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d002      	beq.n	8010bea <MSC_BOT_DataOut+0x28>
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d004      	beq.n	8010bf2 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8010be8:	e018      	b.n	8010c1c <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f81a 	bl	8010c24 <MSC_BOT_CBW_Decode>
      break;
 8010bf0:	e014      	b.n	8010c1c <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8010bfe:	461a      	mov	r2, r3
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f000 f95b 	bl	8010ebc <SCSI_ProcessCmd>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	da06      	bge.n	8010c1a <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 f8c4 	bl	8010d9c <MSC_BOT_SendCSW>
      break;
 8010c14:	e001      	b.n	8010c1a <MSC_BOT_DataOut+0x58>
    return;
 8010c16:	bf00      	nop
 8010c18:	e000      	b.n	8010c1c <MSC_BOT_DataOut+0x5a>
      break;
 8010c1a:	bf00      	nop
  }
}
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
	...

08010c24 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c32:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d077      	beq.n	8010d2a <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8010c52:	2101      	movs	r1, #1
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f006 f845 	bl	8016ce4 <USBD_LL_GetRxDataSize>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2b1f      	cmp	r3, #31
 8010c5e:	d114      	bne.n	8010c8a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8010c66:	4a34      	ldr	r2, [pc, #208]	; (8010d38 <MSC_BOT_CBW_Decode+0x114>)
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	d10e      	bne.n	8010c8a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010c72:	2b01      	cmp	r3, #1
 8010c74:	d809      	bhi.n	8010c8a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d004      	beq.n	8010c8a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010c86:	2b10      	cmp	r3, #16
 8010c88:	d90e      	bls.n	8010ca8 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010c90:	2320      	movs	r3, #32
 8010c92:	2205      	movs	r2, #5
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 fdbc 	bl	8011812 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	2202      	movs	r2, #2
 8010c9e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f000 f8ab 	bl	8010dfc <MSC_BOT_Abort>
 8010ca6:	e043      	b.n	8010d30 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f000 f900 	bl	8010ebc <SCSI_ProcessCmd>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	da0c      	bge.n	8010cdc <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	7a1b      	ldrb	r3, [r3, #8]
 8010cc6:	2b05      	cmp	r3, #5
 8010cc8:	d104      	bne.n	8010cd4 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010cca:	2101      	movs	r1, #1
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f000 f865 	bl	8010d9c <MSC_BOT_SendCSW>
 8010cd2:	e02d      	b.n	8010d30 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 f891 	bl	8010dfc <MSC_BOT_Abort>
 8010cda:	e029      	b.n	8010d30 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	7a1b      	ldrb	r3, [r3, #8]
 8010ce0:	2b02      	cmp	r3, #2
 8010ce2:	d024      	beq.n	8010d2e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010ce8:	2b01      	cmp	r3, #1
 8010cea:	d020      	beq.n	8010d2e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010cf0:	2b03      	cmp	r3, #3
 8010cf2:	d01c      	beq.n	8010d2e <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d009      	beq.n	8010d10 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	f103 0110 	add.w	r1, r3, #16
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	461a      	mov	r2, r3
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f000 f817 	bl	8010d3c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8010d0e:	e00f      	b.n	8010d30 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d104      	bne.n	8010d22 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010d18:	2100      	movs	r1, #0
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f000 f83e 	bl	8010d9c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8010d20:	e006      	b.n	8010d30 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 f86a 	bl	8010dfc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8010d28:	e002      	b.n	8010d30 <MSC_BOT_CBW_Decode+0x10c>
    return;
 8010d2a:	bf00      	nop
 8010d2c:	e000      	b.n	8010d30 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8010d2e:	bf00      	nop
    }
  }
}
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	43425355 	.word	0x43425355

08010d3c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b086      	sub	sp, #24
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d4e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	bf28      	it	cs
 8010d5c:	4613      	movcs	r3, r2
 8010d5e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d015      	beq.n	8010d92 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	1ad2      	subs	r2, r2, r3
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	2204      	movs	r2, #4
 8010d82:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	68ba      	ldr	r2, [r7, #8]
 8010d88:	2181      	movs	r1, #129	; 0x81
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	f005 ff68 	bl	8016c60 <USBD_LL_Transmit>
 8010d90:	e000      	b.n	8010d94 <MSC_BOT_SendData+0x58>
    return;
 8010d92:	bf00      	nop
}
 8010d94:	3718      	adds	r7, #24
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
	...

08010d9c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b084      	sub	sp, #16
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	460b      	mov	r3, r1
 8010da6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010dae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d01b      	beq.n	8010dee <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	4a0f      	ldr	r2, [pc, #60]	; (8010df8 <MSC_BOT_SendCSW+0x5c>)
 8010dba:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	78fa      	ldrb	r2, [r7, #3]
 8010dc2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8010dd2:	230d      	movs	r3, #13
 8010dd4:	2181      	movs	r1, #129	; 0x81
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f005 ff42 	bl	8016c60 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8010de2:	231f      	movs	r3, #31
 8010de4:	2101      	movs	r1, #1
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f005 ff5b 	bl	8016ca2 <USBD_LL_PrepareReceive>
 8010dec:	e000      	b.n	8010df0 <MSC_BOT_SendCSW+0x54>
    return;
 8010dee:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010df0:	3710      	adds	r7, #16
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}
 8010df6:	bf00      	nop
 8010df8:	53425355 	.word	0x53425355

08010dfc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e0a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d022      	beq.n	8010e58 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d10c      	bne.n	8010e36 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d007      	beq.n	8010e36 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d103      	bne.n	8010e36 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010e2e:	2101      	movs	r1, #1
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f005 fe8c 	bl	8016b4e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010e36:	2181      	movs	r1, #129	; 0x81
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f005 fe88 	bl	8016b4e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	7a5b      	ldrb	r3, [r3, #9]
 8010e42:	2b02      	cmp	r3, #2
 8010e44:	d109      	bne.n	8010e5a <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010e46:	2181      	movs	r1, #129	; 0x81
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f005 fe80 	bl	8016b4e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010e4e:	2101      	movs	r1, #1
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f005 fe7c 	bl	8016b4e <USBD_LL_StallEP>
 8010e56:	e000      	b.n	8010e5a <MSC_BOT_Abort+0x5e>
    return;
 8010e58:	bf00      	nop
  }
}
 8010e5a:	3710      	adds	r7, #16
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	460b      	mov	r3, r1
 8010e6a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e72:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d019      	beq.n	8010eae <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	7a5b      	ldrb	r3, [r3, #9]
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	d108      	bne.n	8010e94 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010e82:	2181      	movs	r1, #129	; 0x81
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f005 fe62 	bl	8016b4e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010e8a:	2101      	movs	r1, #1
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f005 fe5e 	bl	8016b4e <USBD_LL_StallEP>
 8010e92:	e00f      	b.n	8010eb4 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8010e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	da0a      	bge.n	8010eb2 <MSC_BOT_CplClrFeature+0x52>
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	7a5b      	ldrb	r3, [r3, #9]
 8010ea0:	2b01      	cmp	r3, #1
 8010ea2:	d006      	beq.n	8010eb2 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010ea4:	2101      	movs	r1, #1
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f7ff ff78 	bl	8010d9c <MSC_BOT_SendCSW>
 8010eac:	e002      	b.n	8010eb4 <MSC_BOT_CplClrFeature+0x54>
    return;
 8010eae:	bf00      	nop
 8010eb0:	e000      	b.n	8010eb4 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8010eb2:	bf00      	nop
  }
}
 8010eb4:	3710      	adds	r7, #16
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
	...

08010ebc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b086      	sub	sp, #24
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	460b      	mov	r3, r1
 8010ec6:	607a      	str	r2, [r7, #4]
 8010ec8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ed0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d102      	bne.n	8010ede <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8010ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8010edc:	e168      	b.n	80111b0 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	2baa      	cmp	r3, #170	; 0xaa
 8010ee4:	f000 8144 	beq.w	8011170 <SCSI_ProcessCmd+0x2b4>
 8010ee8:	2baa      	cmp	r3, #170	; 0xaa
 8010eea:	f300 8153 	bgt.w	8011194 <SCSI_ProcessCmd+0x2d8>
 8010eee:	2ba8      	cmp	r3, #168	; 0xa8
 8010ef0:	f000 812c 	beq.w	801114c <SCSI_ProcessCmd+0x290>
 8010ef4:	2ba8      	cmp	r3, #168	; 0xa8
 8010ef6:	f300 814d 	bgt.w	8011194 <SCSI_ProcessCmd+0x2d8>
 8010efa:	2b5a      	cmp	r3, #90	; 0x5a
 8010efc:	f300 80c0 	bgt.w	8011080 <SCSI_ProcessCmd+0x1c4>
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f2c0 8147 	blt.w	8011194 <SCSI_ProcessCmd+0x2d8>
 8010f06:	2b5a      	cmp	r3, #90	; 0x5a
 8010f08:	f200 8144 	bhi.w	8011194 <SCSI_ProcessCmd+0x2d8>
 8010f0c:	a201      	add	r2, pc, #4	; (adr r2, 8010f14 <SCSI_ProcessCmd+0x58>)
 8010f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f12:	bf00      	nop
 8010f14:	08011087 	.word	0x08011087
 8010f18:	08011195 	.word	0x08011195
 8010f1c:	08011195 	.word	0x08011195
 8010f20:	08011099 	.word	0x08011099
 8010f24:	08011195 	.word	0x08011195
 8010f28:	08011195 	.word	0x08011195
 8010f2c:	08011195 	.word	0x08011195
 8010f30:	08011195 	.word	0x08011195
 8010f34:	08011195 	.word	0x08011195
 8010f38:	08011195 	.word	0x08011195
 8010f3c:	08011195 	.word	0x08011195
 8010f40:	08011195 	.word	0x08011195
 8010f44:	08011195 	.word	0x08011195
 8010f48:	08011195 	.word	0x08011195
 8010f4c:	08011195 	.word	0x08011195
 8010f50:	08011195 	.word	0x08011195
 8010f54:	08011195 	.word	0x08011195
 8010f58:	08011195 	.word	0x08011195
 8010f5c:	080110ab 	.word	0x080110ab
 8010f60:	08011195 	.word	0x08011195
 8010f64:	08011195 	.word	0x08011195
 8010f68:	08011195 	.word	0x08011195
 8010f6c:	08011195 	.word	0x08011195
 8010f70:	08011195 	.word	0x08011195
 8010f74:	08011195 	.word	0x08011195
 8010f78:	08011195 	.word	0x08011195
 8010f7c:	080110e1 	.word	0x080110e1
 8010f80:	080110bd 	.word	0x080110bd
 8010f84:	08011195 	.word	0x08011195
 8010f88:	08011195 	.word	0x08011195
 8010f8c:	080110cf 	.word	0x080110cf
 8010f90:	08011195 	.word	0x08011195
 8010f94:	08011195 	.word	0x08011195
 8010f98:	08011195 	.word	0x08011195
 8010f9c:	08011195 	.word	0x08011195
 8010fa0:	08011105 	.word	0x08011105
 8010fa4:	08011195 	.word	0x08011195
 8010fa8:	08011117 	.word	0x08011117
 8010fac:	08011195 	.word	0x08011195
 8010fb0:	08011195 	.word	0x08011195
 8010fb4:	0801113b 	.word	0x0801113b
 8010fb8:	08011195 	.word	0x08011195
 8010fbc:	0801115f 	.word	0x0801115f
 8010fc0:	08011195 	.word	0x08011195
 8010fc4:	08011195 	.word	0x08011195
 8010fc8:	08011195 	.word	0x08011195
 8010fcc:	08011195 	.word	0x08011195
 8010fd0:	08011183 	.word	0x08011183
 8010fd4:	08011195 	.word	0x08011195
 8010fd8:	08011195 	.word	0x08011195
 8010fdc:	08011195 	.word	0x08011195
 8010fe0:	08011195 	.word	0x08011195
 8010fe4:	08011195 	.word	0x08011195
 8010fe8:	08011195 	.word	0x08011195
 8010fec:	08011195 	.word	0x08011195
 8010ff0:	08011195 	.word	0x08011195
 8010ff4:	08011195 	.word	0x08011195
 8010ff8:	08011195 	.word	0x08011195
 8010ffc:	08011195 	.word	0x08011195
 8011000:	08011195 	.word	0x08011195
 8011004:	08011195 	.word	0x08011195
 8011008:	08011195 	.word	0x08011195
 801100c:	08011195 	.word	0x08011195
 8011010:	08011195 	.word	0x08011195
 8011014:	08011195 	.word	0x08011195
 8011018:	08011195 	.word	0x08011195
 801101c:	08011195 	.word	0x08011195
 8011020:	08011195 	.word	0x08011195
 8011024:	08011195 	.word	0x08011195
 8011028:	08011195 	.word	0x08011195
 801102c:	08011195 	.word	0x08011195
 8011030:	08011195 	.word	0x08011195
 8011034:	08011195 	.word	0x08011195
 8011038:	08011195 	.word	0x08011195
 801103c:	08011195 	.word	0x08011195
 8011040:	08011195 	.word	0x08011195
 8011044:	08011195 	.word	0x08011195
 8011048:	08011195 	.word	0x08011195
 801104c:	08011195 	.word	0x08011195
 8011050:	08011195 	.word	0x08011195
 8011054:	08011195 	.word	0x08011195
 8011058:	08011195 	.word	0x08011195
 801105c:	08011195 	.word	0x08011195
 8011060:	08011195 	.word	0x08011195
 8011064:	08011195 	.word	0x08011195
 8011068:	08011195 	.word	0x08011195
 801106c:	08011195 	.word	0x08011195
 8011070:	08011195 	.word	0x08011195
 8011074:	08011195 	.word	0x08011195
 8011078:	08011195 	.word	0x08011195
 801107c:	080110f3 	.word	0x080110f3
 8011080:	2b9e      	cmp	r3, #158	; 0x9e
 8011082:	d051      	beq.n	8011128 <SCSI_ProcessCmd+0x26c>
 8011084:	e086      	b.n	8011194 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8011086:	7afb      	ldrb	r3, [r7, #11]
 8011088:	687a      	ldr	r2, [r7, #4]
 801108a:	4619      	mov	r1, r3
 801108c:	68f8      	ldr	r0, [r7, #12]
 801108e:	f000 f893 	bl	80111b8 <SCSI_TestUnitReady>
 8011092:	4603      	mov	r3, r0
 8011094:	75fb      	strb	r3, [r7, #23]
      break;
 8011096:	e089      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8011098:	7afb      	ldrb	r3, [r7, #11]
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	4619      	mov	r1, r3
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	f000 fb38 	bl	8011714 <SCSI_RequestSense>
 80110a4:	4603      	mov	r3, r0
 80110a6:	75fb      	strb	r3, [r7, #23]
      break;
 80110a8:	e080      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80110aa:	7afb      	ldrb	r3, [r7, #11]
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	4619      	mov	r1, r3
 80110b0:	68f8      	ldr	r0, [r7, #12]
 80110b2:	f000 f8d1 	bl	8011258 <SCSI_Inquiry>
 80110b6:	4603      	mov	r3, r0
 80110b8:	75fb      	strb	r3, [r7, #23]
      break;
 80110ba:	e077      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80110bc:	7afb      	ldrb	r3, [r7, #11]
 80110be:	687a      	ldr	r2, [r7, #4]
 80110c0:	4619      	mov	r1, r3
 80110c2:	68f8      	ldr	r0, [r7, #12]
 80110c4:	f000 fbec 	bl	80118a0 <SCSI_StartStopUnit>
 80110c8:	4603      	mov	r3, r0
 80110ca:	75fb      	strb	r3, [r7, #23]
      break;
 80110cc:	e06e      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80110ce:	7afb      	ldrb	r3, [r7, #11]
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	4619      	mov	r1, r3
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	f000 fc34 	bl	8011942 <SCSI_AllowPreventRemovable>
 80110da:	4603      	mov	r3, r0
 80110dc:	75fb      	strb	r3, [r7, #23]
      break;
 80110de:	e065      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80110e0:	7afb      	ldrb	r3, [r7, #11]
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	4619      	mov	r1, r3
 80110e6:	68f8      	ldr	r0, [r7, #12]
 80110e8:	f000 fabc 	bl	8011664 <SCSI_ModeSense6>
 80110ec:	4603      	mov	r3, r0
 80110ee:	75fb      	strb	r3, [r7, #23]
      break;
 80110f0:	e05c      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80110f2:	7afb      	ldrb	r3, [r7, #11]
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	4619      	mov	r1, r3
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	f000 fadf 	bl	80116bc <SCSI_ModeSense10>
 80110fe:	4603      	mov	r3, r0
 8011100:	75fb      	strb	r3, [r7, #23]
      break;
 8011102:	e053      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8011104:	7afb      	ldrb	r3, [r7, #11]
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	4619      	mov	r1, r3
 801110a:	68f8      	ldr	r0, [r7, #12]
 801110c:	f000 fa37 	bl	801157e <SCSI_ReadFormatCapacity>
 8011110:	4603      	mov	r3, r0
 8011112:	75fb      	strb	r3, [r7, #23]
      break;
 8011114:	e04a      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8011116:	7afb      	ldrb	r3, [r7, #11]
 8011118:	687a      	ldr	r2, [r7, #4]
 801111a:	4619      	mov	r1, r3
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	f000 f90f 	bl	8011340 <SCSI_ReadCapacity10>
 8011122:	4603      	mov	r3, r0
 8011124:	75fb      	strb	r3, [r7, #23]
      break;
 8011126:	e041      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8011128:	7afb      	ldrb	r3, [r7, #11]
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	4619      	mov	r1, r3
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f000 f97b 	bl	801142a <SCSI_ReadCapacity16>
 8011134:	4603      	mov	r3, r0
 8011136:	75fb      	strb	r3, [r7, #23]
      break;
 8011138:	e038      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801113a:	7afb      	ldrb	r3, [r7, #11]
 801113c:	687a      	ldr	r2, [r7, #4]
 801113e:	4619      	mov	r1, r3
 8011140:	68f8      	ldr	r0, [r7, #12]
 8011142:	f000 fc27 	bl	8011994 <SCSI_Read10>
 8011146:	4603      	mov	r3, r0
 8011148:	75fb      	strb	r3, [r7, #23]
      break;
 801114a:	e02f      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801114c:	7afb      	ldrb	r3, [r7, #11]
 801114e:	687a      	ldr	r2, [r7, #4]
 8011150:	4619      	mov	r1, r3
 8011152:	68f8      	ldr	r0, [r7, #12]
 8011154:	f000 fcbe 	bl	8011ad4 <SCSI_Read12>
 8011158:	4603      	mov	r3, r0
 801115a:	75fb      	strb	r3, [r7, #23]
      break;
 801115c:	e026      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801115e:	7afb      	ldrb	r3, [r7, #11]
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	4619      	mov	r1, r3
 8011164:	68f8      	ldr	r0, [r7, #12]
 8011166:	f000 fd60 	bl	8011c2a <SCSI_Write10>
 801116a:	4603      	mov	r3, r0
 801116c:	75fb      	strb	r3, [r7, #23]
      break;
 801116e:	e01d      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8011170:	7afb      	ldrb	r3, [r7, #11]
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	4619      	mov	r1, r3
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	f000 fe1c 	bl	8011db4 <SCSI_Write12>
 801117c:	4603      	mov	r3, r0
 801117e:	75fb      	strb	r3, [r7, #23]
      break;
 8011180:	e014      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8011182:	7afb      	ldrb	r3, [r7, #11]
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	4619      	mov	r1, r3
 8011188:	68f8      	ldr	r0, [r7, #12]
 801118a:	f000 fee8 	bl	8011f5e <SCSI_Verify10>
 801118e:	4603      	mov	r3, r0
 8011190:	75fb      	strb	r3, [r7, #23]
      break;
 8011192:	e00b      	b.n	80111ac <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8011194:	7af9      	ldrb	r1, [r7, #11]
 8011196:	2320      	movs	r3, #32
 8011198:	2205      	movs	r2, #5
 801119a:	68f8      	ldr	r0, [r7, #12]
 801119c:	f000 fb39 	bl	8011812 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	2202      	movs	r2, #2
 80111a4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80111a6:	23ff      	movs	r3, #255	; 0xff
 80111a8:	75fb      	strb	r3, [r7, #23]
      break;
 80111aa:	bf00      	nop
  }

  return ret;
 80111ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3718      	adds	r7, #24
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b086      	sub	sp, #24
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	460b      	mov	r3, r1
 80111c2:	607a      	str	r2, [r7, #4]
 80111c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111cc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d102      	bne.n	80111da <SCSI_TestUnitReady+0x22>
  {
    return -1;
 80111d4:	f04f 33ff 	mov.w	r3, #4294967295
 80111d8:	e03a      	b.n	8011250 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d00a      	beq.n	80111fa <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80111ea:	2320      	movs	r3, #32
 80111ec:	2205      	movs	r2, #5
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f000 fb0f 	bl	8011812 <SCSI_SenseCode>

    return -1;
 80111f4:	f04f 33ff 	mov.w	r3, #4294967295
 80111f8:	e02a      	b.n	8011250 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011200:	2b02      	cmp	r3, #2
 8011202:	d10b      	bne.n	801121c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011204:	7af9      	ldrb	r1, [r7, #11]
 8011206:	233a      	movs	r3, #58	; 0x3a
 8011208:	2202      	movs	r2, #2
 801120a:	68f8      	ldr	r0, [r7, #12]
 801120c:	f000 fb01 	bl	8011812 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	2205      	movs	r2, #5
 8011214:	721a      	strb	r2, [r3, #8]
    return -1;
 8011216:	f04f 33ff 	mov.w	r3, #4294967295
 801121a:	e019      	b.n	8011250 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	7afa      	ldrb	r2, [r7, #11]
 8011226:	4610      	mov	r0, r2
 8011228:	4798      	blx	r3
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00b      	beq.n	8011248 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011230:	7af9      	ldrb	r1, [r7, #11]
 8011232:	233a      	movs	r3, #58	; 0x3a
 8011234:	2202      	movs	r2, #2
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f000 faeb 	bl	8011812 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	2205      	movs	r2, #5
 8011240:	721a      	strb	r2, [r3, #8]

    return -1;
 8011242:	f04f 33ff 	mov.w	r3, #4294967295
 8011246:	e003      	b.n	8011250 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	2200      	movs	r2, #0
 801124c:	60da      	str	r2, [r3, #12]

  return 0;
 801124e:	2300      	movs	r3, #0
}
 8011250:	4618      	mov	r0, r3
 8011252:	3718      	adds	r7, #24
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b088      	sub	sp, #32
 801125c:	af00      	add	r7, sp, #0
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	460b      	mov	r3, r1
 8011262:	607a      	str	r2, [r7, #4]
 8011264:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801126c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d102      	bne.n	801127a <SCSI_Inquiry+0x22>
  {
    return -1;
 8011274:	f04f 33ff 	mov.w	r3, #4294967295
 8011278:	e05a      	b.n	8011330 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801127a:	69bb      	ldr	r3, [r7, #24]
 801127c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011280:	2b00      	cmp	r3, #0
 8011282:	d10a      	bne.n	801129a <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011284:	69bb      	ldr	r3, [r7, #24]
 8011286:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801128a:	2320      	movs	r3, #32
 801128c:	2205      	movs	r2, #5
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f000 fabf 	bl	8011812 <SCSI_SenseCode>
    return -1;
 8011294:	f04f 33ff 	mov.w	r3, #4294967295
 8011298:	e04a      	b.n	8011330 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	3301      	adds	r3, #1
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	f003 0301 	and.w	r3, r3, #1
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d020      	beq.n	80112ea <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	3302      	adds	r3, #2
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d105      	bne.n	80112be <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80112b2:	2206      	movs	r2, #6
 80112b4:	4920      	ldr	r1, [pc, #128]	; (8011338 <SCSI_Inquiry+0xe0>)
 80112b6:	69b8      	ldr	r0, [r7, #24]
 80112b8:	f000 ffb4 	bl	8012224 <SCSI_UpdateBotData>
 80112bc:	e037      	b.n	801132e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	3302      	adds	r3, #2
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	2b80      	cmp	r3, #128	; 0x80
 80112c6:	d105      	bne.n	80112d4 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80112c8:	2208      	movs	r2, #8
 80112ca:	491c      	ldr	r1, [pc, #112]	; (801133c <SCSI_Inquiry+0xe4>)
 80112cc:	69b8      	ldr	r0, [r7, #24]
 80112ce:	f000 ffa9 	bl	8012224 <SCSI_UpdateBotData>
 80112d2:	e02c      	b.n	801132e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80112d4:	69bb      	ldr	r3, [r7, #24]
 80112d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80112da:	2324      	movs	r3, #36	; 0x24
 80112dc:	2205      	movs	r2, #5
 80112de:	68f8      	ldr	r0, [r7, #12]
 80112e0:	f000 fa97 	bl	8011812 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80112e4:	f04f 33ff 	mov.w	r3, #4294967295
 80112e8:	e022      	b.n	8011330 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80112f0:	69d9      	ldr	r1, [r3, #28]
 80112f2:	7afa      	ldrb	r2, [r7, #11]
 80112f4:	4613      	mov	r3, r2
 80112f6:	00db      	lsls	r3, r3, #3
 80112f8:	4413      	add	r3, r2
 80112fa:	009b      	lsls	r3, r3, #2
 80112fc:	440b      	add	r3, r1
 80112fe:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	3304      	adds	r3, #4
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	b29b      	uxth	r3, r3
 8011308:	3305      	adds	r3, #5
 801130a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	3304      	adds	r3, #4
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	b29b      	uxth	r3, r3
 8011314:	8bfa      	ldrh	r2, [r7, #30]
 8011316:	429a      	cmp	r2, r3
 8011318:	d303      	bcc.n	8011322 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	3304      	adds	r3, #4
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8011322:	8bfb      	ldrh	r3, [r7, #30]
 8011324:	461a      	mov	r2, r3
 8011326:	6979      	ldr	r1, [r7, #20]
 8011328:	69b8      	ldr	r0, [r7, #24]
 801132a:	f000 ff7b 	bl	8012224 <SCSI_UpdateBotData>
  }

  return 0;
 801132e:	2300      	movs	r3, #0
}
 8011330:	4618      	mov	r0, r3
 8011332:	3720      	adds	r7, #32
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	200000b0 	.word	0x200000b0
 801133c:	200000b8 	.word	0x200000b8

08011340 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b086      	sub	sp, #24
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	460b      	mov	r3, r1
 801134a:	607a      	str	r2, [r7, #4]
 801134c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011354:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d102      	bne.n	8011362 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801135c:	f04f 33ff 	mov.w	r3, #4294967295
 8011360:	e05f      	b.n	8011422 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	697a      	ldr	r2, [r7, #20]
 801136c:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8011370:	697a      	ldr	r2, [r7, #20]
 8011372:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8011376:	7af8      	ldrb	r0, [r7, #11]
 8011378:	4798      	blx	r3
 801137a:	4603      	mov	r3, r0
 801137c:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801137e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d104      	bne.n	8011390 <SCSI_ReadCapacity10+0x50>
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801138c:	2b02      	cmp	r3, #2
 801138e:	d108      	bne.n	80113a2 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011390:	7af9      	ldrb	r1, [r7, #11]
 8011392:	233a      	movs	r3, #58	; 0x3a
 8011394:	2202      	movs	r2, #2
 8011396:	68f8      	ldr	r0, [r7, #12]
 8011398:	f000 fa3b 	bl	8011812 <SCSI_SenseCode>
    return -1;
 801139c:	f04f 33ff 	mov.w	r3, #4294967295
 80113a0:	e03f      	b.n	8011422 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80113a8:	3b01      	subs	r3, #1
 80113aa:	0e1b      	lsrs	r3, r3, #24
 80113ac:	b2da      	uxtb	r2, r3
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80113b8:	3b01      	subs	r3, #1
 80113ba:	0c1b      	lsrs	r3, r3, #16
 80113bc:	b2da      	uxtb	r2, r3
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80113c8:	3b01      	subs	r3, #1
 80113ca:	0a1b      	lsrs	r3, r3, #8
 80113cc:	b2da      	uxtb	r2, r3
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80113d8:	b2db      	uxtb	r3, r3
 80113da:	3b01      	subs	r3, #1
 80113dc:	b2da      	uxtb	r2, r3
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80113e8:	161b      	asrs	r3, r3, #24
 80113ea:	b2da      	uxtb	r2, r3
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80113f6:	141b      	asrs	r3, r3, #16
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011404:	0a1b      	lsrs	r3, r3, #8
 8011406:	b29b      	uxth	r3, r3
 8011408:	b2da      	uxtb	r2, r3
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011414:	b2da      	uxtb	r2, r3
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	2208      	movs	r2, #8
 801141e:	60da      	str	r2, [r3, #12]

  return 0;
 8011420:	2300      	movs	r3, #0

}
 8011422:	4618      	mov	r0, r3
 8011424:	3718      	adds	r7, #24
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b088      	sub	sp, #32
 801142e:	af00      	add	r7, sp, #0
 8011430:	60f8      	str	r0, [r7, #12]
 8011432:	460b      	mov	r3, r1
 8011434:	607a      	str	r2, [r7, #4]
 8011436:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801143e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011440:	69bb      	ldr	r3, [r7, #24]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d102      	bne.n	801144c <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8011446:	f04f 33ff 	mov.w	r3, #4294967295
 801144a:	e094      	b.n	8011576 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	69ba      	ldr	r2, [r7, #24]
 8011456:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801145a:	69ba      	ldr	r2, [r7, #24]
 801145c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8011460:	7af8      	ldrb	r0, [r7, #11]
 8011462:	4798      	blx	r3
 8011464:	4603      	mov	r3, r0
 8011466:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011468:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d104      	bne.n	801147a <SCSI_ReadCapacity16+0x50>
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011476:	2b02      	cmp	r3, #2
 8011478:	d108      	bne.n	801148c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801147a:	7af9      	ldrb	r1, [r7, #11]
 801147c:	233a      	movs	r3, #58	; 0x3a
 801147e:	2202      	movs	r2, #2
 8011480:	68f8      	ldr	r0, [r7, #12]
 8011482:	f000 f9c6 	bl	8011812 <SCSI_SenseCode>
    return -1;
 8011486:	f04f 33ff 	mov.w	r3, #4294967295
 801148a:	e074      	b.n	8011576 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	330a      	adds	r3, #10
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	330b      	adds	r3, #11
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801149c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	330c      	adds	r3, #12
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80114a6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	320d      	adds	r2, #13
 80114ac:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80114ae:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80114b4:	2300      	movs	r3, #0
 80114b6:	77fb      	strb	r3, [r7, #31]
 80114b8:	e007      	b.n	80114ca <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 80114ba:	7ffb      	ldrb	r3, [r7, #31]
 80114bc:	69ba      	ldr	r2, [r7, #24]
 80114be:	4413      	add	r3, r2
 80114c0:	2200      	movs	r2, #0
 80114c2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80114c4:	7ffb      	ldrb	r3, [r7, #31]
 80114c6:	3301      	adds	r3, #1
 80114c8:	77fb      	strb	r3, [r7, #31]
 80114ca:	7ffa      	ldrb	r2, [r7, #31]
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d3f2      	bcc.n	80114ba <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80114da:	3b01      	subs	r3, #1
 80114dc:	0e1b      	lsrs	r3, r3, #24
 80114de:	b2da      	uxtb	r2, r3
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80114ea:	3b01      	subs	r3, #1
 80114ec:	0c1b      	lsrs	r3, r3, #16
 80114ee:	b2da      	uxtb	r2, r3
 80114f0:	69bb      	ldr	r3, [r7, #24]
 80114f2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80114fa:	3b01      	subs	r3, #1
 80114fc:	0a1b      	lsrs	r3, r3, #8
 80114fe:	b2da      	uxtb	r2, r3
 8011500:	69bb      	ldr	r3, [r7, #24]
 8011502:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801150a:	b2db      	uxtb	r3, r3
 801150c:	3b01      	subs	r3, #1
 801150e:	b2da      	uxtb	r2, r3
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011514:	69bb      	ldr	r3, [r7, #24]
 8011516:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801151a:	161b      	asrs	r3, r3, #24
 801151c:	b2da      	uxtb	r2, r3
 801151e:	69bb      	ldr	r3, [r7, #24]
 8011520:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8011522:	69bb      	ldr	r3, [r7, #24]
 8011524:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011528:	141b      	asrs	r3, r3, #16
 801152a:	b2da      	uxtb	r2, r3
 801152c:	69bb      	ldr	r3, [r7, #24]
 801152e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011536:	0a1b      	lsrs	r3, r3, #8
 8011538:	b29b      	uxth	r3, r3
 801153a:	b2da      	uxtb	r2, r3
 801153c:	69bb      	ldr	r3, [r7, #24]
 801153e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8011540:	69bb      	ldr	r3, [r7, #24]
 8011542:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011546:	b2da      	uxtb	r2, r3
 8011548:	69bb      	ldr	r3, [r7, #24]
 801154a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	330a      	adds	r3, #10
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	330b      	adds	r3, #11
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801155c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	330c      	adds	r3, #12
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8011566:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	320d      	adds	r2, #13
 801156c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801156e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011570:	69bb      	ldr	r3, [r7, #24]
 8011572:	60da      	str	r2, [r3, #12]

  return 0;
 8011574:	2300      	movs	r3, #0
}
 8011576:	4618      	mov	r0, r3
 8011578:	3720      	adds	r7, #32
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801157e:	b580      	push	{r7, lr}
 8011580:	b088      	sub	sp, #32
 8011582:	af00      	add	r7, sp, #0
 8011584:	60f8      	str	r0, [r7, #12]
 8011586:	460b      	mov	r3, r1
 8011588:	607a      	str	r2, [r7, #4]
 801158a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011592:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011594:	69bb      	ldr	r3, [r7, #24]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d102      	bne.n	80115a0 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 801159a:	f04f 33ff 	mov.w	r3, #4294967295
 801159e:	e05c      	b.n	801165a <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	f107 0214 	add.w	r2, r7, #20
 80115ac:	f107 0110 	add.w	r1, r7, #16
 80115b0:	7af8      	ldrb	r0, [r7, #11]
 80115b2:	4798      	blx	r3
 80115b4:	4603      	mov	r3, r0
 80115b6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80115b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d104      	bne.n	80115ca <SCSI_ReadFormatCapacity+0x4c>
 80115c0:	69bb      	ldr	r3, [r7, #24]
 80115c2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80115c6:	2b02      	cmp	r3, #2
 80115c8:	d108      	bne.n	80115dc <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80115ca:	7af9      	ldrb	r1, [r7, #11]
 80115cc:	233a      	movs	r3, #58	; 0x3a
 80115ce:	2202      	movs	r2, #2
 80115d0:	68f8      	ldr	r0, [r7, #12]
 80115d2:	f000 f91e 	bl	8011812 <SCSI_SenseCode>
    return -1;
 80115d6:	f04f 33ff 	mov.w	r3, #4294967295
 80115da:	e03e      	b.n	801165a <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80115dc:	2300      	movs	r3, #0
 80115de:	83fb      	strh	r3, [r7, #30]
 80115e0:	e007      	b.n	80115f2 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80115e2:	8bfb      	ldrh	r3, [r7, #30]
 80115e4:	69ba      	ldr	r2, [r7, #24]
 80115e6:	4413      	add	r3, r2
 80115e8:	2200      	movs	r2, #0
 80115ea:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80115ec:	8bfb      	ldrh	r3, [r7, #30]
 80115ee:	3301      	adds	r3, #1
 80115f0:	83fb      	strh	r3, [r7, #30]
 80115f2:	8bfb      	ldrh	r3, [r7, #30]
 80115f4:	2b0b      	cmp	r3, #11
 80115f6:	d9f4      	bls.n	80115e2 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80115f8:	69bb      	ldr	r3, [r7, #24]
 80115fa:	2208      	movs	r2, #8
 80115fc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	3b01      	subs	r3, #1
 8011602:	0e1b      	lsrs	r3, r3, #24
 8011604:	b2da      	uxtb	r2, r3
 8011606:	69bb      	ldr	r3, [r7, #24]
 8011608:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	3b01      	subs	r3, #1
 801160e:	0c1b      	lsrs	r3, r3, #16
 8011610:	b2da      	uxtb	r2, r3
 8011612:	69bb      	ldr	r3, [r7, #24]
 8011614:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8011616:	693b      	ldr	r3, [r7, #16]
 8011618:	3b01      	subs	r3, #1
 801161a:	0a1b      	lsrs	r3, r3, #8
 801161c:	b2da      	uxtb	r2, r3
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	b2db      	uxtb	r3, r3
 8011626:	3b01      	subs	r3, #1
 8011628:	b2da      	uxtb	r2, r3
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801162e:	69bb      	ldr	r3, [r7, #24]
 8011630:	2202      	movs	r2, #2
 8011632:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8011634:	8abb      	ldrh	r3, [r7, #20]
 8011636:	141b      	asrs	r3, r3, #16
 8011638:	b2da      	uxtb	r2, r3
 801163a:	69bb      	ldr	r3, [r7, #24]
 801163c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801163e:	8abb      	ldrh	r3, [r7, #20]
 8011640:	0a1b      	lsrs	r3, r3, #8
 8011642:	b29b      	uxth	r3, r3
 8011644:	b2da      	uxtb	r2, r3
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801164a:	8abb      	ldrh	r3, [r7, #20]
 801164c:	b2da      	uxtb	r2, r3
 801164e:	69bb      	ldr	r3, [r7, #24]
 8011650:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	220c      	movs	r2, #12
 8011656:	60da      	str	r2, [r3, #12]

  return 0;
 8011658:	2300      	movs	r3, #0
}
 801165a:	4618      	mov	r0, r3
 801165c:	3720      	adds	r7, #32
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
	...

08011664 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b086      	sub	sp, #24
 8011668:	af00      	add	r7, sp, #0
 801166a:	60f8      	str	r0, [r7, #12]
 801166c:	460b      	mov	r3, r1
 801166e:	607a      	str	r2, [r7, #4]
 8011670:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011678:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801167a:	2317      	movs	r3, #23
 801167c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d102      	bne.n	801168a <SCSI_ModeSense6+0x26>
  {
    return -1;
 8011684:	f04f 33ff 	mov.w	r3, #4294967295
 8011688:	e011      	b.n	80116ae <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	3304      	adds	r3, #4
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	b29b      	uxth	r3, r3
 8011692:	8afa      	ldrh	r2, [r7, #22]
 8011694:	429a      	cmp	r2, r3
 8011696:	d303      	bcc.n	80116a0 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	3304      	adds	r3, #4
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80116a0:	8afb      	ldrh	r3, [r7, #22]
 80116a2:	461a      	mov	r2, r3
 80116a4:	4904      	ldr	r1, [pc, #16]	; (80116b8 <SCSI_ModeSense6+0x54>)
 80116a6:	6938      	ldr	r0, [r7, #16]
 80116a8:	f000 fdbc 	bl	8012224 <SCSI_UpdateBotData>

  return 0;
 80116ac:	2300      	movs	r3, #0
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3718      	adds	r7, #24
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	200000c0 	.word	0x200000c0

080116bc <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b086      	sub	sp, #24
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	460b      	mov	r3, r1
 80116c6:	607a      	str	r2, [r7, #4]
 80116c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116d0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80116d2:	231b      	movs	r3, #27
 80116d4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d102      	bne.n	80116e2 <SCSI_ModeSense10+0x26>
  {
    return -1;
 80116dc:	f04f 33ff 	mov.w	r3, #4294967295
 80116e0:	e011      	b.n	8011706 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	3308      	adds	r3, #8
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	8afa      	ldrh	r2, [r7, #22]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d303      	bcc.n	80116f8 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	3308      	adds	r3, #8
 80116f4:	781b      	ldrb	r3, [r3, #0]
 80116f6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80116f8:	8afb      	ldrh	r3, [r7, #22]
 80116fa:	461a      	mov	r2, r3
 80116fc:	4904      	ldr	r1, [pc, #16]	; (8011710 <SCSI_ModeSense10+0x54>)
 80116fe:	6938      	ldr	r0, [r7, #16]
 8011700:	f000 fd90 	bl	8012224 <SCSI_UpdateBotData>

  return 0;
 8011704:	2300      	movs	r3, #0
}
 8011706:	4618      	mov	r0, r3
 8011708:	3718      	adds	r7, #24
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	200000d8 	.word	0x200000d8

08011714 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b086      	sub	sp, #24
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	460b      	mov	r3, r1
 801171e:	607a      	str	r2, [r7, #4]
 8011720:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011728:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d102      	bne.n	8011736 <SCSI_RequestSense+0x22>
  {
    return -1;
 8011730:	f04f 33ff 	mov.w	r3, #4294967295
 8011734:	e069      	b.n	801180a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801173c:	2b00      	cmp	r3, #0
 801173e:	d10a      	bne.n	8011756 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011746:	2320      	movs	r3, #32
 8011748:	2205      	movs	r2, #5
 801174a:	68f8      	ldr	r0, [r7, #12]
 801174c:	f000 f861 	bl	8011812 <SCSI_SenseCode>
    return -1;
 8011750:	f04f 33ff 	mov.w	r3, #4294967295
 8011754:	e059      	b.n	801180a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8011756:	2300      	movs	r3, #0
 8011758:	75fb      	strb	r3, [r7, #23]
 801175a:	e007      	b.n	801176c <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 801175c:	7dfb      	ldrb	r3, [r7, #23]
 801175e:	693a      	ldr	r2, [r7, #16]
 8011760:	4413      	add	r3, r2
 8011762:	2200      	movs	r2, #0
 8011764:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8011766:	7dfb      	ldrb	r3, [r7, #23]
 8011768:	3301      	adds	r3, #1
 801176a:	75fb      	strb	r3, [r7, #23]
 801176c:	7dfb      	ldrb	r3, [r7, #23]
 801176e:	2b11      	cmp	r3, #17
 8011770:	d9f4      	bls.n	801175c <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	2270      	movs	r2, #112	; 0x70
 8011776:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	220c      	movs	r2, #12
 801177c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801178a:	429a      	cmp	r2, r3
 801178c:	d02e      	beq.n	80117ec <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011794:	461a      	mov	r2, r3
 8011796:	693b      	ldr	r3, [r7, #16]
 8011798:	3248      	adds	r2, #72	; 0x48
 801179a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80117a8:	693a      	ldr	r2, [r7, #16]
 80117aa:	3348      	adds	r3, #72	; 0x48
 80117ac:	00db      	lsls	r3, r3, #3
 80117ae:	4413      	add	r3, r2
 80117b0:	791a      	ldrb	r2, [r3, #4]
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80117bc:	693a      	ldr	r2, [r7, #16]
 80117be:	3348      	adds	r3, #72	; 0x48
 80117c0:	00db      	lsls	r3, r3, #3
 80117c2:	4413      	add	r3, r2
 80117c4:	795a      	ldrb	r2, [r3, #5]
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80117d0:	3301      	adds	r3, #1
 80117d2:	b2da      	uxtb	r2, r3
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80117e0:	2b04      	cmp	r3, #4
 80117e2:	d103      	bne.n	80117ec <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	2200      	movs	r2, #0
 80117e8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	2212      	movs	r2, #18
 80117f0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	3304      	adds	r3, #4
 80117f6:	781b      	ldrb	r3, [r3, #0]
 80117f8:	2b12      	cmp	r3, #18
 80117fa:	d805      	bhi.n	8011808 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	3304      	adds	r3, #4
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	461a      	mov	r2, r3
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8011808:	2300      	movs	r3, #0
}
 801180a:	4618      	mov	r0, r3
 801180c:	3718      	adds	r7, #24
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8011812:	b480      	push	{r7}
 8011814:	b085      	sub	sp, #20
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
 801181a:	4608      	mov	r0, r1
 801181c:	4611      	mov	r1, r2
 801181e:	461a      	mov	r2, r3
 8011820:	4603      	mov	r3, r0
 8011822:	70fb      	strb	r3, [r7, #3]
 8011824:	460b      	mov	r3, r1
 8011826:	70bb      	strb	r3, [r7, #2]
 8011828:	4613      	mov	r3, r2
 801182a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011832:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d02c      	beq.n	8011894 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011840:	461a      	mov	r2, r3
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	3248      	adds	r2, #72	; 0x48
 8011846:	78b9      	ldrb	r1, [r7, #2]
 8011848:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	3348      	adds	r3, #72	; 0x48
 8011856:	00db      	lsls	r3, r3, #3
 8011858:	4413      	add	r3, r2
 801185a:	787a      	ldrb	r2, [r7, #1]
 801185c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011864:	68fa      	ldr	r2, [r7, #12]
 8011866:	3348      	adds	r3, #72	; 0x48
 8011868:	00db      	lsls	r3, r3, #3
 801186a:	4413      	add	r3, r2
 801186c:	2200      	movs	r2, #0
 801186e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011876:	3301      	adds	r3, #1
 8011878:	b2da      	uxtb	r2, r3
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011886:	2b04      	cmp	r3, #4
 8011888:	d105      	bne.n	8011896 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	2200      	movs	r2, #0
 801188e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8011892:	e000      	b.n	8011896 <SCSI_SenseCode+0x84>
    return;
 8011894:	bf00      	nop
  }
}
 8011896:	3714      	adds	r7, #20
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr

080118a0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b086      	sub	sp, #24
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	60f8      	str	r0, [r7, #12]
 80118a8:	460b      	mov	r3, r1
 80118aa:	607a      	str	r2, [r7, #4]
 80118ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d102      	bne.n	80118c2 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80118bc:	f04f 33ff 	mov.w	r3, #4294967295
 80118c0:	e03b      	b.n	801193a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d10f      	bne.n	80118ec <SCSI_StartStopUnit+0x4c>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	3304      	adds	r3, #4
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	f003 0303 	and.w	r3, r3, #3
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	d108      	bne.n	80118ec <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80118da:	7af9      	ldrb	r1, [r7, #11]
 80118dc:	2324      	movs	r3, #36	; 0x24
 80118de:	2205      	movs	r2, #5
 80118e0:	68f8      	ldr	r0, [r7, #12]
 80118e2:	f7ff ff96 	bl	8011812 <SCSI_SenseCode>

    return -1;
 80118e6:	f04f 33ff 	mov.w	r3, #4294967295
 80118ea:	e026      	b.n	801193a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	3304      	adds	r3, #4
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	f003 0303 	and.w	r3, r3, #3
 80118f6:	2b01      	cmp	r3, #1
 80118f8:	d104      	bne.n	8011904 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	2200      	movs	r2, #0
 80118fe:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8011902:	e016      	b.n	8011932 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	3304      	adds	r3, #4
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	f003 0303 	and.w	r3, r3, #3
 801190e:	2b02      	cmp	r3, #2
 8011910:	d104      	bne.n	801191c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	2202      	movs	r2, #2
 8011916:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801191a:	e00a      	b.n	8011932 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	3304      	adds	r3, #4
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	f003 0303 	and.w	r3, r3, #3
 8011926:	2b03      	cmp	r3, #3
 8011928:	d103      	bne.n	8011932 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	2200      	movs	r2, #0
 801192e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	2200      	movs	r2, #0
 8011936:	60da      	str	r2, [r3, #12]

  return 0;
 8011938:	2300      	movs	r3, #0
}
 801193a:	4618      	mov	r0, r3
 801193c:	3718      	adds	r7, #24
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011942:	b480      	push	{r7}
 8011944:	b087      	sub	sp, #28
 8011946:	af00      	add	r7, sp, #0
 8011948:	60f8      	str	r0, [r7, #12]
 801194a:	460b      	mov	r3, r1
 801194c:	607a      	str	r2, [r7, #4]
 801194e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011956:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d102      	bne.n	8011964 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 801195e:	f04f 33ff 	mov.w	r3, #4294967295
 8011962:	e011      	b.n	8011988 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	3304      	adds	r3, #4
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d104      	bne.n	8011978 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	2200      	movs	r2, #0
 8011972:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8011976:	e003      	b.n	8011980 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	2201      	movs	r2, #1
 801197c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	2200      	movs	r2, #0
 8011984:	60da      	str	r2, [r3, #12]

  return 0;
 8011986:	2300      	movs	r3, #0
}
 8011988:	4618      	mov	r0, r3
 801198a:	371c      	adds	r7, #28
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b086      	sub	sp, #24
 8011998:	af00      	add	r7, sp, #0
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	460b      	mov	r3, r1
 801199e:	607a      	str	r2, [r7, #4]
 80119a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119a8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d102      	bne.n	80119b6 <SCSI_Read10+0x22>
  {
    return -1;
 80119b0:	f04f 33ff 	mov.w	r3, #4294967295
 80119b4:	e08a      	b.n	8011acc <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	7a1b      	ldrb	r3, [r3, #8]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d17c      	bne.n	8011ab8 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80119c4:	b25b      	sxtb	r3, r3
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	db0a      	blt.n	80119e0 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80119d0:	2320      	movs	r3, #32
 80119d2:	2205      	movs	r2, #5
 80119d4:	68f8      	ldr	r0, [r7, #12]
 80119d6:	f7ff ff1c 	bl	8011812 <SCSI_SenseCode>
      return -1;
 80119da:	f04f 33ff 	mov.w	r3, #4294967295
 80119de:	e075      	b.n	8011acc <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80119e6:	2b02      	cmp	r3, #2
 80119e8:	d108      	bne.n	80119fc <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80119ea:	7af9      	ldrb	r1, [r7, #11]
 80119ec:	233a      	movs	r3, #58	; 0x3a
 80119ee:	2202      	movs	r2, #2
 80119f0:	68f8      	ldr	r0, [r7, #12]
 80119f2:	f7ff ff0e 	bl	8011812 <SCSI_SenseCode>

      return -1;
 80119f6:	f04f 33ff 	mov.w	r3, #4294967295
 80119fa:	e067      	b.n	8011acc <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a02:	689b      	ldr	r3, [r3, #8]
 8011a04:	7afa      	ldrb	r2, [r7, #11]
 8011a06:	4610      	mov	r0, r2
 8011a08:	4798      	blx	r3
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d008      	beq.n	8011a22 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011a10:	7af9      	ldrb	r1, [r7, #11]
 8011a12:	233a      	movs	r3, #58	; 0x3a
 8011a14:	2202      	movs	r2, #2
 8011a16:	68f8      	ldr	r0, [r7, #12]
 8011a18:	f7ff fefb 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a20:	e054      	b.n	8011acc <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	3302      	adds	r3, #2
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	3303      	adds	r3, #3
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011a32:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	3304      	adds	r3, #4
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011a3c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	3205      	adds	r2, #5
 8011a42:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011a44:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	3307      	adds	r3, #7
 8011a50:	781b      	ldrb	r3, [r3, #0]
 8011a52:	021b      	lsls	r3, r3, #8
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	3208      	adds	r2, #8
 8011a58:	7812      	ldrb	r2, [r2, #0]
 8011a5a:	431a      	orrs	r2, r3
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011a6e:	7af9      	ldrb	r1, [r7, #11]
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	f000 faad 	bl	8011fd0 <SCSI_CheckAddressRange>
 8011a76:	4603      	mov	r3, r0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	da02      	bge.n	8011a82 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a80:	e024      	b.n	8011acc <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011a8e:	6979      	ldr	r1, [r7, #20]
 8011a90:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8011a94:	fb01 f303 	mul.w	r3, r1, r3
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d00a      	beq.n	8011ab2 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011aa2:	2320      	movs	r3, #32
 8011aa4:	2205      	movs	r2, #5
 8011aa6:	68f8      	ldr	r0, [r7, #12]
 8011aa8:	f7ff feb3 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011aac:	f04f 33ff 	mov.w	r3, #4294967295
 8011ab0:	e00c      	b.n	8011acc <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	2202      	movs	r2, #2
 8011ab6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011abe:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8011ac0:	7afb      	ldrb	r3, [r7, #11]
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	68f8      	ldr	r0, [r7, #12]
 8011ac6:	f000 faab 	bl	8012020 <SCSI_ProcessRead>
 8011aca:	4603      	mov	r3, r0
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3718      	adds	r7, #24
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}

08011ad4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b086      	sub	sp, #24
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	60f8      	str	r0, [r7, #12]
 8011adc:	460b      	mov	r3, r1
 8011ade:	607a      	str	r2, [r7, #4]
 8011ae0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ae8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d102      	bne.n	8011af6 <SCSI_Read12+0x22>
  {
    return -1;
 8011af0:	f04f 33ff 	mov.w	r3, #4294967295
 8011af4:	e095      	b.n	8011c22 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	7a1b      	ldrb	r3, [r3, #8]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	f040 8087 	bne.w	8011c0e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011b06:	b25b      	sxtb	r3, r3
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	db0a      	blt.n	8011b22 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011b12:	2320      	movs	r3, #32
 8011b14:	2205      	movs	r2, #5
 8011b16:	68f8      	ldr	r0, [r7, #12]
 8011b18:	f7ff fe7b 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b20:	e07f      	b.n	8011c22 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011b28:	2b02      	cmp	r3, #2
 8011b2a:	d108      	bne.n	8011b3e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011b2c:	7af9      	ldrb	r1, [r7, #11]
 8011b2e:	233a      	movs	r3, #58	; 0x3a
 8011b30:	2202      	movs	r2, #2
 8011b32:	68f8      	ldr	r0, [r7, #12]
 8011b34:	f7ff fe6d 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011b38:	f04f 33ff 	mov.w	r3, #4294967295
 8011b3c:	e071      	b.n	8011c22 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b44:	689b      	ldr	r3, [r3, #8]
 8011b46:	7afa      	ldrb	r2, [r7, #11]
 8011b48:	4610      	mov	r0, r2
 8011b4a:	4798      	blx	r3
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d008      	beq.n	8011b64 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011b52:	7af9      	ldrb	r1, [r7, #11]
 8011b54:	233a      	movs	r3, #58	; 0x3a
 8011b56:	2202      	movs	r2, #2
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	f7ff fe5a 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b62:	e05e      	b.n	8011c22 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	3302      	adds	r3, #2
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	3303      	adds	r3, #3
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011b74:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	3304      	adds	r3, #4
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011b7e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	3205      	adds	r2, #5
 8011b84:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011b86:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	3306      	adds	r3, #6
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	3307      	adds	r3, #7
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011b9e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	3308      	adds	r3, #8
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011ba8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011baa:	687a      	ldr	r2, [r7, #4]
 8011bac:	3209      	adds	r2, #9
 8011bae:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011bb0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011bc4:	7af9      	ldrb	r1, [r7, #11]
 8011bc6:	68f8      	ldr	r0, [r7, #12]
 8011bc8:	f000 fa02 	bl	8011fd0 <SCSI_CheckAddressRange>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	da02      	bge.n	8011bd8 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd6:	e024      	b.n	8011c22 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011be4:	6979      	ldr	r1, [r7, #20]
 8011be6:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8011bea:	fb01 f303 	mul.w	r3, r1, r3
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d00a      	beq.n	8011c08 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011bf8:	2320      	movs	r3, #32
 8011bfa:	2205      	movs	r2, #5
 8011bfc:	68f8      	ldr	r0, [r7, #12]
 8011bfe:	f7ff fe08 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011c02:	f04f 33ff 	mov.w	r3, #4294967295
 8011c06:	e00c      	b.n	8011c22 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	2202      	movs	r2, #2
 8011c0c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c14:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8011c16:	7afb      	ldrb	r3, [r7, #11]
 8011c18:	4619      	mov	r1, r3
 8011c1a:	68f8      	ldr	r0, [r7, #12]
 8011c1c:	f000 fa00 	bl	8012020 <SCSI_ProcessRead>
 8011c20:	4603      	mov	r3, r0
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3718      	adds	r7, #24
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}

08011c2a <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011c2a:	b580      	push	{r7, lr}
 8011c2c:	b086      	sub	sp, #24
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	60f8      	str	r0, [r7, #12]
 8011c32:	460b      	mov	r3, r1
 8011c34:	607a      	str	r2, [r7, #4]
 8011c36:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c3e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d102      	bne.n	8011c4c <SCSI_Write10+0x22>
  {
    return -1;
 8011c46:	f04f 33ff 	mov.w	r3, #4294967295
 8011c4a:	e0af      	b.n	8011dac <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	7a1b      	ldrb	r3, [r3, #8]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	f040 80a5 	bne.w	8011da0 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d10a      	bne.n	8011c76 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011c66:	2320      	movs	r3, #32
 8011c68:	2205      	movs	r2, #5
 8011c6a:	68f8      	ldr	r0, [r7, #12]
 8011c6c:	f7ff fdd1 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011c70:	f04f 33ff 	mov.w	r3, #4294967295
 8011c74:	e09a      	b.n	8011dac <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011c7c:	b25b      	sxtb	r3, r3
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	da0a      	bge.n	8011c98 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011c88:	2320      	movs	r3, #32
 8011c8a:	2205      	movs	r2, #5
 8011c8c:	68f8      	ldr	r0, [r7, #12]
 8011c8e:	f7ff fdc0 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011c92:	f04f 33ff 	mov.w	r3, #4294967295
 8011c96:	e089      	b.n	8011dac <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	7afa      	ldrb	r2, [r7, #11]
 8011ca2:	4610      	mov	r0, r2
 8011ca4:	4798      	blx	r3
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d008      	beq.n	8011cbe <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011cac:	7af9      	ldrb	r1, [r7, #11]
 8011cae:	233a      	movs	r3, #58	; 0x3a
 8011cb0:	2202      	movs	r2, #2
 8011cb2:	68f8      	ldr	r0, [r7, #12]
 8011cb4:	f7ff fdad 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cbc:	e076      	b.n	8011dac <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011cc4:	68db      	ldr	r3, [r3, #12]
 8011cc6:	7afa      	ldrb	r2, [r7, #11]
 8011cc8:	4610      	mov	r0, r2
 8011cca:	4798      	blx	r3
 8011ccc:	4603      	mov	r3, r0
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d008      	beq.n	8011ce4 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011cd2:	7af9      	ldrb	r1, [r7, #11]
 8011cd4:	2327      	movs	r3, #39	; 0x27
 8011cd6:	2202      	movs	r2, #2
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f7ff fd9a 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011cde:	f04f 33ff 	mov.w	r3, #4294967295
 8011ce2:	e063      	b.n	8011dac <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	3302      	adds	r3, #2
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	3303      	adds	r3, #3
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011cf4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	3304      	adds	r3, #4
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011cfe:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	3205      	adds	r2, #5
 8011d04:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011d06:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	3307      	adds	r3, #7
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8011d16:	687a      	ldr	r2, [r7, #4]
 8011d18:	3208      	adds	r2, #8
 8011d1a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8011d1c:	431a      	orrs	r2, r3
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011d30:	7af9      	ldrb	r1, [r7, #11]
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f000 f94c 	bl	8011fd0 <SCSI_CheckAddressRange>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	da02      	bge.n	8011d44 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d42:	e033      	b.n	8011dac <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011d4a:	697a      	ldr	r2, [r7, #20]
 8011d4c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011d50:	fb02 f303 	mul.w	r3, r2, r3
 8011d54:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011d5c:	693a      	ldr	r2, [r7, #16]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d00a      	beq.n	8011d78 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011d68:	2320      	movs	r3, #32
 8011d6a:	2205      	movs	r2, #5
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f7ff fd50 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011d72:	f04f 33ff 	mov.w	r3, #4294967295
 8011d76:	e019      	b.n	8011dac <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d7e:	bf28      	it	cs
 8011d80:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011d84:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	2201      	movs	r2, #1
 8011d8a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	f103 0210 	add.w	r2, r3, #16
 8011d92:	693b      	ldr	r3, [r7, #16]
 8011d94:	2101      	movs	r1, #1
 8011d96:	68f8      	ldr	r0, [r7, #12]
 8011d98:	f004 ff83 	bl	8016ca2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	e005      	b.n	8011dac <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8011da0:	7afb      	ldrb	r3, [r7, #11]
 8011da2:	4619      	mov	r1, r3
 8011da4:	68f8      	ldr	r0, [r7, #12]
 8011da6:	f000 f9b4 	bl	8012112 <SCSI_ProcessWrite>
 8011daa:	4603      	mov	r3, r0
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	3718      	adds	r7, #24
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b086      	sub	sp, #24
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	60f8      	str	r0, [r7, #12]
 8011dbc:	460b      	mov	r3, r1
 8011dbe:	607a      	str	r2, [r7, #4]
 8011dc0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011dc8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d102      	bne.n	8011dd6 <SCSI_Write12+0x22>
  {
    return -1;
 8011dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8011dd4:	e0bf      	b.n	8011f56 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	7a1b      	ldrb	r3, [r3, #8]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	f040 80b5 	bne.w	8011f4a <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d10a      	bne.n	8011e00 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011df0:	2320      	movs	r3, #32
 8011df2:	2205      	movs	r2, #5
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f7ff fd0c 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8011dfe:	e0aa      	b.n	8011f56 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011e06:	b25b      	sxtb	r3, r3
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	da0a      	bge.n	8011e22 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011e12:	2320      	movs	r3, #32
 8011e14:	2205      	movs	r2, #5
 8011e16:	68f8      	ldr	r0, [r7, #12]
 8011e18:	f7ff fcfb 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e20:	e099      	b.n	8011f56 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e28:	689b      	ldr	r3, [r3, #8]
 8011e2a:	7afa      	ldrb	r2, [r7, #11]
 8011e2c:	4610      	mov	r0, r2
 8011e2e:	4798      	blx	r3
 8011e30:	4603      	mov	r3, r0
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d00b      	beq.n	8011e4e <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011e36:	7af9      	ldrb	r1, [r7, #11]
 8011e38:	233a      	movs	r3, #58	; 0x3a
 8011e3a:	2202      	movs	r2, #2
 8011e3c:	68f8      	ldr	r0, [r7, #12]
 8011e3e:	f7ff fce8 	bl	8011812 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	2205      	movs	r2, #5
 8011e46:	721a      	strb	r2, [r3, #8]
      return -1;
 8011e48:	f04f 33ff 	mov.w	r3, #4294967295
 8011e4c:	e083      	b.n	8011f56 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	7afa      	ldrb	r2, [r7, #11]
 8011e58:	4610      	mov	r0, r2
 8011e5a:	4798      	blx	r3
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d00b      	beq.n	8011e7a <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011e62:	7af9      	ldrb	r1, [r7, #11]
 8011e64:	2327      	movs	r3, #39	; 0x27
 8011e66:	2202      	movs	r2, #2
 8011e68:	68f8      	ldr	r0, [r7, #12]
 8011e6a:	f7ff fcd2 	bl	8011812 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	2205      	movs	r2, #5
 8011e72:	721a      	strb	r2, [r3, #8]
      return -1;
 8011e74:	f04f 33ff 	mov.w	r3, #4294967295
 8011e78:	e06d      	b.n	8011f56 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	3302      	adds	r3, #2
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	3303      	adds	r3, #3
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011e8a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	3304      	adds	r3, #4
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011e94:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	3205      	adds	r2, #5
 8011e9a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011e9c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	3306      	adds	r3, #6
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	3307      	adds	r3, #7
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011eb4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	3308      	adds	r3, #8
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011ebe:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011ec0:	687a      	ldr	r2, [r7, #4]
 8011ec2:	3209      	adds	r2, #9
 8011ec4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011ec6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011eda:	7af9      	ldrb	r1, [r7, #11]
 8011edc:	68f8      	ldr	r0, [r7, #12]
 8011ede:	f000 f877 	bl	8011fd0 <SCSI_CheckAddressRange>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	da02      	bge.n	8011eee <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8011eec:	e033      	b.n	8011f56 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011ef4:	697a      	ldr	r2, [r7, #20]
 8011ef6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011efa:	fb02 f303 	mul.w	r3, r2, r3
 8011efe:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011f06:	693a      	ldr	r2, [r7, #16]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d00a      	beq.n	8011f22 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011f0c:	697b      	ldr	r3, [r7, #20]
 8011f0e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011f12:	2320      	movs	r3, #32
 8011f14:	2205      	movs	r2, #5
 8011f16:	68f8      	ldr	r0, [r7, #12]
 8011f18:	f7ff fc7b 	bl	8011812 <SCSI_SenseCode>
      return -1;
 8011f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f20:	e019      	b.n	8011f56 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f28:	bf28      	it	cs
 8011f2a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011f2e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	2201      	movs	r2, #1
 8011f34:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	f103 0210 	add.w	r2, r3, #16
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	2101      	movs	r1, #1
 8011f40:	68f8      	ldr	r0, [r7, #12]
 8011f42:	f004 feae 	bl	8016ca2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	e005      	b.n	8011f56 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8011f4a:	7afb      	ldrb	r3, [r7, #11]
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	68f8      	ldr	r0, [r7, #12]
 8011f50:	f000 f8df 	bl	8012112 <SCSI_ProcessWrite>
 8011f54:	4603      	mov	r3, r0
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3718      	adds	r7, #24
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}

08011f5e <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011f5e:	b580      	push	{r7, lr}
 8011f60:	b086      	sub	sp, #24
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	60f8      	str	r0, [r7, #12]
 8011f66:	460b      	mov	r3, r1
 8011f68:	607a      	str	r2, [r7, #4]
 8011f6a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f72:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d102      	bne.n	8011f80 <SCSI_Verify10+0x22>
  {
    return -1;
 8011f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f7e:	e023      	b.n	8011fc8 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	3301      	adds	r3, #1
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	f003 0302 	and.w	r3, r3, #2
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d008      	beq.n	8011fa0 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011f8e:	7af9      	ldrb	r1, [r7, #11]
 8011f90:	2324      	movs	r3, #36	; 0x24
 8011f92:	2205      	movs	r2, #5
 8011f94:	68f8      	ldr	r0, [r7, #12]
 8011f96:	f7ff fc3c 	bl	8011812 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8011f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f9e:	e013      	b.n	8011fc8 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011fac:	7af9      	ldrb	r1, [r7, #11]
 8011fae:	68f8      	ldr	r0, [r7, #12]
 8011fb0:	f000 f80e 	bl	8011fd0 <SCSI_CheckAddressRange>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	da02      	bge.n	8011fc0 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8011fba:	f04f 33ff 	mov.w	r3, #4294967295
 8011fbe:	e003      	b.n	8011fc8 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	60da      	str	r2, [r3, #12]

  return 0;
 8011fc6:	2300      	movs	r3, #0
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3718      	adds	r7, #24
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b086      	sub	sp, #24
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	607a      	str	r2, [r7, #4]
 8011fda:	603b      	str	r3, [r7, #0]
 8011fdc:	460b      	mov	r3, r1
 8011fde:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fe6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d102      	bne.n	8011ff4 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8011fee:	f04f 33ff 	mov.w	r3, #4294967295
 8011ff2:	e011      	b.n	8012018 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8011ff4:	687a      	ldr	r2, [r7, #4]
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	441a      	add	r2, r3
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012000:	429a      	cmp	r2, r3
 8012002:	d908      	bls.n	8012016 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8012004:	7af9      	ldrb	r1, [r7, #11]
 8012006:	2321      	movs	r3, #33	; 0x21
 8012008:	2205      	movs	r2, #5
 801200a:	68f8      	ldr	r0, [r7, #12]
 801200c:	f7ff fc01 	bl	8011812 <SCSI_SenseCode>
    return -1;
 8012010:	f04f 33ff 	mov.w	r3, #4294967295
 8012014:	e000      	b.n	8012018 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8012016:	2300      	movs	r3, #0
}
 8012018:	4618      	mov	r0, r3
 801201a:	3718      	adds	r7, #24
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012020:	b590      	push	{r4, r7, lr}
 8012022:	b085      	sub	sp, #20
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	460b      	mov	r3, r1
 801202a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012032:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801203a:	68fa      	ldr	r2, [r7, #12]
 801203c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012040:	fb02 f303 	mul.w	r3, r2, r3
 8012044:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d102      	bne.n	8012052 <SCSI_ProcessRead+0x32>
  {
    return -1;
 801204c:	f04f 33ff 	mov.w	r3, #4294967295
 8012050:	e05b      	b.n	801210a <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012058:	bf28      	it	cs
 801205a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801205e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012066:	691c      	ldr	r4, [r3, #16]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	f103 0110 	add.w	r1, r3, #16
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801207a:	4618      	mov	r0, r3
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8012082:	b29b      	uxth	r3, r3
 8012084:	78f8      	ldrb	r0, [r7, #3]
 8012086:	47a0      	blx	r4
 8012088:	4603      	mov	r3, r0
 801208a:	2b00      	cmp	r3, #0
 801208c:	da08      	bge.n	80120a0 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801208e:	78f9      	ldrb	r1, [r7, #3]
 8012090:	2311      	movs	r3, #17
 8012092:	2204      	movs	r2, #4
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7ff fbbc 	bl	8011812 <SCSI_SenseCode>
    return -1;
 801209a:	f04f 33ff 	mov.w	r3, #4294967295
 801209e:	e034      	b.n	801210a <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	f103 0210 	add.w	r2, r3, #16
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	2181      	movs	r1, #129	; 0x81
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f004 fdd8 	bl	8016c60 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80120bc:	4619      	mov	r1, r3
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80120c4:	441a      	add	r2, r3
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80120d8:	4619      	mov	r1, r3
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80120e0:	1ad2      	subs	r2, r2, r3
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	1ad2      	subs	r2, r2, r3
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d102      	bne.n	8012108 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2203      	movs	r2, #3
 8012106:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8012108:	2300      	movs	r3, #0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3714      	adds	r7, #20
 801210e:	46bd      	mov	sp, r7
 8012110:	bd90      	pop	{r4, r7, pc}

08012112 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012112:	b590      	push	{r4, r7, lr}
 8012114:	b085      	sub	sp, #20
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
 801211a:	460b      	mov	r3, r1
 801211c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012124:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801212c:	68fa      	ldr	r2, [r7, #12]
 801212e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012132:	fb02 f303 	mul.w	r3, r2, r3
 8012136:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d102      	bne.n	8012144 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 801213e:	f04f 33ff 	mov.w	r3, #4294967295
 8012142:	e06b      	b.n	801221c <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801214a:	bf28      	it	cs
 801214c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012150:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012158:	695c      	ldr	r4, [r3, #20]
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f103 0110 	add.w	r1, r3, #16
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801216c:	4618      	mov	r0, r3
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8012174:	b29b      	uxth	r3, r3
 8012176:	78f8      	ldrb	r0, [r7, #3]
 8012178:	47a0      	blx	r4
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	da08      	bge.n	8012192 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8012180:	78f9      	ldrb	r1, [r7, #3]
 8012182:	2303      	movs	r3, #3
 8012184:	2204      	movs	r2, #4
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f7ff fb43 	bl	8011812 <SCSI_SenseCode>
    return -1;
 801218c:	f04f 33ff 	mov.w	r3, #4294967295
 8012190:	e044      	b.n	801221c <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801219e:	4619      	mov	r1, r3
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80121a6:	441a      	add	r2, r3
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80121ba:	4619      	mov	r1, r3
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	fbb3 f3f1 	udiv	r3, r3, r1
 80121c2:	1ad2      	subs	r2, r2, r3
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	1ad2      	subs	r2, r2, r3
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d104      	bne.n	80121ee <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80121e4:	2100      	movs	r1, #0
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f7fe fdd8 	bl	8010d9c <MSC_BOT_SendCSW>
 80121ec:	e015      	b.n	801221a <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80121f4:	68fa      	ldr	r2, [r7, #12]
 80121f6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80121fa:	fb02 f303 	mul.w	r3, r2, r3
 80121fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012202:	bf28      	it	cs
 8012204:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012208:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	f103 0210 	add.w	r2, r3, #16
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	2101      	movs	r1, #1
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f004 fd44 	bl	8016ca2 <USBD_LL_PrepareReceive>
  }

  return 0;
 801221a:	2300      	movs	r3, #0
}
 801221c:	4618      	mov	r0, r3
 801221e:	3714      	adds	r7, #20
 8012220:	46bd      	mov	sp, r7
 8012222:	bd90      	pop	{r4, r7, pc}

08012224 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8012224:	b480      	push	{r7}
 8012226:	b087      	sub	sp, #28
 8012228:	af00      	add	r7, sp, #0
 801222a:	60f8      	str	r0, [r7, #12]
 801222c:	60b9      	str	r1, [r7, #8]
 801222e:	4613      	mov	r3, r2
 8012230:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8012232:	88fb      	ldrh	r3, [r7, #6]
 8012234:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d102      	bne.n	8012242 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 801223c:	f04f 33ff 	mov.w	r3, #4294967295
 8012240:	e013      	b.n	801226a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8012242:	8afa      	ldrh	r2, [r7, #22]
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8012248:	e00b      	b.n	8012262 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801224a:	8afb      	ldrh	r3, [r7, #22]
 801224c:	3b01      	subs	r3, #1
 801224e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8012250:	8afb      	ldrh	r3, [r7, #22]
 8012252:	68ba      	ldr	r2, [r7, #8]
 8012254:	441a      	add	r2, r3
 8012256:	8afb      	ldrh	r3, [r7, #22]
 8012258:	7811      	ldrb	r1, [r2, #0]
 801225a:	68fa      	ldr	r2, [r7, #12]
 801225c:	4413      	add	r3, r2
 801225e:	460a      	mov	r2, r1
 8012260:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8012262:	8afb      	ldrh	r3, [r7, #22]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d1f0      	bne.n	801224a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8012268:	2300      	movs	r3, #0
}
 801226a:	4618      	mov	r0, r3
 801226c:	371c      	adds	r7, #28
 801226e:	46bd      	mov	sp, r7
 8012270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012274:	4770      	bx	lr

08012276 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012276:	b580      	push	{r7, lr}
 8012278:	b086      	sub	sp, #24
 801227a:	af00      	add	r7, sp, #0
 801227c:	60f8      	str	r0, [r7, #12]
 801227e:	60b9      	str	r1, [r7, #8]
 8012280:	4613      	mov	r3, r2
 8012282:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d101      	bne.n	801228e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801228a:	2303      	movs	r3, #3
 801228c:	e01f      	b.n	80122ce <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	2200      	movs	r2, #0
 8012292:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	2200      	movs	r2, #0
 801229a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	2200      	movs	r2, #0
 80122a2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d003      	beq.n	80122b4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	68ba      	ldr	r2, [r7, #8]
 80122b0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2201      	movs	r2, #1
 80122b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	79fa      	ldrb	r2, [r7, #7]
 80122c0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	f004 fb78 	bl	80169b8 <USBD_LL_Init>
 80122c8:	4603      	mov	r3, r0
 80122ca:	75fb      	strb	r3, [r7, #23]

  return ret;
 80122cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3718      	adds	r7, #24
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}

080122d6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80122d6:	b580      	push	{r7, lr}
 80122d8:	b084      	sub	sp, #16
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
 80122de:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80122e0:	2300      	movs	r3, #0
 80122e2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d101      	bne.n	80122ee <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80122ea:	2303      	movs	r3, #3
 80122ec:	e016      	b.n	801231c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	683a      	ldr	r2, [r7, #0]
 80122f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d00b      	beq.n	801231a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801230a:	f107 020e 	add.w	r2, r7, #14
 801230e:	4610      	mov	r0, r2
 8012310:	4798      	blx	r3
 8012312:	4602      	mov	r2, r0
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801231a:	2300      	movs	r3, #0
}
 801231c:	4618      	mov	r0, r3
 801231e:	3710      	adds	r7, #16
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b082      	sub	sp, #8
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f004 fb8f 	bl	8016a50 <USBD_LL_Start>
 8012332:	4603      	mov	r3, r0
}
 8012334:	4618      	mov	r0, r3
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012344:	2300      	movs	r3, #0
}
 8012346:	4618      	mov	r0, r3
 8012348:	370c      	adds	r7, #12
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr

08012352 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012352:	b580      	push	{r7, lr}
 8012354:	b084      	sub	sp, #16
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
 801235a:	460b      	mov	r3, r1
 801235c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801235e:	2303      	movs	r3, #3
 8012360:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012368:	2b00      	cmp	r3, #0
 801236a:	d009      	beq.n	8012380 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	78fa      	ldrb	r2, [r7, #3]
 8012376:	4611      	mov	r1, r2
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	4798      	blx	r3
 801237c:	4603      	mov	r3, r0
 801237e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012380:	7bfb      	ldrb	r3, [r7, #15]
}
 8012382:	4618      	mov	r0, r3
 8012384:	3710      	adds	r7, #16
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}

0801238a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801238a:	b580      	push	{r7, lr}
 801238c:	b082      	sub	sp, #8
 801238e:	af00      	add	r7, sp, #0
 8012390:	6078      	str	r0, [r7, #4]
 8012392:	460b      	mov	r3, r1
 8012394:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801239c:	2b00      	cmp	r3, #0
 801239e:	d007      	beq.n	80123b0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123a6:	685b      	ldr	r3, [r3, #4]
 80123a8:	78fa      	ldrb	r2, [r7, #3]
 80123aa:	4611      	mov	r1, r2
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	4798      	blx	r3
  }

  return USBD_OK;
 80123b0:	2300      	movs	r3, #0
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3708      	adds	r7, #8
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}

080123ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b084      	sub	sp, #16
 80123be:	af00      	add	r7, sp, #0
 80123c0:	6078      	str	r0, [r7, #4]
 80123c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80123ca:	6839      	ldr	r1, [r7, #0]
 80123cc:	4618      	mov	r0, r3
 80123ce:	f000 ffb9 	bl	8013344 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2201      	movs	r2, #1
 80123d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80123e0:	461a      	mov	r2, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80123ee:	f003 031f 	and.w	r3, r3, #31
 80123f2:	2b02      	cmp	r3, #2
 80123f4:	d01a      	beq.n	801242c <USBD_LL_SetupStage+0x72>
 80123f6:	2b02      	cmp	r3, #2
 80123f8:	d822      	bhi.n	8012440 <USBD_LL_SetupStage+0x86>
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d002      	beq.n	8012404 <USBD_LL_SetupStage+0x4a>
 80123fe:	2b01      	cmp	r3, #1
 8012400:	d00a      	beq.n	8012418 <USBD_LL_SetupStage+0x5e>
 8012402:	e01d      	b.n	8012440 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801240a:	4619      	mov	r1, r3
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f000 fa61 	bl	80128d4 <USBD_StdDevReq>
 8012412:	4603      	mov	r3, r0
 8012414:	73fb      	strb	r3, [r7, #15]
      break;
 8012416:	e020      	b.n	801245a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801241e:	4619      	mov	r1, r3
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f000 fac5 	bl	80129b0 <USBD_StdItfReq>
 8012426:	4603      	mov	r3, r0
 8012428:	73fb      	strb	r3, [r7, #15]
      break;
 801242a:	e016      	b.n	801245a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012432:	4619      	mov	r1, r3
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f000 fb04 	bl	8012a42 <USBD_StdEPReq>
 801243a:	4603      	mov	r3, r0
 801243c:	73fb      	strb	r3, [r7, #15]
      break;
 801243e:	e00c      	b.n	801245a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801244a:	b2db      	uxtb	r3, r3
 801244c:	4619      	mov	r1, r3
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f004 fb7d 	bl	8016b4e <USBD_LL_StallEP>
 8012454:	4603      	mov	r3, r0
 8012456:	73fb      	strb	r3, [r7, #15]
      break;
 8012458:	bf00      	nop
  }

  return ret;
 801245a:	7bfb      	ldrb	r3, [r7, #15]
}
 801245c:	4618      	mov	r0, r3
 801245e:	3710      	adds	r7, #16
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b086      	sub	sp, #24
 8012468:	af00      	add	r7, sp, #0
 801246a:	60f8      	str	r0, [r7, #12]
 801246c:	460b      	mov	r3, r1
 801246e:	607a      	str	r2, [r7, #4]
 8012470:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012472:	7afb      	ldrb	r3, [r7, #11]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d138      	bne.n	80124ea <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801247e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012486:	2b03      	cmp	r3, #3
 8012488:	d14a      	bne.n	8012520 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	689a      	ldr	r2, [r3, #8]
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	68db      	ldr	r3, [r3, #12]
 8012492:	429a      	cmp	r2, r3
 8012494:	d913      	bls.n	80124be <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	689a      	ldr	r2, [r3, #8]
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	68db      	ldr	r3, [r3, #12]
 801249e:	1ad2      	subs	r2, r2, r3
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	68da      	ldr	r2, [r3, #12]
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	689b      	ldr	r3, [r3, #8]
 80124ac:	4293      	cmp	r3, r2
 80124ae:	bf28      	it	cs
 80124b0:	4613      	movcs	r3, r2
 80124b2:	461a      	mov	r2, r3
 80124b4:	6879      	ldr	r1, [r7, #4]
 80124b6:	68f8      	ldr	r0, [r7, #12]
 80124b8:	f001 f81b 	bl	80134f2 <USBD_CtlContinueRx>
 80124bc:	e030      	b.n	8012520 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124c4:	b2db      	uxtb	r3, r3
 80124c6:	2b03      	cmp	r3, #3
 80124c8:	d10b      	bne.n	80124e2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124d0:	691b      	ldr	r3, [r3, #16]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d005      	beq.n	80124e2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124dc:	691b      	ldr	r3, [r3, #16]
 80124de:	68f8      	ldr	r0, [r7, #12]
 80124e0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80124e2:	68f8      	ldr	r0, [r7, #12]
 80124e4:	f001 f816 	bl	8013514 <USBD_CtlSendStatus>
 80124e8:	e01a      	b.n	8012520 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	2b03      	cmp	r3, #3
 80124f4:	d114      	bne.n	8012520 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124fc:	699b      	ldr	r3, [r3, #24]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d00e      	beq.n	8012520 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012508:	699b      	ldr	r3, [r3, #24]
 801250a:	7afa      	ldrb	r2, [r7, #11]
 801250c:	4611      	mov	r1, r2
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	4798      	blx	r3
 8012512:	4603      	mov	r3, r0
 8012514:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012516:	7dfb      	ldrb	r3, [r7, #23]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d001      	beq.n	8012520 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801251c:	7dfb      	ldrb	r3, [r7, #23]
 801251e:	e000      	b.n	8012522 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8012520:	2300      	movs	r3, #0
}
 8012522:	4618      	mov	r0, r3
 8012524:	3718      	adds	r7, #24
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b086      	sub	sp, #24
 801252e:	af00      	add	r7, sp, #0
 8012530:	60f8      	str	r0, [r7, #12]
 8012532:	460b      	mov	r3, r1
 8012534:	607a      	str	r2, [r7, #4]
 8012536:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012538:	7afb      	ldrb	r3, [r7, #11]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d16b      	bne.n	8012616 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	3314      	adds	r3, #20
 8012542:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801254a:	2b02      	cmp	r3, #2
 801254c:	d156      	bne.n	80125fc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	689a      	ldr	r2, [r3, #8]
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	429a      	cmp	r2, r3
 8012558:	d914      	bls.n	8012584 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	689a      	ldr	r2, [r3, #8]
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	68db      	ldr	r3, [r3, #12]
 8012562:	1ad2      	subs	r2, r2, r3
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	689b      	ldr	r3, [r3, #8]
 801256c:	461a      	mov	r2, r3
 801256e:	6879      	ldr	r1, [r7, #4]
 8012570:	68f8      	ldr	r0, [r7, #12]
 8012572:	f000 ffad 	bl	80134d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012576:	2300      	movs	r3, #0
 8012578:	2200      	movs	r2, #0
 801257a:	2100      	movs	r1, #0
 801257c:	68f8      	ldr	r0, [r7, #12]
 801257e:	f004 fb90 	bl	8016ca2 <USBD_LL_PrepareReceive>
 8012582:	e03b      	b.n	80125fc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	68da      	ldr	r2, [r3, #12]
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	689b      	ldr	r3, [r3, #8]
 801258c:	429a      	cmp	r2, r3
 801258e:	d11c      	bne.n	80125ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	685a      	ldr	r2, [r3, #4]
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012598:	429a      	cmp	r2, r3
 801259a:	d316      	bcc.n	80125ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	685a      	ldr	r2, [r3, #4]
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d20f      	bcs.n	80125ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80125aa:	2200      	movs	r2, #0
 80125ac:	2100      	movs	r1, #0
 80125ae:	68f8      	ldr	r0, [r7, #12]
 80125b0:	f000 ff8e 	bl	80134d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2200      	movs	r2, #0
 80125b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80125bc:	2300      	movs	r3, #0
 80125be:	2200      	movs	r2, #0
 80125c0:	2100      	movs	r1, #0
 80125c2:	68f8      	ldr	r0, [r7, #12]
 80125c4:	f004 fb6d 	bl	8016ca2 <USBD_LL_PrepareReceive>
 80125c8:	e018      	b.n	80125fc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	2b03      	cmp	r3, #3
 80125d4:	d10b      	bne.n	80125ee <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d005      	beq.n	80125ee <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	68f8      	ldr	r0, [r7, #12]
 80125ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80125ee:	2180      	movs	r1, #128	; 0x80
 80125f0:	68f8      	ldr	r0, [r7, #12]
 80125f2:	f004 faac 	bl	8016b4e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80125f6:	68f8      	ldr	r0, [r7, #12]
 80125f8:	f000 ff9f 	bl	801353a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012602:	2b01      	cmp	r3, #1
 8012604:	d122      	bne.n	801264c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012606:	68f8      	ldr	r0, [r7, #12]
 8012608:	f7ff fe98 	bl	801233c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	2200      	movs	r2, #0
 8012610:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012614:	e01a      	b.n	801264c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801261c:	b2db      	uxtb	r3, r3
 801261e:	2b03      	cmp	r3, #3
 8012620:	d114      	bne.n	801264c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012628:	695b      	ldr	r3, [r3, #20]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d00e      	beq.n	801264c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012634:	695b      	ldr	r3, [r3, #20]
 8012636:	7afa      	ldrb	r2, [r7, #11]
 8012638:	4611      	mov	r1, r2
 801263a:	68f8      	ldr	r0, [r7, #12]
 801263c:	4798      	blx	r3
 801263e:	4603      	mov	r3, r0
 8012640:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012642:	7dfb      	ldrb	r3, [r7, #23]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d001      	beq.n	801264c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012648:	7dfb      	ldrb	r3, [r7, #23]
 801264a:	e000      	b.n	801264e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801264c:	2300      	movs	r3, #0
}
 801264e:	4618      	mov	r0, r3
 8012650:	3718      	adds	r7, #24
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}

08012656 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012656:	b580      	push	{r7, lr}
 8012658:	b082      	sub	sp, #8
 801265a:	af00      	add	r7, sp, #0
 801265c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2201      	movs	r2, #1
 8012662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2200      	movs	r2, #0
 801266a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2200      	movs	r2, #0
 8012672:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2200      	movs	r2, #0
 8012678:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012682:	2b00      	cmp	r3, #0
 8012684:	d101      	bne.n	801268a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012686:	2303      	movs	r3, #3
 8012688:	e02f      	b.n	80126ea <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00f      	beq.n	80126b4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d009      	beq.n	80126b4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	687a      	ldr	r2, [r7, #4]
 80126aa:	6852      	ldr	r2, [r2, #4]
 80126ac:	b2d2      	uxtb	r2, r2
 80126ae:	4611      	mov	r1, r2
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80126b4:	2340      	movs	r3, #64	; 0x40
 80126b6:	2200      	movs	r2, #0
 80126b8:	2100      	movs	r1, #0
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f004 f9e3 	bl	8016a86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2201      	movs	r2, #1
 80126c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2240      	movs	r2, #64	; 0x40
 80126cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80126d0:	2340      	movs	r3, #64	; 0x40
 80126d2:	2200      	movs	r2, #0
 80126d4:	2180      	movs	r1, #128	; 0x80
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f004 f9d5 	bl	8016a86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2201      	movs	r2, #1
 80126e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2240      	movs	r2, #64	; 0x40
 80126e6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80126e8:	2300      	movs	r3, #0
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3708      	adds	r7, #8
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}

080126f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80126f2:	b480      	push	{r7}
 80126f4:	b083      	sub	sp, #12
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
 80126fa:	460b      	mov	r3, r1
 80126fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	78fa      	ldrb	r2, [r7, #3]
 8012702:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012704:	2300      	movs	r3, #0
}
 8012706:	4618      	mov	r0, r3
 8012708:	370c      	adds	r7, #12
 801270a:	46bd      	mov	sp, r7
 801270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012710:	4770      	bx	lr

08012712 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012712:	b480      	push	{r7}
 8012714:	b083      	sub	sp, #12
 8012716:	af00      	add	r7, sp, #0
 8012718:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012720:	b2da      	uxtb	r2, r3
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2204      	movs	r2, #4
 801272c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012730:	2300      	movs	r3, #0
}
 8012732:	4618      	mov	r0, r3
 8012734:	370c      	adds	r7, #12
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr

0801273e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801273e:	b480      	push	{r7}
 8012740:	b083      	sub	sp, #12
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801274c:	b2db      	uxtb	r3, r3
 801274e:	2b04      	cmp	r3, #4
 8012750:	d106      	bne.n	8012760 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012758:	b2da      	uxtb	r2, r3
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012760:	2300      	movs	r3, #0
}
 8012762:	4618      	mov	r0, r3
 8012764:	370c      	adds	r7, #12
 8012766:	46bd      	mov	sp, r7
 8012768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276c:	4770      	bx	lr

0801276e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801276e:	b580      	push	{r7, lr}
 8012770:	b082      	sub	sp, #8
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801277c:	2b00      	cmp	r3, #0
 801277e:	d101      	bne.n	8012784 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012780:	2303      	movs	r3, #3
 8012782:	e012      	b.n	80127aa <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801278a:	b2db      	uxtb	r3, r3
 801278c:	2b03      	cmp	r3, #3
 801278e:	d10b      	bne.n	80127a8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012796:	69db      	ldr	r3, [r3, #28]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d005      	beq.n	80127a8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127a2:	69db      	ldr	r3, [r3, #28]
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80127a8:	2300      	movs	r3, #0
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3708      	adds	r7, #8
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}

080127b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80127b2:	b580      	push	{r7, lr}
 80127b4:	b082      	sub	sp, #8
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	6078      	str	r0, [r7, #4]
 80127ba:	460b      	mov	r3, r1
 80127bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d101      	bne.n	80127cc <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80127c8:	2303      	movs	r3, #3
 80127ca:	e014      	b.n	80127f6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	2b03      	cmp	r3, #3
 80127d6:	d10d      	bne.n	80127f4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127de:	6a1b      	ldr	r3, [r3, #32]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d007      	beq.n	80127f4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127ea:	6a1b      	ldr	r3, [r3, #32]
 80127ec:	78fa      	ldrb	r2, [r7, #3]
 80127ee:	4611      	mov	r1, r2
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80127f4:	2300      	movs	r3, #0
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3708      	adds	r7, #8
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}

080127fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80127fe:	b580      	push	{r7, lr}
 8012800:	b082      	sub	sp, #8
 8012802:	af00      	add	r7, sp, #0
 8012804:	6078      	str	r0, [r7, #4]
 8012806:	460b      	mov	r3, r1
 8012808:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012810:	2b00      	cmp	r3, #0
 8012812:	d101      	bne.n	8012818 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012814:	2303      	movs	r3, #3
 8012816:	e014      	b.n	8012842 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801281e:	b2db      	uxtb	r3, r3
 8012820:	2b03      	cmp	r3, #3
 8012822:	d10d      	bne.n	8012840 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801282c:	2b00      	cmp	r3, #0
 801282e:	d007      	beq.n	8012840 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012838:	78fa      	ldrb	r2, [r7, #3]
 801283a:	4611      	mov	r1, r2
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012840:	2300      	movs	r3, #0
}
 8012842:	4618      	mov	r0, r3
 8012844:	3708      	adds	r7, #8
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}

0801284a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801284a:	b480      	push	{r7}
 801284c:	b083      	sub	sp, #12
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012852:	2300      	movs	r3, #0
}
 8012854:	4618      	mov	r0, r3
 8012856:	370c      	adds	r7, #12
 8012858:	46bd      	mov	sp, r7
 801285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285e:	4770      	bx	lr

08012860 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2201      	movs	r2, #1
 801286c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012876:	2b00      	cmp	r3, #0
 8012878:	d009      	beq.n	801288e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	6852      	ldr	r2, [r2, #4]
 8012886:	b2d2      	uxtb	r2, r2
 8012888:	4611      	mov	r1, r2
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	4798      	blx	r3
  }

  return USBD_OK;
 801288e:	2300      	movs	r3, #0
}
 8012890:	4618      	mov	r0, r3
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012898:	b480      	push	{r7}
 801289a:	b087      	sub	sp, #28
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	3301      	adds	r3, #1
 80128ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80128b6:	8a3b      	ldrh	r3, [r7, #16]
 80128b8:	021b      	lsls	r3, r3, #8
 80128ba:	b21a      	sxth	r2, r3
 80128bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80128c0:	4313      	orrs	r3, r2
 80128c2:	b21b      	sxth	r3, r3
 80128c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80128c6:	89fb      	ldrh	r3, [r7, #14]
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	371c      	adds	r7, #28
 80128cc:	46bd      	mov	sp, r7
 80128ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d2:	4770      	bx	lr

080128d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80128de:	2300      	movs	r3, #0
 80128e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	781b      	ldrb	r3, [r3, #0]
 80128e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80128ea:	2b40      	cmp	r3, #64	; 0x40
 80128ec:	d005      	beq.n	80128fa <USBD_StdDevReq+0x26>
 80128ee:	2b40      	cmp	r3, #64	; 0x40
 80128f0:	d853      	bhi.n	801299a <USBD_StdDevReq+0xc6>
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d00b      	beq.n	801290e <USBD_StdDevReq+0x3a>
 80128f6:	2b20      	cmp	r3, #32
 80128f8:	d14f      	bne.n	801299a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012900:	689b      	ldr	r3, [r3, #8]
 8012902:	6839      	ldr	r1, [r7, #0]
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	4798      	blx	r3
 8012908:	4603      	mov	r3, r0
 801290a:	73fb      	strb	r3, [r7, #15]
      break;
 801290c:	e04a      	b.n	80129a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	785b      	ldrb	r3, [r3, #1]
 8012912:	2b09      	cmp	r3, #9
 8012914:	d83b      	bhi.n	801298e <USBD_StdDevReq+0xba>
 8012916:	a201      	add	r2, pc, #4	; (adr r2, 801291c <USBD_StdDevReq+0x48>)
 8012918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801291c:	08012971 	.word	0x08012971
 8012920:	08012985 	.word	0x08012985
 8012924:	0801298f 	.word	0x0801298f
 8012928:	0801297b 	.word	0x0801297b
 801292c:	0801298f 	.word	0x0801298f
 8012930:	0801294f 	.word	0x0801294f
 8012934:	08012945 	.word	0x08012945
 8012938:	0801298f 	.word	0x0801298f
 801293c:	08012967 	.word	0x08012967
 8012940:	08012959 	.word	0x08012959
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012944:	6839      	ldr	r1, [r7, #0]
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f000 f9de 	bl	8012d08 <USBD_GetDescriptor>
          break;
 801294c:	e024      	b.n	8012998 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801294e:	6839      	ldr	r1, [r7, #0]
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 fb6d 	bl	8013030 <USBD_SetAddress>
          break;
 8012956:	e01f      	b.n	8012998 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012958:	6839      	ldr	r1, [r7, #0]
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f000 fbac 	bl	80130b8 <USBD_SetConfig>
 8012960:	4603      	mov	r3, r0
 8012962:	73fb      	strb	r3, [r7, #15]
          break;
 8012964:	e018      	b.n	8012998 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012966:	6839      	ldr	r1, [r7, #0]
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f000 fc4b 	bl	8013204 <USBD_GetConfig>
          break;
 801296e:	e013      	b.n	8012998 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012970:	6839      	ldr	r1, [r7, #0]
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f000 fc7c 	bl	8013270 <USBD_GetStatus>
          break;
 8012978:	e00e      	b.n	8012998 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801297a:	6839      	ldr	r1, [r7, #0]
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f000 fcab 	bl	80132d8 <USBD_SetFeature>
          break;
 8012982:	e009      	b.n	8012998 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012984:	6839      	ldr	r1, [r7, #0]
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f000 fcba 	bl	8013300 <USBD_ClrFeature>
          break;
 801298c:	e004      	b.n	8012998 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801298e:	6839      	ldr	r1, [r7, #0]
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f000 fd11 	bl	80133b8 <USBD_CtlError>
          break;
 8012996:	bf00      	nop
      }
      break;
 8012998:	e004      	b.n	80129a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801299a:	6839      	ldr	r1, [r7, #0]
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 fd0b 	bl	80133b8 <USBD_CtlError>
      break;
 80129a2:	bf00      	nop
  }

  return ret;
 80129a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3710      	adds	r7, #16
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	bf00      	nop

080129b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80129ba:	2300      	movs	r3, #0
 80129bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80129c6:	2b40      	cmp	r3, #64	; 0x40
 80129c8:	d005      	beq.n	80129d6 <USBD_StdItfReq+0x26>
 80129ca:	2b40      	cmp	r3, #64	; 0x40
 80129cc:	d82f      	bhi.n	8012a2e <USBD_StdItfReq+0x7e>
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d001      	beq.n	80129d6 <USBD_StdItfReq+0x26>
 80129d2:	2b20      	cmp	r3, #32
 80129d4:	d12b      	bne.n	8012a2e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	3b01      	subs	r3, #1
 80129e0:	2b02      	cmp	r3, #2
 80129e2:	d81d      	bhi.n	8012a20 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	889b      	ldrh	r3, [r3, #4]
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	2b01      	cmp	r3, #1
 80129ec:	d813      	bhi.n	8012a16 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129f4:	689b      	ldr	r3, [r3, #8]
 80129f6:	6839      	ldr	r1, [r7, #0]
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	4798      	blx	r3
 80129fc:	4603      	mov	r3, r0
 80129fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	88db      	ldrh	r3, [r3, #6]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d110      	bne.n	8012a2a <USBD_StdItfReq+0x7a>
 8012a08:	7bfb      	ldrb	r3, [r7, #15]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d10d      	bne.n	8012a2a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 fd80 	bl	8013514 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012a14:	e009      	b.n	8012a2a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8012a16:	6839      	ldr	r1, [r7, #0]
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f000 fccd 	bl	80133b8 <USBD_CtlError>
          break;
 8012a1e:	e004      	b.n	8012a2a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012a20:	6839      	ldr	r1, [r7, #0]
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f000 fcc8 	bl	80133b8 <USBD_CtlError>
          break;
 8012a28:	e000      	b.n	8012a2c <USBD_StdItfReq+0x7c>
          break;
 8012a2a:	bf00      	nop
      }
      break;
 8012a2c:	e004      	b.n	8012a38 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8012a2e:	6839      	ldr	r1, [r7, #0]
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f000 fcc1 	bl	80133b8 <USBD_CtlError>
      break;
 8012a36:	bf00      	nop
  }

  return ret;
 8012a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3710      	adds	r7, #16
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}

08012a42 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a42:	b580      	push	{r7, lr}
 8012a44:	b084      	sub	sp, #16
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	6078      	str	r0, [r7, #4]
 8012a4a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	889b      	ldrh	r3, [r3, #4]
 8012a54:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012a5e:	2b40      	cmp	r3, #64	; 0x40
 8012a60:	d007      	beq.n	8012a72 <USBD_StdEPReq+0x30>
 8012a62:	2b40      	cmp	r3, #64	; 0x40
 8012a64:	f200 8145 	bhi.w	8012cf2 <USBD_StdEPReq+0x2b0>
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d00c      	beq.n	8012a86 <USBD_StdEPReq+0x44>
 8012a6c:	2b20      	cmp	r3, #32
 8012a6e:	f040 8140 	bne.w	8012cf2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a78:	689b      	ldr	r3, [r3, #8]
 8012a7a:	6839      	ldr	r1, [r7, #0]
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	4798      	blx	r3
 8012a80:	4603      	mov	r3, r0
 8012a82:	73fb      	strb	r3, [r7, #15]
      break;
 8012a84:	e13a      	b.n	8012cfc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	785b      	ldrb	r3, [r3, #1]
 8012a8a:	2b03      	cmp	r3, #3
 8012a8c:	d007      	beq.n	8012a9e <USBD_StdEPReq+0x5c>
 8012a8e:	2b03      	cmp	r3, #3
 8012a90:	f300 8129 	bgt.w	8012ce6 <USBD_StdEPReq+0x2a4>
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d07f      	beq.n	8012b98 <USBD_StdEPReq+0x156>
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d03c      	beq.n	8012b16 <USBD_StdEPReq+0xd4>
 8012a9c:	e123      	b.n	8012ce6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012aa4:	b2db      	uxtb	r3, r3
 8012aa6:	2b02      	cmp	r3, #2
 8012aa8:	d002      	beq.n	8012ab0 <USBD_StdEPReq+0x6e>
 8012aaa:	2b03      	cmp	r3, #3
 8012aac:	d016      	beq.n	8012adc <USBD_StdEPReq+0x9a>
 8012aae:	e02c      	b.n	8012b0a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012ab0:	7bbb      	ldrb	r3, [r7, #14]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d00d      	beq.n	8012ad2 <USBD_StdEPReq+0x90>
 8012ab6:	7bbb      	ldrb	r3, [r7, #14]
 8012ab8:	2b80      	cmp	r3, #128	; 0x80
 8012aba:	d00a      	beq.n	8012ad2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012abc:	7bbb      	ldrb	r3, [r7, #14]
 8012abe:	4619      	mov	r1, r3
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f004 f844 	bl	8016b4e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012ac6:	2180      	movs	r1, #128	; 0x80
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f004 f840 	bl	8016b4e <USBD_LL_StallEP>
 8012ace:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012ad0:	e020      	b.n	8012b14 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8012ad2:	6839      	ldr	r1, [r7, #0]
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f000 fc6f 	bl	80133b8 <USBD_CtlError>
              break;
 8012ada:	e01b      	b.n	8012b14 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	885b      	ldrh	r3, [r3, #2]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d10e      	bne.n	8012b02 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012ae4:	7bbb      	ldrb	r3, [r7, #14]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d00b      	beq.n	8012b02 <USBD_StdEPReq+0xc0>
 8012aea:	7bbb      	ldrb	r3, [r7, #14]
 8012aec:	2b80      	cmp	r3, #128	; 0x80
 8012aee:	d008      	beq.n	8012b02 <USBD_StdEPReq+0xc0>
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	88db      	ldrh	r3, [r3, #6]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d104      	bne.n	8012b02 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012af8:	7bbb      	ldrb	r3, [r7, #14]
 8012afa:	4619      	mov	r1, r3
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f004 f826 	bl	8016b4e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f000 fd06 	bl	8013514 <USBD_CtlSendStatus>

              break;
 8012b08:	e004      	b.n	8012b14 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8012b0a:	6839      	ldr	r1, [r7, #0]
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f000 fc53 	bl	80133b8 <USBD_CtlError>
              break;
 8012b12:	bf00      	nop
          }
          break;
 8012b14:	e0ec      	b.n	8012cf0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b1c:	b2db      	uxtb	r3, r3
 8012b1e:	2b02      	cmp	r3, #2
 8012b20:	d002      	beq.n	8012b28 <USBD_StdEPReq+0xe6>
 8012b22:	2b03      	cmp	r3, #3
 8012b24:	d016      	beq.n	8012b54 <USBD_StdEPReq+0x112>
 8012b26:	e030      	b.n	8012b8a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012b28:	7bbb      	ldrb	r3, [r7, #14]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00d      	beq.n	8012b4a <USBD_StdEPReq+0x108>
 8012b2e:	7bbb      	ldrb	r3, [r7, #14]
 8012b30:	2b80      	cmp	r3, #128	; 0x80
 8012b32:	d00a      	beq.n	8012b4a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012b34:	7bbb      	ldrb	r3, [r7, #14]
 8012b36:	4619      	mov	r1, r3
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f004 f808 	bl	8016b4e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012b3e:	2180      	movs	r1, #128	; 0x80
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f004 f804 	bl	8016b4e <USBD_LL_StallEP>
 8012b46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012b48:	e025      	b.n	8012b96 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8012b4a:	6839      	ldr	r1, [r7, #0]
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f000 fc33 	bl	80133b8 <USBD_CtlError>
              break;
 8012b52:	e020      	b.n	8012b96 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	885b      	ldrh	r3, [r3, #2]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d11b      	bne.n	8012b94 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012b5c:	7bbb      	ldrb	r3, [r7, #14]
 8012b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d004      	beq.n	8012b70 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012b66:	7bbb      	ldrb	r3, [r7, #14]
 8012b68:	4619      	mov	r1, r3
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f004 f80e 	bl	8016b8c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f000 fccf 	bl	8013514 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b7c:	689b      	ldr	r3, [r3, #8]
 8012b7e:	6839      	ldr	r1, [r7, #0]
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	4798      	blx	r3
 8012b84:	4603      	mov	r3, r0
 8012b86:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012b88:	e004      	b.n	8012b94 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8012b8a:	6839      	ldr	r1, [r7, #0]
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f000 fc13 	bl	80133b8 <USBD_CtlError>
              break;
 8012b92:	e000      	b.n	8012b96 <USBD_StdEPReq+0x154>
              break;
 8012b94:	bf00      	nop
          }
          break;
 8012b96:	e0ab      	b.n	8012cf0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b9e:	b2db      	uxtb	r3, r3
 8012ba0:	2b02      	cmp	r3, #2
 8012ba2:	d002      	beq.n	8012baa <USBD_StdEPReq+0x168>
 8012ba4:	2b03      	cmp	r3, #3
 8012ba6:	d032      	beq.n	8012c0e <USBD_StdEPReq+0x1cc>
 8012ba8:	e097      	b.n	8012cda <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012baa:	7bbb      	ldrb	r3, [r7, #14]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d007      	beq.n	8012bc0 <USBD_StdEPReq+0x17e>
 8012bb0:	7bbb      	ldrb	r3, [r7, #14]
 8012bb2:	2b80      	cmp	r3, #128	; 0x80
 8012bb4:	d004      	beq.n	8012bc0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8012bb6:	6839      	ldr	r1, [r7, #0]
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f000 fbfd 	bl	80133b8 <USBD_CtlError>
                break;
 8012bbe:	e091      	b.n	8012ce4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	da0b      	bge.n	8012be0 <USBD_StdEPReq+0x19e>
 8012bc8:	7bbb      	ldrb	r3, [r7, #14]
 8012bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012bce:	4613      	mov	r3, r2
 8012bd0:	009b      	lsls	r3, r3, #2
 8012bd2:	4413      	add	r3, r2
 8012bd4:	009b      	lsls	r3, r3, #2
 8012bd6:	3310      	adds	r3, #16
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	4413      	add	r3, r2
 8012bdc:	3304      	adds	r3, #4
 8012bde:	e00b      	b.n	8012bf8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012be0:	7bbb      	ldrb	r3, [r7, #14]
 8012be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012be6:	4613      	mov	r3, r2
 8012be8:	009b      	lsls	r3, r3, #2
 8012bea:	4413      	add	r3, r2
 8012bec:	009b      	lsls	r3, r3, #2
 8012bee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	4413      	add	r3, r2
 8012bf6:	3304      	adds	r3, #4
 8012bf8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	2202      	movs	r2, #2
 8012c04:	4619      	mov	r1, r3
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f000 fc47 	bl	801349a <USBD_CtlSendData>
              break;
 8012c0c:	e06a      	b.n	8012ce4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012c0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	da11      	bge.n	8012c3a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012c16:	7bbb      	ldrb	r3, [r7, #14]
 8012c18:	f003 020f 	and.w	r2, r3, #15
 8012c1c:	6879      	ldr	r1, [r7, #4]
 8012c1e:	4613      	mov	r3, r2
 8012c20:	009b      	lsls	r3, r3, #2
 8012c22:	4413      	add	r3, r2
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	440b      	add	r3, r1
 8012c28:	3324      	adds	r3, #36	; 0x24
 8012c2a:	881b      	ldrh	r3, [r3, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d117      	bne.n	8012c60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012c30:	6839      	ldr	r1, [r7, #0]
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f000 fbc0 	bl	80133b8 <USBD_CtlError>
                  break;
 8012c38:	e054      	b.n	8012ce4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012c3a:	7bbb      	ldrb	r3, [r7, #14]
 8012c3c:	f003 020f 	and.w	r2, r3, #15
 8012c40:	6879      	ldr	r1, [r7, #4]
 8012c42:	4613      	mov	r3, r2
 8012c44:	009b      	lsls	r3, r3, #2
 8012c46:	4413      	add	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	440b      	add	r3, r1
 8012c4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012c50:	881b      	ldrh	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d104      	bne.n	8012c60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012c56:	6839      	ldr	r1, [r7, #0]
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 fbad 	bl	80133b8 <USBD_CtlError>
                  break;
 8012c5e:	e041      	b.n	8012ce4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	da0b      	bge.n	8012c80 <USBD_StdEPReq+0x23e>
 8012c68:	7bbb      	ldrb	r3, [r7, #14]
 8012c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012c6e:	4613      	mov	r3, r2
 8012c70:	009b      	lsls	r3, r3, #2
 8012c72:	4413      	add	r3, r2
 8012c74:	009b      	lsls	r3, r3, #2
 8012c76:	3310      	adds	r3, #16
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	4413      	add	r3, r2
 8012c7c:	3304      	adds	r3, #4
 8012c7e:	e00b      	b.n	8012c98 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012c80:	7bbb      	ldrb	r3, [r7, #14]
 8012c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012c86:	4613      	mov	r3, r2
 8012c88:	009b      	lsls	r3, r3, #2
 8012c8a:	4413      	add	r3, r2
 8012c8c:	009b      	lsls	r3, r3, #2
 8012c8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012c92:	687a      	ldr	r2, [r7, #4]
 8012c94:	4413      	add	r3, r2
 8012c96:	3304      	adds	r3, #4
 8012c98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012c9a:	7bbb      	ldrb	r3, [r7, #14]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d002      	beq.n	8012ca6 <USBD_StdEPReq+0x264>
 8012ca0:	7bbb      	ldrb	r3, [r7, #14]
 8012ca2:	2b80      	cmp	r3, #128	; 0x80
 8012ca4:	d103      	bne.n	8012cae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	601a      	str	r2, [r3, #0]
 8012cac:	e00e      	b.n	8012ccc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012cae:	7bbb      	ldrb	r3, [r7, #14]
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f003 ff89 	bl	8016bca <USBD_LL_IsStallEP>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d003      	beq.n	8012cc6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	601a      	str	r2, [r3, #0]
 8012cc4:	e002      	b.n	8012ccc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	2202      	movs	r2, #2
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f000 fbe1 	bl	801349a <USBD_CtlSendData>
              break;
 8012cd8:	e004      	b.n	8012ce4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8012cda:	6839      	ldr	r1, [r7, #0]
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f000 fb6b 	bl	80133b8 <USBD_CtlError>
              break;
 8012ce2:	bf00      	nop
          }
          break;
 8012ce4:	e004      	b.n	8012cf0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012ce6:	6839      	ldr	r1, [r7, #0]
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f000 fb65 	bl	80133b8 <USBD_CtlError>
          break;
 8012cee:	bf00      	nop
      }
      break;
 8012cf0:	e004      	b.n	8012cfc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8012cf2:	6839      	ldr	r1, [r7, #0]
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f000 fb5f 	bl	80133b8 <USBD_CtlError>
      break;
 8012cfa:	bf00      	nop
  }

  return ret;
 8012cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3710      	adds	r7, #16
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
	...

08012d08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012d12:	2300      	movs	r3, #0
 8012d14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012d16:	2300      	movs	r3, #0
 8012d18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	885b      	ldrh	r3, [r3, #2]
 8012d22:	0a1b      	lsrs	r3, r3, #8
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	3b01      	subs	r3, #1
 8012d28:	2b0e      	cmp	r3, #14
 8012d2a:	f200 8152 	bhi.w	8012fd2 <USBD_GetDescriptor+0x2ca>
 8012d2e:	a201      	add	r2, pc, #4	; (adr r2, 8012d34 <USBD_GetDescriptor+0x2c>)
 8012d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d34:	08012da5 	.word	0x08012da5
 8012d38:	08012dbd 	.word	0x08012dbd
 8012d3c:	08012dfd 	.word	0x08012dfd
 8012d40:	08012fd3 	.word	0x08012fd3
 8012d44:	08012fd3 	.word	0x08012fd3
 8012d48:	08012f73 	.word	0x08012f73
 8012d4c:	08012f9f 	.word	0x08012f9f
 8012d50:	08012fd3 	.word	0x08012fd3
 8012d54:	08012fd3 	.word	0x08012fd3
 8012d58:	08012fd3 	.word	0x08012fd3
 8012d5c:	08012fd3 	.word	0x08012fd3
 8012d60:	08012fd3 	.word	0x08012fd3
 8012d64:	08012fd3 	.word	0x08012fd3
 8012d68:	08012fd3 	.word	0x08012fd3
 8012d6c:	08012d71 	.word	0x08012d71
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d76:	69db      	ldr	r3, [r3, #28]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d00b      	beq.n	8012d94 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d82:	69db      	ldr	r3, [r3, #28]
 8012d84:	687a      	ldr	r2, [r7, #4]
 8012d86:	7c12      	ldrb	r2, [r2, #16]
 8012d88:	f107 0108 	add.w	r1, r7, #8
 8012d8c:	4610      	mov	r0, r2
 8012d8e:	4798      	blx	r3
 8012d90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d92:	e126      	b.n	8012fe2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d94:	6839      	ldr	r1, [r7, #0]
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	f000 fb0e 	bl	80133b8 <USBD_CtlError>
        err++;
 8012d9c:	7afb      	ldrb	r3, [r7, #11]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	72fb      	strb	r3, [r7, #11]
      break;
 8012da2:	e11e      	b.n	8012fe2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	7c12      	ldrb	r2, [r2, #16]
 8012db0:	f107 0108 	add.w	r1, r7, #8
 8012db4:	4610      	mov	r0, r2
 8012db6:	4798      	blx	r3
 8012db8:	60f8      	str	r0, [r7, #12]
      break;
 8012dba:	e112      	b.n	8012fe2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	7c1b      	ldrb	r3, [r3, #16]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d10d      	bne.n	8012de0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dcc:	f107 0208 	add.w	r2, r7, #8
 8012dd0:	4610      	mov	r0, r2
 8012dd2:	4798      	blx	r3
 8012dd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	3301      	adds	r3, #1
 8012dda:	2202      	movs	r2, #2
 8012ddc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012dde:	e100      	b.n	8012fe2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012de8:	f107 0208 	add.w	r2, r7, #8
 8012dec:	4610      	mov	r0, r2
 8012dee:	4798      	blx	r3
 8012df0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	3301      	adds	r3, #1
 8012df6:	2202      	movs	r2, #2
 8012df8:	701a      	strb	r2, [r3, #0]
      break;
 8012dfa:	e0f2      	b.n	8012fe2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	885b      	ldrh	r3, [r3, #2]
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	2b05      	cmp	r3, #5
 8012e04:	f200 80ac 	bhi.w	8012f60 <USBD_GetDescriptor+0x258>
 8012e08:	a201      	add	r2, pc, #4	; (adr r2, 8012e10 <USBD_GetDescriptor+0x108>)
 8012e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e0e:	bf00      	nop
 8012e10:	08012e29 	.word	0x08012e29
 8012e14:	08012e5d 	.word	0x08012e5d
 8012e18:	08012e91 	.word	0x08012e91
 8012e1c:	08012ec5 	.word	0x08012ec5
 8012e20:	08012ef9 	.word	0x08012ef9
 8012e24:	08012f2d 	.word	0x08012f2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e2e:	685b      	ldr	r3, [r3, #4]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d00b      	beq.n	8012e4c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	687a      	ldr	r2, [r7, #4]
 8012e3e:	7c12      	ldrb	r2, [r2, #16]
 8012e40:	f107 0108 	add.w	r1, r7, #8
 8012e44:	4610      	mov	r0, r2
 8012e46:	4798      	blx	r3
 8012e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012e4a:	e091      	b.n	8012f70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012e4c:	6839      	ldr	r1, [r7, #0]
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f000 fab2 	bl	80133b8 <USBD_CtlError>
            err++;
 8012e54:	7afb      	ldrb	r3, [r7, #11]
 8012e56:	3301      	adds	r3, #1
 8012e58:	72fb      	strb	r3, [r7, #11]
          break;
 8012e5a:	e089      	b.n	8012f70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e62:	689b      	ldr	r3, [r3, #8]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d00b      	beq.n	8012e80 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e6e:	689b      	ldr	r3, [r3, #8]
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	7c12      	ldrb	r2, [r2, #16]
 8012e74:	f107 0108 	add.w	r1, r7, #8
 8012e78:	4610      	mov	r0, r2
 8012e7a:	4798      	blx	r3
 8012e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012e7e:	e077      	b.n	8012f70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012e80:	6839      	ldr	r1, [r7, #0]
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f000 fa98 	bl	80133b8 <USBD_CtlError>
            err++;
 8012e88:	7afb      	ldrb	r3, [r7, #11]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8012e8e:	e06f      	b.n	8012f70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d00b      	beq.n	8012eb4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ea2:	68db      	ldr	r3, [r3, #12]
 8012ea4:	687a      	ldr	r2, [r7, #4]
 8012ea6:	7c12      	ldrb	r2, [r2, #16]
 8012ea8:	f107 0108 	add.w	r1, r7, #8
 8012eac:	4610      	mov	r0, r2
 8012eae:	4798      	blx	r3
 8012eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012eb2:	e05d      	b.n	8012f70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012eb4:	6839      	ldr	r1, [r7, #0]
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 fa7e 	bl	80133b8 <USBD_CtlError>
            err++;
 8012ebc:	7afb      	ldrb	r3, [r7, #11]
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8012ec2:	e055      	b.n	8012f70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012eca:	691b      	ldr	r3, [r3, #16]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d00b      	beq.n	8012ee8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ed6:	691b      	ldr	r3, [r3, #16]
 8012ed8:	687a      	ldr	r2, [r7, #4]
 8012eda:	7c12      	ldrb	r2, [r2, #16]
 8012edc:	f107 0108 	add.w	r1, r7, #8
 8012ee0:	4610      	mov	r0, r2
 8012ee2:	4798      	blx	r3
 8012ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ee6:	e043      	b.n	8012f70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012ee8:	6839      	ldr	r1, [r7, #0]
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f000 fa64 	bl	80133b8 <USBD_CtlError>
            err++;
 8012ef0:	7afb      	ldrb	r3, [r7, #11]
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8012ef6:	e03b      	b.n	8012f70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012efe:	695b      	ldr	r3, [r3, #20]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d00b      	beq.n	8012f1c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012f0a:	695b      	ldr	r3, [r3, #20]
 8012f0c:	687a      	ldr	r2, [r7, #4]
 8012f0e:	7c12      	ldrb	r2, [r2, #16]
 8012f10:	f107 0108 	add.w	r1, r7, #8
 8012f14:	4610      	mov	r0, r2
 8012f16:	4798      	blx	r3
 8012f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012f1a:	e029      	b.n	8012f70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012f1c:	6839      	ldr	r1, [r7, #0]
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 fa4a 	bl	80133b8 <USBD_CtlError>
            err++;
 8012f24:	7afb      	ldrb	r3, [r7, #11]
 8012f26:	3301      	adds	r3, #1
 8012f28:	72fb      	strb	r3, [r7, #11]
          break;
 8012f2a:	e021      	b.n	8012f70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012f32:	699b      	ldr	r3, [r3, #24]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d00b      	beq.n	8012f50 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012f3e:	699b      	ldr	r3, [r3, #24]
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	7c12      	ldrb	r2, [r2, #16]
 8012f44:	f107 0108 	add.w	r1, r7, #8
 8012f48:	4610      	mov	r0, r2
 8012f4a:	4798      	blx	r3
 8012f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012f4e:	e00f      	b.n	8012f70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012f50:	6839      	ldr	r1, [r7, #0]
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f000 fa30 	bl	80133b8 <USBD_CtlError>
            err++;
 8012f58:	7afb      	ldrb	r3, [r7, #11]
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8012f5e:	e007      	b.n	8012f70 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012f60:	6839      	ldr	r1, [r7, #0]
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 fa28 	bl	80133b8 <USBD_CtlError>
          err++;
 8012f68:	7afb      	ldrb	r3, [r7, #11]
 8012f6a:	3301      	adds	r3, #1
 8012f6c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012f6e:	bf00      	nop
      }
      break;
 8012f70:	e037      	b.n	8012fe2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	7c1b      	ldrb	r3, [r3, #16]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d109      	bne.n	8012f8e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f82:	f107 0208 	add.w	r2, r7, #8
 8012f86:	4610      	mov	r0, r2
 8012f88:	4798      	blx	r3
 8012f8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012f8c:	e029      	b.n	8012fe2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012f8e:	6839      	ldr	r1, [r7, #0]
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f000 fa11 	bl	80133b8 <USBD_CtlError>
        err++;
 8012f96:	7afb      	ldrb	r3, [r7, #11]
 8012f98:	3301      	adds	r3, #1
 8012f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8012f9c:	e021      	b.n	8012fe2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	7c1b      	ldrb	r3, [r3, #16]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d10d      	bne.n	8012fc2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fae:	f107 0208 	add.w	r2, r7, #8
 8012fb2:	4610      	mov	r0, r2
 8012fb4:	4798      	blx	r3
 8012fb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	3301      	adds	r3, #1
 8012fbc:	2207      	movs	r2, #7
 8012fbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012fc0:	e00f      	b.n	8012fe2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012fc2:	6839      	ldr	r1, [r7, #0]
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f000 f9f7 	bl	80133b8 <USBD_CtlError>
        err++;
 8012fca:	7afb      	ldrb	r3, [r7, #11]
 8012fcc:	3301      	adds	r3, #1
 8012fce:	72fb      	strb	r3, [r7, #11]
      break;
 8012fd0:	e007      	b.n	8012fe2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012fd2:	6839      	ldr	r1, [r7, #0]
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f000 f9ef 	bl	80133b8 <USBD_CtlError>
      err++;
 8012fda:	7afb      	ldrb	r3, [r7, #11]
 8012fdc:	3301      	adds	r3, #1
 8012fde:	72fb      	strb	r3, [r7, #11]
      break;
 8012fe0:	bf00      	nop
  }

  if (err != 0U)
 8012fe2:	7afb      	ldrb	r3, [r7, #11]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d11e      	bne.n	8013026 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	88db      	ldrh	r3, [r3, #6]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d016      	beq.n	801301e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012ff0:	893b      	ldrh	r3, [r7, #8]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d00e      	beq.n	8013014 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	88da      	ldrh	r2, [r3, #6]
 8012ffa:	893b      	ldrh	r3, [r7, #8]
 8012ffc:	4293      	cmp	r3, r2
 8012ffe:	bf28      	it	cs
 8013000:	4613      	movcs	r3, r2
 8013002:	b29b      	uxth	r3, r3
 8013004:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013006:	893b      	ldrh	r3, [r7, #8]
 8013008:	461a      	mov	r2, r3
 801300a:	68f9      	ldr	r1, [r7, #12]
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f000 fa44 	bl	801349a <USBD_CtlSendData>
 8013012:	e009      	b.n	8013028 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013014:	6839      	ldr	r1, [r7, #0]
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f000 f9ce 	bl	80133b8 <USBD_CtlError>
 801301c:	e004      	b.n	8013028 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f000 fa78 	bl	8013514 <USBD_CtlSendStatus>
 8013024:	e000      	b.n	8013028 <USBD_GetDescriptor+0x320>
    return;
 8013026:	bf00      	nop
  }
}
 8013028:	3710      	adds	r7, #16
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop

08013030 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	889b      	ldrh	r3, [r3, #4]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d131      	bne.n	80130a6 <USBD_SetAddress+0x76>
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	88db      	ldrh	r3, [r3, #6]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d12d      	bne.n	80130a6 <USBD_SetAddress+0x76>
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	885b      	ldrh	r3, [r3, #2]
 801304e:	2b7f      	cmp	r3, #127	; 0x7f
 8013050:	d829      	bhi.n	80130a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	885b      	ldrh	r3, [r3, #2]
 8013056:	b2db      	uxtb	r3, r3
 8013058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801305c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013064:	b2db      	uxtb	r3, r3
 8013066:	2b03      	cmp	r3, #3
 8013068:	d104      	bne.n	8013074 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801306a:	6839      	ldr	r1, [r7, #0]
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f000 f9a3 	bl	80133b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013072:	e01d      	b.n	80130b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	7bfa      	ldrb	r2, [r7, #15]
 8013078:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801307c:	7bfb      	ldrb	r3, [r7, #15]
 801307e:	4619      	mov	r1, r3
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f003 fdce 	bl	8016c22 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f000 fa44 	bl	8013514 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801308c:	7bfb      	ldrb	r3, [r7, #15]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d004      	beq.n	801309c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2202      	movs	r2, #2
 8013096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801309a:	e009      	b.n	80130b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2201      	movs	r2, #1
 80130a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130a4:	e004      	b.n	80130b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80130a6:	6839      	ldr	r1, [r7, #0]
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f000 f985 	bl	80133b8 <USBD_CtlError>
  }
}
 80130ae:	bf00      	nop
 80130b0:	bf00      	nop
 80130b2:	3710      	adds	r7, #16
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}

080130b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b084      	sub	sp, #16
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80130c2:	2300      	movs	r3, #0
 80130c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	885b      	ldrh	r3, [r3, #2]
 80130ca:	b2da      	uxtb	r2, r3
 80130cc:	4b4c      	ldr	r3, [pc, #304]	; (8013200 <USBD_SetConfig+0x148>)
 80130ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80130d0:	4b4b      	ldr	r3, [pc, #300]	; (8013200 <USBD_SetConfig+0x148>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	2b01      	cmp	r3, #1
 80130d6:	d905      	bls.n	80130e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80130d8:	6839      	ldr	r1, [r7, #0]
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f000 f96c 	bl	80133b8 <USBD_CtlError>
    return USBD_FAIL;
 80130e0:	2303      	movs	r3, #3
 80130e2:	e088      	b.n	80131f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130ea:	b2db      	uxtb	r3, r3
 80130ec:	2b02      	cmp	r3, #2
 80130ee:	d002      	beq.n	80130f6 <USBD_SetConfig+0x3e>
 80130f0:	2b03      	cmp	r3, #3
 80130f2:	d025      	beq.n	8013140 <USBD_SetConfig+0x88>
 80130f4:	e071      	b.n	80131da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80130f6:	4b42      	ldr	r3, [pc, #264]	; (8013200 <USBD_SetConfig+0x148>)
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d01c      	beq.n	8013138 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80130fe:	4b40      	ldr	r3, [pc, #256]	; (8013200 <USBD_SetConfig+0x148>)
 8013100:	781b      	ldrb	r3, [r3, #0]
 8013102:	461a      	mov	r2, r3
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013108:	4b3d      	ldr	r3, [pc, #244]	; (8013200 <USBD_SetConfig+0x148>)
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	4619      	mov	r1, r3
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7ff f91f 	bl	8012352 <USBD_SetClassConfig>
 8013114:	4603      	mov	r3, r0
 8013116:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013118:	7bfb      	ldrb	r3, [r7, #15]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d004      	beq.n	8013128 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801311e:	6839      	ldr	r1, [r7, #0]
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f000 f949 	bl	80133b8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013126:	e065      	b.n	80131f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f000 f9f3 	bl	8013514 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2203      	movs	r2, #3
 8013132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013136:	e05d      	b.n	80131f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 f9eb 	bl	8013514 <USBD_CtlSendStatus>
      break;
 801313e:	e059      	b.n	80131f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013140:	4b2f      	ldr	r3, [pc, #188]	; (8013200 <USBD_SetConfig+0x148>)
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d112      	bne.n	801316e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2202      	movs	r2, #2
 801314c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013150:	4b2b      	ldr	r3, [pc, #172]	; (8013200 <USBD_SetConfig+0x148>)
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	461a      	mov	r2, r3
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801315a:	4b29      	ldr	r3, [pc, #164]	; (8013200 <USBD_SetConfig+0x148>)
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	4619      	mov	r1, r3
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f7ff f912 	bl	801238a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f000 f9d4 	bl	8013514 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801316c:	e042      	b.n	80131f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801316e:	4b24      	ldr	r3, [pc, #144]	; (8013200 <USBD_SetConfig+0x148>)
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	461a      	mov	r2, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	685b      	ldr	r3, [r3, #4]
 8013178:	429a      	cmp	r2, r3
 801317a:	d02a      	beq.n	80131d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	b2db      	uxtb	r3, r3
 8013182:	4619      	mov	r1, r3
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f7ff f900 	bl	801238a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801318a:	4b1d      	ldr	r3, [pc, #116]	; (8013200 <USBD_SetConfig+0x148>)
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	461a      	mov	r2, r3
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013194:	4b1a      	ldr	r3, [pc, #104]	; (8013200 <USBD_SetConfig+0x148>)
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	4619      	mov	r1, r3
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7ff f8d9 	bl	8012352 <USBD_SetClassConfig>
 80131a0:	4603      	mov	r3, r0
 80131a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80131a4:	7bfb      	ldrb	r3, [r7, #15]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d00f      	beq.n	80131ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80131aa:	6839      	ldr	r1, [r7, #0]
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f000 f903 	bl	80133b8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	b2db      	uxtb	r3, r3
 80131b8:	4619      	mov	r1, r3
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f7ff f8e5 	bl	801238a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2202      	movs	r2, #2
 80131c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80131c8:	e014      	b.n	80131f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f000 f9a2 	bl	8013514 <USBD_CtlSendStatus>
      break;
 80131d0:	e010      	b.n	80131f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f000 f99e 	bl	8013514 <USBD_CtlSendStatus>
      break;
 80131d8:	e00c      	b.n	80131f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80131da:	6839      	ldr	r1, [r7, #0]
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f000 f8eb 	bl	80133b8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80131e2:	4b07      	ldr	r3, [pc, #28]	; (8013200 <USBD_SetConfig+0x148>)
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	4619      	mov	r1, r3
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f7ff f8ce 	bl	801238a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80131ee:	2303      	movs	r3, #3
 80131f0:	73fb      	strb	r3, [r7, #15]
      break;
 80131f2:	bf00      	nop
  }

  return ret;
 80131f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3710      	adds	r7, #16
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}
 80131fe:	bf00      	nop
 8013200:	20000200 	.word	0x20000200

08013204 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	88db      	ldrh	r3, [r3, #6]
 8013212:	2b01      	cmp	r3, #1
 8013214:	d004      	beq.n	8013220 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013216:	6839      	ldr	r1, [r7, #0]
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f000 f8cd 	bl	80133b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801321e:	e023      	b.n	8013268 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013226:	b2db      	uxtb	r3, r3
 8013228:	2b02      	cmp	r3, #2
 801322a:	dc02      	bgt.n	8013232 <USBD_GetConfig+0x2e>
 801322c:	2b00      	cmp	r3, #0
 801322e:	dc03      	bgt.n	8013238 <USBD_GetConfig+0x34>
 8013230:	e015      	b.n	801325e <USBD_GetConfig+0x5a>
 8013232:	2b03      	cmp	r3, #3
 8013234:	d00b      	beq.n	801324e <USBD_GetConfig+0x4a>
 8013236:	e012      	b.n	801325e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2200      	movs	r2, #0
 801323c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	3308      	adds	r3, #8
 8013242:	2201      	movs	r2, #1
 8013244:	4619      	mov	r1, r3
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f000 f927 	bl	801349a <USBD_CtlSendData>
        break;
 801324c:	e00c      	b.n	8013268 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	3304      	adds	r3, #4
 8013252:	2201      	movs	r2, #1
 8013254:	4619      	mov	r1, r3
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f000 f91f 	bl	801349a <USBD_CtlSendData>
        break;
 801325c:	e004      	b.n	8013268 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801325e:	6839      	ldr	r1, [r7, #0]
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f000 f8a9 	bl	80133b8 <USBD_CtlError>
        break;
 8013266:	bf00      	nop
}
 8013268:	bf00      	nop
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013280:	b2db      	uxtb	r3, r3
 8013282:	3b01      	subs	r3, #1
 8013284:	2b02      	cmp	r3, #2
 8013286:	d81e      	bhi.n	80132c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	88db      	ldrh	r3, [r3, #6]
 801328c:	2b02      	cmp	r3, #2
 801328e:	d004      	beq.n	801329a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013290:	6839      	ldr	r1, [r7, #0]
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f000 f890 	bl	80133b8 <USBD_CtlError>
        break;
 8013298:	e01a      	b.n	80132d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2201      	movs	r2, #1
 801329e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d005      	beq.n	80132b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	68db      	ldr	r3, [r3, #12]
 80132ae:	f043 0202 	orr.w	r2, r3, #2
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	330c      	adds	r3, #12
 80132ba:	2202      	movs	r2, #2
 80132bc:	4619      	mov	r1, r3
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f000 f8eb 	bl	801349a <USBD_CtlSendData>
      break;
 80132c4:	e004      	b.n	80132d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80132c6:	6839      	ldr	r1, [r7, #0]
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f000 f875 	bl	80133b8 <USBD_CtlError>
      break;
 80132ce:	bf00      	nop
  }
}
 80132d0:	bf00      	nop
 80132d2:	3708      	adds	r7, #8
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b082      	sub	sp, #8
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	885b      	ldrh	r3, [r3, #2]
 80132e6:	2b01      	cmp	r3, #1
 80132e8:	d106      	bne.n	80132f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2201      	movs	r2, #1
 80132ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 f90e 	bl	8013514 <USBD_CtlSendStatus>
  }
}
 80132f8:	bf00      	nop
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013310:	b2db      	uxtb	r3, r3
 8013312:	3b01      	subs	r3, #1
 8013314:	2b02      	cmp	r3, #2
 8013316:	d80b      	bhi.n	8013330 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	885b      	ldrh	r3, [r3, #2]
 801331c:	2b01      	cmp	r3, #1
 801331e:	d10c      	bne.n	801333a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2200      	movs	r2, #0
 8013324:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f000 f8f3 	bl	8013514 <USBD_CtlSendStatus>
      }
      break;
 801332e:	e004      	b.n	801333a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013330:	6839      	ldr	r1, [r7, #0]
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f000 f840 	bl	80133b8 <USBD_CtlError>
      break;
 8013338:	e000      	b.n	801333c <USBD_ClrFeature+0x3c>
      break;
 801333a:	bf00      	nop
  }
}
 801333c:	bf00      	nop
 801333e:	3708      	adds	r7, #8
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}

08013344 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	781a      	ldrb	r2, [r3, #0]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	3301      	adds	r3, #1
 801335e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	781a      	ldrb	r2, [r3, #0]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	3301      	adds	r3, #1
 801336c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801336e:	68f8      	ldr	r0, [r7, #12]
 8013370:	f7ff fa92 	bl	8012898 <SWAPBYTE>
 8013374:	4603      	mov	r3, r0
 8013376:	461a      	mov	r2, r3
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	3301      	adds	r3, #1
 8013380:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	3301      	adds	r3, #1
 8013386:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013388:	68f8      	ldr	r0, [r7, #12]
 801338a:	f7ff fa85 	bl	8012898 <SWAPBYTE>
 801338e:	4603      	mov	r3, r0
 8013390:	461a      	mov	r2, r3
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	3301      	adds	r3, #1
 801339a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	3301      	adds	r3, #1
 80133a0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80133a2:	68f8      	ldr	r0, [r7, #12]
 80133a4:	f7ff fa78 	bl	8012898 <SWAPBYTE>
 80133a8:	4603      	mov	r3, r0
 80133aa:	461a      	mov	r2, r3
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	80da      	strh	r2, [r3, #6]
}
 80133b0:	bf00      	nop
 80133b2:	3710      	adds	r7, #16
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b082      	sub	sp, #8
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80133c2:	2180      	movs	r1, #128	; 0x80
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f003 fbc2 	bl	8016b4e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80133ca:	2100      	movs	r1, #0
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f003 fbbe 	bl	8016b4e <USBD_LL_StallEP>
}
 80133d2:	bf00      	nop
 80133d4:	3708      	adds	r7, #8
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}

080133da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80133da:	b580      	push	{r7, lr}
 80133dc:	b086      	sub	sp, #24
 80133de:	af00      	add	r7, sp, #0
 80133e0:	60f8      	str	r0, [r7, #12]
 80133e2:	60b9      	str	r1, [r7, #8]
 80133e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80133e6:	2300      	movs	r3, #0
 80133e8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d036      	beq.n	801345e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80133f4:	6938      	ldr	r0, [r7, #16]
 80133f6:	f000 f836 	bl	8013466 <USBD_GetLen>
 80133fa:	4603      	mov	r3, r0
 80133fc:	3301      	adds	r3, #1
 80133fe:	b29b      	uxth	r3, r3
 8013400:	005b      	lsls	r3, r3, #1
 8013402:	b29a      	uxth	r2, r3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013408:	7dfb      	ldrb	r3, [r7, #23]
 801340a:	68ba      	ldr	r2, [r7, #8]
 801340c:	4413      	add	r3, r2
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	7812      	ldrb	r2, [r2, #0]
 8013412:	701a      	strb	r2, [r3, #0]
  idx++;
 8013414:	7dfb      	ldrb	r3, [r7, #23]
 8013416:	3301      	adds	r3, #1
 8013418:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801341a:	7dfb      	ldrb	r3, [r7, #23]
 801341c:	68ba      	ldr	r2, [r7, #8]
 801341e:	4413      	add	r3, r2
 8013420:	2203      	movs	r2, #3
 8013422:	701a      	strb	r2, [r3, #0]
  idx++;
 8013424:	7dfb      	ldrb	r3, [r7, #23]
 8013426:	3301      	adds	r3, #1
 8013428:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801342a:	e013      	b.n	8013454 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801342c:	7dfb      	ldrb	r3, [r7, #23]
 801342e:	68ba      	ldr	r2, [r7, #8]
 8013430:	4413      	add	r3, r2
 8013432:	693a      	ldr	r2, [r7, #16]
 8013434:	7812      	ldrb	r2, [r2, #0]
 8013436:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	3301      	adds	r3, #1
 801343c:	613b      	str	r3, [r7, #16]
    idx++;
 801343e:	7dfb      	ldrb	r3, [r7, #23]
 8013440:	3301      	adds	r3, #1
 8013442:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013444:	7dfb      	ldrb	r3, [r7, #23]
 8013446:	68ba      	ldr	r2, [r7, #8]
 8013448:	4413      	add	r3, r2
 801344a:	2200      	movs	r2, #0
 801344c:	701a      	strb	r2, [r3, #0]
    idx++;
 801344e:	7dfb      	ldrb	r3, [r7, #23]
 8013450:	3301      	adds	r3, #1
 8013452:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1e7      	bne.n	801342c <USBD_GetString+0x52>
 801345c:	e000      	b.n	8013460 <USBD_GetString+0x86>
    return;
 801345e:	bf00      	nop
  }
}
 8013460:	3718      	adds	r7, #24
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}

08013466 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013466:	b480      	push	{r7}
 8013468:	b085      	sub	sp, #20
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801346e:	2300      	movs	r3, #0
 8013470:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013476:	e005      	b.n	8013484 <USBD_GetLen+0x1e>
  {
    len++;
 8013478:	7bfb      	ldrb	r3, [r7, #15]
 801347a:	3301      	adds	r3, #1
 801347c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	3301      	adds	r3, #1
 8013482:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	781b      	ldrb	r3, [r3, #0]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d1f5      	bne.n	8013478 <USBD_GetLen+0x12>
  }

  return len;
 801348c:	7bfb      	ldrb	r3, [r7, #15]
}
 801348e:	4618      	mov	r0, r3
 8013490:	3714      	adds	r7, #20
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr

0801349a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801349a:	b580      	push	{r7, lr}
 801349c:	b084      	sub	sp, #16
 801349e:	af00      	add	r7, sp, #0
 80134a0:	60f8      	str	r0, [r7, #12]
 80134a2:	60b9      	str	r1, [r7, #8]
 80134a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	2202      	movs	r2, #2
 80134aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	68ba      	ldr	r2, [r7, #8]
 80134be:	2100      	movs	r1, #0
 80134c0:	68f8      	ldr	r0, [r7, #12]
 80134c2:	f003 fbcd 	bl	8016c60 <USBD_LL_Transmit>

  return USBD_OK;
 80134c6:	2300      	movs	r3, #0
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3710      	adds	r7, #16
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b084      	sub	sp, #16
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	60f8      	str	r0, [r7, #12]
 80134d8:	60b9      	str	r1, [r7, #8]
 80134da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	68ba      	ldr	r2, [r7, #8]
 80134e0:	2100      	movs	r1, #0
 80134e2:	68f8      	ldr	r0, [r7, #12]
 80134e4:	f003 fbbc 	bl	8016c60 <USBD_LL_Transmit>

  return USBD_OK;
 80134e8:	2300      	movs	r3, #0
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3710      	adds	r7, #16
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}

080134f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80134f2:	b580      	push	{r7, lr}
 80134f4:	b084      	sub	sp, #16
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	60f8      	str	r0, [r7, #12]
 80134fa:	60b9      	str	r1, [r7, #8]
 80134fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	68ba      	ldr	r2, [r7, #8]
 8013502:	2100      	movs	r1, #0
 8013504:	68f8      	ldr	r0, [r7, #12]
 8013506:	f003 fbcc 	bl	8016ca2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801350a:	2300      	movs	r3, #0
}
 801350c:	4618      	mov	r0, r3
 801350e:	3710      	adds	r7, #16
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2204      	movs	r2, #4
 8013520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013524:	2300      	movs	r3, #0
 8013526:	2200      	movs	r2, #0
 8013528:	2100      	movs	r1, #0
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f003 fb98 	bl	8016c60 <USBD_LL_Transmit>

  return USBD_OK;
 8013530:	2300      	movs	r3, #0
}
 8013532:	4618      	mov	r0, r3
 8013534:	3708      	adds	r7, #8
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}

0801353a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801353a:	b580      	push	{r7, lr}
 801353c:	b082      	sub	sp, #8
 801353e:	af00      	add	r7, sp, #0
 8013540:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2205      	movs	r2, #5
 8013546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801354a:	2300      	movs	r3, #0
 801354c:	2200      	movs	r2, #0
 801354e:	2100      	movs	r1, #0
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f003 fba6 	bl	8016ca2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013556:	2300      	movs	r3, #0
}
 8013558:	4618      	mov	r0, r3
 801355a:	3708      	adds	r7, #8
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}

08013560 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b084      	sub	sp, #16
 8013564:	af00      	add	r7, sp, #0
 8013566:	4603      	mov	r3, r0
 8013568:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801356a:	79fb      	ldrb	r3, [r7, #7]
 801356c:	4a08      	ldr	r2, [pc, #32]	; (8013590 <disk_status+0x30>)
 801356e:	009b      	lsls	r3, r3, #2
 8013570:	4413      	add	r3, r2
 8013572:	685b      	ldr	r3, [r3, #4]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	79fa      	ldrb	r2, [r7, #7]
 8013578:	4905      	ldr	r1, [pc, #20]	; (8013590 <disk_status+0x30>)
 801357a:	440a      	add	r2, r1
 801357c:	7a12      	ldrb	r2, [r2, #8]
 801357e:	4610      	mov	r0, r2
 8013580:	4798      	blx	r3
 8013582:	4603      	mov	r3, r0
 8013584:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013586:	7bfb      	ldrb	r3, [r7, #15]
}
 8013588:	4618      	mov	r0, r3
 801358a:	3710      	adds	r7, #16
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	2000040c 	.word	0x2000040c

08013594 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b084      	sub	sp, #16
 8013598:	af00      	add	r7, sp, #0
 801359a:	4603      	mov	r3, r0
 801359c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801359e:	2300      	movs	r3, #0
 80135a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80135a2:	79fb      	ldrb	r3, [r7, #7]
 80135a4:	4a0d      	ldr	r2, [pc, #52]	; (80135dc <disk_initialize+0x48>)
 80135a6:	5cd3      	ldrb	r3, [r2, r3]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d111      	bne.n	80135d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80135ac:	79fb      	ldrb	r3, [r7, #7]
 80135ae:	4a0b      	ldr	r2, [pc, #44]	; (80135dc <disk_initialize+0x48>)
 80135b0:	2101      	movs	r1, #1
 80135b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80135b4:	79fb      	ldrb	r3, [r7, #7]
 80135b6:	4a09      	ldr	r2, [pc, #36]	; (80135dc <disk_initialize+0x48>)
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	4413      	add	r3, r2
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	79fa      	ldrb	r2, [r7, #7]
 80135c2:	4906      	ldr	r1, [pc, #24]	; (80135dc <disk_initialize+0x48>)
 80135c4:	440a      	add	r2, r1
 80135c6:	7a12      	ldrb	r2, [r2, #8]
 80135c8:	4610      	mov	r0, r2
 80135ca:	4798      	blx	r3
 80135cc:	4603      	mov	r3, r0
 80135ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80135d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3710      	adds	r7, #16
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
 80135da:	bf00      	nop
 80135dc:	2000040c 	.word	0x2000040c

080135e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80135e0:	b590      	push	{r4, r7, lr}
 80135e2:	b087      	sub	sp, #28
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	60b9      	str	r1, [r7, #8]
 80135e8:	607a      	str	r2, [r7, #4]
 80135ea:	603b      	str	r3, [r7, #0]
 80135ec:	4603      	mov	r3, r0
 80135ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80135f0:	7bfb      	ldrb	r3, [r7, #15]
 80135f2:	4a0a      	ldr	r2, [pc, #40]	; (801361c <disk_read+0x3c>)
 80135f4:	009b      	lsls	r3, r3, #2
 80135f6:	4413      	add	r3, r2
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	689c      	ldr	r4, [r3, #8]
 80135fc:	7bfb      	ldrb	r3, [r7, #15]
 80135fe:	4a07      	ldr	r2, [pc, #28]	; (801361c <disk_read+0x3c>)
 8013600:	4413      	add	r3, r2
 8013602:	7a18      	ldrb	r0, [r3, #8]
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	687a      	ldr	r2, [r7, #4]
 8013608:	68b9      	ldr	r1, [r7, #8]
 801360a:	47a0      	blx	r4
 801360c:	4603      	mov	r3, r0
 801360e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013610:	7dfb      	ldrb	r3, [r7, #23]
}
 8013612:	4618      	mov	r0, r3
 8013614:	371c      	adds	r7, #28
 8013616:	46bd      	mov	sp, r7
 8013618:	bd90      	pop	{r4, r7, pc}
 801361a:	bf00      	nop
 801361c:	2000040c 	.word	0x2000040c

08013620 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013620:	b590      	push	{r4, r7, lr}
 8013622:	b087      	sub	sp, #28
 8013624:	af00      	add	r7, sp, #0
 8013626:	60b9      	str	r1, [r7, #8]
 8013628:	607a      	str	r2, [r7, #4]
 801362a:	603b      	str	r3, [r7, #0]
 801362c:	4603      	mov	r3, r0
 801362e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013630:	7bfb      	ldrb	r3, [r7, #15]
 8013632:	4a0a      	ldr	r2, [pc, #40]	; (801365c <disk_write+0x3c>)
 8013634:	009b      	lsls	r3, r3, #2
 8013636:	4413      	add	r3, r2
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	68dc      	ldr	r4, [r3, #12]
 801363c:	7bfb      	ldrb	r3, [r7, #15]
 801363e:	4a07      	ldr	r2, [pc, #28]	; (801365c <disk_write+0x3c>)
 8013640:	4413      	add	r3, r2
 8013642:	7a18      	ldrb	r0, [r3, #8]
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	687a      	ldr	r2, [r7, #4]
 8013648:	68b9      	ldr	r1, [r7, #8]
 801364a:	47a0      	blx	r4
 801364c:	4603      	mov	r3, r0
 801364e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013650:	7dfb      	ldrb	r3, [r7, #23]
}
 8013652:	4618      	mov	r0, r3
 8013654:	371c      	adds	r7, #28
 8013656:	46bd      	mov	sp, r7
 8013658:	bd90      	pop	{r4, r7, pc}
 801365a:	bf00      	nop
 801365c:	2000040c 	.word	0x2000040c

08013660 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	4603      	mov	r3, r0
 8013668:	603a      	str	r2, [r7, #0]
 801366a:	71fb      	strb	r3, [r7, #7]
 801366c:	460b      	mov	r3, r1
 801366e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013670:	79fb      	ldrb	r3, [r7, #7]
 8013672:	4a09      	ldr	r2, [pc, #36]	; (8013698 <disk_ioctl+0x38>)
 8013674:	009b      	lsls	r3, r3, #2
 8013676:	4413      	add	r3, r2
 8013678:	685b      	ldr	r3, [r3, #4]
 801367a:	691b      	ldr	r3, [r3, #16]
 801367c:	79fa      	ldrb	r2, [r7, #7]
 801367e:	4906      	ldr	r1, [pc, #24]	; (8013698 <disk_ioctl+0x38>)
 8013680:	440a      	add	r2, r1
 8013682:	7a10      	ldrb	r0, [r2, #8]
 8013684:	79b9      	ldrb	r1, [r7, #6]
 8013686:	683a      	ldr	r2, [r7, #0]
 8013688:	4798      	blx	r3
 801368a:	4603      	mov	r3, r0
 801368c:	73fb      	strb	r3, [r7, #15]
  return res;
 801368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013690:	4618      	mov	r0, r3
 8013692:	3710      	adds	r7, #16
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	2000040c 	.word	0x2000040c

0801369c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801369c:	b480      	push	{r7}
 801369e:	b085      	sub	sp, #20
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	3301      	adds	r3, #1
 80136a8:	781b      	ldrb	r3, [r3, #0]
 80136aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80136ac:	89fb      	ldrh	r3, [r7, #14]
 80136ae:	021b      	lsls	r3, r3, #8
 80136b0:	b21a      	sxth	r2, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	781b      	ldrb	r3, [r3, #0]
 80136b6:	b21b      	sxth	r3, r3
 80136b8:	4313      	orrs	r3, r2
 80136ba:	b21b      	sxth	r3, r3
 80136bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80136be:	89fb      	ldrh	r3, [r7, #14]
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3714      	adds	r7, #20
 80136c4:	46bd      	mov	sp, r7
 80136c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ca:	4770      	bx	lr

080136cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80136cc:	b480      	push	{r7}
 80136ce:	b085      	sub	sp, #20
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	3303      	adds	r3, #3
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	021b      	lsls	r3, r3, #8
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	3202      	adds	r2, #2
 80136e4:	7812      	ldrb	r2, [r2, #0]
 80136e6:	4313      	orrs	r3, r2
 80136e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	021b      	lsls	r3, r3, #8
 80136ee:	687a      	ldr	r2, [r7, #4]
 80136f0:	3201      	adds	r2, #1
 80136f2:	7812      	ldrb	r2, [r2, #0]
 80136f4:	4313      	orrs	r3, r2
 80136f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	021b      	lsls	r3, r3, #8
 80136fc:	687a      	ldr	r2, [r7, #4]
 80136fe:	7812      	ldrb	r2, [r2, #0]
 8013700:	4313      	orrs	r3, r2
 8013702:	60fb      	str	r3, [r7, #12]
	return rv;
 8013704:	68fb      	ldr	r3, [r7, #12]
}
 8013706:	4618      	mov	r0, r3
 8013708:	3714      	adds	r7, #20
 801370a:	46bd      	mov	sp, r7
 801370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013710:	4770      	bx	lr

08013712 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013712:	b480      	push	{r7}
 8013714:	b083      	sub	sp, #12
 8013716:	af00      	add	r7, sp, #0
 8013718:	6078      	str	r0, [r7, #4]
 801371a:	460b      	mov	r3, r1
 801371c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	1c5a      	adds	r2, r3, #1
 8013722:	607a      	str	r2, [r7, #4]
 8013724:	887a      	ldrh	r2, [r7, #2]
 8013726:	b2d2      	uxtb	r2, r2
 8013728:	701a      	strb	r2, [r3, #0]
 801372a:	887b      	ldrh	r3, [r7, #2]
 801372c:	0a1b      	lsrs	r3, r3, #8
 801372e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	1c5a      	adds	r2, r3, #1
 8013734:	607a      	str	r2, [r7, #4]
 8013736:	887a      	ldrh	r2, [r7, #2]
 8013738:	b2d2      	uxtb	r2, r2
 801373a:	701a      	strb	r2, [r3, #0]
}
 801373c:	bf00      	nop
 801373e:	370c      	adds	r7, #12
 8013740:	46bd      	mov	sp, r7
 8013742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013746:	4770      	bx	lr

08013748 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013748:	b480      	push	{r7}
 801374a:	b083      	sub	sp, #12
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	1c5a      	adds	r2, r3, #1
 8013756:	607a      	str	r2, [r7, #4]
 8013758:	683a      	ldr	r2, [r7, #0]
 801375a:	b2d2      	uxtb	r2, r2
 801375c:	701a      	strb	r2, [r3, #0]
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	0a1b      	lsrs	r3, r3, #8
 8013762:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	1c5a      	adds	r2, r3, #1
 8013768:	607a      	str	r2, [r7, #4]
 801376a:	683a      	ldr	r2, [r7, #0]
 801376c:	b2d2      	uxtb	r2, r2
 801376e:	701a      	strb	r2, [r3, #0]
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	0a1b      	lsrs	r3, r3, #8
 8013774:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	1c5a      	adds	r2, r3, #1
 801377a:	607a      	str	r2, [r7, #4]
 801377c:	683a      	ldr	r2, [r7, #0]
 801377e:	b2d2      	uxtb	r2, r2
 8013780:	701a      	strb	r2, [r3, #0]
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	0a1b      	lsrs	r3, r3, #8
 8013786:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	1c5a      	adds	r2, r3, #1
 801378c:	607a      	str	r2, [r7, #4]
 801378e:	683a      	ldr	r2, [r7, #0]
 8013790:	b2d2      	uxtb	r2, r2
 8013792:	701a      	strb	r2, [r3, #0]
}
 8013794:	bf00      	nop
 8013796:	370c      	adds	r7, #12
 8013798:	46bd      	mov	sp, r7
 801379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379e:	4770      	bx	lr

080137a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80137a0:	b480      	push	{r7}
 80137a2:	b087      	sub	sp, #28
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	60f8      	str	r0, [r7, #12]
 80137a8:	60b9      	str	r1, [r7, #8]
 80137aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d00d      	beq.n	80137d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80137ba:	693a      	ldr	r2, [r7, #16]
 80137bc:	1c53      	adds	r3, r2, #1
 80137be:	613b      	str	r3, [r7, #16]
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	1c59      	adds	r1, r3, #1
 80137c4:	6179      	str	r1, [r7, #20]
 80137c6:	7812      	ldrb	r2, [r2, #0]
 80137c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	3b01      	subs	r3, #1
 80137ce:	607b      	str	r3, [r7, #4]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d1f1      	bne.n	80137ba <mem_cpy+0x1a>
	}
}
 80137d6:	bf00      	nop
 80137d8:	371c      	adds	r7, #28
 80137da:	46bd      	mov	sp, r7
 80137dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e0:	4770      	bx	lr

080137e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80137e2:	b480      	push	{r7}
 80137e4:	b087      	sub	sp, #28
 80137e6:	af00      	add	r7, sp, #0
 80137e8:	60f8      	str	r0, [r7, #12]
 80137ea:	60b9      	str	r1, [r7, #8]
 80137ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	1c5a      	adds	r2, r3, #1
 80137f6:	617a      	str	r2, [r7, #20]
 80137f8:	68ba      	ldr	r2, [r7, #8]
 80137fa:	b2d2      	uxtb	r2, r2
 80137fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	3b01      	subs	r3, #1
 8013802:	607b      	str	r3, [r7, #4]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d1f3      	bne.n	80137f2 <mem_set+0x10>
}
 801380a:	bf00      	nop
 801380c:	bf00      	nop
 801380e:	371c      	adds	r7, #28
 8013810:	46bd      	mov	sp, r7
 8013812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013816:	4770      	bx	lr

08013818 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013818:	b480      	push	{r7}
 801381a:	b089      	sub	sp, #36	; 0x24
 801381c:	af00      	add	r7, sp, #0
 801381e:	60f8      	str	r0, [r7, #12]
 8013820:	60b9      	str	r1, [r7, #8]
 8013822:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	61fb      	str	r3, [r7, #28]
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801382c:	2300      	movs	r3, #0
 801382e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	1c5a      	adds	r2, r3, #1
 8013834:	61fa      	str	r2, [r7, #28]
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	4619      	mov	r1, r3
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	1c5a      	adds	r2, r3, #1
 801383e:	61ba      	str	r2, [r7, #24]
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	1acb      	subs	r3, r1, r3
 8013844:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	3b01      	subs	r3, #1
 801384a:	607b      	str	r3, [r7, #4]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d002      	beq.n	8013858 <mem_cmp+0x40>
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d0eb      	beq.n	8013830 <mem_cmp+0x18>

	return r;
 8013858:	697b      	ldr	r3, [r7, #20]
}
 801385a:	4618      	mov	r0, r3
 801385c:	3724      	adds	r7, #36	; 0x24
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr

08013866 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8013866:	b480      	push	{r7}
 8013868:	b083      	sub	sp, #12
 801386a:	af00      	add	r7, sp, #0
 801386c:	6078      	str	r0, [r7, #4]
 801386e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8013870:	e002      	b.n	8013878 <chk_chr+0x12>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	3301      	adds	r3, #1
 8013876:	607b      	str	r3, [r7, #4]
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d005      	beq.n	801388c <chk_chr+0x26>
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	461a      	mov	r2, r3
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	4293      	cmp	r3, r2
 801388a:	d1f2      	bne.n	8013872 <chk_chr+0xc>
	return *str;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	781b      	ldrb	r3, [r3, #0]
}
 8013890:	4618      	mov	r0, r3
 8013892:	370c      	adds	r7, #12
 8013894:	46bd      	mov	sp, r7
 8013896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389a:	4770      	bx	lr

0801389c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b086      	sub	sp, #24
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80138a4:	2300      	movs	r3, #0
 80138a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	78db      	ldrb	r3, [r3, #3]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d034      	beq.n	801391a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	7858      	ldrb	r0, [r3, #1]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80138c0:	2301      	movs	r3, #1
 80138c2:	697a      	ldr	r2, [r7, #20]
 80138c4:	f7ff feac 	bl	8013620 <disk_write>
 80138c8:	4603      	mov	r3, r0
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d002      	beq.n	80138d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80138ce:	2301      	movs	r3, #1
 80138d0:	73fb      	strb	r3, [r7, #15]
 80138d2:	e022      	b.n	801391a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2200      	movs	r2, #0
 80138d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138de:	697a      	ldr	r2, [r7, #20]
 80138e0:	1ad2      	subs	r2, r2, r3
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6a1b      	ldr	r3, [r3, #32]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d217      	bcs.n	801391a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	789b      	ldrb	r3, [r3, #2]
 80138ee:	613b      	str	r3, [r7, #16]
 80138f0:	e010      	b.n	8013914 <sync_window+0x78>
					wsect += fs->fsize;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6a1b      	ldr	r3, [r3, #32]
 80138f6:	697a      	ldr	r2, [r7, #20]
 80138f8:	4413      	add	r3, r2
 80138fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	7858      	ldrb	r0, [r3, #1]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013906:	2301      	movs	r3, #1
 8013908:	697a      	ldr	r2, [r7, #20]
 801390a:	f7ff fe89 	bl	8013620 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	3b01      	subs	r3, #1
 8013912:	613b      	str	r3, [r7, #16]
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	2b01      	cmp	r3, #1
 8013918:	d8eb      	bhi.n	80138f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801391a:	7bfb      	ldrb	r3, [r7, #15]
}
 801391c:	4618      	mov	r0, r3
 801391e:	3718      	adds	r7, #24
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b084      	sub	sp, #16
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801392e:	2300      	movs	r3, #0
 8013930:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013936:	683a      	ldr	r2, [r7, #0]
 8013938:	429a      	cmp	r2, r3
 801393a:	d01b      	beq.n	8013974 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f7ff ffad 	bl	801389c <sync_window>
 8013942:	4603      	mov	r3, r0
 8013944:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013946:	7bfb      	ldrb	r3, [r7, #15]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d113      	bne.n	8013974 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	7858      	ldrb	r0, [r3, #1]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013956:	2301      	movs	r3, #1
 8013958:	683a      	ldr	r2, [r7, #0]
 801395a:	f7ff fe41 	bl	80135e0 <disk_read>
 801395e:	4603      	mov	r3, r0
 8013960:	2b00      	cmp	r3, #0
 8013962:	d004      	beq.n	801396e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013964:	f04f 33ff 	mov.w	r3, #4294967295
 8013968:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801396a:	2301      	movs	r3, #1
 801396c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	683a      	ldr	r2, [r7, #0]
 8013972:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8013974:	7bfb      	ldrb	r3, [r7, #15]
}
 8013976:	4618      	mov	r0, r3
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
	...

08013980 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f7ff ff87 	bl	801389c <sync_window>
 801398e:	4603      	mov	r3, r0
 8013990:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013992:	7bfb      	ldrb	r3, [r7, #15]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d159      	bne.n	8013a4c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	2b03      	cmp	r3, #3
 801399e:	d149      	bne.n	8013a34 <sync_fs+0xb4>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	791b      	ldrb	r3, [r3, #4]
 80139a4:	2b01      	cmp	r3, #1
 80139a6:	d145      	bne.n	8013a34 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	899b      	ldrh	r3, [r3, #12]
 80139b2:	461a      	mov	r2, r3
 80139b4:	2100      	movs	r1, #0
 80139b6:	f7ff ff14 	bl	80137e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	3338      	adds	r3, #56	; 0x38
 80139be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80139c2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7ff fea3 	bl	8013712 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	3338      	adds	r3, #56	; 0x38
 80139d0:	4921      	ldr	r1, [pc, #132]	; (8013a58 <sync_fs+0xd8>)
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7ff feb8 	bl	8013748 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	3338      	adds	r3, #56	; 0x38
 80139dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80139e0:	491e      	ldr	r1, [pc, #120]	; (8013a5c <sync_fs+0xdc>)
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7ff feb0 	bl	8013748 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	3338      	adds	r3, #56	; 0x38
 80139ec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	699b      	ldr	r3, [r3, #24]
 80139f4:	4619      	mov	r1, r3
 80139f6:	4610      	mov	r0, r2
 80139f8:	f7ff fea6 	bl	8013748 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	3338      	adds	r3, #56	; 0x38
 8013a00:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	695b      	ldr	r3, [r3, #20]
 8013a08:	4619      	mov	r1, r3
 8013a0a:	4610      	mov	r0, r2
 8013a0c:	f7ff fe9c 	bl	8013748 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a14:	1c5a      	adds	r2, r3, #1
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	7858      	ldrb	r0, [r3, #1]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a28:	2301      	movs	r3, #1
 8013a2a:	f7ff fdf9 	bl	8013620 <disk_write>
			fs->fsi_flag = 0;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	2200      	movs	r2, #0
 8013a32:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	785b      	ldrb	r3, [r3, #1]
 8013a38:	2200      	movs	r2, #0
 8013a3a:	2100      	movs	r1, #0
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7ff fe0f 	bl	8013660 <disk_ioctl>
 8013a42:	4603      	mov	r3, r0
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d001      	beq.n	8013a4c <sync_fs+0xcc>
 8013a48:	2301      	movs	r3, #1
 8013a4a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3710      	adds	r7, #16
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	bf00      	nop
 8013a58:	41615252 	.word	0x41615252
 8013a5c:	61417272 	.word	0x61417272

08013a60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013a60:	b480      	push	{r7}
 8013a62:	b083      	sub	sp, #12
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	3b02      	subs	r3, #2
 8013a6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	69db      	ldr	r3, [r3, #28]
 8013a74:	3b02      	subs	r3, #2
 8013a76:	683a      	ldr	r2, [r7, #0]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d301      	bcc.n	8013a80 <clust2sect+0x20>
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	e008      	b.n	8013a92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	895b      	ldrh	r3, [r3, #10]
 8013a84:	461a      	mov	r2, r3
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	fb03 f202 	mul.w	r2, r3, r2
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a90:	4413      	add	r3, r2
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	370c      	adds	r7, #12
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr

08013a9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b086      	sub	sp, #24
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
 8013aa6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d904      	bls.n	8013abe <get_fat+0x20>
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	69db      	ldr	r3, [r3, #28]
 8013ab8:	683a      	ldr	r2, [r7, #0]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d302      	bcc.n	8013ac4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013abe:	2301      	movs	r3, #1
 8013ac0:	617b      	str	r3, [r7, #20]
 8013ac2:	e0bb      	b.n	8013c3c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ac8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	2b03      	cmp	r3, #3
 8013ad0:	f000 8083 	beq.w	8013bda <get_fat+0x13c>
 8013ad4:	2b03      	cmp	r3, #3
 8013ad6:	f300 80a7 	bgt.w	8013c28 <get_fat+0x18a>
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d002      	beq.n	8013ae4 <get_fat+0x46>
 8013ade:	2b02      	cmp	r3, #2
 8013ae0:	d056      	beq.n	8013b90 <get_fat+0xf2>
 8013ae2:	e0a1      	b.n	8013c28 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	60fb      	str	r3, [r7, #12]
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	085b      	lsrs	r3, r3, #1
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	4413      	add	r3, r2
 8013af0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	899b      	ldrh	r3, [r3, #12]
 8013afa:	4619      	mov	r1, r3
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b02:	4413      	add	r3, r2
 8013b04:	4619      	mov	r1, r3
 8013b06:	6938      	ldr	r0, [r7, #16]
 8013b08:	f7ff ff0c 	bl	8013924 <move_window>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	f040 808d 	bne.w	8013c2e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	1c5a      	adds	r2, r3, #1
 8013b18:	60fa      	str	r2, [r7, #12]
 8013b1a:	693a      	ldr	r2, [r7, #16]
 8013b1c:	8992      	ldrh	r2, [r2, #12]
 8013b1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b22:	fb02 f201 	mul.w	r2, r2, r1
 8013b26:	1a9b      	subs	r3, r3, r2
 8013b28:	693a      	ldr	r2, [r7, #16]
 8013b2a:	4413      	add	r3, r2
 8013b2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	899b      	ldrh	r3, [r3, #12]
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b42:	4413      	add	r3, r2
 8013b44:	4619      	mov	r1, r3
 8013b46:	6938      	ldr	r0, [r7, #16]
 8013b48:	f7ff feec 	bl	8013924 <move_window>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d16f      	bne.n	8013c32 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	899b      	ldrh	r3, [r3, #12]
 8013b56:	461a      	mov	r2, r3
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b5e:	fb02 f201 	mul.w	r2, r2, r1
 8013b62:	1a9b      	subs	r3, r3, r2
 8013b64:	693a      	ldr	r2, [r7, #16]
 8013b66:	4413      	add	r3, r2
 8013b68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b6c:	021b      	lsls	r3, r3, #8
 8013b6e:	461a      	mov	r2, r3
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	4313      	orrs	r3, r2
 8013b74:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	f003 0301 	and.w	r3, r3, #1
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d002      	beq.n	8013b86 <get_fat+0xe8>
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	091b      	lsrs	r3, r3, #4
 8013b84:	e002      	b.n	8013b8c <get_fat+0xee>
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013b8c:	617b      	str	r3, [r7, #20]
			break;
 8013b8e:	e055      	b.n	8013c3c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	899b      	ldrh	r3, [r3, #12]
 8013b98:	085b      	lsrs	r3, r3, #1
 8013b9a:	b29b      	uxth	r3, r3
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ba4:	4413      	add	r3, r2
 8013ba6:	4619      	mov	r1, r3
 8013ba8:	6938      	ldr	r0, [r7, #16]
 8013baa:	f7ff febb 	bl	8013924 <move_window>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d140      	bne.n	8013c36 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	005b      	lsls	r3, r3, #1
 8013bbe:	693a      	ldr	r2, [r7, #16]
 8013bc0:	8992      	ldrh	r2, [r2, #12]
 8013bc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8013bc6:	fb02 f200 	mul.w	r2, r2, r0
 8013bca:	1a9b      	subs	r3, r3, r2
 8013bcc:	440b      	add	r3, r1
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7ff fd64 	bl	801369c <ld_word>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	617b      	str	r3, [r7, #20]
			break;
 8013bd8:	e030      	b.n	8013c3c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	899b      	ldrh	r3, [r3, #12]
 8013be2:	089b      	lsrs	r3, r3, #2
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	4619      	mov	r1, r3
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8013bee:	4413      	add	r3, r2
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	6938      	ldr	r0, [r7, #16]
 8013bf4:	f7ff fe96 	bl	8013924 <move_window>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d11d      	bne.n	8013c3a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	693a      	ldr	r2, [r7, #16]
 8013c0a:	8992      	ldrh	r2, [r2, #12]
 8013c0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8013c10:	fb02 f200 	mul.w	r2, r2, r0
 8013c14:	1a9b      	subs	r3, r3, r2
 8013c16:	440b      	add	r3, r1
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f7ff fd57 	bl	80136cc <ld_dword>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013c24:	617b      	str	r3, [r7, #20]
			break;
 8013c26:	e009      	b.n	8013c3c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013c28:	2301      	movs	r3, #1
 8013c2a:	617b      	str	r3, [r7, #20]
 8013c2c:	e006      	b.n	8013c3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013c2e:	bf00      	nop
 8013c30:	e004      	b.n	8013c3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013c32:	bf00      	nop
 8013c34:	e002      	b.n	8013c3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013c36:	bf00      	nop
 8013c38:	e000      	b.n	8013c3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013c3a:	bf00      	nop
		}
	}

	return val;
 8013c3c:	697b      	ldr	r3, [r7, #20]
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3718      	adds	r7, #24
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}

08013c46 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013c46:	b590      	push	{r4, r7, lr}
 8013c48:	b089      	sub	sp, #36	; 0x24
 8013c4a:	af00      	add	r7, sp, #0
 8013c4c:	60f8      	str	r0, [r7, #12]
 8013c4e:	60b9      	str	r1, [r7, #8]
 8013c50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013c52:	2302      	movs	r3, #2
 8013c54:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	2b01      	cmp	r3, #1
 8013c5a:	f240 8102 	bls.w	8013e62 <put_fat+0x21c>
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	69db      	ldr	r3, [r3, #28]
 8013c62:	68ba      	ldr	r2, [r7, #8]
 8013c64:	429a      	cmp	r2, r3
 8013c66:	f080 80fc 	bcs.w	8013e62 <put_fat+0x21c>
		switch (fs->fs_type) {
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	781b      	ldrb	r3, [r3, #0]
 8013c6e:	2b03      	cmp	r3, #3
 8013c70:	f000 80b6 	beq.w	8013de0 <put_fat+0x19a>
 8013c74:	2b03      	cmp	r3, #3
 8013c76:	f300 80fd 	bgt.w	8013e74 <put_fat+0x22e>
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	d003      	beq.n	8013c86 <put_fat+0x40>
 8013c7e:	2b02      	cmp	r3, #2
 8013c80:	f000 8083 	beq.w	8013d8a <put_fat+0x144>
 8013c84:	e0f6      	b.n	8013e74 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	61bb      	str	r3, [r7, #24]
 8013c8a:	69bb      	ldr	r3, [r7, #24]
 8013c8c:	085b      	lsrs	r3, r3, #1
 8013c8e:	69ba      	ldr	r2, [r7, #24]
 8013c90:	4413      	add	r3, r2
 8013c92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	899b      	ldrh	r3, [r3, #12]
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	69bb      	ldr	r3, [r7, #24]
 8013ca0:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ca4:	4413      	add	r3, r2
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	68f8      	ldr	r0, [r7, #12]
 8013caa:	f7ff fe3b 	bl	8013924 <move_window>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013cb2:	7ffb      	ldrb	r3, [r7, #31]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	f040 80d6 	bne.w	8013e66 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013cc0:	69bb      	ldr	r3, [r7, #24]
 8013cc2:	1c5a      	adds	r2, r3, #1
 8013cc4:	61ba      	str	r2, [r7, #24]
 8013cc6:	68fa      	ldr	r2, [r7, #12]
 8013cc8:	8992      	ldrh	r2, [r2, #12]
 8013cca:	fbb3 f0f2 	udiv	r0, r3, r2
 8013cce:	fb02 f200 	mul.w	r2, r2, r0
 8013cd2:	1a9b      	subs	r3, r3, r2
 8013cd4:	440b      	add	r3, r1
 8013cd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	f003 0301 	and.w	r3, r3, #1
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d00d      	beq.n	8013cfe <put_fat+0xb8>
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	781b      	ldrb	r3, [r3, #0]
 8013ce6:	b25b      	sxtb	r3, r3
 8013ce8:	f003 030f 	and.w	r3, r3, #15
 8013cec:	b25a      	sxtb	r2, r3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	011b      	lsls	r3, r3, #4
 8013cf4:	b25b      	sxtb	r3, r3
 8013cf6:	4313      	orrs	r3, r2
 8013cf8:	b25b      	sxtb	r3, r3
 8013cfa:	b2db      	uxtb	r3, r3
 8013cfc:	e001      	b.n	8013d02 <put_fat+0xbc>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	697a      	ldr	r2, [r7, #20]
 8013d04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	899b      	ldrh	r3, [r3, #12]
 8013d14:	4619      	mov	r1, r3
 8013d16:	69bb      	ldr	r3, [r7, #24]
 8013d18:	fbb3 f3f1 	udiv	r3, r3, r1
 8013d1c:	4413      	add	r3, r2
 8013d1e:	4619      	mov	r1, r3
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f7ff fdff 	bl	8013924 <move_window>
 8013d26:	4603      	mov	r3, r0
 8013d28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013d2a:	7ffb      	ldrb	r3, [r7, #31]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	f040 809c 	bne.w	8013e6a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	899b      	ldrh	r3, [r3, #12]
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d44:	fb02 f200 	mul.w	r2, r2, r0
 8013d48:	1a9b      	subs	r3, r3, r2
 8013d4a:	440b      	add	r3, r1
 8013d4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	f003 0301 	and.w	r3, r3, #1
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d003      	beq.n	8013d60 <put_fat+0x11a>
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	091b      	lsrs	r3, r3, #4
 8013d5c:	b2db      	uxtb	r3, r3
 8013d5e:	e00e      	b.n	8013d7e <put_fat+0x138>
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	781b      	ldrb	r3, [r3, #0]
 8013d64:	b25b      	sxtb	r3, r3
 8013d66:	f023 030f 	bic.w	r3, r3, #15
 8013d6a:	b25a      	sxtb	r2, r3
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	0a1b      	lsrs	r3, r3, #8
 8013d70:	b25b      	sxtb	r3, r3
 8013d72:	f003 030f 	and.w	r3, r3, #15
 8013d76:	b25b      	sxtb	r3, r3
 8013d78:	4313      	orrs	r3, r2
 8013d7a:	b25b      	sxtb	r3, r3
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	697a      	ldr	r2, [r7, #20]
 8013d80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2201      	movs	r2, #1
 8013d86:	70da      	strb	r2, [r3, #3]
			break;
 8013d88:	e074      	b.n	8013e74 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	899b      	ldrh	r3, [r3, #12]
 8013d92:	085b      	lsrs	r3, r3, #1
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	4619      	mov	r1, r3
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8013d9e:	4413      	add	r3, r2
 8013da0:	4619      	mov	r1, r3
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f7ff fdbe 	bl	8013924 <move_window>
 8013da8:	4603      	mov	r3, r0
 8013daa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013dac:	7ffb      	ldrb	r3, [r7, #31]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d15d      	bne.n	8013e6e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	005b      	lsls	r3, r3, #1
 8013dbc:	68fa      	ldr	r2, [r7, #12]
 8013dbe:	8992      	ldrh	r2, [r2, #12]
 8013dc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8013dc4:	fb02 f200 	mul.w	r2, r2, r0
 8013dc8:	1a9b      	subs	r3, r3, r2
 8013dca:	440b      	add	r3, r1
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	b292      	uxth	r2, r2
 8013dd0:	4611      	mov	r1, r2
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7ff fc9d 	bl	8013712 <st_word>
			fs->wflag = 1;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	2201      	movs	r2, #1
 8013ddc:	70da      	strb	r2, [r3, #3]
			break;
 8013dde:	e049      	b.n	8013e74 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	899b      	ldrh	r3, [r3, #12]
 8013de8:	089b      	lsrs	r3, r3, #2
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	4619      	mov	r1, r3
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	fbb3 f3f1 	udiv	r3, r3, r1
 8013df4:	4413      	add	r3, r2
 8013df6:	4619      	mov	r1, r3
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f7ff fd93 	bl	8013924 <move_window>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013e02:	7ffb      	ldrb	r3, [r7, #31]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d134      	bne.n	8013e72 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	009b      	lsls	r3, r3, #2
 8013e18:	68fa      	ldr	r2, [r7, #12]
 8013e1a:	8992      	ldrh	r2, [r2, #12]
 8013e1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8013e20:	fb02 f200 	mul.w	r2, r2, r0
 8013e24:	1a9b      	subs	r3, r3, r2
 8013e26:	440b      	add	r3, r1
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7ff fc4f 	bl	80136cc <ld_dword>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013e34:	4323      	orrs	r3, r4
 8013e36:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	009b      	lsls	r3, r3, #2
 8013e42:	68fa      	ldr	r2, [r7, #12]
 8013e44:	8992      	ldrh	r2, [r2, #12]
 8013e46:	fbb3 f0f2 	udiv	r0, r3, r2
 8013e4a:	fb02 f200 	mul.w	r2, r2, r0
 8013e4e:	1a9b      	subs	r3, r3, r2
 8013e50:	440b      	add	r3, r1
 8013e52:	6879      	ldr	r1, [r7, #4]
 8013e54:	4618      	mov	r0, r3
 8013e56:	f7ff fc77 	bl	8013748 <st_dword>
			fs->wflag = 1;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	2201      	movs	r2, #1
 8013e5e:	70da      	strb	r2, [r3, #3]
			break;
 8013e60:	e008      	b.n	8013e74 <put_fat+0x22e>
		}
	}
 8013e62:	bf00      	nop
 8013e64:	e006      	b.n	8013e74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013e66:	bf00      	nop
 8013e68:	e004      	b.n	8013e74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013e6a:	bf00      	nop
 8013e6c:	e002      	b.n	8013e74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013e6e:	bf00      	nop
 8013e70:	e000      	b.n	8013e74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013e72:	bf00      	nop
	return res;
 8013e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3724      	adds	r7, #36	; 0x24
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd90      	pop	{r4, r7, pc}

08013e7e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013e7e:	b580      	push	{r7, lr}
 8013e80:	b088      	sub	sp, #32
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	60f8      	str	r0, [r7, #12]
 8013e86:	60b9      	str	r1, [r7, #8]
 8013e88:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	2b01      	cmp	r3, #1
 8013e98:	d904      	bls.n	8013ea4 <remove_chain+0x26>
 8013e9a:	69bb      	ldr	r3, [r7, #24]
 8013e9c:	69db      	ldr	r3, [r3, #28]
 8013e9e:	68ba      	ldr	r2, [r7, #8]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d301      	bcc.n	8013ea8 <remove_chain+0x2a>
 8013ea4:	2302      	movs	r3, #2
 8013ea6:	e04b      	b.n	8013f40 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d00c      	beq.n	8013ec8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013eae:	f04f 32ff 	mov.w	r2, #4294967295
 8013eb2:	6879      	ldr	r1, [r7, #4]
 8013eb4:	69b8      	ldr	r0, [r7, #24]
 8013eb6:	f7ff fec6 	bl	8013c46 <put_fat>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013ebe:	7ffb      	ldrb	r3, [r7, #31]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d001      	beq.n	8013ec8 <remove_chain+0x4a>
 8013ec4:	7ffb      	ldrb	r3, [r7, #31]
 8013ec6:	e03b      	b.n	8013f40 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013ec8:	68b9      	ldr	r1, [r7, #8]
 8013eca:	68f8      	ldr	r0, [r7, #12]
 8013ecc:	f7ff fde7 	bl	8013a9e <get_fat>
 8013ed0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d031      	beq.n	8013f3c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013ed8:	697b      	ldr	r3, [r7, #20]
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	d101      	bne.n	8013ee2 <remove_chain+0x64>
 8013ede:	2302      	movs	r3, #2
 8013ee0:	e02e      	b.n	8013f40 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ee8:	d101      	bne.n	8013eee <remove_chain+0x70>
 8013eea:	2301      	movs	r3, #1
 8013eec:	e028      	b.n	8013f40 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013eee:	2200      	movs	r2, #0
 8013ef0:	68b9      	ldr	r1, [r7, #8]
 8013ef2:	69b8      	ldr	r0, [r7, #24]
 8013ef4:	f7ff fea7 	bl	8013c46 <put_fat>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013efc:	7ffb      	ldrb	r3, [r7, #31]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d001      	beq.n	8013f06 <remove_chain+0x88>
 8013f02:	7ffb      	ldrb	r3, [r7, #31]
 8013f04:	e01c      	b.n	8013f40 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013f06:	69bb      	ldr	r3, [r7, #24]
 8013f08:	699a      	ldr	r2, [r3, #24]
 8013f0a:	69bb      	ldr	r3, [r7, #24]
 8013f0c:	69db      	ldr	r3, [r3, #28]
 8013f0e:	3b02      	subs	r3, #2
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d20b      	bcs.n	8013f2c <remove_chain+0xae>
			fs->free_clst++;
 8013f14:	69bb      	ldr	r3, [r7, #24]
 8013f16:	699b      	ldr	r3, [r3, #24]
 8013f18:	1c5a      	adds	r2, r3, #1
 8013f1a:	69bb      	ldr	r3, [r7, #24]
 8013f1c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8013f1e:	69bb      	ldr	r3, [r7, #24]
 8013f20:	791b      	ldrb	r3, [r3, #4]
 8013f22:	f043 0301 	orr.w	r3, r3, #1
 8013f26:	b2da      	uxtb	r2, r3
 8013f28:	69bb      	ldr	r3, [r7, #24]
 8013f2a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013f2c:	697b      	ldr	r3, [r7, #20]
 8013f2e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	69db      	ldr	r3, [r3, #28]
 8013f34:	68ba      	ldr	r2, [r7, #8]
 8013f36:	429a      	cmp	r2, r3
 8013f38:	d3c6      	bcc.n	8013ec8 <remove_chain+0x4a>
 8013f3a:	e000      	b.n	8013f3e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013f3c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013f3e:	2300      	movs	r3, #0
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3720      	adds	r7, #32
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}

08013f48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b088      	sub	sp, #32
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d10d      	bne.n	8013f7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	695b      	ldr	r3, [r3, #20]
 8013f62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d004      	beq.n	8013f74 <create_chain+0x2c>
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	69db      	ldr	r3, [r3, #28]
 8013f6e:	69ba      	ldr	r2, [r7, #24]
 8013f70:	429a      	cmp	r2, r3
 8013f72:	d31b      	bcc.n	8013fac <create_chain+0x64>
 8013f74:	2301      	movs	r3, #1
 8013f76:	61bb      	str	r3, [r7, #24]
 8013f78:	e018      	b.n	8013fac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013f7a:	6839      	ldr	r1, [r7, #0]
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f7ff fd8e 	bl	8013a9e <get_fat>
 8013f82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	2b01      	cmp	r3, #1
 8013f88:	d801      	bhi.n	8013f8e <create_chain+0x46>
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	e070      	b.n	8014070 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f94:	d101      	bne.n	8013f9a <create_chain+0x52>
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	e06a      	b.n	8014070 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	69db      	ldr	r3, [r3, #28]
 8013f9e:	68fa      	ldr	r2, [r7, #12]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d201      	bcs.n	8013fa8 <create_chain+0x60>
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	e063      	b.n	8014070 <create_chain+0x128>
		scl = clst;
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013fac:	69bb      	ldr	r3, [r7, #24]
 8013fae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013fb0:	69fb      	ldr	r3, [r7, #28]
 8013fb2:	3301      	adds	r3, #1
 8013fb4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	69db      	ldr	r3, [r3, #28]
 8013fba:	69fa      	ldr	r2, [r7, #28]
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d307      	bcc.n	8013fd0 <create_chain+0x88>
				ncl = 2;
 8013fc0:	2302      	movs	r3, #2
 8013fc2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013fc4:	69fa      	ldr	r2, [r7, #28]
 8013fc6:	69bb      	ldr	r3, [r7, #24]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d901      	bls.n	8013fd0 <create_chain+0x88>
 8013fcc:	2300      	movs	r3, #0
 8013fce:	e04f      	b.n	8014070 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013fd0:	69f9      	ldr	r1, [r7, #28]
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f7ff fd63 	bl	8013a9e <get_fat>
 8013fd8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d00e      	beq.n	8013ffe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	2b01      	cmp	r3, #1
 8013fe4:	d003      	beq.n	8013fee <create_chain+0xa6>
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fec:	d101      	bne.n	8013ff2 <create_chain+0xaa>
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	e03e      	b.n	8014070 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013ff2:	69fa      	ldr	r2, [r7, #28]
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	429a      	cmp	r2, r3
 8013ff8:	d1da      	bne.n	8013fb0 <create_chain+0x68>
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	e038      	b.n	8014070 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013ffe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014000:	f04f 32ff 	mov.w	r2, #4294967295
 8014004:	69f9      	ldr	r1, [r7, #28]
 8014006:	6938      	ldr	r0, [r7, #16]
 8014008:	f7ff fe1d 	bl	8013c46 <put_fat>
 801400c:	4603      	mov	r3, r0
 801400e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014010:	7dfb      	ldrb	r3, [r7, #23]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d109      	bne.n	801402a <create_chain+0xe2>
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d006      	beq.n	801402a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801401c:	69fa      	ldr	r2, [r7, #28]
 801401e:	6839      	ldr	r1, [r7, #0]
 8014020:	6938      	ldr	r0, [r7, #16]
 8014022:	f7ff fe10 	bl	8013c46 <put_fat>
 8014026:	4603      	mov	r3, r0
 8014028:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801402a:	7dfb      	ldrb	r3, [r7, #23]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d116      	bne.n	801405e <create_chain+0x116>
		fs->last_clst = ncl;
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	69fa      	ldr	r2, [r7, #28]
 8014034:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014036:	693b      	ldr	r3, [r7, #16]
 8014038:	699a      	ldr	r2, [r3, #24]
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	69db      	ldr	r3, [r3, #28]
 801403e:	3b02      	subs	r3, #2
 8014040:	429a      	cmp	r2, r3
 8014042:	d804      	bhi.n	801404e <create_chain+0x106>
 8014044:	693b      	ldr	r3, [r7, #16]
 8014046:	699b      	ldr	r3, [r3, #24]
 8014048:	1e5a      	subs	r2, r3, #1
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	791b      	ldrb	r3, [r3, #4]
 8014052:	f043 0301 	orr.w	r3, r3, #1
 8014056:	b2da      	uxtb	r2, r3
 8014058:	693b      	ldr	r3, [r7, #16]
 801405a:	711a      	strb	r2, [r3, #4]
 801405c:	e007      	b.n	801406e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801405e:	7dfb      	ldrb	r3, [r7, #23]
 8014060:	2b01      	cmp	r3, #1
 8014062:	d102      	bne.n	801406a <create_chain+0x122>
 8014064:	f04f 33ff 	mov.w	r3, #4294967295
 8014068:	e000      	b.n	801406c <create_chain+0x124>
 801406a:	2301      	movs	r3, #1
 801406c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801406e:	69fb      	ldr	r3, [r7, #28]
}
 8014070:	4618      	mov	r0, r3
 8014072:	3720      	adds	r7, #32
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014078:	b480      	push	{r7}
 801407a:	b087      	sub	sp, #28
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
 8014080:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801408c:	3304      	adds	r3, #4
 801408e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	899b      	ldrh	r3, [r3, #12]
 8014094:	461a      	mov	r2, r3
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	fbb3 f3f2 	udiv	r3, r3, r2
 801409c:	68fa      	ldr	r2, [r7, #12]
 801409e:	8952      	ldrh	r2, [r2, #10]
 80140a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80140a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80140a6:	693b      	ldr	r3, [r7, #16]
 80140a8:	1d1a      	adds	r2, r3, #4
 80140aa:	613a      	str	r2, [r7, #16]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d101      	bne.n	80140ba <clmt_clust+0x42>
 80140b6:	2300      	movs	r3, #0
 80140b8:	e010      	b.n	80140dc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80140ba:	697a      	ldr	r2, [r7, #20]
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	429a      	cmp	r2, r3
 80140c0:	d307      	bcc.n	80140d2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80140c2:	697a      	ldr	r2, [r7, #20]
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	1ad3      	subs	r3, r2, r3
 80140c8:	617b      	str	r3, [r7, #20]
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	3304      	adds	r3, #4
 80140ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80140d0:	e7e9      	b.n	80140a6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80140d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	4413      	add	r3, r2
}
 80140dc:	4618      	mov	r0, r3
 80140de:	371c      	adds	r7, #28
 80140e0:	46bd      	mov	sp, r7
 80140e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e6:	4770      	bx	lr

080140e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b086      	sub	sp, #24
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80140fe:	d204      	bcs.n	801410a <dir_sdi+0x22>
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	f003 031f 	and.w	r3, r3, #31
 8014106:	2b00      	cmp	r3, #0
 8014108:	d001      	beq.n	801410e <dir_sdi+0x26>
		return FR_INT_ERR;
 801410a:	2302      	movs	r3, #2
 801410c:	e071      	b.n	80141f2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	683a      	ldr	r2, [r7, #0]
 8014112:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	689b      	ldr	r3, [r3, #8]
 8014118:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d106      	bne.n	801412e <dir_sdi+0x46>
 8014120:	693b      	ldr	r3, [r7, #16]
 8014122:	781b      	ldrb	r3, [r3, #0]
 8014124:	2b02      	cmp	r3, #2
 8014126:	d902      	bls.n	801412e <dir_sdi+0x46>
		clst = fs->dirbase;
 8014128:	693b      	ldr	r3, [r7, #16]
 801412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801412c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d10c      	bne.n	801414e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	095b      	lsrs	r3, r3, #5
 8014138:	693a      	ldr	r2, [r7, #16]
 801413a:	8912      	ldrh	r2, [r2, #8]
 801413c:	4293      	cmp	r3, r2
 801413e:	d301      	bcc.n	8014144 <dir_sdi+0x5c>
 8014140:	2302      	movs	r3, #2
 8014142:	e056      	b.n	80141f2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	619a      	str	r2, [r3, #24]
 801414c:	e02d      	b.n	80141aa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801414e:	693b      	ldr	r3, [r7, #16]
 8014150:	895b      	ldrh	r3, [r3, #10]
 8014152:	461a      	mov	r2, r3
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	899b      	ldrh	r3, [r3, #12]
 8014158:	fb03 f302 	mul.w	r3, r3, r2
 801415c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801415e:	e019      	b.n	8014194 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6979      	ldr	r1, [r7, #20]
 8014164:	4618      	mov	r0, r3
 8014166:	f7ff fc9a 	bl	8013a9e <get_fat>
 801416a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014172:	d101      	bne.n	8014178 <dir_sdi+0x90>
 8014174:	2301      	movs	r3, #1
 8014176:	e03c      	b.n	80141f2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	2b01      	cmp	r3, #1
 801417c:	d904      	bls.n	8014188 <dir_sdi+0xa0>
 801417e:	693b      	ldr	r3, [r7, #16]
 8014180:	69db      	ldr	r3, [r3, #28]
 8014182:	697a      	ldr	r2, [r7, #20]
 8014184:	429a      	cmp	r2, r3
 8014186:	d301      	bcc.n	801418c <dir_sdi+0xa4>
 8014188:	2302      	movs	r3, #2
 801418a:	e032      	b.n	80141f2 <dir_sdi+0x10a>
			ofs -= csz;
 801418c:	683a      	ldr	r2, [r7, #0]
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	1ad3      	subs	r3, r2, r3
 8014192:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014194:	683a      	ldr	r2, [r7, #0]
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	429a      	cmp	r2, r3
 801419a:	d2e1      	bcs.n	8014160 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801419c:	6979      	ldr	r1, [r7, #20]
 801419e:	6938      	ldr	r0, [r7, #16]
 80141a0:	f7ff fc5e 	bl	8013a60 <clust2sect>
 80141a4:	4602      	mov	r2, r0
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	697a      	ldr	r2, [r7, #20]
 80141ae:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	699b      	ldr	r3, [r3, #24]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d101      	bne.n	80141bc <dir_sdi+0xd4>
 80141b8:	2302      	movs	r3, #2
 80141ba:	e01a      	b.n	80141f2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	699a      	ldr	r2, [r3, #24]
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	899b      	ldrh	r3, [r3, #12]
 80141c4:	4619      	mov	r1, r3
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80141cc:	441a      	add	r2, r3
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80141d2:	693b      	ldr	r3, [r7, #16]
 80141d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	899b      	ldrh	r3, [r3, #12]
 80141dc:	461a      	mov	r2, r3
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80141e4:	fb02 f200 	mul.w	r2, r2, r0
 80141e8:	1a9b      	subs	r3, r3, r2
 80141ea:	18ca      	adds	r2, r1, r3
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80141f0:	2300      	movs	r3, #0
}
 80141f2:	4618      	mov	r0, r3
 80141f4:	3718      	adds	r7, #24
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}

080141fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80141fa:	b580      	push	{r7, lr}
 80141fc:	b086      	sub	sp, #24
 80141fe:	af00      	add	r7, sp, #0
 8014200:	6078      	str	r0, [r7, #4]
 8014202:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	691b      	ldr	r3, [r3, #16]
 801420e:	3320      	adds	r3, #32
 8014210:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	699b      	ldr	r3, [r3, #24]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d003      	beq.n	8014222 <dir_next+0x28>
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014220:	d301      	bcc.n	8014226 <dir_next+0x2c>
 8014222:	2304      	movs	r3, #4
 8014224:	e0bb      	b.n	801439e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	899b      	ldrh	r3, [r3, #12]
 801422a:	461a      	mov	r2, r3
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014232:	fb02 f201 	mul.w	r2, r2, r1
 8014236:	1a9b      	subs	r3, r3, r2
 8014238:	2b00      	cmp	r3, #0
 801423a:	f040 809d 	bne.w	8014378 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	699b      	ldr	r3, [r3, #24]
 8014242:	1c5a      	adds	r2, r3, #1
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	695b      	ldr	r3, [r3, #20]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d10b      	bne.n	8014268 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	095b      	lsrs	r3, r3, #5
 8014254:	68fa      	ldr	r2, [r7, #12]
 8014256:	8912      	ldrh	r2, [r2, #8]
 8014258:	4293      	cmp	r3, r2
 801425a:	f0c0 808d 	bcc.w	8014378 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2200      	movs	r2, #0
 8014262:	619a      	str	r2, [r3, #24]
 8014264:	2304      	movs	r3, #4
 8014266:	e09a      	b.n	801439e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	899b      	ldrh	r3, [r3, #12]
 801426c:	461a      	mov	r2, r3
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	fbb3 f3f2 	udiv	r3, r3, r2
 8014274:	68fa      	ldr	r2, [r7, #12]
 8014276:	8952      	ldrh	r2, [r2, #10]
 8014278:	3a01      	subs	r2, #1
 801427a:	4013      	ands	r3, r2
 801427c:	2b00      	cmp	r3, #0
 801427e:	d17b      	bne.n	8014378 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014280:	687a      	ldr	r2, [r7, #4]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	695b      	ldr	r3, [r3, #20]
 8014286:	4619      	mov	r1, r3
 8014288:	4610      	mov	r0, r2
 801428a:	f7ff fc08 	bl	8013a9e <get_fat>
 801428e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	2b01      	cmp	r3, #1
 8014294:	d801      	bhi.n	801429a <dir_next+0xa0>
 8014296:	2302      	movs	r3, #2
 8014298:	e081      	b.n	801439e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142a0:	d101      	bne.n	80142a6 <dir_next+0xac>
 80142a2:	2301      	movs	r3, #1
 80142a4:	e07b      	b.n	801439e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	69db      	ldr	r3, [r3, #28]
 80142aa:	697a      	ldr	r2, [r7, #20]
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d359      	bcc.n	8014364 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80142b0:	683b      	ldr	r3, [r7, #0]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d104      	bne.n	80142c0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2200      	movs	r2, #0
 80142ba:	619a      	str	r2, [r3, #24]
 80142bc:	2304      	movs	r3, #4
 80142be:	e06e      	b.n	801439e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80142c0:	687a      	ldr	r2, [r7, #4]
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	695b      	ldr	r3, [r3, #20]
 80142c6:	4619      	mov	r1, r3
 80142c8:	4610      	mov	r0, r2
 80142ca:	f7ff fe3d 	bl	8013f48 <create_chain>
 80142ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d101      	bne.n	80142da <dir_next+0xe0>
 80142d6:	2307      	movs	r3, #7
 80142d8:	e061      	b.n	801439e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d101      	bne.n	80142e4 <dir_next+0xea>
 80142e0:	2302      	movs	r3, #2
 80142e2:	e05c      	b.n	801439e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ea:	d101      	bne.n	80142f0 <dir_next+0xf6>
 80142ec:	2301      	movs	r3, #1
 80142ee:	e056      	b.n	801439e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80142f0:	68f8      	ldr	r0, [r7, #12]
 80142f2:	f7ff fad3 	bl	801389c <sync_window>
 80142f6:	4603      	mov	r3, r0
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d001      	beq.n	8014300 <dir_next+0x106>
 80142fc:	2301      	movs	r3, #1
 80142fe:	e04e      	b.n	801439e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	899b      	ldrh	r3, [r3, #12]
 801430a:	461a      	mov	r2, r3
 801430c:	2100      	movs	r1, #0
 801430e:	f7ff fa68 	bl	80137e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014312:	2300      	movs	r3, #0
 8014314:	613b      	str	r3, [r7, #16]
 8014316:	6979      	ldr	r1, [r7, #20]
 8014318:	68f8      	ldr	r0, [r7, #12]
 801431a:	f7ff fba1 	bl	8013a60 <clust2sect>
 801431e:	4602      	mov	r2, r0
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	635a      	str	r2, [r3, #52]	; 0x34
 8014324:	e012      	b.n	801434c <dir_next+0x152>
						fs->wflag = 1;
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	2201      	movs	r2, #1
 801432a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801432c:	68f8      	ldr	r0, [r7, #12]
 801432e:	f7ff fab5 	bl	801389c <sync_window>
 8014332:	4603      	mov	r3, r0
 8014334:	2b00      	cmp	r3, #0
 8014336:	d001      	beq.n	801433c <dir_next+0x142>
 8014338:	2301      	movs	r3, #1
 801433a:	e030      	b.n	801439e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	3301      	adds	r3, #1
 8014340:	613b      	str	r3, [r7, #16]
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014346:	1c5a      	adds	r2, r3, #1
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	635a      	str	r2, [r3, #52]	; 0x34
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	895b      	ldrh	r3, [r3, #10]
 8014350:	461a      	mov	r2, r3
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	4293      	cmp	r3, r2
 8014356:	d3e6      	bcc.n	8014326 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801435c:	693b      	ldr	r3, [r7, #16]
 801435e:	1ad2      	subs	r2, r2, r3
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	697a      	ldr	r2, [r7, #20]
 8014368:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 801436a:	6979      	ldr	r1, [r7, #20]
 801436c:	68f8      	ldr	r0, [r7, #12]
 801436e:	f7ff fb77 	bl	8013a60 <clust2sect>
 8014372:	4602      	mov	r2, r0
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	68ba      	ldr	r2, [r7, #8]
 801437c:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	899b      	ldrh	r3, [r3, #12]
 8014388:	461a      	mov	r2, r3
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014390:	fb02 f200 	mul.w	r2, r2, r0
 8014394:	1a9b      	subs	r3, r3, r2
 8014396:	18ca      	adds	r2, r1, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 801439c:	2300      	movs	r3, #0
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3718      	adds	r7, #24
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}

080143a6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b086      	sub	sp, #24
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
 80143ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80143b6:	2100      	movs	r1, #0
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f7ff fe95 	bl	80140e8 <dir_sdi>
 80143be:	4603      	mov	r3, r0
 80143c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80143c2:	7dfb      	ldrb	r3, [r7, #23]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d12b      	bne.n	8014420 <dir_alloc+0x7a>
		n = 0;
 80143c8:	2300      	movs	r3, #0
 80143ca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	699b      	ldr	r3, [r3, #24]
 80143d0:	4619      	mov	r1, r3
 80143d2:	68f8      	ldr	r0, [r7, #12]
 80143d4:	f7ff faa6 	bl	8013924 <move_window>
 80143d8:	4603      	mov	r3, r0
 80143da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80143dc:	7dfb      	ldrb	r3, [r7, #23]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d11d      	bne.n	801441e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	69db      	ldr	r3, [r3, #28]
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	2be5      	cmp	r3, #229	; 0xe5
 80143ea:	d004      	beq.n	80143f6 <dir_alloc+0x50>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	69db      	ldr	r3, [r3, #28]
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d107      	bne.n	8014406 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80143f6:	693b      	ldr	r3, [r7, #16]
 80143f8:	3301      	adds	r3, #1
 80143fa:	613b      	str	r3, [r7, #16]
 80143fc:	693a      	ldr	r2, [r7, #16]
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	429a      	cmp	r2, r3
 8014402:	d102      	bne.n	801440a <dir_alloc+0x64>
 8014404:	e00c      	b.n	8014420 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014406:	2300      	movs	r3, #0
 8014408:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801440a:	2101      	movs	r1, #1
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7ff fef4 	bl	80141fa <dir_next>
 8014412:	4603      	mov	r3, r0
 8014414:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014416:	7dfb      	ldrb	r3, [r7, #23]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d0d7      	beq.n	80143cc <dir_alloc+0x26>
 801441c:	e000      	b.n	8014420 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801441e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014420:	7dfb      	ldrb	r3, [r7, #23]
 8014422:	2b04      	cmp	r3, #4
 8014424:	d101      	bne.n	801442a <dir_alloc+0x84>
 8014426:	2307      	movs	r3, #7
 8014428:	75fb      	strb	r3, [r7, #23]
	return res;
 801442a:	7dfb      	ldrb	r3, [r7, #23]
}
 801442c:	4618      	mov	r0, r3
 801442e:	3718      	adds	r7, #24
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
 801443c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	331a      	adds	r3, #26
 8014442:	4618      	mov	r0, r3
 8014444:	f7ff f92a 	bl	801369c <ld_word>
 8014448:	4603      	mov	r3, r0
 801444a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	781b      	ldrb	r3, [r3, #0]
 8014450:	2b03      	cmp	r3, #3
 8014452:	d109      	bne.n	8014468 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	3314      	adds	r3, #20
 8014458:	4618      	mov	r0, r3
 801445a:	f7ff f91f 	bl	801369c <ld_word>
 801445e:	4603      	mov	r3, r0
 8014460:	041b      	lsls	r3, r3, #16
 8014462:	68fa      	ldr	r2, [r7, #12]
 8014464:	4313      	orrs	r3, r2
 8014466:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8014468:	68fb      	ldr	r3, [r7, #12]
}
 801446a:	4618      	mov	r0, r3
 801446c:	3710      	adds	r7, #16
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}

08014472 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014472:	b580      	push	{r7, lr}
 8014474:	b084      	sub	sp, #16
 8014476:	af00      	add	r7, sp, #0
 8014478:	60f8      	str	r0, [r7, #12]
 801447a:	60b9      	str	r1, [r7, #8]
 801447c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	331a      	adds	r3, #26
 8014482:	687a      	ldr	r2, [r7, #4]
 8014484:	b292      	uxth	r2, r2
 8014486:	4611      	mov	r1, r2
 8014488:	4618      	mov	r0, r3
 801448a:	f7ff f942 	bl	8013712 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	2b03      	cmp	r3, #3
 8014494:	d109      	bne.n	80144aa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	f103 0214 	add.w	r2, r3, #20
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	0c1b      	lsrs	r3, r3, #16
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	4619      	mov	r1, r3
 80144a4:	4610      	mov	r0, r2
 80144a6:	f7ff f934 	bl	8013712 <st_word>
	}
}
 80144aa:	bf00      	nop
 80144ac:	3710      	adds	r7, #16
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
	...

080144b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80144b4:	b590      	push	{r4, r7, lr}
 80144b6:	b087      	sub	sp, #28
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	331a      	adds	r3, #26
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7ff f8ea 	bl	801369c <ld_word>
 80144c8:	4603      	mov	r3, r0
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d001      	beq.n	80144d2 <cmp_lfn+0x1e>
 80144ce:	2300      	movs	r3, #0
 80144d0:	e059      	b.n	8014586 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80144d2:	683b      	ldr	r3, [r7, #0]
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80144da:	1e5a      	subs	r2, r3, #1
 80144dc:	4613      	mov	r3, r2
 80144de:	005b      	lsls	r3, r3, #1
 80144e0:	4413      	add	r3, r2
 80144e2:	009b      	lsls	r3, r3, #2
 80144e4:	4413      	add	r3, r2
 80144e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80144e8:	2301      	movs	r3, #1
 80144ea:	81fb      	strh	r3, [r7, #14]
 80144ec:	2300      	movs	r3, #0
 80144ee:	613b      	str	r3, [r7, #16]
 80144f0:	e033      	b.n	801455a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80144f2:	4a27      	ldr	r2, [pc, #156]	; (8014590 <cmp_lfn+0xdc>)
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	4413      	add	r3, r2
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	461a      	mov	r2, r3
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	4413      	add	r3, r2
 8014500:	4618      	mov	r0, r3
 8014502:	f7ff f8cb 	bl	801369c <ld_word>
 8014506:	4603      	mov	r3, r0
 8014508:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801450a:	89fb      	ldrh	r3, [r7, #14]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d01a      	beq.n	8014546 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	2bfe      	cmp	r3, #254	; 0xfe
 8014514:	d812      	bhi.n	801453c <cmp_lfn+0x88>
 8014516:	89bb      	ldrh	r3, [r7, #12]
 8014518:	4618      	mov	r0, r3
 801451a:	f001 feb9 	bl	8016290 <ff_wtoupper>
 801451e:	4603      	mov	r3, r0
 8014520:	461c      	mov	r4, r3
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	1c5a      	adds	r2, r3, #1
 8014526:	617a      	str	r2, [r7, #20]
 8014528:	005b      	lsls	r3, r3, #1
 801452a:	687a      	ldr	r2, [r7, #4]
 801452c:	4413      	add	r3, r2
 801452e:	881b      	ldrh	r3, [r3, #0]
 8014530:	4618      	mov	r0, r3
 8014532:	f001 fead 	bl	8016290 <ff_wtoupper>
 8014536:	4603      	mov	r3, r0
 8014538:	429c      	cmp	r4, r3
 801453a:	d001      	beq.n	8014540 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801453c:	2300      	movs	r3, #0
 801453e:	e022      	b.n	8014586 <cmp_lfn+0xd2>
			}
			wc = uc;
 8014540:	89bb      	ldrh	r3, [r7, #12]
 8014542:	81fb      	strh	r3, [r7, #14]
 8014544:	e006      	b.n	8014554 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014546:	89bb      	ldrh	r3, [r7, #12]
 8014548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801454c:	4293      	cmp	r3, r2
 801454e:	d001      	beq.n	8014554 <cmp_lfn+0xa0>
 8014550:	2300      	movs	r3, #0
 8014552:	e018      	b.n	8014586 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	3301      	adds	r3, #1
 8014558:	613b      	str	r3, [r7, #16]
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	2b0c      	cmp	r3, #12
 801455e:	d9c8      	bls.n	80144f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014568:	2b00      	cmp	r3, #0
 801456a:	d00b      	beq.n	8014584 <cmp_lfn+0xd0>
 801456c:	89fb      	ldrh	r3, [r7, #14]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d008      	beq.n	8014584 <cmp_lfn+0xd0>
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	005b      	lsls	r3, r3, #1
 8014576:	687a      	ldr	r2, [r7, #4]
 8014578:	4413      	add	r3, r2
 801457a:	881b      	ldrh	r3, [r3, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d001      	beq.n	8014584 <cmp_lfn+0xd0>
 8014580:	2300      	movs	r3, #0
 8014582:	e000      	b.n	8014586 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8014584:	2301      	movs	r3, #1
}
 8014586:	4618      	mov	r0, r3
 8014588:	371c      	adds	r7, #28
 801458a:	46bd      	mov	sp, r7
 801458c:	bd90      	pop	{r4, r7, pc}
 801458e:	bf00      	nop
 8014590:	08017870 	.word	0x08017870

08014594 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b088      	sub	sp, #32
 8014598:	af00      	add	r7, sp, #0
 801459a:	60f8      	str	r0, [r7, #12]
 801459c:	60b9      	str	r1, [r7, #8]
 801459e:	4611      	mov	r1, r2
 80145a0:	461a      	mov	r2, r3
 80145a2:	460b      	mov	r3, r1
 80145a4:	71fb      	strb	r3, [r7, #7]
 80145a6:	4613      	mov	r3, r2
 80145a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80145aa:	68bb      	ldr	r3, [r7, #8]
 80145ac:	330d      	adds	r3, #13
 80145ae:	79ba      	ldrb	r2, [r7, #6]
 80145b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80145b2:	68bb      	ldr	r3, [r7, #8]
 80145b4:	330b      	adds	r3, #11
 80145b6:	220f      	movs	r2, #15
 80145b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	330c      	adds	r3, #12
 80145be:	2200      	movs	r2, #0
 80145c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	331a      	adds	r3, #26
 80145c6:	2100      	movs	r1, #0
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7ff f8a2 	bl	8013712 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80145ce:	79fb      	ldrb	r3, [r7, #7]
 80145d0:	1e5a      	subs	r2, r3, #1
 80145d2:	4613      	mov	r3, r2
 80145d4:	005b      	lsls	r3, r3, #1
 80145d6:	4413      	add	r3, r2
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	4413      	add	r3, r2
 80145dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80145de:	2300      	movs	r3, #0
 80145e0:	82fb      	strh	r3, [r7, #22]
 80145e2:	2300      	movs	r3, #0
 80145e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80145e6:	8afb      	ldrh	r3, [r7, #22]
 80145e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145ec:	4293      	cmp	r3, r2
 80145ee:	d007      	beq.n	8014600 <put_lfn+0x6c>
 80145f0:	69fb      	ldr	r3, [r7, #28]
 80145f2:	1c5a      	adds	r2, r3, #1
 80145f4:	61fa      	str	r2, [r7, #28]
 80145f6:	005b      	lsls	r3, r3, #1
 80145f8:	68fa      	ldr	r2, [r7, #12]
 80145fa:	4413      	add	r3, r2
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8014600:	4a17      	ldr	r2, [pc, #92]	; (8014660 <put_lfn+0xcc>)
 8014602:	69bb      	ldr	r3, [r7, #24]
 8014604:	4413      	add	r3, r2
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	461a      	mov	r2, r3
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	4413      	add	r3, r2
 801460e:	8afa      	ldrh	r2, [r7, #22]
 8014610:	4611      	mov	r1, r2
 8014612:	4618      	mov	r0, r3
 8014614:	f7ff f87d 	bl	8013712 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8014618:	8afb      	ldrh	r3, [r7, #22]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d102      	bne.n	8014624 <put_lfn+0x90>
 801461e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014622:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8014624:	69bb      	ldr	r3, [r7, #24]
 8014626:	3301      	adds	r3, #1
 8014628:	61bb      	str	r3, [r7, #24]
 801462a:	69bb      	ldr	r3, [r7, #24]
 801462c:	2b0c      	cmp	r3, #12
 801462e:	d9da      	bls.n	80145e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8014630:	8afb      	ldrh	r3, [r7, #22]
 8014632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014636:	4293      	cmp	r3, r2
 8014638:	d006      	beq.n	8014648 <put_lfn+0xb4>
 801463a:	69fb      	ldr	r3, [r7, #28]
 801463c:	005b      	lsls	r3, r3, #1
 801463e:	68fa      	ldr	r2, [r7, #12]
 8014640:	4413      	add	r3, r2
 8014642:	881b      	ldrh	r3, [r3, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d103      	bne.n	8014650 <put_lfn+0xbc>
 8014648:	79fb      	ldrb	r3, [r7, #7]
 801464a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801464e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	79fa      	ldrb	r2, [r7, #7]
 8014654:	701a      	strb	r2, [r3, #0]
}
 8014656:	bf00      	nop
 8014658:	3720      	adds	r7, #32
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	08017870 	.word	0x08017870

08014664 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b08c      	sub	sp, #48	; 0x30
 8014668:	af00      	add	r7, sp, #0
 801466a:	60f8      	str	r0, [r7, #12]
 801466c:	60b9      	str	r1, [r7, #8]
 801466e:	607a      	str	r2, [r7, #4]
 8014670:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8014672:	220b      	movs	r2, #11
 8014674:	68b9      	ldr	r1, [r7, #8]
 8014676:	68f8      	ldr	r0, [r7, #12]
 8014678:	f7ff f892 	bl	80137a0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	2b05      	cmp	r3, #5
 8014680:	d92b      	bls.n	80146da <gen_numname+0x76>
		sr = seq;
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8014686:	e022      	b.n	80146ce <gen_numname+0x6a>
			wc = *lfn++;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	1c9a      	adds	r2, r3, #2
 801468c:	607a      	str	r2, [r7, #4]
 801468e:	881b      	ldrh	r3, [r3, #0]
 8014690:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8014692:	2300      	movs	r3, #0
 8014694:	62bb      	str	r3, [r7, #40]	; 0x28
 8014696:	e017      	b.n	80146c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8014698:	69fb      	ldr	r3, [r7, #28]
 801469a:	005a      	lsls	r2, r3, #1
 801469c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801469e:	f003 0301 	and.w	r3, r3, #1
 80146a2:	4413      	add	r3, r2
 80146a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80146a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146a8:	085b      	lsrs	r3, r3, #1
 80146aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d005      	beq.n	80146c2 <gen_numname+0x5e>
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80146bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80146c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80146c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c4:	3301      	adds	r3, #1
 80146c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80146c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ca:	2b0f      	cmp	r3, #15
 80146cc:	d9e4      	bls.n	8014698 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	881b      	ldrh	r3, [r3, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d1d8      	bne.n	8014688 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80146d6:	69fb      	ldr	r3, [r7, #28]
 80146d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80146da:	2307      	movs	r3, #7
 80146dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	b2db      	uxtb	r3, r3
 80146e2:	f003 030f 	and.w	r3, r3, #15
 80146e6:	b2db      	uxtb	r3, r3
 80146e8:	3330      	adds	r3, #48	; 0x30
 80146ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80146ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146f2:	2b39      	cmp	r3, #57	; 0x39
 80146f4:	d904      	bls.n	8014700 <gen_numname+0x9c>
 80146f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146fa:	3307      	adds	r3, #7
 80146fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8014700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014702:	1e5a      	subs	r2, r3, #1
 8014704:	62ba      	str	r2, [r7, #40]	; 0x28
 8014706:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801470a:	4413      	add	r3, r2
 801470c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014710:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	091b      	lsrs	r3, r3, #4
 8014718:	603b      	str	r3, [r7, #0]
	} while (seq);
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d1de      	bne.n	80146de <gen_numname+0x7a>
	ns[i] = '~';
 8014720:	f107 0214 	add.w	r2, r7, #20
 8014724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014726:	4413      	add	r3, r2
 8014728:	227e      	movs	r2, #126	; 0x7e
 801472a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801472c:	2300      	movs	r3, #0
 801472e:	627b      	str	r3, [r7, #36]	; 0x24
 8014730:	e002      	b.n	8014738 <gen_numname+0xd4>
 8014732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014734:	3301      	adds	r3, #1
 8014736:	627b      	str	r3, [r7, #36]	; 0x24
 8014738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801473c:	429a      	cmp	r2, r3
 801473e:	d205      	bcs.n	801474c <gen_numname+0xe8>
 8014740:	68fa      	ldr	r2, [r7, #12]
 8014742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014744:	4413      	add	r3, r2
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	2b20      	cmp	r3, #32
 801474a:	d1f2      	bne.n	8014732 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801474e:	2b07      	cmp	r3, #7
 8014750:	d808      	bhi.n	8014764 <gen_numname+0x100>
 8014752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014754:	1c5a      	adds	r2, r3, #1
 8014756:	62ba      	str	r2, [r7, #40]	; 0x28
 8014758:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801475c:	4413      	add	r3, r2
 801475e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8014762:	e000      	b.n	8014766 <gen_numname+0x102>
 8014764:	2120      	movs	r1, #32
 8014766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014768:	1c5a      	adds	r2, r3, #1
 801476a:	627a      	str	r2, [r7, #36]	; 0x24
 801476c:	68fa      	ldr	r2, [r7, #12]
 801476e:	4413      	add	r3, r2
 8014770:	460a      	mov	r2, r1
 8014772:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8014774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014776:	2b07      	cmp	r3, #7
 8014778:	d9e8      	bls.n	801474c <gen_numname+0xe8>
}
 801477a:	bf00      	nop
 801477c:	bf00      	nop
 801477e:	3730      	adds	r7, #48	; 0x30
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014784:	b480      	push	{r7}
 8014786:	b085      	sub	sp, #20
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801478c:	2300      	movs	r3, #0
 801478e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8014790:	230b      	movs	r3, #11
 8014792:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014794:	7bfb      	ldrb	r3, [r7, #15]
 8014796:	b2da      	uxtb	r2, r3
 8014798:	0852      	lsrs	r2, r2, #1
 801479a:	01db      	lsls	r3, r3, #7
 801479c:	4313      	orrs	r3, r2
 801479e:	b2da      	uxtb	r2, r3
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	1c59      	adds	r1, r3, #1
 80147a4:	6079      	str	r1, [r7, #4]
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	4413      	add	r3, r2
 80147aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	3b01      	subs	r3, #1
 80147b0:	60bb      	str	r3, [r7, #8]
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d1ed      	bne.n	8014794 <sum_sfn+0x10>
	return sum;
 80147b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3714      	adds	r7, #20
 80147be:	46bd      	mov	sp, r7
 80147c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c4:	4770      	bx	lr

080147c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80147c6:	b580      	push	{r7, lr}
 80147c8:	b086      	sub	sp, #24
 80147ca:	af00      	add	r7, sp, #0
 80147cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80147d4:	2100      	movs	r1, #0
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f7ff fc86 	bl	80140e8 <dir_sdi>
 80147dc:	4603      	mov	r3, r0
 80147de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80147e0:	7dfb      	ldrb	r3, [r7, #23]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d001      	beq.n	80147ea <dir_find+0x24>
 80147e6:	7dfb      	ldrb	r3, [r7, #23]
 80147e8:	e0a9      	b.n	801493e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80147ea:	23ff      	movs	r3, #255	; 0xff
 80147ec:	753b      	strb	r3, [r7, #20]
 80147ee:	7d3b      	ldrb	r3, [r7, #20]
 80147f0:	757b      	strb	r3, [r7, #21]
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	f04f 32ff 	mov.w	r2, #4294967295
 80147f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	699b      	ldr	r3, [r3, #24]
 80147fe:	4619      	mov	r1, r3
 8014800:	6938      	ldr	r0, [r7, #16]
 8014802:	f7ff f88f 	bl	8013924 <move_window>
 8014806:	4603      	mov	r3, r0
 8014808:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801480a:	7dfb      	ldrb	r3, [r7, #23]
 801480c:	2b00      	cmp	r3, #0
 801480e:	f040 8090 	bne.w	8014932 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	69db      	ldr	r3, [r3, #28]
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801481a:	7dbb      	ldrb	r3, [r7, #22]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d102      	bne.n	8014826 <dir_find+0x60>
 8014820:	2304      	movs	r3, #4
 8014822:	75fb      	strb	r3, [r7, #23]
 8014824:	e08a      	b.n	801493c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	69db      	ldr	r3, [r3, #28]
 801482a:	330b      	adds	r3, #11
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014832:	73fb      	strb	r3, [r7, #15]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	7bfa      	ldrb	r2, [r7, #15]
 8014838:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801483a:	7dbb      	ldrb	r3, [r7, #22]
 801483c:	2be5      	cmp	r3, #229	; 0xe5
 801483e:	d007      	beq.n	8014850 <dir_find+0x8a>
 8014840:	7bfb      	ldrb	r3, [r7, #15]
 8014842:	f003 0308 	and.w	r3, r3, #8
 8014846:	2b00      	cmp	r3, #0
 8014848:	d009      	beq.n	801485e <dir_find+0x98>
 801484a:	7bfb      	ldrb	r3, [r7, #15]
 801484c:	2b0f      	cmp	r3, #15
 801484e:	d006      	beq.n	801485e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014850:	23ff      	movs	r3, #255	; 0xff
 8014852:	757b      	strb	r3, [r7, #21]
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	f04f 32ff 	mov.w	r2, #4294967295
 801485a:	62da      	str	r2, [r3, #44]	; 0x2c
 801485c:	e05e      	b.n	801491c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801485e:	7bfb      	ldrb	r3, [r7, #15]
 8014860:	2b0f      	cmp	r3, #15
 8014862:	d136      	bne.n	80148d2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801486e:	2b00      	cmp	r3, #0
 8014870:	d154      	bne.n	801491c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8014872:	7dbb      	ldrb	r3, [r7, #22]
 8014874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014878:	2b00      	cmp	r3, #0
 801487a:	d00d      	beq.n	8014898 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	69db      	ldr	r3, [r3, #28]
 8014880:	7b5b      	ldrb	r3, [r3, #13]
 8014882:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8014884:	7dbb      	ldrb	r3, [r7, #22]
 8014886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801488a:	75bb      	strb	r3, [r7, #22]
 801488c:	7dbb      	ldrb	r3, [r7, #22]
 801488e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	691a      	ldr	r2, [r3, #16]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014898:	7dba      	ldrb	r2, [r7, #22]
 801489a:	7d7b      	ldrb	r3, [r7, #21]
 801489c:	429a      	cmp	r2, r3
 801489e:	d115      	bne.n	80148cc <dir_find+0x106>
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	69db      	ldr	r3, [r3, #28]
 80148a4:	330d      	adds	r3, #13
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	7d3a      	ldrb	r2, [r7, #20]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d10e      	bne.n	80148cc <dir_find+0x106>
 80148ae:	693b      	ldr	r3, [r7, #16]
 80148b0:	691a      	ldr	r2, [r3, #16]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	69db      	ldr	r3, [r3, #28]
 80148b6:	4619      	mov	r1, r3
 80148b8:	4610      	mov	r0, r2
 80148ba:	f7ff fdfb 	bl	80144b4 <cmp_lfn>
 80148be:	4603      	mov	r3, r0
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d003      	beq.n	80148cc <dir_find+0x106>
 80148c4:	7d7b      	ldrb	r3, [r7, #21]
 80148c6:	3b01      	subs	r3, #1
 80148c8:	b2db      	uxtb	r3, r3
 80148ca:	e000      	b.n	80148ce <dir_find+0x108>
 80148cc:	23ff      	movs	r3, #255	; 0xff
 80148ce:	757b      	strb	r3, [r7, #21]
 80148d0:	e024      	b.n	801491c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80148d2:	7d7b      	ldrb	r3, [r7, #21]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d109      	bne.n	80148ec <dir_find+0x126>
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	69db      	ldr	r3, [r3, #28]
 80148dc:	4618      	mov	r0, r3
 80148de:	f7ff ff51 	bl	8014784 <sum_sfn>
 80148e2:	4603      	mov	r3, r0
 80148e4:	461a      	mov	r2, r3
 80148e6:	7d3b      	ldrb	r3, [r7, #20]
 80148e8:	4293      	cmp	r3, r2
 80148ea:	d024      	beq.n	8014936 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80148f2:	f003 0301 	and.w	r3, r3, #1
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d10a      	bne.n	8014910 <dir_find+0x14a>
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	69d8      	ldr	r0, [r3, #28]
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	3320      	adds	r3, #32
 8014902:	220b      	movs	r2, #11
 8014904:	4619      	mov	r1, r3
 8014906:	f7fe ff87 	bl	8013818 <mem_cmp>
 801490a:	4603      	mov	r3, r0
 801490c:	2b00      	cmp	r3, #0
 801490e:	d014      	beq.n	801493a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014910:	23ff      	movs	r3, #255	; 0xff
 8014912:	757b      	strb	r3, [r7, #21]
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f04f 32ff 	mov.w	r2, #4294967295
 801491a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801491c:	2100      	movs	r1, #0
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7ff fc6b 	bl	80141fa <dir_next>
 8014924:	4603      	mov	r3, r0
 8014926:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014928:	7dfb      	ldrb	r3, [r7, #23]
 801492a:	2b00      	cmp	r3, #0
 801492c:	f43f af65 	beq.w	80147fa <dir_find+0x34>
 8014930:	e004      	b.n	801493c <dir_find+0x176>
		if (res != FR_OK) break;
 8014932:	bf00      	nop
 8014934:	e002      	b.n	801493c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014936:	bf00      	nop
 8014938:	e000      	b.n	801493c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801493a:	bf00      	nop

	return res;
 801493c:	7dfb      	ldrb	r3, [r7, #23]
}
 801493e:	4618      	mov	r0, r3
 8014940:	3718      	adds	r7, #24
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}
	...

08014948 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b08c      	sub	sp, #48	; 0x30
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801495c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8014960:	2b00      	cmp	r3, #0
 8014962:	d001      	beq.n	8014968 <dir_register+0x20>
 8014964:	2306      	movs	r3, #6
 8014966:	e0e0      	b.n	8014b2a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8014968:	2300      	movs	r3, #0
 801496a:	627b      	str	r3, [r7, #36]	; 0x24
 801496c:	e002      	b.n	8014974 <dir_register+0x2c>
 801496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014970:	3301      	adds	r3, #1
 8014972:	627b      	str	r3, [r7, #36]	; 0x24
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	691a      	ldr	r2, [r3, #16]
 8014978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497a:	005b      	lsls	r3, r3, #1
 801497c:	4413      	add	r3, r2
 801497e:	881b      	ldrh	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d1f4      	bne.n	801496e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f103 0120 	add.w	r1, r3, #32
 801498a:	f107 030c 	add.w	r3, r7, #12
 801498e:	220c      	movs	r2, #12
 8014990:	4618      	mov	r0, r3
 8014992:	f7fe ff05 	bl	80137a0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8014996:	7dfb      	ldrb	r3, [r7, #23]
 8014998:	f003 0301 	and.w	r3, r3, #1
 801499c:	2b00      	cmp	r3, #0
 801499e:	d032      	beq.n	8014a06 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2240      	movs	r2, #64	; 0x40
 80149a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 80149a8:	2301      	movs	r3, #1
 80149aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80149ac:	e016      	b.n	80149dc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	f103 0020 	add.w	r0, r3, #32
 80149b4:	69fb      	ldr	r3, [r7, #28]
 80149b6:	691a      	ldr	r2, [r3, #16]
 80149b8:	f107 010c 	add.w	r1, r7, #12
 80149bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149be:	f7ff fe51 	bl	8014664 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	f7ff feff 	bl	80147c6 <dir_find>
 80149c8:	4603      	mov	r3, r0
 80149ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80149ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d106      	bne.n	80149e4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80149d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d8:	3301      	adds	r3, #1
 80149da:	62bb      	str	r3, [r7, #40]	; 0x28
 80149dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149de:	2b63      	cmp	r3, #99	; 0x63
 80149e0:	d9e5      	bls.n	80149ae <dir_register+0x66>
 80149e2:	e000      	b.n	80149e6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80149e4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80149e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149e8:	2b64      	cmp	r3, #100	; 0x64
 80149ea:	d101      	bne.n	80149f0 <dir_register+0xa8>
 80149ec:	2307      	movs	r3, #7
 80149ee:	e09c      	b.n	8014b2a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80149f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149f4:	2b04      	cmp	r3, #4
 80149f6:	d002      	beq.n	80149fe <dir_register+0xb6>
 80149f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149fc:	e095      	b.n	8014b2a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80149fe:	7dfa      	ldrb	r2, [r7, #23]
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8014a06:	7dfb      	ldrb	r3, [r7, #23]
 8014a08:	f003 0302 	and.w	r3, r3, #2
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d007      	beq.n	8014a20 <dir_register+0xd8>
 8014a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a12:	330c      	adds	r3, #12
 8014a14:	4a47      	ldr	r2, [pc, #284]	; (8014b34 <dir_register+0x1ec>)
 8014a16:	fba2 2303 	umull	r2, r3, r2, r3
 8014a1a:	089b      	lsrs	r3, r3, #2
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	e000      	b.n	8014a22 <dir_register+0xda>
 8014a20:	2301      	movs	r3, #1
 8014a22:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8014a24:	6a39      	ldr	r1, [r7, #32]
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f7ff fcbd 	bl	80143a6 <dir_alloc>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8014a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d148      	bne.n	8014acc <dir_register+0x184>
 8014a3a:	6a3b      	ldr	r3, [r7, #32]
 8014a3c:	3b01      	subs	r3, #1
 8014a3e:	623b      	str	r3, [r7, #32]
 8014a40:	6a3b      	ldr	r3, [r7, #32]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d042      	beq.n	8014acc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	691a      	ldr	r2, [r3, #16]
 8014a4a:	6a3b      	ldr	r3, [r7, #32]
 8014a4c:	015b      	lsls	r3, r3, #5
 8014a4e:	1ad3      	subs	r3, r2, r3
 8014a50:	4619      	mov	r1, r3
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f7ff fb48 	bl	80140e8 <dir_sdi>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8014a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d132      	bne.n	8014acc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	3320      	adds	r3, #32
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7ff fe8a 	bl	8014784 <sum_sfn>
 8014a70:	4603      	mov	r3, r0
 8014a72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	699b      	ldr	r3, [r3, #24]
 8014a78:	4619      	mov	r1, r3
 8014a7a:	69f8      	ldr	r0, [r7, #28]
 8014a7c:	f7fe ff52 	bl	8013924 <move_window>
 8014a80:	4603      	mov	r3, r0
 8014a82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8014a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d11d      	bne.n	8014aca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8014a8e:	69fb      	ldr	r3, [r7, #28]
 8014a90:	6918      	ldr	r0, [r3, #16]
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	69d9      	ldr	r1, [r3, #28]
 8014a96:	6a3b      	ldr	r3, [r7, #32]
 8014a98:	b2da      	uxtb	r2, r3
 8014a9a:	7efb      	ldrb	r3, [r7, #27]
 8014a9c:	f7ff fd7a 	bl	8014594 <put_lfn>
				fs->wflag = 1;
 8014aa0:	69fb      	ldr	r3, [r7, #28]
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8014aa6:	2100      	movs	r1, #0
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f7ff fba6 	bl	80141fa <dir_next>
 8014aae:	4603      	mov	r3, r0
 8014ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8014ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d107      	bne.n	8014acc <dir_register+0x184>
 8014abc:	6a3b      	ldr	r3, [r7, #32]
 8014abe:	3b01      	subs	r3, #1
 8014ac0:	623b      	str	r3, [r7, #32]
 8014ac2:	6a3b      	ldr	r3, [r7, #32]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d1d5      	bne.n	8014a74 <dir_register+0x12c>
 8014ac8:	e000      	b.n	8014acc <dir_register+0x184>
				if (res != FR_OK) break;
 8014aca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8014acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d128      	bne.n	8014b26 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	699b      	ldr	r3, [r3, #24]
 8014ad8:	4619      	mov	r1, r3
 8014ada:	69f8      	ldr	r0, [r7, #28]
 8014adc:	f7fe ff22 	bl	8013924 <move_window>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8014ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d11b      	bne.n	8014b26 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	69db      	ldr	r3, [r3, #28]
 8014af2:	2220      	movs	r2, #32
 8014af4:	2100      	movs	r1, #0
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7fe fe73 	bl	80137e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	69d8      	ldr	r0, [r3, #28]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	3320      	adds	r3, #32
 8014b04:	220b      	movs	r2, #11
 8014b06:	4619      	mov	r1, r3
 8014b08:	f7fe fe4a 	bl	80137a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	69db      	ldr	r3, [r3, #28]
 8014b16:	330c      	adds	r3, #12
 8014b18:	f002 0218 	and.w	r2, r2, #24
 8014b1c:	b2d2      	uxtb	r2, r2
 8014b1e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8014b20:	69fb      	ldr	r3, [r7, #28]
 8014b22:	2201      	movs	r2, #1
 8014b24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8014b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3730      	adds	r7, #48	; 0x30
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
 8014b32:	bf00      	nop
 8014b34:	4ec4ec4f 	.word	0x4ec4ec4f

08014b38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b08a      	sub	sp, #40	; 0x28
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	613b      	str	r3, [r7, #16]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	691b      	ldr	r3, [r3, #16]
 8014b4e:	60fb      	str	r3, [r7, #12]
 8014b50:	2300      	movs	r3, #0
 8014b52:	617b      	str	r3, [r7, #20]
 8014b54:	697b      	ldr	r3, [r7, #20]
 8014b56:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	1c5a      	adds	r2, r3, #1
 8014b5c:	61ba      	str	r2, [r7, #24]
 8014b5e:	693a      	ldr	r2, [r7, #16]
 8014b60:	4413      	add	r3, r2
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8014b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b68:	2b1f      	cmp	r3, #31
 8014b6a:	d940      	bls.n	8014bee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8014b6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b6e:	2b2f      	cmp	r3, #47	; 0x2f
 8014b70:	d006      	beq.n	8014b80 <create_name+0x48>
 8014b72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b74:	2b5c      	cmp	r3, #92	; 0x5c
 8014b76:	d110      	bne.n	8014b9a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014b78:	e002      	b.n	8014b80 <create_name+0x48>
 8014b7a:	69bb      	ldr	r3, [r7, #24]
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	61bb      	str	r3, [r7, #24]
 8014b80:	693a      	ldr	r2, [r7, #16]
 8014b82:	69bb      	ldr	r3, [r7, #24]
 8014b84:	4413      	add	r3, r2
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	2b2f      	cmp	r3, #47	; 0x2f
 8014b8a:	d0f6      	beq.n	8014b7a <create_name+0x42>
 8014b8c:	693a      	ldr	r2, [r7, #16]
 8014b8e:	69bb      	ldr	r3, [r7, #24]
 8014b90:	4413      	add	r3, r2
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	2b5c      	cmp	r3, #92	; 0x5c
 8014b96:	d0f0      	beq.n	8014b7a <create_name+0x42>
			break;
 8014b98:	e02a      	b.n	8014bf0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	2bfe      	cmp	r3, #254	; 0xfe
 8014b9e:	d901      	bls.n	8014ba4 <create_name+0x6c>
 8014ba0:	2306      	movs	r3, #6
 8014ba2:	e177      	b.n	8014e94 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8014ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8014baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014bac:	2101      	movs	r1, #1
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f001 fb32 	bl	8016218 <ff_convert>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8014bb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d101      	bne.n	8014bc2 <create_name+0x8a>
 8014bbe:	2306      	movs	r3, #6
 8014bc0:	e168      	b.n	8014e94 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8014bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8014bc6:	d809      	bhi.n	8014bdc <create_name+0xa4>
 8014bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014bca:	4619      	mov	r1, r3
 8014bcc:	48b3      	ldr	r0, [pc, #716]	; (8014e9c <create_name+0x364>)
 8014bce:	f7fe fe4a 	bl	8013866 <chk_chr>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d001      	beq.n	8014bdc <create_name+0xa4>
 8014bd8:	2306      	movs	r3, #6
 8014bda:	e15b      	b.n	8014e94 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	1c5a      	adds	r2, r3, #1
 8014be0:	617a      	str	r2, [r7, #20]
 8014be2:	005b      	lsls	r3, r3, #1
 8014be4:	68fa      	ldr	r2, [r7, #12]
 8014be6:	4413      	add	r3, r2
 8014be8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014bea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8014bec:	e7b4      	b.n	8014b58 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8014bee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8014bf0:	693a      	ldr	r2, [r7, #16]
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	441a      	add	r2, r3
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8014bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014bfc:	2b1f      	cmp	r3, #31
 8014bfe:	d801      	bhi.n	8014c04 <create_name+0xcc>
 8014c00:	2304      	movs	r3, #4
 8014c02:	e000      	b.n	8014c06 <create_name+0xce>
 8014c04:	2300      	movs	r3, #0
 8014c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8014c0a:	e011      	b.n	8014c30 <create_name+0xf8>
		w = lfn[di - 1];
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c12:	3b01      	subs	r3, #1
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	68fa      	ldr	r2, [r7, #12]
 8014c18:	4413      	add	r3, r2
 8014c1a:	881b      	ldrh	r3, [r3, #0]
 8014c1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8014c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c20:	2b20      	cmp	r3, #32
 8014c22:	d002      	beq.n	8014c2a <create_name+0xf2>
 8014c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c26:	2b2e      	cmp	r3, #46	; 0x2e
 8014c28:	d106      	bne.n	8014c38 <create_name+0x100>
		di--;
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	3b01      	subs	r3, #1
 8014c2e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d1ea      	bne.n	8014c0c <create_name+0xd4>
 8014c36:	e000      	b.n	8014c3a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8014c38:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	005b      	lsls	r3, r3, #1
 8014c3e:	68fa      	ldr	r2, [r7, #12]
 8014c40:	4413      	add	r3, r2
 8014c42:	2200      	movs	r2, #0
 8014c44:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d101      	bne.n	8014c50 <create_name+0x118>
 8014c4c:	2306      	movs	r3, #6
 8014c4e:	e121      	b.n	8014e94 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	3320      	adds	r3, #32
 8014c54:	220b      	movs	r2, #11
 8014c56:	2120      	movs	r1, #32
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7fe fdc2 	bl	80137e2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8014c5e:	2300      	movs	r3, #0
 8014c60:	61bb      	str	r3, [r7, #24]
 8014c62:	e002      	b.n	8014c6a <create_name+0x132>
 8014c64:	69bb      	ldr	r3, [r7, #24]
 8014c66:	3301      	adds	r3, #1
 8014c68:	61bb      	str	r3, [r7, #24]
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	005b      	lsls	r3, r3, #1
 8014c6e:	68fa      	ldr	r2, [r7, #12]
 8014c70:	4413      	add	r3, r2
 8014c72:	881b      	ldrh	r3, [r3, #0]
 8014c74:	2b20      	cmp	r3, #32
 8014c76:	d0f5      	beq.n	8014c64 <create_name+0x12c>
 8014c78:	69bb      	ldr	r3, [r7, #24]
 8014c7a:	005b      	lsls	r3, r3, #1
 8014c7c:	68fa      	ldr	r2, [r7, #12]
 8014c7e:	4413      	add	r3, r2
 8014c80:	881b      	ldrh	r3, [r3, #0]
 8014c82:	2b2e      	cmp	r3, #46	; 0x2e
 8014c84:	d0ee      	beq.n	8014c64 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d009      	beq.n	8014ca0 <create_name+0x168>
 8014c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c90:	f043 0303 	orr.w	r3, r3, #3
 8014c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8014c98:	e002      	b.n	8014ca0 <create_name+0x168>
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	3b01      	subs	r3, #1
 8014c9e:	617b      	str	r3, [r7, #20]
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d009      	beq.n	8014cba <create_name+0x182>
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014cac:	3b01      	subs	r3, #1
 8014cae:	005b      	lsls	r3, r3, #1
 8014cb0:	68fa      	ldr	r2, [r7, #12]
 8014cb2:	4413      	add	r3, r2
 8014cb4:	881b      	ldrh	r3, [r3, #0]
 8014cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8014cb8:	d1ef      	bne.n	8014c9a <create_name+0x162>

	i = b = 0; ni = 8;
 8014cba:	2300      	movs	r3, #0
 8014cbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	623b      	str	r3, [r7, #32]
 8014cc4:	2308      	movs	r3, #8
 8014cc6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	1c5a      	adds	r2, r3, #1
 8014ccc:	61ba      	str	r2, [r7, #24]
 8014cce:	005b      	lsls	r3, r3, #1
 8014cd0:	68fa      	ldr	r2, [r7, #12]
 8014cd2:	4413      	add	r3, r2
 8014cd4:	881b      	ldrh	r3, [r3, #0]
 8014cd6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8014cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	f000 8090 	beq.w	8014e00 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8014ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ce2:	2b20      	cmp	r3, #32
 8014ce4:	d006      	beq.n	8014cf4 <create_name+0x1bc>
 8014ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8014cea:	d10a      	bne.n	8014d02 <create_name+0x1ca>
 8014cec:	69ba      	ldr	r2, [r7, #24]
 8014cee:	697b      	ldr	r3, [r7, #20]
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	d006      	beq.n	8014d02 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8014cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cf8:	f043 0303 	orr.w	r3, r3, #3
 8014cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d00:	e07d      	b.n	8014dfe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8014d02:	6a3a      	ldr	r2, [r7, #32]
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d203      	bcs.n	8014d12 <create_name+0x1da>
 8014d0a:	69ba      	ldr	r2, [r7, #24]
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	d123      	bne.n	8014d5a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8014d12:	69fb      	ldr	r3, [r7, #28]
 8014d14:	2b0b      	cmp	r3, #11
 8014d16:	d106      	bne.n	8014d26 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8014d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d1c:	f043 0303 	orr.w	r3, r3, #3
 8014d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d24:	e06f      	b.n	8014e06 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8014d26:	69ba      	ldr	r2, [r7, #24]
 8014d28:	697b      	ldr	r3, [r7, #20]
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d005      	beq.n	8014d3a <create_name+0x202>
 8014d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d32:	f043 0303 	orr.w	r3, r3, #3
 8014d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8014d3a:	69ba      	ldr	r2, [r7, #24]
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d860      	bhi.n	8014e04 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	61bb      	str	r3, [r7, #24]
 8014d46:	2308      	movs	r3, #8
 8014d48:	623b      	str	r3, [r7, #32]
 8014d4a:	230b      	movs	r3, #11
 8014d4c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8014d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d52:	009b      	lsls	r3, r3, #2
 8014d54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014d58:	e051      	b.n	8014dfe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8014d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8014d5e:	d914      	bls.n	8014d8a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8014d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d62:	2100      	movs	r1, #0
 8014d64:	4618      	mov	r0, r3
 8014d66:	f001 fa57 	bl	8016218 <ff_convert>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8014d6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d004      	beq.n	8014d7e <create_name+0x246>
 8014d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d76:	3b80      	subs	r3, #128	; 0x80
 8014d78:	4a49      	ldr	r2, [pc, #292]	; (8014ea0 <create_name+0x368>)
 8014d7a:	5cd3      	ldrb	r3, [r2, r3]
 8014d7c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8014d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d82:	f043 0302 	orr.w	r3, r3, #2
 8014d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8014d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d007      	beq.n	8014da0 <create_name+0x268>
 8014d90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d92:	4619      	mov	r1, r3
 8014d94:	4843      	ldr	r0, [pc, #268]	; (8014ea4 <create_name+0x36c>)
 8014d96:	f7fe fd66 	bl	8013866 <chk_chr>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d008      	beq.n	8014db2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8014da0:	235f      	movs	r3, #95	; 0x5f
 8014da2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014da8:	f043 0303 	orr.w	r3, r3, #3
 8014dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014db0:	e01b      	b.n	8014dea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8014db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014db4:	2b40      	cmp	r3, #64	; 0x40
 8014db6:	d909      	bls.n	8014dcc <create_name+0x294>
 8014db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014dba:	2b5a      	cmp	r3, #90	; 0x5a
 8014dbc:	d806      	bhi.n	8014dcc <create_name+0x294>
					b |= 2;
 8014dbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014dc2:	f043 0302 	orr.w	r3, r3, #2
 8014dc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014dca:	e00e      	b.n	8014dea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8014dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014dce:	2b60      	cmp	r3, #96	; 0x60
 8014dd0:	d90b      	bls.n	8014dea <create_name+0x2b2>
 8014dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014dd4:	2b7a      	cmp	r3, #122	; 0x7a
 8014dd6:	d808      	bhi.n	8014dea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8014dd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014ddc:	f043 0301 	orr.w	r3, r3, #1
 8014de0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014de6:	3b20      	subs	r3, #32
 8014de8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8014dea:	6a3b      	ldr	r3, [r7, #32]
 8014dec:	1c5a      	adds	r2, r3, #1
 8014dee:	623a      	str	r2, [r7, #32]
 8014df0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014df2:	b2d1      	uxtb	r1, r2
 8014df4:	687a      	ldr	r2, [r7, #4]
 8014df6:	4413      	add	r3, r2
 8014df8:	460a      	mov	r2, r1
 8014dfa:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 8014dfe:	e763      	b.n	8014cc8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8014e00:	bf00      	nop
 8014e02:	e000      	b.n	8014e06 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8014e04:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e0c:	2be5      	cmp	r3, #229	; 0xe5
 8014e0e:	d103      	bne.n	8014e18 <create_name+0x2e0>
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2205      	movs	r2, #5
 8014e14:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	2b08      	cmp	r3, #8
 8014e1c:	d104      	bne.n	8014e28 <create_name+0x2f0>
 8014e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e22:	009b      	lsls	r3, r3, #2
 8014e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8014e28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e2c:	f003 030c 	and.w	r3, r3, #12
 8014e30:	2b0c      	cmp	r3, #12
 8014e32:	d005      	beq.n	8014e40 <create_name+0x308>
 8014e34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e38:	f003 0303 	and.w	r3, r3, #3
 8014e3c:	2b03      	cmp	r3, #3
 8014e3e:	d105      	bne.n	8014e4c <create_name+0x314>
 8014e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e44:	f043 0302 	orr.w	r3, r3, #2
 8014e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8014e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e50:	f003 0302 	and.w	r3, r3, #2
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d117      	bne.n	8014e88 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8014e58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e5c:	f003 0303 	and.w	r3, r3, #3
 8014e60:	2b01      	cmp	r3, #1
 8014e62:	d105      	bne.n	8014e70 <create_name+0x338>
 8014e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e68:	f043 0310 	orr.w	r3, r3, #16
 8014e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8014e70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e74:	f003 030c 	and.w	r3, r3, #12
 8014e78:	2b04      	cmp	r3, #4
 8014e7a:	d105      	bne.n	8014e88 <create_name+0x350>
 8014e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e80:	f043 0308 	orr.w	r3, r3, #8
 8014e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014e8e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8014e92:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3728      	adds	r7, #40	; 0x28
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	08017730 	.word	0x08017730
 8014ea0:	080177f0 	.word	0x080177f0
 8014ea4:	0801773c 	.word	0x0801773c

08014ea8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b086      	sub	sp, #24
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014ebc:	e002      	b.n	8014ec4 <follow_path+0x1c>
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	603b      	str	r3, [r7, #0]
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	781b      	ldrb	r3, [r3, #0]
 8014ec8:	2b2f      	cmp	r3, #47	; 0x2f
 8014eca:	d0f8      	beq.n	8014ebe <follow_path+0x16>
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	781b      	ldrb	r3, [r3, #0]
 8014ed0:	2b5c      	cmp	r3, #92	; 0x5c
 8014ed2:	d0f4      	beq.n	8014ebe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014ed4:	693b      	ldr	r3, [r7, #16]
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	781b      	ldrb	r3, [r3, #0]
 8014ede:	2b1f      	cmp	r3, #31
 8014ee0:	d80a      	bhi.n	8014ef8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	2280      	movs	r2, #128	; 0x80
 8014ee6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8014eea:	2100      	movs	r1, #0
 8014eec:	6878      	ldr	r0, [r7, #4]
 8014eee:	f7ff f8fb 	bl	80140e8 <dir_sdi>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	75fb      	strb	r3, [r7, #23]
 8014ef6:	e048      	b.n	8014f8a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014ef8:	463b      	mov	r3, r7
 8014efa:	4619      	mov	r1, r3
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f7ff fe1b 	bl	8014b38 <create_name>
 8014f02:	4603      	mov	r3, r0
 8014f04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014f06:	7dfb      	ldrb	r3, [r7, #23]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d139      	bne.n	8014f80 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014f0c:	6878      	ldr	r0, [r7, #4]
 8014f0e:	f7ff fc5a 	bl	80147c6 <dir_find>
 8014f12:	4603      	mov	r3, r0
 8014f14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014f1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014f1e:	7dfb      	ldrb	r3, [r7, #23]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d00a      	beq.n	8014f3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014f24:	7dfb      	ldrb	r3, [r7, #23]
 8014f26:	2b04      	cmp	r3, #4
 8014f28:	d12c      	bne.n	8014f84 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014f2a:	7afb      	ldrb	r3, [r7, #11]
 8014f2c:	f003 0304 	and.w	r3, r3, #4
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d127      	bne.n	8014f84 <follow_path+0xdc>
 8014f34:	2305      	movs	r3, #5
 8014f36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014f38:	e024      	b.n	8014f84 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014f3a:	7afb      	ldrb	r3, [r7, #11]
 8014f3c:	f003 0304 	and.w	r3, r3, #4
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d121      	bne.n	8014f88 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	799b      	ldrb	r3, [r3, #6]
 8014f48:	f003 0310 	and.w	r3, r3, #16
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d102      	bne.n	8014f56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014f50:	2305      	movs	r3, #5
 8014f52:	75fb      	strb	r3, [r7, #23]
 8014f54:	e019      	b.n	8014f8a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	691b      	ldr	r3, [r3, #16]
 8014f60:	68fa      	ldr	r2, [r7, #12]
 8014f62:	8992      	ldrh	r2, [r2, #12]
 8014f64:	fbb3 f0f2 	udiv	r0, r3, r2
 8014f68:	fb02 f200 	mul.w	r2, r2, r0
 8014f6c:	1a9b      	subs	r3, r3, r2
 8014f6e:	440b      	add	r3, r1
 8014f70:	4619      	mov	r1, r3
 8014f72:	68f8      	ldr	r0, [r7, #12]
 8014f74:	f7ff fa5e 	bl	8014434 <ld_clust>
 8014f78:	4602      	mov	r2, r0
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014f7e:	e7bb      	b.n	8014ef8 <follow_path+0x50>
			if (res != FR_OK) break;
 8014f80:	bf00      	nop
 8014f82:	e002      	b.n	8014f8a <follow_path+0xe2>
				break;
 8014f84:	bf00      	nop
 8014f86:	e000      	b.n	8014f8a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014f88:	bf00      	nop
			}
		}
	}

	return res;
 8014f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	3718      	adds	r7, #24
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}

08014f94 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014f94:	b480      	push	{r7}
 8014f96:	b087      	sub	sp, #28
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8014fa0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d031      	beq.n	801500e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	617b      	str	r3, [r7, #20]
 8014fb0:	e002      	b.n	8014fb8 <get_ldnumber+0x24>
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	3301      	adds	r3, #1
 8014fb6:	617b      	str	r3, [r7, #20]
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	2b1f      	cmp	r3, #31
 8014fbe:	d903      	bls.n	8014fc8 <get_ldnumber+0x34>
 8014fc0:	697b      	ldr	r3, [r7, #20]
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	2b3a      	cmp	r3, #58	; 0x3a
 8014fc6:	d1f4      	bne.n	8014fb2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	781b      	ldrb	r3, [r3, #0]
 8014fcc:	2b3a      	cmp	r3, #58	; 0x3a
 8014fce:	d11c      	bne.n	801500a <get_ldnumber+0x76>
			tp = *path;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	1c5a      	adds	r2, r3, #1
 8014fda:	60fa      	str	r2, [r7, #12]
 8014fdc:	781b      	ldrb	r3, [r3, #0]
 8014fde:	3b30      	subs	r3, #48	; 0x30
 8014fe0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	2b09      	cmp	r3, #9
 8014fe6:	d80e      	bhi.n	8015006 <get_ldnumber+0x72>
 8014fe8:	68fa      	ldr	r2, [r7, #12]
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d10a      	bne.n	8015006 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d107      	bne.n	8015006 <get_ldnumber+0x72>
					vol = (int)i;
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	3301      	adds	r3, #1
 8014ffe:	617b      	str	r3, [r7, #20]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	697a      	ldr	r2, [r7, #20]
 8015004:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	e002      	b.n	8015010 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801500a:	2300      	movs	r3, #0
 801500c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801500e:	693b      	ldr	r3, [r7, #16]
}
 8015010:	4618      	mov	r0, r3
 8015012:	371c      	adds	r7, #28
 8015014:	46bd      	mov	sp, r7
 8015016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501a:	4770      	bx	lr

0801501c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
 8015024:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	2200      	movs	r2, #0
 801502a:	70da      	strb	r2, [r3, #3]
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f04f 32ff 	mov.w	r2, #4294967295
 8015032:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015034:	6839      	ldr	r1, [r7, #0]
 8015036:	6878      	ldr	r0, [r7, #4]
 8015038:	f7fe fc74 	bl	8013924 <move_window>
 801503c:	4603      	mov	r3, r0
 801503e:	2b00      	cmp	r3, #0
 8015040:	d001      	beq.n	8015046 <check_fs+0x2a>
 8015042:	2304      	movs	r3, #4
 8015044:	e038      	b.n	80150b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	3338      	adds	r3, #56	; 0x38
 801504a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801504e:	4618      	mov	r0, r3
 8015050:	f7fe fb24 	bl	801369c <ld_word>
 8015054:	4603      	mov	r3, r0
 8015056:	461a      	mov	r2, r3
 8015058:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801505c:	429a      	cmp	r2, r3
 801505e:	d001      	beq.n	8015064 <check_fs+0x48>
 8015060:	2303      	movs	r3, #3
 8015062:	e029      	b.n	80150b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801506a:	2be9      	cmp	r3, #233	; 0xe9
 801506c:	d009      	beq.n	8015082 <check_fs+0x66>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015074:	2beb      	cmp	r3, #235	; 0xeb
 8015076:	d11e      	bne.n	80150b6 <check_fs+0x9a>
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801507e:	2b90      	cmp	r3, #144	; 0x90
 8015080:	d119      	bne.n	80150b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	3338      	adds	r3, #56	; 0x38
 8015086:	3336      	adds	r3, #54	; 0x36
 8015088:	4618      	mov	r0, r3
 801508a:	f7fe fb1f 	bl	80136cc <ld_dword>
 801508e:	4603      	mov	r3, r0
 8015090:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015094:	4a0a      	ldr	r2, [pc, #40]	; (80150c0 <check_fs+0xa4>)
 8015096:	4293      	cmp	r3, r2
 8015098:	d101      	bne.n	801509e <check_fs+0x82>
 801509a:	2300      	movs	r3, #0
 801509c:	e00c      	b.n	80150b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	3338      	adds	r3, #56	; 0x38
 80150a2:	3352      	adds	r3, #82	; 0x52
 80150a4:	4618      	mov	r0, r3
 80150a6:	f7fe fb11 	bl	80136cc <ld_dword>
 80150aa:	4603      	mov	r3, r0
 80150ac:	4a05      	ldr	r2, [pc, #20]	; (80150c4 <check_fs+0xa8>)
 80150ae:	4293      	cmp	r3, r2
 80150b0:	d101      	bne.n	80150b6 <check_fs+0x9a>
 80150b2:	2300      	movs	r3, #0
 80150b4:	e000      	b.n	80150b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80150b6:	2302      	movs	r3, #2
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3708      	adds	r7, #8
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	00544146 	.word	0x00544146
 80150c4:	33544146 	.word	0x33544146

080150c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b096      	sub	sp, #88	; 0x58
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	4613      	mov	r3, r2
 80150d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	2200      	movs	r2, #0
 80150da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80150dc:	68f8      	ldr	r0, [r7, #12]
 80150de:	f7ff ff59 	bl	8014f94 <get_ldnumber>
 80150e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80150e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	da01      	bge.n	80150ee <find_volume+0x26>
 80150ea:	230b      	movs	r3, #11
 80150ec:	e265      	b.n	80155ba <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80150ee:	4ab0      	ldr	r2, [pc, #704]	; (80153b0 <find_volume+0x2e8>)
 80150f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80150f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d101      	bne.n	8015102 <find_volume+0x3a>
 80150fe:	230c      	movs	r3, #12
 8015100:	e25b      	b.n	80155ba <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015106:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015108:	79fb      	ldrb	r3, [r7, #7]
 801510a:	f023 0301 	bic.w	r3, r3, #1
 801510e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d01a      	beq.n	801514e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8015118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801511a:	785b      	ldrb	r3, [r3, #1]
 801511c:	4618      	mov	r0, r3
 801511e:	f7fe fa1f 	bl	8013560 <disk_status>
 8015122:	4603      	mov	r3, r0
 8015124:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015128:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801512c:	f003 0301 	and.w	r3, r3, #1
 8015130:	2b00      	cmp	r3, #0
 8015132:	d10c      	bne.n	801514e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015134:	79fb      	ldrb	r3, [r7, #7]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d007      	beq.n	801514a <find_volume+0x82>
 801513a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801513e:	f003 0304 	and.w	r3, r3, #4
 8015142:	2b00      	cmp	r3, #0
 8015144:	d001      	beq.n	801514a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8015146:	230a      	movs	r3, #10
 8015148:	e237      	b.n	80155ba <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801514a:	2300      	movs	r3, #0
 801514c:	e235      	b.n	80155ba <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015150:	2200      	movs	r2, #0
 8015152:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015156:	b2da      	uxtb	r2, r3
 8015158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801515a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801515e:	785b      	ldrb	r3, [r3, #1]
 8015160:	4618      	mov	r0, r3
 8015162:	f7fe fa17 	bl	8013594 <disk_initialize>
 8015166:	4603      	mov	r3, r0
 8015168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801516c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015170:	f003 0301 	and.w	r3, r3, #1
 8015174:	2b00      	cmp	r3, #0
 8015176:	d001      	beq.n	801517c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015178:	2303      	movs	r3, #3
 801517a:	e21e      	b.n	80155ba <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801517c:	79fb      	ldrb	r3, [r7, #7]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d007      	beq.n	8015192 <find_volume+0xca>
 8015182:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015186:	f003 0304 	and.w	r3, r3, #4
 801518a:	2b00      	cmp	r3, #0
 801518c:	d001      	beq.n	8015192 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801518e:	230a      	movs	r3, #10
 8015190:	e213      	b.n	80155ba <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8015192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015194:	7858      	ldrb	r0, [r3, #1]
 8015196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015198:	330c      	adds	r3, #12
 801519a:	461a      	mov	r2, r3
 801519c:	2102      	movs	r1, #2
 801519e:	f7fe fa5f 	bl	8013660 <disk_ioctl>
 80151a2:	4603      	mov	r3, r0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d001      	beq.n	80151ac <find_volume+0xe4>
 80151a8:	2301      	movs	r3, #1
 80151aa:	e206      	b.n	80155ba <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80151ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151ae:	899b      	ldrh	r3, [r3, #12]
 80151b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80151b4:	d80d      	bhi.n	80151d2 <find_volume+0x10a>
 80151b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151b8:	899b      	ldrh	r3, [r3, #12]
 80151ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151be:	d308      	bcc.n	80151d2 <find_volume+0x10a>
 80151c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c2:	899b      	ldrh	r3, [r3, #12]
 80151c4:	461a      	mov	r2, r3
 80151c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c8:	899b      	ldrh	r3, [r3, #12]
 80151ca:	3b01      	subs	r3, #1
 80151cc:	4013      	ands	r3, r2
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d001      	beq.n	80151d6 <find_volume+0x10e>
 80151d2:	2301      	movs	r3, #1
 80151d4:	e1f1      	b.n	80155ba <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80151d6:	2300      	movs	r3, #0
 80151d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80151da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80151dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80151de:	f7ff ff1d 	bl	801501c <check_fs>
 80151e2:	4603      	mov	r3, r0
 80151e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80151e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80151ec:	2b02      	cmp	r3, #2
 80151ee:	d14b      	bne.n	8015288 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80151f0:	2300      	movs	r3, #0
 80151f2:	643b      	str	r3, [r7, #64]	; 0x40
 80151f4:	e01f      	b.n	8015236 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80151f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80151fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151fe:	011b      	lsls	r3, r3, #4
 8015200:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015204:	4413      	add	r3, r2
 8015206:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801520a:	3304      	adds	r3, #4
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d006      	beq.n	8015220 <find_volume+0x158>
 8015212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015214:	3308      	adds	r3, #8
 8015216:	4618      	mov	r0, r3
 8015218:	f7fe fa58 	bl	80136cc <ld_dword>
 801521c:	4602      	mov	r2, r0
 801521e:	e000      	b.n	8015222 <find_volume+0x15a>
 8015220:	2200      	movs	r2, #0
 8015222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015224:	009b      	lsls	r3, r3, #2
 8015226:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801522a:	440b      	add	r3, r1
 801522c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015232:	3301      	adds	r3, #1
 8015234:	643b      	str	r3, [r7, #64]	; 0x40
 8015236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015238:	2b03      	cmp	r3, #3
 801523a:	d9dc      	bls.n	80151f6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801523c:	2300      	movs	r3, #0
 801523e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8015240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015242:	2b00      	cmp	r3, #0
 8015244:	d002      	beq.n	801524c <find_volume+0x184>
 8015246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015248:	3b01      	subs	r3, #1
 801524a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801524c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801524e:	009b      	lsls	r3, r3, #2
 8015250:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015254:	4413      	add	r3, r2
 8015256:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801525a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801525c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801525e:	2b00      	cmp	r3, #0
 8015260:	d005      	beq.n	801526e <find_volume+0x1a6>
 8015262:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015264:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015266:	f7ff fed9 	bl	801501c <check_fs>
 801526a:	4603      	mov	r3, r0
 801526c:	e000      	b.n	8015270 <find_volume+0x1a8>
 801526e:	2303      	movs	r3, #3
 8015270:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015278:	2b01      	cmp	r3, #1
 801527a:	d905      	bls.n	8015288 <find_volume+0x1c0>
 801527c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801527e:	3301      	adds	r3, #1
 8015280:	643b      	str	r3, [r7, #64]	; 0x40
 8015282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015284:	2b03      	cmp	r3, #3
 8015286:	d9e1      	bls.n	801524c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015288:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801528c:	2b04      	cmp	r3, #4
 801528e:	d101      	bne.n	8015294 <find_volume+0x1cc>
 8015290:	2301      	movs	r3, #1
 8015292:	e192      	b.n	80155ba <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015298:	2b01      	cmp	r3, #1
 801529a:	d901      	bls.n	80152a0 <find_volume+0x1d8>
 801529c:	230d      	movs	r3, #13
 801529e:	e18c      	b.n	80155ba <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80152a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152a2:	3338      	adds	r3, #56	; 0x38
 80152a4:	330b      	adds	r3, #11
 80152a6:	4618      	mov	r0, r3
 80152a8:	f7fe f9f8 	bl	801369c <ld_word>
 80152ac:	4603      	mov	r3, r0
 80152ae:	461a      	mov	r2, r3
 80152b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152b2:	899b      	ldrh	r3, [r3, #12]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d001      	beq.n	80152bc <find_volume+0x1f4>
 80152b8:	230d      	movs	r3, #13
 80152ba:	e17e      	b.n	80155ba <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80152bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152be:	3338      	adds	r3, #56	; 0x38
 80152c0:	3316      	adds	r3, #22
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7fe f9ea 	bl	801369c <ld_word>
 80152c8:	4603      	mov	r3, r0
 80152ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80152cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d106      	bne.n	80152e0 <find_volume+0x218>
 80152d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152d4:	3338      	adds	r3, #56	; 0x38
 80152d6:	3324      	adds	r3, #36	; 0x24
 80152d8:	4618      	mov	r0, r3
 80152da:	f7fe f9f7 	bl	80136cc <ld_dword>
 80152de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80152e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80152e4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80152e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152e8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80152ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80152f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152f2:	789b      	ldrb	r3, [r3, #2]
 80152f4:	2b01      	cmp	r3, #1
 80152f6:	d005      	beq.n	8015304 <find_volume+0x23c>
 80152f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152fa:	789b      	ldrb	r3, [r3, #2]
 80152fc:	2b02      	cmp	r3, #2
 80152fe:	d001      	beq.n	8015304 <find_volume+0x23c>
 8015300:	230d      	movs	r3, #13
 8015302:	e15a      	b.n	80155ba <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015306:	789b      	ldrb	r3, [r3, #2]
 8015308:	461a      	mov	r2, r3
 801530a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801530c:	fb02 f303 	mul.w	r3, r2, r3
 8015310:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015318:	b29a      	uxth	r2, r3
 801531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801531c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015320:	895b      	ldrh	r3, [r3, #10]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d008      	beq.n	8015338 <find_volume+0x270>
 8015326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015328:	895b      	ldrh	r3, [r3, #10]
 801532a:	461a      	mov	r2, r3
 801532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801532e:	895b      	ldrh	r3, [r3, #10]
 8015330:	3b01      	subs	r3, #1
 8015332:	4013      	ands	r3, r2
 8015334:	2b00      	cmp	r3, #0
 8015336:	d001      	beq.n	801533c <find_volume+0x274>
 8015338:	230d      	movs	r3, #13
 801533a:	e13e      	b.n	80155ba <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801533e:	3338      	adds	r3, #56	; 0x38
 8015340:	3311      	adds	r3, #17
 8015342:	4618      	mov	r0, r3
 8015344:	f7fe f9aa 	bl	801369c <ld_word>
 8015348:	4603      	mov	r3, r0
 801534a:	461a      	mov	r2, r3
 801534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801534e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015352:	891b      	ldrh	r3, [r3, #8]
 8015354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015356:	8992      	ldrh	r2, [r2, #12]
 8015358:	0952      	lsrs	r2, r2, #5
 801535a:	b292      	uxth	r2, r2
 801535c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015360:	fb02 f201 	mul.w	r2, r2, r1
 8015364:	1a9b      	subs	r3, r3, r2
 8015366:	b29b      	uxth	r3, r3
 8015368:	2b00      	cmp	r3, #0
 801536a:	d001      	beq.n	8015370 <find_volume+0x2a8>
 801536c:	230d      	movs	r3, #13
 801536e:	e124      	b.n	80155ba <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015372:	3338      	adds	r3, #56	; 0x38
 8015374:	3313      	adds	r3, #19
 8015376:	4618      	mov	r0, r3
 8015378:	f7fe f990 	bl	801369c <ld_word>
 801537c:	4603      	mov	r3, r0
 801537e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015382:	2b00      	cmp	r3, #0
 8015384:	d106      	bne.n	8015394 <find_volume+0x2cc>
 8015386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015388:	3338      	adds	r3, #56	; 0x38
 801538a:	3320      	adds	r3, #32
 801538c:	4618      	mov	r0, r3
 801538e:	f7fe f99d 	bl	80136cc <ld_dword>
 8015392:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015396:	3338      	adds	r3, #56	; 0x38
 8015398:	330e      	adds	r3, #14
 801539a:	4618      	mov	r0, r3
 801539c:	f7fe f97e 	bl	801369c <ld_word>
 80153a0:	4603      	mov	r3, r0
 80153a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80153a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d104      	bne.n	80153b4 <find_volume+0x2ec>
 80153aa:	230d      	movs	r3, #13
 80153ac:	e105      	b.n	80155ba <find_volume+0x4f2>
 80153ae:	bf00      	nop
 80153b0:	20000204 	.word	0x20000204

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80153b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80153b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153b8:	4413      	add	r3, r2
 80153ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80153bc:	8911      	ldrh	r1, [r2, #8]
 80153be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80153c0:	8992      	ldrh	r2, [r2, #12]
 80153c2:	0952      	lsrs	r2, r2, #5
 80153c4:	b292      	uxth	r2, r2
 80153c6:	fbb1 f2f2 	udiv	r2, r1, r2
 80153ca:	b292      	uxth	r2, r2
 80153cc:	4413      	add	r3, r2
 80153ce:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80153d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80153d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d201      	bcs.n	80153dc <find_volume+0x314>
 80153d8:	230d      	movs	r3, #13
 80153da:	e0ee      	b.n	80155ba <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80153dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80153de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e0:	1ad3      	subs	r3, r2, r3
 80153e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80153e4:	8952      	ldrh	r2, [r2, #10]
 80153e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80153ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80153ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d101      	bne.n	80153f6 <find_volume+0x32e>
 80153f2:	230d      	movs	r3, #13
 80153f4:	e0e1      	b.n	80155ba <find_volume+0x4f2>
		fmt = FS_FAT32;
 80153f6:	2303      	movs	r3, #3
 80153f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80153fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015402:	4293      	cmp	r3, r2
 8015404:	d802      	bhi.n	801540c <find_volume+0x344>
 8015406:	2302      	movs	r3, #2
 8015408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801540e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015412:	4293      	cmp	r3, r2
 8015414:	d802      	bhi.n	801541c <find_volume+0x354>
 8015416:	2301      	movs	r3, #1
 8015418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801541e:	1c9a      	adds	r2, r3, #2
 8015420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015422:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8015424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015426:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015428:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801542a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801542c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801542e:	441a      	add	r2, r3
 8015430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015432:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8015434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015438:	441a      	add	r2, r3
 801543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801543c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801543e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015442:	2b03      	cmp	r3, #3
 8015444:	d11e      	bne.n	8015484 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015448:	3338      	adds	r3, #56	; 0x38
 801544a:	332a      	adds	r3, #42	; 0x2a
 801544c:	4618      	mov	r0, r3
 801544e:	f7fe f925 	bl	801369c <ld_word>
 8015452:	4603      	mov	r3, r0
 8015454:	2b00      	cmp	r3, #0
 8015456:	d001      	beq.n	801545c <find_volume+0x394>
 8015458:	230d      	movs	r3, #13
 801545a:	e0ae      	b.n	80155ba <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801545e:	891b      	ldrh	r3, [r3, #8]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d001      	beq.n	8015468 <find_volume+0x3a0>
 8015464:	230d      	movs	r3, #13
 8015466:	e0a8      	b.n	80155ba <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801546a:	3338      	adds	r3, #56	; 0x38
 801546c:	332c      	adds	r3, #44	; 0x2c
 801546e:	4618      	mov	r0, r3
 8015470:	f7fe f92c 	bl	80136cc <ld_dword>
 8015474:	4602      	mov	r2, r0
 8015476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015478:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801547c:	69db      	ldr	r3, [r3, #28]
 801547e:	009b      	lsls	r3, r3, #2
 8015480:	647b      	str	r3, [r7, #68]	; 0x44
 8015482:	e01f      	b.n	80154c4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015486:	891b      	ldrh	r3, [r3, #8]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d101      	bne.n	8015490 <find_volume+0x3c8>
 801548c:	230d      	movs	r3, #13
 801548e:	e094      	b.n	80155ba <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015496:	441a      	add	r2, r3
 8015498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801549a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801549c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80154a0:	2b02      	cmp	r3, #2
 80154a2:	d103      	bne.n	80154ac <find_volume+0x3e4>
 80154a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154a6:	69db      	ldr	r3, [r3, #28]
 80154a8:	005b      	lsls	r3, r3, #1
 80154aa:	e00a      	b.n	80154c2 <find_volume+0x3fa>
 80154ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ae:	69da      	ldr	r2, [r3, #28]
 80154b0:	4613      	mov	r3, r2
 80154b2:	005b      	lsls	r3, r3, #1
 80154b4:	4413      	add	r3, r2
 80154b6:	085a      	lsrs	r2, r3, #1
 80154b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ba:	69db      	ldr	r3, [r3, #28]
 80154bc:	f003 0301 	and.w	r3, r3, #1
 80154c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80154c2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80154c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154c6:	6a1a      	ldr	r2, [r3, #32]
 80154c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ca:	899b      	ldrh	r3, [r3, #12]
 80154cc:	4619      	mov	r1, r3
 80154ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154d0:	440b      	add	r3, r1
 80154d2:	3b01      	subs	r3, #1
 80154d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80154d6:	8989      	ldrh	r1, [r1, #12]
 80154d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80154dc:	429a      	cmp	r2, r3
 80154de:	d201      	bcs.n	80154e4 <find_volume+0x41c>
 80154e0:	230d      	movs	r3, #13
 80154e2:	e06a      	b.n	80155ba <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80154e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154e6:	f04f 32ff 	mov.w	r2, #4294967295
 80154ea:	619a      	str	r2, [r3, #24]
 80154ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ee:	699a      	ldr	r2, [r3, #24]
 80154f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154f2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80154f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154f6:	2280      	movs	r2, #128	; 0x80
 80154f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80154fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80154fe:	2b03      	cmp	r3, #3
 8015500:	d149      	bne.n	8015596 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015504:	3338      	adds	r3, #56	; 0x38
 8015506:	3330      	adds	r3, #48	; 0x30
 8015508:	4618      	mov	r0, r3
 801550a:	f7fe f8c7 	bl	801369c <ld_word>
 801550e:	4603      	mov	r3, r0
 8015510:	2b01      	cmp	r3, #1
 8015512:	d140      	bne.n	8015596 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015516:	3301      	adds	r3, #1
 8015518:	4619      	mov	r1, r3
 801551a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801551c:	f7fe fa02 	bl	8013924 <move_window>
 8015520:	4603      	mov	r3, r0
 8015522:	2b00      	cmp	r3, #0
 8015524:	d137      	bne.n	8015596 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8015526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015528:	2200      	movs	r2, #0
 801552a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801552e:	3338      	adds	r3, #56	; 0x38
 8015530:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015534:	4618      	mov	r0, r3
 8015536:	f7fe f8b1 	bl	801369c <ld_word>
 801553a:	4603      	mov	r3, r0
 801553c:	461a      	mov	r2, r3
 801553e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015542:	429a      	cmp	r2, r3
 8015544:	d127      	bne.n	8015596 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015548:	3338      	adds	r3, #56	; 0x38
 801554a:	4618      	mov	r0, r3
 801554c:	f7fe f8be 	bl	80136cc <ld_dword>
 8015550:	4603      	mov	r3, r0
 8015552:	4a1c      	ldr	r2, [pc, #112]	; (80155c4 <find_volume+0x4fc>)
 8015554:	4293      	cmp	r3, r2
 8015556:	d11e      	bne.n	8015596 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801555a:	3338      	adds	r3, #56	; 0x38
 801555c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015560:	4618      	mov	r0, r3
 8015562:	f7fe f8b3 	bl	80136cc <ld_dword>
 8015566:	4603      	mov	r3, r0
 8015568:	4a17      	ldr	r2, [pc, #92]	; (80155c8 <find_volume+0x500>)
 801556a:	4293      	cmp	r3, r2
 801556c:	d113      	bne.n	8015596 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015570:	3338      	adds	r3, #56	; 0x38
 8015572:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015576:	4618      	mov	r0, r3
 8015578:	f7fe f8a8 	bl	80136cc <ld_dword>
 801557c:	4602      	mov	r2, r0
 801557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015580:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015584:	3338      	adds	r3, #56	; 0x38
 8015586:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801558a:	4618      	mov	r0, r3
 801558c:	f7fe f89e 	bl	80136cc <ld_dword>
 8015590:	4602      	mov	r2, r0
 8015592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015594:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015598:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801559c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801559e:	4b0b      	ldr	r3, [pc, #44]	; (80155cc <find_volume+0x504>)
 80155a0:	881b      	ldrh	r3, [r3, #0]
 80155a2:	3301      	adds	r3, #1
 80155a4:	b29a      	uxth	r2, r3
 80155a6:	4b09      	ldr	r3, [pc, #36]	; (80155cc <find_volume+0x504>)
 80155a8:	801a      	strh	r2, [r3, #0]
 80155aa:	4b08      	ldr	r3, [pc, #32]	; (80155cc <find_volume+0x504>)
 80155ac:	881a      	ldrh	r2, [r3, #0]
 80155ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155b0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80155b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155b4:	4a06      	ldr	r2, [pc, #24]	; (80155d0 <find_volume+0x508>)
 80155b6:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80155b8:	2300      	movs	r3, #0
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3758      	adds	r7, #88	; 0x58
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	41615252 	.word	0x41615252
 80155c8:	61417272 	.word	0x61417272
 80155cc:	20000208 	.word	0x20000208
 80155d0:	2000020c 	.word	0x2000020c

080155d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b084      	sub	sp, #16
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
 80155dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80155de:	2309      	movs	r3, #9
 80155e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d01c      	beq.n	8015622 <validate+0x4e>
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d018      	beq.n	8015622 <validate+0x4e>
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	781b      	ldrb	r3, [r3, #0]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d013      	beq.n	8015622 <validate+0x4e>
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	889a      	ldrh	r2, [r3, #4]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	88db      	ldrh	r3, [r3, #6]
 8015604:	429a      	cmp	r2, r3
 8015606:	d10c      	bne.n	8015622 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	785b      	ldrb	r3, [r3, #1]
 801560e:	4618      	mov	r0, r3
 8015610:	f7fd ffa6 	bl	8013560 <disk_status>
 8015614:	4603      	mov	r3, r0
 8015616:	f003 0301 	and.w	r3, r3, #1
 801561a:	2b00      	cmp	r3, #0
 801561c:	d101      	bne.n	8015622 <validate+0x4e>
			res = FR_OK;
 801561e:	2300      	movs	r3, #0
 8015620:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015622:	7bfb      	ldrb	r3, [r7, #15]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d102      	bne.n	801562e <validate+0x5a>
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	e000      	b.n	8015630 <validate+0x5c>
 801562e:	2300      	movs	r3, #0
 8015630:	683a      	ldr	r2, [r7, #0]
 8015632:	6013      	str	r3, [r2, #0]
	return res;
 8015634:	7bfb      	ldrb	r3, [r7, #15]
}
 8015636:	4618      	mov	r0, r3
 8015638:	3710      	adds	r7, #16
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}
	...

08015640 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b088      	sub	sp, #32
 8015644:	af00      	add	r7, sp, #0
 8015646:	60f8      	str	r0, [r7, #12]
 8015648:	60b9      	str	r1, [r7, #8]
 801564a:	4613      	mov	r3, r2
 801564c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015652:	f107 0310 	add.w	r3, r7, #16
 8015656:	4618      	mov	r0, r3
 8015658:	f7ff fc9c 	bl	8014f94 <get_ldnumber>
 801565c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801565e:	69fb      	ldr	r3, [r7, #28]
 8015660:	2b00      	cmp	r3, #0
 8015662:	da01      	bge.n	8015668 <f_mount+0x28>
 8015664:	230b      	movs	r3, #11
 8015666:	e028      	b.n	80156ba <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015668:	4a16      	ldr	r2, [pc, #88]	; (80156c4 <f_mount+0x84>)
 801566a:	69fb      	ldr	r3, [r7, #28]
 801566c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015670:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8015672:	69bb      	ldr	r3, [r7, #24]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d002      	beq.n	801567e <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015678:	69bb      	ldr	r3, [r7, #24]
 801567a:	2200      	movs	r2, #0
 801567c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d002      	beq.n	801568a <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	2200      	movs	r2, #0
 8015688:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801568a:	68fa      	ldr	r2, [r7, #12]
 801568c:	490d      	ldr	r1, [pc, #52]	; (80156c4 <f_mount+0x84>)
 801568e:	69fb      	ldr	r3, [r7, #28]
 8015690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d002      	beq.n	80156a0 <f_mount+0x60>
 801569a:	79fb      	ldrb	r3, [r7, #7]
 801569c:	2b01      	cmp	r3, #1
 801569e:	d001      	beq.n	80156a4 <f_mount+0x64>
 80156a0:	2300      	movs	r3, #0
 80156a2:	e00a      	b.n	80156ba <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80156a4:	f107 010c 	add.w	r1, r7, #12
 80156a8:	f107 0308 	add.w	r3, r7, #8
 80156ac:	2200      	movs	r2, #0
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7ff fd0a 	bl	80150c8 <find_volume>
 80156b4:	4603      	mov	r3, r0
 80156b6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80156b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	3720      	adds	r7, #32
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}
 80156c2:	bf00      	nop
 80156c4:	20000204 	.word	0x20000204

080156c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b098      	sub	sp, #96	; 0x60
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	60f8      	str	r0, [r7, #12]
 80156d0:	60b9      	str	r1, [r7, #8]
 80156d2:	4613      	mov	r3, r2
 80156d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d101      	bne.n	80156e0 <f_open+0x18>
 80156dc:	2309      	movs	r3, #9
 80156de:	e188      	b.n	80159f2 <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80156e0:	79fb      	ldrb	r3, [r7, #7]
 80156e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80156e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80156e8:	79fa      	ldrb	r2, [r7, #7]
 80156ea:	f107 0110 	add.w	r1, r7, #16
 80156ee:	f107 0308 	add.w	r3, r7, #8
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7ff fce8 	bl	80150c8 <find_volume>
 80156f8:	4603      	mov	r3, r0
 80156fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80156fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015702:	2b00      	cmp	r3, #0
 8015704:	f040 816c 	bne.w	80159e0 <f_open+0x318>
		dj.obj.fs = fs;
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801570c:	68ba      	ldr	r2, [r7, #8]
 801570e:	f107 0314 	add.w	r3, r7, #20
 8015712:	4611      	mov	r1, r2
 8015714:	4618      	mov	r0, r3
 8015716:	f7ff fbc7 	bl	8014ea8 <follow_path>
 801571a:	4603      	mov	r3, r0
 801571c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015724:	2b00      	cmp	r3, #0
 8015726:	d107      	bne.n	8015738 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015728:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801572c:	b25b      	sxtb	r3, r3
 801572e:	2b00      	cmp	r3, #0
 8015730:	da02      	bge.n	8015738 <f_open+0x70>
				res = FR_INVALID_NAME;
 8015732:	2306      	movs	r3, #6
 8015734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015738:	79fb      	ldrb	r3, [r7, #7]
 801573a:	f003 031c 	and.w	r3, r3, #28
 801573e:	2b00      	cmp	r3, #0
 8015740:	d078      	beq.n	8015834 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8015742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015746:	2b00      	cmp	r3, #0
 8015748:	d010      	beq.n	801576c <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801574a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801574e:	2b04      	cmp	r3, #4
 8015750:	d107      	bne.n	8015762 <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8015752:	f107 0314 	add.w	r3, r7, #20
 8015756:	4618      	mov	r0, r3
 8015758:	f7ff f8f6 	bl	8014948 <dir_register>
 801575c:	4603      	mov	r3, r0
 801575e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015762:	79fb      	ldrb	r3, [r7, #7]
 8015764:	f043 0308 	orr.w	r3, r3, #8
 8015768:	71fb      	strb	r3, [r7, #7]
 801576a:	e010      	b.n	801578e <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801576c:	7ebb      	ldrb	r3, [r7, #26]
 801576e:	f003 0311 	and.w	r3, r3, #17
 8015772:	2b00      	cmp	r3, #0
 8015774:	d003      	beq.n	801577e <f_open+0xb6>
					res = FR_DENIED;
 8015776:	2307      	movs	r3, #7
 8015778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801577c:	e007      	b.n	801578e <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801577e:	79fb      	ldrb	r3, [r7, #7]
 8015780:	f003 0304 	and.w	r3, r3, #4
 8015784:	2b00      	cmp	r3, #0
 8015786:	d002      	beq.n	801578e <f_open+0xc6>
 8015788:	2308      	movs	r3, #8
 801578a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801578e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015792:	2b00      	cmp	r3, #0
 8015794:	d168      	bne.n	8015868 <f_open+0x1a0>
 8015796:	79fb      	ldrb	r3, [r7, #7]
 8015798:	f003 0308 	and.w	r3, r3, #8
 801579c:	2b00      	cmp	r3, #0
 801579e:	d063      	beq.n	8015868 <f_open+0x1a0>
				dw = GET_FATTIME();
 80157a0:	f7fa fd36 	bl	8010210 <get_fattime>
 80157a4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80157a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157a8:	330e      	adds	r3, #14
 80157aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7fd ffcb 	bl	8013748 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80157b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157b4:	3316      	adds	r3, #22
 80157b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7fd ffc5 	bl	8013748 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80157be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157c0:	330b      	adds	r3, #11
 80157c2:	2220      	movs	r2, #32
 80157c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157ca:	4611      	mov	r1, r2
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7fe fe31 	bl	8014434 <ld_clust>
 80157d2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80157d4:	693b      	ldr	r3, [r7, #16]
 80157d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80157d8:	2200      	movs	r2, #0
 80157da:	4618      	mov	r0, r3
 80157dc:	f7fe fe49 	bl	8014472 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80157e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157e2:	331c      	adds	r3, #28
 80157e4:	2100      	movs	r1, #0
 80157e6:	4618      	mov	r0, r3
 80157e8:	f7fd ffae 	bl	8013748 <st_dword>
					fs->wflag = 1;
 80157ec:	693b      	ldr	r3, [r7, #16]
 80157ee:	2201      	movs	r2, #1
 80157f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80157f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d037      	beq.n	8015868 <f_open+0x1a0>
						dw = fs->winsect;
 80157f8:	693b      	ldr	r3, [r7, #16]
 80157fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157fc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80157fe:	f107 0314 	add.w	r3, r7, #20
 8015802:	2200      	movs	r2, #0
 8015804:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8015806:	4618      	mov	r0, r3
 8015808:	f7fe fb39 	bl	8013e7e <remove_chain>
 801580c:	4603      	mov	r3, r0
 801580e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8015812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015816:	2b00      	cmp	r3, #0
 8015818:	d126      	bne.n	8015868 <f_open+0x1a0>
							res = move_window(fs, dw);
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801581e:	4618      	mov	r0, r3
 8015820:	f7fe f880 	bl	8013924 <move_window>
 8015824:	4603      	mov	r3, r0
 8015826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801582a:	693b      	ldr	r3, [r7, #16]
 801582c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801582e:	3a01      	subs	r2, #1
 8015830:	615a      	str	r2, [r3, #20]
 8015832:	e019      	b.n	8015868 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015838:	2b00      	cmp	r3, #0
 801583a:	d115      	bne.n	8015868 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801583c:	7ebb      	ldrb	r3, [r7, #26]
 801583e:	f003 0310 	and.w	r3, r3, #16
 8015842:	2b00      	cmp	r3, #0
 8015844:	d003      	beq.n	801584e <f_open+0x186>
					res = FR_NO_FILE;
 8015846:	2304      	movs	r3, #4
 8015848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801584c:	e00c      	b.n	8015868 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801584e:	79fb      	ldrb	r3, [r7, #7]
 8015850:	f003 0302 	and.w	r3, r3, #2
 8015854:	2b00      	cmp	r3, #0
 8015856:	d007      	beq.n	8015868 <f_open+0x1a0>
 8015858:	7ebb      	ldrb	r3, [r7, #26]
 801585a:	f003 0301 	and.w	r3, r3, #1
 801585e:	2b00      	cmp	r3, #0
 8015860:	d002      	beq.n	8015868 <f_open+0x1a0>
						res = FR_DENIED;
 8015862:	2307      	movs	r3, #7
 8015864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8015868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801586c:	2b00      	cmp	r3, #0
 801586e:	d10f      	bne.n	8015890 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015870:	79fb      	ldrb	r3, [r7, #7]
 8015872:	f003 0308 	and.w	r3, r3, #8
 8015876:	2b00      	cmp	r3, #0
 8015878:	d003      	beq.n	8015882 <f_open+0x1ba>
				mode |= FA_MODIFIED;
 801587a:	79fb      	ldrb	r3, [r7, #7]
 801587c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015880:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 801588a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015894:	2b00      	cmp	r3, #0
 8015896:	f040 80a3 	bne.w	80159e0 <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801589a:	693b      	ldr	r3, [r7, #16]
 801589c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801589e:	4611      	mov	r1, r2
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7fe fdc7 	bl	8014434 <ld_clust>
 80158a6:	4602      	mov	r2, r0
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80158ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ae:	331c      	adds	r3, #28
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fd ff0b 	bl	80136cc <ld_dword>
 80158b6:	4602      	mov	r2, r0
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	2200      	movs	r2, #0
 80158c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80158c2:	693a      	ldr	r2, [r7, #16]
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80158c8:	693b      	ldr	r3, [r7, #16]
 80158ca:	88da      	ldrh	r2, [r3, #6]
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	79fa      	ldrb	r2, [r7, #7]
 80158d4:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	2200      	movs	r2, #0
 80158da:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	2200      	movs	r2, #0
 80158e0:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	2200      	movs	r2, #0
 80158e6:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	332c      	adds	r3, #44	; 0x2c
 80158ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80158f0:	2100      	movs	r1, #0
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7fd ff75 	bl	80137e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80158f8:	79fb      	ldrb	r3, [r7, #7]
 80158fa:	f003 0320 	and.w	r3, r3, #32
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d06e      	beq.n	80159e0 <f_open+0x318>
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	68db      	ldr	r3, [r3, #12]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d06a      	beq.n	80159e0 <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	68da      	ldr	r2, [r3, #12]
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015912:	693b      	ldr	r3, [r7, #16]
 8015914:	895b      	ldrh	r3, [r3, #10]
 8015916:	461a      	mov	r2, r3
 8015918:	693b      	ldr	r3, [r7, #16]
 801591a:	899b      	ldrh	r3, [r3, #12]
 801591c:	fb03 f302 	mul.w	r3, r3, r2
 8015920:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	689b      	ldr	r3, [r3, #8]
 8015926:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	657b      	str	r3, [r7, #84]	; 0x54
 801592e:	e016      	b.n	801595e <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015934:	4618      	mov	r0, r3
 8015936:	f7fe f8b2 	bl	8013a9e <get_fat>
 801593a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801593c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801593e:	2b01      	cmp	r3, #1
 8015940:	d802      	bhi.n	8015948 <f_open+0x280>
 8015942:	2302      	movs	r3, #2
 8015944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801594e:	d102      	bne.n	8015956 <f_open+0x28e>
 8015950:	2301      	movs	r3, #1
 8015952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015956:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801595a:	1ad3      	subs	r3, r2, r3
 801595c:	657b      	str	r3, [r7, #84]	; 0x54
 801595e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015962:	2b00      	cmp	r3, #0
 8015964:	d103      	bne.n	801596e <f_open+0x2a6>
 8015966:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801596a:	429a      	cmp	r2, r3
 801596c:	d8e0      	bhi.n	8015930 <f_open+0x268>
				}
				fp->clust = clst;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015972:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015978:	2b00      	cmp	r3, #0
 801597a:	d131      	bne.n	80159e0 <f_open+0x318>
 801597c:	693b      	ldr	r3, [r7, #16]
 801597e:	899b      	ldrh	r3, [r3, #12]
 8015980:	461a      	mov	r2, r3
 8015982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015984:	fbb3 f1f2 	udiv	r1, r3, r2
 8015988:	fb02 f201 	mul.w	r2, r2, r1
 801598c:	1a9b      	subs	r3, r3, r2
 801598e:	2b00      	cmp	r3, #0
 8015990:	d026      	beq.n	80159e0 <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015996:	4618      	mov	r0, r3
 8015998:	f7fe f862 	bl	8013a60 <clust2sect>
 801599c:	6478      	str	r0, [r7, #68]	; 0x44
 801599e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d103      	bne.n	80159ac <f_open+0x2e4>
						res = FR_INT_ERR;
 80159a4:	2302      	movs	r3, #2
 80159a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80159aa:	e019      	b.n	80159e0 <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	899b      	ldrh	r3, [r3, #12]
 80159b0:	461a      	mov	r2, r3
 80159b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80159b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159ba:	441a      	add	r2, r3
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80159c0:	693b      	ldr	r3, [r7, #16]
 80159c2:	7858      	ldrb	r0, [r3, #1]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	69da      	ldr	r2, [r3, #28]
 80159ce:	2301      	movs	r3, #1
 80159d0:	f7fd fe06 	bl	80135e0 <disk_read>
 80159d4:	4603      	mov	r3, r0
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d002      	beq.n	80159e0 <f_open+0x318>
 80159da:	2301      	movs	r3, #1
 80159dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80159e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d002      	beq.n	80159ee <f_open+0x326>
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	2200      	movs	r2, #0
 80159ec:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80159ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3760      	adds	r7, #96	; 0x60
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}

080159fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80159fa:	b580      	push	{r7, lr}
 80159fc:	b08c      	sub	sp, #48	; 0x30
 80159fe:	af00      	add	r7, sp, #0
 8015a00:	60f8      	str	r0, [r7, #12]
 8015a02:	60b9      	str	r1, [r7, #8]
 8015a04:	607a      	str	r2, [r7, #4]
 8015a06:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	f107 0210 	add.w	r2, r7, #16
 8015a18:	4611      	mov	r1, r2
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7ff fdda 	bl	80155d4 <validate>
 8015a20:	4603      	mov	r3, r0
 8015a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d107      	bne.n	8015a3e <f_write+0x44>
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	7c5b      	ldrb	r3, [r3, #17]
 8015a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d002      	beq.n	8015a44 <f_write+0x4a>
 8015a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a42:	e16a      	b.n	8015d1a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	7c1b      	ldrb	r3, [r3, #16]
 8015a48:	f003 0302 	and.w	r3, r3, #2
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d101      	bne.n	8015a54 <f_write+0x5a>
 8015a50:	2307      	movs	r3, #7
 8015a52:	e162      	b.n	8015d1a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	695a      	ldr	r2, [r3, #20]
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	441a      	add	r2, r3
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	695b      	ldr	r3, [r3, #20]
 8015a60:	429a      	cmp	r2, r3
 8015a62:	f080 814c 	bcs.w	8015cfe <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	695b      	ldr	r3, [r3, #20]
 8015a6a:	43db      	mvns	r3, r3
 8015a6c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015a6e:	e146      	b.n	8015cfe <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	695b      	ldr	r3, [r3, #20]
 8015a74:	693a      	ldr	r2, [r7, #16]
 8015a76:	8992      	ldrh	r2, [r2, #12]
 8015a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a7c:	fb02 f201 	mul.w	r2, r2, r1
 8015a80:	1a9b      	subs	r3, r3, r2
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	f040 80f1 	bne.w	8015c6a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	695b      	ldr	r3, [r3, #20]
 8015a8c:	693a      	ldr	r2, [r7, #16]
 8015a8e:	8992      	ldrh	r2, [r2, #12]
 8015a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8015a94:	693a      	ldr	r2, [r7, #16]
 8015a96:	8952      	ldrh	r2, [r2, #10]
 8015a98:	3a01      	subs	r2, #1
 8015a9a:	4013      	ands	r3, r2
 8015a9c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015a9e:	69bb      	ldr	r3, [r7, #24]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d143      	bne.n	8015b2c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	695b      	ldr	r3, [r3, #20]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d10c      	bne.n	8015ac6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	689b      	ldr	r3, [r3, #8]
 8015ab0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d11a      	bne.n	8015aee <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	2100      	movs	r1, #0
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7fe fa43 	bl	8013f48 <create_chain>
 8015ac2:	62b8      	str	r0, [r7, #40]	; 0x28
 8015ac4:	e013      	b.n	8015aee <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d007      	beq.n	8015ade <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	695b      	ldr	r3, [r3, #20]
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	68f8      	ldr	r0, [r7, #12]
 8015ad6:	f7fe facf 	bl	8014078 <clmt_clust>
 8015ada:	62b8      	str	r0, [r7, #40]	; 0x28
 8015adc:	e007      	b.n	8015aee <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015ade:	68fa      	ldr	r2, [r7, #12]
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	699b      	ldr	r3, [r3, #24]
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	4610      	mov	r0, r2
 8015ae8:	f7fe fa2e 	bl	8013f48 <create_chain>
 8015aec:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	f000 8109 	beq.w	8015d08 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af8:	2b01      	cmp	r3, #1
 8015afa:	d104      	bne.n	8015b06 <f_write+0x10c>
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	2202      	movs	r2, #2
 8015b00:	745a      	strb	r2, [r3, #17]
 8015b02:	2302      	movs	r3, #2
 8015b04:	e109      	b.n	8015d1a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b0c:	d104      	bne.n	8015b18 <f_write+0x11e>
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	2201      	movs	r2, #1
 8015b12:	745a      	strb	r2, [r3, #17]
 8015b14:	2301      	movs	r3, #1
 8015b16:	e100      	b.n	8015d1a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b1c:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	689b      	ldr	r3, [r3, #8]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d102      	bne.n	8015b2c <f_write+0x132>
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b2a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	7c1b      	ldrb	r3, [r3, #16]
 8015b30:	b25b      	sxtb	r3, r3
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	da18      	bge.n	8015b68 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015b36:	693b      	ldr	r3, [r7, #16]
 8015b38:	7858      	ldrb	r0, [r3, #1]
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	69da      	ldr	r2, [r3, #28]
 8015b44:	2301      	movs	r3, #1
 8015b46:	f7fd fd6b 	bl	8013620 <disk_write>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d004      	beq.n	8015b5a <f_write+0x160>
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	2201      	movs	r2, #1
 8015b54:	745a      	strb	r2, [r3, #17]
 8015b56:	2301      	movs	r3, #1
 8015b58:	e0df      	b.n	8015d1a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	7c1b      	ldrb	r3, [r3, #16]
 8015b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b62:	b2da      	uxtb	r2, r3
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015b68:	693a      	ldr	r2, [r7, #16]
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	699b      	ldr	r3, [r3, #24]
 8015b6e:	4619      	mov	r1, r3
 8015b70:	4610      	mov	r0, r2
 8015b72:	f7fd ff75 	bl	8013a60 <clust2sect>
 8015b76:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015b78:	697b      	ldr	r3, [r7, #20]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d104      	bne.n	8015b88 <f_write+0x18e>
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	2202      	movs	r2, #2
 8015b82:	745a      	strb	r2, [r3, #17]
 8015b84:	2302      	movs	r3, #2
 8015b86:	e0c8      	b.n	8015d1a <f_write+0x320>
			sect += csect;
 8015b88:	697a      	ldr	r2, [r7, #20]
 8015b8a:	69bb      	ldr	r3, [r7, #24]
 8015b8c:	4413      	add	r3, r2
 8015b8e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	899b      	ldrh	r3, [r3, #12]
 8015b94:	461a      	mov	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b9c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015b9e:	6a3b      	ldr	r3, [r7, #32]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d043      	beq.n	8015c2c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015ba4:	69ba      	ldr	r2, [r7, #24]
 8015ba6:	6a3b      	ldr	r3, [r7, #32]
 8015ba8:	4413      	add	r3, r2
 8015baa:	693a      	ldr	r2, [r7, #16]
 8015bac:	8952      	ldrh	r2, [r2, #10]
 8015bae:	4293      	cmp	r3, r2
 8015bb0:	d905      	bls.n	8015bbe <f_write+0x1c4>
					cc = fs->csize - csect;
 8015bb2:	693b      	ldr	r3, [r7, #16]
 8015bb4:	895b      	ldrh	r3, [r3, #10]
 8015bb6:	461a      	mov	r2, r3
 8015bb8:	69bb      	ldr	r3, [r7, #24]
 8015bba:	1ad3      	subs	r3, r2, r3
 8015bbc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	7858      	ldrb	r0, [r3, #1]
 8015bc2:	6a3b      	ldr	r3, [r7, #32]
 8015bc4:	697a      	ldr	r2, [r7, #20]
 8015bc6:	69f9      	ldr	r1, [r7, #28]
 8015bc8:	f7fd fd2a 	bl	8013620 <disk_write>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d004      	beq.n	8015bdc <f_write+0x1e2>
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	745a      	strb	r2, [r3, #17]
 8015bd8:	2301      	movs	r3, #1
 8015bda:	e09e      	b.n	8015d1a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	69da      	ldr	r2, [r3, #28]
 8015be0:	697b      	ldr	r3, [r7, #20]
 8015be2:	1ad3      	subs	r3, r2, r3
 8015be4:	6a3a      	ldr	r2, [r7, #32]
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d918      	bls.n	8015c1c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	69da      	ldr	r2, [r3, #28]
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	1ad3      	subs	r3, r2, r3
 8015bf8:	693a      	ldr	r2, [r7, #16]
 8015bfa:	8992      	ldrh	r2, [r2, #12]
 8015bfc:	fb02 f303 	mul.w	r3, r2, r3
 8015c00:	69fa      	ldr	r2, [r7, #28]
 8015c02:	18d1      	adds	r1, r2, r3
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	899b      	ldrh	r3, [r3, #12]
 8015c08:	461a      	mov	r2, r3
 8015c0a:	f7fd fdc9 	bl	80137a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	7c1b      	ldrb	r3, [r3, #16]
 8015c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015c16:	b2da      	uxtb	r2, r3
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015c1c:	693b      	ldr	r3, [r7, #16]
 8015c1e:	899b      	ldrh	r3, [r3, #12]
 8015c20:	461a      	mov	r2, r3
 8015c22:	6a3b      	ldr	r3, [r7, #32]
 8015c24:	fb02 f303 	mul.w	r3, r2, r3
 8015c28:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015c2a:	e04b      	b.n	8015cc4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	69db      	ldr	r3, [r3, #28]
 8015c30:	697a      	ldr	r2, [r7, #20]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d016      	beq.n	8015c64 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	695a      	ldr	r2, [r3, #20]
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d210      	bcs.n	8015c64 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	7858      	ldrb	r0, [r3, #1]
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	697a      	ldr	r2, [r7, #20]
 8015c50:	f7fd fcc6 	bl	80135e0 <disk_read>
 8015c54:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d004      	beq.n	8015c64 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	2201      	movs	r2, #1
 8015c5e:	745a      	strb	r2, [r3, #17]
 8015c60:	2301      	movs	r3, #1
 8015c62:	e05a      	b.n	8015d1a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	697a      	ldr	r2, [r7, #20]
 8015c68:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	899b      	ldrh	r3, [r3, #12]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	695b      	ldr	r3, [r3, #20]
 8015c74:	693a      	ldr	r2, [r7, #16]
 8015c76:	8992      	ldrh	r2, [r2, #12]
 8015c78:	fbb3 f1f2 	udiv	r1, r3, r2
 8015c7c:	fb02 f201 	mul.w	r2, r2, r1
 8015c80:	1a9b      	subs	r3, r3, r2
 8015c82:	1ac3      	subs	r3, r0, r3
 8015c84:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d901      	bls.n	8015c92 <f_write+0x298>
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	695b      	ldr	r3, [r3, #20]
 8015c9c:	693a      	ldr	r2, [r7, #16]
 8015c9e:	8992      	ldrh	r2, [r2, #12]
 8015ca0:	fbb3 f0f2 	udiv	r0, r3, r2
 8015ca4:	fb02 f200 	mul.w	r2, r2, r0
 8015ca8:	1a9b      	subs	r3, r3, r2
 8015caa:	440b      	add	r3, r1
 8015cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cae:	69f9      	ldr	r1, [r7, #28]
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7fd fd75 	bl	80137a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	7c1b      	ldrb	r3, [r3, #16]
 8015cba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015cbe:	b2da      	uxtb	r2, r3
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015cc4:	69fa      	ldr	r2, [r7, #28]
 8015cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc8:	4413      	add	r3, r2
 8015cca:	61fb      	str	r3, [r7, #28]
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	695a      	ldr	r2, [r3, #20]
 8015cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd2:	441a      	add	r2, r3
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	615a      	str	r2, [r3, #20]
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	68da      	ldr	r2, [r3, #12]
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	695b      	ldr	r3, [r3, #20]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	bf38      	it	cc
 8015ce4:	461a      	movcc	r2, r3
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	60da      	str	r2, [r3, #12]
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf0:	441a      	add	r2, r3
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	601a      	str	r2, [r3, #0]
 8015cf6:	687a      	ldr	r2, [r7, #4]
 8015cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cfa:	1ad3      	subs	r3, r2, r3
 8015cfc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	f47f aeb5 	bne.w	8015a70 <f_write+0x76>
 8015d06:	e000      	b.n	8015d0a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015d08:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	7c1b      	ldrb	r3, [r3, #16]
 8015d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d12:	b2da      	uxtb	r2, r3
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8015d18:	2300      	movs	r3, #0
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3730      	adds	r7, #48	; 0x30
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015d22:	b580      	push	{r7, lr}
 8015d24:	b086      	sub	sp, #24
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f107 0208 	add.w	r2, r7, #8
 8015d30:	4611      	mov	r1, r2
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7ff fc4e 	bl	80155d4 <validate>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015d3c:	7dfb      	ldrb	r3, [r7, #23]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d168      	bne.n	8015e14 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	7c1b      	ldrb	r3, [r3, #16]
 8015d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d062      	beq.n	8015e14 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	7c1b      	ldrb	r3, [r3, #16]
 8015d52:	b25b      	sxtb	r3, r3
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	da15      	bge.n	8015d84 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015d58:	68bb      	ldr	r3, [r7, #8]
 8015d5a:	7858      	ldrb	r0, [r3, #1]
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	69da      	ldr	r2, [r3, #28]
 8015d66:	2301      	movs	r3, #1
 8015d68:	f7fd fc5a 	bl	8013620 <disk_write>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d001      	beq.n	8015d76 <f_sync+0x54>
 8015d72:	2301      	movs	r3, #1
 8015d74:	e04f      	b.n	8015e16 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	7c1b      	ldrb	r3, [r3, #16]
 8015d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d7e:	b2da      	uxtb	r2, r3
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015d84:	f7fa fa44 	bl	8010210 <get_fattime>
 8015d88:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015d8a:	68ba      	ldr	r2, [r7, #8]
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6a1b      	ldr	r3, [r3, #32]
 8015d90:	4619      	mov	r1, r3
 8015d92:	4610      	mov	r0, r2
 8015d94:	f7fd fdc6 	bl	8013924 <move_window>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015d9c:	7dfb      	ldrb	r3, [r7, #23]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d138      	bne.n	8015e14 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015da6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	330b      	adds	r3, #11
 8015dac:	781a      	ldrb	r2, [r3, #0]
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	330b      	adds	r3, #11
 8015db2:	f042 0220 	orr.w	r2, r2, #32
 8015db6:	b2d2      	uxtb	r2, r2
 8015db8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	6818      	ldr	r0, [r3, #0]
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	689b      	ldr	r3, [r3, #8]
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	68f9      	ldr	r1, [r7, #12]
 8015dc6:	f7fe fb54 	bl	8014472 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	f103 021c 	add.w	r2, r3, #28
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	68db      	ldr	r3, [r3, #12]
 8015dd4:	4619      	mov	r1, r3
 8015dd6:	4610      	mov	r0, r2
 8015dd8:	f7fd fcb6 	bl	8013748 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	3316      	adds	r3, #22
 8015de0:	6939      	ldr	r1, [r7, #16]
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7fd fcb0 	bl	8013748 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	3312      	adds	r3, #18
 8015dec:	2100      	movs	r1, #0
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7fd fc8f 	bl	8013712 <st_word>
					fs->wflag = 1;
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	2201      	movs	r2, #1
 8015df8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015dfa:	68bb      	ldr	r3, [r7, #8]
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f7fd fdbf 	bl	8013980 <sync_fs>
 8015e02:	4603      	mov	r3, r0
 8015e04:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	7c1b      	ldrb	r3, [r3, #16]
 8015e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e0e:	b2da      	uxtb	r2, r3
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3718      	adds	r7, #24
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}

08015e1e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015e1e:	b580      	push	{r7, lr}
 8015e20:	b084      	sub	sp, #16
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f7ff ff7b 	bl	8015d22 <f_sync>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015e30:	7bfb      	ldrb	r3, [r7, #15]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d10e      	bne.n	8015e54 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f107 0208 	add.w	r2, r7, #8
 8015e3c:	4611      	mov	r1, r2
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7ff fbc8 	bl	80155d4 <validate>
 8015e44:	4603      	mov	r3, r0
 8015e46:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015e48:	7bfb      	ldrb	r3, [r7, #15]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d102      	bne.n	8015e54 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2200      	movs	r2, #0
 8015e52:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e56:	4618      	mov	r0, r3
 8015e58:	3710      	adds	r7, #16
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	bd80      	pop	{r7, pc}

08015e5e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015e5e:	b580      	push	{r7, lr}
 8015e60:	b086      	sub	sp, #24
 8015e62:	af00      	add	r7, sp, #0
 8015e64:	6078      	str	r0, [r7, #4]
 8015e66:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d101      	bne.n	8015e72 <f_opendir+0x14>
 8015e6e:	2309      	movs	r3, #9
 8015e70:	e04c      	b.n	8015f0c <f_opendir+0xae>

	/* Get logical drive */
	obj = &dp->obj;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015e76:	f107 010c 	add.w	r1, r7, #12
 8015e7a:	463b      	mov	r3, r7
 8015e7c:	2200      	movs	r2, #0
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f7ff f922 	bl	80150c8 <find_volume>
 8015e84:	4603      	mov	r3, r0
 8015e86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015e88:	7dfb      	ldrb	r3, [r7, #23]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d137      	bne.n	8015efe <f_opendir+0xa0>
		obj->fs = fs;
 8015e8e:	68fa      	ldr	r2, [r7, #12]
 8015e90:	693b      	ldr	r3, [r7, #16]
 8015e92:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	4619      	mov	r1, r3
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f7ff f805 	bl	8014ea8 <follow_path>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015ea2:	7dfb      	ldrb	r3, [r7, #23]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d125      	bne.n	8015ef4 <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015eae:	b25b      	sxtb	r3, r3
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	db12      	blt.n	8015eda <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	799b      	ldrb	r3, [r3, #6]
 8015eb8:	f003 0310 	and.w	r3, r3, #16
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d00a      	beq.n	8015ed6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015ec0:	68fa      	ldr	r2, [r7, #12]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	69db      	ldr	r3, [r3, #28]
 8015ec6:	4619      	mov	r1, r3
 8015ec8:	4610      	mov	r0, r2
 8015eca:	f7fe fab3 	bl	8014434 <ld_clust>
 8015ece:	4602      	mov	r2, r0
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	609a      	str	r2, [r3, #8]
 8015ed4:	e001      	b.n	8015eda <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015ed6:	2305      	movs	r3, #5
 8015ed8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015eda:	7dfb      	ldrb	r3, [r7, #23]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d109      	bne.n	8015ef4 <f_opendir+0x96>
				obj->id = fs->id;
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	88da      	ldrh	r2, [r3, #6]
 8015ee4:	693b      	ldr	r3, [r7, #16]
 8015ee6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015ee8:	2100      	movs	r1, #0
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f7fe f8fc 	bl	80140e8 <dir_sdi>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015ef4:	7dfb      	ldrb	r3, [r7, #23]
 8015ef6:	2b04      	cmp	r3, #4
 8015ef8:	d101      	bne.n	8015efe <f_opendir+0xa0>
 8015efa:	2305      	movs	r3, #5
 8015efc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015efe:	7dfb      	ldrb	r3, [r7, #23]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d002      	beq.n	8015f0a <f_opendir+0xac>
 8015f04:	693b      	ldr	r3, [r7, #16]
 8015f06:	2200      	movs	r2, #0
 8015f08:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	3718      	adds	r7, #24
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bd80      	pop	{r7, pc}

08015f14 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f107 0208 	add.w	r2, r7, #8
 8015f22:	4611      	mov	r1, r2
 8015f24:	4618      	mov	r0, r3
 8015f26:	f7ff fb55 	bl	80155d4 <validate>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015f2e:	7bfb      	ldrb	r3, [r7, #15]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d102      	bne.n	8015f3a <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2200      	movs	r2, #0
 8015f38:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8015f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	3710      	adds	r7, #16
 8015f40:	46bd      	mov	sp, r7
 8015f42:	bd80      	pop	{r7, pc}

08015f44 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b096      	sub	sp, #88	; 0x58
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015f4c:	f107 0108 	add.w	r1, r7, #8
 8015f50:	1d3b      	adds	r3, r7, #4
 8015f52:	2202      	movs	r2, #2
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7ff f8b7 	bl	80150c8 <find_volume>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8015f60:	68bb      	ldr	r3, [r7, #8]
 8015f62:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8015f64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	f040 80f2 	bne.w	8016152 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015f6e:	687a      	ldr	r2, [r7, #4]
 8015f70:	f107 030c 	add.w	r3, r7, #12
 8015f74:	4611      	mov	r1, r2
 8015f76:	4618      	mov	r0, r3
 8015f78:	f7fe ff96 	bl	8014ea8 <follow_path>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015f82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d102      	bne.n	8015f90 <f_mkdir+0x4c>
 8015f8a:	2308      	movs	r3, #8
 8015f8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8015f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015f94:	2b04      	cmp	r3, #4
 8015f96:	f040 80dc 	bne.w	8016152 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015f9a:	f107 030c 	add.w	r3, r7, #12
 8015f9e:	2100      	movs	r1, #0
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f7fd ffd1 	bl	8013f48 <create_chain>
 8015fa6:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	895b      	ldrh	r3, [r3, #10]
 8015fac:	461a      	mov	r2, r3
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	899b      	ldrh	r3, [r3, #12]
 8015fb2:	fb03 f302 	mul.w	r3, r3, r2
 8015fb6:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d102      	bne.n	8015fca <f_mkdir+0x86>
 8015fc4:	2307      	movs	r3, #7
 8015fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8015fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fcc:	2b01      	cmp	r3, #1
 8015fce:	d102      	bne.n	8015fd6 <f_mkdir+0x92>
 8015fd0:	2302      	movs	r3, #2
 8015fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fdc:	d102      	bne.n	8015fe4 <f_mkdir+0xa0>
 8015fde:	2301      	movs	r3, #1
 8015fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d106      	bne.n	8015ffa <f_mkdir+0xb6>
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f7fd fc54 	bl	801389c <sync_window>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8015ffa:	f7fa f909 	bl	8010210 <get_fattime>
 8015ffe:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8016000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016004:	2b00      	cmp	r3, #0
 8016006:	d16c      	bne.n	80160e2 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801600c:	4618      	mov	r0, r3
 801600e:	f7fd fd27 	bl	8013a60 <clust2sect>
 8016012:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	3338      	adds	r3, #56	; 0x38
 8016018:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801601a:	68bb      	ldr	r3, [r7, #8]
 801601c:	899b      	ldrh	r3, [r3, #12]
 801601e:	461a      	mov	r2, r3
 8016020:	2100      	movs	r1, #0
 8016022:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016024:	f7fd fbdd 	bl	80137e2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8016028:	220b      	movs	r2, #11
 801602a:	2120      	movs	r1, #32
 801602c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801602e:	f7fd fbd8 	bl	80137e2 <mem_set>
					dir[DIR_Name] = '.';
 8016032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016034:	222e      	movs	r2, #46	; 0x2e
 8016036:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8016038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801603a:	330b      	adds	r3, #11
 801603c:	2210      	movs	r2, #16
 801603e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8016040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016042:	3316      	adds	r3, #22
 8016044:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016046:	4618      	mov	r0, r3
 8016048:	f7fd fb7e 	bl	8013748 <st_dword>
					st_clust(fs, dir, dcl);
 801604c:	68bb      	ldr	r3, [r7, #8]
 801604e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016052:	4618      	mov	r0, r3
 8016054:	f7fe fa0d 	bl	8014472 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8016058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801605a:	3320      	adds	r3, #32
 801605c:	2220      	movs	r2, #32
 801605e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016060:	4618      	mov	r0, r3
 8016062:	f7fd fb9d 	bl	80137a0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016068:	3321      	adds	r3, #33	; 0x21
 801606a:	222e      	movs	r2, #46	; 0x2e
 801606c:	701a      	strb	r2, [r3, #0]
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	2b03      	cmp	r3, #3
 8016078:	d106      	bne.n	8016088 <f_mkdir+0x144>
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801607e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016080:	429a      	cmp	r2, r3
 8016082:	d101      	bne.n	8016088 <f_mkdir+0x144>
 8016084:	2300      	movs	r3, #0
 8016086:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8016088:	68b8      	ldr	r0, [r7, #8]
 801608a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801608c:	3320      	adds	r3, #32
 801608e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016090:	4619      	mov	r1, r3
 8016092:	f7fe f9ee 	bl	8014472 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	895b      	ldrh	r3, [r3, #10]
 801609a:	653b      	str	r3, [r7, #80]	; 0x50
 801609c:	e01c      	b.n	80160d8 <f_mkdir+0x194>
					fs->winsect = dsc++;
 801609e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160a0:	1c5a      	adds	r2, r3, #1
 80160a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80160a4:	68ba      	ldr	r2, [r7, #8]
 80160a6:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80160a8:	68bb      	ldr	r3, [r7, #8]
 80160aa:	2201      	movs	r2, #1
 80160ac:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80160ae:	68bb      	ldr	r3, [r7, #8]
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7fd fbf3 	bl	801389c <sync_window>
 80160b6:	4603      	mov	r3, r0
 80160b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80160bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d10d      	bne.n	80160e0 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	899b      	ldrh	r3, [r3, #12]
 80160c8:	461a      	mov	r2, r3
 80160ca:	2100      	movs	r1, #0
 80160cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80160ce:	f7fd fb88 	bl	80137e2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80160d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160d4:	3b01      	subs	r3, #1
 80160d6:	653b      	str	r3, [r7, #80]	; 0x50
 80160d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d1df      	bne.n	801609e <f_mkdir+0x15a>
 80160de:	e000      	b.n	80160e2 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80160e0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80160e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d107      	bne.n	80160fa <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80160ea:	f107 030c 	add.w	r3, r7, #12
 80160ee:	4618      	mov	r0, r3
 80160f0:	f7fe fc2a 	bl	8014948 <dir_register>
 80160f4:	4603      	mov	r3, r0
 80160f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80160fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d120      	bne.n	8016144 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8016102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016104:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8016106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016108:	3316      	adds	r3, #22
 801610a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801610c:	4618      	mov	r0, r3
 801610e:	f7fd fb1b 	bl	8013748 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8016112:	68bb      	ldr	r3, [r7, #8]
 8016114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016118:	4618      	mov	r0, r3
 801611a:	f7fe f9aa 	bl	8014472 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801611e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016120:	330b      	adds	r3, #11
 8016122:	2210      	movs	r2, #16
 8016124:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	2201      	movs	r2, #1
 801612a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801612c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016130:	2b00      	cmp	r3, #0
 8016132:	d10e      	bne.n	8016152 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8016134:	68bb      	ldr	r3, [r7, #8]
 8016136:	4618      	mov	r0, r3
 8016138:	f7fd fc22 	bl	8013980 <sync_fs>
 801613c:	4603      	mov	r3, r0
 801613e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8016142:	e006      	b.n	8016152 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8016144:	f107 030c 	add.w	r3, r7, #12
 8016148:	2200      	movs	r2, #0
 801614a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801614c:	4618      	mov	r0, r3
 801614e:	f7fd fe96 	bl	8013e7e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8016152:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8016156:	4618      	mov	r0, r3
 8016158:	3758      	adds	r7, #88	; 0x58
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}
	...

08016160 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016160:	b480      	push	{r7}
 8016162:	b087      	sub	sp, #28
 8016164:	af00      	add	r7, sp, #0
 8016166:	60f8      	str	r0, [r7, #12]
 8016168:	60b9      	str	r1, [r7, #8]
 801616a:	4613      	mov	r3, r2
 801616c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801616e:	2301      	movs	r3, #1
 8016170:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016172:	2300      	movs	r3, #0
 8016174:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016176:	4b1f      	ldr	r3, [pc, #124]	; (80161f4 <FATFS_LinkDriverEx+0x94>)
 8016178:	7a5b      	ldrb	r3, [r3, #9]
 801617a:	b2db      	uxtb	r3, r3
 801617c:	2b00      	cmp	r3, #0
 801617e:	d131      	bne.n	80161e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016180:	4b1c      	ldr	r3, [pc, #112]	; (80161f4 <FATFS_LinkDriverEx+0x94>)
 8016182:	7a5b      	ldrb	r3, [r3, #9]
 8016184:	b2db      	uxtb	r3, r3
 8016186:	461a      	mov	r2, r3
 8016188:	4b1a      	ldr	r3, [pc, #104]	; (80161f4 <FATFS_LinkDriverEx+0x94>)
 801618a:	2100      	movs	r1, #0
 801618c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801618e:	4b19      	ldr	r3, [pc, #100]	; (80161f4 <FATFS_LinkDriverEx+0x94>)
 8016190:	7a5b      	ldrb	r3, [r3, #9]
 8016192:	b2db      	uxtb	r3, r3
 8016194:	4a17      	ldr	r2, [pc, #92]	; (80161f4 <FATFS_LinkDriverEx+0x94>)
 8016196:	009b      	lsls	r3, r3, #2
 8016198:	4413      	add	r3, r2
 801619a:	68fa      	ldr	r2, [r7, #12]
 801619c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801619e:	4b15      	ldr	r3, [pc, #84]	; (80161f4 <FATFS_LinkDriverEx+0x94>)
 80161a0:	7a5b      	ldrb	r3, [r3, #9]
 80161a2:	b2db      	uxtb	r3, r3
 80161a4:	461a      	mov	r2, r3
 80161a6:	4b13      	ldr	r3, [pc, #76]	; (80161f4 <FATFS_LinkDriverEx+0x94>)
 80161a8:	4413      	add	r3, r2
 80161aa:	79fa      	ldrb	r2, [r7, #7]
 80161ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80161ae:	4b11      	ldr	r3, [pc, #68]	; (80161f4 <FATFS_LinkDriverEx+0x94>)
 80161b0:	7a5b      	ldrb	r3, [r3, #9]
 80161b2:	b2db      	uxtb	r3, r3
 80161b4:	1c5a      	adds	r2, r3, #1
 80161b6:	b2d1      	uxtb	r1, r2
 80161b8:	4a0e      	ldr	r2, [pc, #56]	; (80161f4 <FATFS_LinkDriverEx+0x94>)
 80161ba:	7251      	strb	r1, [r2, #9]
 80161bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80161be:	7dbb      	ldrb	r3, [r7, #22]
 80161c0:	3330      	adds	r3, #48	; 0x30
 80161c2:	b2da      	uxtb	r2, r3
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	3301      	adds	r3, #1
 80161cc:	223a      	movs	r2, #58	; 0x3a
 80161ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80161d0:	68bb      	ldr	r3, [r7, #8]
 80161d2:	3302      	adds	r3, #2
 80161d4:	222f      	movs	r2, #47	; 0x2f
 80161d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80161d8:	68bb      	ldr	r3, [r7, #8]
 80161da:	3303      	adds	r3, #3
 80161dc:	2200      	movs	r2, #0
 80161de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80161e0:	2300      	movs	r3, #0
 80161e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80161e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	371c      	adds	r7, #28
 80161ea:	46bd      	mov	sp, r7
 80161ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f0:	4770      	bx	lr
 80161f2:	bf00      	nop
 80161f4:	2000040c 	.word	0x2000040c

080161f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016202:	2200      	movs	r2, #0
 8016204:	6839      	ldr	r1, [r7, #0]
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f7ff ffaa 	bl	8016160 <FATFS_LinkDriverEx>
 801620c:	4603      	mov	r3, r0
}
 801620e:	4618      	mov	r0, r3
 8016210:	3708      	adds	r7, #8
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}
	...

08016218 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016218:	b480      	push	{r7}
 801621a:	b085      	sub	sp, #20
 801621c:	af00      	add	r7, sp, #0
 801621e:	4603      	mov	r3, r0
 8016220:	6039      	str	r1, [r7, #0]
 8016222:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016224:	88fb      	ldrh	r3, [r7, #6]
 8016226:	2b7f      	cmp	r3, #127	; 0x7f
 8016228:	d802      	bhi.n	8016230 <ff_convert+0x18>
		c = chr;
 801622a:	88fb      	ldrh	r3, [r7, #6]
 801622c:	81fb      	strh	r3, [r7, #14]
 801622e:	e025      	b.n	801627c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d00b      	beq.n	801624e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016236:	88fb      	ldrh	r3, [r7, #6]
 8016238:	2bff      	cmp	r3, #255	; 0xff
 801623a:	d805      	bhi.n	8016248 <ff_convert+0x30>
 801623c:	88fb      	ldrh	r3, [r7, #6]
 801623e:	3b80      	subs	r3, #128	; 0x80
 8016240:	4a12      	ldr	r2, [pc, #72]	; (801628c <ff_convert+0x74>)
 8016242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016246:	e000      	b.n	801624a <ff_convert+0x32>
 8016248:	2300      	movs	r3, #0
 801624a:	81fb      	strh	r3, [r7, #14]
 801624c:	e016      	b.n	801627c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801624e:	2300      	movs	r3, #0
 8016250:	81fb      	strh	r3, [r7, #14]
 8016252:	e009      	b.n	8016268 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016254:	89fb      	ldrh	r3, [r7, #14]
 8016256:	4a0d      	ldr	r2, [pc, #52]	; (801628c <ff_convert+0x74>)
 8016258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801625c:	88fa      	ldrh	r2, [r7, #6]
 801625e:	429a      	cmp	r2, r3
 8016260:	d006      	beq.n	8016270 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016262:	89fb      	ldrh	r3, [r7, #14]
 8016264:	3301      	adds	r3, #1
 8016266:	81fb      	strh	r3, [r7, #14]
 8016268:	89fb      	ldrh	r3, [r7, #14]
 801626a:	2b7f      	cmp	r3, #127	; 0x7f
 801626c:	d9f2      	bls.n	8016254 <ff_convert+0x3c>
 801626e:	e000      	b.n	8016272 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016270:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016272:	89fb      	ldrh	r3, [r7, #14]
 8016274:	3380      	adds	r3, #128	; 0x80
 8016276:	b29b      	uxth	r3, r3
 8016278:	b2db      	uxtb	r3, r3
 801627a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801627c:	89fb      	ldrh	r3, [r7, #14]
}
 801627e:	4618      	mov	r0, r3
 8016280:	3714      	adds	r7, #20
 8016282:	46bd      	mov	sp, r7
 8016284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016288:	4770      	bx	lr
 801628a:	bf00      	nop
 801628c:	08017880 	.word	0x08017880

08016290 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8016290:	b480      	push	{r7}
 8016292:	b087      	sub	sp, #28
 8016294:	af00      	add	r7, sp, #0
 8016296:	4603      	mov	r3, r0
 8016298:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801629a:	88fb      	ldrh	r3, [r7, #6]
 801629c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80162a0:	d201      	bcs.n	80162a6 <ff_wtoupper+0x16>
 80162a2:	4b3e      	ldr	r3, [pc, #248]	; (801639c <ff_wtoupper+0x10c>)
 80162a4:	e000      	b.n	80162a8 <ff_wtoupper+0x18>
 80162a6:	4b3e      	ldr	r3, [pc, #248]	; (80163a0 <ff_wtoupper+0x110>)
 80162a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	1c9a      	adds	r2, r3, #2
 80162ae:	617a      	str	r2, [r7, #20]
 80162b0:	881b      	ldrh	r3, [r3, #0]
 80162b2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80162b4:	8a7b      	ldrh	r3, [r7, #18]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d068      	beq.n	801638c <ff_wtoupper+0xfc>
 80162ba:	88fa      	ldrh	r2, [r7, #6]
 80162bc:	8a7b      	ldrh	r3, [r7, #18]
 80162be:	429a      	cmp	r2, r3
 80162c0:	d364      	bcc.n	801638c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80162c2:	697b      	ldr	r3, [r7, #20]
 80162c4:	1c9a      	adds	r2, r3, #2
 80162c6:	617a      	str	r2, [r7, #20]
 80162c8:	881b      	ldrh	r3, [r3, #0]
 80162ca:	823b      	strh	r3, [r7, #16]
 80162cc:	8a3b      	ldrh	r3, [r7, #16]
 80162ce:	0a1b      	lsrs	r3, r3, #8
 80162d0:	81fb      	strh	r3, [r7, #14]
 80162d2:	8a3b      	ldrh	r3, [r7, #16]
 80162d4:	b2db      	uxtb	r3, r3
 80162d6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80162d8:	88fa      	ldrh	r2, [r7, #6]
 80162da:	8a79      	ldrh	r1, [r7, #18]
 80162dc:	8a3b      	ldrh	r3, [r7, #16]
 80162de:	440b      	add	r3, r1
 80162e0:	429a      	cmp	r2, r3
 80162e2:	da49      	bge.n	8016378 <ff_wtoupper+0xe8>
			switch (cmd) {
 80162e4:	89fb      	ldrh	r3, [r7, #14]
 80162e6:	2b08      	cmp	r3, #8
 80162e8:	d84f      	bhi.n	801638a <ff_wtoupper+0xfa>
 80162ea:	a201      	add	r2, pc, #4	; (adr r2, 80162f0 <ff_wtoupper+0x60>)
 80162ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162f0:	08016315 	.word	0x08016315
 80162f4:	08016327 	.word	0x08016327
 80162f8:	0801633d 	.word	0x0801633d
 80162fc:	08016345 	.word	0x08016345
 8016300:	0801634d 	.word	0x0801634d
 8016304:	08016355 	.word	0x08016355
 8016308:	0801635d 	.word	0x0801635d
 801630c:	08016365 	.word	0x08016365
 8016310:	0801636d 	.word	0x0801636d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8016314:	88fa      	ldrh	r2, [r7, #6]
 8016316:	8a7b      	ldrh	r3, [r7, #18]
 8016318:	1ad3      	subs	r3, r2, r3
 801631a:	005b      	lsls	r3, r3, #1
 801631c:	697a      	ldr	r2, [r7, #20]
 801631e:	4413      	add	r3, r2
 8016320:	881b      	ldrh	r3, [r3, #0]
 8016322:	80fb      	strh	r3, [r7, #6]
 8016324:	e027      	b.n	8016376 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8016326:	88fa      	ldrh	r2, [r7, #6]
 8016328:	8a7b      	ldrh	r3, [r7, #18]
 801632a:	1ad3      	subs	r3, r2, r3
 801632c:	b29b      	uxth	r3, r3
 801632e:	f003 0301 	and.w	r3, r3, #1
 8016332:	b29b      	uxth	r3, r3
 8016334:	88fa      	ldrh	r2, [r7, #6]
 8016336:	1ad3      	subs	r3, r2, r3
 8016338:	80fb      	strh	r3, [r7, #6]
 801633a:	e01c      	b.n	8016376 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801633c:	88fb      	ldrh	r3, [r7, #6]
 801633e:	3b10      	subs	r3, #16
 8016340:	80fb      	strh	r3, [r7, #6]
 8016342:	e018      	b.n	8016376 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016344:	88fb      	ldrh	r3, [r7, #6]
 8016346:	3b20      	subs	r3, #32
 8016348:	80fb      	strh	r3, [r7, #6]
 801634a:	e014      	b.n	8016376 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801634c:	88fb      	ldrh	r3, [r7, #6]
 801634e:	3b30      	subs	r3, #48	; 0x30
 8016350:	80fb      	strh	r3, [r7, #6]
 8016352:	e010      	b.n	8016376 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016354:	88fb      	ldrh	r3, [r7, #6]
 8016356:	3b1a      	subs	r3, #26
 8016358:	80fb      	strh	r3, [r7, #6]
 801635a:	e00c      	b.n	8016376 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801635c:	88fb      	ldrh	r3, [r7, #6]
 801635e:	3308      	adds	r3, #8
 8016360:	80fb      	strh	r3, [r7, #6]
 8016362:	e008      	b.n	8016376 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016364:	88fb      	ldrh	r3, [r7, #6]
 8016366:	3b50      	subs	r3, #80	; 0x50
 8016368:	80fb      	strh	r3, [r7, #6]
 801636a:	e004      	b.n	8016376 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801636c:	88fb      	ldrh	r3, [r7, #6]
 801636e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8016372:	80fb      	strh	r3, [r7, #6]
 8016374:	bf00      	nop
			}
			break;
 8016376:	e008      	b.n	801638a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8016378:	89fb      	ldrh	r3, [r7, #14]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d195      	bne.n	80162aa <ff_wtoupper+0x1a>
 801637e:	8a3b      	ldrh	r3, [r7, #16]
 8016380:	005b      	lsls	r3, r3, #1
 8016382:	697a      	ldr	r2, [r7, #20]
 8016384:	4413      	add	r3, r2
 8016386:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8016388:	e78f      	b.n	80162aa <ff_wtoupper+0x1a>
			break;
 801638a:	bf00      	nop
	}

	return chr;
 801638c:	88fb      	ldrh	r3, [r7, #6]
}
 801638e:	4618      	mov	r0, r3
 8016390:	371c      	adds	r7, #28
 8016392:	46bd      	mov	sp, r7
 8016394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016398:	4770      	bx	lr
 801639a:	bf00      	nop
 801639c:	08017980 	.word	0x08017980
 80163a0:	08017b74 	.word	0x08017b74

080163a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80163a8:	2200      	movs	r2, #0
 80163aa:	4912      	ldr	r1, [pc, #72]	; (80163f4 <MX_USB_DEVICE_Init+0x50>)
 80163ac:	4812      	ldr	r0, [pc, #72]	; (80163f8 <MX_USB_DEVICE_Init+0x54>)
 80163ae:	f7fb ff62 	bl	8012276 <USBD_Init>
 80163b2:	4603      	mov	r3, r0
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d001      	beq.n	80163bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80163b8:	f7eb fc3a 	bl	8001c30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80163bc:	490f      	ldr	r1, [pc, #60]	; (80163fc <MX_USB_DEVICE_Init+0x58>)
 80163be:	480e      	ldr	r0, [pc, #56]	; (80163f8 <MX_USB_DEVICE_Init+0x54>)
 80163c0:	f7fb ff89 	bl	80122d6 <USBD_RegisterClass>
 80163c4:	4603      	mov	r3, r0
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d001      	beq.n	80163ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80163ca:	f7eb fc31 	bl	8001c30 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80163ce:	490c      	ldr	r1, [pc, #48]	; (8016400 <MX_USB_DEVICE_Init+0x5c>)
 80163d0:	4809      	ldr	r0, [pc, #36]	; (80163f8 <MX_USB_DEVICE_Init+0x54>)
 80163d2:	f7fa fb39 	bl	8010a48 <USBD_MSC_RegisterStorage>
 80163d6:	4603      	mov	r3, r0
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d001      	beq.n	80163e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80163dc:	f7eb fc28 	bl	8001c30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80163e0:	4805      	ldr	r0, [pc, #20]	; (80163f8 <MX_USB_DEVICE_Init+0x54>)
 80163e2:	f7fb ff9f 	bl	8012324 <USBD_Start>
 80163e6:	4603      	mov	r3, r0
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d001      	beq.n	80163f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80163ec:	f7eb fc20 	bl	8001c30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80163f0:	bf00      	nop
 80163f2:	bd80      	pop	{r7, pc}
 80163f4:	200000f4 	.word	0x200000f4
 80163f8:	20004efc 	.word	0x20004efc
 80163fc:	2000000c 	.word	0x2000000c
 8016400:	20000154 	.word	0x20000154

08016404 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016404:	b480      	push	{r7}
 8016406:	b083      	sub	sp, #12
 8016408:	af00      	add	r7, sp, #0
 801640a:	4603      	mov	r3, r0
 801640c:	6039      	str	r1, [r7, #0]
 801640e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	2212      	movs	r2, #18
 8016414:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016416:	4b03      	ldr	r3, [pc, #12]	; (8016424 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016418:	4618      	mov	r0, r3
 801641a:	370c      	adds	r7, #12
 801641c:	46bd      	mov	sp, r7
 801641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016422:	4770      	bx	lr
 8016424:	20000114 	.word	0x20000114

08016428 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016428:	b480      	push	{r7}
 801642a:	b083      	sub	sp, #12
 801642c:	af00      	add	r7, sp, #0
 801642e:	4603      	mov	r3, r0
 8016430:	6039      	str	r1, [r7, #0]
 8016432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	2204      	movs	r2, #4
 8016438:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801643a:	4b03      	ldr	r3, [pc, #12]	; (8016448 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801643c:	4618      	mov	r0, r3
 801643e:	370c      	adds	r7, #12
 8016440:	46bd      	mov	sp, r7
 8016442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016446:	4770      	bx	lr
 8016448:	20000134 	.word	0x20000134

0801644c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b082      	sub	sp, #8
 8016450:	af00      	add	r7, sp, #0
 8016452:	4603      	mov	r3, r0
 8016454:	6039      	str	r1, [r7, #0]
 8016456:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016458:	79fb      	ldrb	r3, [r7, #7]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d105      	bne.n	801646a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801645e:	683a      	ldr	r2, [r7, #0]
 8016460:	4907      	ldr	r1, [pc, #28]	; (8016480 <USBD_FS_ProductStrDescriptor+0x34>)
 8016462:	4808      	ldr	r0, [pc, #32]	; (8016484 <USBD_FS_ProductStrDescriptor+0x38>)
 8016464:	f7fc ffb9 	bl	80133da <USBD_GetString>
 8016468:	e004      	b.n	8016474 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801646a:	683a      	ldr	r2, [r7, #0]
 801646c:	4904      	ldr	r1, [pc, #16]	; (8016480 <USBD_FS_ProductStrDescriptor+0x34>)
 801646e:	4805      	ldr	r0, [pc, #20]	; (8016484 <USBD_FS_ProductStrDescriptor+0x38>)
 8016470:	f7fc ffb3 	bl	80133da <USBD_GetString>
  }
  return USBD_StrDesc;
 8016474:	4b02      	ldr	r3, [pc, #8]	; (8016480 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016476:	4618      	mov	r0, r3
 8016478:	3708      	adds	r7, #8
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}
 801647e:	bf00      	nop
 8016480:	200051cc 	.word	0x200051cc
 8016484:	08017778 	.word	0x08017778

08016488 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b082      	sub	sp, #8
 801648c:	af00      	add	r7, sp, #0
 801648e:	4603      	mov	r3, r0
 8016490:	6039      	str	r1, [r7, #0]
 8016492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016494:	683a      	ldr	r2, [r7, #0]
 8016496:	4904      	ldr	r1, [pc, #16]	; (80164a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016498:	4804      	ldr	r0, [pc, #16]	; (80164ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801649a:	f7fc ff9e 	bl	80133da <USBD_GetString>
  return USBD_StrDesc;
 801649e:	4b02      	ldr	r3, [pc, #8]	; (80164a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3708      	adds	r7, #8
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}
 80164a8:	200051cc 	.word	0x200051cc
 80164ac:	0801778c 	.word	0x0801778c

080164b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b082      	sub	sp, #8
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	4603      	mov	r3, r0
 80164b8:	6039      	str	r1, [r7, #0]
 80164ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	221a      	movs	r2, #26
 80164c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80164c2:	f000 f855 	bl	8016570 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80164c6:	4b02      	ldr	r3, [pc, #8]	; (80164d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80164c8:	4618      	mov	r0, r3
 80164ca:	3708      	adds	r7, #8
 80164cc:	46bd      	mov	sp, r7
 80164ce:	bd80      	pop	{r7, pc}
 80164d0:	20000138 	.word	0x20000138

080164d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b082      	sub	sp, #8
 80164d8:	af00      	add	r7, sp, #0
 80164da:	4603      	mov	r3, r0
 80164dc:	6039      	str	r1, [r7, #0]
 80164de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80164e0:	79fb      	ldrb	r3, [r7, #7]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d105      	bne.n	80164f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80164e6:	683a      	ldr	r2, [r7, #0]
 80164e8:	4907      	ldr	r1, [pc, #28]	; (8016508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80164ea:	4808      	ldr	r0, [pc, #32]	; (801650c <USBD_FS_ConfigStrDescriptor+0x38>)
 80164ec:	f7fc ff75 	bl	80133da <USBD_GetString>
 80164f0:	e004      	b.n	80164fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80164f2:	683a      	ldr	r2, [r7, #0]
 80164f4:	4904      	ldr	r1, [pc, #16]	; (8016508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80164f6:	4805      	ldr	r0, [pc, #20]	; (801650c <USBD_FS_ConfigStrDescriptor+0x38>)
 80164f8:	f7fc ff6f 	bl	80133da <USBD_GetString>
  }
  return USBD_StrDesc;
 80164fc:	4b02      	ldr	r3, [pc, #8]	; (8016508 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3708      	adds	r7, #8
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	200051cc 	.word	0x200051cc
 801650c:	080177a0 	.word	0x080177a0

08016510 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	4603      	mov	r3, r0
 8016518:	6039      	str	r1, [r7, #0]
 801651a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801651c:	79fb      	ldrb	r3, [r7, #7]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d105      	bne.n	801652e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016522:	683a      	ldr	r2, [r7, #0]
 8016524:	4907      	ldr	r1, [pc, #28]	; (8016544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016526:	4808      	ldr	r0, [pc, #32]	; (8016548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016528:	f7fc ff57 	bl	80133da <USBD_GetString>
 801652c:	e004      	b.n	8016538 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801652e:	683a      	ldr	r2, [r7, #0]
 8016530:	4904      	ldr	r1, [pc, #16]	; (8016544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016532:	4805      	ldr	r0, [pc, #20]	; (8016548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016534:	f7fc ff51 	bl	80133da <USBD_GetString>
  }
  return USBD_StrDesc;
 8016538:	4b02      	ldr	r3, [pc, #8]	; (8016544 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801653a:	4618      	mov	r0, r3
 801653c:	3708      	adds	r7, #8
 801653e:	46bd      	mov	sp, r7
 8016540:	bd80      	pop	{r7, pc}
 8016542:	bf00      	nop
 8016544:	200051cc 	.word	0x200051cc
 8016548:	080177ac 	.word	0x080177ac

0801654c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801654c:	b480      	push	{r7}
 801654e:	b083      	sub	sp, #12
 8016550:	af00      	add	r7, sp, #0
 8016552:	4603      	mov	r3, r0
 8016554:	6039      	str	r1, [r7, #0]
 8016556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	220c      	movs	r2, #12
 801655c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801655e:	4b03      	ldr	r3, [pc, #12]	; (801656c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8016560:	4618      	mov	r0, r3
 8016562:	370c      	adds	r7, #12
 8016564:	46bd      	mov	sp, r7
 8016566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656a:	4770      	bx	lr
 801656c:	20000128 	.word	0x20000128

08016570 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b084      	sub	sp, #16
 8016574:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016576:	4b0f      	ldr	r3, [pc, #60]	; (80165b4 <Get_SerialNum+0x44>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801657c:	4b0e      	ldr	r3, [pc, #56]	; (80165b8 <Get_SerialNum+0x48>)
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016582:	4b0e      	ldr	r3, [pc, #56]	; (80165bc <Get_SerialNum+0x4c>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016588:	68fa      	ldr	r2, [r7, #12]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	4413      	add	r3, r2
 801658e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d009      	beq.n	80165aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016596:	2208      	movs	r2, #8
 8016598:	4909      	ldr	r1, [pc, #36]	; (80165c0 <Get_SerialNum+0x50>)
 801659a:	68f8      	ldr	r0, [r7, #12]
 801659c:	f000 f814 	bl	80165c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80165a0:	2204      	movs	r2, #4
 80165a2:	4908      	ldr	r1, [pc, #32]	; (80165c4 <Get_SerialNum+0x54>)
 80165a4:	68b8      	ldr	r0, [r7, #8]
 80165a6:	f000 f80f 	bl	80165c8 <IntToUnicode>
  }
}
 80165aa:	bf00      	nop
 80165ac:	3710      	adds	r7, #16
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
 80165b2:	bf00      	nop
 80165b4:	1fff7a10 	.word	0x1fff7a10
 80165b8:	1fff7a14 	.word	0x1fff7a14
 80165bc:	1fff7a18 	.word	0x1fff7a18
 80165c0:	2000013a 	.word	0x2000013a
 80165c4:	2000014a 	.word	0x2000014a

080165c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80165c8:	b480      	push	{r7}
 80165ca:	b087      	sub	sp, #28
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	60b9      	str	r1, [r7, #8]
 80165d2:	4613      	mov	r3, r2
 80165d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80165d6:	2300      	movs	r3, #0
 80165d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80165da:	2300      	movs	r3, #0
 80165dc:	75fb      	strb	r3, [r7, #23]
 80165de:	e027      	b.n	8016630 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	0f1b      	lsrs	r3, r3, #28
 80165e4:	2b09      	cmp	r3, #9
 80165e6:	d80b      	bhi.n	8016600 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	0f1b      	lsrs	r3, r3, #28
 80165ec:	b2da      	uxtb	r2, r3
 80165ee:	7dfb      	ldrb	r3, [r7, #23]
 80165f0:	005b      	lsls	r3, r3, #1
 80165f2:	4619      	mov	r1, r3
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	440b      	add	r3, r1
 80165f8:	3230      	adds	r2, #48	; 0x30
 80165fa:	b2d2      	uxtb	r2, r2
 80165fc:	701a      	strb	r2, [r3, #0]
 80165fe:	e00a      	b.n	8016616 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	0f1b      	lsrs	r3, r3, #28
 8016604:	b2da      	uxtb	r2, r3
 8016606:	7dfb      	ldrb	r3, [r7, #23]
 8016608:	005b      	lsls	r3, r3, #1
 801660a:	4619      	mov	r1, r3
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	440b      	add	r3, r1
 8016610:	3237      	adds	r2, #55	; 0x37
 8016612:	b2d2      	uxtb	r2, r2
 8016614:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	011b      	lsls	r3, r3, #4
 801661a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801661c:	7dfb      	ldrb	r3, [r7, #23]
 801661e:	005b      	lsls	r3, r3, #1
 8016620:	3301      	adds	r3, #1
 8016622:	68ba      	ldr	r2, [r7, #8]
 8016624:	4413      	add	r3, r2
 8016626:	2200      	movs	r2, #0
 8016628:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801662a:	7dfb      	ldrb	r3, [r7, #23]
 801662c:	3301      	adds	r3, #1
 801662e:	75fb      	strb	r3, [r7, #23]
 8016630:	7dfa      	ldrb	r2, [r7, #23]
 8016632:	79fb      	ldrb	r3, [r7, #7]
 8016634:	429a      	cmp	r2, r3
 8016636:	d3d3      	bcc.n	80165e0 <IntToUnicode+0x18>
  }
}
 8016638:	bf00      	nop
 801663a:	bf00      	nop
 801663c:	371c      	adds	r7, #28
 801663e:	46bd      	mov	sp, r7
 8016640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016644:	4770      	bx	lr

08016646 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8016646:	b480      	push	{r7}
 8016648:	b083      	sub	sp, #12
 801664a:	af00      	add	r7, sp, #0
 801664c:	4603      	mov	r3, r0
 801664e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8016650:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8016652:	4618      	mov	r0, r3
 8016654:	370c      	adds	r7, #12
 8016656:	46bd      	mov	sp, r7
 8016658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665c:	4770      	bx	lr

0801665e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801665e:	b480      	push	{r7}
 8016660:	b085      	sub	sp, #20
 8016662:	af00      	add	r7, sp, #0
 8016664:	4603      	mov	r3, r0
 8016666:	60b9      	str	r1, [r7, #8]
 8016668:	607a      	str	r2, [r7, #4]
 801666a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016672:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	f44f 7200 	mov.w	r2, #512	; 0x200
 801667a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801667c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801667e:	4618      	mov	r0, r3
 8016680:	3714      	adds	r7, #20
 8016682:	46bd      	mov	sp, r7
 8016684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016688:	4770      	bx	lr

0801668a <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801668a:	b480      	push	{r7}
 801668c:	b083      	sub	sp, #12
 801668e:	af00      	add	r7, sp, #0
 8016690:	4603      	mov	r3, r0
 8016692:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016694:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016696:	4618      	mov	r0, r3
 8016698:	370c      	adds	r7, #12
 801669a:	46bd      	mov	sp, r7
 801669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a0:	4770      	bx	lr

080166a2 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80166a2:	b480      	push	{r7}
 80166a4:	b083      	sub	sp, #12
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	4603      	mov	r3, r0
 80166aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80166ac:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	370c      	adds	r7, #12
 80166b2:	46bd      	mov	sp, r7
 80166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b8:	4770      	bx	lr

080166ba <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80166ba:	b480      	push	{r7}
 80166bc:	b085      	sub	sp, #20
 80166be:	af00      	add	r7, sp, #0
 80166c0:	60b9      	str	r1, [r7, #8]
 80166c2:	607a      	str	r2, [r7, #4]
 80166c4:	461a      	mov	r2, r3
 80166c6:	4603      	mov	r3, r0
 80166c8:	73fb      	strb	r3, [r7, #15]
 80166ca:	4613      	mov	r3, r2
 80166cc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80166ce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80166d0:	4618      	mov	r0, r3
 80166d2:	3714      	adds	r7, #20
 80166d4:	46bd      	mov	sp, r7
 80166d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166da:	4770      	bx	lr

080166dc <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80166dc:	b480      	push	{r7}
 80166de:	b085      	sub	sp, #20
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	60b9      	str	r1, [r7, #8]
 80166e4:	607a      	str	r2, [r7, #4]
 80166e6:	461a      	mov	r2, r3
 80166e8:	4603      	mov	r3, r0
 80166ea:	73fb      	strb	r3, [r7, #15]
 80166ec:	4613      	mov	r3, r2
 80166ee:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80166f0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	3714      	adds	r7, #20
 80166f6:	46bd      	mov	sp, r7
 80166f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fc:	4770      	bx	lr

080166fe <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80166fe:	b480      	push	{r7}
 8016700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8016702:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016704:	4618      	mov	r0, r3
 8016706:	46bd      	mov	sp, r7
 8016708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670c:	4770      	bx	lr
	...

08016710 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b08a      	sub	sp, #40	; 0x28
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016718:	f107 0314 	add.w	r3, r7, #20
 801671c:	2200      	movs	r2, #0
 801671e:	601a      	str	r2, [r3, #0]
 8016720:	605a      	str	r2, [r3, #4]
 8016722:	609a      	str	r2, [r3, #8]
 8016724:	60da      	str	r2, [r3, #12]
 8016726:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016730:	d147      	bne.n	80167c2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016732:	2300      	movs	r3, #0
 8016734:	613b      	str	r3, [r7, #16]
 8016736:	4b25      	ldr	r3, [pc, #148]	; (80167cc <HAL_PCD_MspInit+0xbc>)
 8016738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801673a:	4a24      	ldr	r2, [pc, #144]	; (80167cc <HAL_PCD_MspInit+0xbc>)
 801673c:	f043 0301 	orr.w	r3, r3, #1
 8016740:	6313      	str	r3, [r2, #48]	; 0x30
 8016742:	4b22      	ldr	r3, [pc, #136]	; (80167cc <HAL_PCD_MspInit+0xbc>)
 8016744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016746:	f003 0301 	and.w	r3, r3, #1
 801674a:	613b      	str	r3, [r7, #16]
 801674c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801674e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016754:	2300      	movs	r3, #0
 8016756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016758:	2300      	movs	r3, #0
 801675a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801675c:	f107 0314 	add.w	r3, r7, #20
 8016760:	4619      	mov	r1, r3
 8016762:	481b      	ldr	r0, [pc, #108]	; (80167d0 <HAL_PCD_MspInit+0xc0>)
 8016764:	f7f1 fe44 	bl	80083f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016768:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801676c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801676e:	2302      	movs	r3, #2
 8016770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016772:	2300      	movs	r3, #0
 8016774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016776:	2303      	movs	r3, #3
 8016778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801677a:	230a      	movs	r3, #10
 801677c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801677e:	f107 0314 	add.w	r3, r7, #20
 8016782:	4619      	mov	r1, r3
 8016784:	4812      	ldr	r0, [pc, #72]	; (80167d0 <HAL_PCD_MspInit+0xc0>)
 8016786:	f7f1 fe33 	bl	80083f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801678a:	4b10      	ldr	r3, [pc, #64]	; (80167cc <HAL_PCD_MspInit+0xbc>)
 801678c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801678e:	4a0f      	ldr	r2, [pc, #60]	; (80167cc <HAL_PCD_MspInit+0xbc>)
 8016790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016794:	6353      	str	r3, [r2, #52]	; 0x34
 8016796:	2300      	movs	r3, #0
 8016798:	60fb      	str	r3, [r7, #12]
 801679a:	4b0c      	ldr	r3, [pc, #48]	; (80167cc <HAL_PCD_MspInit+0xbc>)
 801679c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801679e:	4a0b      	ldr	r2, [pc, #44]	; (80167cc <HAL_PCD_MspInit+0xbc>)
 80167a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80167a4:	6453      	str	r3, [r2, #68]	; 0x44
 80167a6:	4b09      	ldr	r3, [pc, #36]	; (80167cc <HAL_PCD_MspInit+0xbc>)
 80167a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167ae:	60fb      	str	r3, [r7, #12]
 80167b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80167b2:	2200      	movs	r2, #0
 80167b4:	2100      	movs	r1, #0
 80167b6:	2043      	movs	r0, #67	; 0x43
 80167b8:	f7f1 fa45 	bl	8007c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80167bc:	2043      	movs	r0, #67	; 0x43
 80167be:	f7f1 fa5e 	bl	8007c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80167c2:	bf00      	nop
 80167c4:	3728      	adds	r7, #40	; 0x28
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}
 80167ca:	bf00      	nop
 80167cc:	40023800 	.word	0x40023800
 80167d0:	40020000 	.word	0x40020000

080167d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b082      	sub	sp, #8
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80167e8:	4619      	mov	r1, r3
 80167ea:	4610      	mov	r0, r2
 80167ec:	f7fb fde5 	bl	80123ba <USBD_LL_SetupStage>
}
 80167f0:	bf00      	nop
 80167f2:	3708      	adds	r7, #8
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}

080167f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
 8016800:	460b      	mov	r3, r1
 8016802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801680a:	78fa      	ldrb	r2, [r7, #3]
 801680c:	6879      	ldr	r1, [r7, #4]
 801680e:	4613      	mov	r3, r2
 8016810:	00db      	lsls	r3, r3, #3
 8016812:	1a9b      	subs	r3, r3, r2
 8016814:	009b      	lsls	r3, r3, #2
 8016816:	440b      	add	r3, r1
 8016818:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801681c:	681a      	ldr	r2, [r3, #0]
 801681e:	78fb      	ldrb	r3, [r7, #3]
 8016820:	4619      	mov	r1, r3
 8016822:	f7fb fe1f 	bl	8012464 <USBD_LL_DataOutStage>
}
 8016826:	bf00      	nop
 8016828:	3708      	adds	r7, #8
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}

0801682e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801682e:	b580      	push	{r7, lr}
 8016830:	b082      	sub	sp, #8
 8016832:	af00      	add	r7, sp, #0
 8016834:	6078      	str	r0, [r7, #4]
 8016836:	460b      	mov	r3, r1
 8016838:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016840:	78fa      	ldrb	r2, [r7, #3]
 8016842:	6879      	ldr	r1, [r7, #4]
 8016844:	4613      	mov	r3, r2
 8016846:	00db      	lsls	r3, r3, #3
 8016848:	1a9b      	subs	r3, r3, r2
 801684a:	009b      	lsls	r3, r3, #2
 801684c:	440b      	add	r3, r1
 801684e:	3348      	adds	r3, #72	; 0x48
 8016850:	681a      	ldr	r2, [r3, #0]
 8016852:	78fb      	ldrb	r3, [r7, #3]
 8016854:	4619      	mov	r1, r3
 8016856:	f7fb fe68 	bl	801252a <USBD_LL_DataInStage>
}
 801685a:	bf00      	nop
 801685c:	3708      	adds	r7, #8
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}

08016862 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016862:	b580      	push	{r7, lr}
 8016864:	b082      	sub	sp, #8
 8016866:	af00      	add	r7, sp, #0
 8016868:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016870:	4618      	mov	r0, r3
 8016872:	f7fb ff7c 	bl	801276e <USBD_LL_SOF>
}
 8016876:	bf00      	nop
 8016878:	3708      	adds	r7, #8
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}

0801687e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801687e:	b580      	push	{r7, lr}
 8016880:	b084      	sub	sp, #16
 8016882:	af00      	add	r7, sp, #0
 8016884:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016886:	2301      	movs	r3, #1
 8016888:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	68db      	ldr	r3, [r3, #12]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d102      	bne.n	8016898 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016892:	2300      	movs	r3, #0
 8016894:	73fb      	strb	r3, [r7, #15]
 8016896:	e008      	b.n	80168aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	68db      	ldr	r3, [r3, #12]
 801689c:	2b02      	cmp	r3, #2
 801689e:	d102      	bne.n	80168a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80168a0:	2301      	movs	r3, #1
 80168a2:	73fb      	strb	r3, [r7, #15]
 80168a4:	e001      	b.n	80168aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80168a6:	f7eb f9c3 	bl	8001c30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168b0:	7bfa      	ldrb	r2, [r7, #15]
 80168b2:	4611      	mov	r1, r2
 80168b4:	4618      	mov	r0, r3
 80168b6:	f7fb ff1c 	bl	80126f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168c0:	4618      	mov	r0, r3
 80168c2:	f7fb fec8 	bl	8012656 <USBD_LL_Reset>
}
 80168c6:	bf00      	nop
 80168c8:	3710      	adds	r7, #16
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}
	...

080168d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168de:	4618      	mov	r0, r3
 80168e0:	f7fb ff17 	bl	8012712 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	687a      	ldr	r2, [r7, #4]
 80168f0:	6812      	ldr	r2, [r2, #0]
 80168f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80168f6:	f043 0301 	orr.w	r3, r3, #1
 80168fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	6a1b      	ldr	r3, [r3, #32]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d005      	beq.n	8016910 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016904:	4b04      	ldr	r3, [pc, #16]	; (8016918 <HAL_PCD_SuspendCallback+0x48>)
 8016906:	691b      	ldr	r3, [r3, #16]
 8016908:	4a03      	ldr	r2, [pc, #12]	; (8016918 <HAL_PCD_SuspendCallback+0x48>)
 801690a:	f043 0306 	orr.w	r3, r3, #6
 801690e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016910:	bf00      	nop
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}
 8016918:	e000ed00 	.word	0xe000ed00

0801691c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801692a:	4618      	mov	r0, r3
 801692c:	f7fb ff07 	bl	801273e <USBD_LL_Resume>
}
 8016930:	bf00      	nop
 8016932:	3708      	adds	r7, #8
 8016934:	46bd      	mov	sp, r7
 8016936:	bd80      	pop	{r7, pc}

08016938 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
 8016940:	460b      	mov	r3, r1
 8016942:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801694a:	78fa      	ldrb	r2, [r7, #3]
 801694c:	4611      	mov	r1, r2
 801694e:	4618      	mov	r0, r3
 8016950:	f7fb ff55 	bl	80127fe <USBD_LL_IsoOUTIncomplete>
}
 8016954:	bf00      	nop
 8016956:	3708      	adds	r7, #8
 8016958:	46bd      	mov	sp, r7
 801695a:	bd80      	pop	{r7, pc}

0801695c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
 8016964:	460b      	mov	r3, r1
 8016966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801696e:	78fa      	ldrb	r2, [r7, #3]
 8016970:	4611      	mov	r1, r2
 8016972:	4618      	mov	r0, r3
 8016974:	f7fb ff1d 	bl	80127b2 <USBD_LL_IsoINIncomplete>
}
 8016978:	bf00      	nop
 801697a:	3708      	adds	r7, #8
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}

08016980 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801698e:	4618      	mov	r0, r3
 8016990:	f7fb ff5b 	bl	801284a <USBD_LL_DevConnected>
}
 8016994:	bf00      	nop
 8016996:	3708      	adds	r7, #8
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}

0801699c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b082      	sub	sp, #8
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169aa:	4618      	mov	r0, r3
 80169ac:	f7fb ff58 	bl	8012860 <USBD_LL_DevDisconnected>
}
 80169b0:	bf00      	nop
 80169b2:	3708      	adds	r7, #8
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}

080169b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b082      	sub	sp, #8
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	781b      	ldrb	r3, [r3, #0]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d13c      	bne.n	8016a42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80169c8:	4a20      	ldr	r2, [pc, #128]	; (8016a4c <USBD_LL_Init+0x94>)
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	4a1e      	ldr	r2, [pc, #120]	; (8016a4c <USBD_LL_Init+0x94>)
 80169d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80169d8:	4b1c      	ldr	r3, [pc, #112]	; (8016a4c <USBD_LL_Init+0x94>)
 80169da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80169de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80169e0:	4b1a      	ldr	r3, [pc, #104]	; (8016a4c <USBD_LL_Init+0x94>)
 80169e2:	2206      	movs	r2, #6
 80169e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80169e6:	4b19      	ldr	r3, [pc, #100]	; (8016a4c <USBD_LL_Init+0x94>)
 80169e8:	2202      	movs	r2, #2
 80169ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80169ec:	4b17      	ldr	r3, [pc, #92]	; (8016a4c <USBD_LL_Init+0x94>)
 80169ee:	2200      	movs	r2, #0
 80169f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80169f2:	4b16      	ldr	r3, [pc, #88]	; (8016a4c <USBD_LL_Init+0x94>)
 80169f4:	2202      	movs	r2, #2
 80169f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80169f8:	4b14      	ldr	r3, [pc, #80]	; (8016a4c <USBD_LL_Init+0x94>)
 80169fa:	2200      	movs	r2, #0
 80169fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80169fe:	4b13      	ldr	r3, [pc, #76]	; (8016a4c <USBD_LL_Init+0x94>)
 8016a00:	2200      	movs	r2, #0
 8016a02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016a04:	4b11      	ldr	r3, [pc, #68]	; (8016a4c <USBD_LL_Init+0x94>)
 8016a06:	2200      	movs	r2, #0
 8016a08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8016a0a:	4b10      	ldr	r3, [pc, #64]	; (8016a4c <USBD_LL_Init+0x94>)
 8016a0c:	2201      	movs	r2, #1
 8016a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016a10:	4b0e      	ldr	r3, [pc, #56]	; (8016a4c <USBD_LL_Init+0x94>)
 8016a12:	2200      	movs	r2, #0
 8016a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016a16:	480d      	ldr	r0, [pc, #52]	; (8016a4c <USBD_LL_Init+0x94>)
 8016a18:	f7f2 fec9 	bl	80097ae <HAL_PCD_Init>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d001      	beq.n	8016a26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016a22:	f7eb f905 	bl	8001c30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016a26:	2180      	movs	r1, #128	; 0x80
 8016a28:	4808      	ldr	r0, [pc, #32]	; (8016a4c <USBD_LL_Init+0x94>)
 8016a2a:	f7f4 f888 	bl	800ab3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016a2e:	2240      	movs	r2, #64	; 0x40
 8016a30:	2100      	movs	r1, #0
 8016a32:	4806      	ldr	r0, [pc, #24]	; (8016a4c <USBD_LL_Init+0x94>)
 8016a34:	f7f4 f83c 	bl	800aab0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016a38:	2280      	movs	r2, #128	; 0x80
 8016a3a:	2101      	movs	r1, #1
 8016a3c:	4803      	ldr	r0, [pc, #12]	; (8016a4c <USBD_LL_Init+0x94>)
 8016a3e:	f7f4 f837 	bl	800aab0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016a42:	2300      	movs	r3, #0
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	3708      	adds	r7, #8
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}
 8016a4c:	200053cc 	.word	0x200053cc

08016a50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b084      	sub	sp, #16
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a58:	2300      	movs	r3, #0
 8016a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a66:	4618      	mov	r0, r3
 8016a68:	f7f2 ffc5 	bl	80099f6 <HAL_PCD_Start>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a70:	7bfb      	ldrb	r3, [r7, #15]
 8016a72:	4618      	mov	r0, r3
 8016a74:	f000 f9b0 	bl	8016dd8 <USBD_Get_USB_Status>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3710      	adds	r7, #16
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}

08016a86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a86:	b580      	push	{r7, lr}
 8016a88:	b084      	sub	sp, #16
 8016a8a:	af00      	add	r7, sp, #0
 8016a8c:	6078      	str	r0, [r7, #4]
 8016a8e:	4608      	mov	r0, r1
 8016a90:	4611      	mov	r1, r2
 8016a92:	461a      	mov	r2, r3
 8016a94:	4603      	mov	r3, r0
 8016a96:	70fb      	strb	r3, [r7, #3]
 8016a98:	460b      	mov	r3, r1
 8016a9a:	70bb      	strb	r3, [r7, #2]
 8016a9c:	4613      	mov	r3, r2
 8016a9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016aae:	78bb      	ldrb	r3, [r7, #2]
 8016ab0:	883a      	ldrh	r2, [r7, #0]
 8016ab2:	78f9      	ldrb	r1, [r7, #3]
 8016ab4:	f7f3 fbd6 	bl	800a264 <HAL_PCD_EP_Open>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016abc:	7bfb      	ldrb	r3, [r7, #15]
 8016abe:	4618      	mov	r0, r3
 8016ac0:	f000 f98a 	bl	8016dd8 <USBD_Get_USB_Status>
 8016ac4:	4603      	mov	r3, r0
 8016ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3710      	adds	r7, #16
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}

08016ad2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ad2:	b580      	push	{r7, lr}
 8016ad4:	b084      	sub	sp, #16
 8016ad6:	af00      	add	r7, sp, #0
 8016ad8:	6078      	str	r0, [r7, #4]
 8016ada:	460b      	mov	r3, r1
 8016adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016aec:	78fa      	ldrb	r2, [r7, #3]
 8016aee:	4611      	mov	r1, r2
 8016af0:	4618      	mov	r0, r3
 8016af2:	f7f3 fc1f 	bl	800a334 <HAL_PCD_EP_Close>
 8016af6:	4603      	mov	r3, r0
 8016af8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016afa:	7bfb      	ldrb	r3, [r7, #15]
 8016afc:	4618      	mov	r0, r3
 8016afe:	f000 f96b 	bl	8016dd8 <USBD_Get_USB_Status>
 8016b02:	4603      	mov	r3, r0
 8016b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3710      	adds	r7, #16
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}

08016b10 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b084      	sub	sp, #16
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
 8016b18:	460b      	mov	r3, r1
 8016b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b20:	2300      	movs	r3, #0
 8016b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b2a:	78fa      	ldrb	r2, [r7, #3]
 8016b2c:	4611      	mov	r1, r2
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7f3 fdb1 	bl	800a696 <HAL_PCD_EP_Flush>
 8016b34:	4603      	mov	r3, r0
 8016b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b38:	7bfb      	ldrb	r3, [r7, #15]
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f000 f94c 	bl	8016dd8 <USBD_Get_USB_Status>
 8016b40:	4603      	mov	r3, r0
 8016b42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	3710      	adds	r7, #16
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}

08016b4e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b4e:	b580      	push	{r7, lr}
 8016b50:	b084      	sub	sp, #16
 8016b52:	af00      	add	r7, sp, #0
 8016b54:	6078      	str	r0, [r7, #4]
 8016b56:	460b      	mov	r3, r1
 8016b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b68:	78fa      	ldrb	r2, [r7, #3]
 8016b6a:	4611      	mov	r1, r2
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7f3 fcd8 	bl	800a522 <HAL_PCD_EP_SetStall>
 8016b72:	4603      	mov	r3, r0
 8016b74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f000 f92d 	bl	8016dd8 <USBD_Get_USB_Status>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b84:	4618      	mov	r0, r3
 8016b86:	3710      	adds	r7, #16
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd80      	pop	{r7, pc}

08016b8c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
 8016b94:	460b      	mov	r3, r1
 8016b96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b98:	2300      	movs	r3, #0
 8016b9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016ba6:	78fa      	ldrb	r2, [r7, #3]
 8016ba8:	4611      	mov	r1, r2
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7f3 fd1d 	bl	800a5ea <HAL_PCD_EP_ClrStall>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bb4:	7bfb      	ldrb	r3, [r7, #15]
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f000 f90e 	bl	8016dd8 <USBD_Get_USB_Status>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3710      	adds	r7, #16
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}

08016bca <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016bca:	b480      	push	{r7}
 8016bcc:	b085      	sub	sp, #20
 8016bce:	af00      	add	r7, sp, #0
 8016bd0:	6078      	str	r0, [r7, #4]
 8016bd2:	460b      	mov	r3, r1
 8016bd4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016bdc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	da0b      	bge.n	8016bfe <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016be6:	78fb      	ldrb	r3, [r7, #3]
 8016be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016bec:	68f9      	ldr	r1, [r7, #12]
 8016bee:	4613      	mov	r3, r2
 8016bf0:	00db      	lsls	r3, r3, #3
 8016bf2:	1a9b      	subs	r3, r3, r2
 8016bf4:	009b      	lsls	r3, r3, #2
 8016bf6:	440b      	add	r3, r1
 8016bf8:	333e      	adds	r3, #62	; 0x3e
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	e00b      	b.n	8016c16 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016bfe:	78fb      	ldrb	r3, [r7, #3]
 8016c00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016c04:	68f9      	ldr	r1, [r7, #12]
 8016c06:	4613      	mov	r3, r2
 8016c08:	00db      	lsls	r3, r3, #3
 8016c0a:	1a9b      	subs	r3, r3, r2
 8016c0c:	009b      	lsls	r3, r3, #2
 8016c0e:	440b      	add	r3, r1
 8016c10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016c14:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	3714      	adds	r7, #20
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c20:	4770      	bx	lr

08016c22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016c22:	b580      	push	{r7, lr}
 8016c24:	b084      	sub	sp, #16
 8016c26:	af00      	add	r7, sp, #0
 8016c28:	6078      	str	r0, [r7, #4]
 8016c2a:	460b      	mov	r3, r1
 8016c2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c32:	2300      	movs	r3, #0
 8016c34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c3c:	78fa      	ldrb	r2, [r7, #3]
 8016c3e:	4611      	mov	r1, r2
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7f3 faea 	bl	800a21a <HAL_PCD_SetAddress>
 8016c46:	4603      	mov	r3, r0
 8016c48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c4a:	7bfb      	ldrb	r3, [r7, #15]
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f000 f8c3 	bl	8016dd8 <USBD_Get_USB_Status>
 8016c52:	4603      	mov	r3, r0
 8016c54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c56:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3710      	adds	r7, #16
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}

08016c60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b086      	sub	sp, #24
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	60f8      	str	r0, [r7, #12]
 8016c68:	607a      	str	r2, [r7, #4]
 8016c6a:	603b      	str	r3, [r7, #0]
 8016c6c:	460b      	mov	r3, r1
 8016c6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c70:	2300      	movs	r3, #0
 8016c72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c74:	2300      	movs	r3, #0
 8016c76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c7e:	7af9      	ldrb	r1, [r7, #11]
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	687a      	ldr	r2, [r7, #4]
 8016c84:	f7f3 fc03 	bl	800a48e <HAL_PCD_EP_Transmit>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c8c:	7dfb      	ldrb	r3, [r7, #23]
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f000 f8a2 	bl	8016dd8 <USBD_Get_USB_Status>
 8016c94:	4603      	mov	r3, r0
 8016c96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c98:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	3718      	adds	r7, #24
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}

08016ca2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016ca2:	b580      	push	{r7, lr}
 8016ca4:	b086      	sub	sp, #24
 8016ca6:	af00      	add	r7, sp, #0
 8016ca8:	60f8      	str	r0, [r7, #12]
 8016caa:	607a      	str	r2, [r7, #4]
 8016cac:	603b      	str	r3, [r7, #0]
 8016cae:	460b      	mov	r3, r1
 8016cb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016cc0:	7af9      	ldrb	r1, [r7, #11]
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	687a      	ldr	r2, [r7, #4]
 8016cc6:	f7f3 fb7f 	bl	800a3c8 <HAL_PCD_EP_Receive>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cce:	7dfb      	ldrb	r3, [r7, #23]
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f000 f881 	bl	8016dd8 <USBD_Get_USB_Status>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016cda:	7dbb      	ldrb	r3, [r7, #22]
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3718      	adds	r7, #24
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}

08016ce4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b082      	sub	sp, #8
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
 8016cec:	460b      	mov	r3, r1
 8016cee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016cf6:	78fa      	ldrb	r2, [r7, #3]
 8016cf8:	4611      	mov	r1, r2
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7f3 fbaf 	bl	800a45e <HAL_PCD_EP_GetRxCount>
 8016d00:	4603      	mov	r3, r0
}
 8016d02:	4618      	mov	r0, r3
 8016d04:	3708      	adds	r7, #8
 8016d06:	46bd      	mov	sp, r7
 8016d08:	bd80      	pop	{r7, pc}
	...

08016d0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b082      	sub	sp, #8
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
 8016d14:	460b      	mov	r3, r1
 8016d16:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8016d18:	78fb      	ldrb	r3, [r7, #3]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d002      	beq.n	8016d24 <HAL_PCDEx_LPM_Callback+0x18>
 8016d1e:	2b01      	cmp	r3, #1
 8016d20:	d01f      	beq.n	8016d62 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8016d22:	e03b      	b.n	8016d9c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	6a1b      	ldr	r3, [r3, #32]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d007      	beq.n	8016d3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8016d2c:	f7ea fba4 	bl	8001478 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016d30:	4b1c      	ldr	r3, [pc, #112]	; (8016da4 <HAL_PCDEx_LPM_Callback+0x98>)
 8016d32:	691b      	ldr	r3, [r3, #16]
 8016d34:	4a1b      	ldr	r2, [pc, #108]	; (8016da4 <HAL_PCDEx_LPM_Callback+0x98>)
 8016d36:	f023 0306 	bic.w	r3, r3, #6
 8016d3a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	687a      	ldr	r2, [r7, #4]
 8016d48:	6812      	ldr	r2, [r2, #0]
 8016d4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016d4e:	f023 0301 	bic.w	r3, r3, #1
 8016d52:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f7fb fcef 	bl	801273e <USBD_LL_Resume>
    break;
 8016d60:	e01c      	b.n	8016d9c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	687a      	ldr	r2, [r7, #4]
 8016d6e:	6812      	ldr	r2, [r2, #0]
 8016d70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016d74:	f043 0301 	orr.w	r3, r3, #1
 8016d78:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7fb fcc6 	bl	8012712 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6a1b      	ldr	r3, [r3, #32]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d005      	beq.n	8016d9a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016d8e:	4b05      	ldr	r3, [pc, #20]	; (8016da4 <HAL_PCDEx_LPM_Callback+0x98>)
 8016d90:	691b      	ldr	r3, [r3, #16]
 8016d92:	4a04      	ldr	r2, [pc, #16]	; (8016da4 <HAL_PCDEx_LPM_Callback+0x98>)
 8016d94:	f043 0306 	orr.w	r3, r3, #6
 8016d98:	6113      	str	r3, [r2, #16]
    break;
 8016d9a:	bf00      	nop
}
 8016d9c:	bf00      	nop
 8016d9e:	3708      	adds	r7, #8
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd80      	pop	{r7, pc}
 8016da4:	e000ed00 	.word	0xe000ed00

08016da8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016da8:	b480      	push	{r7}
 8016daa:	b083      	sub	sp, #12
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016db0:	4b03      	ldr	r3, [pc, #12]	; (8016dc0 <USBD_static_malloc+0x18>)
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	370c      	adds	r7, #12
 8016db6:	46bd      	mov	sp, r7
 8016db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop
 8016dc0:	20000418 	.word	0x20000418

08016dc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016dc4:	b480      	push	{r7}
 8016dc6:	b083      	sub	sp, #12
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]

}
 8016dcc:	bf00      	nop
 8016dce:	370c      	adds	r7, #12
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd6:	4770      	bx	lr

08016dd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016dd8:	b480      	push	{r7}
 8016dda:	b085      	sub	sp, #20
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	4603      	mov	r3, r0
 8016de0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016de2:	2300      	movs	r3, #0
 8016de4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016de6:	79fb      	ldrb	r3, [r7, #7]
 8016de8:	2b03      	cmp	r3, #3
 8016dea:	d817      	bhi.n	8016e1c <USBD_Get_USB_Status+0x44>
 8016dec:	a201      	add	r2, pc, #4	; (adr r2, 8016df4 <USBD_Get_USB_Status+0x1c>)
 8016dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016df2:	bf00      	nop
 8016df4:	08016e05 	.word	0x08016e05
 8016df8:	08016e0b 	.word	0x08016e0b
 8016dfc:	08016e11 	.word	0x08016e11
 8016e00:	08016e17 	.word	0x08016e17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016e04:	2300      	movs	r3, #0
 8016e06:	73fb      	strb	r3, [r7, #15]
    break;
 8016e08:	e00b      	b.n	8016e22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016e0a:	2303      	movs	r3, #3
 8016e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8016e0e:	e008      	b.n	8016e22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016e10:	2301      	movs	r3, #1
 8016e12:	73fb      	strb	r3, [r7, #15]
    break;
 8016e14:	e005      	b.n	8016e22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016e16:	2303      	movs	r3, #3
 8016e18:	73fb      	strb	r3, [r7, #15]
    break;
 8016e1a:	e002      	b.n	8016e22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016e1c:	2303      	movs	r3, #3
 8016e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8016e20:	bf00      	nop
  }
  return usb_status;
 8016e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3714      	adds	r7, #20
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2e:	4770      	bx	lr

08016e30 <__errno>:
 8016e30:	4b01      	ldr	r3, [pc, #4]	; (8016e38 <__errno+0x8>)
 8016e32:	6818      	ldr	r0, [r3, #0]
 8016e34:	4770      	bx	lr
 8016e36:	bf00      	nop
 8016e38:	20000174 	.word	0x20000174

08016e3c <__libc_init_array>:
 8016e3c:	b570      	push	{r4, r5, r6, lr}
 8016e3e:	4d0d      	ldr	r5, [pc, #52]	; (8016e74 <__libc_init_array+0x38>)
 8016e40:	4c0d      	ldr	r4, [pc, #52]	; (8016e78 <__libc_init_array+0x3c>)
 8016e42:	1b64      	subs	r4, r4, r5
 8016e44:	10a4      	asrs	r4, r4, #2
 8016e46:	2600      	movs	r6, #0
 8016e48:	42a6      	cmp	r6, r4
 8016e4a:	d109      	bne.n	8016e60 <__libc_init_array+0x24>
 8016e4c:	4d0b      	ldr	r5, [pc, #44]	; (8016e7c <__libc_init_array+0x40>)
 8016e4e:	4c0c      	ldr	r4, [pc, #48]	; (8016e80 <__libc_init_array+0x44>)
 8016e50:	f000 fc4e 	bl	80176f0 <_init>
 8016e54:	1b64      	subs	r4, r4, r5
 8016e56:	10a4      	asrs	r4, r4, #2
 8016e58:	2600      	movs	r6, #0
 8016e5a:	42a6      	cmp	r6, r4
 8016e5c:	d105      	bne.n	8016e6a <__libc_init_array+0x2e>
 8016e5e:	bd70      	pop	{r4, r5, r6, pc}
 8016e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e64:	4798      	blx	r3
 8016e66:	3601      	adds	r6, #1
 8016e68:	e7ee      	b.n	8016e48 <__libc_init_array+0xc>
 8016e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e6e:	4798      	blx	r3
 8016e70:	3601      	adds	r6, #1
 8016e72:	e7f2      	b.n	8016e5a <__libc_init_array+0x1e>
 8016e74:	08017c90 	.word	0x08017c90
 8016e78:	08017c90 	.word	0x08017c90
 8016e7c:	08017c90 	.word	0x08017c90
 8016e80:	08017c94 	.word	0x08017c94

08016e84 <memcpy>:
 8016e84:	440a      	add	r2, r1
 8016e86:	4291      	cmp	r1, r2
 8016e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e8c:	d100      	bne.n	8016e90 <memcpy+0xc>
 8016e8e:	4770      	bx	lr
 8016e90:	b510      	push	{r4, lr}
 8016e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e9a:	4291      	cmp	r1, r2
 8016e9c:	d1f9      	bne.n	8016e92 <memcpy+0xe>
 8016e9e:	bd10      	pop	{r4, pc}

08016ea0 <memset>:
 8016ea0:	4402      	add	r2, r0
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	4293      	cmp	r3, r2
 8016ea6:	d100      	bne.n	8016eaa <memset+0xa>
 8016ea8:	4770      	bx	lr
 8016eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8016eae:	e7f9      	b.n	8016ea4 <memset+0x4>

08016eb0 <siprintf>:
 8016eb0:	b40e      	push	{r1, r2, r3}
 8016eb2:	b500      	push	{lr}
 8016eb4:	b09c      	sub	sp, #112	; 0x70
 8016eb6:	ab1d      	add	r3, sp, #116	; 0x74
 8016eb8:	9002      	str	r0, [sp, #8]
 8016eba:	9006      	str	r0, [sp, #24]
 8016ebc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ec0:	4809      	ldr	r0, [pc, #36]	; (8016ee8 <siprintf+0x38>)
 8016ec2:	9107      	str	r1, [sp, #28]
 8016ec4:	9104      	str	r1, [sp, #16]
 8016ec6:	4909      	ldr	r1, [pc, #36]	; (8016eec <siprintf+0x3c>)
 8016ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ecc:	9105      	str	r1, [sp, #20]
 8016ece:	6800      	ldr	r0, [r0, #0]
 8016ed0:	9301      	str	r3, [sp, #4]
 8016ed2:	a902      	add	r1, sp, #8
 8016ed4:	f000 f868 	bl	8016fa8 <_svfiprintf_r>
 8016ed8:	9b02      	ldr	r3, [sp, #8]
 8016eda:	2200      	movs	r2, #0
 8016edc:	701a      	strb	r2, [r3, #0]
 8016ede:	b01c      	add	sp, #112	; 0x70
 8016ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ee4:	b003      	add	sp, #12
 8016ee6:	4770      	bx	lr
 8016ee8:	20000174 	.word	0x20000174
 8016eec:	ffff0208 	.word	0xffff0208

08016ef0 <__ssputs_r>:
 8016ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ef4:	688e      	ldr	r6, [r1, #8]
 8016ef6:	429e      	cmp	r6, r3
 8016ef8:	4682      	mov	sl, r0
 8016efa:	460c      	mov	r4, r1
 8016efc:	4690      	mov	r8, r2
 8016efe:	461f      	mov	r7, r3
 8016f00:	d838      	bhi.n	8016f74 <__ssputs_r+0x84>
 8016f02:	898a      	ldrh	r2, [r1, #12]
 8016f04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016f08:	d032      	beq.n	8016f70 <__ssputs_r+0x80>
 8016f0a:	6825      	ldr	r5, [r4, #0]
 8016f0c:	6909      	ldr	r1, [r1, #16]
 8016f0e:	eba5 0901 	sub.w	r9, r5, r1
 8016f12:	6965      	ldr	r5, [r4, #20]
 8016f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016f1c:	3301      	adds	r3, #1
 8016f1e:	444b      	add	r3, r9
 8016f20:	106d      	asrs	r5, r5, #1
 8016f22:	429d      	cmp	r5, r3
 8016f24:	bf38      	it	cc
 8016f26:	461d      	movcc	r5, r3
 8016f28:	0553      	lsls	r3, r2, #21
 8016f2a:	d531      	bpl.n	8016f90 <__ssputs_r+0xa0>
 8016f2c:	4629      	mov	r1, r5
 8016f2e:	f000 fb39 	bl	80175a4 <_malloc_r>
 8016f32:	4606      	mov	r6, r0
 8016f34:	b950      	cbnz	r0, 8016f4c <__ssputs_r+0x5c>
 8016f36:	230c      	movs	r3, #12
 8016f38:	f8ca 3000 	str.w	r3, [sl]
 8016f3c:	89a3      	ldrh	r3, [r4, #12]
 8016f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f42:	81a3      	strh	r3, [r4, #12]
 8016f44:	f04f 30ff 	mov.w	r0, #4294967295
 8016f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f4c:	6921      	ldr	r1, [r4, #16]
 8016f4e:	464a      	mov	r2, r9
 8016f50:	f7ff ff98 	bl	8016e84 <memcpy>
 8016f54:	89a3      	ldrh	r3, [r4, #12]
 8016f56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f5e:	81a3      	strh	r3, [r4, #12]
 8016f60:	6126      	str	r6, [r4, #16]
 8016f62:	6165      	str	r5, [r4, #20]
 8016f64:	444e      	add	r6, r9
 8016f66:	eba5 0509 	sub.w	r5, r5, r9
 8016f6a:	6026      	str	r6, [r4, #0]
 8016f6c:	60a5      	str	r5, [r4, #8]
 8016f6e:	463e      	mov	r6, r7
 8016f70:	42be      	cmp	r6, r7
 8016f72:	d900      	bls.n	8016f76 <__ssputs_r+0x86>
 8016f74:	463e      	mov	r6, r7
 8016f76:	4632      	mov	r2, r6
 8016f78:	6820      	ldr	r0, [r4, #0]
 8016f7a:	4641      	mov	r1, r8
 8016f7c:	f000 faa8 	bl	80174d0 <memmove>
 8016f80:	68a3      	ldr	r3, [r4, #8]
 8016f82:	6822      	ldr	r2, [r4, #0]
 8016f84:	1b9b      	subs	r3, r3, r6
 8016f86:	4432      	add	r2, r6
 8016f88:	60a3      	str	r3, [r4, #8]
 8016f8a:	6022      	str	r2, [r4, #0]
 8016f8c:	2000      	movs	r0, #0
 8016f8e:	e7db      	b.n	8016f48 <__ssputs_r+0x58>
 8016f90:	462a      	mov	r2, r5
 8016f92:	f000 fb61 	bl	8017658 <_realloc_r>
 8016f96:	4606      	mov	r6, r0
 8016f98:	2800      	cmp	r0, #0
 8016f9a:	d1e1      	bne.n	8016f60 <__ssputs_r+0x70>
 8016f9c:	6921      	ldr	r1, [r4, #16]
 8016f9e:	4650      	mov	r0, sl
 8016fa0:	f000 fab0 	bl	8017504 <_free_r>
 8016fa4:	e7c7      	b.n	8016f36 <__ssputs_r+0x46>
	...

08016fa8 <_svfiprintf_r>:
 8016fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fac:	4698      	mov	r8, r3
 8016fae:	898b      	ldrh	r3, [r1, #12]
 8016fb0:	061b      	lsls	r3, r3, #24
 8016fb2:	b09d      	sub	sp, #116	; 0x74
 8016fb4:	4607      	mov	r7, r0
 8016fb6:	460d      	mov	r5, r1
 8016fb8:	4614      	mov	r4, r2
 8016fba:	d50e      	bpl.n	8016fda <_svfiprintf_r+0x32>
 8016fbc:	690b      	ldr	r3, [r1, #16]
 8016fbe:	b963      	cbnz	r3, 8016fda <_svfiprintf_r+0x32>
 8016fc0:	2140      	movs	r1, #64	; 0x40
 8016fc2:	f000 faef 	bl	80175a4 <_malloc_r>
 8016fc6:	6028      	str	r0, [r5, #0]
 8016fc8:	6128      	str	r0, [r5, #16]
 8016fca:	b920      	cbnz	r0, 8016fd6 <_svfiprintf_r+0x2e>
 8016fcc:	230c      	movs	r3, #12
 8016fce:	603b      	str	r3, [r7, #0]
 8016fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8016fd4:	e0d1      	b.n	801717a <_svfiprintf_r+0x1d2>
 8016fd6:	2340      	movs	r3, #64	; 0x40
 8016fd8:	616b      	str	r3, [r5, #20]
 8016fda:	2300      	movs	r3, #0
 8016fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8016fde:	2320      	movs	r3, #32
 8016fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8016fe8:	2330      	movs	r3, #48	; 0x30
 8016fea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017194 <_svfiprintf_r+0x1ec>
 8016fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016ff2:	f04f 0901 	mov.w	r9, #1
 8016ff6:	4623      	mov	r3, r4
 8016ff8:	469a      	mov	sl, r3
 8016ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ffe:	b10a      	cbz	r2, 8017004 <_svfiprintf_r+0x5c>
 8017000:	2a25      	cmp	r2, #37	; 0x25
 8017002:	d1f9      	bne.n	8016ff8 <_svfiprintf_r+0x50>
 8017004:	ebba 0b04 	subs.w	fp, sl, r4
 8017008:	d00b      	beq.n	8017022 <_svfiprintf_r+0x7a>
 801700a:	465b      	mov	r3, fp
 801700c:	4622      	mov	r2, r4
 801700e:	4629      	mov	r1, r5
 8017010:	4638      	mov	r0, r7
 8017012:	f7ff ff6d 	bl	8016ef0 <__ssputs_r>
 8017016:	3001      	adds	r0, #1
 8017018:	f000 80aa 	beq.w	8017170 <_svfiprintf_r+0x1c8>
 801701c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801701e:	445a      	add	r2, fp
 8017020:	9209      	str	r2, [sp, #36]	; 0x24
 8017022:	f89a 3000 	ldrb.w	r3, [sl]
 8017026:	2b00      	cmp	r3, #0
 8017028:	f000 80a2 	beq.w	8017170 <_svfiprintf_r+0x1c8>
 801702c:	2300      	movs	r3, #0
 801702e:	f04f 32ff 	mov.w	r2, #4294967295
 8017032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017036:	f10a 0a01 	add.w	sl, sl, #1
 801703a:	9304      	str	r3, [sp, #16]
 801703c:	9307      	str	r3, [sp, #28]
 801703e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017042:	931a      	str	r3, [sp, #104]	; 0x68
 8017044:	4654      	mov	r4, sl
 8017046:	2205      	movs	r2, #5
 8017048:	f814 1b01 	ldrb.w	r1, [r4], #1
 801704c:	4851      	ldr	r0, [pc, #324]	; (8017194 <_svfiprintf_r+0x1ec>)
 801704e:	f7e9 f8df 	bl	8000210 <memchr>
 8017052:	9a04      	ldr	r2, [sp, #16]
 8017054:	b9d8      	cbnz	r0, 801708e <_svfiprintf_r+0xe6>
 8017056:	06d0      	lsls	r0, r2, #27
 8017058:	bf44      	itt	mi
 801705a:	2320      	movmi	r3, #32
 801705c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017060:	0711      	lsls	r1, r2, #28
 8017062:	bf44      	itt	mi
 8017064:	232b      	movmi	r3, #43	; 0x2b
 8017066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801706a:	f89a 3000 	ldrb.w	r3, [sl]
 801706e:	2b2a      	cmp	r3, #42	; 0x2a
 8017070:	d015      	beq.n	801709e <_svfiprintf_r+0xf6>
 8017072:	9a07      	ldr	r2, [sp, #28]
 8017074:	4654      	mov	r4, sl
 8017076:	2000      	movs	r0, #0
 8017078:	f04f 0c0a 	mov.w	ip, #10
 801707c:	4621      	mov	r1, r4
 801707e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017082:	3b30      	subs	r3, #48	; 0x30
 8017084:	2b09      	cmp	r3, #9
 8017086:	d94e      	bls.n	8017126 <_svfiprintf_r+0x17e>
 8017088:	b1b0      	cbz	r0, 80170b8 <_svfiprintf_r+0x110>
 801708a:	9207      	str	r2, [sp, #28]
 801708c:	e014      	b.n	80170b8 <_svfiprintf_r+0x110>
 801708e:	eba0 0308 	sub.w	r3, r0, r8
 8017092:	fa09 f303 	lsl.w	r3, r9, r3
 8017096:	4313      	orrs	r3, r2
 8017098:	9304      	str	r3, [sp, #16]
 801709a:	46a2      	mov	sl, r4
 801709c:	e7d2      	b.n	8017044 <_svfiprintf_r+0x9c>
 801709e:	9b03      	ldr	r3, [sp, #12]
 80170a0:	1d19      	adds	r1, r3, #4
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	9103      	str	r1, [sp, #12]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	bfbb      	ittet	lt
 80170aa:	425b      	neglt	r3, r3
 80170ac:	f042 0202 	orrlt.w	r2, r2, #2
 80170b0:	9307      	strge	r3, [sp, #28]
 80170b2:	9307      	strlt	r3, [sp, #28]
 80170b4:	bfb8      	it	lt
 80170b6:	9204      	strlt	r2, [sp, #16]
 80170b8:	7823      	ldrb	r3, [r4, #0]
 80170ba:	2b2e      	cmp	r3, #46	; 0x2e
 80170bc:	d10c      	bne.n	80170d8 <_svfiprintf_r+0x130>
 80170be:	7863      	ldrb	r3, [r4, #1]
 80170c0:	2b2a      	cmp	r3, #42	; 0x2a
 80170c2:	d135      	bne.n	8017130 <_svfiprintf_r+0x188>
 80170c4:	9b03      	ldr	r3, [sp, #12]
 80170c6:	1d1a      	adds	r2, r3, #4
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	9203      	str	r2, [sp, #12]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	bfb8      	it	lt
 80170d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80170d4:	3402      	adds	r4, #2
 80170d6:	9305      	str	r3, [sp, #20]
 80170d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80171a4 <_svfiprintf_r+0x1fc>
 80170dc:	7821      	ldrb	r1, [r4, #0]
 80170de:	2203      	movs	r2, #3
 80170e0:	4650      	mov	r0, sl
 80170e2:	f7e9 f895 	bl	8000210 <memchr>
 80170e6:	b140      	cbz	r0, 80170fa <_svfiprintf_r+0x152>
 80170e8:	2340      	movs	r3, #64	; 0x40
 80170ea:	eba0 000a 	sub.w	r0, r0, sl
 80170ee:	fa03 f000 	lsl.w	r0, r3, r0
 80170f2:	9b04      	ldr	r3, [sp, #16]
 80170f4:	4303      	orrs	r3, r0
 80170f6:	3401      	adds	r4, #1
 80170f8:	9304      	str	r3, [sp, #16]
 80170fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170fe:	4826      	ldr	r0, [pc, #152]	; (8017198 <_svfiprintf_r+0x1f0>)
 8017100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017104:	2206      	movs	r2, #6
 8017106:	f7e9 f883 	bl	8000210 <memchr>
 801710a:	2800      	cmp	r0, #0
 801710c:	d038      	beq.n	8017180 <_svfiprintf_r+0x1d8>
 801710e:	4b23      	ldr	r3, [pc, #140]	; (801719c <_svfiprintf_r+0x1f4>)
 8017110:	bb1b      	cbnz	r3, 801715a <_svfiprintf_r+0x1b2>
 8017112:	9b03      	ldr	r3, [sp, #12]
 8017114:	3307      	adds	r3, #7
 8017116:	f023 0307 	bic.w	r3, r3, #7
 801711a:	3308      	adds	r3, #8
 801711c:	9303      	str	r3, [sp, #12]
 801711e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017120:	4433      	add	r3, r6
 8017122:	9309      	str	r3, [sp, #36]	; 0x24
 8017124:	e767      	b.n	8016ff6 <_svfiprintf_r+0x4e>
 8017126:	fb0c 3202 	mla	r2, ip, r2, r3
 801712a:	460c      	mov	r4, r1
 801712c:	2001      	movs	r0, #1
 801712e:	e7a5      	b.n	801707c <_svfiprintf_r+0xd4>
 8017130:	2300      	movs	r3, #0
 8017132:	3401      	adds	r4, #1
 8017134:	9305      	str	r3, [sp, #20]
 8017136:	4619      	mov	r1, r3
 8017138:	f04f 0c0a 	mov.w	ip, #10
 801713c:	4620      	mov	r0, r4
 801713e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017142:	3a30      	subs	r2, #48	; 0x30
 8017144:	2a09      	cmp	r2, #9
 8017146:	d903      	bls.n	8017150 <_svfiprintf_r+0x1a8>
 8017148:	2b00      	cmp	r3, #0
 801714a:	d0c5      	beq.n	80170d8 <_svfiprintf_r+0x130>
 801714c:	9105      	str	r1, [sp, #20]
 801714e:	e7c3      	b.n	80170d8 <_svfiprintf_r+0x130>
 8017150:	fb0c 2101 	mla	r1, ip, r1, r2
 8017154:	4604      	mov	r4, r0
 8017156:	2301      	movs	r3, #1
 8017158:	e7f0      	b.n	801713c <_svfiprintf_r+0x194>
 801715a:	ab03      	add	r3, sp, #12
 801715c:	9300      	str	r3, [sp, #0]
 801715e:	462a      	mov	r2, r5
 8017160:	4b0f      	ldr	r3, [pc, #60]	; (80171a0 <_svfiprintf_r+0x1f8>)
 8017162:	a904      	add	r1, sp, #16
 8017164:	4638      	mov	r0, r7
 8017166:	f3af 8000 	nop.w
 801716a:	1c42      	adds	r2, r0, #1
 801716c:	4606      	mov	r6, r0
 801716e:	d1d6      	bne.n	801711e <_svfiprintf_r+0x176>
 8017170:	89ab      	ldrh	r3, [r5, #12]
 8017172:	065b      	lsls	r3, r3, #25
 8017174:	f53f af2c 	bmi.w	8016fd0 <_svfiprintf_r+0x28>
 8017178:	9809      	ldr	r0, [sp, #36]	; 0x24
 801717a:	b01d      	add	sp, #116	; 0x74
 801717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017180:	ab03      	add	r3, sp, #12
 8017182:	9300      	str	r3, [sp, #0]
 8017184:	462a      	mov	r2, r5
 8017186:	4b06      	ldr	r3, [pc, #24]	; (80171a0 <_svfiprintf_r+0x1f8>)
 8017188:	a904      	add	r1, sp, #16
 801718a:	4638      	mov	r0, r7
 801718c:	f000 f87a 	bl	8017284 <_printf_i>
 8017190:	e7eb      	b.n	801716a <_svfiprintf_r+0x1c2>
 8017192:	bf00      	nop
 8017194:	08017c54 	.word	0x08017c54
 8017198:	08017c5e 	.word	0x08017c5e
 801719c:	00000000 	.word	0x00000000
 80171a0:	08016ef1 	.word	0x08016ef1
 80171a4:	08017c5a 	.word	0x08017c5a

080171a8 <_printf_common>:
 80171a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171ac:	4616      	mov	r6, r2
 80171ae:	4699      	mov	r9, r3
 80171b0:	688a      	ldr	r2, [r1, #8]
 80171b2:	690b      	ldr	r3, [r1, #16]
 80171b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80171b8:	4293      	cmp	r3, r2
 80171ba:	bfb8      	it	lt
 80171bc:	4613      	movlt	r3, r2
 80171be:	6033      	str	r3, [r6, #0]
 80171c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80171c4:	4607      	mov	r7, r0
 80171c6:	460c      	mov	r4, r1
 80171c8:	b10a      	cbz	r2, 80171ce <_printf_common+0x26>
 80171ca:	3301      	adds	r3, #1
 80171cc:	6033      	str	r3, [r6, #0]
 80171ce:	6823      	ldr	r3, [r4, #0]
 80171d0:	0699      	lsls	r1, r3, #26
 80171d2:	bf42      	ittt	mi
 80171d4:	6833      	ldrmi	r3, [r6, #0]
 80171d6:	3302      	addmi	r3, #2
 80171d8:	6033      	strmi	r3, [r6, #0]
 80171da:	6825      	ldr	r5, [r4, #0]
 80171dc:	f015 0506 	ands.w	r5, r5, #6
 80171e0:	d106      	bne.n	80171f0 <_printf_common+0x48>
 80171e2:	f104 0a19 	add.w	sl, r4, #25
 80171e6:	68e3      	ldr	r3, [r4, #12]
 80171e8:	6832      	ldr	r2, [r6, #0]
 80171ea:	1a9b      	subs	r3, r3, r2
 80171ec:	42ab      	cmp	r3, r5
 80171ee:	dc26      	bgt.n	801723e <_printf_common+0x96>
 80171f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80171f4:	1e13      	subs	r3, r2, #0
 80171f6:	6822      	ldr	r2, [r4, #0]
 80171f8:	bf18      	it	ne
 80171fa:	2301      	movne	r3, #1
 80171fc:	0692      	lsls	r2, r2, #26
 80171fe:	d42b      	bmi.n	8017258 <_printf_common+0xb0>
 8017200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017204:	4649      	mov	r1, r9
 8017206:	4638      	mov	r0, r7
 8017208:	47c0      	blx	r8
 801720a:	3001      	adds	r0, #1
 801720c:	d01e      	beq.n	801724c <_printf_common+0xa4>
 801720e:	6823      	ldr	r3, [r4, #0]
 8017210:	68e5      	ldr	r5, [r4, #12]
 8017212:	6832      	ldr	r2, [r6, #0]
 8017214:	f003 0306 	and.w	r3, r3, #6
 8017218:	2b04      	cmp	r3, #4
 801721a:	bf08      	it	eq
 801721c:	1aad      	subeq	r5, r5, r2
 801721e:	68a3      	ldr	r3, [r4, #8]
 8017220:	6922      	ldr	r2, [r4, #16]
 8017222:	bf0c      	ite	eq
 8017224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017228:	2500      	movne	r5, #0
 801722a:	4293      	cmp	r3, r2
 801722c:	bfc4      	itt	gt
 801722e:	1a9b      	subgt	r3, r3, r2
 8017230:	18ed      	addgt	r5, r5, r3
 8017232:	2600      	movs	r6, #0
 8017234:	341a      	adds	r4, #26
 8017236:	42b5      	cmp	r5, r6
 8017238:	d11a      	bne.n	8017270 <_printf_common+0xc8>
 801723a:	2000      	movs	r0, #0
 801723c:	e008      	b.n	8017250 <_printf_common+0xa8>
 801723e:	2301      	movs	r3, #1
 8017240:	4652      	mov	r2, sl
 8017242:	4649      	mov	r1, r9
 8017244:	4638      	mov	r0, r7
 8017246:	47c0      	blx	r8
 8017248:	3001      	adds	r0, #1
 801724a:	d103      	bne.n	8017254 <_printf_common+0xac>
 801724c:	f04f 30ff 	mov.w	r0, #4294967295
 8017250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017254:	3501      	adds	r5, #1
 8017256:	e7c6      	b.n	80171e6 <_printf_common+0x3e>
 8017258:	18e1      	adds	r1, r4, r3
 801725a:	1c5a      	adds	r2, r3, #1
 801725c:	2030      	movs	r0, #48	; 0x30
 801725e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017262:	4422      	add	r2, r4
 8017264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801726c:	3302      	adds	r3, #2
 801726e:	e7c7      	b.n	8017200 <_printf_common+0x58>
 8017270:	2301      	movs	r3, #1
 8017272:	4622      	mov	r2, r4
 8017274:	4649      	mov	r1, r9
 8017276:	4638      	mov	r0, r7
 8017278:	47c0      	blx	r8
 801727a:	3001      	adds	r0, #1
 801727c:	d0e6      	beq.n	801724c <_printf_common+0xa4>
 801727e:	3601      	adds	r6, #1
 8017280:	e7d9      	b.n	8017236 <_printf_common+0x8e>
	...

08017284 <_printf_i>:
 8017284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017288:	460c      	mov	r4, r1
 801728a:	4691      	mov	r9, r2
 801728c:	7e27      	ldrb	r7, [r4, #24]
 801728e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017290:	2f78      	cmp	r7, #120	; 0x78
 8017292:	4680      	mov	r8, r0
 8017294:	469a      	mov	sl, r3
 8017296:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801729a:	d807      	bhi.n	80172ac <_printf_i+0x28>
 801729c:	2f62      	cmp	r7, #98	; 0x62
 801729e:	d80a      	bhi.n	80172b6 <_printf_i+0x32>
 80172a0:	2f00      	cmp	r7, #0
 80172a2:	f000 80d8 	beq.w	8017456 <_printf_i+0x1d2>
 80172a6:	2f58      	cmp	r7, #88	; 0x58
 80172a8:	f000 80a3 	beq.w	80173f2 <_printf_i+0x16e>
 80172ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80172b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80172b4:	e03a      	b.n	801732c <_printf_i+0xa8>
 80172b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80172ba:	2b15      	cmp	r3, #21
 80172bc:	d8f6      	bhi.n	80172ac <_printf_i+0x28>
 80172be:	a001      	add	r0, pc, #4	; (adr r0, 80172c4 <_printf_i+0x40>)
 80172c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80172c4:	0801731d 	.word	0x0801731d
 80172c8:	08017331 	.word	0x08017331
 80172cc:	080172ad 	.word	0x080172ad
 80172d0:	080172ad 	.word	0x080172ad
 80172d4:	080172ad 	.word	0x080172ad
 80172d8:	080172ad 	.word	0x080172ad
 80172dc:	08017331 	.word	0x08017331
 80172e0:	080172ad 	.word	0x080172ad
 80172e4:	080172ad 	.word	0x080172ad
 80172e8:	080172ad 	.word	0x080172ad
 80172ec:	080172ad 	.word	0x080172ad
 80172f0:	0801743d 	.word	0x0801743d
 80172f4:	08017361 	.word	0x08017361
 80172f8:	0801741f 	.word	0x0801741f
 80172fc:	080172ad 	.word	0x080172ad
 8017300:	080172ad 	.word	0x080172ad
 8017304:	0801745f 	.word	0x0801745f
 8017308:	080172ad 	.word	0x080172ad
 801730c:	08017361 	.word	0x08017361
 8017310:	080172ad 	.word	0x080172ad
 8017314:	080172ad 	.word	0x080172ad
 8017318:	08017427 	.word	0x08017427
 801731c:	680b      	ldr	r3, [r1, #0]
 801731e:	1d1a      	adds	r2, r3, #4
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	600a      	str	r2, [r1, #0]
 8017324:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801732c:	2301      	movs	r3, #1
 801732e:	e0a3      	b.n	8017478 <_printf_i+0x1f4>
 8017330:	6825      	ldr	r5, [r4, #0]
 8017332:	6808      	ldr	r0, [r1, #0]
 8017334:	062e      	lsls	r6, r5, #24
 8017336:	f100 0304 	add.w	r3, r0, #4
 801733a:	d50a      	bpl.n	8017352 <_printf_i+0xce>
 801733c:	6805      	ldr	r5, [r0, #0]
 801733e:	600b      	str	r3, [r1, #0]
 8017340:	2d00      	cmp	r5, #0
 8017342:	da03      	bge.n	801734c <_printf_i+0xc8>
 8017344:	232d      	movs	r3, #45	; 0x2d
 8017346:	426d      	negs	r5, r5
 8017348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801734c:	485e      	ldr	r0, [pc, #376]	; (80174c8 <_printf_i+0x244>)
 801734e:	230a      	movs	r3, #10
 8017350:	e019      	b.n	8017386 <_printf_i+0x102>
 8017352:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017356:	6805      	ldr	r5, [r0, #0]
 8017358:	600b      	str	r3, [r1, #0]
 801735a:	bf18      	it	ne
 801735c:	b22d      	sxthne	r5, r5
 801735e:	e7ef      	b.n	8017340 <_printf_i+0xbc>
 8017360:	680b      	ldr	r3, [r1, #0]
 8017362:	6825      	ldr	r5, [r4, #0]
 8017364:	1d18      	adds	r0, r3, #4
 8017366:	6008      	str	r0, [r1, #0]
 8017368:	0628      	lsls	r0, r5, #24
 801736a:	d501      	bpl.n	8017370 <_printf_i+0xec>
 801736c:	681d      	ldr	r5, [r3, #0]
 801736e:	e002      	b.n	8017376 <_printf_i+0xf2>
 8017370:	0669      	lsls	r1, r5, #25
 8017372:	d5fb      	bpl.n	801736c <_printf_i+0xe8>
 8017374:	881d      	ldrh	r5, [r3, #0]
 8017376:	4854      	ldr	r0, [pc, #336]	; (80174c8 <_printf_i+0x244>)
 8017378:	2f6f      	cmp	r7, #111	; 0x6f
 801737a:	bf0c      	ite	eq
 801737c:	2308      	moveq	r3, #8
 801737e:	230a      	movne	r3, #10
 8017380:	2100      	movs	r1, #0
 8017382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017386:	6866      	ldr	r6, [r4, #4]
 8017388:	60a6      	str	r6, [r4, #8]
 801738a:	2e00      	cmp	r6, #0
 801738c:	bfa2      	ittt	ge
 801738e:	6821      	ldrge	r1, [r4, #0]
 8017390:	f021 0104 	bicge.w	r1, r1, #4
 8017394:	6021      	strge	r1, [r4, #0]
 8017396:	b90d      	cbnz	r5, 801739c <_printf_i+0x118>
 8017398:	2e00      	cmp	r6, #0
 801739a:	d04d      	beq.n	8017438 <_printf_i+0x1b4>
 801739c:	4616      	mov	r6, r2
 801739e:	fbb5 f1f3 	udiv	r1, r5, r3
 80173a2:	fb03 5711 	mls	r7, r3, r1, r5
 80173a6:	5dc7      	ldrb	r7, [r0, r7]
 80173a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80173ac:	462f      	mov	r7, r5
 80173ae:	42bb      	cmp	r3, r7
 80173b0:	460d      	mov	r5, r1
 80173b2:	d9f4      	bls.n	801739e <_printf_i+0x11a>
 80173b4:	2b08      	cmp	r3, #8
 80173b6:	d10b      	bne.n	80173d0 <_printf_i+0x14c>
 80173b8:	6823      	ldr	r3, [r4, #0]
 80173ba:	07df      	lsls	r7, r3, #31
 80173bc:	d508      	bpl.n	80173d0 <_printf_i+0x14c>
 80173be:	6923      	ldr	r3, [r4, #16]
 80173c0:	6861      	ldr	r1, [r4, #4]
 80173c2:	4299      	cmp	r1, r3
 80173c4:	bfde      	ittt	le
 80173c6:	2330      	movle	r3, #48	; 0x30
 80173c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80173cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80173d0:	1b92      	subs	r2, r2, r6
 80173d2:	6122      	str	r2, [r4, #16]
 80173d4:	f8cd a000 	str.w	sl, [sp]
 80173d8:	464b      	mov	r3, r9
 80173da:	aa03      	add	r2, sp, #12
 80173dc:	4621      	mov	r1, r4
 80173de:	4640      	mov	r0, r8
 80173e0:	f7ff fee2 	bl	80171a8 <_printf_common>
 80173e4:	3001      	adds	r0, #1
 80173e6:	d14c      	bne.n	8017482 <_printf_i+0x1fe>
 80173e8:	f04f 30ff 	mov.w	r0, #4294967295
 80173ec:	b004      	add	sp, #16
 80173ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173f2:	4835      	ldr	r0, [pc, #212]	; (80174c8 <_printf_i+0x244>)
 80173f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80173f8:	6823      	ldr	r3, [r4, #0]
 80173fa:	680e      	ldr	r6, [r1, #0]
 80173fc:	061f      	lsls	r7, r3, #24
 80173fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8017402:	600e      	str	r6, [r1, #0]
 8017404:	d514      	bpl.n	8017430 <_printf_i+0x1ac>
 8017406:	07d9      	lsls	r1, r3, #31
 8017408:	bf44      	itt	mi
 801740a:	f043 0320 	orrmi.w	r3, r3, #32
 801740e:	6023      	strmi	r3, [r4, #0]
 8017410:	b91d      	cbnz	r5, 801741a <_printf_i+0x196>
 8017412:	6823      	ldr	r3, [r4, #0]
 8017414:	f023 0320 	bic.w	r3, r3, #32
 8017418:	6023      	str	r3, [r4, #0]
 801741a:	2310      	movs	r3, #16
 801741c:	e7b0      	b.n	8017380 <_printf_i+0xfc>
 801741e:	6823      	ldr	r3, [r4, #0]
 8017420:	f043 0320 	orr.w	r3, r3, #32
 8017424:	6023      	str	r3, [r4, #0]
 8017426:	2378      	movs	r3, #120	; 0x78
 8017428:	4828      	ldr	r0, [pc, #160]	; (80174cc <_printf_i+0x248>)
 801742a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801742e:	e7e3      	b.n	80173f8 <_printf_i+0x174>
 8017430:	065e      	lsls	r6, r3, #25
 8017432:	bf48      	it	mi
 8017434:	b2ad      	uxthmi	r5, r5
 8017436:	e7e6      	b.n	8017406 <_printf_i+0x182>
 8017438:	4616      	mov	r6, r2
 801743a:	e7bb      	b.n	80173b4 <_printf_i+0x130>
 801743c:	680b      	ldr	r3, [r1, #0]
 801743e:	6826      	ldr	r6, [r4, #0]
 8017440:	6960      	ldr	r0, [r4, #20]
 8017442:	1d1d      	adds	r5, r3, #4
 8017444:	600d      	str	r5, [r1, #0]
 8017446:	0635      	lsls	r5, r6, #24
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	d501      	bpl.n	8017450 <_printf_i+0x1cc>
 801744c:	6018      	str	r0, [r3, #0]
 801744e:	e002      	b.n	8017456 <_printf_i+0x1d2>
 8017450:	0671      	lsls	r1, r6, #25
 8017452:	d5fb      	bpl.n	801744c <_printf_i+0x1c8>
 8017454:	8018      	strh	r0, [r3, #0]
 8017456:	2300      	movs	r3, #0
 8017458:	6123      	str	r3, [r4, #16]
 801745a:	4616      	mov	r6, r2
 801745c:	e7ba      	b.n	80173d4 <_printf_i+0x150>
 801745e:	680b      	ldr	r3, [r1, #0]
 8017460:	1d1a      	adds	r2, r3, #4
 8017462:	600a      	str	r2, [r1, #0]
 8017464:	681e      	ldr	r6, [r3, #0]
 8017466:	6862      	ldr	r2, [r4, #4]
 8017468:	2100      	movs	r1, #0
 801746a:	4630      	mov	r0, r6
 801746c:	f7e8 fed0 	bl	8000210 <memchr>
 8017470:	b108      	cbz	r0, 8017476 <_printf_i+0x1f2>
 8017472:	1b80      	subs	r0, r0, r6
 8017474:	6060      	str	r0, [r4, #4]
 8017476:	6863      	ldr	r3, [r4, #4]
 8017478:	6123      	str	r3, [r4, #16]
 801747a:	2300      	movs	r3, #0
 801747c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017480:	e7a8      	b.n	80173d4 <_printf_i+0x150>
 8017482:	6923      	ldr	r3, [r4, #16]
 8017484:	4632      	mov	r2, r6
 8017486:	4649      	mov	r1, r9
 8017488:	4640      	mov	r0, r8
 801748a:	47d0      	blx	sl
 801748c:	3001      	adds	r0, #1
 801748e:	d0ab      	beq.n	80173e8 <_printf_i+0x164>
 8017490:	6823      	ldr	r3, [r4, #0]
 8017492:	079b      	lsls	r3, r3, #30
 8017494:	d413      	bmi.n	80174be <_printf_i+0x23a>
 8017496:	68e0      	ldr	r0, [r4, #12]
 8017498:	9b03      	ldr	r3, [sp, #12]
 801749a:	4298      	cmp	r0, r3
 801749c:	bfb8      	it	lt
 801749e:	4618      	movlt	r0, r3
 80174a0:	e7a4      	b.n	80173ec <_printf_i+0x168>
 80174a2:	2301      	movs	r3, #1
 80174a4:	4632      	mov	r2, r6
 80174a6:	4649      	mov	r1, r9
 80174a8:	4640      	mov	r0, r8
 80174aa:	47d0      	blx	sl
 80174ac:	3001      	adds	r0, #1
 80174ae:	d09b      	beq.n	80173e8 <_printf_i+0x164>
 80174b0:	3501      	adds	r5, #1
 80174b2:	68e3      	ldr	r3, [r4, #12]
 80174b4:	9903      	ldr	r1, [sp, #12]
 80174b6:	1a5b      	subs	r3, r3, r1
 80174b8:	42ab      	cmp	r3, r5
 80174ba:	dcf2      	bgt.n	80174a2 <_printf_i+0x21e>
 80174bc:	e7eb      	b.n	8017496 <_printf_i+0x212>
 80174be:	2500      	movs	r5, #0
 80174c0:	f104 0619 	add.w	r6, r4, #25
 80174c4:	e7f5      	b.n	80174b2 <_printf_i+0x22e>
 80174c6:	bf00      	nop
 80174c8:	08017c65 	.word	0x08017c65
 80174cc:	08017c76 	.word	0x08017c76

080174d0 <memmove>:
 80174d0:	4288      	cmp	r0, r1
 80174d2:	b510      	push	{r4, lr}
 80174d4:	eb01 0402 	add.w	r4, r1, r2
 80174d8:	d902      	bls.n	80174e0 <memmove+0x10>
 80174da:	4284      	cmp	r4, r0
 80174dc:	4623      	mov	r3, r4
 80174de:	d807      	bhi.n	80174f0 <memmove+0x20>
 80174e0:	1e43      	subs	r3, r0, #1
 80174e2:	42a1      	cmp	r1, r4
 80174e4:	d008      	beq.n	80174f8 <memmove+0x28>
 80174e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80174ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80174ee:	e7f8      	b.n	80174e2 <memmove+0x12>
 80174f0:	4402      	add	r2, r0
 80174f2:	4601      	mov	r1, r0
 80174f4:	428a      	cmp	r2, r1
 80174f6:	d100      	bne.n	80174fa <memmove+0x2a>
 80174f8:	bd10      	pop	{r4, pc}
 80174fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80174fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017502:	e7f7      	b.n	80174f4 <memmove+0x24>

08017504 <_free_r>:
 8017504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017506:	2900      	cmp	r1, #0
 8017508:	d048      	beq.n	801759c <_free_r+0x98>
 801750a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801750e:	9001      	str	r0, [sp, #4]
 8017510:	2b00      	cmp	r3, #0
 8017512:	f1a1 0404 	sub.w	r4, r1, #4
 8017516:	bfb8      	it	lt
 8017518:	18e4      	addlt	r4, r4, r3
 801751a:	f000 f8d3 	bl	80176c4 <__malloc_lock>
 801751e:	4a20      	ldr	r2, [pc, #128]	; (80175a0 <_free_r+0x9c>)
 8017520:	9801      	ldr	r0, [sp, #4]
 8017522:	6813      	ldr	r3, [r2, #0]
 8017524:	4615      	mov	r5, r2
 8017526:	b933      	cbnz	r3, 8017536 <_free_r+0x32>
 8017528:	6063      	str	r3, [r4, #4]
 801752a:	6014      	str	r4, [r2, #0]
 801752c:	b003      	add	sp, #12
 801752e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017532:	f000 b8cd 	b.w	80176d0 <__malloc_unlock>
 8017536:	42a3      	cmp	r3, r4
 8017538:	d90b      	bls.n	8017552 <_free_r+0x4e>
 801753a:	6821      	ldr	r1, [r4, #0]
 801753c:	1862      	adds	r2, r4, r1
 801753e:	4293      	cmp	r3, r2
 8017540:	bf04      	itt	eq
 8017542:	681a      	ldreq	r2, [r3, #0]
 8017544:	685b      	ldreq	r3, [r3, #4]
 8017546:	6063      	str	r3, [r4, #4]
 8017548:	bf04      	itt	eq
 801754a:	1852      	addeq	r2, r2, r1
 801754c:	6022      	streq	r2, [r4, #0]
 801754e:	602c      	str	r4, [r5, #0]
 8017550:	e7ec      	b.n	801752c <_free_r+0x28>
 8017552:	461a      	mov	r2, r3
 8017554:	685b      	ldr	r3, [r3, #4]
 8017556:	b10b      	cbz	r3, 801755c <_free_r+0x58>
 8017558:	42a3      	cmp	r3, r4
 801755a:	d9fa      	bls.n	8017552 <_free_r+0x4e>
 801755c:	6811      	ldr	r1, [r2, #0]
 801755e:	1855      	adds	r5, r2, r1
 8017560:	42a5      	cmp	r5, r4
 8017562:	d10b      	bne.n	801757c <_free_r+0x78>
 8017564:	6824      	ldr	r4, [r4, #0]
 8017566:	4421      	add	r1, r4
 8017568:	1854      	adds	r4, r2, r1
 801756a:	42a3      	cmp	r3, r4
 801756c:	6011      	str	r1, [r2, #0]
 801756e:	d1dd      	bne.n	801752c <_free_r+0x28>
 8017570:	681c      	ldr	r4, [r3, #0]
 8017572:	685b      	ldr	r3, [r3, #4]
 8017574:	6053      	str	r3, [r2, #4]
 8017576:	4421      	add	r1, r4
 8017578:	6011      	str	r1, [r2, #0]
 801757a:	e7d7      	b.n	801752c <_free_r+0x28>
 801757c:	d902      	bls.n	8017584 <_free_r+0x80>
 801757e:	230c      	movs	r3, #12
 8017580:	6003      	str	r3, [r0, #0]
 8017582:	e7d3      	b.n	801752c <_free_r+0x28>
 8017584:	6825      	ldr	r5, [r4, #0]
 8017586:	1961      	adds	r1, r4, r5
 8017588:	428b      	cmp	r3, r1
 801758a:	bf04      	itt	eq
 801758c:	6819      	ldreq	r1, [r3, #0]
 801758e:	685b      	ldreq	r3, [r3, #4]
 8017590:	6063      	str	r3, [r4, #4]
 8017592:	bf04      	itt	eq
 8017594:	1949      	addeq	r1, r1, r5
 8017596:	6021      	streq	r1, [r4, #0]
 8017598:	6054      	str	r4, [r2, #4]
 801759a:	e7c7      	b.n	801752c <_free_r+0x28>
 801759c:	b003      	add	sp, #12
 801759e:	bd30      	pop	{r4, r5, pc}
 80175a0:	20000690 	.word	0x20000690

080175a4 <_malloc_r>:
 80175a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175a6:	1ccd      	adds	r5, r1, #3
 80175a8:	f025 0503 	bic.w	r5, r5, #3
 80175ac:	3508      	adds	r5, #8
 80175ae:	2d0c      	cmp	r5, #12
 80175b0:	bf38      	it	cc
 80175b2:	250c      	movcc	r5, #12
 80175b4:	2d00      	cmp	r5, #0
 80175b6:	4606      	mov	r6, r0
 80175b8:	db01      	blt.n	80175be <_malloc_r+0x1a>
 80175ba:	42a9      	cmp	r1, r5
 80175bc:	d903      	bls.n	80175c6 <_malloc_r+0x22>
 80175be:	230c      	movs	r3, #12
 80175c0:	6033      	str	r3, [r6, #0]
 80175c2:	2000      	movs	r0, #0
 80175c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175c6:	f000 f87d 	bl	80176c4 <__malloc_lock>
 80175ca:	4921      	ldr	r1, [pc, #132]	; (8017650 <_malloc_r+0xac>)
 80175cc:	680a      	ldr	r2, [r1, #0]
 80175ce:	4614      	mov	r4, r2
 80175d0:	b99c      	cbnz	r4, 80175fa <_malloc_r+0x56>
 80175d2:	4f20      	ldr	r7, [pc, #128]	; (8017654 <_malloc_r+0xb0>)
 80175d4:	683b      	ldr	r3, [r7, #0]
 80175d6:	b923      	cbnz	r3, 80175e2 <_malloc_r+0x3e>
 80175d8:	4621      	mov	r1, r4
 80175da:	4630      	mov	r0, r6
 80175dc:	f000 f862 	bl	80176a4 <_sbrk_r>
 80175e0:	6038      	str	r0, [r7, #0]
 80175e2:	4629      	mov	r1, r5
 80175e4:	4630      	mov	r0, r6
 80175e6:	f000 f85d 	bl	80176a4 <_sbrk_r>
 80175ea:	1c43      	adds	r3, r0, #1
 80175ec:	d123      	bne.n	8017636 <_malloc_r+0x92>
 80175ee:	230c      	movs	r3, #12
 80175f0:	6033      	str	r3, [r6, #0]
 80175f2:	4630      	mov	r0, r6
 80175f4:	f000 f86c 	bl	80176d0 <__malloc_unlock>
 80175f8:	e7e3      	b.n	80175c2 <_malloc_r+0x1e>
 80175fa:	6823      	ldr	r3, [r4, #0]
 80175fc:	1b5b      	subs	r3, r3, r5
 80175fe:	d417      	bmi.n	8017630 <_malloc_r+0x8c>
 8017600:	2b0b      	cmp	r3, #11
 8017602:	d903      	bls.n	801760c <_malloc_r+0x68>
 8017604:	6023      	str	r3, [r4, #0]
 8017606:	441c      	add	r4, r3
 8017608:	6025      	str	r5, [r4, #0]
 801760a:	e004      	b.n	8017616 <_malloc_r+0x72>
 801760c:	6863      	ldr	r3, [r4, #4]
 801760e:	42a2      	cmp	r2, r4
 8017610:	bf0c      	ite	eq
 8017612:	600b      	streq	r3, [r1, #0]
 8017614:	6053      	strne	r3, [r2, #4]
 8017616:	4630      	mov	r0, r6
 8017618:	f000 f85a 	bl	80176d0 <__malloc_unlock>
 801761c:	f104 000b 	add.w	r0, r4, #11
 8017620:	1d23      	adds	r3, r4, #4
 8017622:	f020 0007 	bic.w	r0, r0, #7
 8017626:	1ac2      	subs	r2, r0, r3
 8017628:	d0cc      	beq.n	80175c4 <_malloc_r+0x20>
 801762a:	1a1b      	subs	r3, r3, r0
 801762c:	50a3      	str	r3, [r4, r2]
 801762e:	e7c9      	b.n	80175c4 <_malloc_r+0x20>
 8017630:	4622      	mov	r2, r4
 8017632:	6864      	ldr	r4, [r4, #4]
 8017634:	e7cc      	b.n	80175d0 <_malloc_r+0x2c>
 8017636:	1cc4      	adds	r4, r0, #3
 8017638:	f024 0403 	bic.w	r4, r4, #3
 801763c:	42a0      	cmp	r0, r4
 801763e:	d0e3      	beq.n	8017608 <_malloc_r+0x64>
 8017640:	1a21      	subs	r1, r4, r0
 8017642:	4630      	mov	r0, r6
 8017644:	f000 f82e 	bl	80176a4 <_sbrk_r>
 8017648:	3001      	adds	r0, #1
 801764a:	d1dd      	bne.n	8017608 <_malloc_r+0x64>
 801764c:	e7cf      	b.n	80175ee <_malloc_r+0x4a>
 801764e:	bf00      	nop
 8017650:	20000690 	.word	0x20000690
 8017654:	20000694 	.word	0x20000694

08017658 <_realloc_r>:
 8017658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801765a:	4607      	mov	r7, r0
 801765c:	4614      	mov	r4, r2
 801765e:	460e      	mov	r6, r1
 8017660:	b921      	cbnz	r1, 801766c <_realloc_r+0x14>
 8017662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017666:	4611      	mov	r1, r2
 8017668:	f7ff bf9c 	b.w	80175a4 <_malloc_r>
 801766c:	b922      	cbnz	r2, 8017678 <_realloc_r+0x20>
 801766e:	f7ff ff49 	bl	8017504 <_free_r>
 8017672:	4625      	mov	r5, r4
 8017674:	4628      	mov	r0, r5
 8017676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017678:	f000 f830 	bl	80176dc <_malloc_usable_size_r>
 801767c:	42a0      	cmp	r0, r4
 801767e:	d20f      	bcs.n	80176a0 <_realloc_r+0x48>
 8017680:	4621      	mov	r1, r4
 8017682:	4638      	mov	r0, r7
 8017684:	f7ff ff8e 	bl	80175a4 <_malloc_r>
 8017688:	4605      	mov	r5, r0
 801768a:	2800      	cmp	r0, #0
 801768c:	d0f2      	beq.n	8017674 <_realloc_r+0x1c>
 801768e:	4631      	mov	r1, r6
 8017690:	4622      	mov	r2, r4
 8017692:	f7ff fbf7 	bl	8016e84 <memcpy>
 8017696:	4631      	mov	r1, r6
 8017698:	4638      	mov	r0, r7
 801769a:	f7ff ff33 	bl	8017504 <_free_r>
 801769e:	e7e9      	b.n	8017674 <_realloc_r+0x1c>
 80176a0:	4635      	mov	r5, r6
 80176a2:	e7e7      	b.n	8017674 <_realloc_r+0x1c>

080176a4 <_sbrk_r>:
 80176a4:	b538      	push	{r3, r4, r5, lr}
 80176a6:	4d06      	ldr	r5, [pc, #24]	; (80176c0 <_sbrk_r+0x1c>)
 80176a8:	2300      	movs	r3, #0
 80176aa:	4604      	mov	r4, r0
 80176ac:	4608      	mov	r0, r1
 80176ae:	602b      	str	r3, [r5, #0]
 80176b0:	f7ee fe2c 	bl	800630c <_sbrk>
 80176b4:	1c43      	adds	r3, r0, #1
 80176b6:	d102      	bne.n	80176be <_sbrk_r+0x1a>
 80176b8:	682b      	ldr	r3, [r5, #0]
 80176ba:	b103      	cbz	r3, 80176be <_sbrk_r+0x1a>
 80176bc:	6023      	str	r3, [r4, #0]
 80176be:	bd38      	pop	{r3, r4, r5, pc}
 80176c0:	200057d4 	.word	0x200057d4

080176c4 <__malloc_lock>:
 80176c4:	4801      	ldr	r0, [pc, #4]	; (80176cc <__malloc_lock+0x8>)
 80176c6:	f000 b811 	b.w	80176ec <__retarget_lock_acquire_recursive>
 80176ca:	bf00      	nop
 80176cc:	200057dc 	.word	0x200057dc

080176d0 <__malloc_unlock>:
 80176d0:	4801      	ldr	r0, [pc, #4]	; (80176d8 <__malloc_unlock+0x8>)
 80176d2:	f000 b80c 	b.w	80176ee <__retarget_lock_release_recursive>
 80176d6:	bf00      	nop
 80176d8:	200057dc 	.word	0x200057dc

080176dc <_malloc_usable_size_r>:
 80176dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80176e0:	1f18      	subs	r0, r3, #4
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	bfbc      	itt	lt
 80176e6:	580b      	ldrlt	r3, [r1, r0]
 80176e8:	18c0      	addlt	r0, r0, r3
 80176ea:	4770      	bx	lr

080176ec <__retarget_lock_acquire_recursive>:
 80176ec:	4770      	bx	lr

080176ee <__retarget_lock_release_recursive>:
 80176ee:	4770      	bx	lr

080176f0 <_init>:
 80176f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176f2:	bf00      	nop
 80176f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176f6:	bc08      	pop	{r3}
 80176f8:	469e      	mov	lr, r3
 80176fa:	4770      	bx	lr

080176fc <_fini>:
 80176fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176fe:	bf00      	nop
 8017700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017702:	bc08      	pop	{r3}
 8017704:	469e      	mov	lr, r3
 8017706:	4770      	bx	lr
