
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018354  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08018524  08018524  00028524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018aa0  08018aa0  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  08018aa0  08018aa0  00028aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018aa8  08018aa8  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018aa8  08018aa8  00028aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018aac  08018aac  00028aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08018ab0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007494  20000198  08018c48  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00011004  2000762c  08018c48  0003762c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   000308d4  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a6a  00000000  00000000  00060a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023a0  00000000  00000000  00067508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002080  00000000  00000000  000698a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ecd2  00000000  00000000  0006b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000363aa  00000000  00000000  0009a5fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f41ef  00000000  00000000  000d09a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c4b93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097cc  00000000  00000000  001c4be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000198 	.word	0x20000198
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801850c 	.word	0x0801850c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000019c 	.word	0x2000019c
 800020c:	0801850c 	.word	0x0801850c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <FT_CAN_FilterConfig>:
#include "ft_can.h"

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct);

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	; 0x40
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	817b      	strh	r3, [r7, #10]
 80005c2:	4613      	mov	r3, r2
 80005c4:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 19, mask_id = 0x1FF80000;
 80005c6:	897b      	ldrh	r3, [r7, #10]
 80005c8:	04db      	lsls	r3, r3, #19
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <FT_CAN_FilterConfig+0x68>)
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005d0:	7a7b      	ldrb	r3, [r7, #9]
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005de:	0b5b      	lsrs	r3, r3, #13
 80005e0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005ec:	0b5b      	lsrs	r3, r3, #13
 80005ee:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 8000600:	7a7b      	ldrb	r3, [r7, #9]
 8000602:	330e      	adds	r3, #14
 8000604:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f006 fdb5 	bl	800717c <HAL_CAN_ConfigFilter>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3740      	adds	r7, #64	; 0x40
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	1ff80000 	.word	0x1ff80000

08000620 <FT_CAN_ReceiveData>:

void FT_CAN_ReceiveData(CAN_RxHeaderTypeDef* pRxHeader, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	uint8_t buffer[8];
	uint8_t DLC = pRxHeader->DLC;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	77bb      	strb	r3, [r7, #30]
	uint32_t ExtId = pRxHeader->ExtId >> 19;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	0cdb      	lsrs	r3, r3, #19
 8000638:	61bb      	str	r3, [r7, #24]

	if(	   (ExtId != FT_Gear_Controller)
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000640:	d031      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Knock_Meter)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	f240 1241 	movw	r2, #321	; 0x141
 8000648:	4293      	cmp	r3, r2
 800064a:	d02c      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Boost_Controller2)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000652:	d028      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Injector_Driver)
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800065a:	d024      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_WBO2_Nano)
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000662:	d020      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_WBO2_Slim)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	f240 2241 	movw	r2, #577	; 0x241
 800066a:	4293      	cmp	r3, r2
 800066c:	d01b      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Alcohol_O2)
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	f240 2242 	movw	r2, #578	; 0x242
 8000674:	4293      	cmp	r3, r2
 8000676:	d016      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FTSpark)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	f240 2243 	movw	r2, #579	; 0x243
 800067e:	4293      	cmp	r3, r2
 8000680:	d011      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Switchpad)
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000688:	d00d      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT500)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000690:	d009      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Power_ECU)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	f240 2281 	movw	r2, #641	; 0x281
 8000698:	4293      	cmp	r3, r2
 800069a:	d004      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (pRxHeader->IDE != CAN_ID_EXT))
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	f040 83c4 	bne.w	8000e2e <FT_CAN_ReceiveData+0x80e>
		return;

	ExtId = pRxHeader->ExtId;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < DLC; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	e00b      	b.n	80006ca <FT_CAN_ReceiveData+0xaa>
		buffer[i] = pData[i];
 80006b2:	7ffb      	ldrb	r3, [r7, #31]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	441a      	add	r2, r3
 80006b8:	7ffb      	ldrb	r3, [r7, #31]
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	3320      	adds	r3, #32
 80006be:	443b      	add	r3, r7
 80006c0:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < DLC; i++)
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	3301      	adds	r3, #1
 80006c8:	77fb      	strb	r3, [r7, #31]
 80006ca:	7ffa      	ldrb	r2, [r7, #31]
 80006cc:	7fbb      	ldrb	r3, [r7, #30]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d3ef      	bcc.n	80006b2 <FT_CAN_ReceiveData+0x92>

	if((((ExtId / 0x800) & 0x07) == 0x00))// || (((ExtId / 0x800) & 0x07) == 0x01))
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	0adb      	lsrs	r3, r3, #11
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f040 81d5 	bne.w	8000a8a <FT_CAN_ReceiveData+0x46a>
	{
		if((ExtId & 0xFFF) == 0x600)
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80006ea:	d13c      	bne.n	8000766 <FT_CAN_ReceiveData+0x146>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 80006ec:	7c3b      	ldrb	r3, [r7, #16]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->tps |= buffer[1];
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 80006fe:	7c7b      	ldrb	r3, [r7, #17]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	b21a      	sxth	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->map  = buffer[2] << 8;
 800070c:	7cbb      	ldrb	r3, [r7, #18]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->map |= buffer[3];
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800071e:	7cfb      	ldrb	r3, [r7, #19]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b21a      	sxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->iat  = buffer[4] << 8;
 800072c:	7d3b      	ldrb	r3, [r7, #20]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b21a      	sxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->iat |= buffer[5];
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 800073c:	7d7b      	ldrb	r3, [r7, #21]
 800073e:	b21b      	sxth	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b21a      	sxth	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000748:	7dbb      	ldrb	r3, [r7, #22]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b21a      	sxth	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect |= buffer[7];
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	b21b      	sxth	r3, r3
 800075c:	4313      	orrs	r3, r2
 800075e:	b21a      	sxth	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	86da      	strh	r2, [r3, #54]	; 0x36

			return;
 8000764:	e366      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x601)
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800076c:	f240 6201 	movw	r2, #1537	; 0x601
 8000770:	4293      	cmp	r3, r2
 8000772:	d13c      	bne.n	80007ee <FT_CAN_ReceiveData+0x1ce>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000774:	7c3b      	ldrb	r3, [r7, #16]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	b21a      	sxth	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000786:	7c7b      	ldrb	r3, [r7, #17]
 8000788:	b21b      	sxth	r3, r3
 800078a:	4313      	orrs	r3, r2
 800078c:	b21a      	sxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000794:	7cbb      	ldrb	r3, [r7, #18]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21a      	sxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 80007b0:	7d3b      	ldrb	r3, [r7, #20]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure |= buffer[5];
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 80007c0:	7d7b      	ldrb	r3, [r7, #21]
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 80007cc:	7dbb      	ldrb	r3, [r7, #22]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->gear 			 |= buffer[7];
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 80007de:	7dfb      	ldrb	r3, [r7, #23]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			return;
 80007ec:	e322      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x602)
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007f4:	f240 6202 	movw	r2, #1538	; 0x602
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d140      	bne.n	800087e <FT_CAN_ReceiveData+0x25e>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 80007fc:	7c3b      	ldrb	r3, [r7, #16]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->lambda 			|= buffer[1];
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 800080e:	7c7b      	ldrb	r3, [r7, #17]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21a      	sxth	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 800081c:	7cbb      	ldrb	r3, [r7, #18]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21a      	sxth	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->rpm 			|= buffer[3];
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 800082e:	7cfb      	ldrb	r3, [r7, #19]
 8000830:	b21b      	sxth	r3, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	b21a      	sxth	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 800083c:	7d3b      	ldrb	r3, [r7, #20]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	b21a      	sxth	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 800084e:	7d7b      	ldrb	r3, [r7, #21]
 8000850:	b21b      	sxth	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b21a      	sxth	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 800085c:	7dbb      	ldrb	r3, [r7, #22]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b21a      	sxth	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 800086e:	7dfb      	ldrb	r3, [r7, #23]
 8000870:	b21b      	sxth	r3, r3
 8000872:	4313      	orrs	r3, r2
 8000874:	b21a      	sxth	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			return;
 800087c:	e2da      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x603)
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000884:	f240 6203 	movw	r2, #1539	; 0x603
 8000888:	4293      	cmp	r3, r2
 800088a:	d140      	bne.n	800090e <FT_CAN_ReceiveData+0x2ee>
		{
			FT_Data_Struct->wheel_speed_fr	 = buffer[0] << 8;
 800088c:	7c3b      	ldrb	r3, [r7, #16]
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	b21a      	sxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->wheel_speed_fr	|= buffer[1];
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 800089e:	7c7b      	ldrb	r3, [r7, #17]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->wheel_speed_fl	 = buffer[2] << 8;
 80008ac:	7cbb      	ldrb	r3, [r7, #18]
 80008ae:	021b      	lsls	r3, r3, #8
 80008b0:	b21a      	sxth	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->wheel_speed_fl	|= buffer[3];
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 80008be:	7cfb      	ldrb	r3, [r7, #19]
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->wheel_speed_rr	 = buffer[4] << 8;
 80008cc:	7d3b      	ldrb	r3, [r7, #20]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			FT_Data_Struct->wheel_speed_rr	|= buffer[5];
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 80008de:	7d7b      	ldrb	r3, [r7, #21]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			FT_Data_Struct->wheel_speed_rl 	 = buffer[6] << 8;
 80008ec:	7dbb      	ldrb	r3, [r7, #22]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->wheel_speed_rl 	|= buffer[7];
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	b21b      	sxth	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b21a      	sxth	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

			return;
 800090c:	e292      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x606)
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000914:	f240 6206 	movw	r2, #1542	; 0x606
 8000918:	4293      	cmp	r3, r2
 800091a:	d13c      	bne.n	8000996 <FT_CAN_ReceiveData+0x376>
		{
			FT_Data_Struct->accel_long		 = buffer[0] << 8;
 800091c:	7c3b      	ldrb	r3, [r7, #16]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->accel_long		|= buffer[1];
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 800092c:	7c7b      	ldrb	r3, [r7, #17]
 800092e:	b21b      	sxth	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b21a      	sxth	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->accel_lat		 = buffer[2] << 8;
 8000938:	7cbb      	ldrb	r3, [r7, #18]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b21a      	sxth	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->accel_lat		|= buffer[3];
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8000948:	7cfb      	ldrb	r3, [r7, #19]
 800094a:	b21b      	sxth	r3, r3
 800094c:	4313      	orrs	r3, r2
 800094e:	b21a      	sxth	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->yaw_rate_pitch	 = buffer[4] << 8;
 8000954:	7d3b      	ldrb	r3, [r7, #20]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	b21a      	sxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			FT_Data_Struct->yaw_rate_pitch	|= buffer[5];
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 8000966:	7d7b      	ldrb	r3, [r7, #21]
 8000968:	b21b      	sxth	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	b21a      	sxth	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			FT_Data_Struct->yaw_rate_roll	 = buffer[6] << 8;
 8000974:	7dbb      	ldrb	r3, [r7, #22]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	b21a      	sxth	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			FT_Data_Struct->yaw_rate_roll	|= buffer[7];
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	b21b      	sxth	r3, r3
 800098a:	4313      	orrs	r3, r2
 800098c:	b21a      	sxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			return;
 8000994:	e24e      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x607)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800099c:	f240 6207 	movw	r2, #1543	; 0x607
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d11e      	bne.n	80009e2 <FT_CAN_ReceiveData+0x3c2>
		{
			FT_Data_Struct->lambda_correction  = buffer[0] << 8;
 80009a4:	7c3b      	ldrb	r3, [r7, #16]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->lambda_correction |= buffer[1];
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80009b6:	7c7b      	ldrb	r3, [r7, #17]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21a      	sxth	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->fuel_flow_total	   = buffer[2] << 8;
 80009c4:	7cbb      	ldrb	r3, [r7, #18]
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->fuel_flow_total	  |= buffer[3];
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 80009d4:	7cfb      	ldrb	r3, [r7, #19]
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b21a      	sxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	87da      	strh	r2, [r3, #62]	; 0x3e

			return;
 80009e0:	e228      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

#ifndef FT_CAN_FIXED
		else if((ExtId & 0xFF) == 0xFF)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2bff      	cmp	r3, #255	; 0xff
 80009e8:	f040 8224 	bne.w	8000e34 <FT_CAN_ReceiveData+0x814>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_id 	 |= buffer[1];
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000a00:	7c7b      	ldrb	r3, [r7, #17]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000a0e:	7cbb      	ldrb	r3, [r7, #18]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_Data_Struct->data_content |= buffer[3];
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

			FT_CAN_ProcessData(FT_Data_Struct);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fa03 	bl	8000e3c <FT_CAN_ProcessData>

			if(DLC == 8)
 8000a36:	7fbb      	ldrb	r3, [r7, #30]
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	f040 81fa 	bne.w	8000e32 <FT_CAN_ReceiveData+0x812>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000a3e:	7d3b      	ldrb	r3, [r7, #20]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000a52:	7d7b      	ldrb	r3, [r7, #21]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000a60:	7dbb      	ldrb	r3, [r7, #22]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[7];
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

				FT_CAN_ProcessData(FT_Data_Struct);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f9da 	bl	8000e3c <FT_CAN_ProcessData>
			}

			return;
 8000a88:	e1d3      	b.n	8000e32 <FT_CAN_ReceiveData+0x812>
		}
	}

	else if((((ExtId / 0x800) & 0x07) == 0x02))// || ((((ExtId / 0x800) & 0x07) == 0x03)))
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	0adb      	lsrs	r3, r3, #11
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	f040 81ce 	bne.w	8000e34 <FT_CAN_ReceiveData+0x814>
	{
		if(buffer[0] == 0xFF)
 8000a98:	7c3b      	ldrb	r3, [r7, #16]
 8000a9a:	2bff      	cmp	r3, #255	; 0xff
 8000a9c:	d125      	bne.n	8000aea <FT_CAN_ReceiveData+0x4ca>
		{
			FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000a9e:	7c7b      	ldrb	r3, [r7, #17]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_id 	 |= buffer[2];
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000ab2:	7cbb      	ldrb	r3, [r7, #18]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_content  = buffer[3] << 8;
 8000ac0:	7cfb      	ldrb	r3, [r7, #19]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_Data_Struct->data_content |= buffer[4];
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000ad4:	7d3b      	ldrb	r3, [r7, #20]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_CAN_ProcessData(FT_Data_Struct);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f9aa 	bl	8000e3c <FT_CAN_ProcessData>

			return;
 8000ae8:	e1a4      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>

		//Segmented Messages
		else
		{
			//First Message
			if(buffer[0] == 0)
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d141      	bne.n	8000b74 <FT_CAN_ReceiveData+0x554>
			{
				FT_Data_Struct->data_length   = buffer[1] << 8;
 8000af0:	7c7b      	ldrb	r3, [r7, #17]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				FT_Data_Struct->data_length  |= buffer[2];
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8000b04:	7cbb      	ldrb	r3, [r7, #18]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000b12:	7cfb      	ldrb	r3, [r7, #19]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[4];
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000b26:	7d3b      	ldrb	r3, [r7, #20]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[5] << 8;
 8000b34:	7d7b      	ldrb	r3, [r7, #21]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	021b      	lsls	r3, r3, #8
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[6];
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000b48:	7dbb      	ldrb	r3, [r7, #22]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_CAN_ProcessData(FT_Data_Struct);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f970 	bl	8000e3c <FT_CAN_ProcessData>

				FT_Data_Struct->data_id = buffer[7] << 8;
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_last_seg = 0;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000b72:	e15f      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 1, 5, etc
			else if((buffer[0] % 4) == 1)
 8000b74:	7c3b      	ldrb	r3, [r7, #16]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d153      	bne.n	8000c28 <FT_CAN_ReceiveData+0x608>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000b80:	7c3b      	ldrb	r3, [r7, #16]
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d11d      	bne.n	8000bcc <FT_CAN_ReceiveData+0x5ac>
				{
					FT_Data_Struct->data_id 	 |= buffer[1];
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000b96:	7c7b      	ldrb	r3, [r7, #17]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[2] << 8;
 8000ba4:	7cbb      	ldrb	r3, [r7, #18]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[3];
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000bb8:	7cfb      	ldrb	r3, [r7, #19]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f938 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000bcc:	7fbb      	ldrb	r3, [r7, #30]
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d124      	bne.n	8000c1c <FT_CAN_ReceiveData+0x5fc>
				{
					FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000bd2:	7d3b      	ldrb	r3, [r7, #20]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[5];
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000be6:	7d7b      	ldrb	r3, [r7, #21]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[6] << 8;
 8000bf4:	7dbb      	ldrb	r3, [r7, #22]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[7];
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f910 	bl	8000e3c <FT_CAN_ProcessData>
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000c1c:	7c3b      	ldrb	r3, [r7, #16]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000c26:	e105      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//messages 2, 6, etc
			else if((buffer[0] % 4) == 2)
 8000c28:	7c3b      	ldrb	r3, [r7, #16]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d145      	bne.n	8000cc0 <FT_CAN_ReceiveData+0x6a0>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000c34:	7c7b      	ldrb	r3, [r7, #17]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[2];
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000c48:	7cbb      	ldrb	r3, [r7, #18]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[4];
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000c6a:	7d3b      	ldrb	r3, [r7, #20]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_CAN_ProcessData(FT_Data_Struct);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f8df 	bl	8000e3c <FT_CAN_ProcessData>

				if(DLC == 8)
 8000c7e:	7fbb      	ldrb	r3, [r7, #30]
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d117      	bne.n	8000cb4 <FT_CAN_ReceiveData+0x694>
				{
					FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8000c84:	7d7b      	ldrb	r3, [r7, #21]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	|= buffer[6];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000c98:	7dbb      	ldrb	r3, [r7, #22]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content = buffer[7] << 8;
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000cb4:	7c3b      	ldrb	r3, [r7, #16]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000cbe:	e0b9      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 3, 7, etc
			else if((buffer[0] % 4) == 3)
 8000cc0:	7c3b      	ldrb	r3, [r7, #16]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d156      	bne.n	8000d7a <FT_CAN_ReceiveData+0x75a>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000ccc:	7c3b      	ldrb	r3, [r7, #16]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d10c      	bne.n	8000cf6 <FT_CAN_ReceiveData+0x6d6>
				{
					FT_Data_Struct->data_content |= buffer[1];
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000ce2:	7c7b      	ldrb	r3, [r7, #17]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f8a3 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC >= 6)
 8000cf6:	7fbb      	ldrb	r3, [r7, #30]
 8000cf8:	2b05      	cmp	r3, #5
 8000cfa:	d924      	bls.n	8000d46 <FT_CAN_ReceiveData+0x726>
				{
					FT_Data_Struct->data_id  	  = buffer[2] << 8;
 8000cfc:	7cbb      	ldrb	r3, [r7, #18]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[3];
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[4] << 8;
 8000d1e:	7d3b      	ldrb	r3, [r7, #20]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[5];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000d32:	7d7b      	ldrb	r3, [r7, #21]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f87b 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000d46:	7fbb      	ldrb	r3, [r7, #30]
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d110      	bne.n	8000d6e <FT_CAN_ReceiveData+0x74e>
				{
					FT_Data_Struct->data_id  = buffer[6] << 8;
 8000d4c:	7dbb      	ldrb	r3, [r7, #22]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id |= buffer[7];
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000d6e:	7c3b      	ldrb	r3, [r7, #16]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000d78:	e05c      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 4, 8, etc
			else if((buffer[0] % 4) == 0)
 8000d7a:	7c3b      	ldrb	r3, [r7, #16]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d156      	bne.n	8000e34 <FT_CAN_ReceiveData+0x814>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000d86:	7c3b      	ldrb	r3, [r7, #16]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000d90:	3301      	adds	r3, #1
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d113      	bne.n	8000dbe <FT_CAN_ReceiveData+0x79e>
				{
					FT_Data_Struct->data_content  = buffer[1] << 8;
 8000d96:	7c7b      	ldrb	r3, [r7, #17]
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[2];
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000daa:	7cbb      	ldrb	r3, [r7, #18]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 f83f 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC >= 7)
 8000dbe:	7fbb      	ldrb	r3, [r7, #30]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d924      	bls.n	8000e0e <FT_CAN_ReceiveData+0x7ee>
				{
					FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000dc4:	7cfb      	ldrb	r3, [r7, #19]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[4];
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000dd8:	7d3b      	ldrb	r3, [r7, #20]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[5] << 8;
 8000de6:	7d7b      	ldrb	r3, [r7, #21]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[6];
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000dfa:	7dbb      	ldrb	r3, [r7, #22]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 f817 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000e0e:	7fbb      	ldrb	r3, [r7, #30]
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d106      	bne.n	8000e22 <FT_CAN_ReceiveData+0x802>
					FT_Data_Struct->data_id	= buffer[7] << 8;
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

				FT_Data_Struct->data_last_seg = buffer[0];
 8000e22:	7c3b      	ldrb	r3, [r7, #16]
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000e2c:	e002      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		return;
 8000e2e:	bf00      	nop
 8000e30:	e000      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			return;
 8000e32:	bf00      	nop
			}
		}
#endif
	}
}
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <FT_CAN_ProcessData>:

#ifndef FT_CAN_FIXED

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000e4a:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000e52:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 8000e54:	89fb      	ldrh	r3, [r7, #14]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 825a 	bne.w	8001314 <FT_CAN_ProcessData+0x4d8>
		return;


	switch(id >> 1)
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	2b8d      	cmp	r3, #141	; 0x8d
 8000e68:	f300 8166 	bgt.w	8001138 <FT_CAN_ProcessData+0x2fc>
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	dc41      	bgt.n	8000ef4 <FT_CAN_ProcessData+0xb8>
 8000e70:	e249      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
 8000e72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000e76:	2b1b      	cmp	r3, #27
 8000e78:	f200 8245 	bhi.w	8001306 <FT_CAN_ProcessData+0x4ca>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <FT_CAN_ProcessData+0x48>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	080012d5 	.word	0x080012d5
 8000e88:	08001307 	.word	0x08001307
 8000e8c:	08001307 	.word	0x08001307
 8000e90:	08001307 	.word	0x08001307
 8000e94:	08001307 	.word	0x08001307
 8000e98:	08001307 	.word	0x08001307
 8000e9c:	08001307 	.word	0x08001307
 8000ea0:	08001307 	.word	0x08001307
 8000ea4:	08001307 	.word	0x08001307
 8000ea8:	08001307 	.word	0x08001307
 8000eac:	08001307 	.word	0x08001307
 8000eb0:	08001307 	.word	0x08001307
 8000eb4:	08001307 	.word	0x08001307
 8000eb8:	08001307 	.word	0x08001307
 8000ebc:	08001307 	.word	0x08001307
 8000ec0:	08001307 	.word	0x08001307
 8000ec4:	08001307 	.word	0x08001307
 8000ec8:	08001307 	.word	0x08001307
 8000ecc:	080012df 	.word	0x080012df
 8000ed0:	08001307 	.word	0x08001307
 8000ed4:	08001307 	.word	0x08001307
 8000ed8:	08001307 	.word	0x08001307
 8000edc:	08001307 	.word	0x08001307
 8000ee0:	08001307 	.word	0x08001307
 8000ee4:	080011d3 	.word	0x080011d3
 8000ee8:	080012e9 	.word	0x080012e9
 8000eec:	080012f3 	.word	0x080012f3
 8000ef0:	080012fd 	.word	0x080012fd
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	2b8c      	cmp	r3, #140	; 0x8c
 8000ef8:	f200 8205 	bhi.w	8001306 <FT_CAN_ProcessData+0x4ca>
 8000efc:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <FT_CAN_ProcessData+0xc8>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	0800114b 	.word	0x0800114b
 8000f08:	08001157 	.word	0x08001157
 8000f0c:	08001163 	.word	0x08001163
 8000f10:	0800116d 	.word	0x0800116d
 8000f14:	08001177 	.word	0x08001177
 8000f18:	08001183 	.word	0x08001183
 8000f1c:	0800118d 	.word	0x0800118d
 8000f20:	0800120f 	.word	0x0800120f
 8000f24:	08001219 	.word	0x08001219
 8000f28:	08001223 	.word	0x08001223
 8000f2c:	0800122d 	.word	0x0800122d
 8000f30:	08001237 	.word	0x08001237
 8000f34:	08001243 	.word	0x08001243
 8000f38:	0800124f 	.word	0x0800124f
 8000f3c:	0800125b 	.word	0x0800125b
 8000f40:	08001267 	.word	0x08001267
 8000f44:	08001197 	.word	0x08001197
 8000f48:	08001307 	.word	0x08001307
 8000f4c:	08001307 	.word	0x08001307
 8000f50:	08001307 	.word	0x08001307
 8000f54:	08001307 	.word	0x08001307
 8000f58:	08001307 	.word	0x08001307
 8000f5c:	08001307 	.word	0x08001307
 8000f60:	08001307 	.word	0x08001307
 8000f64:	08001307 	.word	0x08001307
 8000f68:	08001307 	.word	0x08001307
 8000f6c:	08001307 	.word	0x08001307
 8000f70:	08001307 	.word	0x08001307
 8000f74:	08001307 	.word	0x08001307
 8000f78:	08001307 	.word	0x08001307
 8000f7c:	08001307 	.word	0x08001307
 8000f80:	08001307 	.word	0x08001307
 8000f84:	08001307 	.word	0x08001307
 8000f88:	08001307 	.word	0x08001307
 8000f8c:	08001307 	.word	0x08001307
 8000f90:	08001307 	.word	0x08001307
 8000f94:	08001307 	.word	0x08001307
 8000f98:	08001307 	.word	0x08001307
 8000f9c:	080011a3 	.word	0x080011a3
 8000fa0:	08001307 	.word	0x08001307
 8000fa4:	08001307 	.word	0x08001307
 8000fa8:	08001307 	.word	0x08001307
 8000fac:	08001307 	.word	0x08001307
 8000fb0:	08001307 	.word	0x08001307
 8000fb4:	08001307 	.word	0x08001307
 8000fb8:	08001307 	.word	0x08001307
 8000fbc:	08001307 	.word	0x08001307
 8000fc0:	08001307 	.word	0x08001307
 8000fc4:	08001307 	.word	0x08001307
 8000fc8:	08001307 	.word	0x08001307
 8000fcc:	08001307 	.word	0x08001307
 8000fd0:	08001307 	.word	0x08001307
 8000fd4:	08001307 	.word	0x08001307
 8000fd8:	08001307 	.word	0x08001307
 8000fdc:	08001307 	.word	0x08001307
 8000fe0:	08001307 	.word	0x08001307
 8000fe4:	08001307 	.word	0x08001307
 8000fe8:	08001307 	.word	0x08001307
 8000fec:	08001307 	.word	0x08001307
 8000ff0:	08001307 	.word	0x08001307
 8000ff4:	08001307 	.word	0x08001307
 8000ff8:	08001307 	.word	0x08001307
 8000ffc:	08001307 	.word	0x08001307
 8001000:	08001307 	.word	0x08001307
 8001004:	08001307 	.word	0x08001307
 8001008:	080011af 	.word	0x080011af
 800100c:	080011dd 	.word	0x080011dd
 8001010:	080011e7 	.word	0x080011e7
 8001014:	080011f1 	.word	0x080011f1
 8001018:	080011fb 	.word	0x080011fb
 800101c:	08001205 	.word	0x08001205
 8001020:	08001271 	.word	0x08001271
 8001024:	0800127b 	.word	0x0800127b
 8001028:	08001285 	.word	0x08001285
 800102c:	0800128f 	.word	0x0800128f
 8001030:	08001299 	.word	0x08001299
 8001034:	080012a3 	.word	0x080012a3
 8001038:	080012ad 	.word	0x080012ad
 800103c:	080012b7 	.word	0x080012b7
 8001040:	080012c1 	.word	0x080012c1
 8001044:	080012cb 	.word	0x080012cb
 8001048:	08001307 	.word	0x08001307
 800104c:	08001307 	.word	0x08001307
 8001050:	08001307 	.word	0x08001307
 8001054:	08001307 	.word	0x08001307
 8001058:	08001307 	.word	0x08001307
 800105c:	08001307 	.word	0x08001307
 8001060:	08001307 	.word	0x08001307
 8001064:	08001307 	.word	0x08001307
 8001068:	08001307 	.word	0x08001307
 800106c:	08001307 	.word	0x08001307
 8001070:	08001307 	.word	0x08001307
 8001074:	08001307 	.word	0x08001307
 8001078:	08001307 	.word	0x08001307
 800107c:	08001307 	.word	0x08001307
 8001080:	08001307 	.word	0x08001307
 8001084:	08001307 	.word	0x08001307
 8001088:	08001307 	.word	0x08001307
 800108c:	08001307 	.word	0x08001307
 8001090:	08001307 	.word	0x08001307
 8001094:	08001307 	.word	0x08001307
 8001098:	08001307 	.word	0x08001307
 800109c:	08001307 	.word	0x08001307
 80010a0:	08001307 	.word	0x08001307
 80010a4:	08001307 	.word	0x08001307
 80010a8:	08001307 	.word	0x08001307
 80010ac:	08001307 	.word	0x08001307
 80010b0:	08001307 	.word	0x08001307
 80010b4:	08001307 	.word	0x08001307
 80010b8:	08001307 	.word	0x08001307
 80010bc:	08001307 	.word	0x08001307
 80010c0:	08001307 	.word	0x08001307
 80010c4:	08001307 	.word	0x08001307
 80010c8:	08001307 	.word	0x08001307
 80010cc:	08001307 	.word	0x08001307
 80010d0:	08001307 	.word	0x08001307
 80010d4:	08001307 	.word	0x08001307
 80010d8:	08001307 	.word	0x08001307
 80010dc:	08001307 	.word	0x08001307
 80010e0:	08001307 	.word	0x08001307
 80010e4:	08001307 	.word	0x08001307
 80010e8:	08001307 	.word	0x08001307
 80010ec:	08001307 	.word	0x08001307
 80010f0:	08001307 	.word	0x08001307
 80010f4:	08001307 	.word	0x08001307
 80010f8:	08001307 	.word	0x08001307
 80010fc:	08001307 	.word	0x08001307
 8001100:	08001307 	.word	0x08001307
 8001104:	08001307 	.word	0x08001307
 8001108:	08001307 	.word	0x08001307
 800110c:	08001307 	.word	0x08001307
 8001110:	08001307 	.word	0x08001307
 8001114:	08001307 	.word	0x08001307
 8001118:	08001307 	.word	0x08001307
 800111c:	08001307 	.word	0x08001307
 8001120:	08001307 	.word	0x08001307
 8001124:	08001307 	.word	0x08001307
 8001128:	08001307 	.word	0x08001307
 800112c:	08001307 	.word	0x08001307
 8001130:	080011bb 	.word	0x080011bb
 8001134:	080011c7 	.word	0x080011c7
 8001138:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800113c:	f280 80e3 	bge.w	8001306 <FT_CAN_ProcessData+0x4ca>
 8001140:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001144:	f6bf ae95 	bge.w	8000e72 <FT_CAN_ProcessData+0x36>
 8001148:	e0dd      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 800114a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 8001154:	e0d7      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 8001156:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 8001160:	e0d1      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8001162:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 800116a:	e0cc      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 800116c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001174:	e0c7      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 8001176:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8001180:	e0c1      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8001182:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800118a:	e0bc      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 800118c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001194:	e0b7      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 8001196:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 80011a0:	e0b1      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 80011a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 80011ac:	e0ab      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 80011ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			break;
 80011b8:	e0a5      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 80011ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			break;
 80011c4:	e09f      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 80011c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			break;
 80011d0:	e099      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->fuel_flow_total = data;
 80011d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 80011da:	e094      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
			break;
#endif

#ifdef FT_CAN_TIMING
		case 0x0043: //Injection Bank A Timing
			FT_Data_Struct->injection_bank_a_time = data;
 80011dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	805a      	strh	r2, [r3, #2]
			break;
 80011e4:	e08f      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0044: //Injection Bank B Timing
			FT_Data_Struct->injection_bank_b_time = data;
 80011e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	809a      	strh	r2, [r3, #4]
			break;
 80011ee:	e08a      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0045: //Injection Bank A Duty Cycle
			FT_Data_Struct->injection_bank_a_duty_cycle = data;
 80011f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	80da      	strh	r2, [r3, #6]
			break;
 80011f8:	e085      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0046: //Injection Bank B Duty Cycle
			FT_Data_Struct->injection_bank_b_duty_cycle = data;
 80011fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	811a      	strh	r2, [r3, #8]
			break;
 8001202:	e080      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0047: //Ignition Advance
			FT_Data_Struct->ignition_advance = data;
 8001204:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	801a      	strh	r2, [r3, #0]
			break;
 800120c:	e07b      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 800120e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	841a      	strh	r2, [r3, #32]
			break;
 8001216:	e076      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 8001218:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	819a      	strh	r2, [r3, #12]
			break;
 8001220:	e071      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 8001222:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800122a:	e06c      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 800122c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8001234:	e067      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 8001236:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			break;
 8001240:	e061      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 8001242:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			break;
 800124c:	e05b      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 800124e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			break;
 8001258:	e055      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 800125a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			break;
 8001264:	e04f      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 8001266:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	831a      	strh	r2, [r3, #24]
			break;
 800126e:	e04a      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 8001270:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8001278:	e045      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 800127a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8001282:	e040      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8001284:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 800128c:	e03b      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 800128e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	82da      	strh	r2, [r3, #22]
			break;
 8001296:	e036      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 8001298:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	815a      	strh	r2, [r3, #10]
			break;
 80012a0:	e031      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 80012a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	825a      	strh	r2, [r3, #18]
			break;
 80012aa:	e02c      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 80012ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	835a      	strh	r2, [r3, #26]
			break;
 80012b4:	e027      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 80012b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	839a      	strh	r2, [r3, #28]
			break;
 80012be:	e022      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 80012c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	83da      	strh	r2, [r3, #30]
			break;
 80012c8:	e01d      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 80012ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	829a      	strh	r2, [r3, #20]
			break;
 80012d2:	e018      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 80012d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	81da      	strh	r2, [r3, #14]
			break;
 80012dc:	e013      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 80012de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 80012e6:	e00e      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 80012e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	821a      	strh	r2, [r3, #16]
			break;
 80012f0:	e009      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 80012f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 80012fa:	e004      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 80012fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001304:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8001306:	89ba      	ldrh	r2, [r7, #12]
 8001308:	89fb      	ldrh	r3, [r7, #14]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f805 	bl	800131c <FT_CAN_ProcessCustomData>

	return;
 8001312:	e000      	b.n	8001316 <FT_CAN_ProcessData+0x4da>
		return;
 8001314:	bf00      	nop
}
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	4613      	mov	r3, r2
 800132a:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f005 f96a 	bl	8006614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f8e2 	bl	8001508 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001344:	f000 f958 	bl	80015f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f000 fbd0 	bl	8001aec <MX_GPIO_Init>
  MX_DMA_Init();
 800134c:	f000 fb96 	bl	8001a7c <MX_DMA_Init>
//  MX_IWDG_Init();
  MX_SDIO_SD_Init();
 8001350:	f000 fb3e 	bl	80019d0 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001354:	f000 f978 	bl	8001648 <MX_ADC1_Init>
  MX_RTC_Init();
 8001358:	f000 fb0a 	bl	8001970 <MX_RTC_Init>
  MX_FATFS_Init();
 800135c:	f00f fa94 	bl	8010888 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001360:	f015 fec6 	bl	80170f0 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001364:	f000 fa08 	bl	8001778 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001368:	f000 fa9e 	bl	80018a8 <MX_CAN1_Init>
  MX_I2C1_Init();
 800136c:	f000 fad2 	bl	8001914 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001370:	f000 fb4e 	bl	8001a10 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 8001374:	4a59      	ldr	r2, [pc, #356]	; (80014dc <main+0x1a4>)
 8001376:	495a      	ldr	r1, [pc, #360]	; (80014e0 <main+0x1a8>)
 8001378:	485a      	ldr	r0, [pc, #360]	; (80014e4 <main+0x1ac>)
 800137a:	f002 fb51 	bl	8003a20 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection(&fatfsStruct, &dirStruct, &fileStruct);
 800137e:	4a5a      	ldr	r2, [pc, #360]	; (80014e8 <main+0x1b0>)
 8001380:	495a      	ldr	r1, [pc, #360]	; (80014ec <main+0x1b4>)
 8001382:	485b      	ldr	r0, [pc, #364]	; (80014f0 <main+0x1b8>)
 8001384:	f004 fb6a 	bl	8005a5c <Principal_Card_Detection>

	  //Checks if data is being saved and starts saving if conditions are met
	  if((flagDatalogger == DL_NO_SAVE) || (flagDatalogger == DL_BUT_PRESS))
 8001388:	4b5a      	ldr	r3, [pc, #360]	; (80014f4 <main+0x1bc>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <main+0x60>
 8001390:	4b58      	ldr	r3, [pc, #352]	; (80014f4 <main+0x1bc>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d105      	bne.n	80013a4 <main+0x6c>
		  Principal_Datalogger_Start(dirString, logString, &dirStruct, &fileStruct);
 8001398:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <main+0x1b0>)
 800139a:	4a54      	ldr	r2, [pc, #336]	; (80014ec <main+0x1b4>)
 800139c:	4956      	ldr	r1, [pc, #344]	; (80014f8 <main+0x1c0>)
 800139e:	4857      	ldr	r0, [pc, #348]	; (80014fc <main+0x1c4>)
 80013a0:	f004 f926 	bl	80055f0 <Principal_Datalogger_Start>

	  //Analog inputs 1-4 CAN message
	  if((accMsg[ANALOG_1_4] >= perMsg[ANALOG_1_4]) && (perMsg[ANALOG_1_4] != MSG_DISABLED))
 80013a4:	4b56      	ldr	r3, [pc, #344]	; (8001500 <main+0x1c8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a56      	ldr	r2, [pc, #344]	; (8001504 <main+0x1cc>)
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d30e      	bcc.n	80013ce <main+0x96>
 80013b0:	4b54      	ldr	r3, [pc, #336]	; (8001504 <main+0x1cc>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00a      	beq.n	80013ce <main+0x96>
	  {
		  accMsg[ANALOG_1_4] -= perMsg[ANALOG_1_4];
 80013b8:	4b51      	ldr	r3, [pc, #324]	; (8001500 <main+0x1c8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a51      	ldr	r2, [pc, #324]	; (8001504 <main+0x1cc>)
 80013be:	8812      	ldrh	r2, [r2, #0]
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	4a4f      	ldr	r2, [pc, #316]	; (8001500 <main+0x1c8>)
 80013c4:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, ANALOG_1_4);
 80013c6:	2100      	movs	r1, #0
 80013c8:	4846      	ldr	r0, [pc, #280]	; (80014e4 <main+0x1ac>)
 80013ca:	f000 ffc1 	bl	8002350 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((accMsg[ANALOG_5_8] >= perMsg[ANALOG_5_8]) && (perMsg[ANALOG_5_8] != MSG_DISABLED))
 80013ce:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <main+0x1c8>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <main+0x1cc>)
 80013d4:	8852      	ldrh	r2, [r2, #2]
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d30e      	bcc.n	80013f8 <main+0xc0>
 80013da:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <main+0x1cc>)
 80013dc:	885b      	ldrh	r3, [r3, #2]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00a      	beq.n	80013f8 <main+0xc0>
	  {
		  accMsg[ANALOG_5_8] -= perMsg[ANALOG_5_8];
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <main+0x1c8>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4a47      	ldr	r2, [pc, #284]	; (8001504 <main+0x1cc>)
 80013e8:	8852      	ldrh	r2, [r2, #2]
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	4a44      	ldr	r2, [pc, #272]	; (8001500 <main+0x1c8>)
 80013ee:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, ANALOG_5_8);
 80013f0:	2101      	movs	r1, #1
 80013f2:	483c      	ldr	r0, [pc, #240]	; (80014e4 <main+0x1ac>)
 80013f4:	f000 ffac 	bl	8002350 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((accMsg[ANALOG_9_12] >= perMsg[ANALOG_9_12]) && (perMsg[ANALOG_9_12] != MSG_DISABLED))
 80013f8:	4b41      	ldr	r3, [pc, #260]	; (8001500 <main+0x1c8>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a41      	ldr	r2, [pc, #260]	; (8001504 <main+0x1cc>)
 80013fe:	8892      	ldrh	r2, [r2, #4]
 8001400:	4293      	cmp	r3, r2
 8001402:	d30e      	bcc.n	8001422 <main+0xea>
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <main+0x1cc>)
 8001406:	889b      	ldrh	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00a      	beq.n	8001422 <main+0xea>
	  {
		  accMsg[ANALOG_9_12] -= perMsg[ANALOG_9_12];
 800140c:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <main+0x1c8>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a3c      	ldr	r2, [pc, #240]	; (8001504 <main+0x1cc>)
 8001412:	8892      	ldrh	r2, [r2, #4]
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	4a3a      	ldr	r2, [pc, #232]	; (8001500 <main+0x1c8>)
 8001418:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, ANALOG_9_12);
 800141a:	2102      	movs	r1, #2
 800141c:	4831      	ldr	r0, [pc, #196]	; (80014e4 <main+0x1ac>)
 800141e:	f000 ff97 	bl	8002350 <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((accMsg[RTC_MSG] >= perMsg[RTC_MSG]) && (perMsg[RTC_MSG] != MSG_DISABLED))
 8001422:	4b37      	ldr	r3, [pc, #220]	; (8001500 <main+0x1c8>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	4a37      	ldr	r2, [pc, #220]	; (8001504 <main+0x1cc>)
 8001428:	88d2      	ldrh	r2, [r2, #6]
 800142a:	4293      	cmp	r3, r2
 800142c:	d30e      	bcc.n	800144c <main+0x114>
 800142e:	4b35      	ldr	r3, [pc, #212]	; (8001504 <main+0x1cc>)
 8001430:	88db      	ldrh	r3, [r3, #6]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00a      	beq.n	800144c <main+0x114>
	  {
		  accMsg[RTC_MSG] -= perMsg[RTC_MSG];
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <main+0x1c8>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4a32      	ldr	r2, [pc, #200]	; (8001504 <main+0x1cc>)
 800143c:	88d2      	ldrh	r2, [r2, #6]
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	4a2f      	ldr	r2, [pc, #188]	; (8001500 <main+0x1c8>)
 8001442:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_MSG);
 8001444:	2103      	movs	r1, #3
 8001446:	4827      	ldr	r0, [pc, #156]	; (80014e4 <main+0x1ac>)
 8001448:	f000 ff82 	bl	8002350 <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((accMsg[VERIFY_MSG] >= perMsg[VERIFY_MSG]) && (perMsg[VERIFY_MSG] != MSG_DISABLED))
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <main+0x1c8>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4a2c      	ldr	r2, [pc, #176]	; (8001504 <main+0x1cc>)
 8001452:	8912      	ldrh	r2, [r2, #8]
 8001454:	4293      	cmp	r3, r2
 8001456:	d30e      	bcc.n	8001476 <main+0x13e>
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <main+0x1cc>)
 800145a:	891b      	ldrh	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00a      	beq.n	8001476 <main+0x13e>
	  {
		  accMsg[VERIFY_MSG] -= perMsg[VERIFY_MSG];
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <main+0x1c8>)
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <main+0x1cc>)
 8001466:	8912      	ldrh	r2, [r2, #8]
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	4a25      	ldr	r2, [pc, #148]	; (8001500 <main+0x1c8>)
 800146c:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, VERIFY_MSG);
 800146e:	2104      	movs	r1, #4
 8001470:	481c      	ldr	r0, [pc, #112]	; (80014e4 <main+0x1ac>)
 8001472:	f000 ff6d 	bl	8002350 <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((accMsg[ECU_SAVE] >= perMsg[ECU_SAVE]) && (perMsg[ECU_SAVE] != MSG_DISABLED))
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <main+0x1c8>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a22      	ldr	r2, [pc, #136]	; (8001504 <main+0x1cc>)
 800147c:	8992      	ldrh	r2, [r2, #12]
 800147e:	4293      	cmp	r3, r2
 8001480:	d30e      	bcc.n	80014a0 <main+0x168>
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <main+0x1cc>)
 8001484:	899b      	ldrh	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00a      	beq.n	80014a0 <main+0x168>
	  {
		  accMsg[ECU_SAVE] -= perMsg[ECU_SAVE];
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <main+0x1c8>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <main+0x1cc>)
 8001490:	8992      	ldrh	r2, [r2, #12]
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	4a1a      	ldr	r2, [pc, #104]	; (8001500 <main+0x1c8>)
 8001496:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, ECU_SAVE);
 8001498:	2106      	movs	r1, #6
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <main+0x1ac>)
 800149c:	f000 ff58 	bl	8002350 <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((accMsg[PDM_SAVE] >= perMsg[PDM_SAVE]) && (perMsg[PDM_SAVE] != MSG_DISABLED))
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <main+0x1c8>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <main+0x1cc>)
 80014a6:	89d2      	ldrh	r2, [r2, #14]
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d30a      	bcc.n	80014c2 <main+0x18a>
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <main+0x1cc>)
 80014ae:	89db      	ldrh	r3, [r3, #14]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <main+0x18a>
	  {
		  accMsg[PDM_SAVE] -= perMsg[PDM_SAVE];
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <main+0x1c8>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <main+0x1cc>)
 80014ba:	89d2      	ldrh	r2, [r2, #14]
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <main+0x1c8>)
 80014c0:	61d3      	str	r3, [r2, #28]
//		  Principal_Transmit_Msg(&hcan1, PDM_SAVE);
	  }

	  if(accMsg[VERIFY_LEDS] >= MSG_FREQ_5HZ)
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <main+0x1c8>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	2bc7      	cmp	r3, #199	; 0xc7
 80014c8:	f67f af59 	bls.w	800137e <main+0x46>
	  {
		  accMsg[VERIFY_LEDS] -= MSG_FREQ_5HZ;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <main+0x1c8>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	3bc8      	subs	r3, #200	; 0xc8
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <main+0x1c8>)
 80014d4:	6213      	str	r3, [r2, #32]
		  Principal_Verify_LEDs();
 80014d6:	f000 fe61 	bl	800219c <Principal_Verify_LEDs>
	  Principal_Card_Detection(&fatfsStruct, &dirStruct, &fileStruct);
 80014da:	e750      	b.n	800137e <main+0x46>
 80014dc:	200004e4 	.word	0x200004e4
 80014e0:	2000032c 	.word	0x2000032c
 80014e4:	20000304 	.word	0x20000304
 80014e8:	200056a8 	.word	0x200056a8
 80014ec:	20004640 	.word	0x20004640
 80014f0:	20004670 	.word	0x20004670
 80014f4:	200066fe 	.word	0x200066fe
 80014f8:	200066e0 	.word	0x200066e0
 80014fc:	200066d4 	.word	0x200066d4
 8001500:	20006760 	.word	0x20006760
 8001504:	20006728 	.word	0x20006728

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	2234      	movs	r2, #52	; 0x34
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f016 fb90 	bl	8017c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <SystemClock_Config+0xe8>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <SystemClock_Config+0xe8>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <SystemClock_Config+0xe8>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <SystemClock_Config+0xec>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <SystemClock_Config+0xec>)
 8001552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <SystemClock_Config+0xec>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001564:	230d      	movs	r3, #13
 8001566:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800156e:	2301      	movs	r3, #1
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001572:	2301      	movs	r3, #1
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001576:	2302      	movs	r3, #2
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001580:	2308      	movs	r3, #8
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001584:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001588:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158a:	2302      	movs	r3, #2
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800158e:	2306      	movs	r3, #6
 8001590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001592:	2302      	movs	r3, #2
 8001594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4618      	mov	r0, r3
 800159c:	f00a f84a 	bl	800b634 <HAL_RCC_OscConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80015a6:	f000 fb47 	bl	8001c38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015aa:	f009 f993 	bl	800a8d4 <HAL_PWREx_EnableOverDrive>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015b4:	f000 fb40 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b8:	230f      	movs	r3, #15
 80015ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015bc:	2302      	movs	r3, #2
 80015be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	2105      	movs	r1, #5
 80015d6:	4618      	mov	r0, r3
 80015d8:	f009 f9cc 	bl	800a974 <HAL_RCC_ClockConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80015e2:	f000 fb29 	bl	8001c38 <Error_Handler>
  }
}
 80015e6:	bf00      	nop
 80015e8:	3750      	adds	r7, #80	; 0x50
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40007000 	.word	0x40007000

080015f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b098      	sub	sp, #96	; 0x60
 80015fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	225c      	movs	r2, #92	; 0x5c
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f016 fb19 	bl	8017c3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800160a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800160e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8001610:	2308      	movs	r3, #8
 8001612:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001614:	23c0      	movs	r3, #192	; 0xc0
 8001616:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001618:	2302      	movs	r3, #2
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800161c:	2304      	movs	r3, #4
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001620:	2301      	movs	r3, #1
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8001624:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001628:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800162a:	2300      	movs	r3, #0
 800162c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4618      	mov	r0, r3
 8001632:	f009 faa5 	bl	800ab80 <HAL_RCCEx_PeriphCLKConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 800163c:	f000 fafc 	bl	8001c38 <Error_Handler>
  }
}
 8001640:	bf00      	nop
 8001642:	3760      	adds	r7, #96	; 0x60
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800164e:	463b      	mov	r3, r7
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800165a:	4b44      	ldr	r3, [pc, #272]	; (800176c <MX_ADC1_Init+0x124>)
 800165c:	4a44      	ldr	r2, [pc, #272]	; (8001770 <MX_ADC1_Init+0x128>)
 800165e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001660:	4b42      	ldr	r3, [pc, #264]	; (800176c <MX_ADC1_Init+0x124>)
 8001662:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001666:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <MX_ADC1_Init+0x124>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800166e:	4b3f      	ldr	r3, [pc, #252]	; (800176c <MX_ADC1_Init+0x124>)
 8001670:	2201      	movs	r2, #1
 8001672:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001674:	4b3d      	ldr	r3, [pc, #244]	; (800176c <MX_ADC1_Init+0x124>)
 8001676:	2201      	movs	r2, #1
 8001678:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800167a:	4b3c      	ldr	r3, [pc, #240]	; (800176c <MX_ADC1_Init+0x124>)
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001682:	4b3a      	ldr	r3, [pc, #232]	; (800176c <MX_ADC1_Init+0x124>)
 8001684:	2200      	movs	r2, #0
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <MX_ADC1_Init+0x124>)
 800168a:	4a3a      	ldr	r2, [pc, #232]	; (8001774 <MX_ADC1_Init+0x12c>)
 800168c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800168e:	4b37      	ldr	r3, [pc, #220]	; (800176c <MX_ADC1_Init+0x124>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <MX_ADC1_Init+0x124>)
 8001696:	2206      	movs	r2, #6
 8001698:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <MX_ADC1_Init+0x124>)
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016a2:	4b32      	ldr	r3, [pc, #200]	; (800176c <MX_ADC1_Init+0x124>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a8:	4830      	ldr	r0, [pc, #192]	; (800176c <MX_ADC1_Init+0x124>)
 80016aa:	f005 f849 	bl	8006740 <HAL_ADC_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016b4:	f000 fac0 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016b8:	2306      	movs	r3, #6
 80016ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80016c0:	2307      	movs	r3, #7
 80016c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	4828      	ldr	r0, [pc, #160]	; (800176c <MX_ADC1_Init+0x124>)
 80016ca:	f005 f9ab 	bl	8006a24 <HAL_ADC_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016d4:	f000 fab0 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016d8:	2307      	movs	r3, #7
 80016da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016dc:	2302      	movs	r3, #2
 80016de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4821      	ldr	r0, [pc, #132]	; (800176c <MX_ADC1_Init+0x124>)
 80016e6:	f005 f99d 	bl	8006a24 <HAL_ADC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016f0:	f000 faa2 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80016f4:	230e      	movs	r3, #14
 80016f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80016f8:	2303      	movs	r3, #3
 80016fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	481a      	ldr	r0, [pc, #104]	; (800176c <MX_ADC1_Init+0x124>)
 8001702:	f005 f98f 	bl	8006a24 <HAL_ADC_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800170c:	f000 fa94 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001710:	230f      	movs	r3, #15
 8001712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001714:	2304      	movs	r3, #4
 8001716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	4813      	ldr	r0, [pc, #76]	; (800176c <MX_ADC1_Init+0x124>)
 800171e:	f005 f981 	bl	8006a24 <HAL_ADC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001728:	f000 fa86 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800172c:	2308      	movs	r3, #8
 800172e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001730:	2305      	movs	r3, #5
 8001732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_ADC1_Init+0x124>)
 800173a:	f005 f973 	bl	8006a24 <HAL_ADC_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001744:	f000 fa78 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001748:	2309      	movs	r3, #9
 800174a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800174c:	2306      	movs	r3, #6
 800174e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_ADC1_Init+0x124>)
 8001756:	f005 f965 	bl	8006a24 <HAL_ADC_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001760:	f000 fa6a 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200001b4 	.word	0x200001b4
 8001770:	40012000 	.word	0x40012000
 8001774:	0f000001 	.word	0x0f000001

08001778 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800177e:	463b      	mov	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800178a:	4b44      	ldr	r3, [pc, #272]	; (800189c <MX_ADC2_Init+0x124>)
 800178c:	4a44      	ldr	r2, [pc, #272]	; (80018a0 <MX_ADC2_Init+0x128>)
 800178e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <MX_ADC2_Init+0x124>)
 8001792:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001796:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001798:	4b40      	ldr	r3, [pc, #256]	; (800189c <MX_ADC2_Init+0x124>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800179e:	4b3f      	ldr	r3, [pc, #252]	; (800189c <MX_ADC2_Init+0x124>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80017a4:	4b3d      	ldr	r3, [pc, #244]	; (800189c <MX_ADC2_Init+0x124>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <MX_ADC2_Init+0x124>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b2:	4b3a      	ldr	r3, [pc, #232]	; (800189c <MX_ADC2_Init+0x124>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b8:	4b38      	ldr	r3, [pc, #224]	; (800189c <MX_ADC2_Init+0x124>)
 80017ba:	4a3a      	ldr	r2, [pc, #232]	; (80018a4 <MX_ADC2_Init+0x12c>)
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017be:	4b37      	ldr	r3, [pc, #220]	; (800189c <MX_ADC2_Init+0x124>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <MX_ADC2_Init+0x124>)
 80017c6:	2206      	movs	r2, #6
 80017c8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <MX_ADC2_Init+0x124>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <MX_ADC2_Init+0x124>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017d8:	4830      	ldr	r0, [pc, #192]	; (800189c <MX_ADC2_Init+0x124>)
 80017da:	f004 ffb1 	bl	8006740 <HAL_ADC_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80017e4:	f000 fa28 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017f0:	2307      	movs	r3, #7
 80017f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	4828      	ldr	r0, [pc, #160]	; (800189c <MX_ADC2_Init+0x124>)
 80017fa:	f005 f913 	bl	8006a24 <HAL_ADC_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001804:	f000 fa18 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001808:	2301      	movs	r3, #1
 800180a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800180c:	2302      	movs	r3, #2
 800180e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	4821      	ldr	r0, [pc, #132]	; (800189c <MX_ADC2_Init+0x124>)
 8001816:	f005 f905 	bl	8006a24 <HAL_ADC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001820:	f000 fa0a 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001824:	2302      	movs	r3, #2
 8001826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001828:	2303      	movs	r3, #3
 800182a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	4619      	mov	r1, r3
 8001830:	481a      	ldr	r0, [pc, #104]	; (800189c <MX_ADC2_Init+0x124>)
 8001832:	f005 f8f7 	bl	8006a24 <HAL_ADC_ConfigChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800183c:	f000 f9fc 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001840:	2303      	movs	r3, #3
 8001842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001844:	2304      	movs	r3, #4
 8001846:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001848:	463b      	mov	r3, r7
 800184a:	4619      	mov	r1, r3
 800184c:	4813      	ldr	r0, [pc, #76]	; (800189c <MX_ADC2_Init+0x124>)
 800184e:	f005 f8e9 	bl	8006a24 <HAL_ADC_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001858:	f000 f9ee 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800185c:	2304      	movs	r3, #4
 800185e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001860:	2305      	movs	r3, #5
 8001862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <MX_ADC2_Init+0x124>)
 800186a:	f005 f8db 	bl	8006a24 <HAL_ADC_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001874:	f000 f9e0 	bl	8001c38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001878:	2305      	movs	r3, #5
 800187a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800187c:	2306      	movs	r3, #6
 800187e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_ADC2_Init+0x124>)
 8001886:	f005 f8cd 	bl	8006a24 <HAL_ADC_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001890:	f000 f9d2 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200001fc 	.word	0x200001fc
 80018a0:	40012100 	.word	0x40012100
 80018a4:	0f000001 	.word	0x0f000001

080018a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_CAN1_Init+0x64>)
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <MX_CAN1_Init+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_CAN1_Init+0x64>)
 80018b4:	2205      	movs	r2, #5
 80018b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_CAN1_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <MX_CAN1_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_CAN1_Init+0x64>)
 80018c6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80018ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_CAN1_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_CAN1_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_CAN1_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_CAN1_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_CAN1_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_CAN1_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_CAN1_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_CAN1_Init+0x64>)
 80018f8:	f005 fb44 	bl	8006f84 <HAL_CAN_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001902:	f000 f999 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000304 	.word	0x20000304
 8001910:	40006400 	.word	0x40006400

08001914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <MX_I2C1_Init+0x50>)
 800191a:	4a13      	ldr	r2, [pc, #76]	; (8001968 <MX_I2C1_Init+0x54>)
 800191c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_I2C1_Init+0x50>)
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <MX_I2C1_Init+0x58>)
 8001922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_I2C1_Init+0x50>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_I2C1_Init+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_I2C1_Init+0x50>)
 8001932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <MX_I2C1_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_I2C1_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <MX_I2C1_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_I2C1_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001950:	4804      	ldr	r0, [pc, #16]	; (8001964 <MX_I2C1_Init+0x50>)
 8001952:	f007 f87d 	bl	8008a50 <HAL_I2C_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800195c:	f000 f96c 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	2000032c 	.word	0x2000032c
 8001968:	40005400 	.word	0x40005400
 800196c:	00061a80 	.word	0x00061a80

08001970 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001984:	2300      	movs	r3, #0
 8001986:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_RTC_Init+0x58>)
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <MX_RTC_Init+0x5c>)
 800198c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_RTC_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_RTC_Init+0x58>)
 8001996:	227f      	movs	r2, #127	; 0x7f
 8001998:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_RTC_Init+0x58>)
 800199c:	22ff      	movs	r2, #255	; 0xff
 800199e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_RTC_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_RTC_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_RTC_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_RTC_Init+0x58>)
 80019b4:	f00a f8dc 	bl	800bb70 <HAL_RTC_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80019be:	f000 f93b 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000380 	.word	0x20000380
 80019cc:	40002800 	.word	0x40002800

080019d0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_SDIO_SD_Init+0x38>)
 80019d6:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <MX_SDIO_SD_Init+0x3c>)
 80019d8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <MX_SDIO_SD_Init+0x38>)
 80019dc:	2200      	movs	r2, #0
 80019de:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_SDIO_SD_Init+0x38>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <MX_SDIO_SD_Init+0x38>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_SDIO_SD_Init+0x38>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <MX_SDIO_SD_Init+0x38>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <MX_SDIO_SD_Init+0x38>)
 80019fa:	2202      	movs	r2, #2
 80019fc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	200003a0 	.word	0x200003a0
 8001a0c:	40012c00 	.word	0x40012c00

08001a10 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a16:	463b      	mov	r3, r7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_TIM7_Init+0x64>)
 8001a20:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <MX_TIM7_Init+0x68>)
 8001a22:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_TIM7_Init+0x64>)
 8001a26:	2259      	movs	r2, #89	; 0x59
 8001a28:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_TIM7_Init+0x64>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <MX_TIM7_Init+0x64>)
 8001a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a36:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_TIM7_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a3e:	480d      	ldr	r0, [pc, #52]	; (8001a74 <MX_TIM7_Init+0x64>)
 8001a40:	f00c fa47 	bl	800ded2 <HAL_TIM_Base_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a4a:	f000 f8f5 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a56:	463b      	mov	r3, r7
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <MX_TIM7_Init+0x64>)
 8001a5c:	f00c fcc8 	bl	800e3f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a66:	f000 f8e7 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200004e4 	.word	0x200004e4
 8001a78:	40001400 	.word	0x40001400

08001a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <MX_DMA_Init+0x6c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <MX_DMA_Init+0x6c>)
 8001a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <MX_DMA_Init+0x6c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	2038      	movs	r0, #56	; 0x38
 8001aa4:	f006 fa07 	bl	8007eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001aa8:	2038      	movs	r0, #56	; 0x38
 8001aaa:	f006 fa20 	bl	8007eee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	203a      	movs	r0, #58	; 0x3a
 8001ab4:	f006 f9ff 	bl	8007eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ab8:	203a      	movs	r0, #58	; 0x3a
 8001aba:	f006 fa18 	bl	8007eee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	203b      	movs	r0, #59	; 0x3b
 8001ac4:	f006 f9f7 	bl	8007eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001ac8:	203b      	movs	r0, #59	; 0x3b
 8001aca:	f006 fa10 	bl	8007eee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2045      	movs	r0, #69	; 0x45
 8001ad4:	f006 f9ef 	bl	8007eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001ad8:	2045      	movs	r0, #69	; 0x45
 8001ada:	f006 fa08 	bl	8007eee <HAL_NVIC_EnableIRQ>

}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800

08001aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a41      	ldr	r2, [pc, #260]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a3a      	ldr	r2, [pc, #232]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	4b34      	ldr	r3, [pc, #208]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a33      	ldr	r2, [pc, #204]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a2c      	ldr	r2, [pc, #176]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <MX_GPIO_Init+0x140>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	210f      	movs	r1, #15
 8001b92:	4827      	ldr	r0, [pc, #156]	; (8001c30 <MX_GPIO_Init+0x144>)
 8001b94:	f006 ff10 	bl	80089b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b9e:	4825      	ldr	r0, [pc, #148]	; (8001c34 <MX_GPIO_Init+0x148>)
 8001ba0:	f006 ff0a 	bl	80089b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481d      	ldr	r0, [pc, #116]	; (8001c30 <MX_GPIO_Init+0x144>)
 8001bbc:	f006 fd50 	bl	8008660 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001bc0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4816      	ldr	r0, [pc, #88]	; (8001c34 <MX_GPIO_Init+0x148>)
 8001bda:	f006 fd41 	bl	8008660 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001bde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001be4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480f      	ldr	r0, [pc, #60]	; (8001c34 <MX_GPIO_Init+0x148>)
 8001bf6:	f006 fd33 	bl	8008660 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4808      	ldr	r0, [pc, #32]	; (8001c30 <MX_GPIO_Init+0x144>)
 8001c0e:	f006 fd27 	bl	8008660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2101      	movs	r1, #1
 8001c16:	2028      	movs	r0, #40	; 0x28
 8001c18:	f006 f94d 	bl	8007eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c1c:	2028      	movs	r0, #40	; 0x28
 8001c1e:	f006 f966 	bl	8007eee <HAL_NVIC_EnableIRQ>

}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	; 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020400 	.word	0x40020400

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <Error_Handler+0x8>
	...

08001c44 <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	603a      	str	r2, [r7, #0]
 8001c4e:	80fb      	strh	r3, [r7, #6]
 8001c50:	460b      	mov	r3, r1
 8001c52:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	2b1d      	cmp	r3, #29
 8001c5e:	f200 81f9 	bhi.w	8002054 <Process_Data+0x410>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <Process_Data+0x24>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001ce1 	.word	0x08001ce1
 8001c6c:	08001d11 	.word	0x08001d11
 8001c70:	08001d41 	.word	0x08001d41
 8001c74:	08001d71 	.word	0x08001d71
 8001c78:	08001da1 	.word	0x08001da1
 8001c7c:	08001dd1 	.word	0x08001dd1
 8001c80:	08001e01 	.word	0x08001e01
 8001c84:	08001e31 	.word	0x08001e31
 8001c88:	08001e61 	.word	0x08001e61
 8001c8c:	08001e91 	.word	0x08001e91
 8001c90:	08001ec1 	.word	0x08001ec1
 8001c94:	08001ef1 	.word	0x08001ef1
 8001c98:	08001f21 	.word	0x08001f21
 8001c9c:	08001f51 	.word	0x08001f51
 8001ca0:	08001f81 	.word	0x08001f81
 8001ca4:	08001fb1 	.word	0x08001fb1
 8001ca8:	08001fe5 	.word	0x08001fe5
 8001cac:	08001fed 	.word	0x08001fed
 8001cb0:	08001ff5 	.word	0x08001ff5
 8001cb4:	08001ffd 	.word	0x08001ffd
 8001cb8:	08002005 	.word	0x08002005
 8001cbc:	0800200d 	.word	0x0800200d
 8001cc0:	08002015 	.word	0x08002015
 8001cc4:	0800201d 	.word	0x0800201d
 8001cc8:	08002025 	.word	0x08002025
 8001ccc:	0800202d 	.word	0x0800202d
 8001cd0:	08002035 	.word	0x08002035
 8001cd4:	0800203d 	.word	0x0800203d
 8001cd8:	08002045 	.word	0x08002045
 8001cdc:	0800204d 	.word	0x0800204d
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	88ba      	ldrh	r2, [r7, #4]
 8001ce4:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	885b      	ldrh	r3, [r3, #2]
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001cfe:	e1aa      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	885b      	ldrh	r3, [r3, #2]
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	805a      	strh	r2, [r3, #2]
			break;
 8001d0e:	e1a2      	b.n	8002056 <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	88ba      	ldrh	r2, [r7, #4]
 8001d14:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	885b      	ldrh	r3, [r3, #2]
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001d2e:	e192      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	885b      	ldrh	r3, [r3, #2]
 8001d34:	f023 0302 	bic.w	r3, r3, #2
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	805a      	strh	r2, [r3, #2]
			break;
 8001d3e:	e18a      	b.n	8002056 <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	88ba      	ldrh	r2, [r7, #4]
 8001d44:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	885b      	ldrh	r3, [r3, #2]
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001d5e:	e17a      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	885b      	ldrh	r3, [r3, #2]
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	805a      	strh	r2, [r3, #2]
			break;
 8001d6e:	e172      	b.n	8002056 <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	88ba      	ldrh	r2, [r7, #4]
 8001d74:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	885b      	ldrh	r3, [r3, #2]
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001d8e:	e162      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	885b      	ldrh	r3, [r3, #2]
 8001d94:	f023 0308 	bic.w	r3, r3, #8
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	805a      	strh	r2, [r3, #2]
			break;
 8001d9e:	e15a      	b.n	8002056 <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	88ba      	ldrh	r2, [r7, #4]
 8001da4:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	885b      	ldrh	r3, [r3, #2]
 8001db4:	f043 0310 	orr.w	r3, r3, #16
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001dbe:	e14a      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	885b      	ldrh	r3, [r3, #2]
 8001dc4:	f023 0310 	bic.w	r3, r3, #16
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	805a      	strh	r2, [r3, #2]
			break;
 8001dce:	e142      	b.n	8002056 <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	88ba      	ldrh	r2, [r7, #4]
 8001dd4:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	885b      	ldrh	r3, [r3, #2]
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001dee:	e132      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	885b      	ldrh	r3, [r3, #2]
 8001df4:	f023 0320 	bic.w	r3, r3, #32
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	805a      	strh	r2, [r3, #2]
			break;
 8001dfe:	e12a      	b.n	8002056 <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	88ba      	ldrh	r2, [r7, #4]
 8001e04:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	885b      	ldrh	r3, [r3, #2]
 8001e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001e1e:	e11a      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	885b      	ldrh	r3, [r3, #2]
 8001e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	805a      	strh	r2, [r3, #2]
			break;
 8001e2e:	e112      	b.n	8002056 <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	88ba      	ldrh	r2, [r7, #4]
 8001e34:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	885b      	ldrh	r3, [r3, #2]
 8001e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001e4e:	e102      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	885b      	ldrh	r3, [r3, #2]
 8001e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	805a      	strh	r2, [r3, #2]
			break;
 8001e5e:	e0fa      	b.n	8002056 <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	88ba      	ldrh	r2, [r7, #4]
 8001e64:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	885b      	ldrh	r3, [r3, #2]
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001e7e:	e0ea      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	885b      	ldrh	r3, [r3, #2]
 8001e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	805a      	strh	r2, [r3, #2]
			break;
 8001e8e:	e0e2      	b.n	8002056 <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	88ba      	ldrh	r2, [r7, #4]
 8001e94:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001eae:	e0d2      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	885b      	ldrh	r3, [r3, #2]
 8001eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	805a      	strh	r2, [r3, #2]
			break;
 8001ebe:	e0ca      	b.n	8002056 <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	88ba      	ldrh	r2, [r7, #4]
 8001ec4:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	885b      	ldrh	r3, [r3, #2]
 8001ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001ede:	e0ba      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	885b      	ldrh	r3, [r3, #2]
 8001ee4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	805a      	strh	r2, [r3, #2]
			break;
 8001eee:	e0b2      	b.n	8002056 <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	88ba      	ldrh	r2, [r7, #4]
 8001ef4:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d007      	beq.n	8001f10 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	885b      	ldrh	r3, [r3, #2]
 8001f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001f0e:	e0a2      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	885b      	ldrh	r3, [r3, #2]
 8001f14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	805a      	strh	r2, [r3, #2]
			break;
 8001f1e:	e09a      	b.n	8002056 <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	88ba      	ldrh	r2, [r7, #4]
 8001f24:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	885b      	ldrh	r3, [r3, #2]
 8001f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001f3e:	e08a      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	885b      	ldrh	r3, [r3, #2]
 8001f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	805a      	strh	r2, [r3, #2]
			break;
 8001f4e:	e082      	b.n	8002056 <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	88ba      	ldrh	r2, [r7, #4]
 8001f54:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	885b      	ldrh	r3, [r3, #2]
 8001f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001f6e:	e072      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	885b      	ldrh	r3, [r3, #2]
 8001f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	805a      	strh	r2, [r3, #2]
			break;
 8001f7e:	e06a      	b.n	8002056 <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	88ba      	ldrh	r2, [r7, #4]
 8001f84:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	885b      	ldrh	r3, [r3, #2]
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001f9e:	e05a      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	885b      	ldrh	r3, [r3, #2]
 8001fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	805a      	strh	r2, [r3, #2]
			break;
 8001fae:	e052      	b.n	8002056 <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	88ba      	ldrh	r2, [r7, #4]
 8001fb4:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	885b      	ldrh	r3, [r3, #2]
 8001fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001fd2:	e040      	b.n	8002056 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	885b      	ldrh	r3, [r3, #2]
 8001fd8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	805a      	strh	r2, [r3, #2]
			break;
 8001fe2:	e038      	b.n	8002056 <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	88ba      	ldrh	r2, [r7, #4]
 8001fe8:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001fea:	e034      	b.n	8002056 <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	88ba      	ldrh	r2, [r7, #4]
 8001ff0:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001ff2:	e030      	b.n	8002056 <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	88ba      	ldrh	r2, [r7, #4]
 8001ff8:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001ffa:	e02c      	b.n	8002056 <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	88ba      	ldrh	r2, [r7, #4]
 8002000:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8002002:	e028      	b.n	8002056 <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	88ba      	ldrh	r2, [r7, #4]
 8002008:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 800200a:	e024      	b.n	8002056 <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	88ba      	ldrh	r2, [r7, #4]
 8002010:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8002012:	e020      	b.n	8002056 <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	88ba      	ldrh	r2, [r7, #4]
 8002018:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 800201a:	e01c      	b.n	8002056 <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	88ba      	ldrh	r2, [r7, #4]
 8002020:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8002022:	e018      	b.n	8002056 <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	88ba      	ldrh	r2, [r7, #4]
 8002028:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800202a:	e014      	b.n	8002056 <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	88ba      	ldrh	r2, [r7, #4]
 8002030:	801a      	strh	r2, [r3, #0]
			break;
 8002032:	e010      	b.n	8002056 <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	88ba      	ldrh	r2, [r7, #4]
 8002038:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 800203a:	e00c      	b.n	8002056 <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	88ba      	ldrh	r2, [r7, #4]
 8002040:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8002042:	e008      	b.n	8002056 <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	88ba      	ldrh	r2, [r7, #4]
 8002048:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 800204a:	e004      	b.n	8002056 <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	88ba      	ldrh	r2, [r7, #4]
 8002050:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8002052:	e000      	b.n	8002056 <Process_Data+0x412>

		default:
			break;
 8002054:	bf00      	nop
	}

	return;
 8002056:	bf00      	nop
}
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b090      	sub	sp, #64	; 0x40
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <PDM_CAN_FilterConfig+0x5c>)
 8002072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <PDM_CAN_FilterConfig+0x60>)
 8002076:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002078:	2300      	movs	r3, #0
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800207c:	2301      	movs	r3, #1
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 8002080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002082:	0b5b      	lsrs	r3, r3, #13
 8002084:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 8002086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	b29b      	uxth	r3, r3
 800208c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 800208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002090:	0b5b      	lsrs	r3, r3, #13
 8002092:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	b29b      	uxth	r3, r3
 800209a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80020a4:	2301      	movs	r3, #1
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	4619      	mov	r1, r3
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f005 f864 	bl	800717c <HAL_CAN_ConfigFilter>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3740      	adds	r7, #64	; 0x40
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	1e35c000 	.word	0x1e35c000
 80020c4:	1ffff000 	.word	0x1ffff000

080020c8 <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(CAN_RxHeaderTypeDef* rx_header, uint8_t* data_buffer, PDM_Data* data_struct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
	uint8_t length = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	77bb      	strb	r3, [r7, #30]
	uint8_t buffer[8];
	uint16_t id = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	83bb      	strh	r3, [r7, #28]
	uint16_t data = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	837b      	strh	r3, [r7, #26]

	if((rx_header->DLC != CAN_ID_EXT) && ((rx_header->ExtId & 0x1FFFF000) != 0x1E35C000))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d006      	beq.n	80020f6 <PDM_CAN_Process_Data+0x2e>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4b29      	ldr	r3, [pc, #164]	; (8002194 <PDM_CAN_Process_Data+0xcc>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	4a29      	ldr	r2, [pc, #164]	; (8002198 <PDM_CAN_Process_Data+0xd0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d149      	bne.n	800218a <PDM_CAN_Process_Data+0xc2>
		return;

	length = rx_header->DLC;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	77bb      	strb	r3, [r7, #30]

	for(uint8_t i = 0; i < length; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	77fb      	strb	r3, [r7, #31]
 8002100:	e00b      	b.n	800211a <PDM_CAN_Process_Data+0x52>
		buffer[i] = data_buffer[i];
 8002102:	7ffb      	ldrb	r3, [r7, #31]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	441a      	add	r2, r3
 8002108:	7ffb      	ldrb	r3, [r7, #31]
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	3320      	adds	r3, #32
 800210e:	443b      	add	r3, r7
 8002110:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < length; i++)
 8002114:	7ffb      	ldrb	r3, [r7, #31]
 8002116:	3301      	adds	r3, #1
 8002118:	77fb      	strb	r3, [r7, #31]
 800211a:	7ffa      	ldrb	r2, [r7, #31]
 800211c:	7fbb      	ldrb	r3, [r7, #30]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3ef      	bcc.n	8002102 <PDM_CAN_Process_Data+0x3a>

	id  = buffer[0] << 8;
 8002122:	7c3b      	ldrb	r3, [r7, #16]
 8002124:	b29b      	uxth	r3, r3
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	83bb      	strh	r3, [r7, #28]
	id |= buffer[1] & 0xff;
 800212a:	7c7b      	ldrb	r3, [r7, #17]
 800212c:	b29a      	uxth	r2, r3
 800212e:	8bbb      	ldrh	r3, [r7, #28]
 8002130:	4313      	orrs	r3, r2
 8002132:	83bb      	strh	r3, [r7, #28]
	data  = buffer[2] << 8;
 8002134:	7cbb      	ldrb	r3, [r7, #18]
 8002136:	b29b      	uxth	r3, r3
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	837b      	strh	r3, [r7, #26]
	data |= buffer[3] & 0xff;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	b29a      	uxth	r2, r3
 8002140:	8b7b      	ldrh	r3, [r7, #26]
 8002142:	4313      	orrs	r3, r2
 8002144:	837b      	strh	r3, [r7, #26]

	Process_Data(id, data, data_struct);
 8002146:	8b79      	ldrh	r1, [r7, #26]
 8002148:	8bbb      	ldrh	r3, [r7, #28]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fd79 	bl	8001c44 <Process_Data>

	if(length == 8)
 8002152:	7fbb      	ldrb	r3, [r7, #30]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d119      	bne.n	800218c <PDM_CAN_Process_Data+0xc4>
	{
		id  = buffer[4] << 8;
 8002158:	7d3b      	ldrb	r3, [r7, #20]
 800215a:	b29b      	uxth	r3, r3
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	83bb      	strh	r3, [r7, #28]
		id |= buffer[5] & 0xff;
 8002160:	7d7b      	ldrb	r3, [r7, #21]
 8002162:	b29a      	uxth	r2, r3
 8002164:	8bbb      	ldrh	r3, [r7, #28]
 8002166:	4313      	orrs	r3, r2
 8002168:	83bb      	strh	r3, [r7, #28]
		data  = buffer[6] << 8;
 800216a:	7dbb      	ldrb	r3, [r7, #22]
 800216c:	b29b      	uxth	r3, r3
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	837b      	strh	r3, [r7, #26]
		data |= buffer[7] & 0xff;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	b29a      	uxth	r2, r3
 8002176:	8b7b      	ldrh	r3, [r7, #26]
 8002178:	4313      	orrs	r3, r2
 800217a:	837b      	strh	r3, [r7, #26]

		Process_Data(id, data, data_struct);
 800217c:	8b79      	ldrh	r1, [r7, #26]
 800217e:	8bbb      	ldrh	r3, [r7, #28]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fd5e 	bl	8001c44 <Process_Data>
 8002188:	e000      	b.n	800218c <PDM_CAN_Process_Data+0xc4>
		return;
 800218a:	bf00      	nop
	}
}
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	1ffff000 	.word	0x1ffff000
 8002198:	1e35c000 	.word	0x1e35c000

0800219c <Principal_Verify_LEDs>:
static void Tx_Beacon(CAN_HandleTypeDef* hcan);
static void Save_ECU(CAN_HandleTypeDef* hcan);
static void Save_PDM(CAN_HandleTypeDef* hcan);

void Principal_Verify_LEDs()
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
	verifyADC = 0;
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <Principal_Verify_LEDs+0xb8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	e015      	b.n	80021da <Principal_Verify_LEDs+0x3e>
		if(adcBuffer[i] > ADC_THRESHOLD)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	4a29      	ldr	r2, [pc, #164]	; (8002258 <Principal_Verify_LEDs+0xbc>)
 80021b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021b6:	2b1e      	cmp	r3, #30
 80021b8:	d90c      	bls.n	80021d4 <Principal_Verify_LEDs+0x38>
			verifyADC |= (1 << i);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2201      	movs	r2, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <Principal_Verify_LEDs+0xb8>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <Principal_Verify_LEDs+0xb8>)
 80021d2:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	3301      	adds	r3, #1
 80021d8:	71fb      	strb	r3, [r7, #7]
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b0b      	cmp	r3, #11
 80021de:	d9e6      	bls.n	80021ae <Principal_Verify_LEDs+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 80021e0:	2101      	movs	r1, #1
 80021e2:	481e      	ldr	r0, [pc, #120]	; (800225c <Principal_Verify_LEDs+0xc0>)
 80021e4:	f006 fc01 	bl	80089ea <HAL_GPIO_TogglePin>

	if(flagDatalogger == DL_SAVE)
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <Principal_Verify_LEDs+0xc4>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <Principal_Verify_LEDs+0x60>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 80021f0:	2201      	movs	r2, #1
 80021f2:	2102      	movs	r1, #2
 80021f4:	4819      	ldr	r0, [pc, #100]	; (800225c <Principal_Verify_LEDs+0xc0>)
 80021f6:	f006 fbdf 	bl	80089b8 <HAL_GPIO_WritePin>
 80021fa:	e004      	b.n	8002206 <Principal_Verify_LEDs+0x6a>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2102      	movs	r1, #2
 8002200:	4816      	ldr	r0, [pc, #88]	; (800225c <Principal_Verify_LEDs+0xc0>)
 8002202:	f006 fbd9 	bl	80089b8 <HAL_GPIO_WritePin>

	if((verifyCAN & 1) == 1)
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <Principal_Verify_LEDs+0xc8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <Principal_Verify_LEDs+0x82>
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_SET);
 8002212:	2201      	movs	r2, #1
 8002214:	2104      	movs	r1, #4
 8002216:	4811      	ldr	r0, [pc, #68]	; (800225c <Principal_Verify_LEDs+0xc0>)
 8002218:	f006 fbce 	bl	80089b8 <HAL_GPIO_WritePin>
 800221c:	e004      	b.n	8002228 <Principal_Verify_LEDs+0x8c>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 800221e:	2200      	movs	r2, #0
 8002220:	2104      	movs	r1, #4
 8002222:	480e      	ldr	r0, [pc, #56]	; (800225c <Principal_Verify_LEDs+0xc0>)
 8002224:	f006 fbc8 	bl	80089b8 <HAL_GPIO_WritePin>

	if((verifyCAN & 2) == 2)
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <Principal_Verify_LEDs+0xc8>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <Principal_Verify_LEDs+0xa4>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_SET);
 8002234:	2201      	movs	r2, #1
 8002236:	2108      	movs	r1, #8
 8002238:	4808      	ldr	r0, [pc, #32]	; (800225c <Principal_Verify_LEDs+0xc0>)
 800223a:	f006 fbbd 	bl	80089b8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);

	return;
 800223e:	e005      	b.n	800224c <Principal_Verify_LEDs+0xb0>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 8002240:	2200      	movs	r2, #0
 8002242:	2108      	movs	r1, #8
 8002244:	4805      	ldr	r0, [pc, #20]	; (800225c <Principal_Verify_LEDs+0xc0>)
 8002246:	f006 fbb7 	bl	80089b8 <HAL_GPIO_WritePin>
	return;
 800224a:	bf00      	nop
}
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000678a 	.word	0x2000678a
 8002258:	20000578 	.word	0x20000578
 800225c:	40020800 	.word	0x40020800
 8002260:	200066fe 	.word	0x200066fe
 8002264:	20006788 	.word	0x20006788

08002268 <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	; 0x38
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
 8002274:	2300      	movs	r3, #0
 8002276:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 8002278:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 800227e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002288:	2301      	movs	r3, #1
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 800228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228e:	0b5b      	lsrs	r3, r3, #13
 8002290:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	b29b      	uxth	r3, r3
 8002298:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	0b5b      	lsrs	r3, r3, #13
 800229e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 80022b4:	230e      	movs	r3, #14
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f004 ff5c 	bl	800717c <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <Principal_CAN_Start+0xe0>)
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <Principal_CAN_Start+0xe4>)
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80022d0:	2301      	movs	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80022d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d6:	0b5b      	lsrs	r3, r3, #13
 80022d8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	b29b      	uxth	r3, r3
 80022e0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	0b5b      	lsrs	r3, r3, #13
 80022e6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 80022fc:	230f      	movs	r3, #15
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8002300:	f107 0308 	add.w	r3, r7, #8
 8002304:	4619      	mov	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f004 ff38 	bl	800717c <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT_Power_ECU, 2, CAN_RX_FIFO0);
 800230c:	2300      	movs	r3, #0
 800230e:	2202      	movs	r2, #2
 8002310:	f240 2181 	movw	r1, #641	; 0x281
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7fe f94d 	bl	80005b4 <FT_CAN_FilterConfig>
	FT_CAN_FilterConfig(hcan, FT_WBO2_Nano, 3, CAN_RX_FIFO0);
 800231a:	2300      	movs	r3, #0
 800231c:	2203      	movs	r2, #3
 800231e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe f946 	bl	80005b4 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 4, CAN_RX_FIFO0);
 8002328:	2200      	movs	r2, #0
 800232a:	2104      	movs	r1, #4
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff fe99 	bl	8002064 <PDM_CAN_FilterConfig>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002332:	2102      	movs	r1, #2
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f005 fa67 	bl	8007808 <HAL_CAN_ActivateNotification>

	HAL_CAN_Start(hcan);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f004 fffe 	bl	800733c <HAL_CAN_Start>
}
 8002340:	bf00      	nop
 8002342:	3738      	adds	r7, #56	; 0x38
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	1e300000 	.word	0x1e300000
 800234c:	1ff80000 	.word	0x1ff80000

08002350 <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	2b07      	cmp	r3, #7
 8002360:	d832      	bhi.n	80023c8 <Principal_Transmit_Msg+0x78>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <Principal_Transmit_Msg+0x18>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	08002389 	.word	0x08002389
 800236c:	08002391 	.word	0x08002391
 8002370:	08002399 	.word	0x08002399
 8002374:	080023a9 	.word	0x080023a9
 8002378:	080023a1 	.word	0x080023a1
 800237c:	080023b1 	.word	0x080023b1
 8002380:	080023b9 	.word	0x080023b9
 8002384:	080023c1 	.word	0x080023c1
	{
		case ANALOG_1_4:
			Tx_Analog_1_4(hcan);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f821 	bl	80023d0 <Tx_Analog_1_4>
			break;
 800238e:	e01c      	b.n	80023ca <Principal_Transmit_Msg+0x7a>

		case ANALOG_5_8:
			Tx_Analog_5_8(hcan);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f8cf 	bl	8002534 <Tx_Analog_5_8>
			break;
 8002396:	e018      	b.n	80023ca <Principal_Transmit_Msg+0x7a>

		case ANALOG_9_12:
			Tx_Analog_9_12(hcan);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f97d 	bl	8002698 <Tx_Analog_9_12>
			break;
 800239e:	e014      	b.n	80023ca <Principal_Transmit_Msg+0x7a>

		case VERIFY_MSG:
			Tx_Verify(hcan);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 facf 	bl	8002944 <Tx_Verify>
			break;
 80023a6:	e010      	b.n	80023ca <Principal_Transmit_Msg+0x7a>

		case RTC_MSG:
			Tx_RTC(hcan);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fa2f 	bl	800280c <Tx_RTC>
			break;
 80023ae:	e00c      	b.n	80023ca <Principal_Transmit_Msg+0x7a>

		case BEACON_MSG:
			Tx_Beacon(hcan);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 ffd3 	bl	800335c <Tx_Beacon>
			break;
 80023b6:	e008      	b.n	80023ca <Principal_Transmit_Msg+0x7a>

		case ECU_SAVE:
			Save_ECU(hcan);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f001 f881 	bl	80034c0 <Save_ECU>
			break;
 80023be:	e004      	b.n	80023ca <Principal_Transmit_Msg+0x7a>

		case PDM_SAVE:
			Save_PDM(hcan);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f001 f9e7 	bl	8003794 <Save_PDM>
			break;
 80023c6:	e000      	b.n	80023ca <Principal_Transmit_Msg+0x7a>

		default:
			return;
 80023c8:	bf00      	nop
	}
}
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x000f) == 0x0000)
 80023d8:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <Tx_Analog_1_4+0x138>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d103      	bne.n	80023ec <Tx_Analog_1_4+0x1c>
	{
		accCAN[ANALOG_1_4] = 0;
 80023e4:	4b49      	ldr	r3, [pc, #292]	; (800250c <Tx_Analog_1_4+0x13c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
		return;
 80023ea:	e089      	b.n	8002500 <Tx_Analog_1_4+0x130>
	}

	txHeader.IDE = CAN_ID_STD;
 80023ec:	4b48      	ldr	r3, [pc, #288]	; (8002510 <Tx_Analog_1_4+0x140>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <Tx_Analog_1_4+0x140>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80023f8:	4b45      	ldr	r3, [pc, #276]	; (8002510 <Tx_Analog_1_4+0x140>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_1_4;
 80023fe:	4b44      	ldr	r3, [pc, #272]	; (8002510 <Tx_Analog_1_4+0x140>)
 8002400:	f240 5215 	movw	r2, #1301	; 0x515
 8002404:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002406:	4b42      	ldr	r3, [pc, #264]	; (8002510 <Tx_Analog_1_4+0x140>)
 8002408:	2208      	movs	r2, #8
 800240a:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[0] >> 8;
 800240c:	4b41      	ldr	r3, [pc, #260]	; (8002514 <Tx_Analog_1_4+0x144>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	b29b      	uxth	r3, r3
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b40      	ldr	r3, [pc, #256]	; (8002518 <Tx_Analog_1_4+0x148>)
 8002418:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[0] & 0xff;
 800241a:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <Tx_Analog_1_4+0x144>)
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <Tx_Analog_1_4+0x148>)
 8002422:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[1] >> 8;
 8002424:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <Tx_Analog_1_4+0x144>)
 8002426:	885b      	ldrh	r3, [r3, #2]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	b29b      	uxth	r3, r3
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <Tx_Analog_1_4+0x148>)
 8002430:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[1] & 0xff;
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <Tx_Analog_1_4+0x144>)
 8002434:	885b      	ldrh	r3, [r3, #2]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b37      	ldr	r3, [pc, #220]	; (8002518 <Tx_Analog_1_4+0x148>)
 800243a:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[2] >> 8;
 800243c:	4b35      	ldr	r3, [pc, #212]	; (8002514 <Tx_Analog_1_4+0x144>)
 800243e:	889b      	ldrh	r3, [r3, #4]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	b29b      	uxth	r3, r3
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b34      	ldr	r3, [pc, #208]	; (8002518 <Tx_Analog_1_4+0x148>)
 8002448:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[2] & 0xff;
 800244a:	4b32      	ldr	r3, [pc, #200]	; (8002514 <Tx_Analog_1_4+0x144>)
 800244c:	889b      	ldrh	r3, [r3, #4]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b31      	ldr	r3, [pc, #196]	; (8002518 <Tx_Analog_1_4+0x148>)
 8002452:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[3] >> 8;
 8002454:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <Tx_Analog_1_4+0x144>)
 8002456:	88db      	ldrh	r3, [r3, #6]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b29b      	uxth	r3, r3
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <Tx_Analog_1_4+0x148>)
 8002460:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[3] & 0xff;
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <Tx_Analog_1_4+0x144>)
 8002464:	88db      	ldrh	r3, [r3, #6]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <Tx_Analog_1_4+0x148>)
 800246a:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <Tx_Analog_1_4+0x14c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d10c      	bne.n	800248e <Tx_Analog_1_4+0xbe>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8002474:	4b26      	ldr	r3, [pc, #152]	; (8002510 <Tx_Analog_1_4+0x140>)
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <Tx_Analog_1_4+0x140>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <Tx_Analog_1_4+0x150>)
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <Tx_Analog_1_4+0x154>)
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <Tx_Analog_1_4+0x148>)
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f003 f9cf 	bl	800582c <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_1_4] >= perCAN[ANALOG_1_4]) && (perCAN[ANALOG_1_4] != MSG_DISABLED))
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <Tx_Analog_1_4+0x13c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a25      	ldr	r2, [pc, #148]	; (8002528 <Tx_Analog_1_4+0x158>)
 8002494:	8812      	ldrh	r2, [r2, #0]
 8002496:	4293      	cmp	r3, r2
 8002498:	d331      	bcc.n	80024fe <Tx_Analog_1_4+0x12e>
 800249a:	4b23      	ldr	r3, [pc, #140]	; (8002528 <Tx_Analog_1_4+0x158>)
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d02d      	beq.n	80024fe <Tx_Analog_1_4+0x12e>
	{
		accCAN[ANALOG_1_4] -= perCAN[ANALOG_1_4];
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <Tx_Analog_1_4+0x13c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a20      	ldr	r2, [pc, #128]	; (8002528 <Tx_Analog_1_4+0x158>)
 80024a8:	8812      	ldrh	r2, [r2, #0]
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	4a17      	ldr	r2, [pc, #92]	; (800250c <Tx_Analog_1_4+0x13c>)
 80024ae:	6013      	str	r3, [r2, #0]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <Tx_Analog_1_4+0x15c>)
 80024b2:	4a19      	ldr	r2, [pc, #100]	; (8002518 <Tx_Analog_1_4+0x148>)
 80024b4:	4916      	ldr	r1, [pc, #88]	; (8002510 <Tx_Analog_1_4+0x140>)
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f004 ff84 	bl	80073c4 <HAL_CAN_AddTxMessage>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d107      	bne.n	80024d2 <Tx_Analog_1_4+0x102>
			verifyCAN |= 1;
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <Tx_Analog_1_4+0x160>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <Tx_Analog_1_4+0x160>)
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	e006      	b.n	80024e0 <Tx_Analog_1_4+0x110>
		else
			verifyCAN &= 0x02;
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <Tx_Analog_1_4+0x160>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <Tx_Analog_1_4+0x160>)
 80024de:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e002      	b.n	80024ec <Tx_Analog_1_4+0x11c>
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f005 f844 	bl	800757a <HAL_CAN_GetTxMailboxesFreeLevel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d002      	beq.n	80024fe <Tx_Analog_1_4+0x12e>
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d9f3      	bls.n	80024e6 <Tx_Analog_1_4+0x116>
	}

	return;
 80024fe:	bf00      	nop
}
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000678a 	.word	0x2000678a
 800250c:	20006748 	.word	0x20006748
 8002510:	2000055c 	.word	0x2000055c
 8002514:	20000578 	.word	0x20000578
 8002518:	20000534 	.word	0x20000534
 800251c:	200066fe 	.word	0x200066fe
 8002520:	200056a8 	.word	0x200056a8
 8002524:	20004640 	.word	0x20004640
 8002528:	2000671c 	.word	0x2000671c
 800252c:	2000053c 	.word	0x2000053c
 8002530:	20006788 	.word	0x20006788

08002534 <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af02      	add	r7, sp, #8
 800253a:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x00f0) == 0x0000)
 800253c:	4b4b      	ldr	r3, [pc, #300]	; (800266c <Tx_Analog_5_8+0x138>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d103      	bne.n	8002550 <Tx_Analog_5_8+0x1c>
	{
		accCAN[ANALOG_5_8] = 0;
 8002548:	4b49      	ldr	r3, [pc, #292]	; (8002670 <Tx_Analog_5_8+0x13c>)
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
		return;
 800254e:	e089      	b.n	8002664 <Tx_Analog_5_8+0x130>
	}

	txHeader.IDE = CAN_ID_STD;
 8002550:	4b48      	ldr	r3, [pc, #288]	; (8002674 <Tx_Analog_5_8+0x140>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <Tx_Analog_5_8+0x140>)
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 800255c:	4b45      	ldr	r3, [pc, #276]	; (8002674 <Tx_Analog_5_8+0x140>)
 800255e:	2200      	movs	r2, #0
 8002560:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_5_8;
 8002562:	4b44      	ldr	r3, [pc, #272]	; (8002674 <Tx_Analog_5_8+0x140>)
 8002564:	f240 5216 	movw	r2, #1302	; 0x516
 8002568:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800256a:	4b42      	ldr	r3, [pc, #264]	; (8002674 <Tx_Analog_5_8+0x140>)
 800256c:	2208      	movs	r2, #8
 800256e:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[4] >> 8;
 8002570:	4b41      	ldr	r3, [pc, #260]	; (8002678 <Tx_Analog_5_8+0x144>)
 8002572:	891b      	ldrh	r3, [r3, #8]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	b29b      	uxth	r3, r3
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b40      	ldr	r3, [pc, #256]	; (800267c <Tx_Analog_5_8+0x148>)
 800257c:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[4] & 0xff;
 800257e:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <Tx_Analog_5_8+0x144>)
 8002580:	891b      	ldrh	r3, [r3, #8]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b3d      	ldr	r3, [pc, #244]	; (800267c <Tx_Analog_5_8+0x148>)
 8002586:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[5] >> 8;
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <Tx_Analog_5_8+0x144>)
 800258a:	895b      	ldrh	r3, [r3, #10]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	b29b      	uxth	r3, r3
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <Tx_Analog_5_8+0x148>)
 8002594:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[5] & 0xff;
 8002596:	4b38      	ldr	r3, [pc, #224]	; (8002678 <Tx_Analog_5_8+0x144>)
 8002598:	895b      	ldrh	r3, [r3, #10]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b37      	ldr	r3, [pc, #220]	; (800267c <Tx_Analog_5_8+0x148>)
 800259e:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[6] >> 8;
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <Tx_Analog_5_8+0x144>)
 80025a2:	899b      	ldrh	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b34      	ldr	r3, [pc, #208]	; (800267c <Tx_Analog_5_8+0x148>)
 80025ac:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[6] & 0xff;
 80025ae:	4b32      	ldr	r3, [pc, #200]	; (8002678 <Tx_Analog_5_8+0x144>)
 80025b0:	899b      	ldrh	r3, [r3, #12]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b31      	ldr	r3, [pc, #196]	; (800267c <Tx_Analog_5_8+0x148>)
 80025b6:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[7] >> 8;
 80025b8:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <Tx_Analog_5_8+0x144>)
 80025ba:	89db      	ldrh	r3, [r3, #14]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	b29b      	uxth	r3, r3
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b2e      	ldr	r3, [pc, #184]	; (800267c <Tx_Analog_5_8+0x148>)
 80025c4:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[7] & 0xff;
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <Tx_Analog_5_8+0x144>)
 80025c8:	89db      	ldrh	r3, [r3, #14]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <Tx_Analog_5_8+0x148>)
 80025ce:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <Tx_Analog_5_8+0x14c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d10c      	bne.n	80025f2 <Tx_Analog_5_8+0xbe>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 80025d8:	4b26      	ldr	r3, [pc, #152]	; (8002674 <Tx_Analog_5_8+0x140>)
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <Tx_Analog_5_8+0x140>)
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <Tx_Analog_5_8+0x150>)
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <Tx_Analog_5_8+0x154>)
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <Tx_Analog_5_8+0x148>)
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f003 f91d 	bl	800582c <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_5_8] >= perCAN[ANALOG_5_8]) && (perCAN[ANALOG_5_8] != MSG_DISABLED))
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <Tx_Analog_5_8+0x13c>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <Tx_Analog_5_8+0x158>)
 80025f8:	8852      	ldrh	r2, [r2, #2]
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d331      	bcc.n	8002662 <Tx_Analog_5_8+0x12e>
 80025fe:	4b23      	ldr	r3, [pc, #140]	; (800268c <Tx_Analog_5_8+0x158>)
 8002600:	885b      	ldrh	r3, [r3, #2]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d02d      	beq.n	8002662 <Tx_Analog_5_8+0x12e>
	{
		accCAN[ANALOG_5_8] -= perCAN[ANALOG_5_8];
 8002606:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <Tx_Analog_5_8+0x13c>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a20      	ldr	r2, [pc, #128]	; (800268c <Tx_Analog_5_8+0x158>)
 800260c:	8852      	ldrh	r2, [r2, #2]
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	4a17      	ldr	r2, [pc, #92]	; (8002670 <Tx_Analog_5_8+0x13c>)
 8002612:	6053      	str	r3, [r2, #4]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <Tx_Analog_5_8+0x15c>)
 8002616:	4a19      	ldr	r2, [pc, #100]	; (800267c <Tx_Analog_5_8+0x148>)
 8002618:	4916      	ldr	r1, [pc, #88]	; (8002674 <Tx_Analog_5_8+0x140>)
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f004 fed2 	bl	80073c4 <HAL_CAN_AddTxMessage>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d107      	bne.n	8002636 <Tx_Analog_5_8+0x102>
			verifyCAN |= 1;
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <Tx_Analog_5_8+0x160>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <Tx_Analog_5_8+0x160>)
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e006      	b.n	8002644 <Tx_Analog_5_8+0x110>
		else
			verifyCAN &= 0x02;
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <Tx_Analog_5_8+0x160>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <Tx_Analog_5_8+0x160>)
 8002642:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	e002      	b.n	8002650 <Tx_Analog_5_8+0x11c>
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	3301      	adds	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f004 ff92 	bl	800757a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b03      	cmp	r3, #3
 800265a:	d002      	beq.n	8002662 <Tx_Analog_5_8+0x12e>
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d9f3      	bls.n	800264a <Tx_Analog_5_8+0x116>
	}

	return;
 8002662:	bf00      	nop
}
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2000678a 	.word	0x2000678a
 8002670:	20006748 	.word	0x20006748
 8002674:	2000055c 	.word	0x2000055c
 8002678:	20000578 	.word	0x20000578
 800267c:	20000534 	.word	0x20000534
 8002680:	200066fe 	.word	0x200066fe
 8002684:	200056a8 	.word	0x200056a8
 8002688:	20004640 	.word	0x20004640
 800268c:	2000671c 	.word	0x2000671c
 8002690:	2000053c 	.word	0x2000053c
 8002694:	20006788 	.word	0x20006788

08002698 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af02      	add	r7, sp, #8
 800269e:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x0f00) == 0x0000)
 80026a0:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <Tx_Analog_9_12+0x148>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d103      	bne.n	80026b4 <Tx_Analog_9_12+0x1c>
	{
		accCAN[ANALOG_9_12] = 0;
 80026ac:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <Tx_Analog_9_12+0x14c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
		return;
 80026b2:	e092      	b.n	80027da <Tx_Analog_9_12+0x142>
	}

	txHeader.IDE = CAN_ID_STD;
 80026b4:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <Tx_Analog_9_12+0x150>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80026ba:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <Tx_Analog_9_12+0x150>)
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80026c0:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <Tx_Analog_9_12+0x150>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_9_12;
 80026c6:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <Tx_Analog_9_12+0x150>)
 80026c8:	f240 5217 	movw	r2, #1303	; 0x517
 80026cc:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80026ce:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <Tx_Analog_9_12+0x150>)
 80026d0:	2208      	movs	r2, #8
 80026d2:	611a      	str	r2, [r3, #16]

	if((verifyADC & 0x0f00) == 0)
 80026d4:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <Tx_Analog_9_12+0x148>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d079      	beq.n	80027d4 <Tx_Analog_9_12+0x13c>
		return;

	txData[0] = adcBuffer[8] >> 8;
 80026e0:	4b42      	ldr	r3, [pc, #264]	; (80027ec <Tx_Analog_9_12+0x154>)
 80026e2:	8a1b      	ldrh	r3, [r3, #16]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <Tx_Analog_9_12+0x158>)
 80026ec:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[8] & 0xff;
 80026ee:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <Tx_Analog_9_12+0x154>)
 80026f0:	8a1b      	ldrh	r3, [r3, #16]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <Tx_Analog_9_12+0x158>)
 80026f6:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[9] >> 8;
 80026f8:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <Tx_Analog_9_12+0x154>)
 80026fa:	8a5b      	ldrh	r3, [r3, #18]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <Tx_Analog_9_12+0x158>)
 8002704:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[9] & 0xff;
 8002706:	4b39      	ldr	r3, [pc, #228]	; (80027ec <Tx_Analog_9_12+0x154>)
 8002708:	8a5b      	ldrh	r3, [r3, #18]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <Tx_Analog_9_12+0x158>)
 800270e:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[10] >> 8;
 8002710:	4b36      	ldr	r3, [pc, #216]	; (80027ec <Tx_Analog_9_12+0x154>)
 8002712:	8a9b      	ldrh	r3, [r3, #20]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	b29b      	uxth	r3, r3
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4b35      	ldr	r3, [pc, #212]	; (80027f0 <Tx_Analog_9_12+0x158>)
 800271c:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[10] & 0xff;
 800271e:	4b33      	ldr	r3, [pc, #204]	; (80027ec <Tx_Analog_9_12+0x154>)
 8002720:	8a9b      	ldrh	r3, [r3, #20]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <Tx_Analog_9_12+0x158>)
 8002726:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[11] >> 8;
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <Tx_Analog_9_12+0x154>)
 800272a:	8adb      	ldrh	r3, [r3, #22]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <Tx_Analog_9_12+0x158>)
 8002734:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[11] & 0xff;
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <Tx_Analog_9_12+0x154>)
 8002738:	8adb      	ldrh	r3, [r3, #22]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <Tx_Analog_9_12+0x158>)
 800273e:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002740:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <Tx_Analog_9_12+0x15c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10c      	bne.n	8002762 <Tx_Analog_9_12+0xca>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <Tx_Analog_9_12+0x150>)
 800274a:	6819      	ldr	r1, [r3, #0]
 800274c:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <Tx_Analog_9_12+0x150>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <Tx_Analog_9_12+0x160>)
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <Tx_Analog_9_12+0x164>)
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <Tx_Analog_9_12+0x158>)
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f003 f865 	bl	800582c <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_9_12] >= perCAN[ANALOG_9_12]) && (perCAN[ANALOG_9_12] != MSG_DISABLED))
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <Tx_Analog_9_12+0x14c>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4a26      	ldr	r2, [pc, #152]	; (8002800 <Tx_Analog_9_12+0x168>)
 8002768:	8892      	ldrh	r2, [r2, #4]
 800276a:	4293      	cmp	r3, r2
 800276c:	d334      	bcc.n	80027d8 <Tx_Analog_9_12+0x140>
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <Tx_Analog_9_12+0x168>)
 8002770:	889b      	ldrh	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d030      	beq.n	80027d8 <Tx_Analog_9_12+0x140>
	{
		accCAN[ANALOG_9_12] -= perCAN[ANALOG_9_12];
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <Tx_Analog_9_12+0x14c>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4a21      	ldr	r2, [pc, #132]	; (8002800 <Tx_Analog_9_12+0x168>)
 800277c:	8892      	ldrh	r2, [r2, #4]
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	4a18      	ldr	r2, [pc, #96]	; (80027e4 <Tx_Analog_9_12+0x14c>)
 8002782:	6093      	str	r3, [r2, #8]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <Tx_Analog_9_12+0x16c>)
 8002786:	4a1a      	ldr	r2, [pc, #104]	; (80027f0 <Tx_Analog_9_12+0x158>)
 8002788:	4917      	ldr	r1, [pc, #92]	; (80027e8 <Tx_Analog_9_12+0x150>)
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f004 fe1a 	bl	80073c4 <HAL_CAN_AddTxMessage>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <Tx_Analog_9_12+0x10e>
			verifyCAN |= 1;
 8002796:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <Tx_Analog_9_12+0x170>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <Tx_Analog_9_12+0x170>)
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e006      	b.n	80027b4 <Tx_Analog_9_12+0x11c>
		else
			verifyCAN &= 0x02;
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <Tx_Analog_9_12+0x170>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	4b15      	ldr	r3, [pc, #84]	; (8002808 <Tx_Analog_9_12+0x170>)
 80027b2:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e002      	b.n	80027c0 <Tx_Analog_9_12+0x128>
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	3301      	adds	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f004 feda 	bl	800757a <HAL_CAN_GetTxMailboxesFreeLevel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d005      	beq.n	80027d8 <Tx_Analog_9_12+0x140>
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d9f3      	bls.n	80027ba <Tx_Analog_9_12+0x122>
	}

	return;
 80027d2:	e001      	b.n	80027d8 <Tx_Analog_9_12+0x140>
		return;
 80027d4:	bf00      	nop
 80027d6:	e000      	b.n	80027da <Tx_Analog_9_12+0x142>
	return;
 80027d8:	bf00      	nop
}
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	2000678a 	.word	0x2000678a
 80027e4:	20006748 	.word	0x20006748
 80027e8:	2000055c 	.word	0x2000055c
 80027ec:	20000578 	.word	0x20000578
 80027f0:	20000534 	.word	0x20000534
 80027f4:	200066fe 	.word	0x200066fe
 80027f8:	200056a8 	.word	0x200056a8
 80027fc:	20004640 	.word	0x20004640
 8002800:	2000671c 	.word	0x2000671c
 8002804:	2000053c 	.word	0x2000053c
 8002808:	20006788 	.word	0x20006788

0800280c <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af02      	add	r7, sp, #8
 8002812:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 8002814:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <Tx_RTC+0x108>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <Tx_RTC+0x108>)
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002820:	4b3c      	ldr	r3, [pc, #240]	; (8002914 <Tx_RTC+0x108>)
 8002822:	2200      	movs	r2, #0
 8002824:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + RTC_MSG;
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <Tx_RTC+0x108>)
 8002828:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 800282c:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 6;
 800282e:	4b39      	ldr	r3, [pc, #228]	; (8002914 <Tx_RTC+0x108>)
 8002830:	2206      	movs	r2, #6
 8002832:	611a      	str	r2, [r3, #16]

	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8002834:	2200      	movs	r2, #0
 8002836:	4938      	ldr	r1, [pc, #224]	; (8002918 <Tx_RTC+0x10c>)
 8002838:	4838      	ldr	r0, [pc, #224]	; (800291c <Tx_RTC+0x110>)
 800283a:	f009 faa9 	bl	800bd90 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800283e:	2200      	movs	r2, #0
 8002840:	4937      	ldr	r1, [pc, #220]	; (8002920 <Tx_RTC+0x114>)
 8002842:	4836      	ldr	r0, [pc, #216]	; (800291c <Tx_RTC+0x110>)
 8002844:	f009 fb86 	bl	800bf54 <HAL_RTC_GetDate>

	txData[0] = rtcDate.Year;
 8002848:	4b35      	ldr	r3, [pc, #212]	; (8002920 <Tx_RTC+0x114>)
 800284a:	78da      	ldrb	r2, [r3, #3]
 800284c:	4b35      	ldr	r3, [pc, #212]	; (8002924 <Tx_RTC+0x118>)
 800284e:	701a      	strb	r2, [r3, #0]
	txData[1] = rtcDate.Month;
 8002850:	4b33      	ldr	r3, [pc, #204]	; (8002920 <Tx_RTC+0x114>)
 8002852:	785a      	ldrb	r2, [r3, #1]
 8002854:	4b33      	ldr	r3, [pc, #204]	; (8002924 <Tx_RTC+0x118>)
 8002856:	705a      	strb	r2, [r3, #1]
	txData[2] = rtcDate.Date;
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <Tx_RTC+0x114>)
 800285a:	789a      	ldrb	r2, [r3, #2]
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <Tx_RTC+0x118>)
 800285e:	709a      	strb	r2, [r3, #2]
	txData[3] = rtcTime.Hours;
 8002860:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <Tx_RTC+0x10c>)
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <Tx_RTC+0x118>)
 8002866:	70da      	strb	r2, [r3, #3]
	txData[4] = rtcTime.Minutes;
 8002868:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <Tx_RTC+0x10c>)
 800286a:	785a      	ldrb	r2, [r3, #1]
 800286c:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <Tx_RTC+0x118>)
 800286e:	711a      	strb	r2, [r3, #4]
	txData[5] = rtcTime.Seconds;
 8002870:	4b29      	ldr	r3, [pc, #164]	; (8002918 <Tx_RTC+0x10c>)
 8002872:	789a      	ldrb	r2, [r3, #2]
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <Tx_RTC+0x118>)
 8002876:	715a      	strb	r2, [r3, #5]


	if(flagDatalogger == DL_SAVE)
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <Tx_RTC+0x11c>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d10c      	bne.n	800289a <Tx_RTC+0x8e>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <Tx_RTC+0x108>)
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	4b23      	ldr	r3, [pc, #140]	; (8002914 <Tx_RTC+0x108>)
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4b28      	ldr	r3, [pc, #160]	; (800292c <Tx_RTC+0x120>)
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	4b28      	ldr	r3, [pc, #160]	; (8002930 <Tx_RTC+0x124>)
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <Tx_RTC+0x118>)
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f002 ffc9 	bl	800582c <Principal_Datalogger_Save_Buffer>

	if((accCAN[RTC_MSG] >= perCAN[RTC_MSG]) && (perCAN[RTC_MSG] != MSG_DISABLED))
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <Tx_RTC+0x128>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4a26      	ldr	r2, [pc, #152]	; (8002938 <Tx_RTC+0x12c>)
 80028a0:	88d2      	ldrh	r2, [r2, #6]
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d332      	bcc.n	800290c <Tx_RTC+0x100>
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <Tx_RTC+0x12c>)
 80028a8:	88db      	ldrh	r3, [r3, #6]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02e      	beq.n	800290c <Tx_RTC+0x100>
	{
		accCAN[RTC_MSG] -= perCAN[RTC_MSG];
 80028ae:	4b21      	ldr	r3, [pc, #132]	; (8002934 <Tx_RTC+0x128>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4a21      	ldr	r2, [pc, #132]	; (8002938 <Tx_RTC+0x12c>)
 80028b4:	88d2      	ldrh	r2, [r2, #6]
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <Tx_RTC+0x128>)
 80028ba:	60d3      	str	r3, [r2, #12]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80028bc:	4b1f      	ldr	r3, [pc, #124]	; (800293c <Tx_RTC+0x130>)
 80028be:	4a19      	ldr	r2, [pc, #100]	; (8002924 <Tx_RTC+0x118>)
 80028c0:	4914      	ldr	r1, [pc, #80]	; (8002914 <Tx_RTC+0x108>)
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f004 fd7e 	bl	80073c4 <HAL_CAN_AddTxMessage>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d107      	bne.n	80028de <Tx_RTC+0xd2>
			verifyCAN |= 1;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <Tx_RTC+0x134>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <Tx_RTC+0x134>)
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e006      	b.n	80028ec <Tx_RTC+0xe0>
		else
			verifyCAN &= 0x02;
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <Tx_RTC+0x134>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <Tx_RTC+0x134>)
 80028ea:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]
 80028f0:	e002      	b.n	80028f8 <Tx_RTC+0xec>
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	3301      	adds	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f004 fe3e 	bl	800757a <HAL_CAN_GetTxMailboxesFreeLevel>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b03      	cmp	r3, #3
 8002902:	d003      	beq.n	800290c <Tx_RTC+0x100>
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d9f3      	bls.n	80028f2 <Tx_RTC+0xe6>
	}

	return;
 800290a:	bf00      	nop
 800290c:	bf00      	nop
}
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	2000055c 	.word	0x2000055c
 8002918:	20006708 	.word	0x20006708
 800291c:	20000380 	.word	0x20000380
 8002920:	20006704 	.word	0x20006704
 8002924:	20000534 	.word	0x20000534
 8002928:	200066fe 	.word	0x200066fe
 800292c:	200056a8 	.word	0x200056a8
 8002930:	20004640 	.word	0x20004640
 8002934:	20006748 	.word	0x20006748
 8002938:	2000671c 	.word	0x2000671c
 800293c:	2000053c 	.word	0x2000053c
 8002940:	20006788 	.word	0x20006788

08002944 <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af02      	add	r7, sp, #8
 800294a:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 800294c:	4bc8      	ldr	r3, [pc, #800]	; (8002c70 <Tx_Verify+0x32c>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002952:	4bc7      	ldr	r3, [pc, #796]	; (8002c70 <Tx_Verify+0x32c>)
 8002954:	2200      	movs	r2, #0
 8002956:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002958:	4bc5      	ldr	r3, [pc, #788]	; (8002c70 <Tx_Verify+0x32c>)
 800295a:	2200      	movs	r2, #0
 800295c:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + VERIFY_MSG;
 800295e:	4bc4      	ldr	r3, [pc, #784]	; (8002c70 <Tx_Verify+0x32c>)
 8002960:	f240 5219 	movw	r2, #1305	; 0x519
 8002964:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002966:	4bc2      	ldr	r3, [pc, #776]	; (8002c70 <Tx_Verify+0x32c>)
 8002968:	2208      	movs	r2, #8
 800296a:	611a      	str	r2, [r3, #16]

	txData[0] = verifyADC & 0xff;
 800296c:	4bc1      	ldr	r3, [pc, #772]	; (8002c74 <Tx_Verify+0x330>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4bc1      	ldr	r3, [pc, #772]	; (8002c78 <Tx_Verify+0x334>)
 8002974:	701a      	strb	r2, [r3, #0]
	txData[1] = (verifyADC >> 8) & 0x0f;
 8002976:	4bbf      	ldr	r3, [pc, #764]	; (8002c74 <Tx_Verify+0x330>)
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	b29b      	uxth	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4bbc      	ldr	r3, [pc, #752]	; (8002c78 <Tx_Verify+0x334>)
 8002988:	705a      	strb	r2, [r3, #1]

	if(flagDatalogger == DL_SAVE)
 800298a:	4bbc      	ldr	r3, [pc, #752]	; (8002c7c <Tx_Verify+0x338>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d10d      	bne.n	80029ae <Tx_Verify+0x6a>
	{
		txData[1] |= (1 << 4);
 8002992:	4bb9      	ldr	r3, [pc, #740]	; (8002c78 <Tx_Verify+0x334>)
 8002994:	785b      	ldrb	r3, [r3, #1]
 8002996:	f043 0310 	orr.w	r3, r3, #16
 800299a:	b2da      	uxtb	r2, r3
 800299c:	4bb6      	ldr	r3, [pc, #728]	; (8002c78 <Tx_Verify+0x334>)
 800299e:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_RESET);
 80029a0:	2200      	movs	r2, #0
 80029a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029a6:	48b6      	ldr	r0, [pc, #728]	; (8002c80 <Tx_Verify+0x33c>)
 80029a8:	f006 f806 	bl	80089b8 <HAL_GPIO_WritePin>
 80029ac:	e005      	b.n	80029ba <Tx_Verify+0x76>
	}
	else
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_SET);
 80029ae:	2201      	movs	r2, #1
 80029b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029b4:	48b2      	ldr	r0, [pc, #712]	; (8002c80 <Tx_Verify+0x33c>)
 80029b6:	f005 ffff 	bl	80089b8 <HAL_GPIO_WritePin>

	if(flagRTC == RTC_OK)
 80029ba:	4bb2      	ldr	r3, [pc, #712]	; (8002c84 <Tx_Verify+0x340>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <Tx_Verify+0x8c>
		txData[1] |= (1 << 5);
 80029c2:	4bad      	ldr	r3, [pc, #692]	; (8002c78 <Tx_Verify+0x334>)
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	f043 0320 	orr.w	r3, r3, #32
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4baa      	ldr	r3, [pc, #680]	; (8002c78 <Tx_Verify+0x334>)
 80029ce:	705a      	strb	r2, [r3, #1]

	__FREQ_TO_BUFFER(txData[2], perMsg[ANALOG_1_4]);
 80029d0:	4bad      	ldr	r3, [pc, #692]	; (8002c88 <Tx_Verify+0x344>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029d8:	f000 8081 	beq.w	8002ade <Tx_Verify+0x19a>
 80029dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e0:	f300 80a9 	bgt.w	8002b36 <Tx_Verify+0x1f2>
 80029e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029e8:	d07d      	beq.n	8002ae6 <Tx_Verify+0x1a2>
 80029ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029ee:	f300 80a2 	bgt.w	8002b36 <Tx_Verify+0x1f2>
 80029f2:	2bc8      	cmp	r3, #200	; 0xc8
 80029f4:	d07b      	beq.n	8002aee <Tx_Verify+0x1aa>
 80029f6:	2bc8      	cmp	r3, #200	; 0xc8
 80029f8:	f300 809d 	bgt.w	8002b36 <Tx_Verify+0x1f2>
 80029fc:	2b32      	cmp	r3, #50	; 0x32
 80029fe:	dc6b      	bgt.n	8002ad8 <Tx_Verify+0x194>
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	f2c0 8098 	blt.w	8002b36 <Tx_Verify+0x1f2>
 8002a06:	3b02      	subs	r3, #2
 8002a08:	2b30      	cmp	r3, #48	; 0x30
 8002a0a:	f200 8094 	bhi.w	8002b36 <Tx_Verify+0x1f2>
 8002a0e:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <Tx_Verify+0xd0>)
 8002a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a14:	08002b2f 	.word	0x08002b2f
 8002a18:	08002b37 	.word	0x08002b37
 8002a1c:	08002b27 	.word	0x08002b27
 8002a20:	08002b1f 	.word	0x08002b1f
 8002a24:	08002b37 	.word	0x08002b37
 8002a28:	08002b37 	.word	0x08002b37
 8002a2c:	08002b37 	.word	0x08002b37
 8002a30:	08002b37 	.word	0x08002b37
 8002a34:	08002b17 	.word	0x08002b17
 8002a38:	08002b37 	.word	0x08002b37
 8002a3c:	08002b37 	.word	0x08002b37
 8002a40:	08002b37 	.word	0x08002b37
 8002a44:	08002b37 	.word	0x08002b37
 8002a48:	08002b37 	.word	0x08002b37
 8002a4c:	08002b37 	.word	0x08002b37
 8002a50:	08002b37 	.word	0x08002b37
 8002a54:	08002b37 	.word	0x08002b37
 8002a58:	08002b37 	.word	0x08002b37
 8002a5c:	08002b0f 	.word	0x08002b0f
 8002a60:	08002b37 	.word	0x08002b37
 8002a64:	08002b37 	.word	0x08002b37
 8002a68:	08002b37 	.word	0x08002b37
 8002a6c:	08002b37 	.word	0x08002b37
 8002a70:	08002b37 	.word	0x08002b37
 8002a74:	08002b37 	.word	0x08002b37
 8002a78:	08002b37 	.word	0x08002b37
 8002a7c:	08002b37 	.word	0x08002b37
 8002a80:	08002b37 	.word	0x08002b37
 8002a84:	08002b37 	.word	0x08002b37
 8002a88:	08002b37 	.word	0x08002b37
 8002a8c:	08002b37 	.word	0x08002b37
 8002a90:	08002b37 	.word	0x08002b37
 8002a94:	08002b37 	.word	0x08002b37
 8002a98:	08002b37 	.word	0x08002b37
 8002a9c:	08002b37 	.word	0x08002b37
 8002aa0:	08002b37 	.word	0x08002b37
 8002aa4:	08002b37 	.word	0x08002b37
 8002aa8:	08002b37 	.word	0x08002b37
 8002aac:	08002b07 	.word	0x08002b07
 8002ab0:	08002b37 	.word	0x08002b37
 8002ab4:	08002b37 	.word	0x08002b37
 8002ab8:	08002b37 	.word	0x08002b37
 8002abc:	08002b37 	.word	0x08002b37
 8002ac0:	08002b37 	.word	0x08002b37
 8002ac4:	08002b37 	.word	0x08002b37
 8002ac8:	08002b37 	.word	0x08002b37
 8002acc:	08002b37 	.word	0x08002b37
 8002ad0:	08002b37 	.word	0x08002b37
 8002ad4:	08002aff 	.word	0x08002aff
 8002ad8:	2b64      	cmp	r3, #100	; 0x64
 8002ada:	d00c      	beq.n	8002af6 <Tx_Verify+0x1b2>
 8002adc:	e02b      	b.n	8002b36 <Tx_Verify+0x1f2>
 8002ade:	4b66      	ldr	r3, [pc, #408]	; (8002c78 <Tx_Verify+0x334>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	709a      	strb	r2, [r3, #2]
 8002ae4:	e02a      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002ae6:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <Tx_Verify+0x334>)
 8002ae8:	2202      	movs	r2, #2
 8002aea:	709a      	strb	r2, [r3, #2]
 8002aec:	e026      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002aee:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <Tx_Verify+0x334>)
 8002af0:	2203      	movs	r2, #3
 8002af2:	709a      	strb	r2, [r3, #2]
 8002af4:	e022      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002af6:	4b60      	ldr	r3, [pc, #384]	; (8002c78 <Tx_Verify+0x334>)
 8002af8:	2204      	movs	r2, #4
 8002afa:	709a      	strb	r2, [r3, #2]
 8002afc:	e01e      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002afe:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <Tx_Verify+0x334>)
 8002b00:	2205      	movs	r2, #5
 8002b02:	709a      	strb	r2, [r3, #2]
 8002b04:	e01a      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <Tx_Verify+0x334>)
 8002b08:	2206      	movs	r2, #6
 8002b0a:	709a      	strb	r2, [r3, #2]
 8002b0c:	e016      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002b0e:	4b5a      	ldr	r3, [pc, #360]	; (8002c78 <Tx_Verify+0x334>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	709a      	strb	r2, [r3, #2]
 8002b14:	e012      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002b16:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <Tx_Verify+0x334>)
 8002b18:	2208      	movs	r2, #8
 8002b1a:	709a      	strb	r2, [r3, #2]
 8002b1c:	e00e      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002b1e:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <Tx_Verify+0x334>)
 8002b20:	2209      	movs	r2, #9
 8002b22:	709a      	strb	r2, [r3, #2]
 8002b24:	e00a      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002b26:	4b54      	ldr	r3, [pc, #336]	; (8002c78 <Tx_Verify+0x334>)
 8002b28:	220a      	movs	r2, #10
 8002b2a:	709a      	strb	r2, [r3, #2]
 8002b2c:	e006      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002b2e:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <Tx_Verify+0x334>)
 8002b30:	220b      	movs	r2, #11
 8002b32:	709a      	strb	r2, [r3, #2]
 8002b34:	e002      	b.n	8002b3c <Tx_Verify+0x1f8>
 8002b36:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <Tx_Verify+0x334>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	709a      	strb	r2, [r3, #2]
 8002b3c:	bf00      	nop
	__FREQ_TO_BUFFER(txData[3], perMsg[ANALOG_5_8]);
 8002b3e:	4b52      	ldr	r3, [pc, #328]	; (8002c88 <Tx_Verify+0x344>)
 8002b40:	885b      	ldrh	r3, [r3, #2]
 8002b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b46:	f000 8082 	beq.w	8002c4e <Tx_Verify+0x30a>
 8002b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4e:	f300 80b9 	bgt.w	8002cc4 <Tx_Verify+0x380>
 8002b52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b56:	d07e      	beq.n	8002c56 <Tx_Verify+0x312>
 8002b58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b5c:	f300 80b2 	bgt.w	8002cc4 <Tx_Verify+0x380>
 8002b60:	2bc8      	cmp	r3, #200	; 0xc8
 8002b62:	d07c      	beq.n	8002c5e <Tx_Verify+0x31a>
 8002b64:	2bc8      	cmp	r3, #200	; 0xc8
 8002b66:	f300 80ad 	bgt.w	8002cc4 <Tx_Verify+0x380>
 8002b6a:	2b32      	cmp	r3, #50	; 0x32
 8002b6c:	dc6c      	bgt.n	8002c48 <Tx_Verify+0x304>
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	f2c0 80a8 	blt.w	8002cc4 <Tx_Verify+0x380>
 8002b74:	3b02      	subs	r3, #2
 8002b76:	2b30      	cmp	r3, #48	; 0x30
 8002b78:	f200 80a4 	bhi.w	8002cc4 <Tx_Verify+0x380>
 8002b7c:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <Tx_Verify+0x240>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002cbd 	.word	0x08002cbd
 8002b88:	08002cc5 	.word	0x08002cc5
 8002b8c:	08002cb5 	.word	0x08002cb5
 8002b90:	08002cad 	.word	0x08002cad
 8002b94:	08002cc5 	.word	0x08002cc5
 8002b98:	08002cc5 	.word	0x08002cc5
 8002b9c:	08002cc5 	.word	0x08002cc5
 8002ba0:	08002cc5 	.word	0x08002cc5
 8002ba4:	08002ca5 	.word	0x08002ca5
 8002ba8:	08002cc5 	.word	0x08002cc5
 8002bac:	08002cc5 	.word	0x08002cc5
 8002bb0:	08002cc5 	.word	0x08002cc5
 8002bb4:	08002cc5 	.word	0x08002cc5
 8002bb8:	08002cc5 	.word	0x08002cc5
 8002bbc:	08002cc5 	.word	0x08002cc5
 8002bc0:	08002cc5 	.word	0x08002cc5
 8002bc4:	08002cc5 	.word	0x08002cc5
 8002bc8:	08002cc5 	.word	0x08002cc5
 8002bcc:	08002c9d 	.word	0x08002c9d
 8002bd0:	08002cc5 	.word	0x08002cc5
 8002bd4:	08002cc5 	.word	0x08002cc5
 8002bd8:	08002cc5 	.word	0x08002cc5
 8002bdc:	08002cc5 	.word	0x08002cc5
 8002be0:	08002cc5 	.word	0x08002cc5
 8002be4:	08002cc5 	.word	0x08002cc5
 8002be8:	08002cc5 	.word	0x08002cc5
 8002bec:	08002cc5 	.word	0x08002cc5
 8002bf0:	08002cc5 	.word	0x08002cc5
 8002bf4:	08002cc5 	.word	0x08002cc5
 8002bf8:	08002cc5 	.word	0x08002cc5
 8002bfc:	08002cc5 	.word	0x08002cc5
 8002c00:	08002cc5 	.word	0x08002cc5
 8002c04:	08002cc5 	.word	0x08002cc5
 8002c08:	08002cc5 	.word	0x08002cc5
 8002c0c:	08002cc5 	.word	0x08002cc5
 8002c10:	08002cc5 	.word	0x08002cc5
 8002c14:	08002cc5 	.word	0x08002cc5
 8002c18:	08002cc5 	.word	0x08002cc5
 8002c1c:	08002c95 	.word	0x08002c95
 8002c20:	08002cc5 	.word	0x08002cc5
 8002c24:	08002cc5 	.word	0x08002cc5
 8002c28:	08002cc5 	.word	0x08002cc5
 8002c2c:	08002cc5 	.word	0x08002cc5
 8002c30:	08002cc5 	.word	0x08002cc5
 8002c34:	08002cc5 	.word	0x08002cc5
 8002c38:	08002cc5 	.word	0x08002cc5
 8002c3c:	08002cc5 	.word	0x08002cc5
 8002c40:	08002cc5 	.word	0x08002cc5
 8002c44:	08002c8d 	.word	0x08002c8d
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d00c      	beq.n	8002c66 <Tx_Verify+0x322>
 8002c4c:	e03a      	b.n	8002cc4 <Tx_Verify+0x380>
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <Tx_Verify+0x334>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	70da      	strb	r2, [r3, #3]
 8002c54:	e039      	b.n	8002cca <Tx_Verify+0x386>
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <Tx_Verify+0x334>)
 8002c58:	2202      	movs	r2, #2
 8002c5a:	70da      	strb	r2, [r3, #3]
 8002c5c:	e035      	b.n	8002cca <Tx_Verify+0x386>
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <Tx_Verify+0x334>)
 8002c60:	2203      	movs	r2, #3
 8002c62:	70da      	strb	r2, [r3, #3]
 8002c64:	e031      	b.n	8002cca <Tx_Verify+0x386>
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <Tx_Verify+0x334>)
 8002c68:	2204      	movs	r2, #4
 8002c6a:	70da      	strb	r2, [r3, #3]
 8002c6c:	e02d      	b.n	8002cca <Tx_Verify+0x386>
 8002c6e:	bf00      	nop
 8002c70:	2000055c 	.word	0x2000055c
 8002c74:	2000678a 	.word	0x2000678a
 8002c78:	20000534 	.word	0x20000534
 8002c7c:	200066fe 	.word	0x200066fe
 8002c80:	40020400 	.word	0x40020400
 8002c84:	200066ff 	.word	0x200066ff
 8002c88:	20006728 	.word	0x20006728
 8002c8c:	4bc5      	ldr	r3, [pc, #788]	; (8002fa4 <Tx_Verify+0x660>)
 8002c8e:	2205      	movs	r2, #5
 8002c90:	70da      	strb	r2, [r3, #3]
 8002c92:	e01a      	b.n	8002cca <Tx_Verify+0x386>
 8002c94:	4bc3      	ldr	r3, [pc, #780]	; (8002fa4 <Tx_Verify+0x660>)
 8002c96:	2206      	movs	r2, #6
 8002c98:	70da      	strb	r2, [r3, #3]
 8002c9a:	e016      	b.n	8002cca <Tx_Verify+0x386>
 8002c9c:	4bc1      	ldr	r3, [pc, #772]	; (8002fa4 <Tx_Verify+0x660>)
 8002c9e:	2207      	movs	r2, #7
 8002ca0:	70da      	strb	r2, [r3, #3]
 8002ca2:	e012      	b.n	8002cca <Tx_Verify+0x386>
 8002ca4:	4bbf      	ldr	r3, [pc, #764]	; (8002fa4 <Tx_Verify+0x660>)
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	70da      	strb	r2, [r3, #3]
 8002caa:	e00e      	b.n	8002cca <Tx_Verify+0x386>
 8002cac:	4bbd      	ldr	r3, [pc, #756]	; (8002fa4 <Tx_Verify+0x660>)
 8002cae:	2209      	movs	r2, #9
 8002cb0:	70da      	strb	r2, [r3, #3]
 8002cb2:	e00a      	b.n	8002cca <Tx_Verify+0x386>
 8002cb4:	4bbb      	ldr	r3, [pc, #748]	; (8002fa4 <Tx_Verify+0x660>)
 8002cb6:	220a      	movs	r2, #10
 8002cb8:	70da      	strb	r2, [r3, #3]
 8002cba:	e006      	b.n	8002cca <Tx_Verify+0x386>
 8002cbc:	4bb9      	ldr	r3, [pc, #740]	; (8002fa4 <Tx_Verify+0x660>)
 8002cbe:	220b      	movs	r2, #11
 8002cc0:	70da      	strb	r2, [r3, #3]
 8002cc2:	e002      	b.n	8002cca <Tx_Verify+0x386>
 8002cc4:	4bb7      	ldr	r3, [pc, #732]	; (8002fa4 <Tx_Verify+0x660>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	70da      	strb	r2, [r3, #3]
 8002cca:	bf00      	nop
	__FREQ_TO_BUFFER(txData[4], perMsg[ANALOG_9_12]);
 8002ccc:	4bb6      	ldr	r3, [pc, #728]	; (8002fa8 <Tx_Verify+0x664>)
 8002cce:	889b      	ldrh	r3, [r3, #4]
 8002cd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cd4:	f000 8081 	beq.w	8002dda <Tx_Verify+0x496>
 8002cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cdc:	f300 80a9 	bgt.w	8002e32 <Tx_Verify+0x4ee>
 8002ce0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ce4:	d07d      	beq.n	8002de2 <Tx_Verify+0x49e>
 8002ce6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cea:	f300 80a2 	bgt.w	8002e32 <Tx_Verify+0x4ee>
 8002cee:	2bc8      	cmp	r3, #200	; 0xc8
 8002cf0:	d07b      	beq.n	8002dea <Tx_Verify+0x4a6>
 8002cf2:	2bc8      	cmp	r3, #200	; 0xc8
 8002cf4:	f300 809d 	bgt.w	8002e32 <Tx_Verify+0x4ee>
 8002cf8:	2b32      	cmp	r3, #50	; 0x32
 8002cfa:	dc6b      	bgt.n	8002dd4 <Tx_Verify+0x490>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	f2c0 8098 	blt.w	8002e32 <Tx_Verify+0x4ee>
 8002d02:	3b02      	subs	r3, #2
 8002d04:	2b30      	cmp	r3, #48	; 0x30
 8002d06:	f200 8094 	bhi.w	8002e32 <Tx_Verify+0x4ee>
 8002d0a:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <Tx_Verify+0x3cc>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002e2b 	.word	0x08002e2b
 8002d14:	08002e33 	.word	0x08002e33
 8002d18:	08002e23 	.word	0x08002e23
 8002d1c:	08002e1b 	.word	0x08002e1b
 8002d20:	08002e33 	.word	0x08002e33
 8002d24:	08002e33 	.word	0x08002e33
 8002d28:	08002e33 	.word	0x08002e33
 8002d2c:	08002e33 	.word	0x08002e33
 8002d30:	08002e13 	.word	0x08002e13
 8002d34:	08002e33 	.word	0x08002e33
 8002d38:	08002e33 	.word	0x08002e33
 8002d3c:	08002e33 	.word	0x08002e33
 8002d40:	08002e33 	.word	0x08002e33
 8002d44:	08002e33 	.word	0x08002e33
 8002d48:	08002e33 	.word	0x08002e33
 8002d4c:	08002e33 	.word	0x08002e33
 8002d50:	08002e33 	.word	0x08002e33
 8002d54:	08002e33 	.word	0x08002e33
 8002d58:	08002e0b 	.word	0x08002e0b
 8002d5c:	08002e33 	.word	0x08002e33
 8002d60:	08002e33 	.word	0x08002e33
 8002d64:	08002e33 	.word	0x08002e33
 8002d68:	08002e33 	.word	0x08002e33
 8002d6c:	08002e33 	.word	0x08002e33
 8002d70:	08002e33 	.word	0x08002e33
 8002d74:	08002e33 	.word	0x08002e33
 8002d78:	08002e33 	.word	0x08002e33
 8002d7c:	08002e33 	.word	0x08002e33
 8002d80:	08002e33 	.word	0x08002e33
 8002d84:	08002e33 	.word	0x08002e33
 8002d88:	08002e33 	.word	0x08002e33
 8002d8c:	08002e33 	.word	0x08002e33
 8002d90:	08002e33 	.word	0x08002e33
 8002d94:	08002e33 	.word	0x08002e33
 8002d98:	08002e33 	.word	0x08002e33
 8002d9c:	08002e33 	.word	0x08002e33
 8002da0:	08002e33 	.word	0x08002e33
 8002da4:	08002e33 	.word	0x08002e33
 8002da8:	08002e03 	.word	0x08002e03
 8002dac:	08002e33 	.word	0x08002e33
 8002db0:	08002e33 	.word	0x08002e33
 8002db4:	08002e33 	.word	0x08002e33
 8002db8:	08002e33 	.word	0x08002e33
 8002dbc:	08002e33 	.word	0x08002e33
 8002dc0:	08002e33 	.word	0x08002e33
 8002dc4:	08002e33 	.word	0x08002e33
 8002dc8:	08002e33 	.word	0x08002e33
 8002dcc:	08002e33 	.word	0x08002e33
 8002dd0:	08002dfb 	.word	0x08002dfb
 8002dd4:	2b64      	cmp	r3, #100	; 0x64
 8002dd6:	d00c      	beq.n	8002df2 <Tx_Verify+0x4ae>
 8002dd8:	e02b      	b.n	8002e32 <Tx_Verify+0x4ee>
 8002dda:	4b72      	ldr	r3, [pc, #456]	; (8002fa4 <Tx_Verify+0x660>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	711a      	strb	r2, [r3, #4]
 8002de0:	e02a      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002de2:	4b70      	ldr	r3, [pc, #448]	; (8002fa4 <Tx_Verify+0x660>)
 8002de4:	2202      	movs	r2, #2
 8002de6:	711a      	strb	r2, [r3, #4]
 8002de8:	e026      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002dea:	4b6e      	ldr	r3, [pc, #440]	; (8002fa4 <Tx_Verify+0x660>)
 8002dec:	2203      	movs	r2, #3
 8002dee:	711a      	strb	r2, [r3, #4]
 8002df0:	e022      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002df2:	4b6c      	ldr	r3, [pc, #432]	; (8002fa4 <Tx_Verify+0x660>)
 8002df4:	2204      	movs	r2, #4
 8002df6:	711a      	strb	r2, [r3, #4]
 8002df8:	e01e      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <Tx_Verify+0x660>)
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	711a      	strb	r2, [r3, #4]
 8002e00:	e01a      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002e02:	4b68      	ldr	r3, [pc, #416]	; (8002fa4 <Tx_Verify+0x660>)
 8002e04:	2206      	movs	r2, #6
 8002e06:	711a      	strb	r2, [r3, #4]
 8002e08:	e016      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002e0a:	4b66      	ldr	r3, [pc, #408]	; (8002fa4 <Tx_Verify+0x660>)
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	711a      	strb	r2, [r3, #4]
 8002e10:	e012      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002e12:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <Tx_Verify+0x660>)
 8002e14:	2208      	movs	r2, #8
 8002e16:	711a      	strb	r2, [r3, #4]
 8002e18:	e00e      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002e1a:	4b62      	ldr	r3, [pc, #392]	; (8002fa4 <Tx_Verify+0x660>)
 8002e1c:	2209      	movs	r2, #9
 8002e1e:	711a      	strb	r2, [r3, #4]
 8002e20:	e00a      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002e22:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <Tx_Verify+0x660>)
 8002e24:	220a      	movs	r2, #10
 8002e26:	711a      	strb	r2, [r3, #4]
 8002e28:	e006      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002e2a:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <Tx_Verify+0x660>)
 8002e2c:	220b      	movs	r2, #11
 8002e2e:	711a      	strb	r2, [r3, #4]
 8002e30:	e002      	b.n	8002e38 <Tx_Verify+0x4f4>
 8002e32:	4b5c      	ldr	r3, [pc, #368]	; (8002fa4 <Tx_Verify+0x660>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	711a      	strb	r2, [r3, #4]
 8002e38:	bf00      	nop
	__FREQ_TO_BUFFER(txData[5], perMsg[RTC_MSG]);
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <Tx_Verify+0x664>)
 8002e3c:	88db      	ldrh	r3, [r3, #6]
 8002e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e42:	f000 8082 	beq.w	8002f4a <Tx_Verify+0x606>
 8002e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e4a:	f300 80af 	bgt.w	8002fac <Tx_Verify+0x668>
 8002e4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e52:	d07e      	beq.n	8002f52 <Tx_Verify+0x60e>
 8002e54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e58:	f300 80a8 	bgt.w	8002fac <Tx_Verify+0x668>
 8002e5c:	2bc8      	cmp	r3, #200	; 0xc8
 8002e5e:	d07c      	beq.n	8002f5a <Tx_Verify+0x616>
 8002e60:	2bc8      	cmp	r3, #200	; 0xc8
 8002e62:	f300 80a3 	bgt.w	8002fac <Tx_Verify+0x668>
 8002e66:	2b32      	cmp	r3, #50	; 0x32
 8002e68:	dc6c      	bgt.n	8002f44 <Tx_Verify+0x600>
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	f2c0 809e 	blt.w	8002fac <Tx_Verify+0x668>
 8002e70:	3b02      	subs	r3, #2
 8002e72:	2b30      	cmp	r3, #48	; 0x30
 8002e74:	f200 809a 	bhi.w	8002fac <Tx_Verify+0x668>
 8002e78:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <Tx_Verify+0x53c>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002f9b 	.word	0x08002f9b
 8002e84:	08002fad 	.word	0x08002fad
 8002e88:	08002f93 	.word	0x08002f93
 8002e8c:	08002f8b 	.word	0x08002f8b
 8002e90:	08002fad 	.word	0x08002fad
 8002e94:	08002fad 	.word	0x08002fad
 8002e98:	08002fad 	.word	0x08002fad
 8002e9c:	08002fad 	.word	0x08002fad
 8002ea0:	08002f83 	.word	0x08002f83
 8002ea4:	08002fad 	.word	0x08002fad
 8002ea8:	08002fad 	.word	0x08002fad
 8002eac:	08002fad 	.word	0x08002fad
 8002eb0:	08002fad 	.word	0x08002fad
 8002eb4:	08002fad 	.word	0x08002fad
 8002eb8:	08002fad 	.word	0x08002fad
 8002ebc:	08002fad 	.word	0x08002fad
 8002ec0:	08002fad 	.word	0x08002fad
 8002ec4:	08002fad 	.word	0x08002fad
 8002ec8:	08002f7b 	.word	0x08002f7b
 8002ecc:	08002fad 	.word	0x08002fad
 8002ed0:	08002fad 	.word	0x08002fad
 8002ed4:	08002fad 	.word	0x08002fad
 8002ed8:	08002fad 	.word	0x08002fad
 8002edc:	08002fad 	.word	0x08002fad
 8002ee0:	08002fad 	.word	0x08002fad
 8002ee4:	08002fad 	.word	0x08002fad
 8002ee8:	08002fad 	.word	0x08002fad
 8002eec:	08002fad 	.word	0x08002fad
 8002ef0:	08002fad 	.word	0x08002fad
 8002ef4:	08002fad 	.word	0x08002fad
 8002ef8:	08002fad 	.word	0x08002fad
 8002efc:	08002fad 	.word	0x08002fad
 8002f00:	08002fad 	.word	0x08002fad
 8002f04:	08002fad 	.word	0x08002fad
 8002f08:	08002fad 	.word	0x08002fad
 8002f0c:	08002fad 	.word	0x08002fad
 8002f10:	08002fad 	.word	0x08002fad
 8002f14:	08002fad 	.word	0x08002fad
 8002f18:	08002f73 	.word	0x08002f73
 8002f1c:	08002fad 	.word	0x08002fad
 8002f20:	08002fad 	.word	0x08002fad
 8002f24:	08002fad 	.word	0x08002fad
 8002f28:	08002fad 	.word	0x08002fad
 8002f2c:	08002fad 	.word	0x08002fad
 8002f30:	08002fad 	.word	0x08002fad
 8002f34:	08002fad 	.word	0x08002fad
 8002f38:	08002fad 	.word	0x08002fad
 8002f3c:	08002fad 	.word	0x08002fad
 8002f40:	08002f6b 	.word	0x08002f6b
 8002f44:	2b64      	cmp	r3, #100	; 0x64
 8002f46:	d00c      	beq.n	8002f62 <Tx_Verify+0x61e>
 8002f48:	e030      	b.n	8002fac <Tx_Verify+0x668>
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <Tx_Verify+0x660>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	715a      	strb	r2, [r3, #5]
 8002f50:	e02f      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <Tx_Verify+0x660>)
 8002f54:	2202      	movs	r2, #2
 8002f56:	715a      	strb	r2, [r3, #5]
 8002f58:	e02b      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <Tx_Verify+0x660>)
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	715a      	strb	r2, [r3, #5]
 8002f60:	e027      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <Tx_Verify+0x660>)
 8002f64:	2204      	movs	r2, #4
 8002f66:	715a      	strb	r2, [r3, #5]
 8002f68:	e023      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <Tx_Verify+0x660>)
 8002f6c:	2205      	movs	r2, #5
 8002f6e:	715a      	strb	r2, [r3, #5]
 8002f70:	e01f      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <Tx_Verify+0x660>)
 8002f74:	2206      	movs	r2, #6
 8002f76:	715a      	strb	r2, [r3, #5]
 8002f78:	e01b      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <Tx_Verify+0x660>)
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	715a      	strb	r2, [r3, #5]
 8002f80:	e017      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <Tx_Verify+0x660>)
 8002f84:	2208      	movs	r2, #8
 8002f86:	715a      	strb	r2, [r3, #5]
 8002f88:	e013      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <Tx_Verify+0x660>)
 8002f8c:	2209      	movs	r2, #9
 8002f8e:	715a      	strb	r2, [r3, #5]
 8002f90:	e00f      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002f92:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <Tx_Verify+0x660>)
 8002f94:	220a      	movs	r2, #10
 8002f96:	715a      	strb	r2, [r3, #5]
 8002f98:	e00b      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002f9a:	4b02      	ldr	r3, [pc, #8]	; (8002fa4 <Tx_Verify+0x660>)
 8002f9c:	220b      	movs	r2, #11
 8002f9e:	715a      	strb	r2, [r3, #5]
 8002fa0:	e007      	b.n	8002fb2 <Tx_Verify+0x66e>
 8002fa2:	bf00      	nop
 8002fa4:	20000534 	.word	0x20000534
 8002fa8:	20006728 	.word	0x20006728
 8002fac:	4bb7      	ldr	r3, [pc, #732]	; (800328c <Tx_Verify+0x948>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	715a      	strb	r2, [r3, #5]
 8002fb2:	bf00      	nop
	__FREQ_TO_BUFFER(txData[6], perMsg[PDM_SAVE]);
 8002fb4:	4bb6      	ldr	r3, [pc, #728]	; (8003290 <Tx_Verify+0x94c>)
 8002fb6:	89db      	ldrh	r3, [r3, #14]
 8002fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fbc:	f000 8081 	beq.w	80030c2 <Tx_Verify+0x77e>
 8002fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc4:	f300 80a9 	bgt.w	800311a <Tx_Verify+0x7d6>
 8002fc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fcc:	d07d      	beq.n	80030ca <Tx_Verify+0x786>
 8002fce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fd2:	f300 80a2 	bgt.w	800311a <Tx_Verify+0x7d6>
 8002fd6:	2bc8      	cmp	r3, #200	; 0xc8
 8002fd8:	d07b      	beq.n	80030d2 <Tx_Verify+0x78e>
 8002fda:	2bc8      	cmp	r3, #200	; 0xc8
 8002fdc:	f300 809d 	bgt.w	800311a <Tx_Verify+0x7d6>
 8002fe0:	2b32      	cmp	r3, #50	; 0x32
 8002fe2:	dc6b      	bgt.n	80030bc <Tx_Verify+0x778>
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	f2c0 8098 	blt.w	800311a <Tx_Verify+0x7d6>
 8002fea:	3b02      	subs	r3, #2
 8002fec:	2b30      	cmp	r3, #48	; 0x30
 8002fee:	f200 8094 	bhi.w	800311a <Tx_Verify+0x7d6>
 8002ff2:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <Tx_Verify+0x6b4>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	08003113 	.word	0x08003113
 8002ffc:	0800311b 	.word	0x0800311b
 8003000:	0800310b 	.word	0x0800310b
 8003004:	08003103 	.word	0x08003103
 8003008:	0800311b 	.word	0x0800311b
 800300c:	0800311b 	.word	0x0800311b
 8003010:	0800311b 	.word	0x0800311b
 8003014:	0800311b 	.word	0x0800311b
 8003018:	080030fb 	.word	0x080030fb
 800301c:	0800311b 	.word	0x0800311b
 8003020:	0800311b 	.word	0x0800311b
 8003024:	0800311b 	.word	0x0800311b
 8003028:	0800311b 	.word	0x0800311b
 800302c:	0800311b 	.word	0x0800311b
 8003030:	0800311b 	.word	0x0800311b
 8003034:	0800311b 	.word	0x0800311b
 8003038:	0800311b 	.word	0x0800311b
 800303c:	0800311b 	.word	0x0800311b
 8003040:	080030f3 	.word	0x080030f3
 8003044:	0800311b 	.word	0x0800311b
 8003048:	0800311b 	.word	0x0800311b
 800304c:	0800311b 	.word	0x0800311b
 8003050:	0800311b 	.word	0x0800311b
 8003054:	0800311b 	.word	0x0800311b
 8003058:	0800311b 	.word	0x0800311b
 800305c:	0800311b 	.word	0x0800311b
 8003060:	0800311b 	.word	0x0800311b
 8003064:	0800311b 	.word	0x0800311b
 8003068:	0800311b 	.word	0x0800311b
 800306c:	0800311b 	.word	0x0800311b
 8003070:	0800311b 	.word	0x0800311b
 8003074:	0800311b 	.word	0x0800311b
 8003078:	0800311b 	.word	0x0800311b
 800307c:	0800311b 	.word	0x0800311b
 8003080:	0800311b 	.word	0x0800311b
 8003084:	0800311b 	.word	0x0800311b
 8003088:	0800311b 	.word	0x0800311b
 800308c:	0800311b 	.word	0x0800311b
 8003090:	080030eb 	.word	0x080030eb
 8003094:	0800311b 	.word	0x0800311b
 8003098:	0800311b 	.word	0x0800311b
 800309c:	0800311b 	.word	0x0800311b
 80030a0:	0800311b 	.word	0x0800311b
 80030a4:	0800311b 	.word	0x0800311b
 80030a8:	0800311b 	.word	0x0800311b
 80030ac:	0800311b 	.word	0x0800311b
 80030b0:	0800311b 	.word	0x0800311b
 80030b4:	0800311b 	.word	0x0800311b
 80030b8:	080030e3 	.word	0x080030e3
 80030bc:	2b64      	cmp	r3, #100	; 0x64
 80030be:	d00c      	beq.n	80030da <Tx_Verify+0x796>
 80030c0:	e02b      	b.n	800311a <Tx_Verify+0x7d6>
 80030c2:	4b72      	ldr	r3, [pc, #456]	; (800328c <Tx_Verify+0x948>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	719a      	strb	r2, [r3, #6]
 80030c8:	e02a      	b.n	8003120 <Tx_Verify+0x7dc>
 80030ca:	4b70      	ldr	r3, [pc, #448]	; (800328c <Tx_Verify+0x948>)
 80030cc:	2202      	movs	r2, #2
 80030ce:	719a      	strb	r2, [r3, #6]
 80030d0:	e026      	b.n	8003120 <Tx_Verify+0x7dc>
 80030d2:	4b6e      	ldr	r3, [pc, #440]	; (800328c <Tx_Verify+0x948>)
 80030d4:	2203      	movs	r2, #3
 80030d6:	719a      	strb	r2, [r3, #6]
 80030d8:	e022      	b.n	8003120 <Tx_Verify+0x7dc>
 80030da:	4b6c      	ldr	r3, [pc, #432]	; (800328c <Tx_Verify+0x948>)
 80030dc:	2204      	movs	r2, #4
 80030de:	719a      	strb	r2, [r3, #6]
 80030e0:	e01e      	b.n	8003120 <Tx_Verify+0x7dc>
 80030e2:	4b6a      	ldr	r3, [pc, #424]	; (800328c <Tx_Verify+0x948>)
 80030e4:	2205      	movs	r2, #5
 80030e6:	719a      	strb	r2, [r3, #6]
 80030e8:	e01a      	b.n	8003120 <Tx_Verify+0x7dc>
 80030ea:	4b68      	ldr	r3, [pc, #416]	; (800328c <Tx_Verify+0x948>)
 80030ec:	2206      	movs	r2, #6
 80030ee:	719a      	strb	r2, [r3, #6]
 80030f0:	e016      	b.n	8003120 <Tx_Verify+0x7dc>
 80030f2:	4b66      	ldr	r3, [pc, #408]	; (800328c <Tx_Verify+0x948>)
 80030f4:	2207      	movs	r2, #7
 80030f6:	719a      	strb	r2, [r3, #6]
 80030f8:	e012      	b.n	8003120 <Tx_Verify+0x7dc>
 80030fa:	4b64      	ldr	r3, [pc, #400]	; (800328c <Tx_Verify+0x948>)
 80030fc:	2208      	movs	r2, #8
 80030fe:	719a      	strb	r2, [r3, #6]
 8003100:	e00e      	b.n	8003120 <Tx_Verify+0x7dc>
 8003102:	4b62      	ldr	r3, [pc, #392]	; (800328c <Tx_Verify+0x948>)
 8003104:	2209      	movs	r2, #9
 8003106:	719a      	strb	r2, [r3, #6]
 8003108:	e00a      	b.n	8003120 <Tx_Verify+0x7dc>
 800310a:	4b60      	ldr	r3, [pc, #384]	; (800328c <Tx_Verify+0x948>)
 800310c:	220a      	movs	r2, #10
 800310e:	719a      	strb	r2, [r3, #6]
 8003110:	e006      	b.n	8003120 <Tx_Verify+0x7dc>
 8003112:	4b5e      	ldr	r3, [pc, #376]	; (800328c <Tx_Verify+0x948>)
 8003114:	220b      	movs	r2, #11
 8003116:	719a      	strb	r2, [r3, #6]
 8003118:	e002      	b.n	8003120 <Tx_Verify+0x7dc>
 800311a:	4b5c      	ldr	r3, [pc, #368]	; (800328c <Tx_Verify+0x948>)
 800311c:	2200      	movs	r2, #0
 800311e:	719a      	strb	r2, [r3, #6]
 8003120:	bf00      	nop
	__FREQ_TO_BUFFER(txData[7], perMsg[ECU_SAVE]);
 8003122:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <Tx_Verify+0x94c>)
 8003124:	899b      	ldrh	r3, [r3, #12]
 8003126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800312a:	f000 8082 	beq.w	8003232 <Tx_Verify+0x8ee>
 800312e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003132:	f300 80af 	bgt.w	8003294 <Tx_Verify+0x950>
 8003136:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800313a:	d07e      	beq.n	800323a <Tx_Verify+0x8f6>
 800313c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003140:	f300 80a8 	bgt.w	8003294 <Tx_Verify+0x950>
 8003144:	2bc8      	cmp	r3, #200	; 0xc8
 8003146:	d07c      	beq.n	8003242 <Tx_Verify+0x8fe>
 8003148:	2bc8      	cmp	r3, #200	; 0xc8
 800314a:	f300 80a3 	bgt.w	8003294 <Tx_Verify+0x950>
 800314e:	2b32      	cmp	r3, #50	; 0x32
 8003150:	dc6c      	bgt.n	800322c <Tx_Verify+0x8e8>
 8003152:	2b02      	cmp	r3, #2
 8003154:	f2c0 809e 	blt.w	8003294 <Tx_Verify+0x950>
 8003158:	3b02      	subs	r3, #2
 800315a:	2b30      	cmp	r3, #48	; 0x30
 800315c:	f200 809a 	bhi.w	8003294 <Tx_Verify+0x950>
 8003160:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <Tx_Verify+0x824>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	08003283 	.word	0x08003283
 800316c:	08003295 	.word	0x08003295
 8003170:	0800327b 	.word	0x0800327b
 8003174:	08003273 	.word	0x08003273
 8003178:	08003295 	.word	0x08003295
 800317c:	08003295 	.word	0x08003295
 8003180:	08003295 	.word	0x08003295
 8003184:	08003295 	.word	0x08003295
 8003188:	0800326b 	.word	0x0800326b
 800318c:	08003295 	.word	0x08003295
 8003190:	08003295 	.word	0x08003295
 8003194:	08003295 	.word	0x08003295
 8003198:	08003295 	.word	0x08003295
 800319c:	08003295 	.word	0x08003295
 80031a0:	08003295 	.word	0x08003295
 80031a4:	08003295 	.word	0x08003295
 80031a8:	08003295 	.word	0x08003295
 80031ac:	08003295 	.word	0x08003295
 80031b0:	08003263 	.word	0x08003263
 80031b4:	08003295 	.word	0x08003295
 80031b8:	08003295 	.word	0x08003295
 80031bc:	08003295 	.word	0x08003295
 80031c0:	08003295 	.word	0x08003295
 80031c4:	08003295 	.word	0x08003295
 80031c8:	08003295 	.word	0x08003295
 80031cc:	08003295 	.word	0x08003295
 80031d0:	08003295 	.word	0x08003295
 80031d4:	08003295 	.word	0x08003295
 80031d8:	08003295 	.word	0x08003295
 80031dc:	08003295 	.word	0x08003295
 80031e0:	08003295 	.word	0x08003295
 80031e4:	08003295 	.word	0x08003295
 80031e8:	08003295 	.word	0x08003295
 80031ec:	08003295 	.word	0x08003295
 80031f0:	08003295 	.word	0x08003295
 80031f4:	08003295 	.word	0x08003295
 80031f8:	08003295 	.word	0x08003295
 80031fc:	08003295 	.word	0x08003295
 8003200:	0800325b 	.word	0x0800325b
 8003204:	08003295 	.word	0x08003295
 8003208:	08003295 	.word	0x08003295
 800320c:	08003295 	.word	0x08003295
 8003210:	08003295 	.word	0x08003295
 8003214:	08003295 	.word	0x08003295
 8003218:	08003295 	.word	0x08003295
 800321c:	08003295 	.word	0x08003295
 8003220:	08003295 	.word	0x08003295
 8003224:	08003295 	.word	0x08003295
 8003228:	08003253 	.word	0x08003253
 800322c:	2b64      	cmp	r3, #100	; 0x64
 800322e:	d00c      	beq.n	800324a <Tx_Verify+0x906>
 8003230:	e030      	b.n	8003294 <Tx_Verify+0x950>
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <Tx_Verify+0x948>)
 8003234:	2201      	movs	r2, #1
 8003236:	71da      	strb	r2, [r3, #7]
 8003238:	e02f      	b.n	800329a <Tx_Verify+0x956>
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <Tx_Verify+0x948>)
 800323c:	2202      	movs	r2, #2
 800323e:	71da      	strb	r2, [r3, #7]
 8003240:	e02b      	b.n	800329a <Tx_Verify+0x956>
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <Tx_Verify+0x948>)
 8003244:	2203      	movs	r2, #3
 8003246:	71da      	strb	r2, [r3, #7]
 8003248:	e027      	b.n	800329a <Tx_Verify+0x956>
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <Tx_Verify+0x948>)
 800324c:	2204      	movs	r2, #4
 800324e:	71da      	strb	r2, [r3, #7]
 8003250:	e023      	b.n	800329a <Tx_Verify+0x956>
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <Tx_Verify+0x948>)
 8003254:	2205      	movs	r2, #5
 8003256:	71da      	strb	r2, [r3, #7]
 8003258:	e01f      	b.n	800329a <Tx_Verify+0x956>
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <Tx_Verify+0x948>)
 800325c:	2206      	movs	r2, #6
 800325e:	71da      	strb	r2, [r3, #7]
 8003260:	e01b      	b.n	800329a <Tx_Verify+0x956>
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <Tx_Verify+0x948>)
 8003264:	2207      	movs	r2, #7
 8003266:	71da      	strb	r2, [r3, #7]
 8003268:	e017      	b.n	800329a <Tx_Verify+0x956>
 800326a:	4b08      	ldr	r3, [pc, #32]	; (800328c <Tx_Verify+0x948>)
 800326c:	2208      	movs	r2, #8
 800326e:	71da      	strb	r2, [r3, #7]
 8003270:	e013      	b.n	800329a <Tx_Verify+0x956>
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <Tx_Verify+0x948>)
 8003274:	2209      	movs	r2, #9
 8003276:	71da      	strb	r2, [r3, #7]
 8003278:	e00f      	b.n	800329a <Tx_Verify+0x956>
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <Tx_Verify+0x948>)
 800327c:	220a      	movs	r2, #10
 800327e:	71da      	strb	r2, [r3, #7]
 8003280:	e00b      	b.n	800329a <Tx_Verify+0x956>
 8003282:	4b02      	ldr	r3, [pc, #8]	; (800328c <Tx_Verify+0x948>)
 8003284:	220b      	movs	r2, #11
 8003286:	71da      	strb	r2, [r3, #7]
 8003288:	e007      	b.n	800329a <Tx_Verify+0x956>
 800328a:	bf00      	nop
 800328c:	20000534 	.word	0x20000534
 8003290:	20006728 	.word	0x20006728
 8003294:	4b28      	ldr	r3, [pc, #160]	; (8003338 <Tx_Verify+0x9f4>)
 8003296:	2200      	movs	r2, #0
 8003298:	71da      	strb	r2, [r3, #7]
 800329a:	bf00      	nop

	if(flagDatalogger == DL_SAVE)
 800329c:	4b27      	ldr	r3, [pc, #156]	; (800333c <Tx_Verify+0x9f8>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d10c      	bne.n	80032be <Tx_Verify+0x97a>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 80032a4:	4b26      	ldr	r3, [pc, #152]	; (8003340 <Tx_Verify+0x9fc>)
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <Tx_Verify+0x9fc>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <Tx_Verify+0xa00>)
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	4b25      	ldr	r3, [pc, #148]	; (8003348 <Tx_Verify+0xa04>)
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <Tx_Verify+0x9f4>)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f002 fab7 	bl	800582c <Principal_Datalogger_Save_Buffer>

	if((accCAN[VERIFY_MSG] >= perCAN[VERIFY_MSG]) && (perCAN[VERIFY_MSG] != MSG_DISABLED))
 80032be:	4b23      	ldr	r3, [pc, #140]	; (800334c <Tx_Verify+0xa08>)
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	4a23      	ldr	r2, [pc, #140]	; (8003350 <Tx_Verify+0xa0c>)
 80032c4:	8912      	ldrh	r2, [r2, #8]
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d332      	bcc.n	8003330 <Tx_Verify+0x9ec>
 80032ca:	4b21      	ldr	r3, [pc, #132]	; (8003350 <Tx_Verify+0xa0c>)
 80032cc:	891b      	ldrh	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02e      	beq.n	8003330 <Tx_Verify+0x9ec>
	{
		accCAN[VERIFY_MSG] -= perCAN[VERIFY_MSG];
 80032d2:	4b1e      	ldr	r3, [pc, #120]	; (800334c <Tx_Verify+0xa08>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <Tx_Verify+0xa0c>)
 80032d8:	8912      	ldrh	r2, [r2, #8]
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	4a1b      	ldr	r2, [pc, #108]	; (800334c <Tx_Verify+0xa08>)
 80032de:	6113      	str	r3, [r2, #16]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <Tx_Verify+0xa10>)
 80032e2:	4a15      	ldr	r2, [pc, #84]	; (8003338 <Tx_Verify+0x9f4>)
 80032e4:	4916      	ldr	r1, [pc, #88]	; (8003340 <Tx_Verify+0x9fc>)
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f004 f86c 	bl	80073c4 <HAL_CAN_AddTxMessage>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <Tx_Verify+0x9be>
			verifyCAN |= 1;
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <Tx_Verify+0xa14>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <Tx_Verify+0xa14>)
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e006      	b.n	8003310 <Tx_Verify+0x9cc>
		else
			verifyCAN &= 0x02;
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <Tx_Verify+0xa14>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	b2da      	uxtb	r2, r3
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <Tx_Verify+0xa14>)
 800330e:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e002      	b.n	800331c <Tx_Verify+0x9d8>
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	3301      	adds	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f004 f92c 	bl	800757a <HAL_CAN_GetTxMailboxesFreeLevel>
 8003322:	4603      	mov	r3, r0
 8003324:	2b03      	cmp	r3, #3
 8003326:	d003      	beq.n	8003330 <Tx_Verify+0x9ec>
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d9f3      	bls.n	8003316 <Tx_Verify+0x9d2>
	}

	return;
 800332e:	bf00      	nop
 8003330:	bf00      	nop
}
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000534 	.word	0x20000534
 800333c:	200066fe 	.word	0x200066fe
 8003340:	2000055c 	.word	0x2000055c
 8003344:	200056a8 	.word	0x200056a8
 8003348:	20004640 	.word	0x20004640
 800334c:	20006748 	.word	0x20006748
 8003350:	2000671c 	.word	0x2000671c
 8003354:	2000053c 	.word	0x2000053c
 8003358:	20006788 	.word	0x20006788

0800335c <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af02      	add	r7, sp, #8
 8003362:	6078      	str	r0, [r7, #4]
	uint16_t buffer[3];

	txHeader.IDE = CAN_ID_STD;
 8003364:	4b49      	ldr	r3, [pc, #292]	; (800348c <Tx_Beacon+0x130>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800336a:	4b48      	ldr	r3, [pc, #288]	; (800348c <Tx_Beacon+0x130>)
 800336c:	2200      	movs	r2, #0
 800336e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8003370:	4b46      	ldr	r3, [pc, #280]	; (800348c <Tx_Beacon+0x130>)
 8003372:	2200      	movs	r2, #0
 8003374:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = BEACON_ID;
 8003376:	4b45      	ldr	r3, [pc, #276]	; (800348c <Tx_Beacon+0x130>)
 8003378:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800337c:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 5;
 800337e:	4b43      	ldr	r3, [pc, #268]	; (800348c <Tx_Beacon+0x130>)
 8003380:	2205      	movs	r2, #5
 8003382:	611a      	str	r2, [r3, #16]

	buffer[0] = accLap / 60000;
 8003384:	4b42      	ldr	r3, [pc, #264]	; (8003490 <Tx_Beacon+0x134>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a42      	ldr	r2, [pc, #264]	; (8003494 <Tx_Beacon+0x138>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0b9b      	lsrs	r3, r3, #14
 8003390:	b29b      	uxth	r3, r3
 8003392:	813b      	strh	r3, [r7, #8]
	buffer[1] = accLap / 1000;
 8003394:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <Tx_Beacon+0x134>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a3f      	ldr	r2, [pc, #252]	; (8003498 <Tx_Beacon+0x13c>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	817b      	strh	r3, [r7, #10]
	buffer[2] = accLap % 1000;
 80033a4:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <Tx_Beacon+0x134>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <Tx_Beacon+0x13c>)
 80033aa:	fba3 1302 	umull	r1, r3, r3, r2
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	81bb      	strh	r3, [r7, #12]

	accLap = 0;
 80033be:	4b34      	ldr	r3, [pc, #208]	; (8003490 <Tx_Beacon+0x134>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

	txData[0] = lapNumber;
 80033c4:	4b35      	ldr	r3, [pc, #212]	; (800349c <Tx_Beacon+0x140>)
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <Tx_Beacon+0x144>)
 80033ca:	701a      	strb	r2, [r3, #0]
	txData[1] = buffer[0] & 0xff;
 80033cc:	893b      	ldrh	r3, [r7, #8]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	4b33      	ldr	r3, [pc, #204]	; (80034a0 <Tx_Beacon+0x144>)
 80033d2:	705a      	strb	r2, [r3, #1]
	txData[2] = buffer[1] & 0xff;
 80033d4:	897b      	ldrh	r3, [r7, #10]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <Tx_Beacon+0x144>)
 80033da:	709a      	strb	r2, [r3, #2]
	txData[3] = buffer[2] >> 8;
 80033dc:	89bb      	ldrh	r3, [r7, #12]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <Tx_Beacon+0x144>)
 80033e6:	70da      	strb	r2, [r3, #3]
	txData[4] = buffer[2] & 0xff;
 80033e8:	89bb      	ldrh	r3, [r7, #12]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <Tx_Beacon+0x144>)
 80033ee:	711a      	strb	r2, [r3, #4]

	if(flagDatalogger == DL_SAVE)
 80033f0:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <Tx_Beacon+0x148>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10c      	bne.n	8003412 <Tx_Beacon+0xb6>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 80033f8:	4b24      	ldr	r3, [pc, #144]	; (800348c <Tx_Beacon+0x130>)
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	4b23      	ldr	r3, [pc, #140]	; (800348c <Tx_Beacon+0x130>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <Tx_Beacon+0x14c>)
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	4b29      	ldr	r3, [pc, #164]	; (80034ac <Tx_Beacon+0x150>)
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <Tx_Beacon+0x144>)
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f002 fa0d 	bl	800582c <Principal_Datalogger_Save_Buffer>

	if((accCAN[BEACON_MSG] >= perCAN[BEACON_MSG]) && (perCAN[BEACON_MSG] != MSG_DISABLED))
 8003412:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <Tx_Beacon+0x154>)
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <Tx_Beacon+0x158>)
 8003418:	8952      	ldrh	r2, [r2, #10]
 800341a:	4293      	cmp	r3, r2
 800341c:	d332      	bcc.n	8003484 <Tx_Beacon+0x128>
 800341e:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <Tx_Beacon+0x158>)
 8003420:	895b      	ldrh	r3, [r3, #10]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02e      	beq.n	8003484 <Tx_Beacon+0x128>
	{
		accCAN[BEACON_MSG] -= perCAN[BEACON_MSG];
 8003426:	4b22      	ldr	r3, [pc, #136]	; (80034b0 <Tx_Beacon+0x154>)
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <Tx_Beacon+0x158>)
 800342c:	8952      	ldrh	r2, [r2, #10]
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <Tx_Beacon+0x154>)
 8003432:	6153      	str	r3, [r2, #20]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8003434:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <Tx_Beacon+0x15c>)
 8003436:	4a1a      	ldr	r2, [pc, #104]	; (80034a0 <Tx_Beacon+0x144>)
 8003438:	4914      	ldr	r1, [pc, #80]	; (800348c <Tx_Beacon+0x130>)
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f003 ffc2 	bl	80073c4 <HAL_CAN_AddTxMessage>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <Tx_Beacon+0xfa>
			verifyCAN |= 1;
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <Tx_Beacon+0x160>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	b2da      	uxtb	r2, r3
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <Tx_Beacon+0x160>)
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e006      	b.n	8003464 <Tx_Beacon+0x108>
		else
			verifyCAN &= 0x02;
 8003456:	4b19      	ldr	r3, [pc, #100]	; (80034bc <Tx_Beacon+0x160>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <Tx_Beacon+0x160>)
 8003462:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e002      	b.n	8003470 <Tx_Beacon+0x114>
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	3301      	adds	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f004 f882 	bl	800757a <HAL_CAN_GetTxMailboxesFreeLevel>
 8003476:	4603      	mov	r3, r0
 8003478:	2b03      	cmp	r3, #3
 800347a:	d003      	beq.n	8003484 <Tx_Beacon+0x128>
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d9f3      	bls.n	800346a <Tx_Beacon+0x10e>
	}

	return;
 8003482:	bf00      	nop
 8003484:	bf00      	nop
}
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	2000055c 	.word	0x2000055c
 8003490:	20006784 	.word	0x20006784
 8003494:	45e7b273 	.word	0x45e7b273
 8003498:	10624dd3 	.word	0x10624dd3
 800349c:	20000574 	.word	0x20000574
 80034a0:	20000534 	.word	0x20000534
 80034a4:	200066fe 	.word	0x200066fe
 80034a8:	200056a8 	.word	0x200056a8
 80034ac:	20004640 	.word	0x20004640
 80034b0:	20006748 	.word	0x20006748
 80034b4:	2000671c 	.word	0x2000671c
 80034b8:	2000053c 	.word	0x2000053c
 80034bc:	20006788 	.word	0x20006788

080034c0 <Save_ECU>:

static void Save_ECU(CAN_HandleTypeDef* hcan)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
	uint8_t id = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	75fb      	strb	r3, [r7, #23]
	uint8_t length = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	75bb      	strb	r3, [r7, #22]
	uint8_t buffer[8];

	if(flagDatalogger != DL_SAVE)
 80034d0:	4bac      	ldr	r3, [pc, #688]	; (8003784 <Save_ECU+0x2c4>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	f040 8151 	bne.w	800377c <Save_ECU+0x2bc>
		return;

	id = ECU_FIRST_ID;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80034de:	2308      	movs	r3, #8
 80034e0:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.rpm >> 8;
 80034e2:	4ba9      	ldr	r3, [pc, #676]	; (8003788 <Save_ECU+0x2c8>)
 80034e4:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80034e8:	121b      	asrs	r3, r3, #8
 80034ea:	b21b      	sxth	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.rpm & 0xff;
 80034f0:	4ba5      	ldr	r3, [pc, #660]	; (8003788 <Save_ECU+0x2c8>)
 80034f2:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.tps >> 8;
 80034fa:	4ba3      	ldr	r3, [pc, #652]	; (8003788 <Save_ECU+0x2c8>)
 80034fc:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8003500:	121b      	asrs	r3, r3, #8
 8003502:	b21b      	sxth	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.tps & 0xff;
 8003508:	4b9f      	ldr	r3, [pc, #636]	; (8003788 <Save_ECU+0x2c8>)
 800350a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800350e:	b2db      	uxtb	r3, r3
 8003510:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.iat >> 8;
 8003512:	4b9d      	ldr	r3, [pc, #628]	; (8003788 <Save_ECU+0x2c8>)
 8003514:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8003518:	121b      	asrs	r3, r3, #8
 800351a:	b21b      	sxth	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.iat & 0xff;
 8003520:	4b99      	ldr	r3, [pc, #612]	; (8003788 <Save_ECU+0x2c8>)
 8003522:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8003526:	b2db      	uxtb	r3, r3
 8003528:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.ect >> 8;
 800352a:	4b97      	ldr	r3, [pc, #604]	; (8003788 <Save_ECU+0x2c8>)
 800352c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003530:	121b      	asrs	r3, r3, #8
 8003532:	b21b      	sxth	r3, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.ect & 0xff;
 8003538:	4b93      	ldr	r3, [pc, #588]	; (8003788 <Save_ECU+0x2c8>)
 800353a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800353e:	b2db      	uxtb	r3, r3
 8003540:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 8003542:	7df9      	ldrb	r1, [r7, #23]
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	7dba      	ldrb	r2, [r7, #22]
 800354a:	4890      	ldr	r0, [pc, #576]	; (800378c <Save_ECU+0x2cc>)
 800354c:	9001      	str	r0, [sp, #4]
 800354e:	4890      	ldr	r0, [pc, #576]	; (8003790 <Save_ECU+0x2d0>)
 8003550:	9000      	str	r0, [sp, #0]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f002 f96a 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 8003558:	2302      	movs	r3, #2
 800355a:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800355c:	2308      	movs	r3, #8
 800355e:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.map >> 8;
 8003560:	4b89      	ldr	r3, [pc, #548]	; (8003788 <Save_ECU+0x2c8>)
 8003562:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003566:	121b      	asrs	r3, r3, #8
 8003568:	b21b      	sxth	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.map & 0xff;
 800356e:	4b86      	ldr	r3, [pc, #536]	; (8003788 <Save_ECU+0x2c8>)
 8003570:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003574:	b2db      	uxtb	r3, r3
 8003576:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.fuel_pressure >> 8;
 8003578:	4b83      	ldr	r3, [pc, #524]	; (8003788 <Save_ECU+0x2c8>)
 800357a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800357e:	121b      	asrs	r3, r3, #8
 8003580:	b21b      	sxth	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.fuel_pressure & 0xff;
 8003586:	4b80      	ldr	r3, [pc, #512]	; (8003788 <Save_ECU+0x2c8>)
 8003588:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800358c:	b2db      	uxtb	r3, r3
 800358e:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.oil_pressure >> 8;
 8003590:	4b7d      	ldr	r3, [pc, #500]	; (8003788 <Save_ECU+0x2c8>)
 8003592:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003596:	121b      	asrs	r3, r3, #8
 8003598:	b21b      	sxth	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.oil_pressure & 0xff;
 800359e:	4b7a      	ldr	r3, [pc, #488]	; (8003788 <Save_ECU+0x2c8>)
 80035a0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.coolant_pressure >> 8;
 80035a8:	4b77      	ldr	r3, [pc, #476]	; (8003788 <Save_ECU+0x2c8>)
 80035aa:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80035ae:	121b      	asrs	r3, r3, #8
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.coolant_pressure & 0xff;
 80035b6:	4b74      	ldr	r3, [pc, #464]	; (8003788 <Save_ECU+0x2c8>)
 80035b8:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80035c0:	7df9      	ldrb	r1, [r7, #23]
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	7dba      	ldrb	r2, [r7, #22]
 80035c8:	4870      	ldr	r0, [pc, #448]	; (800378c <Save_ECU+0x2cc>)
 80035ca:	9001      	str	r0, [sp, #4]
 80035cc:	4870      	ldr	r0, [pc, #448]	; (8003790 <Save_ECU+0x2d0>)
 80035ce:	9000      	str	r0, [sp, #0]
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f002 f92b 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 80035d6:	2303      	movs	r3, #3
 80035d8:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80035da:	2308      	movs	r3, #8
 80035dc:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.lambda >> 8;
 80035de:	4b6a      	ldr	r3, [pc, #424]	; (8003788 <Save_ECU+0x2c8>)
 80035e0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80035e4:	121b      	asrs	r3, r3, #8
 80035e6:	b21b      	sxth	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.lambda & 0xff;
 80035ec:	4b66      	ldr	r3, [pc, #408]	; (8003788 <Save_ECU+0x2c8>)
 80035ee:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.oil_temperature >> 8;
 80035f6:	4b64      	ldr	r3, [pc, #400]	; (8003788 <Save_ECU+0x2c8>)
 80035f8:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 80035fc:	121b      	asrs	r3, r3, #8
 80035fe:	b21b      	sxth	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.oil_temperature & 0xff;
 8003604:	4b60      	ldr	r3, [pc, #384]	; (8003788 <Save_ECU+0x2c8>)
 8003606:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800360a:	b2db      	uxtb	r3, r3
 800360c:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.wheel_speed_fl;
 800360e:	4b5e      	ldr	r3, [pc, #376]	; (8003788 <Save_ECU+0x2c8>)
 8003610:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8003614:	b2db      	uxtb	r3, r3
 8003616:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.wheel_speed_fr;
 8003618:	4b5b      	ldr	r3, [pc, #364]	; (8003788 <Save_ECU+0x2c8>)
 800361a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800361e:	b2db      	uxtb	r3, r3
 8003620:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.wheel_speed_rl;
 8003622:	4b59      	ldr	r3, [pc, #356]	; (8003788 <Save_ECU+0x2c8>)
 8003624:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8003628:	b2db      	uxtb	r3, r3
 800362a:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.wheel_speed_rr;
 800362c:	4b56      	ldr	r3, [pc, #344]	; (8003788 <Save_ECU+0x2c8>)
 800362e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8003632:	b2db      	uxtb	r3, r3
 8003634:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 8003636:	7df9      	ldrb	r1, [r7, #23]
 8003638:	f107 030c 	add.w	r3, r7, #12
 800363c:	7dba      	ldrb	r2, [r7, #22]
 800363e:	4853      	ldr	r0, [pc, #332]	; (800378c <Save_ECU+0x2cc>)
 8003640:	9001      	str	r0, [sp, #4]
 8003642:	4853      	ldr	r0, [pc, #332]	; (8003790 <Save_ECU+0x2d0>)
 8003644:	9000      	str	r0, [sp, #0]
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f002 f8f0 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 800364c:	2304      	movs	r3, #4
 800364e:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003650:	2308      	movs	r3, #8
 8003652:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.battery_voltage >> 8;
 8003654:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <Save_ECU+0x2c8>)
 8003656:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800365a:	121b      	asrs	r3, r3, #8
 800365c:	b21b      	sxth	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.battery_voltage & 0xff;
 8003662:	4b49      	ldr	r3, [pc, #292]	; (8003788 <Save_ECU+0x2c8>)
 8003664:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.fuel_flow_total >> 8;
 800366c:	4b46      	ldr	r3, [pc, #280]	; (8003788 <Save_ECU+0x2c8>)
 800366e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8003672:	121b      	asrs	r3, r3, #8
 8003674:	b21b      	sxth	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.fuel_flow_total & 0xff;
 800367a:	4b43      	ldr	r3, [pc, #268]	; (8003788 <Save_ECU+0x2c8>)
 800367c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8003680:	b2db      	uxtb	r3, r3
 8003682:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.gear & 0xff;
 8003684:	4b40      	ldr	r3, [pc, #256]	; (8003788 <Save_ECU+0x2c8>)
 8003686:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800368a:	b2db      	uxtb	r3, r3
 800368c:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.electro_fan & 0xff;
 800368e:	4b3e      	ldr	r3, [pc, #248]	; (8003788 <Save_ECU+0x2c8>)
 8003690:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.injection_bank_a_time >> 8;
 8003698:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <Save_ECU+0x2c8>)
 800369a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800369e:	121b      	asrs	r3, r3, #8
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.injection_bank_a_time & 0xff;
 80036a6:	4b38      	ldr	r3, [pc, #224]	; (8003788 <Save_ECU+0x2c8>)
 80036a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80036b0:	7df9      	ldrb	r1, [r7, #23]
 80036b2:	f107 030c 	add.w	r3, r7, #12
 80036b6:	7dba      	ldrb	r2, [r7, #22]
 80036b8:	4834      	ldr	r0, [pc, #208]	; (800378c <Save_ECU+0x2cc>)
 80036ba:	9001      	str	r0, [sp, #4]
 80036bc:	4834      	ldr	r0, [pc, #208]	; (8003790 <Save_ECU+0x2d0>)
 80036be:	9000      	str	r0, [sp, #0]
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f002 f8b3 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 4;
 80036c6:	2305      	movs	r3, #5
 80036c8:	75fb      	strb	r3, [r7, #23]
	length = 2;
 80036ca:	2302      	movs	r3, #2
 80036cc:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.lambda_correction >> 8;
 80036ce:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <Save_ECU+0x2c8>)
 80036d0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80036d4:	121b      	asrs	r3, r3, #8
 80036d6:	b21b      	sxth	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.lambda_correction & 0xff;
 80036dc:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <Save_ECU+0x2c8>)
 80036de:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	737b      	strb	r3, [r7, #13]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80036e6:	7df9      	ldrb	r1, [r7, #23]
 80036e8:	f107 030c 	add.w	r3, r7, #12
 80036ec:	7dba      	ldrb	r2, [r7, #22]
 80036ee:	4827      	ldr	r0, [pc, #156]	; (800378c <Save_ECU+0x2cc>)
 80036f0:	9001      	str	r0, [sp, #4]
 80036f2:	4827      	ldr	r0, [pc, #156]	; (8003790 <Save_ECU+0x2d0>)
 80036f4:	9000      	str	r0, [sp, #0]
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f002 f898 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 5;
 80036fc:	2306      	movs	r3, #6
 80036fe:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003700:	2308      	movs	r3, #8
 8003702:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.accel_long >> 8;
 8003704:	4b20      	ldr	r3, [pc, #128]	; (8003788 <Save_ECU+0x2c8>)
 8003706:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800370a:	121b      	asrs	r3, r3, #8
 800370c:	b21b      	sxth	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.accel_long & 0xff;
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <Save_ECU+0x2c8>)
 8003714:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003718:	b2db      	uxtb	r3, r3
 800371a:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.accel_lat >> 8;
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <Save_ECU+0x2c8>)
 800371e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8003722:	121b      	asrs	r3, r3, #8
 8003724:	b21b      	sxth	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.accel_lat & 0xff;
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <Save_ECU+0x2c8>)
 800372c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8003730:	b2db      	uxtb	r3, r3
 8003732:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.yaw_rate_pitch >> 8;
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <Save_ECU+0x2c8>)
 8003736:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 800373a:	121b      	asrs	r3, r3, #8
 800373c:	b21b      	sxth	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.yaw_rate_pitch & 0xff;
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <Save_ECU+0x2c8>)
 8003744:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8003748:	b2db      	uxtb	r3, r3
 800374a:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.yaw_rate_roll >> 8;
 800374c:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <Save_ECU+0x2c8>)
 800374e:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8003752:	121b      	asrs	r3, r3, #8
 8003754:	b21b      	sxth	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.yaw_rate_roll & 0xff;
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <Save_ECU+0x2c8>)
 800375c:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8003760:	b2db      	uxtb	r3, r3
 8003762:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 8003764:	7df9      	ldrb	r1, [r7, #23]
 8003766:	f107 030c 	add.w	r3, r7, #12
 800376a:	7dba      	ldrb	r2, [r7, #22]
 800376c:	4807      	ldr	r0, [pc, #28]	; (800378c <Save_ECU+0x2cc>)
 800376e:	9001      	str	r0, [sp, #4]
 8003770:	4807      	ldr	r0, [pc, #28]	; (8003790 <Save_ECU+0x2d0>)
 8003772:	9000      	str	r0, [sp, #0]
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f002 f859 	bl	800582c <Principal_Datalogger_Save_Buffer>

	return;
 800377a:	e000      	b.n	800377e <Save_ECU+0x2be>
		return;
 800377c:	bf00      	nop
}
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	200066fe 	.word	0x200066fe
 8003788:	20000590 	.word	0x20000590
 800378c:	200056a8 	.word	0x200056a8
 8003790:	20004640 	.word	0x20004640

08003794 <Save_PDM>:

static void Save_PDM(CAN_HandleTypeDef* hcan)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
	uint8_t id = 0, length = 0, buffer[8];
 800379c:	2300      	movs	r3, #0
 800379e:	75fb      	strb	r3, [r7, #23]
 80037a0:	2300      	movs	r3, #0
 80037a2:	75bb      	strb	r3, [r7, #22]

	if(flagDatalogger != DL_SAVE)
 80037a4:	4b9a      	ldr	r3, [pc, #616]	; (8003a10 <Save_PDM+0x27c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 812d 	bne.w	8003a08 <Save_PDM+0x274>
		return;

	id = PDM_FIRST_ID;
 80037ae:	230a      	movs	r3, #10
 80037b0:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80037b2:	2308      	movs	r3, #8
 80037b4:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[0] << 8;
 80037b6:	2300      	movs	r3, #0
 80037b8:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[0] & 0xff;
 80037ba:	4b96      	ldr	r3, [pc, #600]	; (8003a14 <Save_PDM+0x280>)
 80037bc:	889b      	ldrh	r3, [r3, #4]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[1] << 8;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[1] & 0xff;
 80037c6:	4b93      	ldr	r3, [pc, #588]	; (8003a14 <Save_PDM+0x280>)
 80037c8:	88db      	ldrh	r3, [r3, #6]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[2] << 8;
 80037ce:	2300      	movs	r3, #0
 80037d0:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[2] & 0xff;
 80037d2:	4b90      	ldr	r3, [pc, #576]	; (8003a14 <Save_PDM+0x280>)
 80037d4:	891b      	ldrh	r3, [r3, #8]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[3] << 8;
 80037da:	2300      	movs	r3, #0
 80037dc:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[3] & 0xff;
 80037de:	4b8d      	ldr	r3, [pc, #564]	; (8003a14 <Save_PDM+0x280>)
 80037e0:	895b      	ldrh	r3, [r3, #10]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80037e6:	7df9      	ldrb	r1, [r7, #23]
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	7dba      	ldrb	r2, [r7, #22]
 80037ee:	488a      	ldr	r0, [pc, #552]	; (8003a18 <Save_PDM+0x284>)
 80037f0:	9001      	str	r0, [sp, #4]
 80037f2:	488a      	ldr	r0, [pc, #552]	; (8003a1c <Save_PDM+0x288>)
 80037f4:	9000      	str	r0, [sp, #0]
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f002 f818 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 80037fc:	230b      	movs	r3, #11
 80037fe:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003800:	2308      	movs	r3, #8
 8003802:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[4] << 8;
 8003804:	2300      	movs	r3, #0
 8003806:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[4] & 0xff;
 8003808:	4b82      	ldr	r3, [pc, #520]	; (8003a14 <Save_PDM+0x280>)
 800380a:	899b      	ldrh	r3, [r3, #12]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[5] << 8;
 8003810:	2300      	movs	r3, #0
 8003812:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[5] & 0xff;
 8003814:	4b7f      	ldr	r3, [pc, #508]	; (8003a14 <Save_PDM+0x280>)
 8003816:	89db      	ldrh	r3, [r3, #14]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[6] << 8;
 800381c:	2300      	movs	r3, #0
 800381e:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[6] & 0xff;
 8003820:	4b7c      	ldr	r3, [pc, #496]	; (8003a14 <Save_PDM+0x280>)
 8003822:	8a1b      	ldrh	r3, [r3, #16]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[7] << 8;
 8003828:	2300      	movs	r3, #0
 800382a:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[7] & 0xff;
 800382c:	4b79      	ldr	r3, [pc, #484]	; (8003a14 <Save_PDM+0x280>)
 800382e:	8a5b      	ldrh	r3, [r3, #18]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 8003834:	7df9      	ldrb	r1, [r7, #23]
 8003836:	f107 030c 	add.w	r3, r7, #12
 800383a:	7dba      	ldrb	r2, [r7, #22]
 800383c:	4876      	ldr	r0, [pc, #472]	; (8003a18 <Save_PDM+0x284>)
 800383e:	9001      	str	r0, [sp, #4]
 8003840:	4876      	ldr	r0, [pc, #472]	; (8003a1c <Save_PDM+0x288>)
 8003842:	9000      	str	r0, [sp, #0]
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f001 fff1 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 800384a:	230c      	movs	r3, #12
 800384c:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800384e:	2308      	movs	r3, #8
 8003850:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[8] << 8;
 8003852:	2300      	movs	r3, #0
 8003854:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[8] & 0xff;
 8003856:	4b6f      	ldr	r3, [pc, #444]	; (8003a14 <Save_PDM+0x280>)
 8003858:	8a9b      	ldrh	r3, [r3, #20]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[9] << 8;
 800385e:	2300      	movs	r3, #0
 8003860:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[9] & 0xff;
 8003862:	4b6c      	ldr	r3, [pc, #432]	; (8003a14 <Save_PDM+0x280>)
 8003864:	8adb      	ldrh	r3, [r3, #22]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[10] << 8;
 800386a:	2300      	movs	r3, #0
 800386c:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[10] & 0xff;
 800386e:	4b69      	ldr	r3, [pc, #420]	; (8003a14 <Save_PDM+0x280>)
 8003870:	8b1b      	ldrh	r3, [r3, #24]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[11] << 8;
 8003876:	2300      	movs	r3, #0
 8003878:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[11] & 0xff;
 800387a:	4b66      	ldr	r3, [pc, #408]	; (8003a14 <Save_PDM+0x280>)
 800387c:	8b5b      	ldrh	r3, [r3, #26]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 8003882:	7df9      	ldrb	r1, [r7, #23]
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	7dba      	ldrb	r2, [r7, #22]
 800388a:	4863      	ldr	r0, [pc, #396]	; (8003a18 <Save_PDM+0x284>)
 800388c:	9001      	str	r0, [sp, #4]
 800388e:	4863      	ldr	r0, [pc, #396]	; (8003a1c <Save_PDM+0x288>)
 8003890:	9000      	str	r0, [sp, #0]
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f001 ffca 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 8003898:	230d      	movs	r3, #13
 800389a:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800389c:	2308      	movs	r3, #8
 800389e:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[12] << 8;
 80038a0:	2300      	movs	r3, #0
 80038a2:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[12] & 0xff;
 80038a4:	4b5b      	ldr	r3, [pc, #364]	; (8003a14 <Save_PDM+0x280>)
 80038a6:	8b9b      	ldrh	r3, [r3, #28]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[13] << 8;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[13] & 0xff;
 80038b0:	4b58      	ldr	r3, [pc, #352]	; (8003a14 <Save_PDM+0x280>)
 80038b2:	8bdb      	ldrh	r3, [r3, #30]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[14] << 8;
 80038b8:	2300      	movs	r3, #0
 80038ba:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[14] & 0xff;
 80038bc:	4b55      	ldr	r3, [pc, #340]	; (8003a14 <Save_PDM+0x280>)
 80038be:	8c1b      	ldrh	r3, [r3, #32]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[15] << 8;
 80038c4:	2300      	movs	r3, #0
 80038c6:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[15] & 0xff;
 80038c8:	4b52      	ldr	r3, [pc, #328]	; (8003a14 <Save_PDM+0x280>)
 80038ca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80038d0:	7df9      	ldrb	r1, [r7, #23]
 80038d2:	f107 030c 	add.w	r3, r7, #12
 80038d6:	7dba      	ldrb	r2, [r7, #22]
 80038d8:	484f      	ldr	r0, [pc, #316]	; (8003a18 <Save_PDM+0x284>)
 80038da:	9001      	str	r0, [sp, #4]
 80038dc:	484f      	ldr	r0, [pc, #316]	; (8003a1c <Save_PDM+0x288>)
 80038de:	9000      	str	r0, [sp, #0]
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f001 ffa3 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 80038e6:	230e      	movs	r3, #14
 80038e8:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80038ea:	2308      	movs	r3, #8
 80038ec:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Tempetature_Buffer[0] << 8;
 80038ee:	2300      	movs	r3, #0
 80038f0:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Tempetature_Buffer[0] & 0xff;
 80038f2:	4b48      	ldr	r3, [pc, #288]	; (8003a14 <Save_PDM+0x280>)
 80038f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Tempetature_Buffer[1] << 8;
 80038fa:	2300      	movs	r3, #0
 80038fc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Tempetature_Buffer[1] & 0xff;
 80038fe:	4b45      	ldr	r3, [pc, #276]	; (8003a14 <Save_PDM+0x280>)
 8003900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Tempetature_Buffer[2] << 8;
 8003906:	2300      	movs	r3, #0
 8003908:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Tempetature_Buffer[2] & 0xff;
 800390a:	4b42      	ldr	r3, [pc, #264]	; (8003a14 <Save_PDM+0x280>)
 800390c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800390e:	b2db      	uxtb	r3, r3
 8003910:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Tempetature_Buffer[3] << 8;
 8003912:	2300      	movs	r3, #0
 8003914:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Tempetature_Buffer[3] & 0xff;
 8003916:	4b3f      	ldr	r3, [pc, #252]	; (8003a14 <Save_PDM+0x280>)
 8003918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800391a:	b2db      	uxtb	r3, r3
 800391c:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 800391e:	7df9      	ldrb	r1, [r7, #23]
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	7dba      	ldrb	r2, [r7, #22]
 8003926:	483c      	ldr	r0, [pc, #240]	; (8003a18 <Save_PDM+0x284>)
 8003928:	9001      	str	r0, [sp, #4]
 800392a:	483c      	ldr	r0, [pc, #240]	; (8003a1c <Save_PDM+0x288>)
 800392c:	9000      	str	r0, [sp, #0]
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f001 ff7c 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 8003934:	230f      	movs	r3, #15
 8003936:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003938:	2308      	movs	r3, #8
 800393a:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Tempetature_Buffer[4] << 8;
 800393c:	2300      	movs	r3, #0
 800393e:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Tempetature_Buffer[4] & 0xff;
 8003940:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <Save_PDM+0x280>)
 8003942:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003944:	b2db      	uxtb	r3, r3
 8003946:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Tempetature_Buffer[5] << 8;
 8003948:	2300      	movs	r3, #0
 800394a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Tempetature_Buffer[5] & 0xff;
 800394c:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <Save_PDM+0x280>)
 800394e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003950:	b2db      	uxtb	r3, r3
 8003952:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Tempetature_Buffer[6] << 8;
 8003954:	2300      	movs	r3, #0
 8003956:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Tempetature_Buffer[6] & 0xff;
 8003958:	4b2e      	ldr	r3, [pc, #184]	; (8003a14 <Save_PDM+0x280>)
 800395a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800395c:	b2db      	uxtb	r3, r3
 800395e:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Tempetature_Buffer[7] << 8;
 8003960:	2300      	movs	r3, #0
 8003962:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Tempetature_Buffer[7] & 0xff;
 8003964:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <Save_PDM+0x280>)
 8003966:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003968:	b2db      	uxtb	r3, r3
 800396a:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 800396c:	7df9      	ldrb	r1, [r7, #23]
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	7dba      	ldrb	r2, [r7, #22]
 8003974:	4828      	ldr	r0, [pc, #160]	; (8003a18 <Save_PDM+0x284>)
 8003976:	9001      	str	r0, [sp, #4]
 8003978:	4828      	ldr	r0, [pc, #160]	; (8003a1c <Save_PDM+0x288>)
 800397a:	9000      	str	r0, [sp, #0]
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f001 ff55 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 8003982:	2310      	movs	r3, #16
 8003984:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003986:	2308      	movs	r3, #8
 8003988:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Duty_Cycle_Buffer[0] << 8;
 800398a:	2300      	movs	r3, #0
 800398c:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Duty_Cycle_Buffer[0] & 0xff;
 800398e:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <Save_PDM+0x280>)
 8003990:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003992:	b2db      	uxtb	r3, r3
 8003994:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Duty_Cycle_Buffer[1] << 8;
 8003996:	2300      	movs	r3, #0
 8003998:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Duty_Cycle_Buffer[1] & 0xff;
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <Save_PDM+0x280>)
 800399c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Duty_Cycle_Buffer[2] << 8;
 80039a2:	2300      	movs	r3, #0
 80039a4:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Duty_Cycle_Buffer[2] & 0xff;
 80039a6:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <Save_PDM+0x280>)
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Duty_Cycle_Buffer[3] << 8;
 80039ae:	2300      	movs	r3, #0
 80039b0:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Duty_Cycle_Buffer[3] & 0xff;
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <Save_PDM+0x280>)
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80039ba:	7df9      	ldrb	r1, [r7, #23]
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	7dba      	ldrb	r2, [r7, #22]
 80039c2:	4815      	ldr	r0, [pc, #84]	; (8003a18 <Save_PDM+0x284>)
 80039c4:	9001      	str	r0, [sp, #4]
 80039c6:	4815      	ldr	r0, [pc, #84]	; (8003a1c <Save_PDM+0x288>)
 80039c8:	9000      	str	r0, [sp, #0]
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f001 ff2e 	bl	800582c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 80039d0:	2311      	movs	r3, #17
 80039d2:	75fb      	strb	r3, [r7, #23]
	length = 4;
 80039d4:	2304      	movs	r3, #4
 80039d6:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Input_Voltage << 8;
 80039d8:	2300      	movs	r3, #0
 80039da:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Input_Voltage & 0xff;
 80039dc:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <Save_PDM+0x280>)
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Output_Verify << 8;
 80039e4:	2300      	movs	r3, #0
 80039e6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Output_Verify & 0xff;
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <Save_PDM+0x280>)
 80039ea:	885b      	ldrh	r3, [r3, #2]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	73fb      	strb	r3, [r7, #15]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80039f0:	7df9      	ldrb	r1, [r7, #23]
 80039f2:	f107 030c 	add.w	r3, r7, #12
 80039f6:	7dba      	ldrb	r2, [r7, #22]
 80039f8:	4807      	ldr	r0, [pc, #28]	; (8003a18 <Save_PDM+0x284>)
 80039fa:	9001      	str	r0, [sp, #4]
 80039fc:	4807      	ldr	r0, [pc, #28]	; (8003a1c <Save_PDM+0x288>)
 80039fe:	9000      	str	r0, [sp, #0]
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f001 ff13 	bl	800582c <Principal_Datalogger_Save_Buffer>

	return;
 8003a06:	e000      	b.n	8003a0a <Save_PDM+0x276>
		return;
 8003a08:	bf00      	nop
}
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	200066fe 	.word	0x200066fe
 8003a14:	200005f8 	.word	0x200005f8
 8003a18:	200056a8 	.word	0x200056a8
 8003a1c:	20004640 	.word	0x20004640

08003a20 <Principal_Init>:

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c);
static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c);

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
//	if(Load_EEPROM(hi2c) != HAL_OK)
		Principal_Hard_Code_Config();
 8003a2c:	f000 fcde 	bl	80043ec <Principal_Hard_Code_Config>
//	HAL_RTCEx_SetCoarseCalib(&hrtc, RTC_CALIBSIGN_NEGATIVE, 55);
//	HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
//	HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 8003a30:	2101      	movs	r1, #1
 8003a32:	4813      	ldr	r0, [pc, #76]	; (8003a80 <Principal_Init+0x60>)
 8003a34:	f008 fbb4 	bl	800c1a0 <HAL_RTCEx_BKUPRead>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d103      	bne.n	8003a4a <Principal_Init+0x2a>
		flagRTC = RTC_OK;
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <Principal_Init+0x64>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e002      	b.n	8003a50 <Principal_Init+0x30>
	else
		flagRTC = RTC_LOST;
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <Principal_Init+0x64>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[6], 6);
 8003a50:	2206      	movs	r2, #6
 8003a52:	490d      	ldr	r1, [pc, #52]	; (8003a88 <Principal_Init+0x68>)
 8003a54:	480d      	ldr	r0, [pc, #52]	; (8003a8c <Principal_Init+0x6c>)
 8003a56:	f002 feb7 	bl	80067c8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 6);
 8003a5a:	2206      	movs	r2, #6
 8003a5c:	490c      	ldr	r1, [pc, #48]	; (8003a90 <Principal_Init+0x70>)
 8003a5e:	480d      	ldr	r0, [pc, #52]	; (8003a94 <Principal_Init+0x74>)
 8003a60:	f002 feb2 	bl	80067c8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f00a fa83 	bl	800df70 <HAL_TIM_Base_Start_IT>

	Principal_Datalogger_Init(&fatfsStruct);
 8003a6a:	480b      	ldr	r0, [pc, #44]	; (8003a98 <Principal_Init+0x78>)
 8003a6c:	f001 fd8c 	bl	8005588 <Principal_Datalogger_Init>

	Principal_CAN_Start(hcan);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7fe fbf9 	bl	8002268 <Principal_CAN_Start>
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000380 	.word	0x20000380
 8003a84:	200066ff 	.word	0x200066ff
 8003a88:	20000584 	.word	0x20000584
 8003a8c:	200001b4 	.word	0x200001b4
 8003a90:	20000578 	.word	0x20000578
 8003a94:	200001fc 	.word	0x200001fc
 8003a98:	20004670 	.word	0x20004670

08003a9c <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data, uint32_t length)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
	HAL_SD_StateTypeDef retVal = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	75fb      	strb	r3, [r7, #23]

	switch(data[0])
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	f200 847e 	bhi.w	80043b2 <Principal_Receive_Config+0x916>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <Principal_Receive_Config+0x20>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003f61 	.word	0x08003f61
 8003ac4:	080042c1 	.word	0x080042c1
 8003ac8:	0800433f 	.word	0x0800433f
	{
		case 0:
			if(length != 8)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	f040 8471 	bne.w	80043b6 <Principal_Receive_Config+0x91a>
				break;

			__BUFFER_TO_FREQ(data[1], perMsg[ANALOG_1_4]);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	2b0a      	cmp	r3, #10
 8003ade:	d847      	bhi.n	8003b70 <Principal_Receive_Config+0xd4>
 8003ae0:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <Principal_Receive_Config+0x4c>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003b15 	.word	0x08003b15
 8003aec:	08003b1f 	.word	0x08003b1f
 8003af0:	08003b29 	.word	0x08003b29
 8003af4:	08003b31 	.word	0x08003b31
 8003af8:	08003b39 	.word	0x08003b39
 8003afc:	08003b41 	.word	0x08003b41
 8003b00:	08003b49 	.word	0x08003b49
 8003b04:	08003b51 	.word	0x08003b51
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b61 	.word	0x08003b61
 8003b10:	08003b69 	.word	0x08003b69
 8003b14:	4ba8      	ldr	r3, [pc, #672]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	e02b      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b1e:	4ba6      	ldr	r3, [pc, #664]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b24:	801a      	strh	r2, [r3, #0]
 8003b26:	e026      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b28:	4ba3      	ldr	r3, [pc, #652]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b2a:	22c8      	movs	r2, #200	; 0xc8
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	e022      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b30:	4ba1      	ldr	r3, [pc, #644]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b32:	2264      	movs	r2, #100	; 0x64
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	e01e      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b38:	4b9f      	ldr	r3, [pc, #636]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b3a:	2232      	movs	r2, #50	; 0x32
 8003b3c:	801a      	strh	r2, [r3, #0]
 8003b3e:	e01a      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b40:	4b9d      	ldr	r3, [pc, #628]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b42:	2228      	movs	r2, #40	; 0x28
 8003b44:	801a      	strh	r2, [r3, #0]
 8003b46:	e016      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b48:	4b9b      	ldr	r3, [pc, #620]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b4a:	2214      	movs	r2, #20
 8003b4c:	801a      	strh	r2, [r3, #0]
 8003b4e:	e012      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b50:	4b99      	ldr	r3, [pc, #612]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b52:	220a      	movs	r2, #10
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	e00e      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b58:	4b97      	ldr	r3, [pc, #604]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b5a:	2205      	movs	r2, #5
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	e00a      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b60:	4b95      	ldr	r3, [pc, #596]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b62:	2204      	movs	r2, #4
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	e006      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b68:	4b93      	ldr	r3, [pc, #588]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	e002      	b.n	8003b76 <Principal_Receive_Config+0xda>
 8003b70:	4b91      	ldr	r3, [pc, #580]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perMsg[ANALOG_5_8]);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	2b0a      	cmp	r3, #10
 8003b82:	d847      	bhi.n	8003c14 <Principal_Receive_Config+0x178>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <Principal_Receive_Config+0xf0>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bc3 	.word	0x08003bc3
 8003b94:	08003bcd 	.word	0x08003bcd
 8003b98:	08003bd5 	.word	0x08003bd5
 8003b9c:	08003bdd 	.word	0x08003bdd
 8003ba0:	08003be5 	.word	0x08003be5
 8003ba4:	08003bed 	.word	0x08003bed
 8003ba8:	08003bf5 	.word	0x08003bf5
 8003bac:	08003bfd 	.word	0x08003bfd
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003c0d 	.word	0x08003c0d
 8003bb8:	4b7f      	ldr	r3, [pc, #508]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003bba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bbe:	805a      	strh	r2, [r3, #2]
 8003bc0:	e02b      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003bc2:	4b7d      	ldr	r3, [pc, #500]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003bc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bc8:	805a      	strh	r2, [r3, #2]
 8003bca:	e026      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003bcc:	4b7a      	ldr	r3, [pc, #488]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003bce:	22c8      	movs	r2, #200	; 0xc8
 8003bd0:	805a      	strh	r2, [r3, #2]
 8003bd2:	e022      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003bd4:	4b78      	ldr	r3, [pc, #480]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003bd6:	2264      	movs	r2, #100	; 0x64
 8003bd8:	805a      	strh	r2, [r3, #2]
 8003bda:	e01e      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003bdc:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003bde:	2232      	movs	r2, #50	; 0x32
 8003be0:	805a      	strh	r2, [r3, #2]
 8003be2:	e01a      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003be4:	4b74      	ldr	r3, [pc, #464]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003be6:	2228      	movs	r2, #40	; 0x28
 8003be8:	805a      	strh	r2, [r3, #2]
 8003bea:	e016      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003bec:	4b72      	ldr	r3, [pc, #456]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003bee:	2214      	movs	r2, #20
 8003bf0:	805a      	strh	r2, [r3, #2]
 8003bf2:	e012      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003bf4:	4b70      	ldr	r3, [pc, #448]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003bf6:	220a      	movs	r2, #10
 8003bf8:	805a      	strh	r2, [r3, #2]
 8003bfa:	e00e      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003bfc:	4b6e      	ldr	r3, [pc, #440]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003bfe:	2205      	movs	r2, #5
 8003c00:	805a      	strh	r2, [r3, #2]
 8003c02:	e00a      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003c04:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c06:	2204      	movs	r2, #4
 8003c08:	805a      	strh	r2, [r3, #2]
 8003c0a:	e006      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003c0c:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c0e:	2202      	movs	r2, #2
 8003c10:	805a      	strh	r2, [r3, #2]
 8003c12:	e002      	b.n	8003c1a <Principal_Receive_Config+0x17e>
 8003c14:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	805a      	strh	r2, [r3, #2]
 8003c1a:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perMsg[ANALOG_9_12]);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	3303      	adds	r3, #3
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	2b0a      	cmp	r3, #10
 8003c26:	d847      	bhi.n	8003cb8 <Principal_Receive_Config+0x21c>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <Principal_Receive_Config+0x194>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c5d 	.word	0x08003c5d
 8003c34:	08003c67 	.word	0x08003c67
 8003c38:	08003c71 	.word	0x08003c71
 8003c3c:	08003c79 	.word	0x08003c79
 8003c40:	08003c81 	.word	0x08003c81
 8003c44:	08003c89 	.word	0x08003c89
 8003c48:	08003c91 	.word	0x08003c91
 8003c4c:	08003c99 	.word	0x08003c99
 8003c50:	08003ca1 	.word	0x08003ca1
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003cb1 	.word	0x08003cb1
 8003c5c:	4b56      	ldr	r3, [pc, #344]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c62:	809a      	strh	r2, [r3, #4]
 8003c64:	e02b      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c6c:	809a      	strh	r2, [r3, #4]
 8003c6e:	e026      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003c70:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c72:	22c8      	movs	r2, #200	; 0xc8
 8003c74:	809a      	strh	r2, [r3, #4]
 8003c76:	e022      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003c78:	4b4f      	ldr	r3, [pc, #316]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c7a:	2264      	movs	r2, #100	; 0x64
 8003c7c:	809a      	strh	r2, [r3, #4]
 8003c7e:	e01e      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003c80:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c82:	2232      	movs	r2, #50	; 0x32
 8003c84:	809a      	strh	r2, [r3, #4]
 8003c86:	e01a      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003c88:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c8a:	2228      	movs	r2, #40	; 0x28
 8003c8c:	809a      	strh	r2, [r3, #4]
 8003c8e:	e016      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003c90:	4b49      	ldr	r3, [pc, #292]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c92:	2214      	movs	r2, #20
 8003c94:	809a      	strh	r2, [r3, #4]
 8003c96:	e012      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003c98:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003c9a:	220a      	movs	r2, #10
 8003c9c:	809a      	strh	r2, [r3, #4]
 8003c9e:	e00e      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003ca0:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003ca2:	2205      	movs	r2, #5
 8003ca4:	809a      	strh	r2, [r3, #4]
 8003ca6:	e00a      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003ca8:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003caa:	2204      	movs	r2, #4
 8003cac:	809a      	strh	r2, [r3, #4]
 8003cae:	e006      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003cb0:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	809a      	strh	r2, [r3, #4]
 8003cb6:	e002      	b.n	8003cbe <Principal_Receive_Config+0x222>
 8003cb8:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	809a      	strh	r2, [r3, #4]
 8003cbe:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perMsg[RTC_MSG]);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	2b0a      	cmp	r3, #10
 8003cca:	d847      	bhi.n	8003d5c <Principal_Receive_Config+0x2c0>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <Principal_Receive_Config+0x238>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003d01 	.word	0x08003d01
 8003cd8:	08003d0b 	.word	0x08003d0b
 8003cdc:	08003d15 	.word	0x08003d15
 8003ce0:	08003d1d 	.word	0x08003d1d
 8003ce4:	08003d25 	.word	0x08003d25
 8003ce8:	08003d2d 	.word	0x08003d2d
 8003cec:	08003d35 	.word	0x08003d35
 8003cf0:	08003d3d 	.word	0x08003d3d
 8003cf4:	08003d45 	.word	0x08003d45
 8003cf8:	08003d4d 	.word	0x08003d4d
 8003cfc:	08003d55 	.word	0x08003d55
 8003d00:	4b2d      	ldr	r3, [pc, #180]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d06:	80da      	strh	r2, [r3, #6]
 8003d08:	e02b      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d10:	80da      	strh	r2, [r3, #6]
 8003d12:	e026      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d16:	22c8      	movs	r2, #200	; 0xc8
 8003d18:	80da      	strh	r2, [r3, #6]
 8003d1a:	e022      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d1c:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d1e:	2264      	movs	r2, #100	; 0x64
 8003d20:	80da      	strh	r2, [r3, #6]
 8003d22:	e01e      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d26:	2232      	movs	r2, #50	; 0x32
 8003d28:	80da      	strh	r2, [r3, #6]
 8003d2a:	e01a      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d2c:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d2e:	2228      	movs	r2, #40	; 0x28
 8003d30:	80da      	strh	r2, [r3, #6]
 8003d32:	e016      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d34:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d36:	2214      	movs	r2, #20
 8003d38:	80da      	strh	r2, [r3, #6]
 8003d3a:	e012      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d3c:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d3e:	220a      	movs	r2, #10
 8003d40:	80da      	strh	r2, [r3, #6]
 8003d42:	e00e      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d44:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d46:	2205      	movs	r2, #5
 8003d48:	80da      	strh	r2, [r3, #6]
 8003d4a:	e00a      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d4e:	2204      	movs	r2, #4
 8003d50:	80da      	strh	r2, [r3, #6]
 8003d52:	e006      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d56:	2202      	movs	r2, #2
 8003d58:	80da      	strh	r2, [r3, #6]
 8003d5a:	e002      	b.n	8003d62 <Principal_Receive_Config+0x2c6>
 8003d5c:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	80da      	strh	r2, [r3, #6]
 8003d62:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perMsg[VERIFY_MSG]);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	3305      	adds	r3, #5
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	2b0a      	cmp	r3, #10
 8003d6e:	d849      	bhi.n	8003e04 <Principal_Receive_Config+0x368>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <Principal_Receive_Config+0x2dc>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003da5 	.word	0x08003da5
 8003d7c:	08003daf 	.word	0x08003daf
 8003d80:	08003dbd 	.word	0x08003dbd
 8003d84:	08003dc5 	.word	0x08003dc5
 8003d88:	08003dcd 	.word	0x08003dcd
 8003d8c:	08003dd5 	.word	0x08003dd5
 8003d90:	08003ddd 	.word	0x08003ddd
 8003d94:	08003de5 	.word	0x08003de5
 8003d98:	08003ded 	.word	0x08003ded
 8003d9c:	08003df5 	.word	0x08003df5
 8003da0:	08003dfd 	.word	0x08003dfd
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003da6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003daa:	811a      	strh	r2, [r3, #8]
 8003dac:	e02d      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003dae:	4b02      	ldr	r3, [pc, #8]	; (8003db8 <Principal_Receive_Config+0x31c>)
 8003db0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003db4:	811a      	strh	r2, [r3, #8]
 8003db6:	e028      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003db8:	20006728 	.word	0x20006728
 8003dbc:	4ba8      	ldr	r3, [pc, #672]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003dbe:	22c8      	movs	r2, #200	; 0xc8
 8003dc0:	811a      	strh	r2, [r3, #8]
 8003dc2:	e022      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003dc4:	4ba6      	ldr	r3, [pc, #664]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003dc6:	2264      	movs	r2, #100	; 0x64
 8003dc8:	811a      	strh	r2, [r3, #8]
 8003dca:	e01e      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003dcc:	4ba4      	ldr	r3, [pc, #656]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003dce:	2232      	movs	r2, #50	; 0x32
 8003dd0:	811a      	strh	r2, [r3, #8]
 8003dd2:	e01a      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003dd4:	4ba2      	ldr	r3, [pc, #648]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003dd6:	2228      	movs	r2, #40	; 0x28
 8003dd8:	811a      	strh	r2, [r3, #8]
 8003dda:	e016      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003ddc:	4ba0      	ldr	r3, [pc, #640]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003dde:	2214      	movs	r2, #20
 8003de0:	811a      	strh	r2, [r3, #8]
 8003de2:	e012      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003de4:	4b9e      	ldr	r3, [pc, #632]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003de6:	220a      	movs	r2, #10
 8003de8:	811a      	strh	r2, [r3, #8]
 8003dea:	e00e      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003dec:	4b9c      	ldr	r3, [pc, #624]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003dee:	2205      	movs	r2, #5
 8003df0:	811a      	strh	r2, [r3, #8]
 8003df2:	e00a      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003df4:	4b9a      	ldr	r3, [pc, #616]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003df6:	2204      	movs	r2, #4
 8003df8:	811a      	strh	r2, [r3, #8]
 8003dfa:	e006      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003dfc:	4b98      	ldr	r3, [pc, #608]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003dfe:	2202      	movs	r2, #2
 8003e00:	811a      	strh	r2, [r3, #8]
 8003e02:	e002      	b.n	8003e0a <Principal_Receive_Config+0x36e>
 8003e04:	4b96      	ldr	r3, [pc, #600]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	811a      	strh	r2, [r3, #8]
 8003e0a:	bf00      	nop
			__BUFFER_TO_FREQ(data[6], perMsg[ECU_SAVE]);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	3306      	adds	r3, #6
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	2b0a      	cmp	r3, #10
 8003e16:	d847      	bhi.n	8003ea8 <Principal_Receive_Config+0x40c>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <Principal_Receive_Config+0x384>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e4d 	.word	0x08003e4d
 8003e24:	08003e57 	.word	0x08003e57
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e69 	.word	0x08003e69
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e79 	.word	0x08003e79
 8003e38:	08003e81 	.word	0x08003e81
 8003e3c:	08003e89 	.word	0x08003e89
 8003e40:	08003e91 	.word	0x08003e91
 8003e44:	08003e99 	.word	0x08003e99
 8003e48:	08003ea1 	.word	0x08003ea1
 8003e4c:	4b84      	ldr	r3, [pc, #528]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e52:	819a      	strh	r2, [r3, #12]
 8003e54:	e02b      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003e56:	4b82      	ldr	r3, [pc, #520]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e5c:	819a      	strh	r2, [r3, #12]
 8003e5e:	e026      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003e60:	4b7f      	ldr	r3, [pc, #508]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e62:	22c8      	movs	r2, #200	; 0xc8
 8003e64:	819a      	strh	r2, [r3, #12]
 8003e66:	e022      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003e68:	4b7d      	ldr	r3, [pc, #500]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e6a:	2264      	movs	r2, #100	; 0x64
 8003e6c:	819a      	strh	r2, [r3, #12]
 8003e6e:	e01e      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003e70:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e72:	2232      	movs	r2, #50	; 0x32
 8003e74:	819a      	strh	r2, [r3, #12]
 8003e76:	e01a      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003e78:	4b79      	ldr	r3, [pc, #484]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e7a:	2228      	movs	r2, #40	; 0x28
 8003e7c:	819a      	strh	r2, [r3, #12]
 8003e7e:	e016      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003e80:	4b77      	ldr	r3, [pc, #476]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e82:	2214      	movs	r2, #20
 8003e84:	819a      	strh	r2, [r3, #12]
 8003e86:	e012      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003e88:	4b75      	ldr	r3, [pc, #468]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e8a:	220a      	movs	r2, #10
 8003e8c:	819a      	strh	r2, [r3, #12]
 8003e8e:	e00e      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003e90:	4b73      	ldr	r3, [pc, #460]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e92:	2205      	movs	r2, #5
 8003e94:	819a      	strh	r2, [r3, #12]
 8003e96:	e00a      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003e98:	4b71      	ldr	r3, [pc, #452]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	819a      	strh	r2, [r3, #12]
 8003e9e:	e006      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003ea0:	4b6f      	ldr	r3, [pc, #444]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	819a      	strh	r2, [r3, #12]
 8003ea6:	e002      	b.n	8003eae <Principal_Receive_Config+0x412>
 8003ea8:	4b6d      	ldr	r3, [pc, #436]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	819a      	strh	r2, [r3, #12]
 8003eae:	bf00      	nop
			__BUFFER_TO_FREQ(data[7], perMsg[PDM_SAVE]);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	3307      	adds	r3, #7
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	2b0a      	cmp	r3, #10
 8003eba:	d847      	bhi.n	8003f4c <Principal_Receive_Config+0x4b0>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <Principal_Receive_Config+0x428>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ef1 	.word	0x08003ef1
 8003ec8:	08003efb 	.word	0x08003efb
 8003ecc:	08003f05 	.word	0x08003f05
 8003ed0:	08003f0d 	.word	0x08003f0d
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f1d 	.word	0x08003f1d
 8003edc:	08003f25 	.word	0x08003f25
 8003ee0:	08003f2d 	.word	0x08003f2d
 8003ee4:	08003f35 	.word	0x08003f35
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003f45 	.word	0x08003f45
 8003ef0:	4b5b      	ldr	r3, [pc, #364]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003ef2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ef6:	81da      	strh	r2, [r3, #14]
 8003ef8:	e02b      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003efa:	4b59      	ldr	r3, [pc, #356]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003efc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f00:	81da      	strh	r2, [r3, #14]
 8003f02:	e026      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003f04:	4b56      	ldr	r3, [pc, #344]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003f06:	22c8      	movs	r2, #200	; 0xc8
 8003f08:	81da      	strh	r2, [r3, #14]
 8003f0a:	e022      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003f0c:	4b54      	ldr	r3, [pc, #336]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003f0e:	2264      	movs	r2, #100	; 0x64
 8003f10:	81da      	strh	r2, [r3, #14]
 8003f12:	e01e      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003f14:	4b52      	ldr	r3, [pc, #328]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003f16:	2232      	movs	r2, #50	; 0x32
 8003f18:	81da      	strh	r2, [r3, #14]
 8003f1a:	e01a      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003f1c:	4b50      	ldr	r3, [pc, #320]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003f1e:	2228      	movs	r2, #40	; 0x28
 8003f20:	81da      	strh	r2, [r3, #14]
 8003f22:	e016      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003f24:	4b4e      	ldr	r3, [pc, #312]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003f26:	2214      	movs	r2, #20
 8003f28:	81da      	strh	r2, [r3, #14]
 8003f2a:	e012      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003f2c:	4b4c      	ldr	r3, [pc, #304]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003f2e:	220a      	movs	r2, #10
 8003f30:	81da      	strh	r2, [r3, #14]
 8003f32:	e00e      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003f34:	4b4a      	ldr	r3, [pc, #296]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003f36:	2205      	movs	r2, #5
 8003f38:	81da      	strh	r2, [r3, #14]
 8003f3a:	e00a      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003f3c:	4b48      	ldr	r3, [pc, #288]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003f3e:	2204      	movs	r2, #4
 8003f40:	81da      	strh	r2, [r3, #14]
 8003f42:	e006      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003f44:	4b46      	ldr	r3, [pc, #280]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003f46:	2202      	movs	r2, #2
 8003f48:	81da      	strh	r2, [r3, #14]
 8003f4a:	e002      	b.n	8003f52 <Principal_Receive_Config+0x4b6>
 8003f4c:	4b44      	ldr	r3, [pc, #272]	; (8004060 <Principal_Receive_Config+0x5c4>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	81da      	strh	r2, [r3, #14]
 8003f52:	bf00      	nop

			retVal = Save_EEPROM(hi2c);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fa97 	bl	8004488 <Save_EEPROM>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]
			break;
 8003f5e:	e231      	b.n	80043c4 <Principal_Receive_Config+0x928>

		case 1:
			if(length != 7)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b07      	cmp	r3, #7
 8003f64:	f040 8229 	bne.w	80043ba <Principal_Receive_Config+0x91e>
				break;

			__BUFFER_TO_FREQ(data[1], perCAN[ANALOG_1_4]);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	2b0a      	cmp	r3, #10
 8003f72:	d847      	bhi.n	8004004 <Principal_Receive_Config+0x568>
 8003f74:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <Principal_Receive_Config+0x4e0>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003fa9 	.word	0x08003fa9
 8003f80:	08003fb3 	.word	0x08003fb3
 8003f84:	08003fbd 	.word	0x08003fbd
 8003f88:	08003fc5 	.word	0x08003fc5
 8003f8c:	08003fcd 	.word	0x08003fcd
 8003f90:	08003fd5 	.word	0x08003fd5
 8003f94:	08003fdd 	.word	0x08003fdd
 8003f98:	08003fe5 	.word	0x08003fe5
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	08003ff5 	.word	0x08003ff5
 8003fa4:	08003ffd 	.word	0x08003ffd
 8003fa8:	4b2e      	ldr	r3, [pc, #184]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	e02b      	b.n	800400a <Principal_Receive_Config+0x56e>
 8003fb2:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003fb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	e026      	b.n	800400a <Principal_Receive_Config+0x56e>
 8003fbc:	4b29      	ldr	r3, [pc, #164]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003fbe:	22c8      	movs	r2, #200	; 0xc8
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	e022      	b.n	800400a <Principal_Receive_Config+0x56e>
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003fc6:	2264      	movs	r2, #100	; 0x64
 8003fc8:	801a      	strh	r2, [r3, #0]
 8003fca:	e01e      	b.n	800400a <Principal_Receive_Config+0x56e>
 8003fcc:	4b25      	ldr	r3, [pc, #148]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003fce:	2232      	movs	r2, #50	; 0x32
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	e01a      	b.n	800400a <Principal_Receive_Config+0x56e>
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003fd6:	2228      	movs	r2, #40	; 0x28
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	e016      	b.n	800400a <Principal_Receive_Config+0x56e>
 8003fdc:	4b21      	ldr	r3, [pc, #132]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003fde:	2214      	movs	r2, #20
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	e012      	b.n	800400a <Principal_Receive_Config+0x56e>
 8003fe4:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003fe6:	220a      	movs	r2, #10
 8003fe8:	801a      	strh	r2, [r3, #0]
 8003fea:	e00e      	b.n	800400a <Principal_Receive_Config+0x56e>
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003fee:	2205      	movs	r2, #5
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	e00a      	b.n	800400a <Principal_Receive_Config+0x56e>
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	e006      	b.n	800400a <Principal_Receive_Config+0x56e>
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8003ffe:	2202      	movs	r2, #2
 8004000:	801a      	strh	r2, [r3, #0]
 8004002:	e002      	b.n	800400a <Principal_Receive_Config+0x56e>
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8004006:	2200      	movs	r2, #0
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perCAN[ANALOG_5_8]);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3302      	adds	r3, #2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	3b01      	subs	r3, #1
 8004014:	2b0a      	cmp	r3, #10
 8004016:	d84b      	bhi.n	80040b0 <Principal_Receive_Config+0x614>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <Principal_Receive_Config+0x584>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	0800404d 	.word	0x0800404d
 8004024:	08004057 	.word	0x08004057
 8004028:	08004069 	.word	0x08004069
 800402c:	08004071 	.word	0x08004071
 8004030:	08004079 	.word	0x08004079
 8004034:	08004081 	.word	0x08004081
 8004038:	08004089 	.word	0x08004089
 800403c:	08004091 	.word	0x08004091
 8004040:	08004099 	.word	0x08004099
 8004044:	080040a1 	.word	0x080040a1
 8004048:	080040a9 	.word	0x080040a9
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <Principal_Receive_Config+0x5c8>)
 800404e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004052:	805a      	strh	r2, [r3, #2]
 8004054:	e02f      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 8004056:	4b03      	ldr	r3, [pc, #12]	; (8004064 <Principal_Receive_Config+0x5c8>)
 8004058:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800405c:	805a      	strh	r2, [r3, #2]
 800405e:	e02a      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 8004060:	20006728 	.word	0x20006728
 8004064:	2000671c 	.word	0x2000671c
 8004068:	4b93      	ldr	r3, [pc, #588]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800406a:	22c8      	movs	r2, #200	; 0xc8
 800406c:	805a      	strh	r2, [r3, #2]
 800406e:	e022      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 8004070:	4b91      	ldr	r3, [pc, #580]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004072:	2264      	movs	r2, #100	; 0x64
 8004074:	805a      	strh	r2, [r3, #2]
 8004076:	e01e      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 8004078:	4b8f      	ldr	r3, [pc, #572]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800407a:	2232      	movs	r2, #50	; 0x32
 800407c:	805a      	strh	r2, [r3, #2]
 800407e:	e01a      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 8004080:	4b8d      	ldr	r3, [pc, #564]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004082:	2228      	movs	r2, #40	; 0x28
 8004084:	805a      	strh	r2, [r3, #2]
 8004086:	e016      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 8004088:	4b8b      	ldr	r3, [pc, #556]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800408a:	2214      	movs	r2, #20
 800408c:	805a      	strh	r2, [r3, #2]
 800408e:	e012      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 8004090:	4b89      	ldr	r3, [pc, #548]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004092:	220a      	movs	r2, #10
 8004094:	805a      	strh	r2, [r3, #2]
 8004096:	e00e      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 8004098:	4b87      	ldr	r3, [pc, #540]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800409a:	2205      	movs	r2, #5
 800409c:	805a      	strh	r2, [r3, #2]
 800409e:	e00a      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 80040a0:	4b85      	ldr	r3, [pc, #532]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80040a2:	2204      	movs	r2, #4
 80040a4:	805a      	strh	r2, [r3, #2]
 80040a6:	e006      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 80040a8:	4b83      	ldr	r3, [pc, #524]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80040aa:	2202      	movs	r2, #2
 80040ac:	805a      	strh	r2, [r3, #2]
 80040ae:	e002      	b.n	80040b6 <Principal_Receive_Config+0x61a>
 80040b0:	4b81      	ldr	r3, [pc, #516]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	805a      	strh	r2, [r3, #2]
 80040b6:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perCAN[ANALOG_9_12]);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	3303      	adds	r3, #3
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	3b01      	subs	r3, #1
 80040c0:	2b0a      	cmp	r3, #10
 80040c2:	d847      	bhi.n	8004154 <Principal_Receive_Config+0x6b8>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <Principal_Receive_Config+0x630>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040f9 	.word	0x080040f9
 80040d0:	08004103 	.word	0x08004103
 80040d4:	0800410d 	.word	0x0800410d
 80040d8:	08004115 	.word	0x08004115
 80040dc:	0800411d 	.word	0x0800411d
 80040e0:	08004125 	.word	0x08004125
 80040e4:	0800412d 	.word	0x0800412d
 80040e8:	08004135 	.word	0x08004135
 80040ec:	0800413d 	.word	0x0800413d
 80040f0:	08004145 	.word	0x08004145
 80040f4:	0800414d 	.word	0x0800414d
 80040f8:	4b6f      	ldr	r3, [pc, #444]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80040fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040fe:	809a      	strh	r2, [r3, #4]
 8004100:	e02b      	b.n	800415a <Principal_Receive_Config+0x6be>
 8004102:	4b6d      	ldr	r3, [pc, #436]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004104:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004108:	809a      	strh	r2, [r3, #4]
 800410a:	e026      	b.n	800415a <Principal_Receive_Config+0x6be>
 800410c:	4b6a      	ldr	r3, [pc, #424]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800410e:	22c8      	movs	r2, #200	; 0xc8
 8004110:	809a      	strh	r2, [r3, #4]
 8004112:	e022      	b.n	800415a <Principal_Receive_Config+0x6be>
 8004114:	4b68      	ldr	r3, [pc, #416]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004116:	2264      	movs	r2, #100	; 0x64
 8004118:	809a      	strh	r2, [r3, #4]
 800411a:	e01e      	b.n	800415a <Principal_Receive_Config+0x6be>
 800411c:	4b66      	ldr	r3, [pc, #408]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800411e:	2232      	movs	r2, #50	; 0x32
 8004120:	809a      	strh	r2, [r3, #4]
 8004122:	e01a      	b.n	800415a <Principal_Receive_Config+0x6be>
 8004124:	4b64      	ldr	r3, [pc, #400]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004126:	2228      	movs	r2, #40	; 0x28
 8004128:	809a      	strh	r2, [r3, #4]
 800412a:	e016      	b.n	800415a <Principal_Receive_Config+0x6be>
 800412c:	4b62      	ldr	r3, [pc, #392]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800412e:	2214      	movs	r2, #20
 8004130:	809a      	strh	r2, [r3, #4]
 8004132:	e012      	b.n	800415a <Principal_Receive_Config+0x6be>
 8004134:	4b60      	ldr	r3, [pc, #384]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004136:	220a      	movs	r2, #10
 8004138:	809a      	strh	r2, [r3, #4]
 800413a:	e00e      	b.n	800415a <Principal_Receive_Config+0x6be>
 800413c:	4b5e      	ldr	r3, [pc, #376]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800413e:	2205      	movs	r2, #5
 8004140:	809a      	strh	r2, [r3, #4]
 8004142:	e00a      	b.n	800415a <Principal_Receive_Config+0x6be>
 8004144:	4b5c      	ldr	r3, [pc, #368]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004146:	2204      	movs	r2, #4
 8004148:	809a      	strh	r2, [r3, #4]
 800414a:	e006      	b.n	800415a <Principal_Receive_Config+0x6be>
 800414c:	4b5a      	ldr	r3, [pc, #360]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800414e:	2202      	movs	r2, #2
 8004150:	809a      	strh	r2, [r3, #4]
 8004152:	e002      	b.n	800415a <Principal_Receive_Config+0x6be>
 8004154:	4b58      	ldr	r3, [pc, #352]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004156:	2200      	movs	r2, #0
 8004158:	809a      	strh	r2, [r3, #4]
 800415a:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perCAN[RTC_MSG]);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3304      	adds	r3, #4
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	3b01      	subs	r3, #1
 8004164:	2b0a      	cmp	r3, #10
 8004166:	d847      	bhi.n	80041f8 <Principal_Receive_Config+0x75c>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <Principal_Receive_Config+0x6d4>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	0800419d 	.word	0x0800419d
 8004174:	080041a7 	.word	0x080041a7
 8004178:	080041b1 	.word	0x080041b1
 800417c:	080041b9 	.word	0x080041b9
 8004180:	080041c1 	.word	0x080041c1
 8004184:	080041c9 	.word	0x080041c9
 8004188:	080041d1 	.word	0x080041d1
 800418c:	080041d9 	.word	0x080041d9
 8004190:	080041e1 	.word	0x080041e1
 8004194:	080041e9 	.word	0x080041e9
 8004198:	080041f1 	.word	0x080041f1
 800419c:	4b46      	ldr	r3, [pc, #280]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800419e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041a2:	80da      	strh	r2, [r3, #6]
 80041a4:	e02b      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041a6:	4b44      	ldr	r3, [pc, #272]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041ac:	80da      	strh	r2, [r3, #6]
 80041ae:	e026      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041b0:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041b2:	22c8      	movs	r2, #200	; 0xc8
 80041b4:	80da      	strh	r2, [r3, #6]
 80041b6:	e022      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041b8:	4b3f      	ldr	r3, [pc, #252]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041ba:	2264      	movs	r2, #100	; 0x64
 80041bc:	80da      	strh	r2, [r3, #6]
 80041be:	e01e      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041c0:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041c2:	2232      	movs	r2, #50	; 0x32
 80041c4:	80da      	strh	r2, [r3, #6]
 80041c6:	e01a      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041c8:	4b3b      	ldr	r3, [pc, #236]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041ca:	2228      	movs	r2, #40	; 0x28
 80041cc:	80da      	strh	r2, [r3, #6]
 80041ce:	e016      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041d0:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041d2:	2214      	movs	r2, #20
 80041d4:	80da      	strh	r2, [r3, #6]
 80041d6:	e012      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041d8:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041da:	220a      	movs	r2, #10
 80041dc:	80da      	strh	r2, [r3, #6]
 80041de:	e00e      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041e0:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041e2:	2205      	movs	r2, #5
 80041e4:	80da      	strh	r2, [r3, #6]
 80041e6:	e00a      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041e8:	4b33      	ldr	r3, [pc, #204]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041ea:	2204      	movs	r2, #4
 80041ec:	80da      	strh	r2, [r3, #6]
 80041ee:	e006      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041f0:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041f2:	2202      	movs	r2, #2
 80041f4:	80da      	strh	r2, [r3, #6]
 80041f6:	e002      	b.n	80041fe <Principal_Receive_Config+0x762>
 80041f8:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <Principal_Receive_Config+0x81c>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	80da      	strh	r2, [r3, #6]
 80041fe:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perCAN[VERIFY_MSG]);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	3305      	adds	r3, #5
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	3b01      	subs	r3, #1
 8004208:	2b0a      	cmp	r3, #10
 800420a:	d847      	bhi.n	800429c <Principal_Receive_Config+0x800>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <Principal_Receive_Config+0x778>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004241 	.word	0x08004241
 8004218:	0800424b 	.word	0x0800424b
 800421c:	08004255 	.word	0x08004255
 8004220:	0800425d 	.word	0x0800425d
 8004224:	08004265 	.word	0x08004265
 8004228:	0800426d 	.word	0x0800426d
 800422c:	08004275 	.word	0x08004275
 8004230:	0800427d 	.word	0x0800427d
 8004234:	08004285 	.word	0x08004285
 8004238:	0800428d 	.word	0x0800428d
 800423c:	08004295 	.word	0x08004295
 8004240:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004246:	811a      	strh	r2, [r3, #8]
 8004248:	e02b      	b.n	80042a2 <Principal_Receive_Config+0x806>
 800424a:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800424c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004250:	811a      	strh	r2, [r3, #8]
 8004252:	e026      	b.n	80042a2 <Principal_Receive_Config+0x806>
 8004254:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004256:	22c8      	movs	r2, #200	; 0xc8
 8004258:	811a      	strh	r2, [r3, #8]
 800425a:	e022      	b.n	80042a2 <Principal_Receive_Config+0x806>
 800425c:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800425e:	2264      	movs	r2, #100	; 0x64
 8004260:	811a      	strh	r2, [r3, #8]
 8004262:	e01e      	b.n	80042a2 <Principal_Receive_Config+0x806>
 8004264:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004266:	2232      	movs	r2, #50	; 0x32
 8004268:	811a      	strh	r2, [r3, #8]
 800426a:	e01a      	b.n	80042a2 <Principal_Receive_Config+0x806>
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800426e:	2228      	movs	r2, #40	; 0x28
 8004270:	811a      	strh	r2, [r3, #8]
 8004272:	e016      	b.n	80042a2 <Principal_Receive_Config+0x806>
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004276:	2214      	movs	r2, #20
 8004278:	811a      	strh	r2, [r3, #8]
 800427a:	e012      	b.n	80042a2 <Principal_Receive_Config+0x806>
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800427e:	220a      	movs	r2, #10
 8004280:	811a      	strh	r2, [r3, #8]
 8004282:	e00e      	b.n	80042a2 <Principal_Receive_Config+0x806>
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004286:	2205      	movs	r2, #5
 8004288:	811a      	strh	r2, [r3, #8]
 800428a:	e00a      	b.n	80042a2 <Principal_Receive_Config+0x806>
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800428e:	2204      	movs	r2, #4
 8004290:	811a      	strh	r2, [r3, #8]
 8004292:	e006      	b.n	80042a2 <Principal_Receive_Config+0x806>
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <Principal_Receive_Config+0x81c>)
 8004296:	2202      	movs	r2, #2
 8004298:	811a      	strh	r2, [r3, #8]
 800429a:	e002      	b.n	80042a2 <Principal_Receive_Config+0x806>
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <Principal_Receive_Config+0x81c>)
 800429e:	2200      	movs	r2, #0
 80042a0:	811a      	strh	r2, [r3, #8]
 80042a2:	bf00      	nop
			inputConfig = data[6];
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	799a      	ldrb	r2, [r3, #6]
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <Principal_Receive_Config+0x820>)
 80042aa:	701a      	strb	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f8eb 	bl	8004488 <Save_EEPROM>
 80042b2:	4603      	mov	r3, r0
 80042b4:	75fb      	strb	r3, [r7, #23]
			break;
 80042b6:	e085      	b.n	80043c4 <Principal_Receive_Config+0x928>
 80042b8:	2000671c 	.word	0x2000671c
 80042bc:	20006700 	.word	0x20006700

		case 2:
			if(length != 7)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b07      	cmp	r3, #7
 80042c4:	d17b      	bne.n	80043be <Principal_Receive_Config+0x922>
				break;

			thresholdBeacon  = data[1] << 8;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	3301      	adds	r3, #1
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	b21a      	sxth	r2, r3
 80042d0:	4b3f      	ldr	r3, [pc, #252]	; (80043d0 <Principal_Receive_Config+0x934>)
 80042d2:	801a      	strh	r2, [r3, #0]
			thresholdBeacon |= data[2] & 0xff;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	3302      	adds	r3, #2
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b21a      	sxth	r2, r3
 80042dc:	4b3c      	ldr	r3, [pc, #240]	; (80043d0 <Principal_Receive_Config+0x934>)
 80042de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b21a      	sxth	r2, r3
 80042e6:	4b3a      	ldr	r3, [pc, #232]	; (80043d0 <Principal_Receive_Config+0x934>)
 80042e8:	801a      	strh	r2, [r3, #0]
			thresholdRPM	 = data[3] << 8;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	3303      	adds	r3, #3
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	b21a      	sxth	r2, r3
 80042f4:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <Principal_Receive_Config+0x938>)
 80042f6:	801a      	strh	r2, [r3, #0]
			thresholdRPM	|= data[4] & 0xff;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	3304      	adds	r3, #4
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b21a      	sxth	r2, r3
 8004300:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <Principal_Receive_Config+0x938>)
 8004302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004306:	4313      	orrs	r3, r2
 8004308:	b21a      	sxth	r2, r3
 800430a:	4b32      	ldr	r3, [pc, #200]	; (80043d4 <Principal_Receive_Config+0x938>)
 800430c:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	 = data[5] << 8;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3305      	adds	r3, #5
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	b21a      	sxth	r2, r3
 8004318:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <Principal_Receive_Config+0x93c>)
 800431a:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	|= data[6] & 0xff;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3306      	adds	r3, #6
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b21a      	sxth	r2, r3
 8004324:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <Principal_Receive_Config+0x93c>)
 8004326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800432a:	4313      	orrs	r3, r2
 800432c:	b21a      	sxth	r2, r3
 800432e:	4b2a      	ldr	r3, [pc, #168]	; (80043d8 <Principal_Receive_Config+0x93c>)
 8004330:	801a      	strh	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f8a8 	bl	8004488 <Save_EEPROM>
 8004338:	4603      	mov	r3, r0
 800433a:	75fb      	strb	r3, [r7, #23]
			break;
 800433c:	e042      	b.n	80043c4 <Principal_Receive_Config+0x928>

		case 3:
			if(length != 7)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b07      	cmp	r3, #7
 8004342:	d13e      	bne.n	80043c2 <Principal_Receive_Config+0x926>
				break;

			rtcDate.Year	= data[1];
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	785a      	ldrb	r2, [r3, #1]
 8004348:	4b24      	ldr	r3, [pc, #144]	; (80043dc <Principal_Receive_Config+0x940>)
 800434a:	70da      	strb	r2, [r3, #3]
			rtcDate.Month	= data[2];
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	789a      	ldrb	r2, [r3, #2]
 8004350:	4b22      	ldr	r3, [pc, #136]	; (80043dc <Principal_Receive_Config+0x940>)
 8004352:	705a      	strb	r2, [r3, #1]
			rtcDate.Date	= data[3];
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	78da      	ldrb	r2, [r3, #3]
 8004358:	4b20      	ldr	r3, [pc, #128]	; (80043dc <Principal_Receive_Config+0x940>)
 800435a:	709a      	strb	r2, [r3, #2]
			rtcTime.Hours	= data[4];
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	791a      	ldrb	r2, [r3, #4]
 8004360:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <Principal_Receive_Config+0x944>)
 8004362:	701a      	strb	r2, [r3, #0]
			rtcTime.Minutes = data[5];
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	795a      	ldrb	r2, [r3, #5]
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <Principal_Receive_Config+0x944>)
 800436a:	705a      	strb	r2, [r3, #1]
			rtcTime.Seconds = data[6];
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	799a      	ldrb	r2, [r3, #6]
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <Principal_Receive_Config+0x944>)
 8004372:	709a      	strb	r2, [r3, #2]

			if((HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN) == HAL_OK)
 8004374:	2200      	movs	r2, #0
 8004376:	4919      	ldr	r1, [pc, #100]	; (80043dc <Principal_Receive_Config+0x940>)
 8004378:	481a      	ldr	r0, [pc, #104]	; (80043e4 <Principal_Receive_Config+0x948>)
 800437a:	f007 fd67 	bl	800be4c <HAL_RTC_SetDate>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d113      	bne.n	80043ac <Principal_Receive_Config+0x910>
				&& (HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN) == HAL_OK))
 8004384:	2200      	movs	r2, #0
 8004386:	4916      	ldr	r1, [pc, #88]	; (80043e0 <Principal_Receive_Config+0x944>)
 8004388:	4816      	ldr	r0, [pc, #88]	; (80043e4 <Principal_Receive_Config+0x948>)
 800438a:	f007 fc67 	bl	800bc5c <HAL_RTC_SetTime>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <Principal_Receive_Config+0x910>
			{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);
 8004394:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8004398:	2101      	movs	r1, #1
 800439a:	4812      	ldr	r0, [pc, #72]	; (80043e4 <Principal_Receive_Config+0x948>)
 800439c:	f007 fee6 	bl	800c16c <HAL_RTCEx_BKUPWrite>
				flagRTC = RTC_OK;
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <Principal_Receive_Config+0x94c>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
				retVal = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]
			}
			else
				retVal = HAL_ERROR;

			break;
 80043aa:	e00b      	b.n	80043c4 <Principal_Receive_Config+0x928>
				retVal = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	75fb      	strb	r3, [r7, #23]
			break;
 80043b0:	e008      	b.n	80043c4 <Principal_Receive_Config+0x928>

		default:
			break;
 80043b2:	bf00      	nop
 80043b4:	e006      	b.n	80043c4 <Principal_Receive_Config+0x928>
				break;
 80043b6:	bf00      	nop
 80043b8:	e004      	b.n	80043c4 <Principal_Receive_Config+0x928>
				break;
 80043ba:	bf00      	nop
 80043bc:	e002      	b.n	80043c4 <Principal_Receive_Config+0x928>
				break;
 80043be:	bf00      	nop
 80043c0:	e000      	b.n	80043c4 <Principal_Receive_Config+0x928>
				break;
 80043c2:	bf00      	nop
	}

	return retVal;
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	2000463a 	.word	0x2000463a
 80043d4:	2000463c 	.word	0x2000463c
 80043d8:	2000463e 	.word	0x2000463e
 80043dc:	20006704 	.word	0x20006704
 80043e0:	20006708 	.word	0x20006708
 80043e4:	20000380 	.word	0x20000380
 80043e8:	200066ff 	.word	0x200066ff

080043ec <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
	perMsg[ANALOG_1_4] = MSG_FREQ_250HZ;
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <Principal_Hard_Code_Config+0x84>)
 80043f2:	2204      	movs	r2, #4
 80043f4:	801a      	strh	r2, [r3, #0]
	perMsg[ANALOG_5_8] = MSG_FREQ_500HZ;
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <Principal_Hard_Code_Config+0x84>)
 80043f8:	2202      	movs	r2, #2
 80043fa:	805a      	strh	r2, [r3, #2]
	perMsg[ANALOG_9_12] = MSG_DISABLED;
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <Principal_Hard_Code_Config+0x84>)
 80043fe:	2200      	movs	r2, #0
 8004400:	809a      	strh	r2, [r3, #4]
	perMsg[RTC_MSG] = MSG_FREQ_2HZ;
 8004402:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <Principal_Hard_Code_Config+0x84>)
 8004404:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004408:	80da      	strh	r2, [r3, #6]
	perMsg[VERIFY_MSG] = MSG_FREQ_5HZ;
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <Principal_Hard_Code_Config+0x84>)
 800440c:	22c8      	movs	r2, #200	; 0xc8
 800440e:	811a      	strh	r2, [r3, #8]
	perMsg[BEACON_MSG] = MSG_FREQ_10HZ;
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <Principal_Hard_Code_Config+0x84>)
 8004412:	2264      	movs	r2, #100	; 0x64
 8004414:	815a      	strh	r2, [r3, #10]
	perMsg[ECU_SAVE] = MSG_FREQ_100HZ;
 8004416:	4b16      	ldr	r3, [pc, #88]	; (8004470 <Principal_Hard_Code_Config+0x84>)
 8004418:	220a      	movs	r2, #10
 800441a:	819a      	strh	r2, [r3, #12]
	perMsg[PDM_SAVE] = MSG_FREQ_100HZ;
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <Principal_Hard_Code_Config+0x84>)
 800441e:	220a      	movs	r2, #10
 8004420:	81da      	strh	r2, [r3, #14]

	perCAN[ANALOG_1_4] = MSG_FREQ_10HZ;
 8004422:	4b14      	ldr	r3, [pc, #80]	; (8004474 <Principal_Hard_Code_Config+0x88>)
 8004424:	2264      	movs	r2, #100	; 0x64
 8004426:	801a      	strh	r2, [r3, #0]
	perCAN[ANALOG_5_8] = MSG_FREQ_10HZ;
 8004428:	4b12      	ldr	r3, [pc, #72]	; (8004474 <Principal_Hard_Code_Config+0x88>)
 800442a:	2264      	movs	r2, #100	; 0x64
 800442c:	805a      	strh	r2, [r3, #2]
	perCAN[ANALOG_9_12] = MSG_DISABLED;
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <Principal_Hard_Code_Config+0x88>)
 8004430:	2200      	movs	r2, #0
 8004432:	809a      	strh	r2, [r3, #4]
	perCAN[RTC_MSG] = MSG_FREQ_2HZ;
 8004434:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <Principal_Hard_Code_Config+0x88>)
 8004436:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800443a:	80da      	strh	r2, [r3, #6]
	perCAN[VERIFY_MSG] = MSG_FREQ_5HZ;
 800443c:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <Principal_Hard_Code_Config+0x88>)
 800443e:	22c8      	movs	r2, #200	; 0xc8
 8004440:	811a      	strh	r2, [r3, #8]
	perCAN[BEACON_MSG] = MSG_FREQ_5HZ;
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <Principal_Hard_Code_Config+0x88>)
 8004444:	22c8      	movs	r2, #200	; 0xc8
 8004446:	815a      	strh	r2, [r3, #10]

	inputConfig = INPUT_BEACON_PIN_1 | INPUT_DATALOGGER_PIN_0 | INPUT_BEACON_FALLING_EDGE | INPUT_DATALOGGER_FALLING_EDGE;
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <Principal_Hard_Code_Config+0x8c>)
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]

	thresholdBeacon = 1000;
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <Principal_Hard_Code_Config+0x90>)
 8004450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004454:	801a      	strh	r2, [r3, #0]
	thresholdRPM = 5000;
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <Principal_Hard_Code_Config+0x94>)
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	801a      	strh	r2, [r3, #0]
	thresholdSpeed = 1;
 800445e:	4b09      	ldr	r3, [pc, #36]	; (8004484 <Principal_Hard_Code_Config+0x98>)
 8004460:	2201      	movs	r2, #1
 8004462:	801a      	strh	r2, [r3, #0]

//	Save_EEPROM(&hi2c1);
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20006728 	.word	0x20006728
 8004474:	2000671c 	.word	0x2000671c
 8004478:	20006700 	.word	0x20006700
 800447c:	2000463a 	.word	0x2000463a
 8004480:	2000463c 	.word	0x2000463c
 8004484:	2000463e 	.word	0x2000463e

08004488 <Save_EEPROM>:

	return retVal;
}

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	; 0x30
 800448c:	af02      	add	r7, sp, #8
 800448e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	for(uint16_t i = 0; i < EEPROM_BUFFER_SIZE; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	84bb      	strh	r3, [r7, #36]	; 0x24
 800449a:	e008      	b.n	80044ae <Save_EEPROM+0x26>
		buffer[i] = 0;
 800449c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800449e:	3328      	adds	r3, #40	; 0x28
 80044a0:	443b      	add	r3, r7
 80044a2:	2200      	movs	r2, #0
 80044a4:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for(uint16_t i = 0; i < EEPROM_BUFFER_SIZE; i++)
 80044a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044aa:	3301      	adds	r3, #1
 80044ac:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044b0:	2b12      	cmp	r3, #18
 80044b2:	d9f3      	bls.n	800449c <Save_EEPROM+0x14>

	__FREQ_TO_BUFFER(buffer[0], perMsg[ANALOG_1_4]);
 80044b4:	4ba9      	ldr	r3, [pc, #676]	; (800475c <Save_EEPROM+0x2d4>)
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044bc:	f000 8081 	beq.w	80045c2 <Save_EEPROM+0x13a>
 80044c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c4:	f300 809e 	bgt.w	8004604 <Save_EEPROM+0x17c>
 80044c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044cc:	d07c      	beq.n	80045c8 <Save_EEPROM+0x140>
 80044ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044d2:	f300 8097 	bgt.w	8004604 <Save_EEPROM+0x17c>
 80044d6:	2bc8      	cmp	r3, #200	; 0xc8
 80044d8:	d079      	beq.n	80045ce <Save_EEPROM+0x146>
 80044da:	2bc8      	cmp	r3, #200	; 0xc8
 80044dc:	f300 8092 	bgt.w	8004604 <Save_EEPROM+0x17c>
 80044e0:	2b32      	cmp	r3, #50	; 0x32
 80044e2:	dc6b      	bgt.n	80045bc <Save_EEPROM+0x134>
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f2c0 808d 	blt.w	8004604 <Save_EEPROM+0x17c>
 80044ea:	3b02      	subs	r3, #2
 80044ec:	2b30      	cmp	r3, #48	; 0x30
 80044ee:	f200 8089 	bhi.w	8004604 <Save_EEPROM+0x17c>
 80044f2:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <Save_EEPROM+0x70>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	080045ff 	.word	0x080045ff
 80044fc:	08004605 	.word	0x08004605
 8004500:	080045f9 	.word	0x080045f9
 8004504:	080045f3 	.word	0x080045f3
 8004508:	08004605 	.word	0x08004605
 800450c:	08004605 	.word	0x08004605
 8004510:	08004605 	.word	0x08004605
 8004514:	08004605 	.word	0x08004605
 8004518:	080045ed 	.word	0x080045ed
 800451c:	08004605 	.word	0x08004605
 8004520:	08004605 	.word	0x08004605
 8004524:	08004605 	.word	0x08004605
 8004528:	08004605 	.word	0x08004605
 800452c:	08004605 	.word	0x08004605
 8004530:	08004605 	.word	0x08004605
 8004534:	08004605 	.word	0x08004605
 8004538:	08004605 	.word	0x08004605
 800453c:	08004605 	.word	0x08004605
 8004540:	080045e7 	.word	0x080045e7
 8004544:	08004605 	.word	0x08004605
 8004548:	08004605 	.word	0x08004605
 800454c:	08004605 	.word	0x08004605
 8004550:	08004605 	.word	0x08004605
 8004554:	08004605 	.word	0x08004605
 8004558:	08004605 	.word	0x08004605
 800455c:	08004605 	.word	0x08004605
 8004560:	08004605 	.word	0x08004605
 8004564:	08004605 	.word	0x08004605
 8004568:	08004605 	.word	0x08004605
 800456c:	08004605 	.word	0x08004605
 8004570:	08004605 	.word	0x08004605
 8004574:	08004605 	.word	0x08004605
 8004578:	08004605 	.word	0x08004605
 800457c:	08004605 	.word	0x08004605
 8004580:	08004605 	.word	0x08004605
 8004584:	08004605 	.word	0x08004605
 8004588:	08004605 	.word	0x08004605
 800458c:	08004605 	.word	0x08004605
 8004590:	080045e1 	.word	0x080045e1
 8004594:	08004605 	.word	0x08004605
 8004598:	08004605 	.word	0x08004605
 800459c:	08004605 	.word	0x08004605
 80045a0:	08004605 	.word	0x08004605
 80045a4:	08004605 	.word	0x08004605
 80045a8:	08004605 	.word	0x08004605
 80045ac:	08004605 	.word	0x08004605
 80045b0:	08004605 	.word	0x08004605
 80045b4:	08004605 	.word	0x08004605
 80045b8:	080045db 	.word	0x080045db
 80045bc:	2b64      	cmp	r3, #100	; 0x64
 80045be:	d009      	beq.n	80045d4 <Save_EEPROM+0x14c>
 80045c0:	e020      	b.n	8004604 <Save_EEPROM+0x17c>
 80045c2:	2301      	movs	r3, #1
 80045c4:	733b      	strb	r3, [r7, #12]
 80045c6:	e01f      	b.n	8004608 <Save_EEPROM+0x180>
 80045c8:	2302      	movs	r3, #2
 80045ca:	733b      	strb	r3, [r7, #12]
 80045cc:	e01c      	b.n	8004608 <Save_EEPROM+0x180>
 80045ce:	2303      	movs	r3, #3
 80045d0:	733b      	strb	r3, [r7, #12]
 80045d2:	e019      	b.n	8004608 <Save_EEPROM+0x180>
 80045d4:	2304      	movs	r3, #4
 80045d6:	733b      	strb	r3, [r7, #12]
 80045d8:	e016      	b.n	8004608 <Save_EEPROM+0x180>
 80045da:	2305      	movs	r3, #5
 80045dc:	733b      	strb	r3, [r7, #12]
 80045de:	e013      	b.n	8004608 <Save_EEPROM+0x180>
 80045e0:	2306      	movs	r3, #6
 80045e2:	733b      	strb	r3, [r7, #12]
 80045e4:	e010      	b.n	8004608 <Save_EEPROM+0x180>
 80045e6:	2307      	movs	r3, #7
 80045e8:	733b      	strb	r3, [r7, #12]
 80045ea:	e00d      	b.n	8004608 <Save_EEPROM+0x180>
 80045ec:	2308      	movs	r3, #8
 80045ee:	733b      	strb	r3, [r7, #12]
 80045f0:	e00a      	b.n	8004608 <Save_EEPROM+0x180>
 80045f2:	2309      	movs	r3, #9
 80045f4:	733b      	strb	r3, [r7, #12]
 80045f6:	e007      	b.n	8004608 <Save_EEPROM+0x180>
 80045f8:	230a      	movs	r3, #10
 80045fa:	733b      	strb	r3, [r7, #12]
 80045fc:	e004      	b.n	8004608 <Save_EEPROM+0x180>
 80045fe:	230b      	movs	r3, #11
 8004600:	733b      	strb	r3, [r7, #12]
 8004602:	e001      	b.n	8004608 <Save_EEPROM+0x180>
 8004604:	2300      	movs	r3, #0
 8004606:	733b      	strb	r3, [r7, #12]
 8004608:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[1], perMsg[ANALOG_5_8]);
 800460a:	4b54      	ldr	r3, [pc, #336]	; (800475c <Save_EEPROM+0x2d4>)
 800460c:	885b      	ldrh	r3, [r3, #2]
 800460e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004612:	f000 8082 	beq.w	800471a <Save_EEPROM+0x292>
 8004616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800461a:	f300 80a1 	bgt.w	8004760 <Save_EEPROM+0x2d8>
 800461e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004622:	d07d      	beq.n	8004720 <Save_EEPROM+0x298>
 8004624:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004628:	f300 809a 	bgt.w	8004760 <Save_EEPROM+0x2d8>
 800462c:	2bc8      	cmp	r3, #200	; 0xc8
 800462e:	d07a      	beq.n	8004726 <Save_EEPROM+0x29e>
 8004630:	2bc8      	cmp	r3, #200	; 0xc8
 8004632:	f300 8095 	bgt.w	8004760 <Save_EEPROM+0x2d8>
 8004636:	2b32      	cmp	r3, #50	; 0x32
 8004638:	dc6c      	bgt.n	8004714 <Save_EEPROM+0x28c>
 800463a:	2b02      	cmp	r3, #2
 800463c:	f2c0 8090 	blt.w	8004760 <Save_EEPROM+0x2d8>
 8004640:	3b02      	subs	r3, #2
 8004642:	2b30      	cmp	r3, #48	; 0x30
 8004644:	f200 808c 	bhi.w	8004760 <Save_EEPROM+0x2d8>
 8004648:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <Save_EEPROM+0x1c8>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004757 	.word	0x08004757
 8004654:	08004761 	.word	0x08004761
 8004658:	08004751 	.word	0x08004751
 800465c:	0800474b 	.word	0x0800474b
 8004660:	08004761 	.word	0x08004761
 8004664:	08004761 	.word	0x08004761
 8004668:	08004761 	.word	0x08004761
 800466c:	08004761 	.word	0x08004761
 8004670:	08004745 	.word	0x08004745
 8004674:	08004761 	.word	0x08004761
 8004678:	08004761 	.word	0x08004761
 800467c:	08004761 	.word	0x08004761
 8004680:	08004761 	.word	0x08004761
 8004684:	08004761 	.word	0x08004761
 8004688:	08004761 	.word	0x08004761
 800468c:	08004761 	.word	0x08004761
 8004690:	08004761 	.word	0x08004761
 8004694:	08004761 	.word	0x08004761
 8004698:	0800473f 	.word	0x0800473f
 800469c:	08004761 	.word	0x08004761
 80046a0:	08004761 	.word	0x08004761
 80046a4:	08004761 	.word	0x08004761
 80046a8:	08004761 	.word	0x08004761
 80046ac:	08004761 	.word	0x08004761
 80046b0:	08004761 	.word	0x08004761
 80046b4:	08004761 	.word	0x08004761
 80046b8:	08004761 	.word	0x08004761
 80046bc:	08004761 	.word	0x08004761
 80046c0:	08004761 	.word	0x08004761
 80046c4:	08004761 	.word	0x08004761
 80046c8:	08004761 	.word	0x08004761
 80046cc:	08004761 	.word	0x08004761
 80046d0:	08004761 	.word	0x08004761
 80046d4:	08004761 	.word	0x08004761
 80046d8:	08004761 	.word	0x08004761
 80046dc:	08004761 	.word	0x08004761
 80046e0:	08004761 	.word	0x08004761
 80046e4:	08004761 	.word	0x08004761
 80046e8:	08004739 	.word	0x08004739
 80046ec:	08004761 	.word	0x08004761
 80046f0:	08004761 	.word	0x08004761
 80046f4:	08004761 	.word	0x08004761
 80046f8:	08004761 	.word	0x08004761
 80046fc:	08004761 	.word	0x08004761
 8004700:	08004761 	.word	0x08004761
 8004704:	08004761 	.word	0x08004761
 8004708:	08004761 	.word	0x08004761
 800470c:	08004761 	.word	0x08004761
 8004710:	08004733 	.word	0x08004733
 8004714:	2b64      	cmp	r3, #100	; 0x64
 8004716:	d009      	beq.n	800472c <Save_EEPROM+0x2a4>
 8004718:	e022      	b.n	8004760 <Save_EEPROM+0x2d8>
 800471a:	2301      	movs	r3, #1
 800471c:	737b      	strb	r3, [r7, #13]
 800471e:	e021      	b.n	8004764 <Save_EEPROM+0x2dc>
 8004720:	2302      	movs	r3, #2
 8004722:	737b      	strb	r3, [r7, #13]
 8004724:	e01e      	b.n	8004764 <Save_EEPROM+0x2dc>
 8004726:	2303      	movs	r3, #3
 8004728:	737b      	strb	r3, [r7, #13]
 800472a:	e01b      	b.n	8004764 <Save_EEPROM+0x2dc>
 800472c:	2304      	movs	r3, #4
 800472e:	737b      	strb	r3, [r7, #13]
 8004730:	e018      	b.n	8004764 <Save_EEPROM+0x2dc>
 8004732:	2305      	movs	r3, #5
 8004734:	737b      	strb	r3, [r7, #13]
 8004736:	e015      	b.n	8004764 <Save_EEPROM+0x2dc>
 8004738:	2306      	movs	r3, #6
 800473a:	737b      	strb	r3, [r7, #13]
 800473c:	e012      	b.n	8004764 <Save_EEPROM+0x2dc>
 800473e:	2307      	movs	r3, #7
 8004740:	737b      	strb	r3, [r7, #13]
 8004742:	e00f      	b.n	8004764 <Save_EEPROM+0x2dc>
 8004744:	2308      	movs	r3, #8
 8004746:	737b      	strb	r3, [r7, #13]
 8004748:	e00c      	b.n	8004764 <Save_EEPROM+0x2dc>
 800474a:	2309      	movs	r3, #9
 800474c:	737b      	strb	r3, [r7, #13]
 800474e:	e009      	b.n	8004764 <Save_EEPROM+0x2dc>
 8004750:	230a      	movs	r3, #10
 8004752:	737b      	strb	r3, [r7, #13]
 8004754:	e006      	b.n	8004764 <Save_EEPROM+0x2dc>
 8004756:	230b      	movs	r3, #11
 8004758:	737b      	strb	r3, [r7, #13]
 800475a:	e003      	b.n	8004764 <Save_EEPROM+0x2dc>
 800475c:	20006728 	.word	0x20006728
 8004760:	2300      	movs	r3, #0
 8004762:	737b      	strb	r3, [r7, #13]
 8004764:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[2], perMsg[ANALOG_9_12]);
 8004766:	4baa      	ldr	r3, [pc, #680]	; (8004a10 <Save_EEPROM+0x588>)
 8004768:	889b      	ldrh	r3, [r3, #4]
 800476a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800476e:	f000 8082 	beq.w	8004876 <Save_EEPROM+0x3ee>
 8004772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004776:	f300 809f 	bgt.w	80048b8 <Save_EEPROM+0x430>
 800477a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800477e:	d07d      	beq.n	800487c <Save_EEPROM+0x3f4>
 8004780:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004784:	f300 8098 	bgt.w	80048b8 <Save_EEPROM+0x430>
 8004788:	2bc8      	cmp	r3, #200	; 0xc8
 800478a:	d07a      	beq.n	8004882 <Save_EEPROM+0x3fa>
 800478c:	2bc8      	cmp	r3, #200	; 0xc8
 800478e:	f300 8093 	bgt.w	80048b8 <Save_EEPROM+0x430>
 8004792:	2b32      	cmp	r3, #50	; 0x32
 8004794:	dc6c      	bgt.n	8004870 <Save_EEPROM+0x3e8>
 8004796:	2b02      	cmp	r3, #2
 8004798:	f2c0 808e 	blt.w	80048b8 <Save_EEPROM+0x430>
 800479c:	3b02      	subs	r3, #2
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	f200 808a 	bhi.w	80048b8 <Save_EEPROM+0x430>
 80047a4:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <Save_EEPROM+0x324>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	080048b3 	.word	0x080048b3
 80047b0:	080048b9 	.word	0x080048b9
 80047b4:	080048ad 	.word	0x080048ad
 80047b8:	080048a7 	.word	0x080048a7
 80047bc:	080048b9 	.word	0x080048b9
 80047c0:	080048b9 	.word	0x080048b9
 80047c4:	080048b9 	.word	0x080048b9
 80047c8:	080048b9 	.word	0x080048b9
 80047cc:	080048a1 	.word	0x080048a1
 80047d0:	080048b9 	.word	0x080048b9
 80047d4:	080048b9 	.word	0x080048b9
 80047d8:	080048b9 	.word	0x080048b9
 80047dc:	080048b9 	.word	0x080048b9
 80047e0:	080048b9 	.word	0x080048b9
 80047e4:	080048b9 	.word	0x080048b9
 80047e8:	080048b9 	.word	0x080048b9
 80047ec:	080048b9 	.word	0x080048b9
 80047f0:	080048b9 	.word	0x080048b9
 80047f4:	0800489b 	.word	0x0800489b
 80047f8:	080048b9 	.word	0x080048b9
 80047fc:	080048b9 	.word	0x080048b9
 8004800:	080048b9 	.word	0x080048b9
 8004804:	080048b9 	.word	0x080048b9
 8004808:	080048b9 	.word	0x080048b9
 800480c:	080048b9 	.word	0x080048b9
 8004810:	080048b9 	.word	0x080048b9
 8004814:	080048b9 	.word	0x080048b9
 8004818:	080048b9 	.word	0x080048b9
 800481c:	080048b9 	.word	0x080048b9
 8004820:	080048b9 	.word	0x080048b9
 8004824:	080048b9 	.word	0x080048b9
 8004828:	080048b9 	.word	0x080048b9
 800482c:	080048b9 	.word	0x080048b9
 8004830:	080048b9 	.word	0x080048b9
 8004834:	080048b9 	.word	0x080048b9
 8004838:	080048b9 	.word	0x080048b9
 800483c:	080048b9 	.word	0x080048b9
 8004840:	080048b9 	.word	0x080048b9
 8004844:	08004895 	.word	0x08004895
 8004848:	080048b9 	.word	0x080048b9
 800484c:	080048b9 	.word	0x080048b9
 8004850:	080048b9 	.word	0x080048b9
 8004854:	080048b9 	.word	0x080048b9
 8004858:	080048b9 	.word	0x080048b9
 800485c:	080048b9 	.word	0x080048b9
 8004860:	080048b9 	.word	0x080048b9
 8004864:	080048b9 	.word	0x080048b9
 8004868:	080048b9 	.word	0x080048b9
 800486c:	0800488f 	.word	0x0800488f
 8004870:	2b64      	cmp	r3, #100	; 0x64
 8004872:	d009      	beq.n	8004888 <Save_EEPROM+0x400>
 8004874:	e020      	b.n	80048b8 <Save_EEPROM+0x430>
 8004876:	2301      	movs	r3, #1
 8004878:	73bb      	strb	r3, [r7, #14]
 800487a:	e01f      	b.n	80048bc <Save_EEPROM+0x434>
 800487c:	2302      	movs	r3, #2
 800487e:	73bb      	strb	r3, [r7, #14]
 8004880:	e01c      	b.n	80048bc <Save_EEPROM+0x434>
 8004882:	2303      	movs	r3, #3
 8004884:	73bb      	strb	r3, [r7, #14]
 8004886:	e019      	b.n	80048bc <Save_EEPROM+0x434>
 8004888:	2304      	movs	r3, #4
 800488a:	73bb      	strb	r3, [r7, #14]
 800488c:	e016      	b.n	80048bc <Save_EEPROM+0x434>
 800488e:	2305      	movs	r3, #5
 8004890:	73bb      	strb	r3, [r7, #14]
 8004892:	e013      	b.n	80048bc <Save_EEPROM+0x434>
 8004894:	2306      	movs	r3, #6
 8004896:	73bb      	strb	r3, [r7, #14]
 8004898:	e010      	b.n	80048bc <Save_EEPROM+0x434>
 800489a:	2307      	movs	r3, #7
 800489c:	73bb      	strb	r3, [r7, #14]
 800489e:	e00d      	b.n	80048bc <Save_EEPROM+0x434>
 80048a0:	2308      	movs	r3, #8
 80048a2:	73bb      	strb	r3, [r7, #14]
 80048a4:	e00a      	b.n	80048bc <Save_EEPROM+0x434>
 80048a6:	2309      	movs	r3, #9
 80048a8:	73bb      	strb	r3, [r7, #14]
 80048aa:	e007      	b.n	80048bc <Save_EEPROM+0x434>
 80048ac:	230a      	movs	r3, #10
 80048ae:	73bb      	strb	r3, [r7, #14]
 80048b0:	e004      	b.n	80048bc <Save_EEPROM+0x434>
 80048b2:	230b      	movs	r3, #11
 80048b4:	73bb      	strb	r3, [r7, #14]
 80048b6:	e001      	b.n	80048bc <Save_EEPROM+0x434>
 80048b8:	2300      	movs	r3, #0
 80048ba:	73bb      	strb	r3, [r7, #14]
 80048bc:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[3], perMsg[RTC_MSG]);
 80048be:	4b54      	ldr	r3, [pc, #336]	; (8004a10 <Save_EEPROM+0x588>)
 80048c0:	88db      	ldrh	r3, [r3, #6]
 80048c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c6:	f000 8082 	beq.w	80049ce <Save_EEPROM+0x546>
 80048ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ce:	f300 80a1 	bgt.w	8004a14 <Save_EEPROM+0x58c>
 80048d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048d6:	d07d      	beq.n	80049d4 <Save_EEPROM+0x54c>
 80048d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048dc:	f300 809a 	bgt.w	8004a14 <Save_EEPROM+0x58c>
 80048e0:	2bc8      	cmp	r3, #200	; 0xc8
 80048e2:	d07a      	beq.n	80049da <Save_EEPROM+0x552>
 80048e4:	2bc8      	cmp	r3, #200	; 0xc8
 80048e6:	f300 8095 	bgt.w	8004a14 <Save_EEPROM+0x58c>
 80048ea:	2b32      	cmp	r3, #50	; 0x32
 80048ec:	dc6c      	bgt.n	80049c8 <Save_EEPROM+0x540>
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	f2c0 8090 	blt.w	8004a14 <Save_EEPROM+0x58c>
 80048f4:	3b02      	subs	r3, #2
 80048f6:	2b30      	cmp	r3, #48	; 0x30
 80048f8:	f200 808c 	bhi.w	8004a14 <Save_EEPROM+0x58c>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <Save_EEPROM+0x47c>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	08004a0b 	.word	0x08004a0b
 8004908:	08004a15 	.word	0x08004a15
 800490c:	08004a05 	.word	0x08004a05
 8004910:	080049ff 	.word	0x080049ff
 8004914:	08004a15 	.word	0x08004a15
 8004918:	08004a15 	.word	0x08004a15
 800491c:	08004a15 	.word	0x08004a15
 8004920:	08004a15 	.word	0x08004a15
 8004924:	080049f9 	.word	0x080049f9
 8004928:	08004a15 	.word	0x08004a15
 800492c:	08004a15 	.word	0x08004a15
 8004930:	08004a15 	.word	0x08004a15
 8004934:	08004a15 	.word	0x08004a15
 8004938:	08004a15 	.word	0x08004a15
 800493c:	08004a15 	.word	0x08004a15
 8004940:	08004a15 	.word	0x08004a15
 8004944:	08004a15 	.word	0x08004a15
 8004948:	08004a15 	.word	0x08004a15
 800494c:	080049f3 	.word	0x080049f3
 8004950:	08004a15 	.word	0x08004a15
 8004954:	08004a15 	.word	0x08004a15
 8004958:	08004a15 	.word	0x08004a15
 800495c:	08004a15 	.word	0x08004a15
 8004960:	08004a15 	.word	0x08004a15
 8004964:	08004a15 	.word	0x08004a15
 8004968:	08004a15 	.word	0x08004a15
 800496c:	08004a15 	.word	0x08004a15
 8004970:	08004a15 	.word	0x08004a15
 8004974:	08004a15 	.word	0x08004a15
 8004978:	08004a15 	.word	0x08004a15
 800497c:	08004a15 	.word	0x08004a15
 8004980:	08004a15 	.word	0x08004a15
 8004984:	08004a15 	.word	0x08004a15
 8004988:	08004a15 	.word	0x08004a15
 800498c:	08004a15 	.word	0x08004a15
 8004990:	08004a15 	.word	0x08004a15
 8004994:	08004a15 	.word	0x08004a15
 8004998:	08004a15 	.word	0x08004a15
 800499c:	080049ed 	.word	0x080049ed
 80049a0:	08004a15 	.word	0x08004a15
 80049a4:	08004a15 	.word	0x08004a15
 80049a8:	08004a15 	.word	0x08004a15
 80049ac:	08004a15 	.word	0x08004a15
 80049b0:	08004a15 	.word	0x08004a15
 80049b4:	08004a15 	.word	0x08004a15
 80049b8:	08004a15 	.word	0x08004a15
 80049bc:	08004a15 	.word	0x08004a15
 80049c0:	08004a15 	.word	0x08004a15
 80049c4:	080049e7 	.word	0x080049e7
 80049c8:	2b64      	cmp	r3, #100	; 0x64
 80049ca:	d009      	beq.n	80049e0 <Save_EEPROM+0x558>
 80049cc:	e022      	b.n	8004a14 <Save_EEPROM+0x58c>
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
 80049d2:	e021      	b.n	8004a18 <Save_EEPROM+0x590>
 80049d4:	2302      	movs	r3, #2
 80049d6:	73fb      	strb	r3, [r7, #15]
 80049d8:	e01e      	b.n	8004a18 <Save_EEPROM+0x590>
 80049da:	2303      	movs	r3, #3
 80049dc:	73fb      	strb	r3, [r7, #15]
 80049de:	e01b      	b.n	8004a18 <Save_EEPROM+0x590>
 80049e0:	2304      	movs	r3, #4
 80049e2:	73fb      	strb	r3, [r7, #15]
 80049e4:	e018      	b.n	8004a18 <Save_EEPROM+0x590>
 80049e6:	2305      	movs	r3, #5
 80049e8:	73fb      	strb	r3, [r7, #15]
 80049ea:	e015      	b.n	8004a18 <Save_EEPROM+0x590>
 80049ec:	2306      	movs	r3, #6
 80049ee:	73fb      	strb	r3, [r7, #15]
 80049f0:	e012      	b.n	8004a18 <Save_EEPROM+0x590>
 80049f2:	2307      	movs	r3, #7
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	e00f      	b.n	8004a18 <Save_EEPROM+0x590>
 80049f8:	2308      	movs	r3, #8
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e00c      	b.n	8004a18 <Save_EEPROM+0x590>
 80049fe:	2309      	movs	r3, #9
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	e009      	b.n	8004a18 <Save_EEPROM+0x590>
 8004a04:	230a      	movs	r3, #10
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	e006      	b.n	8004a18 <Save_EEPROM+0x590>
 8004a0a:	230b      	movs	r3, #11
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e003      	b.n	8004a18 <Save_EEPROM+0x590>
 8004a10:	20006728 	.word	0x20006728
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]
 8004a18:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[4], perMsg[VERIFY_MSG]);
 8004a1a:	4baa      	ldr	r3, [pc, #680]	; (8004cc4 <Save_EEPROM+0x83c>)
 8004a1c:	891b      	ldrh	r3, [r3, #8]
 8004a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a22:	f000 8082 	beq.w	8004b2a <Save_EEPROM+0x6a2>
 8004a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a2a:	f300 809f 	bgt.w	8004b6c <Save_EEPROM+0x6e4>
 8004a2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a32:	d07d      	beq.n	8004b30 <Save_EEPROM+0x6a8>
 8004a34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a38:	f300 8098 	bgt.w	8004b6c <Save_EEPROM+0x6e4>
 8004a3c:	2bc8      	cmp	r3, #200	; 0xc8
 8004a3e:	d07a      	beq.n	8004b36 <Save_EEPROM+0x6ae>
 8004a40:	2bc8      	cmp	r3, #200	; 0xc8
 8004a42:	f300 8093 	bgt.w	8004b6c <Save_EEPROM+0x6e4>
 8004a46:	2b32      	cmp	r3, #50	; 0x32
 8004a48:	dc6c      	bgt.n	8004b24 <Save_EEPROM+0x69c>
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	f2c0 808e 	blt.w	8004b6c <Save_EEPROM+0x6e4>
 8004a50:	3b02      	subs	r3, #2
 8004a52:	2b30      	cmp	r3, #48	; 0x30
 8004a54:	f200 808a 	bhi.w	8004b6c <Save_EEPROM+0x6e4>
 8004a58:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <Save_EEPROM+0x5d8>)
 8004a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5e:	bf00      	nop
 8004a60:	08004b67 	.word	0x08004b67
 8004a64:	08004b6d 	.word	0x08004b6d
 8004a68:	08004b61 	.word	0x08004b61
 8004a6c:	08004b5b 	.word	0x08004b5b
 8004a70:	08004b6d 	.word	0x08004b6d
 8004a74:	08004b6d 	.word	0x08004b6d
 8004a78:	08004b6d 	.word	0x08004b6d
 8004a7c:	08004b6d 	.word	0x08004b6d
 8004a80:	08004b55 	.word	0x08004b55
 8004a84:	08004b6d 	.word	0x08004b6d
 8004a88:	08004b6d 	.word	0x08004b6d
 8004a8c:	08004b6d 	.word	0x08004b6d
 8004a90:	08004b6d 	.word	0x08004b6d
 8004a94:	08004b6d 	.word	0x08004b6d
 8004a98:	08004b6d 	.word	0x08004b6d
 8004a9c:	08004b6d 	.word	0x08004b6d
 8004aa0:	08004b6d 	.word	0x08004b6d
 8004aa4:	08004b6d 	.word	0x08004b6d
 8004aa8:	08004b4f 	.word	0x08004b4f
 8004aac:	08004b6d 	.word	0x08004b6d
 8004ab0:	08004b6d 	.word	0x08004b6d
 8004ab4:	08004b6d 	.word	0x08004b6d
 8004ab8:	08004b6d 	.word	0x08004b6d
 8004abc:	08004b6d 	.word	0x08004b6d
 8004ac0:	08004b6d 	.word	0x08004b6d
 8004ac4:	08004b6d 	.word	0x08004b6d
 8004ac8:	08004b6d 	.word	0x08004b6d
 8004acc:	08004b6d 	.word	0x08004b6d
 8004ad0:	08004b6d 	.word	0x08004b6d
 8004ad4:	08004b6d 	.word	0x08004b6d
 8004ad8:	08004b6d 	.word	0x08004b6d
 8004adc:	08004b6d 	.word	0x08004b6d
 8004ae0:	08004b6d 	.word	0x08004b6d
 8004ae4:	08004b6d 	.word	0x08004b6d
 8004ae8:	08004b6d 	.word	0x08004b6d
 8004aec:	08004b6d 	.word	0x08004b6d
 8004af0:	08004b6d 	.word	0x08004b6d
 8004af4:	08004b6d 	.word	0x08004b6d
 8004af8:	08004b49 	.word	0x08004b49
 8004afc:	08004b6d 	.word	0x08004b6d
 8004b00:	08004b6d 	.word	0x08004b6d
 8004b04:	08004b6d 	.word	0x08004b6d
 8004b08:	08004b6d 	.word	0x08004b6d
 8004b0c:	08004b6d 	.word	0x08004b6d
 8004b10:	08004b6d 	.word	0x08004b6d
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	08004b43 	.word	0x08004b43
 8004b24:	2b64      	cmp	r3, #100	; 0x64
 8004b26:	d009      	beq.n	8004b3c <Save_EEPROM+0x6b4>
 8004b28:	e020      	b.n	8004b6c <Save_EEPROM+0x6e4>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	743b      	strb	r3, [r7, #16]
 8004b2e:	e01f      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b30:	2302      	movs	r3, #2
 8004b32:	743b      	strb	r3, [r7, #16]
 8004b34:	e01c      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b36:	2303      	movs	r3, #3
 8004b38:	743b      	strb	r3, [r7, #16]
 8004b3a:	e019      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	743b      	strb	r3, [r7, #16]
 8004b40:	e016      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b42:	2305      	movs	r3, #5
 8004b44:	743b      	strb	r3, [r7, #16]
 8004b46:	e013      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b48:	2306      	movs	r3, #6
 8004b4a:	743b      	strb	r3, [r7, #16]
 8004b4c:	e010      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b4e:	2307      	movs	r3, #7
 8004b50:	743b      	strb	r3, [r7, #16]
 8004b52:	e00d      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b54:	2308      	movs	r3, #8
 8004b56:	743b      	strb	r3, [r7, #16]
 8004b58:	e00a      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b5a:	2309      	movs	r3, #9
 8004b5c:	743b      	strb	r3, [r7, #16]
 8004b5e:	e007      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b60:	230a      	movs	r3, #10
 8004b62:	743b      	strb	r3, [r7, #16]
 8004b64:	e004      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b66:	230b      	movs	r3, #11
 8004b68:	743b      	strb	r3, [r7, #16]
 8004b6a:	e001      	b.n	8004b70 <Save_EEPROM+0x6e8>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	743b      	strb	r3, [r7, #16]
 8004b70:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[5], perMsg[ECU_SAVE]);
 8004b72:	4b54      	ldr	r3, [pc, #336]	; (8004cc4 <Save_EEPROM+0x83c>)
 8004b74:	899b      	ldrh	r3, [r3, #12]
 8004b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b7a:	f000 8082 	beq.w	8004c82 <Save_EEPROM+0x7fa>
 8004b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b82:	f300 80a1 	bgt.w	8004cc8 <Save_EEPROM+0x840>
 8004b86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b8a:	d07d      	beq.n	8004c88 <Save_EEPROM+0x800>
 8004b8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b90:	f300 809a 	bgt.w	8004cc8 <Save_EEPROM+0x840>
 8004b94:	2bc8      	cmp	r3, #200	; 0xc8
 8004b96:	d07a      	beq.n	8004c8e <Save_EEPROM+0x806>
 8004b98:	2bc8      	cmp	r3, #200	; 0xc8
 8004b9a:	f300 8095 	bgt.w	8004cc8 <Save_EEPROM+0x840>
 8004b9e:	2b32      	cmp	r3, #50	; 0x32
 8004ba0:	dc6c      	bgt.n	8004c7c <Save_EEPROM+0x7f4>
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	f2c0 8090 	blt.w	8004cc8 <Save_EEPROM+0x840>
 8004ba8:	3b02      	subs	r3, #2
 8004baa:	2b30      	cmp	r3, #48	; 0x30
 8004bac:	f200 808c 	bhi.w	8004cc8 <Save_EEPROM+0x840>
 8004bb0:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <Save_EEPROM+0x730>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004cbf 	.word	0x08004cbf
 8004bbc:	08004cc9 	.word	0x08004cc9
 8004bc0:	08004cb9 	.word	0x08004cb9
 8004bc4:	08004cb3 	.word	0x08004cb3
 8004bc8:	08004cc9 	.word	0x08004cc9
 8004bcc:	08004cc9 	.word	0x08004cc9
 8004bd0:	08004cc9 	.word	0x08004cc9
 8004bd4:	08004cc9 	.word	0x08004cc9
 8004bd8:	08004cad 	.word	0x08004cad
 8004bdc:	08004cc9 	.word	0x08004cc9
 8004be0:	08004cc9 	.word	0x08004cc9
 8004be4:	08004cc9 	.word	0x08004cc9
 8004be8:	08004cc9 	.word	0x08004cc9
 8004bec:	08004cc9 	.word	0x08004cc9
 8004bf0:	08004cc9 	.word	0x08004cc9
 8004bf4:	08004cc9 	.word	0x08004cc9
 8004bf8:	08004cc9 	.word	0x08004cc9
 8004bfc:	08004cc9 	.word	0x08004cc9
 8004c00:	08004ca7 	.word	0x08004ca7
 8004c04:	08004cc9 	.word	0x08004cc9
 8004c08:	08004cc9 	.word	0x08004cc9
 8004c0c:	08004cc9 	.word	0x08004cc9
 8004c10:	08004cc9 	.word	0x08004cc9
 8004c14:	08004cc9 	.word	0x08004cc9
 8004c18:	08004cc9 	.word	0x08004cc9
 8004c1c:	08004cc9 	.word	0x08004cc9
 8004c20:	08004cc9 	.word	0x08004cc9
 8004c24:	08004cc9 	.word	0x08004cc9
 8004c28:	08004cc9 	.word	0x08004cc9
 8004c2c:	08004cc9 	.word	0x08004cc9
 8004c30:	08004cc9 	.word	0x08004cc9
 8004c34:	08004cc9 	.word	0x08004cc9
 8004c38:	08004cc9 	.word	0x08004cc9
 8004c3c:	08004cc9 	.word	0x08004cc9
 8004c40:	08004cc9 	.word	0x08004cc9
 8004c44:	08004cc9 	.word	0x08004cc9
 8004c48:	08004cc9 	.word	0x08004cc9
 8004c4c:	08004cc9 	.word	0x08004cc9
 8004c50:	08004ca1 	.word	0x08004ca1
 8004c54:	08004cc9 	.word	0x08004cc9
 8004c58:	08004cc9 	.word	0x08004cc9
 8004c5c:	08004cc9 	.word	0x08004cc9
 8004c60:	08004cc9 	.word	0x08004cc9
 8004c64:	08004cc9 	.word	0x08004cc9
 8004c68:	08004cc9 	.word	0x08004cc9
 8004c6c:	08004cc9 	.word	0x08004cc9
 8004c70:	08004cc9 	.word	0x08004cc9
 8004c74:	08004cc9 	.word	0x08004cc9
 8004c78:	08004c9b 	.word	0x08004c9b
 8004c7c:	2b64      	cmp	r3, #100	; 0x64
 8004c7e:	d009      	beq.n	8004c94 <Save_EEPROM+0x80c>
 8004c80:	e022      	b.n	8004cc8 <Save_EEPROM+0x840>
 8004c82:	2301      	movs	r3, #1
 8004c84:	747b      	strb	r3, [r7, #17]
 8004c86:	e021      	b.n	8004ccc <Save_EEPROM+0x844>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	747b      	strb	r3, [r7, #17]
 8004c8c:	e01e      	b.n	8004ccc <Save_EEPROM+0x844>
 8004c8e:	2303      	movs	r3, #3
 8004c90:	747b      	strb	r3, [r7, #17]
 8004c92:	e01b      	b.n	8004ccc <Save_EEPROM+0x844>
 8004c94:	2304      	movs	r3, #4
 8004c96:	747b      	strb	r3, [r7, #17]
 8004c98:	e018      	b.n	8004ccc <Save_EEPROM+0x844>
 8004c9a:	2305      	movs	r3, #5
 8004c9c:	747b      	strb	r3, [r7, #17]
 8004c9e:	e015      	b.n	8004ccc <Save_EEPROM+0x844>
 8004ca0:	2306      	movs	r3, #6
 8004ca2:	747b      	strb	r3, [r7, #17]
 8004ca4:	e012      	b.n	8004ccc <Save_EEPROM+0x844>
 8004ca6:	2307      	movs	r3, #7
 8004ca8:	747b      	strb	r3, [r7, #17]
 8004caa:	e00f      	b.n	8004ccc <Save_EEPROM+0x844>
 8004cac:	2308      	movs	r3, #8
 8004cae:	747b      	strb	r3, [r7, #17]
 8004cb0:	e00c      	b.n	8004ccc <Save_EEPROM+0x844>
 8004cb2:	2309      	movs	r3, #9
 8004cb4:	747b      	strb	r3, [r7, #17]
 8004cb6:	e009      	b.n	8004ccc <Save_EEPROM+0x844>
 8004cb8:	230a      	movs	r3, #10
 8004cba:	747b      	strb	r3, [r7, #17]
 8004cbc:	e006      	b.n	8004ccc <Save_EEPROM+0x844>
 8004cbe:	230b      	movs	r3, #11
 8004cc0:	747b      	strb	r3, [r7, #17]
 8004cc2:	e003      	b.n	8004ccc <Save_EEPROM+0x844>
 8004cc4:	20006728 	.word	0x20006728
 8004cc8:	2300      	movs	r3, #0
 8004cca:	747b      	strb	r3, [r7, #17]
 8004ccc:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[6], perMsg[PDM_SAVE]);
 8004cce:	4baa      	ldr	r3, [pc, #680]	; (8004f78 <Save_EEPROM+0xaf0>)
 8004cd0:	89db      	ldrh	r3, [r3, #14]
 8004cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cd6:	f000 8082 	beq.w	8004dde <Save_EEPROM+0x956>
 8004cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cde:	f300 809f 	bgt.w	8004e20 <Save_EEPROM+0x998>
 8004ce2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ce6:	d07d      	beq.n	8004de4 <Save_EEPROM+0x95c>
 8004ce8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cec:	f300 8098 	bgt.w	8004e20 <Save_EEPROM+0x998>
 8004cf0:	2bc8      	cmp	r3, #200	; 0xc8
 8004cf2:	d07a      	beq.n	8004dea <Save_EEPROM+0x962>
 8004cf4:	2bc8      	cmp	r3, #200	; 0xc8
 8004cf6:	f300 8093 	bgt.w	8004e20 <Save_EEPROM+0x998>
 8004cfa:	2b32      	cmp	r3, #50	; 0x32
 8004cfc:	dc6c      	bgt.n	8004dd8 <Save_EEPROM+0x950>
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	f2c0 808e 	blt.w	8004e20 <Save_EEPROM+0x998>
 8004d04:	3b02      	subs	r3, #2
 8004d06:	2b30      	cmp	r3, #48	; 0x30
 8004d08:	f200 808a 	bhi.w	8004e20 <Save_EEPROM+0x998>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <Save_EEPROM+0x88c>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004e1b 	.word	0x08004e1b
 8004d18:	08004e21 	.word	0x08004e21
 8004d1c:	08004e15 	.word	0x08004e15
 8004d20:	08004e0f 	.word	0x08004e0f
 8004d24:	08004e21 	.word	0x08004e21
 8004d28:	08004e21 	.word	0x08004e21
 8004d2c:	08004e21 	.word	0x08004e21
 8004d30:	08004e21 	.word	0x08004e21
 8004d34:	08004e09 	.word	0x08004e09
 8004d38:	08004e21 	.word	0x08004e21
 8004d3c:	08004e21 	.word	0x08004e21
 8004d40:	08004e21 	.word	0x08004e21
 8004d44:	08004e21 	.word	0x08004e21
 8004d48:	08004e21 	.word	0x08004e21
 8004d4c:	08004e21 	.word	0x08004e21
 8004d50:	08004e21 	.word	0x08004e21
 8004d54:	08004e21 	.word	0x08004e21
 8004d58:	08004e21 	.word	0x08004e21
 8004d5c:	08004e03 	.word	0x08004e03
 8004d60:	08004e21 	.word	0x08004e21
 8004d64:	08004e21 	.word	0x08004e21
 8004d68:	08004e21 	.word	0x08004e21
 8004d6c:	08004e21 	.word	0x08004e21
 8004d70:	08004e21 	.word	0x08004e21
 8004d74:	08004e21 	.word	0x08004e21
 8004d78:	08004e21 	.word	0x08004e21
 8004d7c:	08004e21 	.word	0x08004e21
 8004d80:	08004e21 	.word	0x08004e21
 8004d84:	08004e21 	.word	0x08004e21
 8004d88:	08004e21 	.word	0x08004e21
 8004d8c:	08004e21 	.word	0x08004e21
 8004d90:	08004e21 	.word	0x08004e21
 8004d94:	08004e21 	.word	0x08004e21
 8004d98:	08004e21 	.word	0x08004e21
 8004d9c:	08004e21 	.word	0x08004e21
 8004da0:	08004e21 	.word	0x08004e21
 8004da4:	08004e21 	.word	0x08004e21
 8004da8:	08004e21 	.word	0x08004e21
 8004dac:	08004dfd 	.word	0x08004dfd
 8004db0:	08004e21 	.word	0x08004e21
 8004db4:	08004e21 	.word	0x08004e21
 8004db8:	08004e21 	.word	0x08004e21
 8004dbc:	08004e21 	.word	0x08004e21
 8004dc0:	08004e21 	.word	0x08004e21
 8004dc4:	08004e21 	.word	0x08004e21
 8004dc8:	08004e21 	.word	0x08004e21
 8004dcc:	08004e21 	.word	0x08004e21
 8004dd0:	08004e21 	.word	0x08004e21
 8004dd4:	08004df7 	.word	0x08004df7
 8004dd8:	2b64      	cmp	r3, #100	; 0x64
 8004dda:	d009      	beq.n	8004df0 <Save_EEPROM+0x968>
 8004ddc:	e020      	b.n	8004e20 <Save_EEPROM+0x998>
 8004dde:	2301      	movs	r3, #1
 8004de0:	74bb      	strb	r3, [r7, #18]
 8004de2:	e01f      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004de4:	2302      	movs	r3, #2
 8004de6:	74bb      	strb	r3, [r7, #18]
 8004de8:	e01c      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004dea:	2303      	movs	r3, #3
 8004dec:	74bb      	strb	r3, [r7, #18]
 8004dee:	e019      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004df0:	2304      	movs	r3, #4
 8004df2:	74bb      	strb	r3, [r7, #18]
 8004df4:	e016      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004df6:	2305      	movs	r3, #5
 8004df8:	74bb      	strb	r3, [r7, #18]
 8004dfa:	e013      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004dfc:	2306      	movs	r3, #6
 8004dfe:	74bb      	strb	r3, [r7, #18]
 8004e00:	e010      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004e02:	2307      	movs	r3, #7
 8004e04:	74bb      	strb	r3, [r7, #18]
 8004e06:	e00d      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	74bb      	strb	r3, [r7, #18]
 8004e0c:	e00a      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004e0e:	2309      	movs	r3, #9
 8004e10:	74bb      	strb	r3, [r7, #18]
 8004e12:	e007      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004e14:	230a      	movs	r3, #10
 8004e16:	74bb      	strb	r3, [r7, #18]
 8004e18:	e004      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004e1a:	230b      	movs	r3, #11
 8004e1c:	74bb      	strb	r3, [r7, #18]
 8004e1e:	e001      	b.n	8004e24 <Save_EEPROM+0x99c>
 8004e20:	2300      	movs	r3, #0
 8004e22:	74bb      	strb	r3, [r7, #18]
 8004e24:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[7], perCAN[ANALOG_1_4]);
 8004e26:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <Save_EEPROM+0xaf4>)
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e2e:	f000 8082 	beq.w	8004f36 <Save_EEPROM+0xaae>
 8004e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e36:	f300 80a3 	bgt.w	8004f80 <Save_EEPROM+0xaf8>
 8004e3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e3e:	d07d      	beq.n	8004f3c <Save_EEPROM+0xab4>
 8004e40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e44:	f300 809c 	bgt.w	8004f80 <Save_EEPROM+0xaf8>
 8004e48:	2bc8      	cmp	r3, #200	; 0xc8
 8004e4a:	d07a      	beq.n	8004f42 <Save_EEPROM+0xaba>
 8004e4c:	2bc8      	cmp	r3, #200	; 0xc8
 8004e4e:	f300 8097 	bgt.w	8004f80 <Save_EEPROM+0xaf8>
 8004e52:	2b32      	cmp	r3, #50	; 0x32
 8004e54:	dc6c      	bgt.n	8004f30 <Save_EEPROM+0xaa8>
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	f2c0 8092 	blt.w	8004f80 <Save_EEPROM+0xaf8>
 8004e5c:	3b02      	subs	r3, #2
 8004e5e:	2b30      	cmp	r3, #48	; 0x30
 8004e60:	f200 808e 	bhi.w	8004f80 <Save_EEPROM+0xaf8>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <Save_EEPROM+0x9e4>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004f73 	.word	0x08004f73
 8004e70:	08004f81 	.word	0x08004f81
 8004e74:	08004f6d 	.word	0x08004f6d
 8004e78:	08004f67 	.word	0x08004f67
 8004e7c:	08004f81 	.word	0x08004f81
 8004e80:	08004f81 	.word	0x08004f81
 8004e84:	08004f81 	.word	0x08004f81
 8004e88:	08004f81 	.word	0x08004f81
 8004e8c:	08004f61 	.word	0x08004f61
 8004e90:	08004f81 	.word	0x08004f81
 8004e94:	08004f81 	.word	0x08004f81
 8004e98:	08004f81 	.word	0x08004f81
 8004e9c:	08004f81 	.word	0x08004f81
 8004ea0:	08004f81 	.word	0x08004f81
 8004ea4:	08004f81 	.word	0x08004f81
 8004ea8:	08004f81 	.word	0x08004f81
 8004eac:	08004f81 	.word	0x08004f81
 8004eb0:	08004f81 	.word	0x08004f81
 8004eb4:	08004f5b 	.word	0x08004f5b
 8004eb8:	08004f81 	.word	0x08004f81
 8004ebc:	08004f81 	.word	0x08004f81
 8004ec0:	08004f81 	.word	0x08004f81
 8004ec4:	08004f81 	.word	0x08004f81
 8004ec8:	08004f81 	.word	0x08004f81
 8004ecc:	08004f81 	.word	0x08004f81
 8004ed0:	08004f81 	.word	0x08004f81
 8004ed4:	08004f81 	.word	0x08004f81
 8004ed8:	08004f81 	.word	0x08004f81
 8004edc:	08004f81 	.word	0x08004f81
 8004ee0:	08004f81 	.word	0x08004f81
 8004ee4:	08004f81 	.word	0x08004f81
 8004ee8:	08004f81 	.word	0x08004f81
 8004eec:	08004f81 	.word	0x08004f81
 8004ef0:	08004f81 	.word	0x08004f81
 8004ef4:	08004f81 	.word	0x08004f81
 8004ef8:	08004f81 	.word	0x08004f81
 8004efc:	08004f81 	.word	0x08004f81
 8004f00:	08004f81 	.word	0x08004f81
 8004f04:	08004f55 	.word	0x08004f55
 8004f08:	08004f81 	.word	0x08004f81
 8004f0c:	08004f81 	.word	0x08004f81
 8004f10:	08004f81 	.word	0x08004f81
 8004f14:	08004f81 	.word	0x08004f81
 8004f18:	08004f81 	.word	0x08004f81
 8004f1c:	08004f81 	.word	0x08004f81
 8004f20:	08004f81 	.word	0x08004f81
 8004f24:	08004f81 	.word	0x08004f81
 8004f28:	08004f81 	.word	0x08004f81
 8004f2c:	08004f4f 	.word	0x08004f4f
 8004f30:	2b64      	cmp	r3, #100	; 0x64
 8004f32:	d009      	beq.n	8004f48 <Save_EEPROM+0xac0>
 8004f34:	e024      	b.n	8004f80 <Save_EEPROM+0xaf8>
 8004f36:	2301      	movs	r3, #1
 8004f38:	74fb      	strb	r3, [r7, #19]
 8004f3a:	e023      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	74fb      	strb	r3, [r7, #19]
 8004f40:	e020      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f42:	2303      	movs	r3, #3
 8004f44:	74fb      	strb	r3, [r7, #19]
 8004f46:	e01d      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	74fb      	strb	r3, [r7, #19]
 8004f4c:	e01a      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f4e:	2305      	movs	r3, #5
 8004f50:	74fb      	strb	r3, [r7, #19]
 8004f52:	e017      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f54:	2306      	movs	r3, #6
 8004f56:	74fb      	strb	r3, [r7, #19]
 8004f58:	e014      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f5a:	2307      	movs	r3, #7
 8004f5c:	74fb      	strb	r3, [r7, #19]
 8004f5e:	e011      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f60:	2308      	movs	r3, #8
 8004f62:	74fb      	strb	r3, [r7, #19]
 8004f64:	e00e      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f66:	2309      	movs	r3, #9
 8004f68:	74fb      	strb	r3, [r7, #19]
 8004f6a:	e00b      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f6c:	230a      	movs	r3, #10
 8004f6e:	74fb      	strb	r3, [r7, #19]
 8004f70:	e008      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f72:	230b      	movs	r3, #11
 8004f74:	74fb      	strb	r3, [r7, #19]
 8004f76:	e005      	b.n	8004f84 <Save_EEPROM+0xafc>
 8004f78:	20006728 	.word	0x20006728
 8004f7c:	2000671c 	.word	0x2000671c
 8004f80:	2300      	movs	r3, #0
 8004f82:	74fb      	strb	r3, [r7, #19]
 8004f84:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[8], perCAN[ANALOG_5_8]);
 8004f86:	4baa      	ldr	r3, [pc, #680]	; (8005230 <Save_EEPROM+0xda8>)
 8004f88:	885b      	ldrh	r3, [r3, #2]
 8004f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f8e:	f000 8082 	beq.w	8005096 <Save_EEPROM+0xc0e>
 8004f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f96:	f300 809f 	bgt.w	80050d8 <Save_EEPROM+0xc50>
 8004f9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f9e:	d07d      	beq.n	800509c <Save_EEPROM+0xc14>
 8004fa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fa4:	f300 8098 	bgt.w	80050d8 <Save_EEPROM+0xc50>
 8004fa8:	2bc8      	cmp	r3, #200	; 0xc8
 8004faa:	d07a      	beq.n	80050a2 <Save_EEPROM+0xc1a>
 8004fac:	2bc8      	cmp	r3, #200	; 0xc8
 8004fae:	f300 8093 	bgt.w	80050d8 <Save_EEPROM+0xc50>
 8004fb2:	2b32      	cmp	r3, #50	; 0x32
 8004fb4:	dc6c      	bgt.n	8005090 <Save_EEPROM+0xc08>
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	f2c0 808e 	blt.w	80050d8 <Save_EEPROM+0xc50>
 8004fbc:	3b02      	subs	r3, #2
 8004fbe:	2b30      	cmp	r3, #48	; 0x30
 8004fc0:	f200 808a 	bhi.w	80050d8 <Save_EEPROM+0xc50>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <Save_EEPROM+0xb44>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	080050d3 	.word	0x080050d3
 8004fd0:	080050d9 	.word	0x080050d9
 8004fd4:	080050cd 	.word	0x080050cd
 8004fd8:	080050c7 	.word	0x080050c7
 8004fdc:	080050d9 	.word	0x080050d9
 8004fe0:	080050d9 	.word	0x080050d9
 8004fe4:	080050d9 	.word	0x080050d9
 8004fe8:	080050d9 	.word	0x080050d9
 8004fec:	080050c1 	.word	0x080050c1
 8004ff0:	080050d9 	.word	0x080050d9
 8004ff4:	080050d9 	.word	0x080050d9
 8004ff8:	080050d9 	.word	0x080050d9
 8004ffc:	080050d9 	.word	0x080050d9
 8005000:	080050d9 	.word	0x080050d9
 8005004:	080050d9 	.word	0x080050d9
 8005008:	080050d9 	.word	0x080050d9
 800500c:	080050d9 	.word	0x080050d9
 8005010:	080050d9 	.word	0x080050d9
 8005014:	080050bb 	.word	0x080050bb
 8005018:	080050d9 	.word	0x080050d9
 800501c:	080050d9 	.word	0x080050d9
 8005020:	080050d9 	.word	0x080050d9
 8005024:	080050d9 	.word	0x080050d9
 8005028:	080050d9 	.word	0x080050d9
 800502c:	080050d9 	.word	0x080050d9
 8005030:	080050d9 	.word	0x080050d9
 8005034:	080050d9 	.word	0x080050d9
 8005038:	080050d9 	.word	0x080050d9
 800503c:	080050d9 	.word	0x080050d9
 8005040:	080050d9 	.word	0x080050d9
 8005044:	080050d9 	.word	0x080050d9
 8005048:	080050d9 	.word	0x080050d9
 800504c:	080050d9 	.word	0x080050d9
 8005050:	080050d9 	.word	0x080050d9
 8005054:	080050d9 	.word	0x080050d9
 8005058:	080050d9 	.word	0x080050d9
 800505c:	080050d9 	.word	0x080050d9
 8005060:	080050d9 	.word	0x080050d9
 8005064:	080050b5 	.word	0x080050b5
 8005068:	080050d9 	.word	0x080050d9
 800506c:	080050d9 	.word	0x080050d9
 8005070:	080050d9 	.word	0x080050d9
 8005074:	080050d9 	.word	0x080050d9
 8005078:	080050d9 	.word	0x080050d9
 800507c:	080050d9 	.word	0x080050d9
 8005080:	080050d9 	.word	0x080050d9
 8005084:	080050d9 	.word	0x080050d9
 8005088:	080050d9 	.word	0x080050d9
 800508c:	080050af 	.word	0x080050af
 8005090:	2b64      	cmp	r3, #100	; 0x64
 8005092:	d009      	beq.n	80050a8 <Save_EEPROM+0xc20>
 8005094:	e020      	b.n	80050d8 <Save_EEPROM+0xc50>
 8005096:	2301      	movs	r3, #1
 8005098:	753b      	strb	r3, [r7, #20]
 800509a:	e01f      	b.n	80050dc <Save_EEPROM+0xc54>
 800509c:	2302      	movs	r3, #2
 800509e:	753b      	strb	r3, [r7, #20]
 80050a0:	e01c      	b.n	80050dc <Save_EEPROM+0xc54>
 80050a2:	2303      	movs	r3, #3
 80050a4:	753b      	strb	r3, [r7, #20]
 80050a6:	e019      	b.n	80050dc <Save_EEPROM+0xc54>
 80050a8:	2304      	movs	r3, #4
 80050aa:	753b      	strb	r3, [r7, #20]
 80050ac:	e016      	b.n	80050dc <Save_EEPROM+0xc54>
 80050ae:	2305      	movs	r3, #5
 80050b0:	753b      	strb	r3, [r7, #20]
 80050b2:	e013      	b.n	80050dc <Save_EEPROM+0xc54>
 80050b4:	2306      	movs	r3, #6
 80050b6:	753b      	strb	r3, [r7, #20]
 80050b8:	e010      	b.n	80050dc <Save_EEPROM+0xc54>
 80050ba:	2307      	movs	r3, #7
 80050bc:	753b      	strb	r3, [r7, #20]
 80050be:	e00d      	b.n	80050dc <Save_EEPROM+0xc54>
 80050c0:	2308      	movs	r3, #8
 80050c2:	753b      	strb	r3, [r7, #20]
 80050c4:	e00a      	b.n	80050dc <Save_EEPROM+0xc54>
 80050c6:	2309      	movs	r3, #9
 80050c8:	753b      	strb	r3, [r7, #20]
 80050ca:	e007      	b.n	80050dc <Save_EEPROM+0xc54>
 80050cc:	230a      	movs	r3, #10
 80050ce:	753b      	strb	r3, [r7, #20]
 80050d0:	e004      	b.n	80050dc <Save_EEPROM+0xc54>
 80050d2:	230b      	movs	r3, #11
 80050d4:	753b      	strb	r3, [r7, #20]
 80050d6:	e001      	b.n	80050dc <Save_EEPROM+0xc54>
 80050d8:	2300      	movs	r3, #0
 80050da:	753b      	strb	r3, [r7, #20]
 80050dc:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[9], perCAN[ANALOG_9_12]);
 80050de:	4b54      	ldr	r3, [pc, #336]	; (8005230 <Save_EEPROM+0xda8>)
 80050e0:	889b      	ldrh	r3, [r3, #4]
 80050e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e6:	f000 8082 	beq.w	80051ee <Save_EEPROM+0xd66>
 80050ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ee:	f300 80a1 	bgt.w	8005234 <Save_EEPROM+0xdac>
 80050f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050f6:	d07d      	beq.n	80051f4 <Save_EEPROM+0xd6c>
 80050f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050fc:	f300 809a 	bgt.w	8005234 <Save_EEPROM+0xdac>
 8005100:	2bc8      	cmp	r3, #200	; 0xc8
 8005102:	d07a      	beq.n	80051fa <Save_EEPROM+0xd72>
 8005104:	2bc8      	cmp	r3, #200	; 0xc8
 8005106:	f300 8095 	bgt.w	8005234 <Save_EEPROM+0xdac>
 800510a:	2b32      	cmp	r3, #50	; 0x32
 800510c:	dc6c      	bgt.n	80051e8 <Save_EEPROM+0xd60>
 800510e:	2b02      	cmp	r3, #2
 8005110:	f2c0 8090 	blt.w	8005234 <Save_EEPROM+0xdac>
 8005114:	3b02      	subs	r3, #2
 8005116:	2b30      	cmp	r3, #48	; 0x30
 8005118:	f200 808c 	bhi.w	8005234 <Save_EEPROM+0xdac>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <Save_EEPROM+0xc9c>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	0800522b 	.word	0x0800522b
 8005128:	08005235 	.word	0x08005235
 800512c:	08005225 	.word	0x08005225
 8005130:	0800521f 	.word	0x0800521f
 8005134:	08005235 	.word	0x08005235
 8005138:	08005235 	.word	0x08005235
 800513c:	08005235 	.word	0x08005235
 8005140:	08005235 	.word	0x08005235
 8005144:	08005219 	.word	0x08005219
 8005148:	08005235 	.word	0x08005235
 800514c:	08005235 	.word	0x08005235
 8005150:	08005235 	.word	0x08005235
 8005154:	08005235 	.word	0x08005235
 8005158:	08005235 	.word	0x08005235
 800515c:	08005235 	.word	0x08005235
 8005160:	08005235 	.word	0x08005235
 8005164:	08005235 	.word	0x08005235
 8005168:	08005235 	.word	0x08005235
 800516c:	08005213 	.word	0x08005213
 8005170:	08005235 	.word	0x08005235
 8005174:	08005235 	.word	0x08005235
 8005178:	08005235 	.word	0x08005235
 800517c:	08005235 	.word	0x08005235
 8005180:	08005235 	.word	0x08005235
 8005184:	08005235 	.word	0x08005235
 8005188:	08005235 	.word	0x08005235
 800518c:	08005235 	.word	0x08005235
 8005190:	08005235 	.word	0x08005235
 8005194:	08005235 	.word	0x08005235
 8005198:	08005235 	.word	0x08005235
 800519c:	08005235 	.word	0x08005235
 80051a0:	08005235 	.word	0x08005235
 80051a4:	08005235 	.word	0x08005235
 80051a8:	08005235 	.word	0x08005235
 80051ac:	08005235 	.word	0x08005235
 80051b0:	08005235 	.word	0x08005235
 80051b4:	08005235 	.word	0x08005235
 80051b8:	08005235 	.word	0x08005235
 80051bc:	0800520d 	.word	0x0800520d
 80051c0:	08005235 	.word	0x08005235
 80051c4:	08005235 	.word	0x08005235
 80051c8:	08005235 	.word	0x08005235
 80051cc:	08005235 	.word	0x08005235
 80051d0:	08005235 	.word	0x08005235
 80051d4:	08005235 	.word	0x08005235
 80051d8:	08005235 	.word	0x08005235
 80051dc:	08005235 	.word	0x08005235
 80051e0:	08005235 	.word	0x08005235
 80051e4:	08005207 	.word	0x08005207
 80051e8:	2b64      	cmp	r3, #100	; 0x64
 80051ea:	d009      	beq.n	8005200 <Save_EEPROM+0xd78>
 80051ec:	e022      	b.n	8005234 <Save_EEPROM+0xdac>
 80051ee:	2301      	movs	r3, #1
 80051f0:	757b      	strb	r3, [r7, #21]
 80051f2:	e021      	b.n	8005238 <Save_EEPROM+0xdb0>
 80051f4:	2302      	movs	r3, #2
 80051f6:	757b      	strb	r3, [r7, #21]
 80051f8:	e01e      	b.n	8005238 <Save_EEPROM+0xdb0>
 80051fa:	2303      	movs	r3, #3
 80051fc:	757b      	strb	r3, [r7, #21]
 80051fe:	e01b      	b.n	8005238 <Save_EEPROM+0xdb0>
 8005200:	2304      	movs	r3, #4
 8005202:	757b      	strb	r3, [r7, #21]
 8005204:	e018      	b.n	8005238 <Save_EEPROM+0xdb0>
 8005206:	2305      	movs	r3, #5
 8005208:	757b      	strb	r3, [r7, #21]
 800520a:	e015      	b.n	8005238 <Save_EEPROM+0xdb0>
 800520c:	2306      	movs	r3, #6
 800520e:	757b      	strb	r3, [r7, #21]
 8005210:	e012      	b.n	8005238 <Save_EEPROM+0xdb0>
 8005212:	2307      	movs	r3, #7
 8005214:	757b      	strb	r3, [r7, #21]
 8005216:	e00f      	b.n	8005238 <Save_EEPROM+0xdb0>
 8005218:	2308      	movs	r3, #8
 800521a:	757b      	strb	r3, [r7, #21]
 800521c:	e00c      	b.n	8005238 <Save_EEPROM+0xdb0>
 800521e:	2309      	movs	r3, #9
 8005220:	757b      	strb	r3, [r7, #21]
 8005222:	e009      	b.n	8005238 <Save_EEPROM+0xdb0>
 8005224:	230a      	movs	r3, #10
 8005226:	757b      	strb	r3, [r7, #21]
 8005228:	e006      	b.n	8005238 <Save_EEPROM+0xdb0>
 800522a:	230b      	movs	r3, #11
 800522c:	757b      	strb	r3, [r7, #21]
 800522e:	e003      	b.n	8005238 <Save_EEPROM+0xdb0>
 8005230:	2000671c 	.word	0x2000671c
 8005234:	2300      	movs	r3, #0
 8005236:	757b      	strb	r3, [r7, #21]
 8005238:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[10], perCAN[RTC_MSG]);
 800523a:	4bce      	ldr	r3, [pc, #824]	; (8005574 <Save_EEPROM+0x10ec>)
 800523c:	88db      	ldrh	r3, [r3, #6]
 800523e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005242:	f000 8082 	beq.w	800534a <Save_EEPROM+0xec2>
 8005246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800524a:	f300 809f 	bgt.w	800538c <Save_EEPROM+0xf04>
 800524e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005252:	d07d      	beq.n	8005350 <Save_EEPROM+0xec8>
 8005254:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005258:	f300 8098 	bgt.w	800538c <Save_EEPROM+0xf04>
 800525c:	2bc8      	cmp	r3, #200	; 0xc8
 800525e:	d07a      	beq.n	8005356 <Save_EEPROM+0xece>
 8005260:	2bc8      	cmp	r3, #200	; 0xc8
 8005262:	f300 8093 	bgt.w	800538c <Save_EEPROM+0xf04>
 8005266:	2b32      	cmp	r3, #50	; 0x32
 8005268:	dc6c      	bgt.n	8005344 <Save_EEPROM+0xebc>
 800526a:	2b02      	cmp	r3, #2
 800526c:	f2c0 808e 	blt.w	800538c <Save_EEPROM+0xf04>
 8005270:	3b02      	subs	r3, #2
 8005272:	2b30      	cmp	r3, #48	; 0x30
 8005274:	f200 808a 	bhi.w	800538c <Save_EEPROM+0xf04>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <Save_EEPROM+0xdf8>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	08005387 	.word	0x08005387
 8005284:	0800538d 	.word	0x0800538d
 8005288:	08005381 	.word	0x08005381
 800528c:	0800537b 	.word	0x0800537b
 8005290:	0800538d 	.word	0x0800538d
 8005294:	0800538d 	.word	0x0800538d
 8005298:	0800538d 	.word	0x0800538d
 800529c:	0800538d 	.word	0x0800538d
 80052a0:	08005375 	.word	0x08005375
 80052a4:	0800538d 	.word	0x0800538d
 80052a8:	0800538d 	.word	0x0800538d
 80052ac:	0800538d 	.word	0x0800538d
 80052b0:	0800538d 	.word	0x0800538d
 80052b4:	0800538d 	.word	0x0800538d
 80052b8:	0800538d 	.word	0x0800538d
 80052bc:	0800538d 	.word	0x0800538d
 80052c0:	0800538d 	.word	0x0800538d
 80052c4:	0800538d 	.word	0x0800538d
 80052c8:	0800536f 	.word	0x0800536f
 80052cc:	0800538d 	.word	0x0800538d
 80052d0:	0800538d 	.word	0x0800538d
 80052d4:	0800538d 	.word	0x0800538d
 80052d8:	0800538d 	.word	0x0800538d
 80052dc:	0800538d 	.word	0x0800538d
 80052e0:	0800538d 	.word	0x0800538d
 80052e4:	0800538d 	.word	0x0800538d
 80052e8:	0800538d 	.word	0x0800538d
 80052ec:	0800538d 	.word	0x0800538d
 80052f0:	0800538d 	.word	0x0800538d
 80052f4:	0800538d 	.word	0x0800538d
 80052f8:	0800538d 	.word	0x0800538d
 80052fc:	0800538d 	.word	0x0800538d
 8005300:	0800538d 	.word	0x0800538d
 8005304:	0800538d 	.word	0x0800538d
 8005308:	0800538d 	.word	0x0800538d
 800530c:	0800538d 	.word	0x0800538d
 8005310:	0800538d 	.word	0x0800538d
 8005314:	0800538d 	.word	0x0800538d
 8005318:	08005369 	.word	0x08005369
 800531c:	0800538d 	.word	0x0800538d
 8005320:	0800538d 	.word	0x0800538d
 8005324:	0800538d 	.word	0x0800538d
 8005328:	0800538d 	.word	0x0800538d
 800532c:	0800538d 	.word	0x0800538d
 8005330:	0800538d 	.word	0x0800538d
 8005334:	0800538d 	.word	0x0800538d
 8005338:	0800538d 	.word	0x0800538d
 800533c:	0800538d 	.word	0x0800538d
 8005340:	08005363 	.word	0x08005363
 8005344:	2b64      	cmp	r3, #100	; 0x64
 8005346:	d009      	beq.n	800535c <Save_EEPROM+0xed4>
 8005348:	e020      	b.n	800538c <Save_EEPROM+0xf04>
 800534a:	2301      	movs	r3, #1
 800534c:	75bb      	strb	r3, [r7, #22]
 800534e:	e01f      	b.n	8005390 <Save_EEPROM+0xf08>
 8005350:	2302      	movs	r3, #2
 8005352:	75bb      	strb	r3, [r7, #22]
 8005354:	e01c      	b.n	8005390 <Save_EEPROM+0xf08>
 8005356:	2303      	movs	r3, #3
 8005358:	75bb      	strb	r3, [r7, #22]
 800535a:	e019      	b.n	8005390 <Save_EEPROM+0xf08>
 800535c:	2304      	movs	r3, #4
 800535e:	75bb      	strb	r3, [r7, #22]
 8005360:	e016      	b.n	8005390 <Save_EEPROM+0xf08>
 8005362:	2305      	movs	r3, #5
 8005364:	75bb      	strb	r3, [r7, #22]
 8005366:	e013      	b.n	8005390 <Save_EEPROM+0xf08>
 8005368:	2306      	movs	r3, #6
 800536a:	75bb      	strb	r3, [r7, #22]
 800536c:	e010      	b.n	8005390 <Save_EEPROM+0xf08>
 800536e:	2307      	movs	r3, #7
 8005370:	75bb      	strb	r3, [r7, #22]
 8005372:	e00d      	b.n	8005390 <Save_EEPROM+0xf08>
 8005374:	2308      	movs	r3, #8
 8005376:	75bb      	strb	r3, [r7, #22]
 8005378:	e00a      	b.n	8005390 <Save_EEPROM+0xf08>
 800537a:	2309      	movs	r3, #9
 800537c:	75bb      	strb	r3, [r7, #22]
 800537e:	e007      	b.n	8005390 <Save_EEPROM+0xf08>
 8005380:	230a      	movs	r3, #10
 8005382:	75bb      	strb	r3, [r7, #22]
 8005384:	e004      	b.n	8005390 <Save_EEPROM+0xf08>
 8005386:	230b      	movs	r3, #11
 8005388:	75bb      	strb	r3, [r7, #22]
 800538a:	e001      	b.n	8005390 <Save_EEPROM+0xf08>
 800538c:	2300      	movs	r3, #0
 800538e:	75bb      	strb	r3, [r7, #22]
 8005390:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[11], perCAN[VERIFY_MSG]);
 8005392:	4b78      	ldr	r3, [pc, #480]	; (8005574 <Save_EEPROM+0x10ec>)
 8005394:	891b      	ldrh	r3, [r3, #8]
 8005396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800539a:	f000 8082 	beq.w	80054a2 <Save_EEPROM+0x101a>
 800539e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053a2:	f300 809f 	bgt.w	80054e4 <Save_EEPROM+0x105c>
 80053a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053aa:	d07d      	beq.n	80054a8 <Save_EEPROM+0x1020>
 80053ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053b0:	f300 8098 	bgt.w	80054e4 <Save_EEPROM+0x105c>
 80053b4:	2bc8      	cmp	r3, #200	; 0xc8
 80053b6:	d07a      	beq.n	80054ae <Save_EEPROM+0x1026>
 80053b8:	2bc8      	cmp	r3, #200	; 0xc8
 80053ba:	f300 8093 	bgt.w	80054e4 <Save_EEPROM+0x105c>
 80053be:	2b32      	cmp	r3, #50	; 0x32
 80053c0:	dc6c      	bgt.n	800549c <Save_EEPROM+0x1014>
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	f2c0 808e 	blt.w	80054e4 <Save_EEPROM+0x105c>
 80053c8:	3b02      	subs	r3, #2
 80053ca:	2b30      	cmp	r3, #48	; 0x30
 80053cc:	f200 808a 	bhi.w	80054e4 <Save_EEPROM+0x105c>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <Save_EEPROM+0xf50>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080054df 	.word	0x080054df
 80053dc:	080054e5 	.word	0x080054e5
 80053e0:	080054d9 	.word	0x080054d9
 80053e4:	080054d3 	.word	0x080054d3
 80053e8:	080054e5 	.word	0x080054e5
 80053ec:	080054e5 	.word	0x080054e5
 80053f0:	080054e5 	.word	0x080054e5
 80053f4:	080054e5 	.word	0x080054e5
 80053f8:	080054cd 	.word	0x080054cd
 80053fc:	080054e5 	.word	0x080054e5
 8005400:	080054e5 	.word	0x080054e5
 8005404:	080054e5 	.word	0x080054e5
 8005408:	080054e5 	.word	0x080054e5
 800540c:	080054e5 	.word	0x080054e5
 8005410:	080054e5 	.word	0x080054e5
 8005414:	080054e5 	.word	0x080054e5
 8005418:	080054e5 	.word	0x080054e5
 800541c:	080054e5 	.word	0x080054e5
 8005420:	080054c7 	.word	0x080054c7
 8005424:	080054e5 	.word	0x080054e5
 8005428:	080054e5 	.word	0x080054e5
 800542c:	080054e5 	.word	0x080054e5
 8005430:	080054e5 	.word	0x080054e5
 8005434:	080054e5 	.word	0x080054e5
 8005438:	080054e5 	.word	0x080054e5
 800543c:	080054e5 	.word	0x080054e5
 8005440:	080054e5 	.word	0x080054e5
 8005444:	080054e5 	.word	0x080054e5
 8005448:	080054e5 	.word	0x080054e5
 800544c:	080054e5 	.word	0x080054e5
 8005450:	080054e5 	.word	0x080054e5
 8005454:	080054e5 	.word	0x080054e5
 8005458:	080054e5 	.word	0x080054e5
 800545c:	080054e5 	.word	0x080054e5
 8005460:	080054e5 	.word	0x080054e5
 8005464:	080054e5 	.word	0x080054e5
 8005468:	080054e5 	.word	0x080054e5
 800546c:	080054e5 	.word	0x080054e5
 8005470:	080054c1 	.word	0x080054c1
 8005474:	080054e5 	.word	0x080054e5
 8005478:	080054e5 	.word	0x080054e5
 800547c:	080054e5 	.word	0x080054e5
 8005480:	080054e5 	.word	0x080054e5
 8005484:	080054e5 	.word	0x080054e5
 8005488:	080054e5 	.word	0x080054e5
 800548c:	080054e5 	.word	0x080054e5
 8005490:	080054e5 	.word	0x080054e5
 8005494:	080054e5 	.word	0x080054e5
 8005498:	080054bb 	.word	0x080054bb
 800549c:	2b64      	cmp	r3, #100	; 0x64
 800549e:	d009      	beq.n	80054b4 <Save_EEPROM+0x102c>
 80054a0:	e020      	b.n	80054e4 <Save_EEPROM+0x105c>
 80054a2:	2301      	movs	r3, #1
 80054a4:	75fb      	strb	r3, [r7, #23]
 80054a6:	e01f      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054a8:	2302      	movs	r3, #2
 80054aa:	75fb      	strb	r3, [r7, #23]
 80054ac:	e01c      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054ae:	2303      	movs	r3, #3
 80054b0:	75fb      	strb	r3, [r7, #23]
 80054b2:	e019      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054b4:	2304      	movs	r3, #4
 80054b6:	75fb      	strb	r3, [r7, #23]
 80054b8:	e016      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054ba:	2305      	movs	r3, #5
 80054bc:	75fb      	strb	r3, [r7, #23]
 80054be:	e013      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054c0:	2306      	movs	r3, #6
 80054c2:	75fb      	strb	r3, [r7, #23]
 80054c4:	e010      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054c6:	2307      	movs	r3, #7
 80054c8:	75fb      	strb	r3, [r7, #23]
 80054ca:	e00d      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054cc:	2308      	movs	r3, #8
 80054ce:	75fb      	strb	r3, [r7, #23]
 80054d0:	e00a      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054d2:	2309      	movs	r3, #9
 80054d4:	75fb      	strb	r3, [r7, #23]
 80054d6:	e007      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054d8:	230a      	movs	r3, #10
 80054da:	75fb      	strb	r3, [r7, #23]
 80054dc:	e004      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054de:	230b      	movs	r3, #11
 80054e0:	75fb      	strb	r3, [r7, #23]
 80054e2:	e001      	b.n	80054e8 <Save_EEPROM+0x1060>
 80054e4:	2300      	movs	r3, #0
 80054e6:	75fb      	strb	r3, [r7, #23]
 80054e8:	bf00      	nop

	buffer[12] = inputConfig;
 80054ea:	4b23      	ldr	r3, [pc, #140]	; (8005578 <Save_EEPROM+0x10f0>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	763b      	strb	r3, [r7, #24]
	buffer[13] = thresholdBeacon >> 8;
 80054f0:	4b22      	ldr	r3, [pc, #136]	; (800557c <Save_EEPROM+0x10f4>)
 80054f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054f6:	121b      	asrs	r3, r3, #8
 80054f8:	b21b      	sxth	r3, r3
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	767b      	strb	r3, [r7, #25]
	buffer[14] = thresholdBeacon & 0xff;
 80054fe:	4b1f      	ldr	r3, [pc, #124]	; (800557c <Save_EEPROM+0x10f4>)
 8005500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	76bb      	strb	r3, [r7, #26]
	buffer[15] = thresholdRPM >> 8;
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <Save_EEPROM+0x10f8>)
 800550a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800550e:	121b      	asrs	r3, r3, #8
 8005510:	b21b      	sxth	r3, r3
 8005512:	b2db      	uxtb	r3, r3
 8005514:	76fb      	strb	r3, [r7, #27]
	buffer[16] = thresholdRPM & 0xff;
 8005516:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <Save_EEPROM+0x10f8>)
 8005518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	773b      	strb	r3, [r7, #28]
	buffer[17] = thresholdSpeed >> 8;
 8005520:	4b18      	ldr	r3, [pc, #96]	; (8005584 <Save_EEPROM+0x10fc>)
 8005522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005526:	121b      	asrs	r3, r3, #8
 8005528:	b21b      	sxth	r3, r3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	777b      	strb	r3, [r7, #29]
	buffer[18] = thresholdSpeed & 0xff;
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <Save_EEPROM+0x10fc>)
 8005530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	77bb      	strb	r3, [r7, #30]

	for(uint16_t i = 0; i < EEPROM_BUFFER_SIZE; i += 4)
 8005538:	2300      	movs	r3, #0
 800553a:	847b      	strh	r3, [r7, #34]	; 0x22
 800553c:	e010      	b.n	8005560 <Save_EEPROM+0x10d8>
		retVal = HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, &buffer[i], 4, EEPROM_WRITE_TIMEOUT);
 800553e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005540:	f107 020c 	add.w	r2, r7, #12
 8005544:	441a      	add	r2, r3
 8005546:	230a      	movs	r3, #10
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	2304      	movs	r3, #4
 800554c:	21a0      	movs	r1, #160	; 0xa0
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f003 fbc2 	bl	8008cd8 <HAL_I2C_Master_Transmit>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(uint16_t i = 0; i < EEPROM_BUFFER_SIZE; i += 4)
 800555a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800555c:	3304      	adds	r3, #4
 800555e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005562:	2b12      	cmp	r3, #18
 8005564:	d9eb      	bls.n	800553e <Save_EEPROM+0x10b6>

	return retVal;
 8005566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800556a:	4618      	mov	r0, r3
 800556c:	3728      	adds	r7, #40	; 0x28
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	2000671c 	.word	0x2000671c
 8005578:	20006700 	.word	0x20006700
 800557c:	2000463a 	.word	0x2000463a
 8005580:	2000463c 	.word	0x2000463c
 8005584:	2000463e 	.word	0x2000463e

08005588 <Principal_Datalogger_Init>:
#include "principal.h"
#include "stdio.h"
#include "string.h"

FRESULT Principal_Datalogger_Init(FATFS* fatfs_struct)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	FRESULT retVal = FR_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005594:	2180      	movs	r1, #128	; 0x80
 8005596:	4813      	ldr	r0, [pc, #76]	; (80055e4 <Principal_Datalogger_Init+0x5c>)
 8005598:	f003 f9f6 	bl	8008988 <HAL_GPIO_ReadPin>
 800559c:	4603      	mov	r3, r0
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d104      	bne.n	80055ac <Principal_Datalogger_Init+0x24>
	{
		flagDatalogger = DL_NO_CARD;
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <Principal_Datalogger_Init+0x60>)
 80055a4:	2202      	movs	r2, #2
 80055a6:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e017      	b.n	80055dc <Principal_Datalogger_Init+0x54>
	}

	BSP_SD_Init();
 80055ac:	f00b f986 	bl	80108bc <BSP_SD_Init>

	retVal = f_mount(fatfs_struct, SDPath, 1);
 80055b0:	2201      	movs	r2, #1
 80055b2:	490e      	ldr	r1, [pc, #56]	; (80055ec <Principal_Datalogger_Init+0x64>)
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f010 fee9 	bl	801638c <f_mount>
 80055ba:	4603      	mov	r3, r0
 80055bc:	73fb      	strb	r3, [r7, #15]

	flagDatalogger = DL_NO_SAVE;
 80055be:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <Principal_Datalogger_Init+0x60>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <Principal_Datalogger_Init+0x52>
	{
		flagDatalogger = DL_ERROR;
 80055ca:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <Principal_Datalogger_Init+0x60>)
 80055cc:	2204      	movs	r2, #4
 80055ce:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 80055d0:	2200      	movs	r2, #0
 80055d2:	4906      	ldr	r1, [pc, #24]	; (80055ec <Principal_Datalogger_Init+0x64>)
 80055d4:	2000      	movs	r0, #0
 80055d6:	f010 fed9 	bl	801638c <f_mount>
	}

	return retVal;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40020800 	.word	0x40020800
 80055e8:	200066fe 	.word	0x200066fe
 80055ec:	20006798 	.word	0x20006798

080055f0 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start(char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b090      	sub	sp, #64	; 0x40
 80055f4:	af04      	add	r7, sp, #16
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	4860      	ldr	r0, [pc, #384]	; (8005788 <Principal_Datalogger_Start+0x198>)
 8005608:	f003 f9be 	bl	8008988 <HAL_GPIO_ReadPin>
 800560c:	4603      	mov	r3, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d105      	bne.n	800561e <Principal_Datalogger_Start+0x2e>
	{
		Principal_Datalogger_Finish(dir_struct, file_struct);
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f8cf 	bl	80057b8 <Principal_Datalogger_Finish>
		return FR_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	e0af      	b.n	800577e <Principal_Datalogger_Start+0x18e>
	}

	else if((flagDatalogger == DL_BUT_PRESS) && (accDatalogger[DL_ACC_COOLDOWN] > 0))
 800561e:	4b5b      	ldr	r3, [pc, #364]	; (800578c <Principal_Datalogger_Start+0x19c>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d108      	bne.n	8005638 <Principal_Datalogger_Start+0x48>
 8005626:	4b5a      	ldr	r3, [pc, #360]	; (8005790 <Principal_Datalogger_Start+0x1a0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d004      	beq.n	8005638 <Principal_Datalogger_Start+0x48>
	{
		flagDatalogger = DL_NO_SAVE;
 800562e:	4b57      	ldr	r3, [pc, #348]	; (800578c <Principal_Datalogger_Start+0x19c>)
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e0a2      	b.n	800577e <Principal_Datalogger_Start+0x18e>
	}

	else if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800563c:	4855      	ldr	r0, [pc, #340]	; (8005794 <Principal_Datalogger_Start+0x1a4>)
 800563e:	f003 f9a3 	bl	8008988 <HAL_GPIO_ReadPin>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d02f      	beq.n	80056a8 <Principal_Datalogger_Start+0xb8>
			|| (flagRTC != RTC_OK)
 8005648:	4b53      	ldr	r3, [pc, #332]	; (8005798 <Principal_Datalogger_Start+0x1a8>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d12b      	bne.n	80056a8 <Principal_Datalogger_Start+0xb8>
			|| ((flagDatalogger != DL_BUT_PRESS)
 8005650:	4b4e      	ldr	r3, [pc, #312]	; (800578c <Principal_Datalogger_Start+0x19c>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d02c      	beq.n	80056b2 <Principal_Datalogger_Start+0xc2>
			&& (ecuData.rpm < thresholdRPM)
 8005658:	4b50      	ldr	r3, [pc, #320]	; (800579c <Principal_Datalogger_Start+0x1ac>)
 800565a:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 800565e:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <Principal_Datalogger_Start+0x1b0>)
 8005660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005664:	429a      	cmp	r2, r3
 8005666:	da24      	bge.n	80056b2 <Principal_Datalogger_Start+0xc2>
			&& (ecuData.wheel_speed_fl < thresholdSpeed)
 8005668:	4b4c      	ldr	r3, [pc, #304]	; (800579c <Principal_Datalogger_Start+0x1ac>)
 800566a:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 800566e:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <Principal_Datalogger_Start+0x1b4>)
 8005670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005674:	429a      	cmp	r2, r3
 8005676:	da1c      	bge.n	80056b2 <Principal_Datalogger_Start+0xc2>
			&& (ecuData.wheel_speed_fr < thresholdSpeed)
 8005678:	4b48      	ldr	r3, [pc, #288]	; (800579c <Principal_Datalogger_Start+0x1ac>)
 800567a:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 800567e:	4b49      	ldr	r3, [pc, #292]	; (80057a4 <Principal_Datalogger_Start+0x1b4>)
 8005680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005684:	429a      	cmp	r2, r3
 8005686:	da14      	bge.n	80056b2 <Principal_Datalogger_Start+0xc2>
			&& (ecuData.wheel_speed_rl < thresholdSpeed)
 8005688:	4b44      	ldr	r3, [pc, #272]	; (800579c <Principal_Datalogger_Start+0x1ac>)
 800568a:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 800568e:	4b45      	ldr	r3, [pc, #276]	; (80057a4 <Principal_Datalogger_Start+0x1b4>)
 8005690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005694:	429a      	cmp	r2, r3
 8005696:	da0c      	bge.n	80056b2 <Principal_Datalogger_Start+0xc2>
			&& (ecuData.wheel_speed_rr < thresholdSpeed)))
 8005698:	4b40      	ldr	r3, [pc, #256]	; (800579c <Principal_Datalogger_Start+0x1ac>)
 800569a:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 800569e:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <Principal_Datalogger_Start+0x1b4>)
 80056a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	da04      	bge.n	80056b2 <Principal_Datalogger_Start+0xc2>
	{
		flagDatalogger = DL_NO_SAVE;
 80056a8:	4b38      	ldr	r3, [pc, #224]	; (800578c <Principal_Datalogger_Start+0x19c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e065      	b.n	800577e <Principal_Datalogger_Start+0x18e>
	}

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 80056b2:	4b37      	ldr	r3, [pc, #220]	; (8005790 <Principal_Datalogger_Start+0x1a0>)
 80056b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80056b8:	601a      	str	r2, [r3, #0]

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	dataloggerBufferPosition = 0;
 80056ba:	4b3b      	ldr	r3, [pc, #236]	; (80057a8 <Principal_Datalogger_Start+0x1b8>)
 80056bc:	2200      	movs	r2, #0
 80056be:	801a      	strh	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80056c0:	f107 0314 	add.w	r3, r7, #20
 80056c4:	2200      	movs	r2, #0
 80056c6:	4619      	mov	r1, r3
 80056c8:	4838      	ldr	r0, [pc, #224]	; (80057ac <Principal_Datalogger_Start+0x1bc>)
 80056ca:	f006 fb61 	bl	800bd90 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80056ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056d2:	2200      	movs	r2, #0
 80056d4:	4619      	mov	r1, r3
 80056d6:	4835      	ldr	r0, [pc, #212]	; (80057ac <Principal_Datalogger_Start+0x1bc>)
 80056d8:	f006 fc3c 	bl	800bf54 <HAL_RTC_GetDate>

	sprintf(dir, "%02d-%02d-%02d", sDate.Year, sDate.Month, sDate.Date);
 80056dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056e0:	461a      	mov	r2, r3
 80056e2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80056e6:	4619      	mov	r1, r3
 80056e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	460b      	mov	r3, r1
 80056f0:	492f      	ldr	r1, [pc, #188]	; (80057b0 <Principal_Datalogger_Start+0x1c0>)
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f012 faaa 	bl	8017c4c <siprintf>

	sprintf(file, "%s/%s_%02d-%02d-%02d.sd", dir, dir, sTime.Hours, sTime.Minutes, sTime.Seconds);
 80056f8:	7d3b      	ldrb	r3, [r7, #20]
 80056fa:	7d7a      	ldrb	r2, [r7, #21]
 80056fc:	7db9      	ldrb	r1, [r7, #22]
 80056fe:	9102      	str	r1, [sp, #8]
 8005700:	9201      	str	r2, [sp, #4]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	492a      	ldr	r1, [pc, #168]	; (80057b4 <Principal_Datalogger_Start+0x1c4>)
 800570a:	68b8      	ldr	r0, [r7, #8]
 800570c:	f012 fa9e 	bl	8017c4c <siprintf>

	retVal = f_mkdir(dir);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f011 fabd 	bl	8016c90 <f_mkdir>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if((retVal == FR_OK) || (retVal == FR_EXIST))
 800571c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <Principal_Datalogger_Start+0x13c>
 8005724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005728:	2b08      	cmp	r3, #8
 800572a:	d11f      	bne.n	800576c <Principal_Datalogger_Start+0x17c>
	{
		retVal = f_opendir(dir_struct, dir);
 800572c:	68f9      	ldr	r1, [r7, #12]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f011 fa3b 	bl	8016baa <f_opendir>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(retVal == FR_OK)
 800573a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800573e:	2b00      	cmp	r3, #0
 8005740:	d114      	bne.n	800576c <Principal_Datalogger_Start+0x17c>
		{
			retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 8005742:	220a      	movs	r2, #10
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	6838      	ldr	r0, [r7, #0]
 8005748:	f010 fe64 	bl	8016414 <f_open>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			if(retVal == FR_OK)
 8005752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005756:	2b00      	cmp	r3, #0
 8005758:	d108      	bne.n	800576c <Principal_Datalogger_Start+0x17c>
			{
				flagDatalogger = DL_SAVE;
 800575a:	4b0c      	ldr	r3, [pc, #48]	; (800578c <Principal_Datalogger_Start+0x19c>)
 800575c:	2201      	movs	r2, #1
 800575e:	701a      	strb	r2, [r3, #0]
				accDatalogger[DL_ACC_TIMING] = 0;
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <Principal_Datalogger_Start+0x1a0>)
 8005762:	2200      	movs	r2, #0
 8005764:	609a      	str	r2, [r3, #8]
				accDatalogger[DL_ACC_TIMEOUT] = 0;
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <Principal_Datalogger_Start+0x1a0>)
 8005768:	2200      	movs	r2, #0
 800576a:	605a      	str	r2, [r3, #4]
			}
		}
	}

	if(retVal != FR_OK)
 800576c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <Principal_Datalogger_Start+0x18a>
		flagDatalogger = DL_ERROR;
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <Principal_Datalogger_Start+0x19c>)
 8005776:	2204      	movs	r2, #4
 8005778:	701a      	strb	r2, [r3, #0]

	return retVal;
 800577a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800577e:	4618      	mov	r0, r3
 8005780:	3730      	adds	r7, #48	; 0x30
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40020800 	.word	0x40020800
 800578c:	200066fe 	.word	0x200066fe
 8005790:	2000673c 	.word	0x2000673c
 8005794:	40020000 	.word	0x40020000
 8005798:	200066ff 	.word	0x200066ff
 800579c:	20000590 	.word	0x20000590
 80057a0:	2000463c 	.word	0x2000463c
 80057a4:	2000463e 	.word	0x2000463e
 80057a8:	20004638 	.word	0x20004638
 80057ac:	20000380 	.word	0x20000380
 80057b0:	08018524 	.word	0x08018524
 80057b4:	08018534 	.word	0x08018534

080057b8 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish(DIR* dir_struct, FIL* file_struct)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
	FRESULT retVal = FR_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]

	retVal = f_close(file_struct);
 80057c6:	6838      	ldr	r0, [r7, #0]
 80057c8:	f011 f9cf 	bl	8016b6a <f_close>
 80057cc:	4603      	mov	r3, r0
 80057ce:	73fb      	strb	r3, [r7, #15]
	f_closedir(dir_struct);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f011 fa45 	bl	8016c60 <f_closedir>

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 80057d6:	2180      	movs	r1, #128	; 0x80
 80057d8:	4810      	ldr	r0, [pc, #64]	; (800581c <Principal_Datalogger_Finish+0x64>)
 80057da:	f003 f8d5 	bl	8008988 <HAL_GPIO_ReadPin>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d10a      	bne.n	80057fa <Principal_Datalogger_Finish+0x42>
	{
		retVal = f_mount(0, SDPath, 0);
 80057e4:	2200      	movs	r2, #0
 80057e6:	490e      	ldr	r1, [pc, #56]	; (8005820 <Principal_Datalogger_Finish+0x68>)
 80057e8:	2000      	movs	r0, #0
 80057ea:	f010 fdcf 	bl	801638c <f_mount>
 80057ee:	4603      	mov	r3, r0
 80057f0:	73fb      	strb	r3, [r7, #15]

		flagDatalogger = DL_NO_CARD;
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <Principal_Datalogger_Finish+0x6c>)
 80057f4:	2202      	movs	r2, #2
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e006      	b.n	8005808 <Principal_Datalogger_Finish+0x50>
	}

	else if(flagDatalogger != DL_ERROR)
 80057fa:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <Principal_Datalogger_Finish+0x6c>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d002      	beq.n	8005808 <Principal_Datalogger_Finish+0x50>
		flagDatalogger = DL_NO_SAVE;
 8005802:	4b08      	ldr	r3, [pc, #32]	; (8005824 <Principal_Datalogger_Finish+0x6c>)
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <Principal_Datalogger_Finish+0x70>)
 800580a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800580e:	601a      	str	r2, [r3, #0]

	return retVal;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40020800 	.word	0x40020800
 8005820:	20006798 	.word	0x20006798
 8005824:	200066fe 	.word	0x200066fe
 8005828:	2000673c 	.word	0x2000673c

0800582c <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(CAN_HandleTypeDef* hcan, uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, DIR* dir_struct, FIL* file_struct)
{
 800582c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005830:	b08b      	sub	sp, #44	; 0x2c
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	4613      	mov	r3, r2
 800583c:	71fb      	strb	r3, [r7, #7]
 800583e:	466b      	mov	r3, sp
 8005840:	461e      	mov	r6, r3
	uint8_t buffer[5 + data_length];
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	1d59      	adds	r1, r3, #5
 8005846:	1e4b      	subs	r3, r1, #1
 8005848:	623b      	str	r3, [r7, #32]
 800584a:	460a      	mov	r2, r1
 800584c:	2300      	movs	r3, #0
 800584e:	4690      	mov	r8, r2
 8005850:	4699      	mov	r9, r3
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800585e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005866:	460a      	mov	r2, r1
 8005868:	2300      	movs	r3, #0
 800586a:	4614      	mov	r4, r2
 800586c:	461d      	mov	r5, r3
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	00eb      	lsls	r3, r5, #3
 8005878:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800587c:	00e2      	lsls	r2, r4, #3
 800587e:	460b      	mov	r3, r1
 8005880:	3307      	adds	r3, #7
 8005882:	08db      	lsrs	r3, r3, #3
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	ebad 0d03 	sub.w	sp, sp, r3
 800588a:	466b      	mov	r3, sp
 800588c:	3300      	adds	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]
	UINT writeSize;
	FRESULT verify[2];

	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005890:	2102      	movs	r1, #2
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f001 ffde 	bl	8007854 <HAL_CAN_DeactivateNotification>

	if((HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005898:	2180      	movs	r1, #128	; 0x80
 800589a:	4854      	ldr	r0, [pc, #336]	; (80059ec <Principal_Datalogger_Save_Buffer+0x1c0>)
 800589c:	f003 f874 	bl	8008988 <HAL_GPIO_ReadPin>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d00b      	beq.n	80058be <Principal_Datalogger_Save_Buffer+0x92>
		|| (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 80058a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058aa:	4851      	ldr	r0, [pc, #324]	; (80059f0 <Principal_Datalogger_Save_Buffer+0x1c4>)
 80058ac:	f003 f86c 	bl	8008988 <HAL_GPIO_ReadPin>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d003      	beq.n	80058be <Principal_Datalogger_Save_Buffer+0x92>
		|| (flagDatalogger != DL_SAVE))
 80058b6:	4b4f      	ldr	r3, [pc, #316]	; (80059f4 <Principal_Datalogger_Save_Buffer+0x1c8>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d008      	beq.n	80058d0 <Principal_Datalogger_Save_Buffer+0xa4>
	{
		Principal_Datalogger_Finish(dir_struct, file_struct);
 80058be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80058c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80058c2:	f7ff ff79 	bl	80057b8 <Principal_Datalogger_Finish>

		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80058c6:	2102      	movs	r1, #2
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f001 ff9d 	bl	8007808 <HAL_CAN_ActivateNotification>

		return;
 80058ce:	e088      	b.n	80059e2 <Principal_Datalogger_Save_Buffer+0x1b6>
	}

	buffer[0] = 'D';
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2244      	movs	r2, #68	; 0x44
 80058d4:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'L';
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	224c      	movs	r2, #76	; 0x4c
 80058da:	705a      	strb	r2, [r3, #1]
	buffer[2] = data_id & 0xff;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	709a      	strb	r2, [r3, #2]
	buffer[3] = data_length;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	79fa      	ldrb	r2, [r7, #7]
 80058e8:	70da      	strb	r2, [r3, #3]
	buffer[4] = accDatalogger[DL_ACC_TIMING];
 80058ea:	4b43      	ldr	r3, [pc, #268]	; (80059f8 <Principal_Datalogger_Save_Buffer+0x1cc>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	711a      	strb	r2, [r3, #4]

	accDatalogger[DL_ACC_TIMING] = 0;
 80058f4:	4b40      	ldr	r3, [pc, #256]	; (80059f8 <Principal_Datalogger_Save_Buffer+0x1cc>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]

	for(uint8_t i = 0; i < data_length; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005900:	e00e      	b.n	8005920 <Principal_Datalogger_Save_Buffer+0xf4>
		buffer[5 + i] = data_buffer[i];
 8005902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	441a      	add	r2, r3
 800590a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800590e:	3305      	adds	r3, #5
 8005910:	7811      	ldrb	r1, [r2, #0]
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < data_length; i++)
 8005916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800591a:	3301      	adds	r3, #1
 800591c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005920:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	429a      	cmp	r2, r3
 8005928:	d3eb      	bcc.n	8005902 <Principal_Datalogger_Save_Buffer+0xd6>

	memcpy(dataloggerBuffer + dataloggerBufferPosition, buffer, 5 + data_length);
 800592a:	4b34      	ldr	r3, [pc, #208]	; (80059fc <Principal_Datalogger_Save_Buffer+0x1d0>)
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	4b33      	ldr	r3, [pc, #204]	; (8005a00 <Principal_Datalogger_Save_Buffer+0x1d4>)
 8005932:	18d0      	adds	r0, r2, r3
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	3305      	adds	r3, #5
 8005938:	461a      	mov	r2, r3
 800593a:	69f9      	ldr	r1, [r7, #28]
 800593c:	f012 f970 	bl	8017c20 <memcpy>

	dataloggerBufferPosition += (5 + data_length);
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	b29a      	uxth	r2, r3
 8005944:	4b2d      	ldr	r3, [pc, #180]	; (80059fc <Principal_Datalogger_Save_Buffer+0x1d0>)
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	4413      	add	r3, r2
 800594a:	b29b      	uxth	r3, r3
 800594c:	3305      	adds	r3, #5
 800594e:	b29a      	uxth	r2, r3
 8005950:	4b2a      	ldr	r3, [pc, #168]	; (80059fc <Principal_Datalogger_Save_Buffer+0x1d0>)
 8005952:	801a      	strh	r2, [r3, #0]

	if((dataloggerBufferPosition > DATALOGGER_SAVE_THR) || (accDatalogger[DL_ACC_TIMEOUT] > DATALOGGER_SAVE_TIME_THR))
 8005954:	4b29      	ldr	r3, [pc, #164]	; (80059fc <Principal_Datalogger_Save_Buffer+0x1d0>)
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	f643 72f3 	movw	r2, #16371	; 0x3ff3
 800595c:	4293      	cmp	r3, r2
 800595e:	d804      	bhi.n	800596a <Principal_Datalogger_Save_Buffer+0x13e>
 8005960:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <Principal_Datalogger_Save_Buffer+0x1cc>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005968:	d936      	bls.n	80059d8 <Principal_Datalogger_Save_Buffer+0x1ac>
	{
		dataloggerBufferPosition++;
 800596a:	4b24      	ldr	r3, [pc, #144]	; (80059fc <Principal_Datalogger_Save_Buffer+0x1d0>)
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	3301      	adds	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	4b22      	ldr	r3, [pc, #136]	; (80059fc <Principal_Datalogger_Save_Buffer+0x1d0>)
 8005974:	801a      	strh	r2, [r3, #0]

		verify[0] = f_write(file_struct, dataloggerBuffer, dataloggerBufferPosition, &writeSize);
 8005976:	4b21      	ldr	r3, [pc, #132]	; (80059fc <Principal_Datalogger_Save_Buffer+0x1d0>)
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	f107 0318 	add.w	r3, r7, #24
 8005980:	491f      	ldr	r1, [pc, #124]	; (8005a00 <Principal_Datalogger_Save_Buffer+0x1d4>)
 8005982:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005984:	f010 fedf 	bl	8016746 <f_write>
 8005988:	4603      	mov	r3, r0
 800598a:	753b      	strb	r3, [r7, #20]
		verify[1] = f_sync(file_struct);
 800598c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800598e:	f011 f86e 	bl	8016a6e <f_sync>
 8005992:	4603      	mov	r3, r0
 8005994:	757b      	strb	r3, [r7, #21]

		if((verify[0] != FR_OK) || (verify[1] != FR_OK) || (writeSize != dataloggerBufferPosition) || (flagDatalogger != DL_SAVE))
 8005996:	7d3b      	ldrb	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10c      	bne.n	80059b6 <Principal_Datalogger_Save_Buffer+0x18a>
 800599c:	7d7b      	ldrb	r3, [r7, #21]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <Principal_Datalogger_Save_Buffer+0x18a>
 80059a2:	4b16      	ldr	r3, [pc, #88]	; (80059fc <Principal_Datalogger_Save_Buffer+0x1d0>)
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d103      	bne.n	80059b6 <Principal_Datalogger_Save_Buffer+0x18a>
 80059ae:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <Principal_Datalogger_Save_Buffer+0x1c8>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d00a      	beq.n	80059cc <Principal_Datalogger_Save_Buffer+0x1a0>
		{
			if(flagDatalogger == DL_SAVE)
 80059b6:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <Principal_Datalogger_Save_Buffer+0x1c8>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d102      	bne.n	80059c4 <Principal_Datalogger_Save_Buffer+0x198>
				flagDatalogger = DL_ERROR;
 80059be:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <Principal_Datalogger_Save_Buffer+0x1c8>)
 80059c0:	2204      	movs	r2, #4
 80059c2:	701a      	strb	r2, [r3, #0]

			Principal_Datalogger_Finish(dir_struct, file_struct);
 80059c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80059c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80059c8:	f7ff fef6 	bl	80057b8 <Principal_Datalogger_Finish>
		}

		dataloggerBufferPosition = 0;
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <Principal_Datalogger_Save_Buffer+0x1d0>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	801a      	strh	r2, [r3, #0]
		accDatalogger[DL_ACC_TIMEOUT] = 0;
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <Principal_Datalogger_Save_Buffer+0x1cc>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	605a      	str	r2, [r3, #4]
	}

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80059d8:	2102      	movs	r1, #2
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 ff14 	bl	8007808 <HAL_CAN_ActivateNotification>

	return;
 80059e0:	bf00      	nop
 80059e2:	46b5      	mov	sp, r6
}
 80059e4:	372c      	adds	r7, #44	; 0x2c
 80059e6:	46bd      	mov	sp, r7
 80059e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059ec:	40020800 	.word	0x40020800
 80059f0:	40020000 	.word	0x40020000
 80059f4:	200066fe 	.word	0x200066fe
 80059f8:	2000673c 	.word	0x2000673c
 80059fc:	20004638 	.word	0x20004638
 8005a00:	20000638 	.word	0x20000638

08005a04 <Principal_Datalogger_Button>:

void Principal_Datalogger_Button(DIR* dir_struct, FIL* file_struct)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
	if(accDatalogger[DL_ACC_COOLDOWN] == 0)
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <Principal_Datalogger_Button+0x4c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d117      	bne.n	8005a46 <Principal_Datalogger_Button+0x42>
	{
		if((flagDatalogger == DL_NO_SAVE) && (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET))
 8005a16:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <Principal_Datalogger_Button+0x50>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <Principal_Datalogger_Button+0x32>
 8005a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a22:	480d      	ldr	r0, [pc, #52]	; (8005a58 <Principal_Datalogger_Button+0x54>)
 8005a24:	f002 ffb0 	bl	8008988 <HAL_GPIO_ReadPin>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <Principal_Datalogger_Button+0x32>
			flagDatalogger = DL_BUT_PRESS;
 8005a2e:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <Principal_Datalogger_Button+0x50>)
 8005a30:	2203      	movs	r2, #3
 8005a32:	701a      	strb	r2, [r3, #0]

		else if(flagDatalogger == DL_SAVE)
			Principal_Datalogger_Finish(dir_struct, file_struct);
	}
}
 8005a34:	e007      	b.n	8005a46 <Principal_Datalogger_Button+0x42>
		else if(flagDatalogger == DL_SAVE)
 8005a36:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <Principal_Datalogger_Button+0x50>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d103      	bne.n	8005a46 <Principal_Datalogger_Button+0x42>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff feb9 	bl	80057b8 <Principal_Datalogger_Finish>
}
 8005a46:	bf00      	nop
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	2000673c 	.word	0x2000673c
 8005a54:	200066fe 	.word	0x200066fe
 8005a58:	40020000 	.word	0x40020000

08005a5c <Principal_Card_Detection>:

void Principal_Card_Detection(FATFS* fatfs_struct, DIR* dir_struct, FIL* file_struct)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 8005a68:	2180      	movs	r1, #128	; 0x80
 8005a6a:	480f      	ldr	r0, [pc, #60]	; (8005aa8 <Principal_Card_Detection+0x4c>)
 8005a6c:	f002 ff8c 	bl	8008988 <HAL_GPIO_ReadPin>
 8005a70:	4603      	mov	r3, r0
 8005a72:	75fb      	strb	r3, [r7, #23]

	if((cd_pin == GPIO_PIN_SET) && (flagDatalogger != DL_NO_CARD))
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d108      	bne.n	8005a8c <Principal_Card_Detection+0x30>
 8005a7a:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <Principal_Card_Detection+0x50>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d004      	beq.n	8005a8c <Principal_Card_Detection+0x30>
		Principal_Datalogger_Finish(dir_struct, file_struct);
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	68b8      	ldr	r0, [r7, #8]
 8005a86:	f7ff fe97 	bl	80057b8 <Principal_Datalogger_Finish>

	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
		Principal_Datalogger_Init(fatfs_struct);
}
 8005a8a:	e009      	b.n	8005aa0 <Principal_Card_Detection+0x44>
	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <Principal_Card_Detection+0x44>
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <Principal_Card_Detection+0x50>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d102      	bne.n	8005aa0 <Principal_Card_Detection+0x44>
		Principal_Datalogger_Init(fatfs_struct);
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f7ff fd74 	bl	8005588 <Principal_Datalogger_Init>
}
 8005aa0:	bf00      	nop
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40020800 	.word	0x40020800
 8005aac:	200066fe 	.word	0x200066fe

08005ab0 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
	if(accLap < thresholdBeacon)
 8005ab4:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <Principal_Beacon_Detect+0x30>)
 8005ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005aba:	461a      	mov	r2, r3
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <Principal_Beacon_Detect+0x34>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d80a      	bhi.n	8005ada <Principal_Beacon_Detect+0x2a>
		return;

	lapNumber++;
 8005ac4:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <Principal_Beacon_Detect+0x38>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <Principal_Beacon_Detect+0x38>)
 8005ace:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, BEACON_MSG);
 8005ad0:	2105      	movs	r1, #5
 8005ad2:	4806      	ldr	r0, [pc, #24]	; (8005aec <Principal_Beacon_Detect+0x3c>)
 8005ad4:	f7fc fc3c 	bl	8002350 <Principal_Transmit_Msg>
 8005ad8:	e000      	b.n	8005adc <Principal_Beacon_Detect+0x2c>
		return;
 8005ada:	bf00      	nop
}
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	2000463a 	.word	0x2000463a
 8005ae4:	20006784 	.word	0x20006784
 8005ae8:	20000574 	.word	0x20000574
 8005aec:	20000304 	.word	0x20000304

08005af0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 8005af8:	4b2a      	ldr	r3, [pc, #168]	; (8005ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8005afa:	4a2b      	ldr	r2, [pc, #172]	; (8005ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8005afc:	2100      	movs	r1, #0
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 fd70 	bl	80075e4 <HAL_CAN_GetRxMessage>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d141      	bne.n	8005b8e <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
	{
		verifyCAN |= 2;
 8005b0a:	4b28      	ldr	r3, [pc, #160]	; (8005bac <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f043 0302 	orr.w	r3, r3, #2
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005b16:	701a      	strb	r2, [r3, #0]

		if((rxHeader.IDE == CAN_ID_STD) && ((rxHeader.StdId & CAN_DAQ_MASK) == CAN_DAQ_FILTER) && (flagDatalogger == DL_SAVE))
 8005b18:	4b23      	ldr	r3, [pc, #140]	; (8005ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d118      	bne.n	8005b52 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8005b20:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b28:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005b2c:	d111      	bne.n	8005b52 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8005b2e:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10d      	bne.n	8005b52 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
			Principal_Datalogger_Save_Buffer(hcan, rxHeader.StdId, rxHeader.DLC, rxData, &dirStruct, &fileStruct);
 8005b36:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8005b38:	6819      	ldr	r1, [r3, #0]
 8005b3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005b42:	9301      	str	r3, [sp, #4]
 8005b44:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	4b16      	ldr	r3, [pc, #88]	; (8005ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fe6e 	bl	800582c <Principal_Datalogger_Save_Buffer>
		}
	}

	else
		verifyCAN &= 1;
}
 8005b50:	e024      	b.n	8005b9c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		else if(rxHeader.IDE == CAN_ID_EXT)
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d120      	bne.n	8005b9c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
			if((rxHeader.ExtId & CAN_CFG_MASK) == CAN_CFG_FILTER)
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d107      	bne.n	8005b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
				Principal_Receive_Config(&hi2c1, rxData, rxHeader.DLC);
 8005b68:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	490d      	ldr	r1, [pc, #52]	; (8005ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8005b70:	4814      	ldr	r0, [pc, #80]	; (8005bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8005b72:	f7fd ff93 	bl	8003a9c <Principal_Receive_Config>
}
 8005b76:	e011      	b.n	8005b9c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
				PDM_CAN_Process_Data(&rxHeader, rxData, &pdmReadings);
 8005b78:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8005b7a:	490a      	ldr	r1, [pc, #40]	; (8005ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8005b7c:	480a      	ldr	r0, [pc, #40]	; (8005ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8005b7e:	f7fc faa3 	bl	80020c8 <PDM_CAN_Process_Data>
				FT_CAN_ReceiveData(&rxHeader, rxData, &ecuData);
 8005b82:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8005b84:	4907      	ldr	r1, [pc, #28]	; (8005ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8005b86:	4808      	ldr	r0, [pc, #32]	; (8005ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8005b88:	f7fa fd4a 	bl	8000620 <FT_CAN_ReceiveData>
}
 8005b8c:	e006      	b.n	8005b9c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		verifyCAN &= 1;
 8005b8e:	4b07      	ldr	r3, [pc, #28]	; (8005bac <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	4b04      	ldr	r3, [pc, #16]	; (8005bac <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005b9a:	701a      	strb	r2, [r3, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	2000052c 	.word	0x2000052c
 8005ba8:	20000540 	.word	0x20000540
 8005bac:	20006788 	.word	0x20006788
 8005bb0:	200066fe 	.word	0x200066fe
 8005bb4:	200056a8 	.word	0x200056a8
 8005bb8:	20004640 	.word	0x20004640
 8005bbc:	1ff80000 	.word	0x1ff80000
 8005bc0:	1e300000 	.word	0x1e300000
 8005bc4:	2000032c 	.word	0x2000032c
 8005bc8:	200005f8 	.word	0x200005f8
 8005bcc:	20000590 	.word	0x20000590

08005bd0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pinLevel;

	if(GPIO_Pin == EXTI0_Pin)
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005be0:	d13c      	bne.n	8005c5c <HAL_GPIO_EXTI_Callback+0x8c>
	{
		pinLevel = HAL_GPIO_ReadPin(EXTI0_GPIO_Port, EXTI0_Pin);
 8005be2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005be6:	4840      	ldr	r0, [pc, #256]	; (8005ce8 <HAL_GPIO_EXTI_Callback+0x118>)
 8005be8:	f002 fece 	bl	8008988 <HAL_GPIO_ReadPin>
 8005bec:	4603      	mov	r3, r0
 8005bee:	73fb      	strb	r3, [r7, #15]

		if(((inputConfig & 0x01) == INPUT_BEACON_PIN_0)
 8005bf0:	4b3e      	ldr	r3, [pc, #248]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d113      	bne.n	8005c24 <HAL_GPIO_EXTI_Callback+0x54>
				&& ((((inputConfig & 0x04) == INPUT_BEACON_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <HAL_GPIO_EXTI_Callback+0x3e>
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <HAL_GPIO_EXTI_Callback+0x50>
				|| (((inputConfig & 0x04) == INPUT_BEACON_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8005c0e:	4b37      	ldr	r3, [pc, #220]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d004      	beq.n	8005c24 <HAL_GPIO_EXTI_Callback+0x54>
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_GPIO_EXTI_Callback+0x54>
			Principal_Beacon_Detect();
 8005c20:	f7ff ff46 	bl	8005ab0 <Principal_Beacon_Detect>

		if(((inputConfig & 0x02) == INPUT_DATALOGGER_PIN_0)
 8005c24:	4b31      	ldr	r3, [pc, #196]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d115      	bne.n	8005c5c <HAL_GPIO_EXTI_Callback+0x8c>
				&& ((((inputConfig & 0x08) == INPUT_DATALOGGER_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 8005c30:	4b2e      	ldr	r3, [pc, #184]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d102      	bne.n	8005c42 <HAL_GPIO_EXTI_Callback+0x72>
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_GPIO_EXTI_Callback+0x84>
				|| (((inputConfig & 0x08) == INPUT_DATALOGGER_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8005c42:	4b2a      	ldr	r3, [pc, #168]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d006      	beq.n	8005c5c <HAL_GPIO_EXTI_Callback+0x8c>
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d103      	bne.n	8005c5c <HAL_GPIO_EXTI_Callback+0x8c>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 8005c54:	4926      	ldr	r1, [pc, #152]	; (8005cf0 <HAL_GPIO_EXTI_Callback+0x120>)
 8005c56:	4827      	ldr	r0, [pc, #156]	; (8005cf4 <HAL_GPIO_EXTI_Callback+0x124>)
 8005c58:	f7ff fed4 	bl	8005a04 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c62:	d13c      	bne.n	8005cde <HAL_GPIO_EXTI_Callback+0x10e>
	{
		pinLevel = HAL_GPIO_ReadPin(EXTI1_GPIO_Port, EXTI1_Pin);
 8005c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c68:	481f      	ldr	r0, [pc, #124]	; (8005ce8 <HAL_GPIO_EXTI_Callback+0x118>)
 8005c6a:	f002 fe8d 	bl	8008988 <HAL_GPIO_ReadPin>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	73fb      	strb	r3, [r7, #15]

		if(((inputConfig & 0x01) == INPUT_BEACON_PIN_1)
 8005c72:	4b1e      	ldr	r3, [pc, #120]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d013      	beq.n	8005ca6 <HAL_GPIO_EXTI_Callback+0xd6>
				&& ((((inputConfig & 0x04) == INPUT_BEACON_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 8005c7e:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <HAL_GPIO_EXTI_Callback+0xc0>
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_GPIO_EXTI_Callback+0xd2>
				|| (((inputConfig & 0x04) == INPUT_BEACON_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8005c90:	4b16      	ldr	r3, [pc, #88]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <HAL_GPIO_EXTI_Callback+0xd6>
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_GPIO_EXTI_Callback+0xd6>
			Principal_Beacon_Detect();
 8005ca2:	f7ff ff05 	bl	8005ab0 <Principal_Beacon_Detect>

		if(((inputConfig & 0x02) == INPUT_DATALOGGER_PIN_1)
 8005ca6:	4b11      	ldr	r3, [pc, #68]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d015      	beq.n	8005cde <HAL_GPIO_EXTI_Callback+0x10e>
				&& ((((inputConfig & 0x08) == INPUT_DATALOGGER_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 8005cb2:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <HAL_GPIO_EXTI_Callback+0xf4>
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_GPIO_EXTI_Callback+0x106>
				|| (((inputConfig & 0x08) == INPUT_DATALOGGER_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8005cc4:	4b09      	ldr	r3, [pc, #36]	; (8005cec <HAL_GPIO_EXTI_Callback+0x11c>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d006      	beq.n	8005cde <HAL_GPIO_EXTI_Callback+0x10e>
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d103      	bne.n	8005cde <HAL_GPIO_EXTI_Callback+0x10e>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 8005cd6:	4906      	ldr	r1, [pc, #24]	; (8005cf0 <HAL_GPIO_EXTI_Callback+0x120>)
 8005cd8:	4806      	ldr	r0, [pc, #24]	; (8005cf4 <HAL_GPIO_EXTI_Callback+0x124>)
 8005cda:	f7ff fe93 	bl	8005a04 <Principal_Datalogger_Button>
	}
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40020400 	.word	0x40020400
 8005cec:	20006700 	.word	0x20006700
 8005cf0:	200056a8 	.word	0x200056a8
 8005cf4:	20004640 	.word	0x20004640

08005cf8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a35      	ldr	r2, [pc, #212]	; (8005ddc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d162      	bne.n	8005dd0 <HAL_TIM_PeriodElapsedCallback+0xd8>
	{
		accDatalogger[DL_ACC_TIMING]++;
 8005d0a:	4b35      	ldr	r3, [pc, #212]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	4a33      	ldr	r2, [pc, #204]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005d12:	6093      	str	r3, [r2, #8]
		accDatalogger[DL_ACC_TIMEOUT]++;
 8005d14:	4b32      	ldr	r3, [pc, #200]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	4a31      	ldr	r2, [pc, #196]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005d1c:	6053      	str	r3, [r2, #4]
		if(accDatalogger[DL_ACC_COOLDOWN] > 0) accDatalogger[DL_ACC_COOLDOWN]--;
 8005d1e:	4b30      	ldr	r3, [pc, #192]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <HAL_TIM_PeriodElapsedCallback+0x38>
 8005d26:	4b2e      	ldr	r3, [pc, #184]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	4a2c      	ldr	r2, [pc, #176]	; (8005de0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005d2e:	6013      	str	r3, [r2, #0]

		accCAN[ANALOG_1_4]++;
 8005d30:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	4a2b      	ldr	r2, [pc, #172]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d38:	6013      	str	r3, [r2, #0]
		accCAN[ANALOG_5_8]++;
 8005d3a:	4b2a      	ldr	r3, [pc, #168]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d42:	6053      	str	r3, [r2, #4]
		accCAN[ANALOG_9_12]++;
 8005d44:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	4a26      	ldr	r2, [pc, #152]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d4c:	6093      	str	r3, [r2, #8]
		accCAN[RTC_MSG]++;
 8005d4e:	4b25      	ldr	r3, [pc, #148]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	3301      	adds	r3, #1
 8005d54:	4a23      	ldr	r2, [pc, #140]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d56:	60d3      	str	r3, [r2, #12]
		accCAN[VERIFY_MSG]++;
 8005d58:	4b22      	ldr	r3, [pc, #136]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d60:	6113      	str	r3, [r2, #16]
		accCAN[BEACON_MSG]++;
 8005d62:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	3301      	adds	r3, #1
 8005d68:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8005d6a:	6153      	str	r3, [r2, #20]

		accMsg[ANALOG_1_4]++;
 8005d6c:	4b1e      	ldr	r3, [pc, #120]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3301      	adds	r3, #1
 8005d72:	4a1d      	ldr	r2, [pc, #116]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005d74:	6013      	str	r3, [r2, #0]
		accMsg[ANALOG_5_8]++;
 8005d76:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	4a1a      	ldr	r2, [pc, #104]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005d7e:	6053      	str	r3, [r2, #4]
		accMsg[ANALOG_9_12]++;
 8005d80:	4b19      	ldr	r3, [pc, #100]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	3301      	adds	r3, #1
 8005d86:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005d88:	6093      	str	r3, [r2, #8]
		accMsg[RTC_MSG]++;
 8005d8a:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005d92:	60d3      	str	r3, [r2, #12]
		accMsg[VERIFY_MSG]++;
 8005d94:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005d9c:	6113      	str	r3, [r2, #16]
		accMsg[BEACON_MSG]++;
 8005d9e:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	3301      	adds	r3, #1
 8005da4:	4a10      	ldr	r2, [pc, #64]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005da6:	6153      	str	r3, [r2, #20]
		accMsg[ECU_SAVE]++;
 8005da8:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	3301      	adds	r3, #1
 8005dae:	4a0e      	ldr	r2, [pc, #56]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005db0:	6193      	str	r3, [r2, #24]
		accMsg[PDM_SAVE]++;
 8005db2:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	3301      	adds	r3, #1
 8005db8:	4a0b      	ldr	r2, [pc, #44]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005dba:	61d3      	str	r3, [r2, #28]
		accMsg[VERIFY_LEDS]++;
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8005dc4:	6213      	str	r3, [r2, #32]

		accLap++;
 8005dc6:	4b09      	ldr	r3, [pc, #36]	; (8005dec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	4a07      	ldr	r2, [pc, #28]	; (8005dec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8005dce:	6013      	str	r3, [r2, #0]
	}
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	40001400 	.word	0x40001400
 8005de0:	2000673c 	.word	0x2000673c
 8005de4:	20006748 	.word	0x20006748
 8005de8:	20006760 	.word	0x20006760
 8005dec:	20006784 	.word	0x20006784

08005df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005df6:	2300      	movs	r3, #0
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <HAL_MspInit+0x4c>)
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	4a0f      	ldr	r2, [pc, #60]	; (8005e3c <HAL_MspInit+0x4c>)
 8005e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e04:	6453      	str	r3, [r2, #68]	; 0x44
 8005e06:	4b0d      	ldr	r3, [pc, #52]	; (8005e3c <HAL_MspInit+0x4c>)
 8005e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e12:	2300      	movs	r3, #0
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <HAL_MspInit+0x4c>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	4a08      	ldr	r2, [pc, #32]	; (8005e3c <HAL_MspInit+0x4c>)
 8005e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e20:	6413      	str	r3, [r2, #64]	; 0x40
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <HAL_MspInit+0x4c>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40023800 	.word	0x40023800

08005e40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08e      	sub	sp, #56	; 0x38
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	60da      	str	r2, [r3, #12]
 8005e56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a79      	ldr	r2, [pc, #484]	; (8006044 <HAL_ADC_MspInit+0x204>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	f040 808d 	bne.w	8005f7e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e64:	2300      	movs	r3, #0
 8005e66:	623b      	str	r3, [r7, #32]
 8005e68:	4b77      	ldr	r3, [pc, #476]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6c:	4a76      	ldr	r2, [pc, #472]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e72:	6453      	str	r3, [r2, #68]	; 0x44
 8005e74:	4b74      	ldr	r3, [pc, #464]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	623b      	str	r3, [r7, #32]
 8005e7e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e80:	2300      	movs	r3, #0
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	4b70      	ldr	r3, [pc, #448]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	4a6f      	ldr	r2, [pc, #444]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e90:	4b6d      	ldr	r3, [pc, #436]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	4b69      	ldr	r3, [pc, #420]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	4a68      	ldr	r2, [pc, #416]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005ea6:	f043 0304 	orr.w	r3, r3, #4
 8005eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8005eac:	4b66      	ldr	r3, [pc, #408]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	4b62      	ldr	r3, [pc, #392]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	4a61      	ldr	r2, [pc, #388]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005ec2:	f043 0302 	orr.w	r3, r3, #2
 8005ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec8:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ed4:	23c0      	movs	r3, #192	; 0xc0
 8005ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4859      	ldr	r0, [pc, #356]	; (800604c <HAL_ADC_MspInit+0x20c>)
 8005ee8:	f002 fbba 	bl	8008660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005eec:	2330      	movs	r3, #48	; 0x30
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005efc:	4619      	mov	r1, r3
 8005efe:	4854      	ldr	r0, [pc, #336]	; (8006050 <HAL_ADC_MspInit+0x210>)
 8005f00:	f002 fbae 	bl	8008660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f04:	2303      	movs	r3, #3
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f14:	4619      	mov	r1, r3
 8005f16:	484f      	ldr	r0, [pc, #316]	; (8006054 <HAL_ADC_MspInit+0x214>)
 8005f18:	f002 fba2 	bl	8008660 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005f1c:	4b4e      	ldr	r3, [pc, #312]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f1e:	4a4f      	ldr	r2, [pc, #316]	; (800605c <HAL_ADC_MspInit+0x21c>)
 8005f20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005f22:	4b4d      	ldr	r3, [pc, #308]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f28:	4b4b      	ldr	r3, [pc, #300]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f2e:	4b4a      	ldr	r3, [pc, #296]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005f34:	4b48      	ldr	r3, [pc, #288]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f3c:	4b46      	ldr	r3, [pc, #280]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f44:	4b44      	ldr	r3, [pc, #272]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f4a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005f4c:	4b42      	ldr	r3, [pc, #264]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f52:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005f54:	4b40      	ldr	r3, [pc, #256]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f5a:	4b3f      	ldr	r3, [pc, #252]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005f60:	483d      	ldr	r0, [pc, #244]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f62:	f001 ffdf 	bl	8007f24 <HAL_DMA_Init>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8005f6c:	f7fb fe64 	bl	8001c38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a39      	ldr	r2, [pc, #228]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
 8005f76:	4a38      	ldr	r2, [pc, #224]	; (8006058 <HAL_ADC_MspInit+0x218>)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005f7c:	e05d      	b.n	800603a <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a37      	ldr	r2, [pc, #220]	; (8006060 <HAL_ADC_MspInit+0x220>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d158      	bne.n	800603a <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005f88:	2300      	movs	r3, #0
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	4b2e      	ldr	r3, [pc, #184]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f90:	4a2d      	ldr	r2, [pc, #180]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f96:	6453      	str	r3, [r2, #68]	; 0x44
 8005f98:	4b2b      	ldr	r3, [pc, #172]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	4b27      	ldr	r3, [pc, #156]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	4a26      	ldr	r2, [pc, #152]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb4:	4b24      	ldr	r3, [pc, #144]	; (8006048 <HAL_ADC_MspInit+0x208>)
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005fc0:	233f      	movs	r3, #63	; 0x3f
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	481e      	ldr	r0, [pc, #120]	; (800604c <HAL_ADC_MspInit+0x20c>)
 8005fd4:	f002 fb44 	bl	8008660 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005fd8:	4b22      	ldr	r3, [pc, #136]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8005fda:	4a23      	ldr	r2, [pc, #140]	; (8006068 <HAL_ADC_MspInit+0x228>)
 8005fdc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005fde:	4b21      	ldr	r3, [pc, #132]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8005fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fe4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fe6:	4b1f      	ldr	r3, [pc, #124]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fec:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005ff2:	4b1c      	ldr	r3, [pc, #112]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8005ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ff8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ffa:	4b1a      	ldr	r3, [pc, #104]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8005ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006000:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006002:	4b18      	ldr	r3, [pc, #96]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8006004:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006008:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800600a:	4b16      	ldr	r3, [pc, #88]	; (8006064 <HAL_ADC_MspInit+0x224>)
 800600c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006010:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006012:	4b14      	ldr	r3, [pc, #80]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8006014:	2200      	movs	r2, #0
 8006016:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006018:	4b12      	ldr	r3, [pc, #72]	; (8006064 <HAL_ADC_MspInit+0x224>)
 800601a:	2200      	movs	r2, #0
 800601c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800601e:	4811      	ldr	r0, [pc, #68]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8006020:	f001 ff80 	bl	8007f24 <HAL_DMA_Init>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 800602a:	f7fb fe05 	bl	8001c38 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a0c      	ldr	r2, [pc, #48]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8006032:	639a      	str	r2, [r3, #56]	; 0x38
 8006034:	4a0b      	ldr	r2, [pc, #44]	; (8006064 <HAL_ADC_MspInit+0x224>)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6393      	str	r3, [r2, #56]	; 0x38
}
 800603a:	bf00      	nop
 800603c:	3738      	adds	r7, #56	; 0x38
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40012000 	.word	0x40012000
 8006048:	40023800 	.word	0x40023800
 800604c:	40020000 	.word	0x40020000
 8006050:	40020800 	.word	0x40020800
 8006054:	40020400 	.word	0x40020400
 8006058:	20000244 	.word	0x20000244
 800605c:	40026410 	.word	0x40026410
 8006060:	40012100 	.word	0x40012100
 8006064:	200002a4 	.word	0x200002a4
 8006068:	40026440 	.word	0x40026440

0800606c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006074:	f107 0314 	add.w	r3, r7, #20
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	609a      	str	r2, [r3, #8]
 8006080:	60da      	str	r2, [r3, #12]
 8006082:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1d      	ldr	r2, [pc, #116]	; (8006100 <HAL_CAN_MspInit+0x94>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d134      	bne.n	80060f8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800608e:	2300      	movs	r3, #0
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	4b1c      	ldr	r3, [pc, #112]	; (8006104 <HAL_CAN_MspInit+0x98>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	4a1b      	ldr	r2, [pc, #108]	; (8006104 <HAL_CAN_MspInit+0x98>)
 8006098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800609c:	6413      	str	r3, [r2, #64]	; 0x40
 800609e:	4b19      	ldr	r3, [pc, #100]	; (8006104 <HAL_CAN_MspInit+0x98>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	4b15      	ldr	r3, [pc, #84]	; (8006104 <HAL_CAN_MspInit+0x98>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	4a14      	ldr	r2, [pc, #80]	; (8006104 <HAL_CAN_MspInit+0x98>)
 80060b4:	f043 0302 	orr.w	r3, r3, #2
 80060b8:	6313      	str	r3, [r2, #48]	; 0x30
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_CAN_MspInit+0x98>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80060c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80060ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060cc:	2302      	movs	r3, #2
 80060ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060d4:	2303      	movs	r3, #3
 80060d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80060d8:	2309      	movs	r3, #9
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4619      	mov	r1, r3
 80060e2:	4809      	ldr	r0, [pc, #36]	; (8006108 <HAL_CAN_MspInit+0x9c>)
 80060e4:	f002 fabc 	bl	8008660 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80060e8:	2200      	movs	r2, #0
 80060ea:	2101      	movs	r1, #1
 80060ec:	2014      	movs	r0, #20
 80060ee:	f001 fee2 	bl	8007eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80060f2:	2014      	movs	r0, #20
 80060f4:	f001 fefb 	bl	8007eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80060f8:	bf00      	nop
 80060fa:	3728      	adds	r7, #40	; 0x28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40006400 	.word	0x40006400
 8006104:	40023800 	.word	0x40023800
 8006108:	40020400 	.word	0x40020400

0800610c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08a      	sub	sp, #40	; 0x28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006114:	f107 0314 	add.w	r3, r7, #20
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	609a      	str	r2, [r3, #8]
 8006120:	60da      	str	r2, [r3, #12]
 8006122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a19      	ldr	r2, [pc, #100]	; (8006190 <HAL_I2C_MspInit+0x84>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d12b      	bne.n	8006186 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800612e:	2300      	movs	r3, #0
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	4b18      	ldr	r3, [pc, #96]	; (8006194 <HAL_I2C_MspInit+0x88>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	4a17      	ldr	r2, [pc, #92]	; (8006194 <HAL_I2C_MspInit+0x88>)
 8006138:	f043 0302 	orr.w	r3, r3, #2
 800613c:	6313      	str	r3, [r2, #48]	; 0x30
 800613e:	4b15      	ldr	r3, [pc, #84]	; (8006194 <HAL_I2C_MspInit+0x88>)
 8006140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800614a:	23c0      	movs	r3, #192	; 0xc0
 800614c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800614e:	2312      	movs	r3, #18
 8006150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006152:	2300      	movs	r3, #0
 8006154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006156:	2303      	movs	r3, #3
 8006158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800615a:	2304      	movs	r3, #4
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800615e:	f107 0314 	add.w	r3, r7, #20
 8006162:	4619      	mov	r1, r3
 8006164:	480c      	ldr	r0, [pc, #48]	; (8006198 <HAL_I2C_MspInit+0x8c>)
 8006166:	f002 fa7b 	bl	8008660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <HAL_I2C_MspInit+0x88>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	4a08      	ldr	r2, [pc, #32]	; (8006194 <HAL_I2C_MspInit+0x88>)
 8006174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006178:	6413      	str	r3, [r2, #64]	; 0x40
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <HAL_I2C_MspInit+0x88>)
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006186:	bf00      	nop
 8006188:	3728      	adds	r7, #40	; 0x28
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	40005400 	.word	0x40005400
 8006194:	40023800 	.word	0x40023800
 8006198:	40020400 	.word	0x40020400

0800619c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b09a      	sub	sp, #104	; 0x68
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80061a4:	f107 030c 	add.w	r3, r7, #12
 80061a8:	225c      	movs	r2, #92	; 0x5c
 80061aa:	2100      	movs	r1, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	f011 fd45 	bl	8017c3c <memset>
  if(hrtc->Instance==RTC)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a0c      	ldr	r2, [pc, #48]	; (80061e8 <HAL_RTC_MspInit+0x4c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d111      	bne.n	80061e0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80061bc:	2320      	movs	r3, #32
 80061be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80061c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061c6:	f107 030c 	add.w	r3, r7, #12
 80061ca:	4618      	mov	r0, r3
 80061cc:	f004 fcd8 	bl	800ab80 <HAL_RCCEx_PeriphCLKConfig>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80061d6:	f7fb fd2f 	bl	8001c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80061da:	4b04      	ldr	r3, [pc, #16]	; (80061ec <HAL_RTC_MspInit+0x50>)
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80061e0:	bf00      	nop
 80061e2:	3768      	adds	r7, #104	; 0x68
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40002800 	.word	0x40002800
 80061ec:	42470e3c 	.word	0x42470e3c

080061f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08a      	sub	sp, #40	; 0x28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f8:	f107 0314 	add.w	r3, r7, #20
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	605a      	str	r2, [r3, #4]
 8006202:	609a      	str	r2, [r3, #8]
 8006204:	60da      	str	r2, [r3, #12]
 8006206:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a69      	ldr	r2, [pc, #420]	; (80063b4 <HAL_SD_MspInit+0x1c4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	f040 80cb 	bne.w	80063aa <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006214:	2300      	movs	r3, #0
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	4b67      	ldr	r3, [pc, #412]	; (80063b8 <HAL_SD_MspInit+0x1c8>)
 800621a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621c:	4a66      	ldr	r2, [pc, #408]	; (80063b8 <HAL_SD_MspInit+0x1c8>)
 800621e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006222:	6453      	str	r3, [r2, #68]	; 0x44
 8006224:	4b64      	ldr	r3, [pc, #400]	; (80063b8 <HAL_SD_MspInit+0x1c8>)
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	4b60      	ldr	r3, [pc, #384]	; (80063b8 <HAL_SD_MspInit+0x1c8>)
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	4a5f      	ldr	r2, [pc, #380]	; (80063b8 <HAL_SD_MspInit+0x1c8>)
 800623a:	f043 0304 	orr.w	r3, r3, #4
 800623e:	6313      	str	r3, [r2, #48]	; 0x30
 8006240:	4b5d      	ldr	r3, [pc, #372]	; (80063b8 <HAL_SD_MspInit+0x1c8>)
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800624c:	2300      	movs	r3, #0
 800624e:	60bb      	str	r3, [r7, #8]
 8006250:	4b59      	ldr	r3, [pc, #356]	; (80063b8 <HAL_SD_MspInit+0x1c8>)
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	4a58      	ldr	r2, [pc, #352]	; (80063b8 <HAL_SD_MspInit+0x1c8>)
 8006256:	f043 0308 	orr.w	r3, r3, #8
 800625a:	6313      	str	r3, [r2, #48]	; 0x30
 800625c:	4b56      	ldr	r3, [pc, #344]	; (80063b8 <HAL_SD_MspInit+0x1c8>)
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	f003 0308 	and.w	r3, r3, #8
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006268:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800626c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800626e:	2302      	movs	r3, #2
 8006270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006276:	2303      	movs	r3, #3
 8006278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800627a:	230c      	movs	r3, #12
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800627e:	f107 0314 	add.w	r3, r7, #20
 8006282:	4619      	mov	r1, r3
 8006284:	484d      	ldr	r0, [pc, #308]	; (80063bc <HAL_SD_MspInit+0x1cc>)
 8006286:	f002 f9eb 	bl	8008660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800628a:	2304      	movs	r3, #4
 800628c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800628e:	2302      	movs	r3, #2
 8006290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006292:	2300      	movs	r3, #0
 8006294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006296:	2303      	movs	r3, #3
 8006298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800629a:	230c      	movs	r3, #12
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800629e:	f107 0314 	add.w	r3, r7, #20
 80062a2:	4619      	mov	r1, r3
 80062a4:	4846      	ldr	r0, [pc, #280]	; (80063c0 <HAL_SD_MspInit+0x1d0>)
 80062a6:	f002 f9db 	bl	8008660 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80062aa:	4b46      	ldr	r3, [pc, #280]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062ac:	4a46      	ldr	r2, [pc, #280]	; (80063c8 <HAL_SD_MspInit+0x1d8>)
 80062ae:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80062b0:	4b44      	ldr	r3, [pc, #272]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062b6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062b8:	4b42      	ldr	r3, [pc, #264]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062be:	4b41      	ldr	r3, [pc, #260]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062c4:	4b3f      	ldr	r3, [pc, #252]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062ca:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80062cc:	4b3d      	ldr	r3, [pc, #244]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062d2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80062d4:	4b3b      	ldr	r3, [pc, #236]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062da:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80062dc:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062de:	2220      	movs	r2, #32
 80062e0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80062e2:	4b38      	ldr	r3, [pc, #224]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80062e8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80062ea:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062ec:	2204      	movs	r2, #4
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80062f0:	4b34      	ldr	r3, [pc, #208]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062f2:	2203      	movs	r2, #3
 80062f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80062f6:	4b33      	ldr	r3, [pc, #204]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 80062f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80062fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80062fe:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 8006300:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006304:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006306:	482f      	ldr	r0, [pc, #188]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 8006308:	f001 fe0c 	bl	8007f24 <HAL_DMA_Init>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006312:	f7fb fc91 	bl	8001c38 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a2a      	ldr	r2, [pc, #168]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 800631a:	641a      	str	r2, [r3, #64]	; 0x40
 800631c:	4a29      	ldr	r2, [pc, #164]	; (80063c4 <HAL_SD_MspInit+0x1d4>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006322:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006324:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <HAL_SD_MspInit+0x1e0>)
 8006326:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006328:	4b28      	ldr	r3, [pc, #160]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 800632a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800632e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006330:	4b26      	ldr	r3, [pc, #152]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006332:	2240      	movs	r2, #64	; 0x40
 8006334:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006336:	4b25      	ldr	r3, [pc, #148]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006338:	2200      	movs	r2, #0
 800633a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800633c:	4b23      	ldr	r3, [pc, #140]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 800633e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006342:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006344:	4b21      	ldr	r3, [pc, #132]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006346:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800634a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800634c:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 800634e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006352:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006354:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006356:	2220      	movs	r2, #32
 8006358:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800635a:	4b1c      	ldr	r3, [pc, #112]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 800635c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006360:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006362:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006364:	2204      	movs	r2, #4
 8006366:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006368:	4b18      	ldr	r3, [pc, #96]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 800636a:	2203      	movs	r2, #3
 800636c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800636e:	4b17      	ldr	r3, [pc, #92]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006370:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006374:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006376:	4b15      	ldr	r3, [pc, #84]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006378:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800637e:	4813      	ldr	r0, [pc, #76]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006380:	f001 fdd0 	bl	8007f24 <HAL_DMA_Init>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800638a:	f7fb fc55 	bl	8001c38 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a0e      	ldr	r2, [pc, #56]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006392:	63da      	str	r2, [r3, #60]	; 0x3c
 8006394:	4a0d      	ldr	r2, [pc, #52]	; (80063cc <HAL_SD_MspInit+0x1dc>)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800639a:	2200      	movs	r2, #0
 800639c:	2100      	movs	r1, #0
 800639e:	2031      	movs	r0, #49	; 0x31
 80063a0:	f001 fd89 	bl	8007eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80063a4:	2031      	movs	r0, #49	; 0x31
 80063a6:	f001 fda2 	bl	8007eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80063aa:	bf00      	nop
 80063ac:	3728      	adds	r7, #40	; 0x28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40023800 	.word	0x40023800
 80063bc:	40020800 	.word	0x40020800
 80063c0:	40020c00 	.word	0x40020c00
 80063c4:	20000424 	.word	0x20000424
 80063c8:	40026458 	.word	0x40026458
 80063cc:	20000484 	.word	0x20000484
 80063d0:	400264a0 	.word	0x400264a0

080063d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a0e      	ldr	r2, [pc, #56]	; (800641c <HAL_TIM_Base_MspInit+0x48>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d115      	bne.n	8006412 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <HAL_TIM_Base_MspInit+0x4c>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <HAL_TIM_Base_MspInit+0x4c>)
 80063f0:	f043 0320 	orr.w	r3, r3, #32
 80063f4:	6413      	str	r3, [r2, #64]	; 0x40
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <HAL_TIM_Base_MspInit+0x4c>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006402:	2200      	movs	r2, #0
 8006404:	2100      	movs	r1, #0
 8006406:	2037      	movs	r0, #55	; 0x37
 8006408:	f001 fd55 	bl	8007eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800640c:	2037      	movs	r0, #55	; 0x37
 800640e:	f001 fd6e 	bl	8007eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40001400 	.word	0x40001400
 8006420:	40023800 	.word	0x40023800

08006424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006428:	e7fe      	b.n	8006428 <NMI_Handler+0x4>

0800642a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800642a:	b480      	push	{r7}
 800642c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800642e:	e7fe      	b.n	800642e <HardFault_Handler+0x4>

08006430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006434:	e7fe      	b.n	8006434 <MemManage_Handler+0x4>

08006436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006436:	b480      	push	{r7}
 8006438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800643a:	e7fe      	b.n	800643a <BusFault_Handler+0x4>

0800643c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006440:	e7fe      	b.n	8006440 <UsageFault_Handler+0x4>

08006442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006442:	b480      	push	{r7}
 8006444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006446:	bf00      	nop
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800645e:	b480      	push	{r7}
 8006460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006462:	bf00      	nop
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006470:	f000 f922 	bl	80066b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006474:	bf00      	nop
 8006476:	bd80      	pop	{r7, pc}

08006478 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800647c:	4802      	ldr	r0, [pc, #8]	; (8006488 <CAN1_RX0_IRQHandler+0x10>)
 800647e:	f001 fa10 	bl	80078a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000304 	.word	0x20000304

0800648c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8006490:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006494:	f002 fac4 	bl	8008a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8006498:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800649c:	f002 fac0 	bl	8008a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80064a0:	bf00      	nop
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80064a8:	4802      	ldr	r0, [pc, #8]	; (80064b4 <SDIO_IRQHandler+0x10>)
 80064aa:	f006 fc67 	bl	800cd7c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80064ae:	bf00      	nop
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200003a0 	.word	0x200003a0

080064b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80064bc:	4802      	ldr	r0, [pc, #8]	; (80064c8 <TIM7_IRQHandler+0x10>)
 80064be:	f007 fdc7 	bl	800e050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80064c2:	bf00      	nop
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200004e4 	.word	0x200004e4

080064cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80064d0:	4802      	ldr	r0, [pc, #8]	; (80064dc <DMA2_Stream0_IRQHandler+0x10>)
 80064d2:	f001 fe4f 	bl	8008174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80064d6:	bf00      	nop
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000244 	.word	0x20000244

080064e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80064e4:	4802      	ldr	r0, [pc, #8]	; (80064f0 <DMA2_Stream2_IRQHandler+0x10>)
 80064e6:	f001 fe45 	bl	8008174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80064ea:	bf00      	nop
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	200002a4 	.word	0x200002a4

080064f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80064f8:	4802      	ldr	r0, [pc, #8]	; (8006504 <DMA2_Stream3_IRQHandler+0x10>)
 80064fa:	f001 fe3b 	bl	8008174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80064fe:	bf00      	nop
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000424 	.word	0x20000424

08006508 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800650c:	4802      	ldr	r0, [pc, #8]	; (8006518 <OTG_FS_IRQHandler+0x10>)
 800650e:	f003 f841 	bl	8009594 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006512:	bf00      	nop
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20006e98 	.word	0x20006e98

0800651c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006520:	4802      	ldr	r0, [pc, #8]	; (800652c <DMA2_Stream6_IRQHandler+0x10>)
 8006522:	f001 fe27 	bl	8008174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006526:	bf00      	nop
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000484 	.word	0x20000484

08006530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006538:	4a14      	ldr	r2, [pc, #80]	; (800658c <_sbrk+0x5c>)
 800653a:	4b15      	ldr	r3, [pc, #84]	; (8006590 <_sbrk+0x60>)
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006544:	4b13      	ldr	r3, [pc, #76]	; (8006594 <_sbrk+0x64>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800654c:	4b11      	ldr	r3, [pc, #68]	; (8006594 <_sbrk+0x64>)
 800654e:	4a12      	ldr	r2, [pc, #72]	; (8006598 <_sbrk+0x68>)
 8006550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006552:	4b10      	ldr	r3, [pc, #64]	; (8006594 <_sbrk+0x64>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4413      	add	r3, r2
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	429a      	cmp	r2, r3
 800655e:	d207      	bcs.n	8006570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006560:	f011 fb34 	bl	8017bcc <__errno>
 8006564:	4603      	mov	r3, r0
 8006566:	220c      	movs	r2, #12
 8006568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800656a:	f04f 33ff 	mov.w	r3, #4294967295
 800656e:	e009      	b.n	8006584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006570:	4b08      	ldr	r3, [pc, #32]	; (8006594 <_sbrk+0x64>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006576:	4b07      	ldr	r3, [pc, #28]	; (8006594 <_sbrk+0x64>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4413      	add	r3, r2
 800657e:	4a05      	ldr	r2, [pc, #20]	; (8006594 <_sbrk+0x64>)
 8006580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006582:	68fb      	ldr	r3, [r7, #12]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20020000 	.word	0x20020000
 8006590:	0000ffff 	.word	0x0000ffff
 8006594:	2000678c 	.word	0x2000678c
 8006598:	20007630 	.word	0x20007630

0800659c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065a0:	4b06      	ldr	r3, [pc, #24]	; (80065bc <SystemInit+0x20>)
 80065a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a6:	4a05      	ldr	r2, [pc, #20]	; (80065bc <SystemInit+0x20>)
 80065a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065b0:	bf00      	nop
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	e000ed00 	.word	0xe000ed00

080065c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80065c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80065c4:	480d      	ldr	r0, [pc, #52]	; (80065fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80065c6:	490e      	ldr	r1, [pc, #56]	; (8006600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80065c8:	4a0e      	ldr	r2, [pc, #56]	; (8006604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80065ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80065cc:	e002      	b.n	80065d4 <LoopCopyDataInit>

080065ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80065ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80065d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80065d2:	3304      	adds	r3, #4

080065d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80065d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80065d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80065d8:	d3f9      	bcc.n	80065ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80065da:	4a0b      	ldr	r2, [pc, #44]	; (8006608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80065dc:	4c0b      	ldr	r4, [pc, #44]	; (800660c <LoopFillZerobss+0x26>)
  movs r3, #0
 80065de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80065e0:	e001      	b.n	80065e6 <LoopFillZerobss>

080065e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80065e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80065e4:	3204      	adds	r2, #4

080065e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80065e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80065e8:	d3fb      	bcc.n	80065e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80065ea:	f7ff ffd7 	bl	800659c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065ee:	f011 faf3 	bl	8017bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065f2:	f7fa fea1 	bl	8001338 <main>
  bx  lr    
 80065f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80065f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80065fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006600:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8006604:	08018ab0 	.word	0x08018ab0
  ldr r2, =_sbss
 8006608:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 800660c:	2000762c 	.word	0x2000762c

08006610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006610:	e7fe      	b.n	8006610 <ADC_IRQHandler>
	...

08006614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006618:	4b0e      	ldr	r3, [pc, #56]	; (8006654 <HAL_Init+0x40>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a0d      	ldr	r2, [pc, #52]	; (8006654 <HAL_Init+0x40>)
 800661e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_Init+0x40>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a0a      	ldr	r2, [pc, #40]	; (8006654 <HAL_Init+0x40>)
 800662a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800662e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006630:	4b08      	ldr	r3, [pc, #32]	; (8006654 <HAL_Init+0x40>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a07      	ldr	r2, [pc, #28]	; (8006654 <HAL_Init+0x40>)
 8006636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800663a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800663c:	2003      	movs	r0, #3
 800663e:	f001 fc2f 	bl	8007ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006642:	200f      	movs	r0, #15
 8006644:	f000 f808 	bl	8006658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006648:	f7ff fbd2 	bl	8005df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40023c00 	.word	0x40023c00

08006658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006660:	4b12      	ldr	r3, [pc, #72]	; (80066ac <HAL_InitTick+0x54>)
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <HAL_InitTick+0x58>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	4619      	mov	r1, r3
 800666a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800666e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006672:	fbb2 f3f3 	udiv	r3, r2, r3
 8006676:	4618      	mov	r0, r3
 8006678:	f001 fc47 	bl	8007f0a <HAL_SYSTICK_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e00e      	b.n	80066a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b0f      	cmp	r3, #15
 800668a:	d80a      	bhi.n	80066a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800668c:	2200      	movs	r2, #0
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	f04f 30ff 	mov.w	r0, #4294967295
 8006694:	f001 fc0f 	bl	8007eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006698:	4a06      	ldr	r2, [pc, #24]	; (80066b4 <HAL_InitTick+0x5c>)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	e000      	b.n	80066a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000000 	.word	0x20000000
 80066b0:	20000008 	.word	0x20000008
 80066b4:	20000004 	.word	0x20000004

080066b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066b8:	b480      	push	{r7}
 80066ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <HAL_IncTick+0x20>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	4b06      	ldr	r3, [pc, #24]	; (80066dc <HAL_IncTick+0x24>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4413      	add	r3, r2
 80066c8:	4a04      	ldr	r2, [pc, #16]	; (80066dc <HAL_IncTick+0x24>)
 80066ca:	6013      	str	r3, [r2, #0]
}
 80066cc:	bf00      	nop
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000008 	.word	0x20000008
 80066dc:	20006790 	.word	0x20006790

080066e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  return uwTick;
 80066e4:	4b03      	ldr	r3, [pc, #12]	; (80066f4 <HAL_GetTick+0x14>)
 80066e6:	681b      	ldr	r3, [r3, #0]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20006790 	.word	0x20006790

080066f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006700:	f7ff ffee 	bl	80066e0 <HAL_GetTick>
 8006704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006710:	d005      	beq.n	800671e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006712:	4b0a      	ldr	r3, [pc, #40]	; (800673c <HAL_Delay+0x44>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800671e:	bf00      	nop
 8006720:	f7ff ffde 	bl	80066e0 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	429a      	cmp	r2, r3
 800672e:	d8f7      	bhi.n	8006720 <HAL_Delay+0x28>
  {
  }
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000008 	.word	0x20000008

08006740 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e033      	b.n	80067be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff fb6e 	bl	8005e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b00      	cmp	r3, #0
 800677c:	d118      	bne.n	80067b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006786:	f023 0302 	bic.w	r3, r3, #2
 800678a:	f043 0202 	orr.w	r2, r3, #2
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa78 	bl	8006c88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	f043 0201 	orr.w	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40
 80067ae:	e001      	b.n	80067b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_ADC_Start_DMA+0x1e>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e0e9      	b.n	80069ba <HAL_ADC_Start_DMA+0x1f2>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d018      	beq.n	800682e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800680c:	4b6d      	ldr	r3, [pc, #436]	; (80069c4 <HAL_ADC_Start_DMA+0x1fc>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a6d      	ldr	r2, [pc, #436]	; (80069c8 <HAL_ADC_Start_DMA+0x200>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	0c9a      	lsrs	r2, r3, #18
 8006818:	4613      	mov	r3, r2
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	4413      	add	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006820:	e002      	b.n	8006828 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	3b01      	subs	r3, #1
 8006826:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f9      	bne.n	8006822 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683c:	d107      	bne.n	800684e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800684c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	f040 80a1 	bne.w	80069a0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006888:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689c:	d106      	bne.n	80068ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a2:	f023 0206 	bic.w	r2, r3, #6
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	645a      	str	r2, [r3, #68]	; 0x44
 80068aa:	e002      	b.n	80068b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068ba:	4b44      	ldr	r3, [pc, #272]	; (80069cc <HAL_ADC_Start_DMA+0x204>)
 80068bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	4a43      	ldr	r2, [pc, #268]	; (80069d0 <HAL_ADC_Start_DMA+0x208>)
 80068c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	4a42      	ldr	r2, [pc, #264]	; (80069d4 <HAL_ADC_Start_DMA+0x20c>)
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	4a41      	ldr	r2, [pc, #260]	; (80069d8 <HAL_ADC_Start_DMA+0x210>)
 80068d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80068de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80068ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	334c      	adds	r3, #76	; 0x4c
 800690a:	4619      	mov	r1, r3
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f001 fbb6 	bl	8008080 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	2b00      	cmp	r3, #0
 800691e:	d12a      	bne.n	8006976 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a2d      	ldr	r2, [pc, #180]	; (80069dc <HAL_ADC_Start_DMA+0x214>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d015      	beq.n	8006956 <HAL_ADC_Start_DMA+0x18e>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a2c      	ldr	r2, [pc, #176]	; (80069e0 <HAL_ADC_Start_DMA+0x218>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d105      	bne.n	8006940 <HAL_ADC_Start_DMA+0x178>
 8006934:	4b25      	ldr	r3, [pc, #148]	; (80069cc <HAL_ADC_Start_DMA+0x204>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a27      	ldr	r2, [pc, #156]	; (80069e4 <HAL_ADC_Start_DMA+0x21c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d136      	bne.n	80069b8 <HAL_ADC_Start_DMA+0x1f0>
 800694a:	4b20      	ldr	r3, [pc, #128]	; (80069cc <HAL_ADC_Start_DMA+0x204>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	d130      	bne.n	80069b8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d129      	bne.n	80069b8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006972:	609a      	str	r2, [r3, #8]
 8006974:	e020      	b.n	80069b8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a18      	ldr	r2, [pc, #96]	; (80069dc <HAL_ADC_Start_DMA+0x214>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d11b      	bne.n	80069b8 <HAL_ADC_Start_DMA+0x1f0>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d114      	bne.n	80069b8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800699c:	609a      	str	r2, [r3, #8]
 800699e:	e00b      	b.n	80069b8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	f043 0210 	orr.w	r2, r3, #16
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	f043 0201 	orr.w	r2, r3, #1
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000000 	.word	0x20000000
 80069c8:	431bde83 	.word	0x431bde83
 80069cc:	40012300 	.word	0x40012300
 80069d0:	08006e81 	.word	0x08006e81
 80069d4:	08006f3b 	.word	0x08006f3b
 80069d8:	08006f57 	.word	0x08006f57
 80069dc:	40012000 	.word	0x40012000
 80069e0:	40012100 	.word	0x40012100
 80069e4:	40012200 	.word	0x40012200

080069e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_ADC_ConfigChannel+0x1c>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e113      	b.n	8006c68 <HAL_ADC_ConfigChannel+0x244>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b09      	cmp	r3, #9
 8006a4e:	d925      	bls.n	8006a9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68d9      	ldr	r1, [r3, #12]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4613      	mov	r3, r2
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	4413      	add	r3, r2
 8006a64:	3b1e      	subs	r3, #30
 8006a66:	2207      	movs	r2, #7
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	43da      	mvns	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	400a      	ands	r2, r1
 8006a74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68d9      	ldr	r1, [r3, #12]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	4618      	mov	r0, r3
 8006a88:	4603      	mov	r3, r0
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	4403      	add	r3, r0
 8006a8e:	3b1e      	subs	r3, #30
 8006a90:	409a      	lsls	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	60da      	str	r2, [r3, #12]
 8006a9a:	e022      	b.n	8006ae2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6919      	ldr	r1, [r3, #16]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4613      	mov	r3, r2
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	4413      	add	r3, r2
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	43da      	mvns	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	400a      	ands	r2, r1
 8006abe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6919      	ldr	r1, [r3, #16]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4403      	add	r3, r0
 8006ad8:	409a      	lsls	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b06      	cmp	r3, #6
 8006ae8:	d824      	bhi.n	8006b34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	3b05      	subs	r3, #5
 8006afc:	221f      	movs	r2, #31
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	43da      	mvns	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	400a      	ands	r2, r1
 8006b0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4618      	mov	r0, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	3b05      	subs	r3, #5
 8006b26:	fa00 f203 	lsl.w	r2, r0, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	635a      	str	r2, [r3, #52]	; 0x34
 8006b32:	e04c      	b.n	8006bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b0c      	cmp	r3, #12
 8006b3a:	d824      	bhi.n	8006b86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	3b23      	subs	r3, #35	; 0x23
 8006b4e:	221f      	movs	r2, #31
 8006b50:	fa02 f303 	lsl.w	r3, r2, r3
 8006b54:	43da      	mvns	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	400a      	ands	r2, r1
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	3b23      	subs	r3, #35	; 0x23
 8006b78:	fa00 f203 	lsl.w	r2, r0, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
 8006b84:	e023      	b.n	8006bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	3b41      	subs	r3, #65	; 0x41
 8006b98:	221f      	movs	r2, #31
 8006b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9e:	43da      	mvns	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	400a      	ands	r2, r1
 8006ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	3b41      	subs	r3, #65	; 0x41
 8006bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006bce:	4b29      	ldr	r3, [pc, #164]	; (8006c74 <HAL_ADC_ConfigChannel+0x250>)
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a28      	ldr	r2, [pc, #160]	; (8006c78 <HAL_ADC_ConfigChannel+0x254>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d10f      	bne.n	8006bfc <HAL_ADC_ConfigChannel+0x1d8>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b12      	cmp	r3, #18
 8006be2:	d10b      	bne.n	8006bfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1d      	ldr	r2, [pc, #116]	; (8006c78 <HAL_ADC_ConfigChannel+0x254>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d12b      	bne.n	8006c5e <HAL_ADC_ConfigChannel+0x23a>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1c      	ldr	r2, [pc, #112]	; (8006c7c <HAL_ADC_ConfigChannel+0x258>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <HAL_ADC_ConfigChannel+0x1f4>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b11      	cmp	r3, #17
 8006c16:	d122      	bne.n	8006c5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <HAL_ADC_ConfigChannel+0x258>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d111      	bne.n	8006c5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c3a:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <HAL_ADC_ConfigChannel+0x25c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a11      	ldr	r2, [pc, #68]	; (8006c84 <HAL_ADC_ConfigChannel+0x260>)
 8006c40:	fba2 2303 	umull	r2, r3, r2, r3
 8006c44:	0c9a      	lsrs	r2, r3, #18
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c50:	e002      	b.n	8006c58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1f9      	bne.n	8006c52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	40012300 	.word	0x40012300
 8006c78:	40012000 	.word	0x40012000
 8006c7c:	10000012 	.word	0x10000012
 8006c80:	20000000 	.word	0x20000000
 8006c84:	431bde83 	.word	0x431bde83

08006c88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c90:	4b79      	ldr	r3, [pc, #484]	; (8006e78 <ADC_Init+0x1f0>)
 8006c92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	021a      	lsls	r2, r3, #8
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6859      	ldr	r1, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6899      	ldr	r1, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	4a58      	ldr	r2, [pc, #352]	; (8006e7c <ADC_Init+0x1f4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d022      	beq.n	8006d66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6899      	ldr	r1, [r3, #8]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6899      	ldr	r1, [r3, #8]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	609a      	str	r2, [r3, #8]
 8006d64:	e00f      	b.n	8006d86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0202 	bic.w	r2, r2, #2
 8006d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6899      	ldr	r1, [r3, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	7e1b      	ldrb	r3, [r3, #24]
 8006da0:	005a      	lsls	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01b      	beq.n	8006dec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006dd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6859      	ldr	r1, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	3b01      	subs	r3, #1
 8006de0:	035a      	lsls	r2, r3, #13
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
 8006dea:	e007      	b.n	8006dfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	051a      	lsls	r2, r3, #20
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6899      	ldr	r1, [r3, #8]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e3e:	025a      	lsls	r2, r3, #9
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6899      	ldr	r1, [r3, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	029a      	lsls	r2, r3, #10
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	609a      	str	r2, [r3, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	40012300 	.word	0x40012300
 8006e7c:	0f000001 	.word	0x0f000001

08006e80 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d13c      	bne.n	8006f14 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d12b      	bne.n	8006f0c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d127      	bne.n	8006f0c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d006      	beq.n	8006ed8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d119      	bne.n	8006f0c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0220 	bic.w	r2, r2, #32
 8006ee6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d105      	bne.n	8006f0c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	f043 0201 	orr.w	r2, r3, #1
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff fd6b 	bl	80069e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006f12:	e00e      	b.n	8006f32 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff fd75 	bl	8006a10 <HAL_ADC_ErrorCallback>
}
 8006f26:	e004      	b.n	8006f32 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3
}
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff fd57 	bl	80069fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2240      	movs	r2, #64	; 0x40
 8006f68:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	f043 0204 	orr.w	r2, r3, #4
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f7ff fd4a 	bl	8006a10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f7c:	bf00      	nop
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e0ed      	b.n	8007172 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff f862 	bl	800606c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fb8:	f7ff fb92 	bl	80066e0 <HAL_GetTick>
 8006fbc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006fbe:	e012      	b.n	8006fe6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006fc0:	f7ff fb8e 	bl	80066e0 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b0a      	cmp	r3, #10
 8006fcc:	d90b      	bls.n	8006fe6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2205      	movs	r2, #5
 8006fde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e0c5      	b.n	8007172 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d0e5      	beq.n	8006fc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0202 	bic.w	r2, r2, #2
 8007002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007004:	f7ff fb6c 	bl	80066e0 <HAL_GetTick>
 8007008:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800700a:	e012      	b.n	8007032 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800700c:	f7ff fb68 	bl	80066e0 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b0a      	cmp	r3, #10
 8007018:	d90b      	bls.n	8007032 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2205      	movs	r2, #5
 800702a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e09f      	b.n	8007172 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e5      	bne.n	800700c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	7e1b      	ldrb	r3, [r3, #24]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d108      	bne.n	800705a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	e007      	b.n	800706a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007068:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	7e5b      	ldrb	r3, [r3, #25]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d108      	bne.n	8007084 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	e007      	b.n	8007094 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007092:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	7e9b      	ldrb	r3, [r3, #26]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d108      	bne.n	80070ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0220 	orr.w	r2, r2, #32
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e007      	b.n	80070be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0220 	bic.w	r2, r2, #32
 80070bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	7edb      	ldrb	r3, [r3, #27]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d108      	bne.n	80070d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0210 	bic.w	r2, r2, #16
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e007      	b.n	80070e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0210 	orr.w	r2, r2, #16
 80070e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	7f1b      	ldrb	r3, [r3, #28]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d108      	bne.n	8007102 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0208 	orr.w	r2, r2, #8
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	e007      	b.n	8007112 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0208 	bic.w	r2, r2, #8
 8007110:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	7f5b      	ldrb	r3, [r3, #29]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d108      	bne.n	800712c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0204 	orr.w	r2, r2, #4
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e007      	b.n	800713c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0204 	bic.w	r2, r2, #4
 800713a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	ea42 0103 	orr.w	r1, r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	1e5a      	subs	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007192:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007194:	7cfb      	ldrb	r3, [r7, #19]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d003      	beq.n	80071a2 <HAL_CAN_ConfigFilter+0x26>
 800719a:	7cfb      	ldrb	r3, [r7, #19]
 800719c:	2b02      	cmp	r3, #2
 800719e:	f040 80be 	bne.w	800731e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80071a2:	4b65      	ldr	r3, [pc, #404]	; (8007338 <HAL_CAN_ConfigFilter+0x1bc>)
 80071a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071ac:	f043 0201 	orr.w	r2, r3, #1
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	431a      	orrs	r2, r3
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	2201      	movs	r2, #1
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	43db      	mvns	r3, r3
 80071f4:	401a      	ands	r2, r3
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d123      	bne.n	800724c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	43db      	mvns	r3, r3
 800720e:	401a      	ands	r2, r3
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007226:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3248      	adds	r2, #72	; 0x48
 800722c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007240:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007242:	6979      	ldr	r1, [r7, #20]
 8007244:	3348      	adds	r3, #72	; 0x48
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	440b      	add	r3, r1
 800724a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d122      	bne.n	800729a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	431a      	orrs	r2, r3
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007274:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	3248      	adds	r2, #72	; 0x48
 800727a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800728e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007290:	6979      	ldr	r1, [r7, #20]
 8007292:	3348      	adds	r3, #72	; 0x48
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	440b      	add	r3, r1
 8007298:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	43db      	mvns	r3, r3
 80072ac:	401a      	ands	r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80072b4:	e007      	b.n	80072c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	431a      	orrs	r2, r3
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d109      	bne.n	80072e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	43db      	mvns	r3, r3
 80072d8:	401a      	ands	r2, r3
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80072e0:	e007      	b.n	80072f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d107      	bne.n	800730a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	431a      	orrs	r2, r3
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007310:	f023 0201 	bic.w	r2, r3, #1
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	e006      	b.n	800732c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
  }
}
 800732c:	4618      	mov	r0, r3
 800732e:	371c      	adds	r7, #28
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	40006400 	.word	0x40006400

0800733c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b01      	cmp	r3, #1
 800734e:	d12e      	bne.n	80073ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0201 	bic.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007368:	f7ff f9ba 	bl	80066e0 <HAL_GetTick>
 800736c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800736e:	e012      	b.n	8007396 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007370:	f7ff f9b6 	bl	80066e0 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b0a      	cmp	r3, #10
 800737c:	d90b      	bls.n	8007396 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2205      	movs	r2, #5
 800738e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e012      	b.n	80073bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e5      	bne.n	8007370 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e006      	b.n	80073bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
  }
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b089      	sub	sp, #36	; 0x24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80073e2:	7ffb      	ldrb	r3, [r7, #31]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d003      	beq.n	80073f0 <HAL_CAN_AddTxMessage+0x2c>
 80073e8:	7ffb      	ldrb	r3, [r7, #31]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	f040 80b8 	bne.w	8007560 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007400:	2b00      	cmp	r3, #0
 8007402:	d105      	bne.n	8007410 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80a0 	beq.w	8007550 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	0e1b      	lsrs	r3, r3, #24
 8007414:	f003 0303 	and.w	r3, r3, #3
 8007418:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d907      	bls.n	8007430 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e09e      	b.n	800756e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007430:	2201      	movs	r2, #1
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	409a      	lsls	r2, r3
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10d      	bne.n	800745e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800744c:	68f9      	ldr	r1, [r7, #12]
 800744e:	6809      	ldr	r1, [r1, #0]
 8007450:	431a      	orrs	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	3318      	adds	r3, #24
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	440b      	add	r3, r1
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	e00f      	b.n	800747e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007468:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800746e:	68f9      	ldr	r1, [r7, #12]
 8007470:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007472:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	3318      	adds	r3, #24
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	440b      	add	r3, r1
 800747c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6819      	ldr	r1, [r3, #0]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	691a      	ldr	r2, [r3, #16]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	3318      	adds	r3, #24
 800748a:	011b      	lsls	r3, r3, #4
 800748c:	440b      	add	r3, r1
 800748e:	3304      	adds	r3, #4
 8007490:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	7d1b      	ldrb	r3, [r3, #20]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d111      	bne.n	80074be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	3318      	adds	r3, #24
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	4413      	add	r3, r2
 80074a6:	3304      	adds	r3, #4
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	6811      	ldr	r1, [r2, #0]
 80074ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	3318      	adds	r3, #24
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	440b      	add	r3, r1
 80074ba:	3304      	adds	r3, #4
 80074bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3307      	adds	r3, #7
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	061a      	lsls	r2, r3, #24
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3306      	adds	r3, #6
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3305      	adds	r3, #5
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	021b      	lsls	r3, r3, #8
 80074d8:	4313      	orrs	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	3204      	adds	r2, #4
 80074de:	7812      	ldrb	r2, [r2, #0]
 80074e0:	4610      	mov	r0, r2
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	6811      	ldr	r1, [r2, #0]
 80074e6:	ea43 0200 	orr.w	r2, r3, r0
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	440b      	add	r3, r1
 80074f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80074f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3303      	adds	r3, #3
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	061a      	lsls	r2, r3, #24
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3302      	adds	r3, #2
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3301      	adds	r3, #1
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	4313      	orrs	r3, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	7812      	ldrb	r2, [r2, #0]
 8007516:	4610      	mov	r0, r2
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	6811      	ldr	r1, [r2, #0]
 800751c:	ea43 0200 	orr.w	r2, r3, r0
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	440b      	add	r3, r1
 8007526:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800752a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	3318      	adds	r3, #24
 8007534:	011b      	lsls	r3, r3, #4
 8007536:	4413      	add	r3, r2
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	6811      	ldr	r1, [r2, #0]
 800753e:	f043 0201 	orr.w	r2, r3, #1
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	3318      	adds	r3, #24
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	440b      	add	r3, r1
 800754a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	e00e      	b.n	800756e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e006      	b.n	800756e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3724      	adds	r7, #36	; 0x24
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800757a:	b480      	push	{r7}
 800757c:	b085      	sub	sp, #20
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800758c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800758e:	7afb      	ldrb	r3, [r7, #11]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d002      	beq.n	800759a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d11d      	bne.n	80075d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3301      	adds	r3, #1
 80075ac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3301      	adds	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80075d6:	68fb      	ldr	r3, [r7, #12]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075f8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d003      	beq.n	8007608 <HAL_CAN_GetRxMessage+0x24>
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	2b02      	cmp	r3, #2
 8007604:	f040 80f3 	bne.w	80077ee <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10e      	bne.n	800762c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f003 0303 	and.w	r3, r3, #3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d116      	bne.n	800764a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e0e7      	b.n	80077fc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d107      	bne.n	800764a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e0d8      	b.n	80077fc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	331b      	adds	r3, #27
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	4413      	add	r3, r2
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0204 	and.w	r2, r3, #4
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10c      	bne.n	8007682 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	331b      	adds	r3, #27
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	4413      	add	r3, r2
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	0d5b      	lsrs	r3, r3, #21
 8007678:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	e00b      	b.n	800769a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	331b      	adds	r3, #27
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	4413      	add	r3, r2
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	08db      	lsrs	r3, r3, #3
 8007692:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	331b      	adds	r3, #27
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	4413      	add	r3, r2
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0202 	and.w	r2, r3, #2
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	331b      	adds	r3, #27
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	4413      	add	r3, r2
 80076bc:	3304      	adds	r3, #4
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 020f 	and.w	r2, r3, #15
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	331b      	adds	r3, #27
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	4413      	add	r3, r2
 80076d4:	3304      	adds	r3, #4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	0a1b      	lsrs	r3, r3, #8
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	331b      	adds	r3, #27
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	4413      	add	r3, r2
 80076ec:	3304      	adds	r3, #4
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	0c1b      	lsrs	r3, r3, #16
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	4413      	add	r3, r2
 8007702:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	b2da      	uxtb	r2, r3
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	4413      	add	r3, r2
 8007718:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	0a1a      	lsrs	r2, r3, #8
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	4413      	add	r3, r2
 8007732:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	0c1a      	lsrs	r2, r3, #16
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	3302      	adds	r3, #2
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	4413      	add	r3, r2
 800774c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	0e1a      	lsrs	r2, r3, #24
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	3303      	adds	r3, #3
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	4413      	add	r3, r2
 8007766:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	3304      	adds	r3, #4
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	011b      	lsls	r3, r3, #4
 800777c:	4413      	add	r3, r2
 800777e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	0a1a      	lsrs	r2, r3, #8
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	3305      	adds	r3, #5
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	011b      	lsls	r3, r3, #4
 8007796:	4413      	add	r3, r2
 8007798:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	0c1a      	lsrs	r2, r3, #16
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	3306      	adds	r3, #6
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	0e1a      	lsrs	r2, r3, #24
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	3307      	adds	r3, #7
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d108      	bne.n	80077da <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0220 	orr.w	r2, r2, #32
 80077d6:	60da      	str	r2, [r3, #12]
 80077d8:	e007      	b.n	80077ea <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f042 0220 	orr.w	r2, r2, #32
 80077e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	e006      	b.n	80077fc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
  }
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007818:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d002      	beq.n	8007826 <HAL_CAN_ActivateNotification+0x1e>
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d109      	bne.n	800783a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6959      	ldr	r1, [r3, #20]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	e006      	b.n	8007848 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
  }
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007864:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d002      	beq.n	8007872 <HAL_CAN_DeactivateNotification+0x1e>
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d10a      	bne.n	8007888 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6959      	ldr	r1, [r3, #20]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	43da      	mvns	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	400a      	ands	r2, r1
 8007882:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e006      	b.n	8007896 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
  }
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b08a      	sub	sp, #40	; 0x28
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80078aa:	2300      	movs	r3, #0
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d07c      	beq.n	80079e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d023      	beq.n	800793a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2201      	movs	r2, #1
 80078f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f983 	bl	8007c10 <HAL_CAN_TxMailbox0CompleteCallback>
 800790a:	e016      	b.n	800793a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f003 0304 	and.w	r3, r3, #4
 8007912:	2b00      	cmp	r3, #0
 8007914:	d004      	beq.n	8007920 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
 800791e:	e00c      	b.n	800793a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b00      	cmp	r3, #0
 8007928:	d004      	beq.n	8007934 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
 8007932:	e002      	b.n	800793a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f989 	bl	8007c4c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007940:	2b00      	cmp	r3, #0
 8007942:	d024      	beq.n	800798e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800794c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f963 	bl	8007c24 <HAL_CAN_TxMailbox1CompleteCallback>
 800795e:	e016      	b.n	800798e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007966:	2b00      	cmp	r3, #0
 8007968:	d004      	beq.n	8007974 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
 8007972:	e00c      	b.n	800798e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
 8007986:	e002      	b.n	800798e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f969 	bl	8007c60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d024      	beq.n	80079e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80079a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f943 	bl	8007c38 <HAL_CAN_TxMailbox2CompleteCallback>
 80079b2:	e016      	b.n	80079e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
 80079c6:	e00c      	b.n	80079e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
 80079da:	e002      	b.n	80079e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f949 	bl	8007c74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	f003 0308 	and.w	r3, r3, #8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00c      	beq.n	8007a06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d007      	beq.n	8007a06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2210      	movs	r2, #16
 8007a04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d006      	beq.n	8007a28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2208      	movs	r2, #8
 8007a20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f930 	bl	8007c88 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d009      	beq.n	8007a46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f003 0303 	and.w	r3, r3, #3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7fe f855 	bl	8005af0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00c      	beq.n	8007a6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d007      	beq.n	8007a6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2210      	movs	r2, #16
 8007a68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d006      	beq.n	8007a8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2208      	movs	r2, #8
 8007a84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f912 	bl	8007cb0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d009      	beq.n	8007aaa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f8f9 	bl	8007c9c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f003 0310 	and.w	r3, r3, #16
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d006      	beq.n	8007acc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2210      	movs	r2, #16
 8007ac4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f8fc 	bl	8007cc4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d006      	beq.n	8007aee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f8f5 	bl	8007cd8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d07b      	beq.n	8007bf0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d072      	beq.n	8007be8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d008      	beq.n	8007b1e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	f043 0301 	orr.w	r3, r3, #1
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d008      	beq.n	8007b3a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	f043 0302 	orr.w	r3, r3, #2
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	f043 0304 	orr.w	r3, r3, #4
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d043      	beq.n	8007be8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d03e      	beq.n	8007be8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b70:	2b60      	cmp	r3, #96	; 0x60
 8007b72:	d02b      	beq.n	8007bcc <HAL_CAN_IRQHandler+0x32a>
 8007b74:	2b60      	cmp	r3, #96	; 0x60
 8007b76:	d82e      	bhi.n	8007bd6 <HAL_CAN_IRQHandler+0x334>
 8007b78:	2b50      	cmp	r3, #80	; 0x50
 8007b7a:	d022      	beq.n	8007bc2 <HAL_CAN_IRQHandler+0x320>
 8007b7c:	2b50      	cmp	r3, #80	; 0x50
 8007b7e:	d82a      	bhi.n	8007bd6 <HAL_CAN_IRQHandler+0x334>
 8007b80:	2b40      	cmp	r3, #64	; 0x40
 8007b82:	d019      	beq.n	8007bb8 <HAL_CAN_IRQHandler+0x316>
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	d826      	bhi.n	8007bd6 <HAL_CAN_IRQHandler+0x334>
 8007b88:	2b30      	cmp	r3, #48	; 0x30
 8007b8a:	d010      	beq.n	8007bae <HAL_CAN_IRQHandler+0x30c>
 8007b8c:	2b30      	cmp	r3, #48	; 0x30
 8007b8e:	d822      	bhi.n	8007bd6 <HAL_CAN_IRQHandler+0x334>
 8007b90:	2b10      	cmp	r3, #16
 8007b92:	d002      	beq.n	8007b9a <HAL_CAN_IRQHandler+0x2f8>
 8007b94:	2b20      	cmp	r3, #32
 8007b96:	d005      	beq.n	8007ba4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007b98:	e01d      	b.n	8007bd6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	f043 0308 	orr.w	r3, r3, #8
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ba2:	e019      	b.n	8007bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	f043 0310 	orr.w	r3, r3, #16
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007bac:	e014      	b.n	8007bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	f043 0320 	orr.w	r3, r3, #32
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007bb6:	e00f      	b.n	8007bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007bc0:	e00a      	b.n	8007bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007bca:	e005      	b.n	8007bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007bd4:	e000      	b.n	8007bd8 <HAL_CAN_IRQHandler+0x336>
            break;
 8007bd6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007be6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2204      	movs	r2, #4
 8007bee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d008      	beq.n	8007c08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f872 	bl	8007cec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007c08:	bf00      	nop
 8007c0a:	3728      	adds	r7, #40	; 0x28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d10:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <__NVIC_SetPriorityGrouping+0x44>)
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d32:	4a04      	ldr	r2, [pc, #16]	; (8007d44 <__NVIC_SetPriorityGrouping+0x44>)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	60d3      	str	r3, [r2, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	e000ed00 	.word	0xe000ed00

08007d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d4c:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <__NVIC_GetPriorityGrouping+0x18>)
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	0a1b      	lsrs	r3, r3, #8
 8007d52:	f003 0307 	and.w	r3, r3, #7
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	e000ed00 	.word	0xe000ed00

08007d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	db0b      	blt.n	8007d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	f003 021f 	and.w	r2, r3, #31
 8007d7c:	4907      	ldr	r1, [pc, #28]	; (8007d9c <__NVIC_EnableIRQ+0x38>)
 8007d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	2001      	movs	r0, #1
 8007d86:	fa00 f202 	lsl.w	r2, r0, r2
 8007d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	e000e100 	.word	0xe000e100

08007da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	6039      	str	r1, [r7, #0]
 8007daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	db0a      	blt.n	8007dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	490c      	ldr	r1, [pc, #48]	; (8007dec <__NVIC_SetPriority+0x4c>)
 8007dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dbe:	0112      	lsls	r2, r2, #4
 8007dc0:	b2d2      	uxtb	r2, r2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007dc8:	e00a      	b.n	8007de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	4908      	ldr	r1, [pc, #32]	; (8007df0 <__NVIC_SetPriority+0x50>)
 8007dd0:	79fb      	ldrb	r3, [r7, #7]
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	3b04      	subs	r3, #4
 8007dd8:	0112      	lsls	r2, r2, #4
 8007dda:	b2d2      	uxtb	r2, r2
 8007ddc:	440b      	add	r3, r1
 8007dde:	761a      	strb	r2, [r3, #24]
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	e000e100 	.word	0xe000e100
 8007df0:	e000ed00 	.word	0xe000ed00

08007df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b089      	sub	sp, #36	; 0x24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f1c3 0307 	rsb	r3, r3, #7
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	bf28      	it	cs
 8007e12:	2304      	movcs	r3, #4
 8007e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	2b06      	cmp	r3, #6
 8007e1c:	d902      	bls.n	8007e24 <NVIC_EncodePriority+0x30>
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	3b03      	subs	r3, #3
 8007e22:	e000      	b.n	8007e26 <NVIC_EncodePriority+0x32>
 8007e24:	2300      	movs	r3, #0
 8007e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e28:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	43da      	mvns	r2, r3
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	401a      	ands	r2, r3
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	fa01 f303 	lsl.w	r3, r1, r3
 8007e46:	43d9      	mvns	r1, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e4c:	4313      	orrs	r3, r2
         );
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3724      	adds	r7, #36	; 0x24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
	...

08007e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e6c:	d301      	bcc.n	8007e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e00f      	b.n	8007e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e72:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <SysTick_Config+0x40>)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e7a:	210f      	movs	r1, #15
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	f7ff ff8e 	bl	8007da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e84:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <SysTick_Config+0x40>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e8a:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <SysTick_Config+0x40>)
 8007e8c:	2207      	movs	r2, #7
 8007e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	e000e010 	.word	0xe000e010

08007ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff ff29 	bl	8007d00 <__NVIC_SetPriorityGrouping>
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b086      	sub	sp, #24
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	607a      	str	r2, [r7, #4]
 8007ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ec8:	f7ff ff3e 	bl	8007d48 <__NVIC_GetPriorityGrouping>
 8007ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	68b9      	ldr	r1, [r7, #8]
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	f7ff ff8e 	bl	8007df4 <NVIC_EncodePriority>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff ff5d 	bl	8007da0 <__NVIC_SetPriority>
}
 8007ee6:	bf00      	nop
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff ff31 	bl	8007d64 <__NVIC_EnableIRQ>
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff ffa2 	bl	8007e5c <SysTick_Config>
 8007f18:	4603      	mov	r3, r0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007f30:	f7fe fbd6 	bl	80066e0 <HAL_GetTick>
 8007f34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e099      	b.n	8008074 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0201 	bic.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f60:	e00f      	b.n	8007f82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f62:	f7fe fbbd 	bl	80066e0 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b05      	cmp	r3, #5
 8007f6e:	d908      	bls.n	8007f82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2203      	movs	r2, #3
 8007f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e078      	b.n	8008074 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e8      	bne.n	8007f62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4b38      	ldr	r3, [pc, #224]	; (800807c <HAL_DMA_Init+0x158>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d107      	bne.n	8007fec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f023 0307 	bic.w	r3, r3, #7
 8008002:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	2b04      	cmp	r3, #4
 8008014:	d117      	bne.n	8008046 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	4313      	orrs	r3, r2
 800801e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00e      	beq.n	8008046 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fa9d 	bl	8008568 <DMA_CheckFifoParam>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2240      	movs	r2, #64	; 0x40
 8008038:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008042:	2301      	movs	r3, #1
 8008044:	e016      	b.n	8008074 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa54 	bl	80084fc <DMA_CalcBaseAndBitshift>
 8008054:	4603      	mov	r3, r0
 8008056:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805c:	223f      	movs	r2, #63	; 0x3f
 800805e:	409a      	lsls	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	f010803f 	.word	0xf010803f

08008080 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008096:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d101      	bne.n	80080a6 <HAL_DMA_Start_IT+0x26>
 80080a2:	2302      	movs	r3, #2
 80080a4:	e040      	b.n	8008128 <HAL_DMA_Start_IT+0xa8>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d12f      	bne.n	800811a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f9e6 	bl	80084a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d8:	223f      	movs	r2, #63	; 0x3f
 80080da:	409a      	lsls	r2, r3
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f042 0216 	orr.w	r2, r2, #22
 80080ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d007      	beq.n	8008108 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0208 	orr.w	r2, r2, #8
 8008106:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0201 	orr.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	e005      	b.n	8008126 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008122:	2302      	movs	r3, #2
 8008124:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b02      	cmp	r3, #2
 8008142:	d004      	beq.n	800814e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2280      	movs	r2, #128	; 0x80
 8008148:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e00c      	b.n	8008168 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2205      	movs	r2, #5
 8008152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0201 	bic.w	r2, r2, #1
 8008164:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008180:	4b8e      	ldr	r3, [pc, #568]	; (80083bc <HAL_DMA_IRQHandler+0x248>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a8e      	ldr	r2, [pc, #568]	; (80083c0 <HAL_DMA_IRQHandler+0x24c>)
 8008186:	fba2 2303 	umull	r2, r3, r2, r3
 800818a:	0a9b      	lsrs	r3, r3, #10
 800818c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008192:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800819e:	2208      	movs	r2, #8
 80081a0:	409a      	lsls	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4013      	ands	r3, r2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d01a      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d013      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0204 	bic.w	r2, r2, #4
 80081c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081cc:	2208      	movs	r2, #8
 80081ce:	409a      	lsls	r2, r3
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d8:	f043 0201 	orr.w	r2, r3, #1
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e4:	2201      	movs	r2, #1
 80081e6:	409a      	lsls	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4013      	ands	r3, r2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d012      	beq.n	8008216 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00b      	beq.n	8008216 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008202:	2201      	movs	r2, #1
 8008204:	409a      	lsls	r2, r3
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820e:	f043 0202 	orr.w	r2, r3, #2
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800821a:	2204      	movs	r2, #4
 800821c:	409a      	lsls	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	4013      	ands	r3, r2
 8008222:	2b00      	cmp	r3, #0
 8008224:	d012      	beq.n	800824c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008238:	2204      	movs	r2, #4
 800823a:	409a      	lsls	r2, r3
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008244:	f043 0204 	orr.w	r2, r3, #4
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008250:	2210      	movs	r2, #16
 8008252:	409a      	lsls	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4013      	ands	r3, r2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d043      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0308 	and.w	r3, r3, #8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d03c      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826e:	2210      	movs	r2, #16
 8008270:	409a      	lsls	r2, r3
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d018      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d108      	bne.n	80082a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	d024      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	4798      	blx	r3
 80082a2:	e01f      	b.n	80082e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d01b      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
 80082b4:	e016      	b.n	80082e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d107      	bne.n	80082d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0208 	bic.w	r2, r2, #8
 80082d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e8:	2220      	movs	r2, #32
 80082ea:	409a      	lsls	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4013      	ands	r3, r2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 808f 	beq.w	8008414 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 8087 	beq.w	8008414 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830a:	2220      	movs	r2, #32
 800830c:	409a      	lsls	r2, r3
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b05      	cmp	r3, #5
 800831c:	d136      	bne.n	800838c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 0216 	bic.w	r2, r2, #22
 800832c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695a      	ldr	r2, [r3, #20]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800833c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <HAL_DMA_IRQHandler+0x1da>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800834a:	2b00      	cmp	r3, #0
 800834c:	d007      	beq.n	800835e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f022 0208 	bic.w	r2, r2, #8
 800835c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008362:	223f      	movs	r2, #63	; 0x3f
 8008364:	409a      	lsls	r2, r3
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800837e:	2b00      	cmp	r3, #0
 8008380:	d07e      	beq.n	8008480 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
        }
        return;
 800838a:	e079      	b.n	8008480 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d01d      	beq.n	80083d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10d      	bne.n	80083c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d031      	beq.n	8008414 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	4798      	blx	r3
 80083b8:	e02c      	b.n	8008414 <HAL_DMA_IRQHandler+0x2a0>
 80083ba:	bf00      	nop
 80083bc:	20000000 	.word	0x20000000
 80083c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d023      	beq.n	8008414 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
 80083d4:	e01e      	b.n	8008414 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10f      	bne.n	8008404 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0210 	bic.w	r2, r2, #16
 80083f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008418:	2b00      	cmp	r3, #0
 800841a:	d032      	beq.n	8008482 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d022      	beq.n	800846e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2205      	movs	r2, #5
 800842c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0201 	bic.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	3301      	adds	r3, #1
 8008444:	60bb      	str	r3, [r7, #8]
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	429a      	cmp	r2, r3
 800844a:	d307      	bcc.n	800845c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1f2      	bne.n	8008440 <HAL_DMA_IRQHandler+0x2cc>
 800845a:	e000      	b.n	800845e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800845c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008472:	2b00      	cmp	r3, #0
 8008474:	d005      	beq.n	8008482 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	4798      	blx	r3
 800847e:	e000      	b.n	8008482 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008480:	bf00      	nop
    }
  }
}
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80084bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d108      	bne.n	80084e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80084de:	e007      	b.n	80084f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	60da      	str	r2, [r3, #12]
}
 80084f0:	bf00      	nop
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	3b10      	subs	r3, #16
 800850c:	4a14      	ldr	r2, [pc, #80]	; (8008560 <DMA_CalcBaseAndBitshift+0x64>)
 800850e:	fba2 2303 	umull	r2, r3, r2, r3
 8008512:	091b      	lsrs	r3, r3, #4
 8008514:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008516:	4a13      	ldr	r2, [pc, #76]	; (8008564 <DMA_CalcBaseAndBitshift+0x68>)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b03      	cmp	r3, #3
 8008528:	d909      	bls.n	800853e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	1d1a      	adds	r2, r3, #4
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	659a      	str	r2, [r3, #88]	; 0x58
 800853c:	e007      	b.n	800854e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	aaaaaaab 	.word	0xaaaaaaab
 8008564:	080185ec 	.word	0x080185ec

08008568 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008578:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d11f      	bne.n	80085c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b03      	cmp	r3, #3
 8008586:	d856      	bhi.n	8008636 <DMA_CheckFifoParam+0xce>
 8008588:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <DMA_CheckFifoParam+0x28>)
 800858a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858e:	bf00      	nop
 8008590:	080085a1 	.word	0x080085a1
 8008594:	080085b3 	.word	0x080085b3
 8008598:	080085a1 	.word	0x080085a1
 800859c:	08008637 	.word	0x08008637
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d046      	beq.n	800863a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085b0:	e043      	b.n	800863a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085ba:	d140      	bne.n	800863e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085c0:	e03d      	b.n	800863e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ca:	d121      	bne.n	8008610 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d837      	bhi.n	8008642 <DMA_CheckFifoParam+0xda>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <DMA_CheckFifoParam+0x70>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	080085e9 	.word	0x080085e9
 80085dc:	080085ef 	.word	0x080085ef
 80085e0:	080085e9 	.word	0x080085e9
 80085e4:	08008601 	.word	0x08008601
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
      break;
 80085ec:	e030      	b.n	8008650 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d025      	beq.n	8008646 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085fe:	e022      	b.n	8008646 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008608:	d11f      	bne.n	800864a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800860e:	e01c      	b.n	800864a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d903      	bls.n	800861e <DMA_CheckFifoParam+0xb6>
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b03      	cmp	r3, #3
 800861a:	d003      	beq.n	8008624 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800861c:	e018      	b.n	8008650 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	73fb      	strb	r3, [r7, #15]
      break;
 8008622:	e015      	b.n	8008650 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00e      	beq.n	800864e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	73fb      	strb	r3, [r7, #15]
      break;
 8008634:	e00b      	b.n	800864e <DMA_CheckFifoParam+0xe6>
      break;
 8008636:	bf00      	nop
 8008638:	e00a      	b.n	8008650 <DMA_CheckFifoParam+0xe8>
      break;
 800863a:	bf00      	nop
 800863c:	e008      	b.n	8008650 <DMA_CheckFifoParam+0xe8>
      break;
 800863e:	bf00      	nop
 8008640:	e006      	b.n	8008650 <DMA_CheckFifoParam+0xe8>
      break;
 8008642:	bf00      	nop
 8008644:	e004      	b.n	8008650 <DMA_CheckFifoParam+0xe8>
      break;
 8008646:	bf00      	nop
 8008648:	e002      	b.n	8008650 <DMA_CheckFifoParam+0xe8>
      break;   
 800864a:	bf00      	nop
 800864c:	e000      	b.n	8008650 <DMA_CheckFifoParam+0xe8>
      break;
 800864e:	bf00      	nop
    }
  } 
  
  return status; 
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop

08008660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008660:	b480      	push	{r7}
 8008662:	b089      	sub	sp, #36	; 0x24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800866a:	2300      	movs	r3, #0
 800866c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800866e:	2300      	movs	r3, #0
 8008670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008672:	2300      	movs	r3, #0
 8008674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008676:	2300      	movs	r3, #0
 8008678:	61fb      	str	r3, [r7, #28]
 800867a:	e165      	b.n	8008948 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800867c:	2201      	movs	r2, #1
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	fa02 f303 	lsl.w	r3, r2, r3
 8008684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	4013      	ands	r3, r2
 800868e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	429a      	cmp	r2, r3
 8008696:	f040 8154 	bne.w	8008942 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d005      	beq.n	80086b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d130      	bne.n	8008714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	2203      	movs	r2, #3
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	43db      	mvns	r3, r3
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	4013      	ands	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	fa02 f303 	lsl.w	r3, r2, r3
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	4313      	orrs	r3, r2
 80086da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80086e8:	2201      	movs	r2, #1
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	fa02 f303 	lsl.w	r3, r2, r3
 80086f0:	43db      	mvns	r3, r3
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	4013      	ands	r3, r2
 80086f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	091b      	lsrs	r3, r3, #4
 80086fe:	f003 0201 	and.w	r2, r3, #1
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	fa02 f303 	lsl.w	r3, r2, r3
 8008708:	69ba      	ldr	r2, [r7, #24]
 800870a:	4313      	orrs	r3, r2
 800870c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f003 0303 	and.w	r3, r3, #3
 800871c:	2b03      	cmp	r3, #3
 800871e:	d017      	beq.n	8008750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	2203      	movs	r2, #3
 800872c:	fa02 f303 	lsl.w	r3, r2, r3
 8008730:	43db      	mvns	r3, r3
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	4013      	ands	r3, r2
 8008736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	fa02 f303 	lsl.w	r3, r2, r3
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	4313      	orrs	r3, r2
 8008748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d123      	bne.n	80087a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	08da      	lsrs	r2, r3, #3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3208      	adds	r2, #8
 8008764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	220f      	movs	r2, #15
 8008774:	fa02 f303 	lsl.w	r3, r2, r3
 8008778:	43db      	mvns	r3, r3
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	4013      	ands	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	691a      	ldr	r2, [r3, #16]
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	f003 0307 	and.w	r3, r3, #7
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	fa02 f303 	lsl.w	r3, r2, r3
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	4313      	orrs	r3, r2
 8008794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	08da      	lsrs	r2, r3, #3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3208      	adds	r2, #8
 800879e:	69b9      	ldr	r1, [r7, #24]
 80087a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	2203      	movs	r2, #3
 80087b0:	fa02 f303 	lsl.w	r3, r2, r3
 80087b4:	43db      	mvns	r3, r3
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	4013      	ands	r3, r2
 80087ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f003 0203 	and.w	r2, r3, #3
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	fa02 f303 	lsl.w	r3, r2, r3
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80ae 	beq.w	8008942 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	4b5d      	ldr	r3, [pc, #372]	; (8008960 <HAL_GPIO_Init+0x300>)
 80087ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ee:	4a5c      	ldr	r2, [pc, #368]	; (8008960 <HAL_GPIO_Init+0x300>)
 80087f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087f4:	6453      	str	r3, [r2, #68]	; 0x44
 80087f6:	4b5a      	ldr	r3, [pc, #360]	; (8008960 <HAL_GPIO_Init+0x300>)
 80087f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008802:	4a58      	ldr	r2, [pc, #352]	; (8008964 <HAL_GPIO_Init+0x304>)
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	089b      	lsrs	r3, r3, #2
 8008808:	3302      	adds	r3, #2
 800880a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800880e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	220f      	movs	r2, #15
 800881a:	fa02 f303 	lsl.w	r3, r2, r3
 800881e:	43db      	mvns	r3, r3
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	4013      	ands	r3, r2
 8008824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a4f      	ldr	r2, [pc, #316]	; (8008968 <HAL_GPIO_Init+0x308>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d025      	beq.n	800887a <HAL_GPIO_Init+0x21a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a4e      	ldr	r2, [pc, #312]	; (800896c <HAL_GPIO_Init+0x30c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01f      	beq.n	8008876 <HAL_GPIO_Init+0x216>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a4d      	ldr	r2, [pc, #308]	; (8008970 <HAL_GPIO_Init+0x310>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d019      	beq.n	8008872 <HAL_GPIO_Init+0x212>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a4c      	ldr	r2, [pc, #304]	; (8008974 <HAL_GPIO_Init+0x314>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <HAL_GPIO_Init+0x20e>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a4b      	ldr	r2, [pc, #300]	; (8008978 <HAL_GPIO_Init+0x318>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00d      	beq.n	800886a <HAL_GPIO_Init+0x20a>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a4a      	ldr	r2, [pc, #296]	; (800897c <HAL_GPIO_Init+0x31c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d007      	beq.n	8008866 <HAL_GPIO_Init+0x206>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a49      	ldr	r2, [pc, #292]	; (8008980 <HAL_GPIO_Init+0x320>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d101      	bne.n	8008862 <HAL_GPIO_Init+0x202>
 800885e:	2306      	movs	r3, #6
 8008860:	e00c      	b.n	800887c <HAL_GPIO_Init+0x21c>
 8008862:	2307      	movs	r3, #7
 8008864:	e00a      	b.n	800887c <HAL_GPIO_Init+0x21c>
 8008866:	2305      	movs	r3, #5
 8008868:	e008      	b.n	800887c <HAL_GPIO_Init+0x21c>
 800886a:	2304      	movs	r3, #4
 800886c:	e006      	b.n	800887c <HAL_GPIO_Init+0x21c>
 800886e:	2303      	movs	r3, #3
 8008870:	e004      	b.n	800887c <HAL_GPIO_Init+0x21c>
 8008872:	2302      	movs	r3, #2
 8008874:	e002      	b.n	800887c <HAL_GPIO_Init+0x21c>
 8008876:	2301      	movs	r3, #1
 8008878:	e000      	b.n	800887c <HAL_GPIO_Init+0x21c>
 800887a:	2300      	movs	r3, #0
 800887c:	69fa      	ldr	r2, [r7, #28]
 800887e:	f002 0203 	and.w	r2, r2, #3
 8008882:	0092      	lsls	r2, r2, #2
 8008884:	4093      	lsls	r3, r2
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	4313      	orrs	r3, r2
 800888a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800888c:	4935      	ldr	r1, [pc, #212]	; (8008964 <HAL_GPIO_Init+0x304>)
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	089b      	lsrs	r3, r3, #2
 8008892:	3302      	adds	r3, #2
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800889a:	4b3a      	ldr	r3, [pc, #232]	; (8008984 <HAL_GPIO_Init+0x324>)
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	43db      	mvns	r3, r3
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	4013      	ands	r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80088be:	4a31      	ldr	r2, [pc, #196]	; (8008984 <HAL_GPIO_Init+0x324>)
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80088c4:	4b2f      	ldr	r3, [pc, #188]	; (8008984 <HAL_GPIO_Init+0x324>)
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	43db      	mvns	r3, r3
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	4013      	ands	r3, r2
 80088d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80088e8:	4a26      	ldr	r2, [pc, #152]	; (8008984 <HAL_GPIO_Init+0x324>)
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80088ee:	4b25      	ldr	r3, [pc, #148]	; (8008984 <HAL_GPIO_Init+0x324>)
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	43db      	mvns	r3, r3
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	4013      	ands	r3, r2
 80088fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008912:	4a1c      	ldr	r2, [pc, #112]	; (8008984 <HAL_GPIO_Init+0x324>)
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008918:	4b1a      	ldr	r3, [pc, #104]	; (8008984 <HAL_GPIO_Init+0x324>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	43db      	mvns	r3, r3
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	4013      	ands	r3, r2
 8008926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	4313      	orrs	r3, r2
 800893a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800893c:	4a11      	ldr	r2, [pc, #68]	; (8008984 <HAL_GPIO_Init+0x324>)
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	3301      	adds	r3, #1
 8008946:	61fb      	str	r3, [r7, #28]
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	2b0f      	cmp	r3, #15
 800894c:	f67f ae96 	bls.w	800867c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	3724      	adds	r7, #36	; 0x24
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	40023800 	.word	0x40023800
 8008964:	40013800 	.word	0x40013800
 8008968:	40020000 	.word	0x40020000
 800896c:	40020400 	.word	0x40020400
 8008970:	40020800 	.word	0x40020800
 8008974:	40020c00 	.word	0x40020c00
 8008978:	40021000 	.word	0x40021000
 800897c:	40021400 	.word	0x40021400
 8008980:	40021800 	.word	0x40021800
 8008984:	40013c00 	.word	0x40013c00

08008988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	887b      	ldrh	r3, [r7, #2]
 800899a:	4013      	ands	r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089a0:	2301      	movs	r3, #1
 80089a2:	73fb      	strb	r3, [r7, #15]
 80089a4:	e001      	b.n	80089aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	807b      	strh	r3, [r7, #2]
 80089c4:	4613      	mov	r3, r2
 80089c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80089c8:	787b      	ldrb	r3, [r7, #1]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089ce:	887a      	ldrh	r2, [r7, #2]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80089d4:	e003      	b.n	80089de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80089d6:	887b      	ldrh	r3, [r7, #2]
 80089d8:	041a      	lsls	r2, r3, #16
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	619a      	str	r2, [r3, #24]
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b085      	sub	sp, #20
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80089fc:	887a      	ldrh	r2, [r7, #2]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4013      	ands	r3, r2
 8008a02:	041a      	lsls	r2, r3, #16
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	43d9      	mvns	r1, r3
 8008a08:	887b      	ldrh	r3, [r7, #2]
 8008a0a:	400b      	ands	r3, r1
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	619a      	str	r2, [r3, #24]
}
 8008a12:	bf00      	nop
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
	...

08008a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008a2a:	4b08      	ldr	r3, [pc, #32]	; (8008a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a2c:	695a      	ldr	r2, [r3, #20]
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	4013      	ands	r3, r2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d006      	beq.n	8008a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a36:	4a05      	ldr	r2, [pc, #20]	; (8008a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a3c:	88fb      	ldrh	r3, [r7, #6]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fd f8c6 	bl	8005bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	40013c00 	.word	0x40013c00

08008a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e12b      	b.n	8008cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fd fb48 	bl	800610c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2224      	movs	r2, #36	; 0x24
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 0201 	bic.w	r2, r2, #1
 8008a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ab4:	f002 f850 	bl	800ab58 <HAL_RCC_GetPCLK1Freq>
 8008ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	4a81      	ldr	r2, [pc, #516]	; (8008cc4 <HAL_I2C_Init+0x274>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d807      	bhi.n	8008ad4 <HAL_I2C_Init+0x84>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4a80      	ldr	r2, [pc, #512]	; (8008cc8 <HAL_I2C_Init+0x278>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	bf94      	ite	ls
 8008acc:	2301      	movls	r3, #1
 8008ace:	2300      	movhi	r3, #0
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	e006      	b.n	8008ae2 <HAL_I2C_Init+0x92>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4a7d      	ldr	r2, [pc, #500]	; (8008ccc <HAL_I2C_Init+0x27c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	bf94      	ite	ls
 8008adc:	2301      	movls	r3, #1
 8008ade:	2300      	movhi	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e0e7      	b.n	8008cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4a78      	ldr	r2, [pc, #480]	; (8008cd0 <HAL_I2C_Init+0x280>)
 8008aee:	fba2 2303 	umull	r2, r3, r2, r3
 8008af2:	0c9b      	lsrs	r3, r3, #18
 8008af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	4a6a      	ldr	r2, [pc, #424]	; (8008cc4 <HAL_I2C_Init+0x274>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d802      	bhi.n	8008b24 <HAL_I2C_Init+0xd4>
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	3301      	adds	r3, #1
 8008b22:	e009      	b.n	8008b38 <HAL_I2C_Init+0xe8>
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008b2a:	fb02 f303 	mul.w	r3, r2, r3
 8008b2e:	4a69      	ldr	r2, [pc, #420]	; (8008cd4 <HAL_I2C_Init+0x284>)
 8008b30:	fba2 2303 	umull	r2, r3, r2, r3
 8008b34:	099b      	lsrs	r3, r3, #6
 8008b36:	3301      	adds	r3, #1
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008b4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	495c      	ldr	r1, [pc, #368]	; (8008cc4 <HAL_I2C_Init+0x274>)
 8008b54:	428b      	cmp	r3, r1
 8008b56:	d819      	bhi.n	8008b8c <HAL_I2C_Init+0x13c>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	1e59      	subs	r1, r3, #1
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b66:	1c59      	adds	r1, r3, #1
 8008b68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008b6c:	400b      	ands	r3, r1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <HAL_I2C_Init+0x138>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1e59      	subs	r1, r3, #1
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b80:	3301      	adds	r3, #1
 8008b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b86:	e051      	b.n	8008c2c <HAL_I2C_Init+0x1dc>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	e04f      	b.n	8008c2c <HAL_I2C_Init+0x1dc>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d111      	bne.n	8008bb8 <HAL_I2C_Init+0x168>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	1e58      	subs	r0, r3, #1
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6859      	ldr	r1, [r3, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	440b      	add	r3, r1
 8008ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bf0c      	ite	eq
 8008bb0:	2301      	moveq	r3, #1
 8008bb2:	2300      	movne	r3, #0
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	e012      	b.n	8008bde <HAL_I2C_Init+0x18e>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	1e58      	subs	r0, r3, #1
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6859      	ldr	r1, [r3, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	0099      	lsls	r1, r3, #2
 8008bc8:	440b      	add	r3, r1
 8008bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bce:	3301      	adds	r3, #1
 8008bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2301      	moveq	r3, #1
 8008bda:	2300      	movne	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <HAL_I2C_Init+0x196>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e022      	b.n	8008c2c <HAL_I2C_Init+0x1dc>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10e      	bne.n	8008c0c <HAL_I2C_Init+0x1bc>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	1e58      	subs	r0, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6859      	ldr	r1, [r3, #4]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	440b      	add	r3, r1
 8008bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c00:	3301      	adds	r3, #1
 8008c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0a:	e00f      	b.n	8008c2c <HAL_I2C_Init+0x1dc>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	1e58      	subs	r0, r3, #1
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6859      	ldr	r1, [r3, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	440b      	add	r3, r1
 8008c1a:	0099      	lsls	r1, r3, #2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c22:	3301      	adds	r3, #1
 8008c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	6809      	ldr	r1, [r1, #0]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	69da      	ldr	r2, [r3, #28]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	431a      	orrs	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6911      	ldr	r1, [r2, #16]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	68d2      	ldr	r2, [r2, #12]
 8008c66:	4311      	orrs	r1, r2
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6812      	ldr	r2, [r2, #0]
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	695a      	ldr	r2, [r3, #20]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f042 0201 	orr.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	000186a0 	.word	0x000186a0
 8008cc8:	001e847f 	.word	0x001e847f
 8008ccc:	003d08ff 	.word	0x003d08ff
 8008cd0:	431bde83 	.word	0x431bde83
 8008cd4:	10624dd3 	.word	0x10624dd3

08008cd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b088      	sub	sp, #32
 8008cdc:	af02      	add	r7, sp, #8
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	817b      	strh	r3, [r7, #10]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008cec:	f7fd fcf8 	bl	80066e0 <HAL_GetTick>
 8008cf0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	f040 80e0 	bne.w	8008ec0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	2319      	movs	r3, #25
 8008d06:	2201      	movs	r2, #1
 8008d08:	4970      	ldr	r1, [pc, #448]	; (8008ecc <HAL_I2C_Master_Transmit+0x1f4>)
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 f964 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008d16:	2302      	movs	r3, #2
 8008d18:	e0d3      	b.n	8008ec2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d101      	bne.n	8008d28 <HAL_I2C_Master_Transmit+0x50>
 8008d24:	2302      	movs	r3, #2
 8008d26:	e0cc      	b.n	8008ec2 <HAL_I2C_Master_Transmit+0x1ea>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d007      	beq.n	8008d4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0201 	orr.w	r2, r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2221      	movs	r2, #33	; 0x21
 8008d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2210      	movs	r2, #16
 8008d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	893a      	ldrh	r2, [r7, #8]
 8008d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4a50      	ldr	r2, [pc, #320]	; (8008ed0 <HAL_I2C_Master_Transmit+0x1f8>)
 8008d8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008d90:	8979      	ldrh	r1, [r7, #10]
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	6a3a      	ldr	r2, [r7, #32]
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 f89c 	bl	8008ed4 <I2C_MasterRequestWrite>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e08d      	b.n	8008ec2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008da6:	2300      	movs	r3, #0
 8008da8:	613b      	str	r3, [r7, #16]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	613b      	str	r3, [r7, #16]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	613b      	str	r3, [r7, #16]
 8008dba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008dbc:	e066      	b.n	8008e8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	6a39      	ldr	r1, [r7, #32]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f9de 	bl	8009184 <I2C_WaitOnTXEFlagUntilTimeout>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00d      	beq.n	8008dea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d107      	bne.n	8008de6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008de4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e06b      	b.n	8008ec2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e12:	3b01      	subs	r3, #1
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	f003 0304 	and.w	r3, r3, #4
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d11b      	bne.n	8008e60 <HAL_I2C_Master_Transmit+0x188>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d017      	beq.n	8008e60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	781a      	ldrb	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	6a39      	ldr	r1, [r7, #32]
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 f9ce 	bl	8009206 <I2C_WaitOnBTFFlagUntilTimeout>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00d      	beq.n	8008e8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e74:	2b04      	cmp	r3, #4
 8008e76:	d107      	bne.n	8008e88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e01a      	b.n	8008ec2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d194      	bne.n	8008dbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e000      	b.n	8008ec2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008ec0:	2302      	movs	r3, #2
  }
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3718      	adds	r7, #24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	00100002 	.word	0x00100002
 8008ed0:	ffff0000 	.word	0xffff0000

08008ed4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af02      	add	r7, sp, #8
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	607a      	str	r2, [r7, #4]
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d006      	beq.n	8008efe <I2C_MasterRequestWrite+0x2a>
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d003      	beq.n	8008efe <I2C_MasterRequestWrite+0x2a>
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008efc:	d108      	bne.n	8008f10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	e00b      	b.n	8008f28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f14:	2b12      	cmp	r3, #18
 8008f16:	d107      	bne.n	8008f28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f84f 	bl	8008fd8 <I2C_WaitOnFlagUntilTimeout>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00d      	beq.n	8008f5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f4e:	d103      	bne.n	8008f58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e035      	b.n	8008fc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f64:	d108      	bne.n	8008f78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f66:	897b      	ldrh	r3, [r7, #10]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f74:	611a      	str	r2, [r3, #16]
 8008f76:	e01b      	b.n	8008fb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008f78:	897b      	ldrh	r3, [r7, #10]
 8008f7a:	11db      	asrs	r3, r3, #7
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	f003 0306 	and.w	r3, r3, #6
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	f063 030f 	orn	r3, r3, #15
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	490e      	ldr	r1, [pc, #56]	; (8008fd0 <I2C_MasterRequestWrite+0xfc>)
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 f875 	bl	8009086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e010      	b.n	8008fc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008fa6:	897b      	ldrh	r3, [r7, #10]
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	4907      	ldr	r1, [pc, #28]	; (8008fd4 <I2C_MasterRequestWrite+0x100>)
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 f865 	bl	8009086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e000      	b.n	8008fc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	00010008 	.word	0x00010008
 8008fd4:	00010002 	.word	0x00010002

08008fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fe8:	e025      	b.n	8009036 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff0:	d021      	beq.n	8009036 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff2:	f7fd fb75 	bl	80066e0 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d302      	bcc.n	8009008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d116      	bne.n	8009036 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2220      	movs	r2, #32
 8009012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009022:	f043 0220 	orr.w	r2, r3, #32
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e023      	b.n	800907e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	0c1b      	lsrs	r3, r3, #16
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b01      	cmp	r3, #1
 800903e:	d10d      	bne.n	800905c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	43da      	mvns	r2, r3
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	4013      	ands	r3, r2
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	bf0c      	ite	eq
 8009052:	2301      	moveq	r3, #1
 8009054:	2300      	movne	r3, #0
 8009056:	b2db      	uxtb	r3, r3
 8009058:	461a      	mov	r2, r3
 800905a:	e00c      	b.n	8009076 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	43da      	mvns	r2, r3
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	4013      	ands	r3, r2
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	bf0c      	ite	eq
 800906e:	2301      	moveq	r3, #1
 8009070:	2300      	movne	r3, #0
 8009072:	b2db      	uxtb	r3, r3
 8009074:	461a      	mov	r2, r3
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	429a      	cmp	r2, r3
 800907a:	d0b6      	beq.n	8008fea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	607a      	str	r2, [r7, #4]
 8009092:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009094:	e051      	b.n	800913a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090a4:	d123      	bne.n	80090ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80090be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2220      	movs	r2, #32
 80090ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	f043 0204 	orr.w	r2, r3, #4
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e046      	b.n	800917c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f4:	d021      	beq.n	800913a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f6:	f7fd faf3 	bl	80066e0 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	429a      	cmp	r2, r3
 8009104:	d302      	bcc.n	800910c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d116      	bne.n	800913a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2220      	movs	r2, #32
 8009116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	f043 0220 	orr.w	r2, r3, #32
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e020      	b.n	800917c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	0c1b      	lsrs	r3, r3, #16
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b01      	cmp	r3, #1
 8009142:	d10c      	bne.n	800915e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	43da      	mvns	r2, r3
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	4013      	ands	r3, r2
 8009150:	b29b      	uxth	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	bf14      	ite	ne
 8009156:	2301      	movne	r3, #1
 8009158:	2300      	moveq	r3, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	e00b      	b.n	8009176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	43da      	mvns	r2, r3
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	4013      	ands	r3, r2
 800916a:	b29b      	uxth	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	bf14      	ite	ne
 8009170:	2301      	movne	r3, #1
 8009172:	2300      	moveq	r3, #0
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d18d      	bne.n	8009096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009190:	e02d      	b.n	80091ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 f878 	bl	8009288 <I2C_IsAcknowledgeFailed>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e02d      	b.n	80091fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a8:	d021      	beq.n	80091ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091aa:	f7fd fa99 	bl	80066e0 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d302      	bcc.n	80091c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d116      	bne.n	80091ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091da:	f043 0220 	orr.w	r2, r3, #32
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e007      	b.n	80091fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f8:	2b80      	cmp	r3, #128	; 0x80
 80091fa:	d1ca      	bne.n	8009192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	60b9      	str	r1, [r7, #8]
 8009210:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009212:	e02d      	b.n	8009270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 f837 	bl	8009288 <I2C_IsAcknowledgeFailed>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e02d      	b.n	8009280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922a:	d021      	beq.n	8009270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800922c:	f7fd fa58 	bl	80066e0 <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	429a      	cmp	r2, r3
 800923a:	d302      	bcc.n	8009242 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d116      	bne.n	8009270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2220      	movs	r2, #32
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925c:	f043 0220 	orr.w	r2, r3, #32
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e007      	b.n	8009280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	f003 0304 	and.w	r3, r3, #4
 800927a:	2b04      	cmp	r3, #4
 800927c:	d1ca      	bne.n	8009214 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800929a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800929e:	d11b      	bne.n	80092d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c4:	f043 0204 	orr.w	r2, r3, #4
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e000      	b.n	80092da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80092e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e8:	b08f      	sub	sp, #60	; 0x3c
 80092ea:	af0a      	add	r7, sp, #40	; 0x28
 80092ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e116      	b.n	8009526 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f00e f8ca 	bl	80174ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2203      	movs	r2, #3
 800931c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4618      	mov	r0, r3
 8009338:	f005 ff73 	bl	800f222 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	603b      	str	r3, [r7, #0]
 8009342:	687e      	ldr	r6, [r7, #4]
 8009344:	466d      	mov	r5, sp
 8009346:	f106 0410 	add.w	r4, r6, #16
 800934a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800934c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800934e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009352:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009356:	e885 0003 	stmia.w	r5, {r0, r1}
 800935a:	1d33      	adds	r3, r6, #4
 800935c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800935e:	6838      	ldr	r0, [r7, #0]
 8009360:	f005 fe4a 	bl	800eff8 <USB_CoreInit>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d005      	beq.n	8009376 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e0d7      	b.n	8009526 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f005 ff61 	bl	800f244 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009382:	2300      	movs	r3, #0
 8009384:	73fb      	strb	r3, [r7, #15]
 8009386:	e04a      	b.n	800941e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009388:	7bfa      	ldrb	r2, [r7, #15]
 800938a:	6879      	ldr	r1, [r7, #4]
 800938c:	4613      	mov	r3, r2
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	440b      	add	r3, r1
 8009396:	333d      	adds	r3, #61	; 0x3d
 8009398:	2201      	movs	r2, #1
 800939a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800939c:	7bfa      	ldrb	r2, [r7, #15]
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4613      	mov	r3, r2
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	4413      	add	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	440b      	add	r3, r1
 80093aa:	333c      	adds	r3, #60	; 0x3c
 80093ac:	7bfa      	ldrb	r2, [r7, #15]
 80093ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80093b0:	7bfa      	ldrb	r2, [r7, #15]
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	b298      	uxth	r0, r3
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	4613      	mov	r3, r2
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	440b      	add	r3, r1
 80093c2:	3344      	adds	r3, #68	; 0x44
 80093c4:	4602      	mov	r2, r0
 80093c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80093c8:	7bfa      	ldrb	r2, [r7, #15]
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	4613      	mov	r3, r2
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	3340      	adds	r3, #64	; 0x40
 80093d8:	2200      	movs	r2, #0
 80093da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80093dc:	7bfa      	ldrb	r2, [r7, #15]
 80093de:	6879      	ldr	r1, [r7, #4]
 80093e0:	4613      	mov	r3, r2
 80093e2:	00db      	lsls	r3, r3, #3
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	440b      	add	r3, r1
 80093ea:	3348      	adds	r3, #72	; 0x48
 80093ec:	2200      	movs	r2, #0
 80093ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80093f0:	7bfa      	ldrb	r2, [r7, #15]
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	4613      	mov	r3, r2
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	440b      	add	r3, r1
 80093fe:	334c      	adds	r3, #76	; 0x4c
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009404:	7bfa      	ldrb	r2, [r7, #15]
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	4613      	mov	r3, r2
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	440b      	add	r3, r1
 8009412:	3354      	adds	r3, #84	; 0x54
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	3301      	adds	r3, #1
 800941c:	73fb      	strb	r3, [r7, #15]
 800941e:	7bfa      	ldrb	r2, [r7, #15]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	d3af      	bcc.n	8009388 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]
 800942c:	e044      	b.n	80094b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800942e:	7bfa      	ldrb	r2, [r7, #15]
 8009430:	6879      	ldr	r1, [r7, #4]
 8009432:	4613      	mov	r3, r2
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	440b      	add	r3, r1
 800943c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009440:	2200      	movs	r2, #0
 8009442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009444:	7bfa      	ldrb	r2, [r7, #15]
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	4613      	mov	r3, r2
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	4413      	add	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	440b      	add	r3, r1
 8009452:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009456:	7bfa      	ldrb	r2, [r7, #15]
 8009458:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800945a:	7bfa      	ldrb	r2, [r7, #15]
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	00db      	lsls	r3, r3, #3
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800946c:	2200      	movs	r2, #0
 800946e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009470:	7bfa      	ldrb	r2, [r7, #15]
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	4613      	mov	r3, r2
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	4413      	add	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	440b      	add	r3, r1
 800947e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009486:	7bfa      	ldrb	r2, [r7, #15]
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	4613      	mov	r3, r2
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	440b      	add	r3, r1
 8009494:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009498:	2200      	movs	r2, #0
 800949a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800949c:	7bfa      	ldrb	r2, [r7, #15]
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4613      	mov	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	3301      	adds	r3, #1
 80094b6:	73fb      	strb	r3, [r7, #15]
 80094b8:	7bfa      	ldrb	r2, [r7, #15]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d3b5      	bcc.n	800942e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	603b      	str	r3, [r7, #0]
 80094c8:	687e      	ldr	r6, [r7, #4]
 80094ca:	466d      	mov	r5, sp
 80094cc:	f106 0410 	add.w	r4, r6, #16
 80094d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80094e0:	1d33      	adds	r3, r6, #4
 80094e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094e4:	6838      	ldr	r0, [r7, #0]
 80094e6:	f005 fef9 	bl	800f2dc <USB_DevInit>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e014      	b.n	8009526 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	2b01      	cmp	r3, #1
 8009512:	d102      	bne.n	800951a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 f9b9 	bl	800a88c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	f007 f83b 	bl	801059a <USB_DevDisconnect>

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800952e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009542:	2b01      	cmp	r3, #1
 8009544:	d101      	bne.n	800954a <HAL_PCD_Start+0x1c>
 8009546:	2302      	movs	r3, #2
 8009548:	e020      	b.n	800958c <HAL_PCD_Start+0x5e>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009556:	2b01      	cmp	r3, #1
 8009558:	d109      	bne.n	800956e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800955e:	2b01      	cmp	r3, #1
 8009560:	d005      	beq.n	800956e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009566:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4618      	mov	r0, r3
 8009574:	f005 fe44 	bl	800f200 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4618      	mov	r0, r3
 800957e:	f006 ffeb 	bl	8010558 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009594:	b590      	push	{r4, r7, lr}
 8009596:	b08d      	sub	sp, #52	; 0x34
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f007 f8a9 	bl	8010702 <USB_GetMode>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f040 84b7 	bne.w	8009f26 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4618      	mov	r0, r3
 80095be:	f007 f80d 	bl	80105dc <USB_ReadInterrupts>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 84ad 	beq.w	8009f24 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	0a1b      	lsrs	r3, r3, #8
 80095d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f006 fffa 	bl	80105dc <USB_ReadInterrupts>
 80095e8:	4603      	mov	r3, r0
 80095ea:	f003 0302 	and.w	r3, r3, #2
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d107      	bne.n	8009602 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	695a      	ldr	r2, [r3, #20]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f002 0202 	and.w	r2, r2, #2
 8009600:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4618      	mov	r0, r3
 8009608:	f006 ffe8 	bl	80105dc <USB_ReadInterrupts>
 800960c:	4603      	mov	r3, r0
 800960e:	f003 0310 	and.w	r3, r3, #16
 8009612:	2b10      	cmp	r3, #16
 8009614:	d161      	bne.n	80096da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	699a      	ldr	r2, [r3, #24]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0210 	bic.w	r2, r2, #16
 8009624:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009626:	6a3b      	ldr	r3, [r7, #32]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	f003 020f 	and.w	r2, r3, #15
 8009632:	4613      	mov	r3, r2
 8009634:	00db      	lsls	r3, r3, #3
 8009636:	4413      	add	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	3304      	adds	r3, #4
 8009644:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	0c5b      	lsrs	r3, r3, #17
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	2b02      	cmp	r3, #2
 8009650:	d124      	bne.n	800969c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009658:	4013      	ands	r3, r2
 800965a:	2b00      	cmp	r3, #0
 800965c:	d035      	beq.n	80096ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	091b      	lsrs	r3, r3, #4
 8009666:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800966c:	b29b      	uxth	r3, r3
 800966e:	461a      	mov	r2, r3
 8009670:	6a38      	ldr	r0, [r7, #32]
 8009672:	f006 fe1f 	bl	80102b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	091b      	lsrs	r3, r3, #4
 800967e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009682:	441a      	add	r2, r3
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	6a1a      	ldr	r2, [r3, #32]
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	091b      	lsrs	r3, r3, #4
 8009690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009694:	441a      	add	r2, r3
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	621a      	str	r2, [r3, #32]
 800969a:	e016      	b.n	80096ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	0c5b      	lsrs	r3, r3, #17
 80096a0:	f003 030f 	and.w	r3, r3, #15
 80096a4:	2b06      	cmp	r3, #6
 80096a6:	d110      	bne.n	80096ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096ae:	2208      	movs	r2, #8
 80096b0:	4619      	mov	r1, r3
 80096b2:	6a38      	ldr	r0, [r7, #32]
 80096b4:	f006 fdfe 	bl	80102b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	6a1a      	ldr	r2, [r3, #32]
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	091b      	lsrs	r3, r3, #4
 80096c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096c4:	441a      	add	r2, r3
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	699a      	ldr	r2, [r3, #24]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f042 0210 	orr.w	r2, r2, #16
 80096d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4618      	mov	r0, r3
 80096e0:	f006 ff7c 	bl	80105dc <USB_ReadInterrupts>
 80096e4:	4603      	mov	r3, r0
 80096e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096ee:	f040 80a7 	bne.w	8009840 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f006 ff81 	bl	8010602 <USB_ReadDevAllOutEpInterrupt>
 8009700:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009702:	e099      	b.n	8009838 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 808e 	beq.w	800982c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f006 ffa5 	bl	801066a <USB_ReadDevOutEPInterrupt>
 8009720:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00c      	beq.n	8009746 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009738:	461a      	mov	r2, r3
 800973a:	2301      	movs	r3, #1
 800973c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800973e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 ff1d 	bl	800a580 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00c      	beq.n	800976a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975c:	461a      	mov	r2, r3
 800975e:	2308      	movs	r3, #8
 8009760:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fff3 	bl	800a750 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f003 0310 	and.w	r3, r3, #16
 8009770:	2b00      	cmp	r3, #0
 8009772:	d008      	beq.n	8009786 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	4413      	add	r3, r2
 800977c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009780:	461a      	mov	r2, r3
 8009782:	2310      	movs	r3, #16
 8009784:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	2b00      	cmp	r3, #0
 800978e:	d030      	beq.n	80097f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009798:	2b80      	cmp	r3, #128	; 0x80
 800979a:	d109      	bne.n	80097b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	69fa      	ldr	r2, [r7, #28]
 80097a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80097b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b2:	4613      	mov	r3, r2
 80097b4:	00db      	lsls	r3, r3, #3
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	4413      	add	r3, r2
 80097c2:	3304      	adds	r3, #4
 80097c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	78db      	ldrb	r3, [r3, #3]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d108      	bne.n	80097e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2200      	movs	r2, #0
 80097d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f00d ff7a 	bl	80176d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ec:	461a      	mov	r2, r3
 80097ee:	2302      	movs	r3, #2
 80097f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f003 0320 	and.w	r3, r3, #32
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d008      	beq.n	800980e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009808:	461a      	mov	r2, r3
 800980a:	2320      	movs	r3, #32
 800980c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d009      	beq.n	800982c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009824:	461a      	mov	r2, r3
 8009826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800982a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	3301      	adds	r3, #1
 8009830:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	085b      	lsrs	r3, r3, #1
 8009836:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	2b00      	cmp	r3, #0
 800983c:	f47f af62 	bne.w	8009704 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4618      	mov	r0, r3
 8009846:	f006 fec9 	bl	80105dc <USB_ReadInterrupts>
 800984a:	4603      	mov	r3, r0
 800984c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009854:	f040 80db 	bne.w	8009a0e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4618      	mov	r0, r3
 800985e:	f006 feea 	bl	8010636 <USB_ReadDevAllInEpInterrupt>
 8009862:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009868:	e0cd      	b.n	8009a06 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 80c2 	beq.w	80099fa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800987c:	b2d2      	uxtb	r2, r2
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f006 ff10 	bl	80106a6 <USB_ReadDevInEPInterrupt>
 8009886:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d057      	beq.n	8009942 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	f003 030f 	and.w	r3, r3, #15
 8009898:	2201      	movs	r2, #1
 800989a:	fa02 f303 	lsl.w	r3, r2, r3
 800989e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	43db      	mvns	r3, r3
 80098ac:	69f9      	ldr	r1, [r7, #28]
 80098ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098b2:	4013      	ands	r3, r2
 80098b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c2:	461a      	mov	r2, r3
 80098c4:	2301      	movs	r3, #1
 80098c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d132      	bne.n	8009936 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d4:	4613      	mov	r3, r2
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	334c      	adds	r3, #76	; 0x4c
 80098e0:	6819      	ldr	r1, [r3, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e6:	4613      	mov	r3, r2
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4403      	add	r3, r0
 80098f0:	3348      	adds	r3, #72	; 0x48
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4419      	add	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098fa:	4613      	mov	r3, r2
 80098fc:	00db      	lsls	r3, r3, #3
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4403      	add	r3, r0
 8009904:	334c      	adds	r3, #76	; 0x4c
 8009906:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	d113      	bne.n	8009936 <HAL_PCD_IRQHandler+0x3a2>
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009912:	4613      	mov	r3, r2
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	440b      	add	r3, r1
 800991c:	3354      	adds	r3, #84	; 0x54
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d108      	bne.n	8009936 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6818      	ldr	r0, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800992e:	461a      	mov	r2, r3
 8009930:	2101      	movs	r1, #1
 8009932:	f006 ff17 	bl	8010764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	b2db      	uxtb	r3, r3
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f00d fe44 	bl	80175ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f003 0308 	and.w	r3, r3, #8
 8009948:	2b00      	cmp	r3, #0
 800994a:	d008      	beq.n	800995e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009958:	461a      	mov	r2, r3
 800995a:	2308      	movs	r3, #8
 800995c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f003 0310 	and.w	r3, r3, #16
 8009964:	2b00      	cmp	r3, #0
 8009966:	d008      	beq.n	800997a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009974:	461a      	mov	r2, r3
 8009976:	2310      	movs	r3, #16
 8009978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009980:	2b00      	cmp	r3, #0
 8009982:	d008      	beq.n	8009996 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009990:	461a      	mov	r2, r3
 8009992:	2340      	movs	r3, #64	; 0x40
 8009994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	f003 0302 	and.w	r3, r3, #2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d023      	beq.n	80099e8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80099a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099a2:	6a38      	ldr	r0, [r7, #32]
 80099a4:	f005 fdf8 	bl	800f598 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80099a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099aa:	4613      	mov	r3, r2
 80099ac:	00db      	lsls	r3, r3, #3
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	3338      	adds	r3, #56	; 0x38
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	4413      	add	r3, r2
 80099b8:	3304      	adds	r3, #4
 80099ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	78db      	ldrb	r3, [r3, #3]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d108      	bne.n	80099d6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2200      	movs	r2, #0
 80099c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f00d fe91 	bl	80176f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e2:	461a      	mov	r2, r3
 80099e4:	2302      	movs	r3, #2
 80099e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80099f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fd35 	bl	800a464 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	3301      	adds	r3, #1
 80099fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	085b      	lsrs	r3, r3, #1
 8009a04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f47f af2e 	bne.w	800986a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f006 fde2 	bl	80105dc <USB_ReadInterrupts>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a22:	d122      	bne.n	8009a6a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a32:	f023 0301 	bic.w	r3, r3, #1
 8009a36:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d108      	bne.n	8009a54 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f00e f82b 	bl	8017aa8 <HAL_PCDEx_LPM_Callback>
 8009a52:	e002      	b.n	8009a5a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f00d fe2f 	bl	80176b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	695a      	ldr	r2, [r3, #20]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f006 fdb4 	bl	80105dc <USB_ReadInterrupts>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a7e:	d112      	bne.n	8009aa6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d102      	bne.n	8009a96 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f00d fdeb 	bl	801766c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	695a      	ldr	r2, [r3, #20]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009aa4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f006 fd96 	bl	80105dc <USB_ReadInterrupts>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009aba:	d121      	bne.n	8009b00 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	695a      	ldr	r2, [r3, #20]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009aca:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d111      	bne.n	8009afa <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae4:	089b      	lsrs	r3, r3, #2
 8009ae6:	f003 020f 	and.w	r2, r3, #15
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009af0:	2101      	movs	r1, #1
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f00d ffd8 	bl	8017aa8 <HAL_PCDEx_LPM_Callback>
 8009af8:	e002      	b.n	8009b00 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f00d fdb6 	bl	801766c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f006 fd69 	bl	80105dc <USB_ReadInterrupts>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b14:	f040 80b7 	bne.w	8009c86 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b26:	f023 0301 	bic.w	r3, r3, #1
 8009b2a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2110      	movs	r1, #16
 8009b32:	4618      	mov	r0, r3
 8009b34:	f005 fd30 	bl	800f598 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b3c:	e046      	b.n	8009bcc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b50:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b62:	0151      	lsls	r1, r2, #5
 8009b64:	69fa      	ldr	r2, [r7, #28]
 8009b66:	440a      	add	r2, r1
 8009b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b84:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b96:	0151      	lsls	r1, r2, #5
 8009b98:	69fa      	ldr	r2, [r7, #28]
 8009b9a:	440a      	add	r2, r1
 8009b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ba4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba8:	015a      	lsls	r2, r3, #5
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bb6:	0151      	lsls	r1, r2, #5
 8009bb8:	69fa      	ldr	r2, [r7, #28]
 8009bba:	440a      	add	r2, r1
 8009bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bc4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	3301      	adds	r3, #1
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d3b3      	bcc.n	8009b3e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	69fa      	ldr	r2, [r7, #28]
 8009be0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009be4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009be8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d016      	beq.n	8009c20 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c02:	f043 030b 	orr.w	r3, r3, #11
 8009c06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c18:	f043 030b 	orr.w	r3, r3, #11
 8009c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8009c1e:	e015      	b.n	8009c4c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	69fa      	ldr	r2, [r7, #28]
 8009c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c32:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009c36:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c46:	f043 030b 	orr.w	r3, r3, #11
 8009c4a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	69fa      	ldr	r2, [r7, #28]
 8009c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c5e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6818      	ldr	r0, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c70:	461a      	mov	r2, r3
 8009c72:	f006 fd77 	bl	8010764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	695a      	ldr	r2, [r3, #20]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f006 fca6 	bl	80105dc <USB_ReadInterrupts>
 8009c90:	4603      	mov	r3, r0
 8009c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c9a:	d124      	bne.n	8009ce6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f006 fd3c 	bl	801071e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f005 fcf1 	bl	800f692 <USB_GetDevSpeed>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681c      	ldr	r4, [r3, #0]
 8009cbc:	f000 ff40 	bl	800ab40 <HAL_RCC_GetHCLKFreq>
 8009cc0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f005 f9f6 	bl	800f0bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f00d fca2 	bl	801761a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	695a      	ldr	r2, [r3, #20]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f006 fc76 	bl	80105dc <USB_ReadInterrupts>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b08      	cmp	r3, #8
 8009cf8:	d10a      	bne.n	8009d10 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f00d fc7f 	bl	80175fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	695a      	ldr	r2, [r3, #20]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f002 0208 	and.w	r2, r2, #8
 8009d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f006 fc61 	bl	80105dc <USB_ReadInterrupts>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d20:	2b80      	cmp	r3, #128	; 0x80
 8009d22:	d122      	bne.n	8009d6a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d30:	2301      	movs	r3, #1
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
 8009d34:	e014      	b.n	8009d60 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	4413      	add	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	440b      	add	r3, r1
 8009d44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d105      	bne.n	8009d5a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fb27 	bl	800a3a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d3e5      	bcc.n	8009d36 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f006 fc34 	bl	80105dc <USB_ReadInterrupts>
 8009d74:	4603      	mov	r3, r0
 8009d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d7e:	d13b      	bne.n	8009df8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d80:	2301      	movs	r3, #1
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24
 8009d84:	e02b      	b.n	8009dde <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	4413      	add	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	440b      	add	r3, r1
 8009da4:	3340      	adds	r3, #64	; 0x40
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d115      	bne.n	8009dd8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009dac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	da12      	bge.n	8009dd8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009db2:	6879      	ldr	r1, [r7, #4]
 8009db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db6:	4613      	mov	r3, r2
 8009db8:	00db      	lsls	r3, r3, #3
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	333f      	adds	r3, #63	; 0x3f
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fae8 	bl	800a3a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	3301      	adds	r3, #1
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d3ce      	bcc.n	8009d86 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	695a      	ldr	r2, [r3, #20]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f006 fbed 	bl	80105dc <USB_ReadInterrupts>
 8009e02:	4603      	mov	r3, r0
 8009e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e0c:	d155      	bne.n	8009eba <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e0e:	2301      	movs	r3, #1
 8009e10:	627b      	str	r3, [r7, #36]	; 0x24
 8009e12:	e045      	b.n	8009ea0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e24:	6879      	ldr	r1, [r7, #4]
 8009e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e28:	4613      	mov	r3, r2
 8009e2a:	00db      	lsls	r3, r3, #3
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d12e      	bne.n	8009e9a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009e3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	da2b      	bge.n	8009e9a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009e4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d121      	bne.n	8009e9a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009e56:	6879      	ldr	r1, [r7, #4]
 8009e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	00db      	lsls	r3, r3, #3
 8009e5e:	4413      	add	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	440b      	add	r3, r1
 8009e64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009e68:	2201      	movs	r2, #1
 8009e6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	69fa      	ldr	r2, [r7, #28]
 8009e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e96:	6053      	str	r3, [r2, #4]
            break;
 8009e98:	e007      	b.n	8009eaa <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d3b4      	bcc.n	8009e14 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	695a      	ldr	r2, [r3, #20]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f006 fb8c 	bl	80105dc <USB_ReadInterrupts>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ece:	d10a      	bne.n	8009ee6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f00d fc23 	bl	801771c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	695a      	ldr	r2, [r3, #20]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f006 fb76 	bl	80105dc <USB_ReadInterrupts>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	f003 0304 	and.w	r3, r3, #4
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	d115      	bne.n	8009f26 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f00d fc13 	bl	8017738 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	6859      	ldr	r1, [r3, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	e000      	b.n	8009f26 <HAL_PCD_IRQHandler+0x992>
      return;
 8009f24:	bf00      	nop
    }
  }
}
 8009f26:	3734      	adds	r7, #52	; 0x34
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd90      	pop	{r4, r7, pc}

08009f2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d101      	bne.n	8009f46 <HAL_PCD_SetAddress+0x1a>
 8009f42:	2302      	movs	r3, #2
 8009f44:	e013      	b.n	8009f6e <HAL_PCD_SetAddress+0x42>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	78fa      	ldrb	r2, [r7, #3]
 8009f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	78fa      	ldrb	r2, [r7, #3]
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f006 fad4 	bl	801050c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	4608      	mov	r0, r1
 8009f80:	4611      	mov	r1, r2
 8009f82:	461a      	mov	r2, r3
 8009f84:	4603      	mov	r3, r0
 8009f86:	70fb      	strb	r3, [r7, #3]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	803b      	strh	r3, [r7, #0]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	da0f      	bge.n	8009fbc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f9c:	78fb      	ldrb	r3, [r7, #3]
 8009f9e:	f003 020f 	and.w	r2, r3, #15
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	00db      	lsls	r3, r3, #3
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	3338      	adds	r3, #56	; 0x38
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	4413      	add	r3, r2
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	705a      	strb	r2, [r3, #1]
 8009fba:	e00f      	b.n	8009fdc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fbc:	78fb      	ldrb	r3, [r7, #3]
 8009fbe:	f003 020f 	and.w	r2, r3, #15
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	00db      	lsls	r3, r3, #3
 8009fc6:	4413      	add	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	f003 030f 	and.w	r3, r3, #15
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009fe8:	883a      	ldrh	r2, [r7, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	78ba      	ldrb	r2, [r7, #2]
 8009ff2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	785b      	ldrb	r3, [r3, #1]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	b29a      	uxth	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a006:	78bb      	ldrb	r3, [r7, #2]
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d102      	bne.n	800a012 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d101      	bne.n	800a020 <HAL_PCD_EP_Open+0xaa>
 800a01c:	2302      	movs	r3, #2
 800a01e:	e00e      	b.n	800a03e <HAL_PCD_EP_Open+0xc8>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68f9      	ldr	r1, [r7, #12]
 800a02e:	4618      	mov	r0, r3
 800a030:	f005 fb54 	bl	800f6dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a03c:	7afb      	ldrb	r3, [r7, #11]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
 800a04e:	460b      	mov	r3, r1
 800a050:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a056:	2b00      	cmp	r3, #0
 800a058:	da0f      	bge.n	800a07a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a05a:	78fb      	ldrb	r3, [r7, #3]
 800a05c:	f003 020f 	and.w	r2, r3, #15
 800a060:	4613      	mov	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	3338      	adds	r3, #56	; 0x38
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	4413      	add	r3, r2
 800a06e:	3304      	adds	r3, #4
 800a070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2201      	movs	r2, #1
 800a076:	705a      	strb	r2, [r3, #1]
 800a078:	e00f      	b.n	800a09a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	f003 020f 	and.w	r2, r3, #15
 800a080:	4613      	mov	r3, r2
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	4413      	add	r3, r2
 800a090:	3304      	adds	r3, #4
 800a092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	f003 030f 	and.w	r3, r3, #15
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d101      	bne.n	800a0b4 <HAL_PCD_EP_Close+0x6e>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e00e      	b.n	800a0d2 <HAL_PCD_EP_Close+0x8c>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68f9      	ldr	r1, [r7, #12]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f005 fb92 	bl	800f7ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b086      	sub	sp, #24
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0ea:	7afb      	ldrb	r3, [r7, #11]
 800a0ec:	f003 020f 	and.w	r2, r3, #15
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	4413      	add	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	3304      	adds	r3, #4
 800a102:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2200      	movs	r2, #0
 800a114:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2200      	movs	r2, #0
 800a11a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a11c:	7afb      	ldrb	r3, [r7, #11]
 800a11e:	f003 030f 	and.w	r3, r3, #15
 800a122:	b2da      	uxtb	r2, r3
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d102      	bne.n	800a136 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a136:	7afb      	ldrb	r3, [r7, #11]
 800a138:	f003 030f 	and.w	r3, r3, #15
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d109      	bne.n	800a154 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6818      	ldr	r0, [r3, #0]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	6979      	ldr	r1, [r7, #20]
 800a14e:	f005 fe71 	bl	800fe34 <USB_EP0StartXfer>
 800a152:	e008      	b.n	800a166 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6818      	ldr	r0, [r3, #0]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	461a      	mov	r2, r3
 800a160:	6979      	ldr	r1, [r7, #20]
 800a162:	f005 fc1f 	bl	800f9a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a17c:	78fb      	ldrb	r3, [r7, #3]
 800a17e:	f003 020f 	and.w	r2, r3, #15
 800a182:	6879      	ldr	r1, [r7, #4]
 800a184:	4613      	mov	r3, r2
 800a186:	00db      	lsls	r3, r3, #3
 800a188:	4413      	add	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	440b      	add	r3, r1
 800a18e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a192:	681b      	ldr	r3, [r3, #0]
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	607a      	str	r2, [r7, #4]
 800a1aa:	603b      	str	r3, [r7, #0]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	f003 020f 	and.w	r2, r3, #15
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	3338      	adds	r3, #56	; 0x38
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1e0:	7afb      	ldrb	r3, [r7, #11]
 800a1e2:	f003 030f 	and.w	r3, r3, #15
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d102      	bne.n	800a1fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a1fa:	7afb      	ldrb	r3, [r7, #11]
 800a1fc:	f003 030f 	and.w	r3, r3, #15
 800a200:	2b00      	cmp	r3, #0
 800a202:	d109      	bne.n	800a218 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6818      	ldr	r0, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	461a      	mov	r2, r3
 800a210:	6979      	ldr	r1, [r7, #20]
 800a212:	f005 fe0f 	bl	800fe34 <USB_EP0StartXfer>
 800a216:	e008      	b.n	800a22a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	461a      	mov	r2, r3
 800a224:	6979      	ldr	r1, [r7, #20]
 800a226:	f005 fbbd 	bl	800f9a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3718      	adds	r7, #24
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	460b      	mov	r3, r1
 800a23e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a240:	78fb      	ldrb	r3, [r7, #3]
 800a242:	f003 020f 	and.w	r2, r3, #15
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d901      	bls.n	800a252 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e050      	b.n	800a2f4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a256:	2b00      	cmp	r3, #0
 800a258:	da0f      	bge.n	800a27a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a25a:	78fb      	ldrb	r3, [r7, #3]
 800a25c:	f003 020f 	and.w	r2, r3, #15
 800a260:	4613      	mov	r3, r2
 800a262:	00db      	lsls	r3, r3, #3
 800a264:	4413      	add	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	3338      	adds	r3, #56	; 0x38
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	4413      	add	r3, r2
 800a26e:	3304      	adds	r3, #4
 800a270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2201      	movs	r2, #1
 800a276:	705a      	strb	r2, [r3, #1]
 800a278:	e00d      	b.n	800a296 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a27a:	78fa      	ldrb	r2, [r7, #3]
 800a27c:	4613      	mov	r3, r2
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	4413      	add	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	4413      	add	r3, r2
 800a28c:	3304      	adds	r3, #4
 800a28e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2201      	movs	r2, #1
 800a29a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a29c:	78fb      	ldrb	r3, [r7, #3]
 800a29e:	f003 030f 	and.w	r3, r3, #15
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_PCD_EP_SetStall+0x82>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e01e      	b.n	800a2f4 <HAL_PCD_EP_SetStall+0xc0>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f006 f84d 	bl	8010364 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	f003 030f 	and.w	r3, r3, #15
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10a      	bne.n	800a2ea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	b2d9      	uxtb	r1, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	f006 fa3d 	bl	8010764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	f003 020f 	and.w	r2, r3, #15
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	429a      	cmp	r2, r3
 800a314:	d901      	bls.n	800a31a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e042      	b.n	800a3a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a31a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	da0f      	bge.n	800a342 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a322:	78fb      	ldrb	r3, [r7, #3]
 800a324:	f003 020f 	and.w	r2, r3, #15
 800a328:	4613      	mov	r3, r2
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	3338      	adds	r3, #56	; 0x38
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	4413      	add	r3, r2
 800a336:	3304      	adds	r3, #4
 800a338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2201      	movs	r2, #1
 800a33e:	705a      	strb	r2, [r3, #1]
 800a340:	e00f      	b.n	800a362 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	f003 020f 	and.w	r2, r3, #15
 800a348:	4613      	mov	r3, r2
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	4413      	add	r3, r2
 800a358:	3304      	adds	r3, #4
 800a35a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a368:	78fb      	ldrb	r3, [r7, #3]
 800a36a:	f003 030f 	and.w	r3, r3, #15
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d101      	bne.n	800a382 <HAL_PCD_EP_ClrStall+0x86>
 800a37e:	2302      	movs	r3, #2
 800a380:	e00e      	b.n	800a3a0 <HAL_PCD_EP_ClrStall+0xa4>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68f9      	ldr	r1, [r7, #12]
 800a390:	4618      	mov	r0, r3
 800a392:	f006 f855 	bl	8010440 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a3b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	da0c      	bge.n	800a3d6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3bc:	78fb      	ldrb	r3, [r7, #3]
 800a3be:	f003 020f 	and.w	r2, r3, #15
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	3338      	adds	r3, #56	; 0x38
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	e00c      	b.n	800a3f0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3d6:	78fb      	ldrb	r3, [r7, #3]
 800a3d8:	f003 020f 	and.w	r2, r3, #15
 800a3dc:	4613      	mov	r3, r2
 800a3de:	00db      	lsls	r3, r3, #3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68f9      	ldr	r1, [r7, #12]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f005 fe74 	bl	80100e4 <USB_EPStopXfer>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a400:	7afb      	ldrb	r3, [r7, #11]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d101      	bne.n	800a424 <HAL_PCD_EP_Flush+0x1a>
 800a420:	2302      	movs	r3, #2
 800a422:	e01b      	b.n	800a45c <HAL_PCD_EP_Flush+0x52>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800a42c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a430:	2b00      	cmp	r3, #0
 800a432:	da09      	bge.n	800a448 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	78fb      	ldrb	r3, [r7, #3]
 800a43a:	f003 030f 	and.w	r3, r3, #15
 800a43e:	4619      	mov	r1, r3
 800a440:	4610      	mov	r0, r2
 800a442:	f005 f8a9 	bl	800f598 <USB_FlushTxFifo>
 800a446:	e004      	b.n	800a452 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f005 f8d7 	bl	800f600 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08a      	sub	sp, #40	; 0x28
 800a468:	af02      	add	r7, sp, #8
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	4613      	mov	r3, r2
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	3338      	adds	r3, #56	; 0x38
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	4413      	add	r3, r2
 800a488:	3304      	adds	r3, #4
 800a48a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6a1a      	ldr	r2, [r3, #32]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	429a      	cmp	r2, r3
 800a496:	d901      	bls.n	800a49c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e06c      	b.n	800a576 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	699a      	ldr	r2, [r3, #24]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	69fa      	ldr	r2, [r7, #28]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d902      	bls.n	800a4b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	3303      	adds	r3, #3
 800a4bc:	089b      	lsrs	r3, r3, #2
 800a4be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a4c0:	e02b      	b.n	800a51a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	699a      	ldr	r2, [r3, #24]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	69fa      	ldr	r2, [r7, #28]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d902      	bls.n	800a4de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	3303      	adds	r3, #3
 800a4e2:	089b      	lsrs	r3, r3, #2
 800a4e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6919      	ldr	r1, [r3, #16]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	6978      	ldr	r0, [r7, #20]
 800a4fe:	f005 fe9b 	bl	8010238 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	691a      	ldr	r2, [r3, #16]
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	441a      	add	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6a1a      	ldr	r2, [r3, #32]
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	441a      	add	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d809      	bhi.n	800a544 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6a1a      	ldr	r2, [r3, #32]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a538:	429a      	cmp	r2, r3
 800a53a:	d203      	bcs.n	800a544 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1be      	bne.n	800a4c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	699a      	ldr	r2, [r3, #24]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6a1b      	ldr	r3, [r3, #32]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d811      	bhi.n	800a574 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	f003 030f 	and.w	r3, r3, #15
 800a556:	2201      	movs	r2, #1
 800a558:	fa02 f303 	lsl.w	r3, r2, r3
 800a55c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	43db      	mvns	r3, r3
 800a56a:	6939      	ldr	r1, [r7, #16]
 800a56c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a570:	4013      	ands	r3, r2
 800a572:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3720      	adds	r7, #32
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	333c      	adds	r3, #60	; 0x3c
 800a598:	3304      	adds	r3, #4
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d17b      	bne.n	800a6ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f003 0308 	and.w	r3, r3, #8
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d015      	beq.n	800a5ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	4a61      	ldr	r2, [pc, #388]	; (800a748 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	f240 80b9 	bls.w	800a73c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 80b3 	beq.w	800a73c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5e8:	6093      	str	r3, [r2, #8]
 800a5ea:	e0a7      	b.n	800a73c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f003 0320 	and.w	r3, r3, #32
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d009      	beq.n	800a60a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	015a      	lsls	r2, r3, #5
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a602:	461a      	mov	r2, r3
 800a604:	2320      	movs	r3, #32
 800a606:	6093      	str	r3, [r2, #8]
 800a608:	e098      	b.n	800a73c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a610:	2b00      	cmp	r3, #0
 800a612:	f040 8093 	bne.w	800a73c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	4a4b      	ldr	r2, [pc, #300]	; (800a748 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d90f      	bls.n	800a63e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00a      	beq.n	800a63e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	015a      	lsls	r2, r3, #5
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	4413      	add	r3, r2
 800a630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a634:	461a      	mov	r2, r3
 800a636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a63a:	6093      	str	r3, [r2, #8]
 800a63c:	e07e      	b.n	800a73c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	4613      	mov	r3, r2
 800a642:	00db      	lsls	r3, r3, #3
 800a644:	4413      	add	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	4413      	add	r3, r2
 800a650:	3304      	adds	r3, #4
 800a652:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	69da      	ldr	r2, [r3, #28]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	0159      	lsls	r1, r3, #5
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	440b      	add	r3, r1
 800a660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a66a:	1ad2      	subs	r2, r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d114      	bne.n	800a6a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d109      	bne.n	800a692 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6818      	ldr	r0, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a688:	461a      	mov	r2, r3
 800a68a:	2101      	movs	r1, #1
 800a68c:	f006 f86a 	bl	8010764 <USB_EP0_OutStart>
 800a690:	e006      	b.n	800a6a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	691a      	ldr	r2, [r3, #16]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	441a      	add	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f00c ff74 	bl	8017594 <HAL_PCD_DataOutStageCallback>
 800a6ac:	e046      	b.n	800a73c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	4a26      	ldr	r2, [pc, #152]	; (800a74c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d124      	bne.n	800a700 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00a      	beq.n	800a6d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	015a      	lsls	r2, r3, #5
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6d2:	6093      	str	r3, [r2, #8]
 800a6d4:	e032      	b.n	800a73c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f003 0320 	and.w	r3, r3, #32
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d008      	beq.n	800a6f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	2320      	movs	r3, #32
 800a6f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f00c ff4b 	bl	8017594 <HAL_PCD_DataOutStageCallback>
 800a6fe:	e01d      	b.n	800a73c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d114      	bne.n	800a730 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	4613      	mov	r3, r2
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	4413      	add	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	440b      	add	r3, r1
 800a714:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d108      	bne.n	800a730 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6818      	ldr	r0, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a728:	461a      	mov	r2, r3
 800a72a:	2100      	movs	r1, #0
 800a72c:	f006 f81a 	bl	8010764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	b2db      	uxtb	r3, r3
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f00c ff2c 	bl	8017594 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3720      	adds	r7, #32
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	4f54300a 	.word	0x4f54300a
 800a74c:	4f54310a 	.word	0x4f54310a

0800a750 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	333c      	adds	r3, #60	; 0x3c
 800a768:	3304      	adds	r3, #4
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	4a15      	ldr	r2, [pc, #84]	; (800a7d8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d90e      	bls.n	800a7a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d009      	beq.n	800a7a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79c:	461a      	mov	r2, r3
 800a79e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f00c fee3 	bl	8017570 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4a0a      	ldr	r2, [pc, #40]	; (800a7d8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d90c      	bls.n	800a7cc <PCD_EP_OutSetupPacket_int+0x7c>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d108      	bne.n	800a7cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	f005 ffcc 	bl	8010764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	4f54300a 	.word	0x4f54300a

0800a7dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	70fb      	strb	r3, [r7, #3]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d107      	bne.n	800a80a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a7fa:	883b      	ldrh	r3, [r7, #0]
 800a7fc:	0419      	lsls	r1, r3, #16
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	430a      	orrs	r2, r1
 800a806:	629a      	str	r2, [r3, #40]	; 0x28
 800a808:	e028      	b.n	800a85c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a810:	0c1b      	lsrs	r3, r3, #16
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	4413      	add	r3, r2
 800a816:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a818:	2300      	movs	r3, #0
 800a81a:	73fb      	strb	r3, [r7, #15]
 800a81c:	e00d      	b.n	800a83a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	3340      	adds	r3, #64	; 0x40
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	0c1b      	lsrs	r3, r3, #16
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	4413      	add	r3, r2
 800a832:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	3301      	adds	r3, #1
 800a838:	73fb      	strb	r3, [r7, #15]
 800a83a:	7bfa      	ldrb	r2, [r7, #15]
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	3b01      	subs	r3, #1
 800a840:	429a      	cmp	r2, r3
 800a842:	d3ec      	bcc.n	800a81e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a844:	883b      	ldrh	r3, [r7, #0]
 800a846:	0418      	lsls	r0, r3, #16
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6819      	ldr	r1, [r3, #0]
 800a84c:	78fb      	ldrb	r3, [r7, #3]
 800a84e:	3b01      	subs	r3, #1
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	4302      	orrs	r2, r0
 800a854:	3340      	adds	r3, #64	; 0x40
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	440b      	add	r3, r1
 800a85a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	887a      	ldrh	r2, [r7, #2]
 800a87c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8be:	f043 0303 	orr.w	r3, r3, #3
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a8de:	2300      	movs	r3, #0
 800a8e0:	603b      	str	r3, [r7, #0]
 800a8e2:	4b20      	ldr	r3, [pc, #128]	; (800a964 <HAL_PWREx_EnableOverDrive+0x90>)
 800a8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e6:	4a1f      	ldr	r2, [pc, #124]	; (800a964 <HAL_PWREx_EnableOverDrive+0x90>)
 800a8e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8ec:	6413      	str	r3, [r2, #64]	; 0x40
 800a8ee:	4b1d      	ldr	r3, [pc, #116]	; (800a964 <HAL_PWREx_EnableOverDrive+0x90>)
 800a8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8f6:	603b      	str	r3, [r7, #0]
 800a8f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a8fa:	4b1b      	ldr	r3, [pc, #108]	; (800a968 <HAL_PWREx_EnableOverDrive+0x94>)
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a900:	f7fb feee 	bl	80066e0 <HAL_GetTick>
 800a904:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a906:	e009      	b.n	800a91c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a908:	f7fb feea 	bl	80066e0 <HAL_GetTick>
 800a90c:	4602      	mov	r2, r0
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a916:	d901      	bls.n	800a91c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a918:	2303      	movs	r3, #3
 800a91a:	e01f      	b.n	800a95c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a91c:	4b13      	ldr	r3, [pc, #76]	; (800a96c <HAL_PWREx_EnableOverDrive+0x98>)
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a928:	d1ee      	bne.n	800a908 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a92a:	4b11      	ldr	r3, [pc, #68]	; (800a970 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a92c:	2201      	movs	r2, #1
 800a92e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a930:	f7fb fed6 	bl	80066e0 <HAL_GetTick>
 800a934:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a936:	e009      	b.n	800a94c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a938:	f7fb fed2 	bl	80066e0 <HAL_GetTick>
 800a93c:	4602      	mov	r2, r0
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a946:	d901      	bls.n	800a94c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a948:	2303      	movs	r3, #3
 800a94a:	e007      	b.n	800a95c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a94c:	4b07      	ldr	r3, [pc, #28]	; (800a96c <HAL_PWREx_EnableOverDrive+0x98>)
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a958:	d1ee      	bne.n	800a938 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	40023800 	.word	0x40023800
 800a968:	420e0040 	.word	0x420e0040
 800a96c:	40007000 	.word	0x40007000
 800a970:	420e0044 	.word	0x420e0044

0800a974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e0cc      	b.n	800ab22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a988:	4b68      	ldr	r3, [pc, #416]	; (800ab2c <HAL_RCC_ClockConfig+0x1b8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 030f 	and.w	r3, r3, #15
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	429a      	cmp	r2, r3
 800a994:	d90c      	bls.n	800a9b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a996:	4b65      	ldr	r3, [pc, #404]	; (800ab2c <HAL_RCC_ClockConfig+0x1b8>)
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	b2d2      	uxtb	r2, r2
 800a99c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a99e:	4b63      	ldr	r3, [pc, #396]	; (800ab2c <HAL_RCC_ClockConfig+0x1b8>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 030f 	and.w	r3, r3, #15
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d001      	beq.n	800a9b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e0b8      	b.n	800ab22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d020      	beq.n	800a9fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0304 	and.w	r3, r3, #4
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d005      	beq.n	800a9d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a9c8:	4b59      	ldr	r3, [pc, #356]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	4a58      	ldr	r2, [pc, #352]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800a9ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a9d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 0308 	and.w	r3, r3, #8
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d005      	beq.n	800a9ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a9e0:	4b53      	ldr	r3, [pc, #332]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	4a52      	ldr	r2, [pc, #328]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800a9e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a9ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9ec:	4b50      	ldr	r3, [pc, #320]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	494d      	ldr	r1, [pc, #308]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d044      	beq.n	800aa94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d107      	bne.n	800aa22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa12:	4b47      	ldr	r3, [pc, #284]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d119      	bne.n	800aa52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e07f      	b.n	800ab22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d003      	beq.n	800aa32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d107      	bne.n	800aa42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa32:	4b3f      	ldr	r3, [pc, #252]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d109      	bne.n	800aa52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e06f      	b.n	800ab22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa42:	4b3b      	ldr	r3, [pc, #236]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e067      	b.n	800ab22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa52:	4b37      	ldr	r3, [pc, #220]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	f023 0203 	bic.w	r2, r3, #3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	4934      	ldr	r1, [pc, #208]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800aa60:	4313      	orrs	r3, r2
 800aa62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aa64:	f7fb fe3c 	bl	80066e0 <HAL_GetTick>
 800aa68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa6a:	e00a      	b.n	800aa82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa6c:	f7fb fe38 	bl	80066e0 <HAL_GetTick>
 800aa70:	4602      	mov	r2, r0
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	1ad3      	subs	r3, r2, r3
 800aa76:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d901      	bls.n	800aa82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e04f      	b.n	800ab22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa82:	4b2b      	ldr	r3, [pc, #172]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f003 020c 	and.w	r2, r3, #12
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d1eb      	bne.n	800aa6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aa94:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <HAL_RCC_ClockConfig+0x1b8>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 030f 	and.w	r3, r3, #15
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d20c      	bcs.n	800aabc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaa2:	4b22      	ldr	r3, [pc, #136]	; (800ab2c <HAL_RCC_ClockConfig+0x1b8>)
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	b2d2      	uxtb	r2, r2
 800aaa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aaaa:	4b20      	ldr	r3, [pc, #128]	; (800ab2c <HAL_RCC_ClockConfig+0x1b8>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 030f 	and.w	r3, r3, #15
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d001      	beq.n	800aabc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e032      	b.n	800ab22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d008      	beq.n	800aada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aac8:	4b19      	ldr	r3, [pc, #100]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	4916      	ldr	r1, [pc, #88]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800aad6:	4313      	orrs	r3, r2
 800aad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 0308 	and.w	r3, r3, #8
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d009      	beq.n	800aafa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aae6:	4b12      	ldr	r3, [pc, #72]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	490e      	ldr	r1, [pc, #56]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aafa:	f000 fb6b 	bl	800b1d4 <HAL_RCC_GetSysClockFreq>
 800aafe:	4602      	mov	r2, r0
 800ab00:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <HAL_RCC_ClockConfig+0x1bc>)
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	091b      	lsrs	r3, r3, #4
 800ab06:	f003 030f 	and.w	r3, r3, #15
 800ab0a:	490a      	ldr	r1, [pc, #40]	; (800ab34 <HAL_RCC_ClockConfig+0x1c0>)
 800ab0c:	5ccb      	ldrb	r3, [r1, r3]
 800ab0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab12:	4a09      	ldr	r2, [pc, #36]	; (800ab38 <HAL_RCC_ClockConfig+0x1c4>)
 800ab14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ab16:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <HAL_RCC_ClockConfig+0x1c8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fb fd9c 	bl	8006658 <HAL_InitTick>

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	40023c00 	.word	0x40023c00
 800ab30:	40023800 	.word	0x40023800
 800ab34:	080185d4 	.word	0x080185d4
 800ab38:	20000000 	.word	0x20000000
 800ab3c:	20000004 	.word	0x20000004

0800ab40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab40:	b480      	push	{r7}
 800ab42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab44:	4b03      	ldr	r3, [pc, #12]	; (800ab54 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab46:	681b      	ldr	r3, [r3, #0]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	20000000 	.word	0x20000000

0800ab58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ab5c:	f7ff fff0 	bl	800ab40 <HAL_RCC_GetHCLKFreq>
 800ab60:	4602      	mov	r2, r0
 800ab62:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	0a9b      	lsrs	r3, r3, #10
 800ab68:	f003 0307 	and.w	r3, r3, #7
 800ab6c:	4903      	ldr	r1, [pc, #12]	; (800ab7c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab6e:	5ccb      	ldrb	r3, [r1, r3]
 800ab70:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	40023800 	.word	0x40023800
 800ab7c:	080185e4 	.word	0x080185e4

0800ab80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b08c      	sub	sp, #48	; 0x30
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800aba4:	2300      	movs	r3, #0
 800aba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800aba8:	2300      	movs	r3, #0
 800abaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d010      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800abb8:	4b6f      	ldr	r3, [pc, #444]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800abba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abbe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc6:	496c      	ldr	r1, [pc, #432]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800abc8:	4313      	orrs	r3, r2
 800abca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d101      	bne.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800abd6:	2301      	movs	r3, #1
 800abd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 0302 	and.w	r3, r3, #2
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d010      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800abe6:	4b64      	ldr	r3, [pc, #400]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800abe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf4:	4960      	ldr	r1, [pc, #384]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800ac04:	2301      	movs	r3, #1
 800ac06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d017      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac14:	4b58      	ldr	r3, [pc, #352]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac22:	4955      	ldr	r1, [pc, #340]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac24:	4313      	orrs	r3, r2
 800ac26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac32:	d101      	bne.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800ac34:	2301      	movs	r3, #1
 800ac36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800ac40:	2301      	movs	r3, #1
 800ac42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0308 	and.w	r3, r3, #8
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d017      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ac50:	4b49      	ldr	r3, [pc, #292]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5e:	4946      	ldr	r1, [pc, #280]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac60:	4313      	orrs	r3, r2
 800ac62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac6e:	d101      	bne.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800ac70:	2301      	movs	r3, #1
 800ac72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0320 	and.w	r3, r3, #32
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f000 808a 	beq.w	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60bb      	str	r3, [r7, #8]
 800ac92:	4b39      	ldr	r3, [pc, #228]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	4a38      	ldr	r2, [pc, #224]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ac98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac9c:	6413      	str	r3, [r2, #64]	; 0x40
 800ac9e:	4b36      	ldr	r3, [pc, #216]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800aca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aca6:	60bb      	str	r3, [r7, #8]
 800aca8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800acaa:	4b34      	ldr	r3, [pc, #208]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a33      	ldr	r2, [pc, #204]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800acb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800acb6:	f7fb fd13 	bl	80066e0 <HAL_GetTick>
 800acba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800acbc:	e008      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800acbe:	f7fb fd0f 	bl	80066e0 <HAL_GetTick>
 800acc2:	4602      	mov	r2, r0
 800acc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d901      	bls.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e278      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800acd0:	4b2a      	ldr	r3, [pc, #168]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0f0      	beq.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800acdc:	4b26      	ldr	r3, [pc, #152]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800acde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ace4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d02f      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acf4:	6a3a      	ldr	r2, [r7, #32]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d028      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acfa:	4b1f      	ldr	r3, [pc, #124]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800acfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad02:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ad04:	4b1e      	ldr	r3, [pc, #120]	; (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800ad06:	2201      	movs	r2, #1
 800ad08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ad0a:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ad10:	4a19      	ldr	r2, [pc, #100]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ad16:	4b18      	ldr	r3, [pc, #96]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ad18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d114      	bne.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ad22:	f7fb fcdd 	bl	80066e0 <HAL_GetTick>
 800ad26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad28:	e00a      	b.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad2a:	f7fb fcd9 	bl	80066e0 <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d901      	bls.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e240      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad40:	4b0d      	ldr	r3, [pc, #52]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ad42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d0ee      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad58:	d114      	bne.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800ad5a:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ad6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad6e:	4902      	ldr	r1, [pc, #8]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ad70:	4313      	orrs	r3, r2
 800ad72:	608b      	str	r3, [r1, #8]
 800ad74:	e00c      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800ad76:	bf00      	nop
 800ad78:	40023800 	.word	0x40023800
 800ad7c:	40007000 	.word	0x40007000
 800ad80:	42470e40 	.word	0x42470e40
 800ad84:	4b4a      	ldr	r3, [pc, #296]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	4a49      	ldr	r2, [pc, #292]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ad8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ad8e:	6093      	str	r3, [r2, #8]
 800ad90:	4b47      	ldr	r3, [pc, #284]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ad92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad9c:	4944      	ldr	r1, [pc, #272]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 0310 	and.w	r3, r3, #16
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d004      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800adb4:	4b3f      	ldr	r3, [pc, #252]	; (800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800adb6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00a      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800adc4:	4b3a      	ldr	r3, [pc, #232]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800adc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800adca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add2:	4937      	ldr	r1, [pc, #220]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800add4:	4313      	orrs	r3, r2
 800add6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ade6:	4b32      	ldr	r3, [pc, #200]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ade8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800adec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adf4:	492e      	ldr	r1, [pc, #184]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800adf6:	4313      	orrs	r3, r2
 800adf8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d011      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ae08:	4b29      	ldr	r3, [pc, #164]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ae0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae0e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae16:	4926      	ldr	r1, [pc, #152]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae26:	d101      	bne.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00a      	beq.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800ae38:	4b1d      	ldr	r3, [pc, #116]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ae3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae46:	491a      	ldr	r1, [pc, #104]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d011      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800ae5a:	4b15      	ldr	r3, [pc, #84]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ae5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae68:	4911      	ldr	r1, [pc, #68]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae78:	d101      	bne.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d005      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae8c:	f040 80ff 	bne.w	800b08e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ae90:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ae96:	f7fb fc23 	bl	80066e0 <HAL_GetTick>
 800ae9a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ae9c:	e00e      	b.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ae9e:	f7fb fc1f 	bl	80066e0 <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d907      	bls.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e188      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800aeb0:	40023800 	.word	0x40023800
 800aeb4:	424711e0 	.word	0x424711e0
 800aeb8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aebc:	4b7e      	ldr	r3, [pc, #504]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1ea      	bne.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d003      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d009      	beq.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d028      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d124      	bne.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800aef0:	4b71      	ldr	r3, [pc, #452]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aef6:	0c1b      	lsrs	r3, r3, #16
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	3301      	adds	r3, #1
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800af02:	4b6d      	ldr	r3, [pc, #436]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800af04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af08:	0e1b      	lsrs	r3, r3, #24
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	019b      	lsls	r3, r3, #6
 800af1a:	431a      	orrs	r2, r3
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	085b      	lsrs	r3, r3, #1
 800af20:	3b01      	subs	r3, #1
 800af22:	041b      	lsls	r3, r3, #16
 800af24:	431a      	orrs	r2, r3
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	061b      	lsls	r3, r3, #24
 800af2a:	431a      	orrs	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	071b      	lsls	r3, r3, #28
 800af32:	4961      	ldr	r1, [pc, #388]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800af34:	4313      	orrs	r3, r2
 800af36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0304 	and.w	r3, r3, #4
 800af42:	2b00      	cmp	r3, #0
 800af44:	d004      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af4e:	d00a      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d035      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af64:	d130      	bne.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800af66:	4b54      	ldr	r3, [pc, #336]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800af68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af6c:	0c1b      	lsrs	r3, r3, #16
 800af6e:	f003 0303 	and.w	r3, r3, #3
 800af72:	3301      	adds	r3, #1
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af78:	4b4f      	ldr	r3, [pc, #316]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800af7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af7e:	0f1b      	lsrs	r3, r3, #28
 800af80:	f003 0307 	and.w	r3, r3, #7
 800af84:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685a      	ldr	r2, [r3, #4]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	019b      	lsls	r3, r3, #6
 800af90:	431a      	orrs	r2, r3
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	085b      	lsrs	r3, r3, #1
 800af96:	3b01      	subs	r3, #1
 800af98:	041b      	lsls	r3, r3, #16
 800af9a:	431a      	orrs	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	061b      	lsls	r3, r3, #24
 800afa2:	431a      	orrs	r2, r3
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	071b      	lsls	r3, r3, #28
 800afa8:	4943      	ldr	r1, [pc, #268]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800afb0:	4b41      	ldr	r3, [pc, #260]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800afb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afb6:	f023 021f 	bic.w	r2, r3, #31
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	3b01      	subs	r3, #1
 800afc0:	493d      	ldr	r1, [pc, #244]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d029      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afdc:	d124      	bne.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800afde:	4b36      	ldr	r3, [pc, #216]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800afe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afe4:	0c1b      	lsrs	r3, r3, #16
 800afe6:	f003 0303 	and.w	r3, r3, #3
 800afea:	3301      	adds	r3, #1
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aff0:	4b31      	ldr	r3, [pc, #196]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aff6:	0f1b      	lsrs	r3, r3, #28
 800aff8:	f003 0307 	and.w	r3, r3, #7
 800affc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	019b      	lsls	r3, r3, #6
 800b008:	431a      	orrs	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	085b      	lsrs	r3, r3, #1
 800b010:	3b01      	subs	r3, #1
 800b012:	041b      	lsls	r3, r3, #16
 800b014:	431a      	orrs	r2, r3
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	061b      	lsls	r3, r3, #24
 800b01a:	431a      	orrs	r2, r3
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	071b      	lsls	r3, r3, #28
 800b020:	4925      	ldr	r1, [pc, #148]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b022:	4313      	orrs	r3, r2
 800b024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b030:	2b00      	cmp	r3, #0
 800b032:	d016      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685a      	ldr	r2, [r3, #4]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	019b      	lsls	r3, r3, #6
 800b03e:	431a      	orrs	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	085b      	lsrs	r3, r3, #1
 800b046:	3b01      	subs	r3, #1
 800b048:	041b      	lsls	r3, r3, #16
 800b04a:	431a      	orrs	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	061b      	lsls	r3, r3, #24
 800b052:	431a      	orrs	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	071b      	lsls	r3, r3, #28
 800b05a:	4917      	ldr	r1, [pc, #92]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b05c:	4313      	orrs	r3, r2
 800b05e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b062:	4b16      	ldr	r3, [pc, #88]	; (800b0bc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800b064:	2201      	movs	r2, #1
 800b066:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b068:	f7fb fb3a 	bl	80066e0 <HAL_GetTick>
 800b06c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b06e:	e008      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b070:	f7fb fb36 	bl	80066e0 <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d901      	bls.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e09f      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b082:	4b0d      	ldr	r3, [pc, #52]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0f0      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800b08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b090:	2b01      	cmp	r3, #1
 800b092:	f040 8095 	bne.w	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b096:	4b0a      	ldr	r3, [pc, #40]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b09c:	f7fb fb20 	bl	80066e0 <HAL_GetTick>
 800b0a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b0a2:	e00f      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b0a4:	f7fb fb1c 	bl	80066e0 <HAL_GetTick>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	d908      	bls.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	e085      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b0b6:	bf00      	nop
 800b0b8:	40023800 	.word	0x40023800
 800b0bc:	42470068 	.word	0x42470068
 800b0c0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b0c4:	4b41      	ldr	r3, [pc, #260]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0d0:	d0e8      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f003 0304 	and.w	r3, r3, #4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d009      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d02b      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d127      	bne.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b0fa:	4b34      	ldr	r3, [pc, #208]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b100:	0c1b      	lsrs	r3, r3, #16
 800b102:	f003 0303 	and.w	r3, r3, #3
 800b106:	3301      	adds	r3, #1
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	699a      	ldr	r2, [r3, #24]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	69db      	ldr	r3, [r3, #28]
 800b114:	019b      	lsls	r3, r3, #6
 800b116:	431a      	orrs	r2, r3
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	085b      	lsrs	r3, r3, #1
 800b11c:	3b01      	subs	r3, #1
 800b11e:	041b      	lsls	r3, r3, #16
 800b120:	431a      	orrs	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b126:	061b      	lsls	r3, r3, #24
 800b128:	4928      	ldr	r1, [pc, #160]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b130:	4b26      	ldr	r3, [pc, #152]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b136:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13e:	3b01      	subs	r3, #1
 800b140:	021b      	lsls	r3, r3, #8
 800b142:	4922      	ldr	r1, [pc, #136]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b144:	4313      	orrs	r3, r2
 800b146:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b152:	2b00      	cmp	r3, #0
 800b154:	d01d      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b15e:	d118      	bne.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b160:	4b1a      	ldr	r3, [pc, #104]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b166:	0e1b      	lsrs	r3, r3, #24
 800b168:	f003 030f 	and.w	r3, r3, #15
 800b16c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	699a      	ldr	r2, [r3, #24]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	69db      	ldr	r3, [r3, #28]
 800b176:	019b      	lsls	r3, r3, #6
 800b178:	431a      	orrs	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	085b      	lsrs	r3, r3, #1
 800b180:	3b01      	subs	r3, #1
 800b182:	041b      	lsls	r3, r3, #16
 800b184:	431a      	orrs	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	061b      	lsls	r3, r3, #24
 800b18a:	4910      	ldr	r1, [pc, #64]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b18c:	4313      	orrs	r3, r2
 800b18e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b192:	4b0f      	ldr	r3, [pc, #60]	; (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800b194:	2201      	movs	r2, #1
 800b196:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b198:	f7fb faa2 	bl	80066e0 <HAL_GetTick>
 800b19c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b19e:	e008      	b.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b1a0:	f7fb fa9e 	bl	80066e0 <HAL_GetTick>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	d901      	bls.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	e007      	b.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b1b2:	4b06      	ldr	r3, [pc, #24]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1be:	d1ef      	bne.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3730      	adds	r7, #48	; 0x30
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	40023800 	.word	0x40023800
 800b1d0:	42470070 	.word	0x42470070

0800b1d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1d8:	b0ae      	sub	sp, #184	; 0xb8
 800b1da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1fa:	4bcb      	ldr	r3, [pc, #812]	; (800b528 <HAL_RCC_GetSysClockFreq+0x354>)
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f003 030c 	and.w	r3, r3, #12
 800b202:	2b0c      	cmp	r3, #12
 800b204:	f200 8206 	bhi.w	800b614 <HAL_RCC_GetSysClockFreq+0x440>
 800b208:	a201      	add	r2, pc, #4	; (adr r2, 800b210 <HAL_RCC_GetSysClockFreq+0x3c>)
 800b20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20e:	bf00      	nop
 800b210:	0800b245 	.word	0x0800b245
 800b214:	0800b615 	.word	0x0800b615
 800b218:	0800b615 	.word	0x0800b615
 800b21c:	0800b615 	.word	0x0800b615
 800b220:	0800b24d 	.word	0x0800b24d
 800b224:	0800b615 	.word	0x0800b615
 800b228:	0800b615 	.word	0x0800b615
 800b22c:	0800b615 	.word	0x0800b615
 800b230:	0800b255 	.word	0x0800b255
 800b234:	0800b615 	.word	0x0800b615
 800b238:	0800b615 	.word	0x0800b615
 800b23c:	0800b615 	.word	0x0800b615
 800b240:	0800b445 	.word	0x0800b445
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b244:	4bb9      	ldr	r3, [pc, #740]	; (800b52c <HAL_RCC_GetSysClockFreq+0x358>)
 800b246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800b24a:	e1e7      	b.n	800b61c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b24c:	4bb8      	ldr	r3, [pc, #736]	; (800b530 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b24e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800b252:	e1e3      	b.n	800b61c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b254:	4bb4      	ldr	r3, [pc, #720]	; (800b528 <HAL_RCC_GetSysClockFreq+0x354>)
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b25c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b260:	4bb1      	ldr	r3, [pc, #708]	; (800b528 <HAL_RCC_GetSysClockFreq+0x354>)
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d071      	beq.n	800b350 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b26c:	4bae      	ldr	r3, [pc, #696]	; (800b528 <HAL_RCC_GetSysClockFreq+0x354>)
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	099b      	lsrs	r3, r3, #6
 800b272:	2200      	movs	r2, #0
 800b274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b278:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800b27c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b288:	2300      	movs	r3, #0
 800b28a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b28e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b292:	4622      	mov	r2, r4
 800b294:	462b      	mov	r3, r5
 800b296:	f04f 0000 	mov.w	r0, #0
 800b29a:	f04f 0100 	mov.w	r1, #0
 800b29e:	0159      	lsls	r1, r3, #5
 800b2a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b2a4:	0150      	lsls	r0, r2, #5
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	1a51      	subs	r1, r2, r1
 800b2ae:	6439      	str	r1, [r7, #64]	; 0x40
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	eb63 0301 	sbc.w	r3, r3, r1
 800b2b6:	647b      	str	r3, [r7, #68]	; 0x44
 800b2b8:	f04f 0200 	mov.w	r2, #0
 800b2bc:	f04f 0300 	mov.w	r3, #0
 800b2c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	018b      	lsls	r3, r1, #6
 800b2c8:	4641      	mov	r1, r8
 800b2ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b2ce:	4641      	mov	r1, r8
 800b2d0:	018a      	lsls	r2, r1, #6
 800b2d2:	4641      	mov	r1, r8
 800b2d4:	1a51      	subs	r1, r2, r1
 800b2d6:	63b9      	str	r1, [r7, #56]	; 0x38
 800b2d8:	4649      	mov	r1, r9
 800b2da:	eb63 0301 	sbc.w	r3, r3, r1
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e0:	f04f 0200 	mov.w	r2, #0
 800b2e4:	f04f 0300 	mov.w	r3, #0
 800b2e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	00cb      	lsls	r3, r1, #3
 800b2f0:	4641      	mov	r1, r8
 800b2f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2f6:	4641      	mov	r1, r8
 800b2f8:	00ca      	lsls	r2, r1, #3
 800b2fa:	4610      	mov	r0, r2
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4603      	mov	r3, r0
 800b300:	4622      	mov	r2, r4
 800b302:	189b      	adds	r3, r3, r2
 800b304:	633b      	str	r3, [r7, #48]	; 0x30
 800b306:	462b      	mov	r3, r5
 800b308:	460a      	mov	r2, r1
 800b30a:	eb42 0303 	adc.w	r3, r2, r3
 800b30e:	637b      	str	r3, [r7, #52]	; 0x34
 800b310:	f04f 0200 	mov.w	r2, #0
 800b314:	f04f 0300 	mov.w	r3, #0
 800b318:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b31c:	4629      	mov	r1, r5
 800b31e:	024b      	lsls	r3, r1, #9
 800b320:	4621      	mov	r1, r4
 800b322:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b326:	4621      	mov	r1, r4
 800b328:	024a      	lsls	r2, r1, #9
 800b32a:	4610      	mov	r0, r2
 800b32c:	4619      	mov	r1, r3
 800b32e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b332:	2200      	movs	r2, #0
 800b334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b338:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b33c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b340:	f7f4 ffb6 	bl	80002b0 <__aeabi_uldivmod>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4613      	mov	r3, r2
 800b34a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b34e:	e067      	b.n	800b420 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b350:	4b75      	ldr	r3, [pc, #468]	; (800b528 <HAL_RCC_GetSysClockFreq+0x354>)
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	099b      	lsrs	r3, r3, #6
 800b356:	2200      	movs	r2, #0
 800b358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b35c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800b360:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b368:	67bb      	str	r3, [r7, #120]	; 0x78
 800b36a:	2300      	movs	r3, #0
 800b36c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b36e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800b372:	4622      	mov	r2, r4
 800b374:	462b      	mov	r3, r5
 800b376:	f04f 0000 	mov.w	r0, #0
 800b37a:	f04f 0100 	mov.w	r1, #0
 800b37e:	0159      	lsls	r1, r3, #5
 800b380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b384:	0150      	lsls	r0, r2, #5
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	4621      	mov	r1, r4
 800b38c:	1a51      	subs	r1, r2, r1
 800b38e:	62b9      	str	r1, [r7, #40]	; 0x28
 800b390:	4629      	mov	r1, r5
 800b392:	eb63 0301 	sbc.w	r3, r3, r1
 800b396:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b398:	f04f 0200 	mov.w	r2, #0
 800b39c:	f04f 0300 	mov.w	r3, #0
 800b3a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	018b      	lsls	r3, r1, #6
 800b3a8:	4641      	mov	r1, r8
 800b3aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b3ae:	4641      	mov	r1, r8
 800b3b0:	018a      	lsls	r2, r1, #6
 800b3b2:	4641      	mov	r1, r8
 800b3b4:	ebb2 0a01 	subs.w	sl, r2, r1
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	eb63 0b01 	sbc.w	fp, r3, r1
 800b3be:	f04f 0200 	mov.w	r2, #0
 800b3c2:	f04f 0300 	mov.w	r3, #0
 800b3c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b3ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b3ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3d2:	4692      	mov	sl, r2
 800b3d4:	469b      	mov	fp, r3
 800b3d6:	4623      	mov	r3, r4
 800b3d8:	eb1a 0303 	adds.w	r3, sl, r3
 800b3dc:	623b      	str	r3, [r7, #32]
 800b3de:	462b      	mov	r3, r5
 800b3e0:	eb4b 0303 	adc.w	r3, fp, r3
 800b3e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e6:	f04f 0200 	mov.w	r2, #0
 800b3ea:	f04f 0300 	mov.w	r3, #0
 800b3ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	028b      	lsls	r3, r1, #10
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	028a      	lsls	r2, r1, #10
 800b400:	4610      	mov	r0, r2
 800b402:	4619      	mov	r1, r3
 800b404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b408:	2200      	movs	r2, #0
 800b40a:	673b      	str	r3, [r7, #112]	; 0x70
 800b40c:	677a      	str	r2, [r7, #116]	; 0x74
 800b40e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800b412:	f7f4 ff4d 	bl	80002b0 <__aeabi_uldivmod>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	4613      	mov	r3, r2
 800b41c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b420:	4b41      	ldr	r3, [pc, #260]	; (800b528 <HAL_RCC_GetSysClockFreq+0x354>)
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	0c1b      	lsrs	r3, r3, #16
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	3301      	adds	r3, #1
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800b432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b43e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800b442:	e0eb      	b.n	800b61c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b444:	4b38      	ldr	r3, [pc, #224]	; (800b528 <HAL_RCC_GetSysClockFreq+0x354>)
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b44c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b450:	4b35      	ldr	r3, [pc, #212]	; (800b528 <HAL_RCC_GetSysClockFreq+0x354>)
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d06b      	beq.n	800b534 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b45c:	4b32      	ldr	r3, [pc, #200]	; (800b528 <HAL_RCC_GetSysClockFreq+0x354>)
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	099b      	lsrs	r3, r3, #6
 800b462:	2200      	movs	r2, #0
 800b464:	66bb      	str	r3, [r7, #104]	; 0x68
 800b466:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b46a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b46e:	663b      	str	r3, [r7, #96]	; 0x60
 800b470:	2300      	movs	r3, #0
 800b472:	667b      	str	r3, [r7, #100]	; 0x64
 800b474:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800b478:	4622      	mov	r2, r4
 800b47a:	462b      	mov	r3, r5
 800b47c:	f04f 0000 	mov.w	r0, #0
 800b480:	f04f 0100 	mov.w	r1, #0
 800b484:	0159      	lsls	r1, r3, #5
 800b486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b48a:	0150      	lsls	r0, r2, #5
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4621      	mov	r1, r4
 800b492:	1a51      	subs	r1, r2, r1
 800b494:	61b9      	str	r1, [r7, #24]
 800b496:	4629      	mov	r1, r5
 800b498:	eb63 0301 	sbc.w	r3, r3, r1
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	f04f 0200 	mov.w	r2, #0
 800b4a2:	f04f 0300 	mov.w	r3, #0
 800b4a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800b4aa:	4659      	mov	r1, fp
 800b4ac:	018b      	lsls	r3, r1, #6
 800b4ae:	4651      	mov	r1, sl
 800b4b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b4b4:	4651      	mov	r1, sl
 800b4b6:	018a      	lsls	r2, r1, #6
 800b4b8:	4651      	mov	r1, sl
 800b4ba:	ebb2 0801 	subs.w	r8, r2, r1
 800b4be:	4659      	mov	r1, fp
 800b4c0:	eb63 0901 	sbc.w	r9, r3, r1
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	f04f 0300 	mov.w	r3, #0
 800b4cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b4d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b4d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b4d8:	4690      	mov	r8, r2
 800b4da:	4699      	mov	r9, r3
 800b4dc:	4623      	mov	r3, r4
 800b4de:	eb18 0303 	adds.w	r3, r8, r3
 800b4e2:	613b      	str	r3, [r7, #16]
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	eb49 0303 	adc.w	r3, r9, r3
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	f04f 0200 	mov.w	r2, #0
 800b4f0:	f04f 0300 	mov.w	r3, #0
 800b4f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	024b      	lsls	r3, r1, #9
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b502:	4621      	mov	r1, r4
 800b504:	024a      	lsls	r2, r1, #9
 800b506:	4610      	mov	r0, r2
 800b508:	4619      	mov	r1, r3
 800b50a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b50e:	2200      	movs	r2, #0
 800b510:	65bb      	str	r3, [r7, #88]	; 0x58
 800b512:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b514:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b518:	f7f4 feca 	bl	80002b0 <__aeabi_uldivmod>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	4613      	mov	r3, r2
 800b522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b526:	e065      	b.n	800b5f4 <HAL_RCC_GetSysClockFreq+0x420>
 800b528:	40023800 	.word	0x40023800
 800b52c:	00f42400 	.word	0x00f42400
 800b530:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b534:	4b3d      	ldr	r3, [pc, #244]	; (800b62c <HAL_RCC_GetSysClockFreq+0x458>)
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	099b      	lsrs	r3, r3, #6
 800b53a:	2200      	movs	r2, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	4611      	mov	r1, r2
 800b540:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b544:	653b      	str	r3, [r7, #80]	; 0x50
 800b546:	2300      	movs	r3, #0
 800b548:	657b      	str	r3, [r7, #84]	; 0x54
 800b54a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800b54e:	4642      	mov	r2, r8
 800b550:	464b      	mov	r3, r9
 800b552:	f04f 0000 	mov.w	r0, #0
 800b556:	f04f 0100 	mov.w	r1, #0
 800b55a:	0159      	lsls	r1, r3, #5
 800b55c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b560:	0150      	lsls	r0, r2, #5
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	4641      	mov	r1, r8
 800b568:	1a51      	subs	r1, r2, r1
 800b56a:	60b9      	str	r1, [r7, #8]
 800b56c:	4649      	mov	r1, r9
 800b56e:	eb63 0301 	sbc.w	r3, r3, r1
 800b572:	60fb      	str	r3, [r7, #12]
 800b574:	f04f 0200 	mov.w	r2, #0
 800b578:	f04f 0300 	mov.w	r3, #0
 800b57c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800b580:	4659      	mov	r1, fp
 800b582:	018b      	lsls	r3, r1, #6
 800b584:	4651      	mov	r1, sl
 800b586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b58a:	4651      	mov	r1, sl
 800b58c:	018a      	lsls	r2, r1, #6
 800b58e:	4651      	mov	r1, sl
 800b590:	1a54      	subs	r4, r2, r1
 800b592:	4659      	mov	r1, fp
 800b594:	eb63 0501 	sbc.w	r5, r3, r1
 800b598:	f04f 0200 	mov.w	r2, #0
 800b59c:	f04f 0300 	mov.w	r3, #0
 800b5a0:	00eb      	lsls	r3, r5, #3
 800b5a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b5a6:	00e2      	lsls	r2, r4, #3
 800b5a8:	4614      	mov	r4, r2
 800b5aa:	461d      	mov	r5, r3
 800b5ac:	4643      	mov	r3, r8
 800b5ae:	18e3      	adds	r3, r4, r3
 800b5b0:	603b      	str	r3, [r7, #0]
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	eb45 0303 	adc.w	r3, r5, r3
 800b5b8:	607b      	str	r3, [r7, #4]
 800b5ba:	f04f 0200 	mov.w	r2, #0
 800b5be:	f04f 0300 	mov.w	r3, #0
 800b5c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	028b      	lsls	r3, r1, #10
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	028a      	lsls	r2, r1, #10
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5dc:	2200      	movs	r2, #0
 800b5de:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b5e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b5e6:	f7f4 fe63 	bl	80002b0 <__aeabi_uldivmod>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b5f4:	4b0d      	ldr	r3, [pc, #52]	; (800b62c <HAL_RCC_GetSysClockFreq+0x458>)
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	0f1b      	lsrs	r3, r3, #28
 800b5fa:	f003 0307 	and.w	r3, r3, #7
 800b5fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800b602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b60a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b60e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800b612:	e003      	b.n	800b61c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b614:	4b06      	ldr	r3, [pc, #24]	; (800b630 <HAL_RCC_GetSysClockFreq+0x45c>)
 800b616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800b61a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b61c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800b620:	4618      	mov	r0, r3
 800b622:	37b8      	adds	r7, #184	; 0xb8
 800b624:	46bd      	mov	sp, r7
 800b626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b62a:	bf00      	nop
 800b62c:	40023800 	.word	0x40023800
 800b630:	00f42400 	.word	0x00f42400

0800b634 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	e28d      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 8083 	beq.w	800b75a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b654:	4b94      	ldr	r3, [pc, #592]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	f003 030c 	and.w	r3, r3, #12
 800b65c:	2b04      	cmp	r3, #4
 800b65e:	d019      	beq.n	800b694 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b660:	4b91      	ldr	r3, [pc, #580]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b668:	2b08      	cmp	r3, #8
 800b66a:	d106      	bne.n	800b67a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b66c:	4b8e      	ldr	r3, [pc, #568]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b678:	d00c      	beq.n	800b694 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b67a:	4b8b      	ldr	r3, [pc, #556]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b682:	2b0c      	cmp	r3, #12
 800b684:	d112      	bne.n	800b6ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b686:	4b88      	ldr	r3, [pc, #544]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b68e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b692:	d10b      	bne.n	800b6ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b694:	4b84      	ldr	r3, [pc, #528]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d05b      	beq.n	800b758 <HAL_RCC_OscConfig+0x124>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d157      	bne.n	800b758 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e25a      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b4:	d106      	bne.n	800b6c4 <HAL_RCC_OscConfig+0x90>
 800b6b6:	4b7c      	ldr	r3, [pc, #496]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a7b      	ldr	r2, [pc, #492]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b6bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6c0:	6013      	str	r3, [r2, #0]
 800b6c2:	e01d      	b.n	800b700 <HAL_RCC_OscConfig+0xcc>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b6cc:	d10c      	bne.n	800b6e8 <HAL_RCC_OscConfig+0xb4>
 800b6ce:	4b76      	ldr	r3, [pc, #472]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a75      	ldr	r2, [pc, #468]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b6d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	4b73      	ldr	r3, [pc, #460]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a72      	ldr	r2, [pc, #456]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b6e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6e4:	6013      	str	r3, [r2, #0]
 800b6e6:	e00b      	b.n	800b700 <HAL_RCC_OscConfig+0xcc>
 800b6e8:	4b6f      	ldr	r3, [pc, #444]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a6e      	ldr	r2, [pc, #440]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b6ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	4b6c      	ldr	r3, [pc, #432]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a6b      	ldr	r2, [pc, #428]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b6fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d013      	beq.n	800b730 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b708:	f7fa ffea 	bl	80066e0 <HAL_GetTick>
 800b70c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b70e:	e008      	b.n	800b722 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b710:	f7fa ffe6 	bl	80066e0 <HAL_GetTick>
 800b714:	4602      	mov	r2, r0
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	2b64      	cmp	r3, #100	; 0x64
 800b71c:	d901      	bls.n	800b722 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e21f      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b722:	4b61      	ldr	r3, [pc, #388]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d0f0      	beq.n	800b710 <HAL_RCC_OscConfig+0xdc>
 800b72e:	e014      	b.n	800b75a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b730:	f7fa ffd6 	bl	80066e0 <HAL_GetTick>
 800b734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b736:	e008      	b.n	800b74a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b738:	f7fa ffd2 	bl	80066e0 <HAL_GetTick>
 800b73c:	4602      	mov	r2, r0
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	2b64      	cmp	r3, #100	; 0x64
 800b744:	d901      	bls.n	800b74a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b746:	2303      	movs	r3, #3
 800b748:	e20b      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b74a:	4b57      	ldr	r3, [pc, #348]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1f0      	bne.n	800b738 <HAL_RCC_OscConfig+0x104>
 800b756:	e000      	b.n	800b75a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0302 	and.w	r3, r3, #2
 800b762:	2b00      	cmp	r3, #0
 800b764:	d06f      	beq.n	800b846 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b766:	4b50      	ldr	r3, [pc, #320]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f003 030c 	and.w	r3, r3, #12
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d017      	beq.n	800b7a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b772:	4b4d      	ldr	r3, [pc, #308]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b77a:	2b08      	cmp	r3, #8
 800b77c:	d105      	bne.n	800b78a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b77e:	4b4a      	ldr	r3, [pc, #296]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00b      	beq.n	800b7a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b78a:	4b47      	ldr	r3, [pc, #284]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b792:	2b0c      	cmp	r3, #12
 800b794:	d11c      	bne.n	800b7d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b796:	4b44      	ldr	r3, [pc, #272]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d116      	bne.n	800b7d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7a2:	4b41      	ldr	r3, [pc, #260]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0302 	and.w	r3, r3, #2
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d005      	beq.n	800b7ba <HAL_RCC_OscConfig+0x186>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d001      	beq.n	800b7ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e1d3      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7ba:	4b3b      	ldr	r3, [pc, #236]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	4937      	ldr	r1, [pc, #220]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7ce:	e03a      	b.n	800b846 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d020      	beq.n	800b81a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b7d8:	4b34      	ldr	r3, [pc, #208]	; (800b8ac <HAL_RCC_OscConfig+0x278>)
 800b7da:	2201      	movs	r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7de:	f7fa ff7f 	bl	80066e0 <HAL_GetTick>
 800b7e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7e4:	e008      	b.n	800b7f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b7e6:	f7fa ff7b 	bl	80066e0 <HAL_GetTick>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	2b02      	cmp	r3, #2
 800b7f2:	d901      	bls.n	800b7f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e1b4      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7f8:	4b2b      	ldr	r3, [pc, #172]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 0302 	and.w	r3, r3, #2
 800b800:	2b00      	cmp	r3, #0
 800b802:	d0f0      	beq.n	800b7e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b804:	4b28      	ldr	r3, [pc, #160]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	00db      	lsls	r3, r3, #3
 800b812:	4925      	ldr	r1, [pc, #148]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b814:	4313      	orrs	r3, r2
 800b816:	600b      	str	r3, [r1, #0]
 800b818:	e015      	b.n	800b846 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b81a:	4b24      	ldr	r3, [pc, #144]	; (800b8ac <HAL_RCC_OscConfig+0x278>)
 800b81c:	2200      	movs	r2, #0
 800b81e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b820:	f7fa ff5e 	bl	80066e0 <HAL_GetTick>
 800b824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b826:	e008      	b.n	800b83a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b828:	f7fa ff5a 	bl	80066e0 <HAL_GetTick>
 800b82c:	4602      	mov	r2, r0
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	2b02      	cmp	r3, #2
 800b834:	d901      	bls.n	800b83a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b836:	2303      	movs	r3, #3
 800b838:	e193      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b83a:	4b1b      	ldr	r3, [pc, #108]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 0302 	and.w	r3, r3, #2
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1f0      	bne.n	800b828 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0308 	and.w	r3, r3, #8
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d036      	beq.n	800b8c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d016      	beq.n	800b888 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b85a:	4b15      	ldr	r3, [pc, #84]	; (800b8b0 <HAL_RCC_OscConfig+0x27c>)
 800b85c:	2201      	movs	r2, #1
 800b85e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b860:	f7fa ff3e 	bl	80066e0 <HAL_GetTick>
 800b864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b866:	e008      	b.n	800b87a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b868:	f7fa ff3a 	bl	80066e0 <HAL_GetTick>
 800b86c:	4602      	mov	r2, r0
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	2b02      	cmp	r3, #2
 800b874:	d901      	bls.n	800b87a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	e173      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b87a:	4b0b      	ldr	r3, [pc, #44]	; (800b8a8 <HAL_RCC_OscConfig+0x274>)
 800b87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b87e:	f003 0302 	and.w	r3, r3, #2
 800b882:	2b00      	cmp	r3, #0
 800b884:	d0f0      	beq.n	800b868 <HAL_RCC_OscConfig+0x234>
 800b886:	e01b      	b.n	800b8c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b888:	4b09      	ldr	r3, [pc, #36]	; (800b8b0 <HAL_RCC_OscConfig+0x27c>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b88e:	f7fa ff27 	bl	80066e0 <HAL_GetTick>
 800b892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b894:	e00e      	b.n	800b8b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b896:	f7fa ff23 	bl	80066e0 <HAL_GetTick>
 800b89a:	4602      	mov	r2, r0
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d907      	bls.n	800b8b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b8a4:	2303      	movs	r3, #3
 800b8a6:	e15c      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
 800b8a8:	40023800 	.word	0x40023800
 800b8ac:	42470000 	.word	0x42470000
 800b8b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b8b4:	4b8a      	ldr	r3, [pc, #552]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b8b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b8:	f003 0302 	and.w	r3, r3, #2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1ea      	bne.n	800b896 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 0304 	and.w	r3, r3, #4
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 8097 	beq.w	800b9fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b8d2:	4b83      	ldr	r3, [pc, #524]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10f      	bne.n	800b8fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8de:	2300      	movs	r3, #0
 800b8e0:	60bb      	str	r3, [r7, #8]
 800b8e2:	4b7f      	ldr	r3, [pc, #508]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e6:	4a7e      	ldr	r2, [pc, #504]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b8e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8ec:	6413      	str	r3, [r2, #64]	; 0x40
 800b8ee:	4b7c      	ldr	r3, [pc, #496]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8f6:	60bb      	str	r3, [r7, #8]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b8fe:	4b79      	ldr	r3, [pc, #484]	; (800bae4 <HAL_RCC_OscConfig+0x4b0>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b906:	2b00      	cmp	r3, #0
 800b908:	d118      	bne.n	800b93c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b90a:	4b76      	ldr	r3, [pc, #472]	; (800bae4 <HAL_RCC_OscConfig+0x4b0>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a75      	ldr	r2, [pc, #468]	; (800bae4 <HAL_RCC_OscConfig+0x4b0>)
 800b910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b916:	f7fa fee3 	bl	80066e0 <HAL_GetTick>
 800b91a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b91c:	e008      	b.n	800b930 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b91e:	f7fa fedf 	bl	80066e0 <HAL_GetTick>
 800b922:	4602      	mov	r2, r0
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d901      	bls.n	800b930 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b92c:	2303      	movs	r3, #3
 800b92e:	e118      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b930:	4b6c      	ldr	r3, [pc, #432]	; (800bae4 <HAL_RCC_OscConfig+0x4b0>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d0f0      	beq.n	800b91e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d106      	bne.n	800b952 <HAL_RCC_OscConfig+0x31e>
 800b944:	4b66      	ldr	r3, [pc, #408]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b948:	4a65      	ldr	r2, [pc, #404]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b94a:	f043 0301 	orr.w	r3, r3, #1
 800b94e:	6713      	str	r3, [r2, #112]	; 0x70
 800b950:	e01c      	b.n	800b98c <HAL_RCC_OscConfig+0x358>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	2b05      	cmp	r3, #5
 800b958:	d10c      	bne.n	800b974 <HAL_RCC_OscConfig+0x340>
 800b95a:	4b61      	ldr	r3, [pc, #388]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b95e:	4a60      	ldr	r2, [pc, #384]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b960:	f043 0304 	orr.w	r3, r3, #4
 800b964:	6713      	str	r3, [r2, #112]	; 0x70
 800b966:	4b5e      	ldr	r3, [pc, #376]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b96a:	4a5d      	ldr	r2, [pc, #372]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b96c:	f043 0301 	orr.w	r3, r3, #1
 800b970:	6713      	str	r3, [r2, #112]	; 0x70
 800b972:	e00b      	b.n	800b98c <HAL_RCC_OscConfig+0x358>
 800b974:	4b5a      	ldr	r3, [pc, #360]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b978:	4a59      	ldr	r2, [pc, #356]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b97a:	f023 0301 	bic.w	r3, r3, #1
 800b97e:	6713      	str	r3, [r2, #112]	; 0x70
 800b980:	4b57      	ldr	r3, [pc, #348]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b984:	4a56      	ldr	r2, [pc, #344]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b986:	f023 0304 	bic.w	r3, r3, #4
 800b98a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d015      	beq.n	800b9c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b994:	f7fa fea4 	bl	80066e0 <HAL_GetTick>
 800b998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b99a:	e00a      	b.n	800b9b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b99c:	f7fa fea0 	bl	80066e0 <HAL_GetTick>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d901      	bls.n	800b9b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	e0d7      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9b2:	4b4b      	ldr	r3, [pc, #300]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0ee      	beq.n	800b99c <HAL_RCC_OscConfig+0x368>
 800b9be:	e014      	b.n	800b9ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9c0:	f7fa fe8e 	bl	80066e0 <HAL_GetTick>
 800b9c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b9c6:	e00a      	b.n	800b9de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9c8:	f7fa fe8a 	bl	80066e0 <HAL_GetTick>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d901      	bls.n	800b9de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e0c1      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b9de:	4b40      	ldr	r3, [pc, #256]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b9e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e2:	f003 0302 	and.w	r3, r3, #2
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1ee      	bne.n	800b9c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b9ea:	7dfb      	ldrb	r3, [r7, #23]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d105      	bne.n	800b9fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9f0:	4b3b      	ldr	r3, [pc, #236]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f4:	4a3a      	ldr	r2, [pc, #232]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800b9f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	699b      	ldr	r3, [r3, #24]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 80ad 	beq.w	800bb60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ba06:	4b36      	ldr	r3, [pc, #216]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f003 030c 	and.w	r3, r3, #12
 800ba0e:	2b08      	cmp	r3, #8
 800ba10:	d060      	beq.n	800bad4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d145      	bne.n	800baa6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba1a:	4b33      	ldr	r3, [pc, #204]	; (800bae8 <HAL_RCC_OscConfig+0x4b4>)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba20:	f7fa fe5e 	bl	80066e0 <HAL_GetTick>
 800ba24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba26:	e008      	b.n	800ba3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba28:	f7fa fe5a 	bl	80066e0 <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d901      	bls.n	800ba3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e093      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba3a:	4b29      	ldr	r3, [pc, #164]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1f0      	bne.n	800ba28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	69da      	ldr	r2, [r3, #28]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba54:	019b      	lsls	r3, r3, #6
 800ba56:	431a      	orrs	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	041b      	lsls	r3, r3, #16
 800ba62:	431a      	orrs	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	061b      	lsls	r3, r3, #24
 800ba6a:	431a      	orrs	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba70:	071b      	lsls	r3, r3, #28
 800ba72:	491b      	ldr	r1, [pc, #108]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800ba74:	4313      	orrs	r3, r2
 800ba76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ba78:	4b1b      	ldr	r3, [pc, #108]	; (800bae8 <HAL_RCC_OscConfig+0x4b4>)
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba7e:	f7fa fe2f 	bl	80066e0 <HAL_GetTick>
 800ba82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba84:	e008      	b.n	800ba98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba86:	f7fa fe2b 	bl	80066e0 <HAL_GetTick>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d901      	bls.n	800ba98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800ba94:	2303      	movs	r3, #3
 800ba96:	e064      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba98:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d0f0      	beq.n	800ba86 <HAL_RCC_OscConfig+0x452>
 800baa4:	e05c      	b.n	800bb60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800baa6:	4b10      	ldr	r3, [pc, #64]	; (800bae8 <HAL_RCC_OscConfig+0x4b4>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baac:	f7fa fe18 	bl	80066e0 <HAL_GetTick>
 800bab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bab2:	e008      	b.n	800bac6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bab4:	f7fa fe14 	bl	80066e0 <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d901      	bls.n	800bac6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e04d      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bac6:	4b06      	ldr	r3, [pc, #24]	; (800bae0 <HAL_RCC_OscConfig+0x4ac>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1f0      	bne.n	800bab4 <HAL_RCC_OscConfig+0x480>
 800bad2:	e045      	b.n	800bb60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	699b      	ldr	r3, [r3, #24]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d107      	bne.n	800baec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800badc:	2301      	movs	r3, #1
 800bade:	e040      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
 800bae0:	40023800 	.word	0x40023800
 800bae4:	40007000 	.word	0x40007000
 800bae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800baec:	4b1f      	ldr	r3, [pc, #124]	; (800bb6c <HAL_RCC_OscConfig+0x538>)
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d030      	beq.n	800bb5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d129      	bne.n	800bb5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d122      	bne.n	800bb5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bb1c:	4013      	ands	r3, r2
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bb22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d119      	bne.n	800bb5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb32:	085b      	lsrs	r3, r3, #1
 800bb34:	3b01      	subs	r3, #1
 800bb36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d10f      	bne.n	800bb5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d107      	bne.n	800bb5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d001      	beq.n	800bb60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e000      	b.n	800bb62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3718      	adds	r7, #24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	40023800 	.word	0x40023800

0800bb70 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e066      	b.n	800bc54 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	7f5b      	ldrb	r3, [r3, #29]
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d105      	bne.n	800bb9c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7fa fb00 	bl	800619c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2202      	movs	r2, #2
 800bba0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	22ca      	movs	r2, #202	; 0xca
 800bba8:	625a      	str	r2, [r3, #36]	; 0x24
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2253      	movs	r2, #83	; 0x53
 800bbb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fa45 	bl	800c042 <RTC_EnterInitMode>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d12c      	bne.n	800bc1c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	6812      	ldr	r2, [r2, #0]
 800bbcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bbd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbd4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	6899      	ldr	r1, [r3, #8]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	431a      	orrs	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	431a      	orrs	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	68d2      	ldr	r2, [r2, #12]
 800bbfc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	6919      	ldr	r1, [r3, #16]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	041a      	lsls	r2, r3, #16
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 fa4c 	bl	800c0b0 <RTC_ExitInitMode>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d113      	bne.n	800bc4a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bc30:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	699a      	ldr	r2, [r3, #24]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	430a      	orrs	r2, r1
 800bc42:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	22ff      	movs	r2, #255	; 0xff
 800bc50:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	7f1b      	ldrb	r3, [r3, #28]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d101      	bne.n	800bc78 <HAL_RTC_SetTime+0x1c>
 800bc74:	2302      	movs	r3, #2
 800bc76:	e087      	b.n	800bd88 <HAL_RTC_SetTime+0x12c>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2202      	movs	r2, #2
 800bc82:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d126      	bne.n	800bcd8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d102      	bne.n	800bc9e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 fa29 	bl	800c0fa <RTC_ByteToBcd2>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	785b      	ldrb	r3, [r3, #1]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 fa22 	bl	800c0fa <RTC_ByteToBcd2>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bcba:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	789b      	ldrb	r3, [r3, #2]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 fa1a 	bl	800c0fa <RTC_ByteToBcd2>
 800bcc6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bcc8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	78db      	ldrb	r3, [r3, #3]
 800bcd0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	617b      	str	r3, [r7, #20]
 800bcd6:	e018      	b.n	800bd0a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d102      	bne.n	800bcec <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	2200      	movs	r2, #0
 800bcea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bcf8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bcfe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	78db      	ldrb	r3, [r3, #3]
 800bd04:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bd06:	4313      	orrs	r3, r2
 800bd08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	22ca      	movs	r2, #202	; 0xca
 800bd10:	625a      	str	r2, [r3, #36]	; 0x24
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2253      	movs	r2, #83	; 0x53
 800bd18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f000 f991 	bl	800c042 <RTC_EnterInitMode>
 800bd20:	4603      	mov	r3, r0
 800bd22:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bd24:	7cfb      	ldrb	r3, [r7, #19]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d120      	bne.n	800bd6c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bd34:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bd38:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	689a      	ldr	r2, [r3, #8]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bd48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6899      	ldr	r1, [r3, #8]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	68da      	ldr	r2, [r3, #12]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	431a      	orrs	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	430a      	orrs	r2, r1
 800bd60:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f000 f9a4 	bl	800c0b0 <RTC_ExitInitMode>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bd6c:	7cfb      	ldrb	r3, [r7, #19]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d102      	bne.n	800bd78 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2201      	movs	r2, #1
 800bd76:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	22ff      	movs	r2, #255	; 0xff
 800bd7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	771a      	strb	r2, [r3, #28]

  return status;
 800bd86:	7cfb      	ldrb	r3, [r7, #19]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	371c      	adds	r7, #28
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd90      	pop	{r4, r7, pc}

0800bd90 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bdc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bdc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	0c1b      	lsrs	r3, r3, #16
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	0a1b      	lsrs	r3, r3, #8
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	0d9b      	lsrs	r3, r3, #22
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	b2da      	uxtb	r2, r3
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d11a      	bne.n	800be42 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	4618      	mov	r0, r3
 800be12:	f000 f98f 	bl	800c134 <RTC_Bcd2ToByte>
 800be16:	4603      	mov	r3, r0
 800be18:	461a      	mov	r2, r3
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	4618      	mov	r0, r3
 800be24:	f000 f986 	bl	800c134 <RTC_Bcd2ToByte>
 800be28:	4603      	mov	r3, r0
 800be2a:	461a      	mov	r2, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	789b      	ldrb	r3, [r3, #2]
 800be34:	4618      	mov	r0, r3
 800be36:	f000 f97d 	bl	800c134 <RTC_Bcd2ToByte>
 800be3a:	4603      	mov	r3, r0
 800be3c:	461a      	mov	r2, r3
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3718      	adds	r7, #24
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800be4c:	b590      	push	{r4, r7, lr}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800be58:	2300      	movs	r3, #0
 800be5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	7f1b      	ldrb	r3, [r3, #28]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d101      	bne.n	800be68 <HAL_RTC_SetDate+0x1c>
 800be64:	2302      	movs	r3, #2
 800be66:	e071      	b.n	800bf4c <HAL_RTC_SetDate+0x100>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2201      	movs	r2, #1
 800be6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2202      	movs	r2, #2
 800be72:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10e      	bne.n	800be98 <HAL_RTC_SetDate+0x4c>
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	785b      	ldrb	r3, [r3, #1]
 800be7e:	f003 0310 	and.w	r3, r3, #16
 800be82:	2b00      	cmp	r3, #0
 800be84:	d008      	beq.n	800be98 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	785b      	ldrb	r3, [r3, #1]
 800be8a:	f023 0310 	bic.w	r3, r3, #16
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	330a      	adds	r3, #10
 800be92:	b2da      	uxtb	r2, r3
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d11c      	bne.n	800bed8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	78db      	ldrb	r3, [r3, #3]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 f929 	bl	800c0fa <RTC_ByteToBcd2>
 800bea8:	4603      	mov	r3, r0
 800beaa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	785b      	ldrb	r3, [r3, #1]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 f922 	bl	800c0fa <RTC_ByteToBcd2>
 800beb6:	4603      	mov	r3, r0
 800beb8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800beba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	789b      	ldrb	r3, [r3, #2]
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 f91a 	bl	800c0fa <RTC_ByteToBcd2>
 800bec6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bec8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bed2:	4313      	orrs	r3, r2
 800bed4:	617b      	str	r3, [r7, #20]
 800bed6:	e00e      	b.n	800bef6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	78db      	ldrb	r3, [r3, #3]
 800bedc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	785b      	ldrb	r3, [r3, #1]
 800bee2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bee4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800beea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bef2:	4313      	orrs	r3, r2
 800bef4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	22ca      	movs	r2, #202	; 0xca
 800befc:	625a      	str	r2, [r3, #36]	; 0x24
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2253      	movs	r2, #83	; 0x53
 800bf04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 f89b 	bl	800c042 <RTC_EnterInitMode>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bf10:	7cfb      	ldrb	r3, [r7, #19]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10c      	bne.n	800bf30 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bf20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bf24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f000 f8c2 	bl	800c0b0 <RTC_ExitInitMode>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bf30:	7cfb      	ldrb	r3, [r7, #19]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d102      	bne.n	800bf3c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	22ff      	movs	r2, #255	; 0xff
 800bf42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	771a      	strb	r2, [r3, #28]

  return status;
 800bf4a:	7cfb      	ldrb	r3, [r7, #19]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	371c      	adds	r7, #28
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd90      	pop	{r4, r7, pc}

0800bf54 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bf60:	2300      	movs	r3, #0
 800bf62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bf6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bf72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	0c1b      	lsrs	r3, r3, #16
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	0a1b      	lsrs	r3, r3, #8
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	f003 031f 	and.w	r3, r3, #31
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	0b5b      	lsrs	r3, r3, #13
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	f003 0307 	and.w	r3, r3, #7
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d11a      	bne.n	800bfe8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	78db      	ldrb	r3, [r3, #3]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 f8bc 	bl	800c134 <RTC_Bcd2ToByte>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	785b      	ldrb	r3, [r3, #1]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 f8b3 	bl	800c134 <RTC_Bcd2ToByte>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	789b      	ldrb	r3, [r3, #2]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 f8aa 	bl	800c134 <RTC_Bcd2ToByte>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bfe8:	2300      	movs	r3, #0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3718      	adds	r7, #24
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b084      	sub	sp, #16
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bffa:	2300      	movs	r3, #0
 800bffc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68da      	ldr	r2, [r3, #12]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c00c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c00e:	f7fa fb67 	bl	80066e0 <HAL_GetTick>
 800c012:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c014:	e009      	b.n	800c02a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c016:	f7fa fb63 	bl	80066e0 <HAL_GetTick>
 800c01a:	4602      	mov	r2, r0
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c024:	d901      	bls.n	800c02a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c026:	2303      	movs	r3, #3
 800c028:	e007      	b.n	800c03a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	f003 0320 	and.w	r3, r3, #32
 800c034:	2b00      	cmp	r3, #0
 800c036:	d0ee      	beq.n	800c016 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b084      	sub	sp, #16
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d122      	bne.n	800c0a6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68da      	ldr	r2, [r3, #12]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c06e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c070:	f7fa fb36 	bl	80066e0 <HAL_GetTick>
 800c074:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c076:	e00c      	b.n	800c092 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c078:	f7fa fb32 	bl	80066e0 <HAL_GetTick>
 800c07c:	4602      	mov	r2, r0
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c086:	d904      	bls.n	800c092 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2204      	movs	r2, #4
 800c08c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d102      	bne.n	800c0a6 <RTC_EnterInitMode+0x64>
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d1e8      	bne.n	800c078 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68da      	ldr	r2, [r3, #12]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0ca:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f003 0320 	and.w	r3, r3, #32
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10a      	bne.n	800c0f0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff ff89 	bl	800bff2 <HAL_RTC_WaitForSynchro>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d004      	beq.n	800c0f0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2204      	movs	r2, #4
 800c0ea:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c0fa:	b480      	push	{r7}
 800c0fc:	b085      	sub	sp, #20
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	4603      	mov	r3, r0
 800c102:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800c104:	2300      	movs	r3, #0
 800c106:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800c108:	e005      	b.n	800c116 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c10a:	7bfb      	ldrb	r3, [r7, #15]
 800c10c:	3301      	adds	r3, #1
 800c10e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800c110:	79fb      	ldrb	r3, [r7, #7]
 800c112:	3b0a      	subs	r3, #10
 800c114:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c116:	79fb      	ldrb	r3, [r7, #7]
 800c118:	2b09      	cmp	r3, #9
 800c11a:	d8f6      	bhi.n	800c10a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
 800c11e:	011b      	lsls	r3, r3, #4
 800c120:	b2da      	uxtb	r2, r3
 800c122:	79fb      	ldrb	r3, [r7, #7]
 800c124:	4313      	orrs	r3, r2
 800c126:	b2db      	uxtb	r3, r3
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3714      	adds	r7, #20
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	4603      	mov	r3, r0
 800c13c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800c13e:	2300      	movs	r3, #0
 800c140:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c142:	79fb      	ldrb	r3, [r7, #7]
 800c144:	091b      	lsrs	r3, r3, #4
 800c146:	b2db      	uxtb	r3, r3
 800c148:	461a      	mov	r2, r3
 800c14a:	0092      	lsls	r2, r2, #2
 800c14c:	4413      	add	r3, r2
 800c14e:	005b      	lsls	r3, r3, #1
 800c150:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800c152:	79fb      	ldrb	r3, [r7, #7]
 800c154:	f003 030f 	and.w	r3, r3, #15
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	7bfb      	ldrb	r3, [r7, #15]
 800c15c:	4413      	add	r3, r2
 800c15e:	b2db      	uxtb	r3, r3
}
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b087      	sub	sp, #28
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800c178:	2300      	movs	r3, #0
 800c17a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3350      	adds	r3, #80	; 0x50
 800c182:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	697a      	ldr	r2, [r7, #20]
 800c18a:	4413      	add	r3, r2
 800c18c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	601a      	str	r2, [r3, #0]
}
 800c194:	bf00      	nop
 800c196:	371c      	adds	r7, #28
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3350      	adds	r3, #80	; 0x50
 800c1b4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	4413      	add	r3, r2
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e022      	b.n	800c228 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d105      	bne.n	800c1fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7f9 fffb 	bl	80061f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f814 	bl	800c230 <HAL_SD_InitCard>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e00a      	b.n	800c228 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2201      	movs	r2, #1
 800c222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c226:	2300      	movs	r3, #0
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c230:	b5b0      	push	{r4, r5, r7, lr}
 800c232:	b08e      	sub	sp, #56	; 0x38
 800c234:	af04      	add	r7, sp, #16
 800c236:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c238:	2300      	movs	r3, #0
 800c23a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c23c:	2300      	movs	r3, #0
 800c23e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c240:	2300      	movs	r3, #0
 800c242:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c244:	2300      	movs	r3, #0
 800c246:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c248:	2300      	movs	r3, #0
 800c24a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c24c:	2376      	movs	r3, #118	; 0x76
 800c24e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681d      	ldr	r5, [r3, #0]
 800c254:	466c      	mov	r4, sp
 800c256:	f107 0314 	add.w	r3, r7, #20
 800c25a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c25e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c262:	f107 0308 	add.w	r3, r7, #8
 800c266:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c268:	4628      	mov	r0, r5
 800c26a:	f002 f951 	bl	800e510 <SDIO_Init>
 800c26e:	4603      	mov	r3, r0
 800c270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e04f      	b.n	800c320 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c280:	4b29      	ldr	r3, [pc, #164]	; (800c328 <HAL_SD_InitCard+0xf8>)
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f002 f989 	bl	800e5a2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c290:	4b25      	ldr	r3, [pc, #148]	; (800c328 <HAL_SD_InitCard+0xf8>)
 800c292:	2201      	movs	r2, #1
 800c294:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c296:	2002      	movs	r0, #2
 800c298:	f7fa fa2e 	bl	80066f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f001 fb53 	bl	800d948 <SD_PowerON>
 800c2a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00b      	beq.n	800c2c2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2b6:	6a3b      	ldr	r3, [r7, #32]
 800c2b8:	431a      	orrs	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e02e      	b.n	800c320 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f001 fa72 	bl	800d7ac <SD_InitCard>
 800c2c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d00b      	beq.n	800c2e8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e01b      	b.n	800c320 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f002 f9e8 	bl	800e6c6 <SDMMC_CmdBlockLength>
 800c2f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00f      	beq.n	800c31e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a0a      	ldr	r2, [pc, #40]	; (800c32c <HAL_SD_InitCard+0xfc>)
 800c304:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c30a:	6a3b      	ldr	r3, [r7, #32]
 800c30c:	431a      	orrs	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	e000      	b.n	800c320 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3728      	adds	r7, #40	; 0x28
 800c324:	46bd      	mov	sp, r7
 800c326:	bdb0      	pop	{r4, r5, r7, pc}
 800c328:	422580a0 	.word	0x422580a0
 800c32c:	004005ff 	.word	0x004005ff

0800c330 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b092      	sub	sp, #72	; 0x48
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c33e:	f7fa f9cf 	bl	80066e0 <HAL_GetTick>
 800c342:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d107      	bne.n	800c362 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c356:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e1bd      	b.n	800c6de <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	f040 81b0 	bne.w	800c6d0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	441a      	add	r2, r3
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c380:	429a      	cmp	r2, r3
 800c382:	d907      	bls.n	800c394 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c388:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c390:	2301      	movs	r3, #1
 800c392:	e1a4      	b.n	800c6de <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2203      	movs	r2, #3
 800c398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d002      	beq.n	800c3b2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ae:	025b      	lsls	r3, r3, #9
 800c3b0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	025b      	lsls	r3, r3, #9
 800c3bc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c3be:	2390      	movs	r3, #144	; 0x90
 800c3c0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c3c2:	2302      	movs	r3, #2
 800c3c4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f107 0214 	add.w	r2, r7, #20
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f002 f948 	bl	800e66e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d90a      	bls.n	800c3fa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f002 f9ac 	bl	800e74e <SDMMC_CmdReadMultiBlock>
 800c3f6:	6478      	str	r0, [r7, #68]	; 0x44
 800c3f8:	e009      	b.n	800c40e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c406:	4618      	mov	r0, r3
 800c408:	f002 f97f 	bl	800e70a <SDMMC_CmdReadSingleBlock>
 800c40c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c410:	2b00      	cmp	r3, #0
 800c412:	d012      	beq.n	800c43a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a7a      	ldr	r2, [pc, #488]	; (800c604 <HAL_SD_ReadBlocks+0x2d4>)
 800c41a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c422:	431a      	orrs	r2, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e151      	b.n	800c6de <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800c43e:	e061      	b.n	800c504 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d03c      	beq.n	800c4c8 <HAL_SD_ReadBlocks+0x198>
 800c44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c450:	2b00      	cmp	r3, #0
 800c452:	d039      	beq.n	800c4c8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c454:	2300      	movs	r3, #0
 800c456:	643b      	str	r3, [r7, #64]	; 0x40
 800c458:	e033      	b.n	800c4c2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4618      	mov	r0, r3
 800c460:	f002 f881 	bl	800e566 <SDIO_ReadFIFO>
 800c464:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c468:	b2da      	uxtb	r2, r3
 800c46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c470:	3301      	adds	r3, #1
 800c472:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c476:	3b01      	subs	r3, #1
 800c478:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47c:	0a1b      	lsrs	r3, r3, #8
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c482:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c486:	3301      	adds	r3, #1
 800c488:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c48c:	3b01      	subs	r3, #1
 800c48e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c492:	0c1b      	lsrs	r3, r3, #16
 800c494:	b2da      	uxtb	r2, r3
 800c496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c498:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49c:	3301      	adds	r3, #1
 800c49e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	0e1b      	lsrs	r3, r3, #24
 800c4aa:	b2da      	uxtb	r2, r3
 800c4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800c4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4be:	3301      	adds	r3, #1
 800c4c0:	643b      	str	r3, [r7, #64]	; 0x40
 800c4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c4:	2b07      	cmp	r3, #7
 800c4c6:	d9c8      	bls.n	800c45a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c4c8:	f7fa f90a 	bl	80066e0 <HAL_GetTick>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d902      	bls.n	800c4de <HAL_SD_ReadBlocks+0x1ae>
 800c4d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d112      	bne.n	800c504 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a48      	ldr	r2, [pc, #288]	; (800c604 <HAL_SD_ReadBlocks+0x2d4>)
 800c4e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c500:	2303      	movs	r3, #3
 800c502:	e0ec      	b.n	800c6de <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c50a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d096      	beq.n	800c440 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d022      	beq.n	800c566 <HAL_SD_ReadBlocks+0x236>
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d91f      	bls.n	800c566 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	d01b      	beq.n	800c566 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4618      	mov	r0, r3
 800c534:	f002 f972 	bl	800e81c <SDMMC_CmdStopTransfer>
 800c538:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c53a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d012      	beq.n	800c566 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a2f      	ldr	r2, [pc, #188]	; (800c604 <HAL_SD_ReadBlocks+0x2d4>)
 800c546:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c54c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c54e:	431a      	orrs	r2, r3
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	e0bb      	b.n	800c6de <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c56c:	f003 0308 	and.w	r3, r3, #8
 800c570:	2b00      	cmp	r3, #0
 800c572:	d012      	beq.n	800c59a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a22      	ldr	r2, [pc, #136]	; (800c604 <HAL_SD_ReadBlocks+0x2d4>)
 800c57a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c580:	f043 0208 	orr.w	r2, r3, #8
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	e0a1      	b.n	800c6de <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a0:	f003 0302 	and.w	r3, r3, #2
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d012      	beq.n	800c5ce <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a15      	ldr	r2, [pc, #84]	; (800c604 <HAL_SD_ReadBlocks+0x2d4>)
 800c5ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b4:	f043 0202 	orr.w	r2, r3, #2
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e087      	b.n	800c6de <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d4:	f003 0320 	and.w	r3, r3, #32
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d064      	beq.n	800c6a6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a08      	ldr	r2, [pc, #32]	; (800c604 <HAL_SD_ReadBlocks+0x2d4>)
 800c5e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e8:	f043 0220 	orr.w	r2, r3, #32
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c5fe:	2301      	movs	r3, #1
 800c600:	e06d      	b.n	800c6de <HAL_SD_ReadBlocks+0x3ae>
 800c602:	bf00      	nop
 800c604:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f001 ffaa 	bl	800e566 <SDIO_ReadFIFO>
 800c612:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800c614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c616:	b2da      	uxtb	r2, r3
 800c618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61e:	3301      	adds	r3, #1
 800c620:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800c622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c624:	3b01      	subs	r3, #1
 800c626:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62a:	0a1b      	lsrs	r3, r3, #8
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c630:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c634:	3301      	adds	r3, #1
 800c636:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800c638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c63a:	3b01      	subs	r3, #1
 800c63c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	0c1b      	lsrs	r3, r3, #16
 800c642:	b2da      	uxtb	r2, r3
 800c644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c646:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64a:	3301      	adds	r3, #1
 800c64c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800c64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c650:	3b01      	subs	r3, #1
 800c652:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	0e1b      	lsrs	r3, r3, #24
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c660:	3301      	adds	r3, #1
 800c662:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800c664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c666:	3b01      	subs	r3, #1
 800c668:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c66a:	f7fa f839 	bl	80066e0 <HAL_GetTick>
 800c66e:	4602      	mov	r2, r0
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c676:	429a      	cmp	r2, r3
 800c678:	d902      	bls.n	800c680 <HAL_SD_ReadBlocks+0x350>
 800c67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d112      	bne.n	800c6a6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a18      	ldr	r2, [pc, #96]	; (800c6e8 <HAL_SD_ReadBlocks+0x3b8>)
 800c686:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e01b      	b.n	800c6de <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <HAL_SD_ReadBlocks+0x38a>
 800c6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1a6      	bne.n	800c608 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f240 523a 	movw	r2, #1338	; 0x53a
 800c6c2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	e006      	b.n	800c6de <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
  }
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3748      	adds	r7, #72	; 0x48
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	004005ff 	.word	0x004005ff

0800c6ec <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b092      	sub	sp, #72	; 0x48
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
 800c6f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c6fa:	f7f9 fff1 	bl	80066e0 <HAL_GetTick>
 800c6fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d107      	bne.n	800c71e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e165      	b.n	800c9ea <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b01      	cmp	r3, #1
 800c728:	f040 8158 	bne.w	800c9dc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	441a      	add	r2, r3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d907      	bls.n	800c750 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c744:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c74c:	2301      	movs	r3, #1
 800c74e:	e14c      	b.n	800c9ea <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2203      	movs	r2, #3
 800c754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2200      	movs	r2, #0
 800c75e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c764:	2b01      	cmp	r3, #1
 800c766:	d002      	beq.n	800c76e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76a:	025b      	lsls	r3, r3, #9
 800c76c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c76e:	f04f 33ff 	mov.w	r3, #4294967295
 800c772:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	025b      	lsls	r3, r3, #9
 800c778:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c77a:	2390      	movs	r3, #144	; 0x90
 800c77c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c77e:	2300      	movs	r3, #0
 800c780:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c782:	2300      	movs	r3, #0
 800c784:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800c786:	2301      	movs	r3, #1
 800c788:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f107 0218 	add.w	r2, r7, #24
 800c792:	4611      	mov	r1, r2
 800c794:	4618      	mov	r0, r3
 800c796:	f001 ff6a 	bl	800e66e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d90a      	bls.n	800c7b6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2220      	movs	r2, #32
 800c7a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f002 f812 	bl	800e7d6 <SDMMC_CmdWriteMultiBlock>
 800c7b2:	6478      	str	r0, [r7, #68]	; 0x44
 800c7b4:	e009      	b.n	800c7ca <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2210      	movs	r2, #16
 800c7ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f001 ffe5 	bl	800e792 <SDMMC_CmdWriteSingleBlock>
 800c7c8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d012      	beq.n	800c7f6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a87      	ldr	r2, [pc, #540]	; (800c9f4 <HAL_SD_WriteBlocks+0x308>)
 800c7d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7de:	431a      	orrs	r2, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e0f9      	b.n	800c9ea <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800c7fa:	e065      	b.n	800c8c8 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c806:	2b00      	cmp	r3, #0
 800c808:	d040      	beq.n	800c88c <HAL_SD_WriteBlocks+0x1a0>
 800c80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d03d      	beq.n	800c88c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c810:	2300      	movs	r3, #0
 800c812:	643b      	str	r3, [r7, #64]	; 0x40
 800c814:	e037      	b.n	800c886 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800c816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81e:	3301      	adds	r3, #1
 800c820:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c824:	3b01      	subs	r3, #1
 800c826:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	021a      	lsls	r2, r3, #8
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	4313      	orrs	r3, r2
 800c832:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c836:	3301      	adds	r3, #1
 800c838:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c83c:	3b01      	subs	r3, #1
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	041a      	lsls	r2, r3, #16
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	4313      	orrs	r3, r2
 800c84a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	3301      	adds	r3, #1
 800c850:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c854:	3b01      	subs	r3, #1
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	061a      	lsls	r2, r3, #24
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	4313      	orrs	r3, r2
 800c862:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c866:	3301      	adds	r3, #1
 800c868:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86c:	3b01      	subs	r3, #1
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f107 0214 	add.w	r2, r7, #20
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f001 fe80 	bl	800e580 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c882:	3301      	adds	r3, #1
 800c884:	643b      	str	r3, [r7, #64]	; 0x40
 800c886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c888:	2b07      	cmp	r3, #7
 800c88a:	d9c4      	bls.n	800c816 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c88c:	f7f9 ff28 	bl	80066e0 <HAL_GetTick>
 800c890:	4602      	mov	r2, r0
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c898:	429a      	cmp	r2, r3
 800c89a:	d902      	bls.n	800c8a2 <HAL_SD_WriteBlocks+0x1b6>
 800c89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d112      	bne.n	800c8c8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a53      	ldr	r2, [pc, #332]	; (800c9f4 <HAL_SD_WriteBlocks+0x308>)
 800c8a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	e090      	b.n	800c9ea <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ce:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d092      	beq.n	800c7fc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d022      	beq.n	800c92a <HAL_SD_WriteBlocks+0x23e>
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d91f      	bls.n	800c92a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	d01b      	beq.n	800c92a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f001 ff90 	bl	800e81c <SDMMC_CmdStopTransfer>
 800c8fc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c900:	2b00      	cmp	r3, #0
 800c902:	d012      	beq.n	800c92a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a3a      	ldr	r2, [pc, #232]	; (800c9f4 <HAL_SD_WriteBlocks+0x308>)
 800c90a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c912:	431a      	orrs	r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2200      	movs	r2, #0
 800c924:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	e05f      	b.n	800c9ea <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c930:	f003 0308 	and.w	r3, r3, #8
 800c934:	2b00      	cmp	r3, #0
 800c936:	d012      	beq.n	800c95e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a2d      	ldr	r2, [pc, #180]	; (800c9f4 <HAL_SD_WriteBlocks+0x308>)
 800c93e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c944:	f043 0208 	orr.w	r2, r3, #8
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2201      	movs	r2, #1
 800c950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e045      	b.n	800c9ea <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c964:	f003 0302 	and.w	r3, r3, #2
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d012      	beq.n	800c992 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a20      	ldr	r2, [pc, #128]	; (800c9f4 <HAL_SD_WriteBlocks+0x308>)
 800c972:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c978:	f043 0202 	orr.w	r2, r3, #2
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2200      	movs	r2, #0
 800c98c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	e02b      	b.n	800c9ea <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c998:	f003 0310 	and.w	r3, r3, #16
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d012      	beq.n	800c9c6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a13      	ldr	r2, [pc, #76]	; (800c9f4 <HAL_SD_WriteBlocks+0x308>)
 800c9a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ac:	f043 0210 	orr.w	r2, r3, #16
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e011      	b.n	800c9ea <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f240 523a 	movw	r2, #1338	; 0x53a
 800c9ce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	e006      	b.n	800c9ea <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
  }
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3748      	adds	r7, #72	; 0x48
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	004005ff 	.word	0x004005ff

0800c9f8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08c      	sub	sp, #48	; 0x30
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
 800ca04:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d107      	bne.n	800ca20 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e0be      	b.n	800cb9e <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	f040 80b7 	bne.w	800cb9c <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2200      	movs	r2, #0
 800ca32:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	441a      	add	r2, r3
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d907      	bls.n	800ca52 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e0a5      	b.n	800cb9e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2203      	movs	r2, #3
 800ca56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ca70:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca76:	4a4c      	ldr	r2, [pc, #304]	; (800cba8 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800ca78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7e:	4a4b      	ldr	r2, [pc, #300]	; (800cbac <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800ca80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca86:	2200      	movs	r2, #0
 800ca88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8e:	2200      	movs	r2, #0
 800ca90:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa2:	689a      	ldr	r2, [r3, #8]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	430a      	orrs	r2, r1
 800caac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3380      	adds	r3, #128	; 0x80
 800cab8:	4619      	mov	r1, r3
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	025b      	lsls	r3, r3, #9
 800cac0:	089b      	lsrs	r3, r3, #2
 800cac2:	f7fb fadd 	bl	8008080 <HAL_DMA_Start_IT>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d017      	beq.n	800cafc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cada:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a33      	ldr	r2, [pc, #204]	; (800cbb0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800cae2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	e050      	b.n	800cb9e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cafc:	4b2d      	ldr	r3, [pc, #180]	; (800cbb4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800cafe:	2201      	movs	r2, #1
 800cb00:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d002      	beq.n	800cb10 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800cb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0c:	025b      	lsls	r3, r3, #9
 800cb0e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb10:	f04f 33ff 	mov.w	r3, #4294967295
 800cb14:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	025b      	lsls	r3, r3, #9
 800cb1a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cb1c:	2390      	movs	r3, #144	; 0x90
 800cb1e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cb20:	2302      	movs	r3, #2
 800cb22:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f107 0210 	add.w	r2, r7, #16
 800cb34:	4611      	mov	r1, r2
 800cb36:	4618      	mov	r0, r3
 800cb38:	f001 fd99 	bl	800e66e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d90a      	bls.n	800cb58 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2282      	movs	r2, #130	; 0x82
 800cb46:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f001 fdfd 	bl	800e74e <SDMMC_CmdReadMultiBlock>
 800cb54:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb56:	e009      	b.n	800cb6c <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2281      	movs	r2, #129	; 0x81
 800cb5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb64:	4618      	mov	r0, r3
 800cb66:	f001 fdd0 	bl	800e70a <SDMMC_CmdReadSingleBlock>
 800cb6a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d012      	beq.n	800cb98 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a0e      	ldr	r2, [pc, #56]	; (800cbb0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800cb78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb80:	431a      	orrs	r2, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800cb94:	2301      	movs	r3, #1
 800cb96:	e002      	b.n	800cb9e <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	e000      	b.n	800cb9e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800cb9c:	2302      	movs	r3, #2
  }
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3730      	adds	r7, #48	; 0x30
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	0800d5bb 	.word	0x0800d5bb
 800cbac:	0800d62d 	.word	0x0800d62d
 800cbb0:	004005ff 	.word	0x004005ff
 800cbb4:	4225858c 	.word	0x4225858c

0800cbb8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b08c      	sub	sp, #48	; 0x30
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	607a      	str	r2, [r7, #4]
 800cbc4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d107      	bne.n	800cbe0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	e0c1      	b.n	800cd64 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	f040 80ba 	bne.w	800cd62 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cbf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	441a      	add	r2, r3
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d907      	bls.n	800cc12 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e0a8      	b.n	800cd64 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2203      	movs	r2, #3
 800cc16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f042 021a 	orr.w	r2, r2, #26
 800cc30:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc36:	4a4d      	ldr	r2, [pc, #308]	; (800cd6c <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800cc38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3e:	4a4c      	ldr	r2, [pc, #304]	; (800cd70 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800cc40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc46:	2200      	movs	r2, #0
 800cc48:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d002      	beq.n	800cc58 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc54:	025b      	lsls	r3, r3, #9
 800cc56:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d90a      	bls.n	800cc74 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	22a0      	movs	r2, #160	; 0xa0
 800cc62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f001 fdb3 	bl	800e7d6 <SDMMC_CmdWriteMultiBlock>
 800cc70:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cc72:	e009      	b.n	800cc88 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2290      	movs	r2, #144	; 0x90
 800cc78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc80:	4618      	mov	r0, r3
 800cc82:	f001 fd86 	bl	800e792 <SDMMC_CmdWriteSingleBlock>
 800cc86:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d012      	beq.n	800ccb4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a38      	ldr	r2, [pc, #224]	; (800cd74 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800cc94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2200      	movs	r2, #0
 800ccae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e057      	b.n	800cd64 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ccb4:	4b30      	ldr	r3, [pc, #192]	; (800cd78 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccbe:	2240      	movs	r2, #64	; 0x40
 800ccc0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd2:	689a      	ldr	r2, [r3, #8]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cce2:	68b9      	ldr	r1, [r7, #8]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	3380      	adds	r3, #128	; 0x80
 800ccea:	461a      	mov	r2, r3
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	025b      	lsls	r3, r3, #9
 800ccf0:	089b      	lsrs	r3, r3, #2
 800ccf2:	f7fb f9c5 	bl	8008080 <HAL_DMA_Start_IT>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d01a      	beq.n	800cd32 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f022 021a 	bic.w	r2, r2, #26
 800cd0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a18      	ldr	r2, [pc, #96]	; (800cd74 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800cd12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e018      	b.n	800cd64 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd32:	f04f 33ff 	mov.w	r3, #4294967295
 800cd36:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	025b      	lsls	r3, r3, #9
 800cd3c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cd3e:	2390      	movs	r3, #144	; 0x90
 800cd40:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cd42:	2300      	movs	r3, #0
 800cd44:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cd46:	2300      	movs	r3, #0
 800cd48:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f107 0210 	add.w	r2, r7, #16
 800cd56:	4611      	mov	r1, r2
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f001 fc88 	bl	800e66e <SDIO_ConfigData>

      return HAL_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	e000      	b.n	800cd64 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800cd62:	2302      	movs	r3, #2
  }
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3730      	adds	r7, #48	; 0x30
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	0800d591 	.word	0x0800d591
 800cd70:	0800d62d 	.word	0x0800d62d
 800cd74:	004005ff 	.word	0x004005ff
 800cd78:	4225858c 	.word	0x4225858c

0800cd7c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd88:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d008      	beq.n	800cdaa <HAL_SD_IRQHandler+0x2e>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f003 0308 	and.w	r3, r3, #8
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d003      	beq.n	800cdaa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 ffef 	bl	800dd86 <SD_Read_IT>
 800cda8:	e155      	b.n	800d056 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f000 808f 	beq.w	800ced8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdc2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	6812      	ldr	r2, [r2, #0]
 800cdce:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800cdd2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800cdd6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f022 0201 	bic.w	r2, r2, #1
 800cde6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f003 0308 	and.w	r3, r3, #8
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d039      	beq.n	800ce66 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f003 0302 	and.w	r3, r3, #2
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d104      	bne.n	800ce06 <HAL_SD_IRQHandler+0x8a>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f003 0320 	and.w	r3, r3, #32
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d011      	beq.n	800ce2a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f001 fd06 	bl	800e81c <SDMMC_CmdStopTransfer>
 800ce10:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d008      	beq.n	800ce2a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	431a      	orrs	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 f91f 	bl	800d068 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce32:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f003 0301 	and.w	r3, r3, #1
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d104      	bne.n	800ce56 <HAL_SD_IRQHandler+0xda>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f003 0302 	and.w	r3, r3, #2
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d003      	beq.n	800ce5e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f003 fdbc 	bl	80109d4 <HAL_SD_RxCpltCallback>
 800ce5c:	e0fb      	b.n	800d056 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f003 fdae 	bl	80109c0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ce64:	e0f7      	b.n	800d056 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 80f2 	beq.w	800d056 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f003 0320 	and.w	r3, r3, #32
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d011      	beq.n	800cea0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f001 fccb 	bl	800e81c <SDMMC_CmdStopTransfer>
 800ce86:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d008      	beq.n	800cea0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	431a      	orrs	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 f8e4 	bl	800d068 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f003 0301 	and.w	r3, r3, #1
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f040 80d5 	bne.w	800d056 <HAL_SD_IRQHandler+0x2da>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f003 0302 	and.w	r3, r3, #2
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f040 80cf 	bne.w	800d056 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f022 0208 	bic.w	r2, r2, #8
 800cec6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f003 fd75 	bl	80109c0 <HAL_SD_TxCpltCallback>
}
 800ced6:	e0be      	b.n	800d056 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d008      	beq.n	800cef8 <HAL_SD_IRQHandler+0x17c>
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f003 0308 	and.w	r3, r3, #8
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d003      	beq.n	800cef8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 ff99 	bl	800de28 <SD_Write_IT>
 800cef6:	e0ae      	b.n	800d056 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cefe:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 80a7 	beq.w	800d056 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0e:	f003 0302 	and.w	r3, r3, #2
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d005      	beq.n	800cf22 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1a:	f043 0202 	orr.w	r2, r3, #2
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf28:	f003 0308 	and.w	r3, r3, #8
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d005      	beq.n	800cf3c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf34:	f043 0208 	orr.w	r2, r3, #8
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf42:	f003 0320 	and.w	r3, r3, #32
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d005      	beq.n	800cf56 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4e:	f043 0220 	orr.w	r2, r3, #32
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf5c:	f003 0310 	and.w	r3, r3, #16
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d005      	beq.n	800cf70 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf68:	f043 0210 	orr.w	r2, r3, #16
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f240 523a 	movw	r2, #1338	; 0x53a
 800cf78:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cf88:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f001 fc44 	bl	800e81c <SDMMC_CmdStopTransfer>
 800cf94:	4602      	mov	r2, r0
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9a:	431a      	orrs	r2, r3
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f003 0308 	and.w	r3, r3, #8
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00a      	beq.n	800cfc0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f855 	bl	800d068 <HAL_SD_ErrorCallback>
}
 800cfbe:	e04a      	b.n	800d056 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d045      	beq.n	800d056 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f003 0310 	and.w	r3, r3, #16
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d104      	bne.n	800cfde <HAL_SD_IRQHandler+0x262>
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f003 0320 	and.w	r3, r3, #32
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d011      	beq.n	800d002 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe2:	4a1f      	ldr	r2, [pc, #124]	; (800d060 <HAL_SD_IRQHandler+0x2e4>)
 800cfe4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fb f8a0 	bl	8008130 <HAL_DMA_Abort_IT>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d02f      	beq.n	800d056 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffa:	4618      	mov	r0, r3
 800cffc:	f000 fb68 	bl	800d6d0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d000:	e029      	b.n	800d056 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f003 0301 	and.w	r3, r3, #1
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d104      	bne.n	800d016 <HAL_SD_IRQHandler+0x29a>
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f003 0302 	and.w	r3, r3, #2
 800d012:	2b00      	cmp	r3, #0
 800d014:	d011      	beq.n	800d03a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01a:	4a12      	ldr	r2, [pc, #72]	; (800d064 <HAL_SD_IRQHandler+0x2e8>)
 800d01c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d022:	4618      	mov	r0, r3
 800d024:	f7fb f884 	bl	8008130 <HAL_DMA_Abort_IT>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d013      	beq.n	800d056 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d032:	4618      	mov	r0, r3
 800d034:	f000 fb83 	bl	800d73e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d038:	e00d      	b.n	800d056 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f003 fcac 	bl	80109ac <HAL_SD_AbortCallback>
}
 800d054:	e7ff      	b.n	800d056 <HAL_SD_IRQHandler+0x2da>
 800d056:	bf00      	nop
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	0800d6d1 	.word	0x0800d6d1
 800d064:	0800d73f 	.word	0x0800d73f

0800d068 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d08a:	0f9b      	lsrs	r3, r3, #30
 800d08c:	b2da      	uxtb	r2, r3
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d096:	0e9b      	lsrs	r3, r3, #26
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	f003 030f 	and.w	r3, r3, #15
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a8:	0e1b      	lsrs	r3, r3, #24
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	f003 0303 	and.w	r3, r3, #3
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0ba:	0c1b      	lsrs	r3, r3, #16
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0c6:	0a1b      	lsrs	r3, r3, #8
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0dc:	0d1b      	lsrs	r3, r3, #20
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0e8:	0c1b      	lsrs	r3, r3, #16
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	f003 030f 	and.w	r3, r3, #15
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0fa:	0bdb      	lsrs	r3, r3, #15
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	f003 0301 	and.w	r3, r3, #1
 800d102:	b2da      	uxtb	r2, r3
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d10c:	0b9b      	lsrs	r3, r3, #14
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	f003 0301 	and.w	r3, r3, #1
 800d114:	b2da      	uxtb	r2, r3
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d11e:	0b5b      	lsrs	r3, r3, #13
 800d120:	b2db      	uxtb	r3, r3
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	b2da      	uxtb	r2, r3
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d130:	0b1b      	lsrs	r3, r3, #12
 800d132:	b2db      	uxtb	r3, r3
 800d134:	f003 0301 	and.w	r3, r3, #1
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2200      	movs	r2, #0
 800d142:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d163      	bne.n	800d214 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d150:	009a      	lsls	r2, r3, #2
 800d152:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d156:	4013      	ands	r3, r2
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d15c:	0f92      	lsrs	r2, r2, #30
 800d15e:	431a      	orrs	r2, r3
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d168:	0edb      	lsrs	r3, r3, #27
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	f003 0307 	and.w	r3, r3, #7
 800d170:	b2da      	uxtb	r2, r3
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d17a:	0e1b      	lsrs	r3, r3, #24
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	f003 0307 	and.w	r3, r3, #7
 800d182:	b2da      	uxtb	r2, r3
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d18c:	0d5b      	lsrs	r3, r3, #21
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	f003 0307 	and.w	r3, r3, #7
 800d194:	b2da      	uxtb	r2, r3
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d19e:	0c9b      	lsrs	r3, r3, #18
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	f003 0307 	and.w	r3, r3, #7
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b0:	0bdb      	lsrs	r3, r3, #15
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	f003 0307 	and.w	r3, r3, #7
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	1c5a      	adds	r2, r3, #1
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	7e1b      	ldrb	r3, [r3, #24]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0307 	and.w	r3, r3, #7
 800d1d2:	3302      	adds	r3, #2
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d1de:	fb03 f202 	mul.w	r2, r3, r2
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	7a1b      	ldrb	r3, [r3, #8]
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	f003 030f 	and.w	r3, r3, #15
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	409a      	lsls	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d200:	0a52      	lsrs	r2, r2, #9
 800d202:	fb03 f202 	mul.w	r2, r3, r2
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d210:	661a      	str	r2, [r3, #96]	; 0x60
 800d212:	e031      	b.n	800d278 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d11d      	bne.n	800d258 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d220:	041b      	lsls	r3, r3, #16
 800d222:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d22a:	0c1b      	lsrs	r3, r3, #16
 800d22c:	431a      	orrs	r2, r3
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	3301      	adds	r3, #1
 800d238:	029a      	lsls	r2, r3, #10
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d24c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	661a      	str	r2, [r3, #96]	; 0x60
 800d256:	e00f      	b.n	800d278 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a58      	ldr	r2, [pc, #352]	; (800d3c0 <HAL_SD_GetCardCSD+0x344>)
 800d25e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d264:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	e09d      	b.n	800d3b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d27c:	0b9b      	lsrs	r3, r3, #14
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	f003 0301 	and.w	r3, r3, #1
 800d284:	b2da      	uxtb	r2, r3
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d28e:	09db      	lsrs	r3, r3, #7
 800d290:	b2db      	uxtb	r3, r3
 800d292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d296:	b2da      	uxtb	r2, r3
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2b0:	0fdb      	lsrs	r3, r3, #31
 800d2b2:	b2da      	uxtb	r2, r3
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2bc:	0f5b      	lsrs	r3, r3, #29
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	f003 0303 	and.w	r3, r3, #3
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ce:	0e9b      	lsrs	r3, r3, #26
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	f003 0307 	and.w	r3, r3, #7
 800d2d6:	b2da      	uxtb	r2, r3
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2e0:	0d9b      	lsrs	r3, r3, #22
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	f003 030f 	and.w	r3, r3, #15
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f2:	0d5b      	lsrs	r3, r3, #21
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	f003 0301 	and.w	r3, r3, #1
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	2200      	movs	r2, #0
 800d306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d30e:	0c1b      	lsrs	r3, r3, #16
 800d310:	b2db      	uxtb	r3, r3
 800d312:	f003 0301 	and.w	r3, r3, #1
 800d316:	b2da      	uxtb	r2, r3
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d322:	0bdb      	lsrs	r3, r3, #15
 800d324:	b2db      	uxtb	r3, r3
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d336:	0b9b      	lsrs	r3, r3, #14
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	f003 0301 	and.w	r3, r3, #1
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d34a:	0b5b      	lsrs	r3, r3, #13
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	b2da      	uxtb	r2, r3
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d35e:	0b1b      	lsrs	r3, r3, #12
 800d360:	b2db      	uxtb	r3, r3
 800d362:	f003 0301 	and.w	r3, r3, #1
 800d366:	b2da      	uxtb	r2, r3
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d372:	0a9b      	lsrs	r3, r3, #10
 800d374:	b2db      	uxtb	r3, r3
 800d376:	f003 0303 	and.w	r3, r3, #3
 800d37a:	b2da      	uxtb	r2, r3
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d386:	0a1b      	lsrs	r3, r3, #8
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	f003 0303 	and.w	r3, r3, #3
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d39a:	085b      	lsrs	r3, r3, #1
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	004005ff 	.word	0x004005ff

0800d3c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d41c:	b5b0      	push	{r4, r5, r7, lr}
 800d41e:	b08e      	sub	sp, #56	; 0x38
 800d420:	af04      	add	r7, sp, #16
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d426:	2300      	movs	r3, #0
 800d428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2203      	movs	r2, #3
 800d430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d438:	2b03      	cmp	r3, #3
 800d43a:	d02e      	beq.n	800d49a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d442:	d106      	bne.n	800d452 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d448:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	639a      	str	r2, [r3, #56]	; 0x38
 800d450:	e029      	b.n	800d4a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d458:	d10a      	bne.n	800d470 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fb2a 	bl	800dab4 <SD_WideBus_Enable>
 800d460:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d466:	6a3b      	ldr	r3, [r7, #32]
 800d468:	431a      	orrs	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	639a      	str	r2, [r3, #56]	; 0x38
 800d46e:	e01a      	b.n	800d4a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10a      	bne.n	800d48c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fb67 	bl	800db4a <SD_WideBus_Disable>
 800d47c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d482:	6a3b      	ldr	r3, [r7, #32]
 800d484:	431a      	orrs	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	639a      	str	r2, [r3, #56]	; 0x38
 800d48a:	e00c      	b.n	800d4a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d490:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	639a      	str	r2, [r3, #56]	; 0x38
 800d498:	e005      	b.n	800d4a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d00b      	beq.n	800d4c6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a26      	ldr	r2, [pc, #152]	; (800d54c <HAL_SD_ConfigWideBusOperation+0x130>)
 800d4b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4c4:	e01f      	b.n	800d506 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	689b      	ldr	r3, [r3, #8]
 800d4d0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	68db      	ldr	r3, [r3, #12]
 800d4d6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	695b      	ldr	r3, [r3, #20]
 800d4e0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	699b      	ldr	r3, [r3, #24]
 800d4e6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681d      	ldr	r5, [r3, #0]
 800d4ec:	466c      	mov	r4, sp
 800d4ee:	f107 0314 	add.w	r3, r7, #20
 800d4f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d4fa:	f107 0308 	add.w	r3, r7, #8
 800d4fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d500:	4628      	mov	r0, r5
 800d502:	f001 f805 	bl	800e510 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d50e:	4618      	mov	r0, r3
 800d510:	f001 f8d9 	bl	800e6c6 <SDMMC_CmdBlockLength>
 800d514:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d516:	6a3b      	ldr	r3, [r7, #32]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00c      	beq.n	800d536 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a0a      	ldr	r2, [pc, #40]	; (800d54c <HAL_SD_ConfigWideBusOperation+0x130>)
 800d522:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d528:	6a3b      	ldr	r3, [r7, #32]
 800d52a:	431a      	orrs	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d53e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d542:	4618      	mov	r0, r3
 800d544:	3728      	adds	r7, #40	; 0x28
 800d546:	46bd      	mov	sp, r7
 800d548:	bdb0      	pop	{r4, r5, r7, pc}
 800d54a:	bf00      	nop
 800d54c:	004005ff 	.word	0x004005ff

0800d550 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d558:	2300      	movs	r3, #0
 800d55a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d55c:	f107 030c 	add.w	r3, r7, #12
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fa7e 	bl	800da64 <SD_SendStatus>
 800d568:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d005      	beq.n	800d57c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	431a      	orrs	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	0a5b      	lsrs	r3, r3, #9
 800d580:	f003 030f 	and.w	r3, r3, #15
 800d584:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d586:	693b      	ldr	r3, [r7, #16]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3718      	adds	r7, #24
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d5ae:	bf00      	nop
 800d5b0:	3714      	adds	r7, #20
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr

0800d5ba <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5cc:	2b82      	cmp	r3, #130	; 0x82
 800d5ce:	d111      	bne.n	800d5f4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f001 f921 	bl	800e81c <SDMMC_CmdStopTransfer>
 800d5da:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d008      	beq.n	800d5f4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	431a      	orrs	r2, r3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f7ff fd3a 	bl	800d068 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f022 0208 	bic.w	r2, r2, #8
 800d602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f240 523a 	movw	r2, #1338	; 0x53a
 800d60c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2200      	movs	r2, #0
 800d61a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d61c:	68f8      	ldr	r0, [r7, #12]
 800d61e:	f003 f9d9 	bl	80109d4 <HAL_SD_RxCpltCallback>
#endif
}
 800d622:	bf00      	nop
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
	...

0800d62c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d638:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7fa ff24 	bl	8008488 <HAL_DMA_GetError>
 800d640:	4603      	mov	r3, r0
 800d642:	2b02      	cmp	r3, #2
 800d644:	d03e      	beq.n	800d6c4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d64c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d654:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d002      	beq.n	800d662 <SD_DMAError+0x36>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d12d      	bne.n	800d6be <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4a19      	ldr	r2, [pc, #100]	; (800d6cc <SD_DMAError+0xa0>)
 800d668:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d678:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d686:	6978      	ldr	r0, [r7, #20]
 800d688:	f7ff ff62 	bl	800d550 <HAL_SD_GetCardState>
 800d68c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	2b06      	cmp	r3, #6
 800d692:	d002      	beq.n	800d69a <SD_DMAError+0x6e>
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2b05      	cmp	r3, #5
 800d698:	d10a      	bne.n	800d6b0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f001 f8bc 	bl	800e81c <SDMMC_CmdStopTransfer>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6aa:	431a      	orrs	r2, r3
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d6be:	6978      	ldr	r0, [r7, #20]
 800d6c0:	f7ff fcd2 	bl	800d068 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d6c4:	bf00      	nop
 800d6c6:	3718      	adds	r7, #24
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	004005ff 	.word	0x004005ff

0800d6d0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6dc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f240 523a 	movw	r2, #1338	; 0x53a
 800d6e6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f7ff ff31 	bl	800d550 <HAL_SD_GetCardState>
 800d6ee:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	2b06      	cmp	r3, #6
 800d702:	d002      	beq.n	800d70a <SD_DMATxAbort+0x3a>
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b05      	cmp	r3, #5
 800d708:	d10a      	bne.n	800d720 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4618      	mov	r0, r3
 800d710:	f001 f884 	bl	800e81c <SDMMC_CmdStopTransfer>
 800d714:	4602      	mov	r2, r0
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d71a:	431a      	orrs	r2, r3
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d724:	2b00      	cmp	r3, #0
 800d726:	d103      	bne.n	800d730 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f003 f93f 	bl	80109ac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d72e:	e002      	b.n	800d736 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f7ff fc99 	bl	800d068 <HAL_SD_ErrorCallback>
}
 800d736:	bf00      	nop
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d74a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f240 523a 	movw	r2, #1338	; 0x53a
 800d754:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f7ff fefa 	bl	800d550 <HAL_SD_GetCardState>
 800d75c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2201      	movs	r2, #1
 800d762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	2b06      	cmp	r3, #6
 800d770:	d002      	beq.n	800d778 <SD_DMARxAbort+0x3a>
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	2b05      	cmp	r3, #5
 800d776:	d10a      	bne.n	800d78e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f001 f84d 	bl	800e81c <SDMMC_CmdStopTransfer>
 800d782:	4602      	mov	r2, r0
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d788:	431a      	orrs	r2, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d792:	2b00      	cmp	r3, #0
 800d794:	d103      	bne.n	800d79e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f003 f908 	bl	80109ac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d79c:	e002      	b.n	800d7a4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f7ff fc62 	bl	800d068 <HAL_SD_ErrorCallback>
}
 800d7a4:	bf00      	nop
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d7ac:	b5b0      	push	{r4, r5, r7, lr}
 800d7ae:	b094      	sub	sp, #80	; 0x50
 800d7b0:	af04      	add	r7, sp, #16
 800d7b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f000 fefe 	bl	800e5be <SDIO_GetPowerState>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d102      	bne.n	800d7ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d7c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d7cc:	e0b8      	b.n	800d940 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7d2:	2b03      	cmp	r3, #3
 800d7d4:	d02f      	beq.n	800d836 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f001 f928 	bl	800ea30 <SDMMC_CmdSendCID>
 800d7e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <SD_InitCard+0x40>
    {
      return errorstate;
 800d7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ea:	e0a9      	b.n	800d940 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f000 ff28 	bl	800e648 <SDIO_GetResponse>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2104      	movs	r1, #4
 800d804:	4618      	mov	r0, r3
 800d806:	f000 ff1f 	bl	800e648 <SDIO_GetResponse>
 800d80a:	4602      	mov	r2, r0
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2108      	movs	r1, #8
 800d816:	4618      	mov	r0, r3
 800d818:	f000 ff16 	bl	800e648 <SDIO_GetResponse>
 800d81c:	4602      	mov	r2, r0
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	210c      	movs	r1, #12
 800d828:	4618      	mov	r0, r3
 800d82a:	f000 ff0d 	bl	800e648 <SDIO_GetResponse>
 800d82e:	4602      	mov	r2, r0
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d83a:	2b03      	cmp	r3, #3
 800d83c:	d00d      	beq.n	800d85a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f107 020e 	add.w	r2, r7, #14
 800d846:	4611      	mov	r1, r2
 800d848:	4618      	mov	r0, r3
 800d84a:	f001 f92e 	bl	800eaaa <SDMMC_CmdSetRelAdd>
 800d84e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <SD_InitCard+0xae>
    {
      return errorstate;
 800d856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d858:	e072      	b.n	800d940 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d036      	beq.n	800d8d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d862:	89fb      	ldrh	r3, [r7, #14]
 800d864:	461a      	mov	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d872:	041b      	lsls	r3, r3, #16
 800d874:	4619      	mov	r1, r3
 800d876:	4610      	mov	r0, r2
 800d878:	f001 f8f8 	bl	800ea6c <SDMMC_CmdSendCSD>
 800d87c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d880:	2b00      	cmp	r3, #0
 800d882:	d001      	beq.n	800d888 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d886:	e05b      	b.n	800d940 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2100      	movs	r1, #0
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 feda 	bl	800e648 <SDIO_GetResponse>
 800d894:	4602      	mov	r2, r0
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2104      	movs	r1, #4
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f000 fed1 	bl	800e648 <SDIO_GetResponse>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2108      	movs	r1, #8
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 fec8 	bl	800e648 <SDIO_GetResponse>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	210c      	movs	r1, #12
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 febf 	bl	800e648 <SDIO_GetResponse>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2104      	movs	r1, #4
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 feb6 	bl	800e648 <SDIO_GetResponse>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	0d1a      	lsrs	r2, r3, #20
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d8e4:	f107 0310 	add.w	r3, r7, #16
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7ff fbc6 	bl	800d07c <HAL_SD_GetCardCSD>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d8fa:	e021      	b.n	800d940 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6819      	ldr	r1, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d904:	041b      	lsls	r3, r3, #16
 800d906:	2200      	movs	r2, #0
 800d908:	461c      	mov	r4, r3
 800d90a:	4615      	mov	r5, r2
 800d90c:	4622      	mov	r2, r4
 800d90e:	462b      	mov	r3, r5
 800d910:	4608      	mov	r0, r1
 800d912:	f000 ffa5 	bl	800e860 <SDMMC_CmdSelDesel>
 800d916:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d001      	beq.n	800d922 <SD_InitCard+0x176>
  {
    return errorstate;
 800d91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d920:	e00e      	b.n	800d940 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681d      	ldr	r5, [r3, #0]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	466c      	mov	r4, sp
 800d92a:	f103 0210 	add.w	r2, r3, #16
 800d92e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d930:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d934:	3304      	adds	r3, #4
 800d936:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d938:	4628      	mov	r0, r5
 800d93a:	f000 fde9 	bl	800e510 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3740      	adds	r7, #64	; 0x40
 800d944:	46bd      	mov	sp, r7
 800d946:	bdb0      	pop	{r4, r5, r7, pc}

0800d948 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b086      	sub	sp, #24
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d950:	2300      	movs	r3, #0
 800d952:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d954:	2300      	movs	r3, #0
 800d956:	617b      	str	r3, [r7, #20]
 800d958:	2300      	movs	r3, #0
 800d95a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4618      	mov	r0, r3
 800d962:	f000 ffa0 	bl	800e8a6 <SDMMC_CmdGoIdleState>
 800d966:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d001      	beq.n	800d972 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	e072      	b.n	800da58 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4618      	mov	r0, r3
 800d978:	f000 ffb3 	bl	800e8e2 <SDMMC_CmdOperCond>
 800d97c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d00d      	beq.n	800d9a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 ff89 	bl	800e8a6 <SDMMC_CmdGoIdleState>
 800d994:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d004      	beq.n	800d9a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	e05b      	b.n	800da58 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d137      	bne.n	800da1e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 ffb3 	bl	800e920 <SDMMC_CmdAppCommand>
 800d9ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d02d      	beq.n	800da1e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d9c6:	e047      	b.n	800da58 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 ffa6 	bl	800e920 <SDMMC_CmdAppCommand>
 800d9d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d001      	beq.n	800d9e0 <SD_PowerON+0x98>
    {
      return errorstate;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	e03b      	b.n	800da58 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	491e      	ldr	r1, [pc, #120]	; (800da60 <SD_PowerON+0x118>)
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 ffbc 	bl	800e964 <SDMMC_CmdAppOperCommand>
 800d9ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d002      	beq.n	800d9fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d9f8:	e02e      	b.n	800da58 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2100      	movs	r1, #0
 800da00:	4618      	mov	r0, r3
 800da02:	f000 fe21 	bl	800e648 <SDIO_GetResponse>
 800da06:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	0fdb      	lsrs	r3, r3, #31
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d101      	bne.n	800da14 <SD_PowerON+0xcc>
 800da10:	2301      	movs	r3, #1
 800da12:	e000      	b.n	800da16 <SD_PowerON+0xce>
 800da14:	2300      	movs	r3, #0
 800da16:	613b      	str	r3, [r7, #16]

    count++;
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	3301      	adds	r3, #1
 800da1c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da24:	4293      	cmp	r3, r2
 800da26:	d802      	bhi.n	800da2e <SD_PowerON+0xe6>
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d0cc      	beq.n	800d9c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da34:	4293      	cmp	r3, r2
 800da36:	d902      	bls.n	800da3e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800da38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800da3c:	e00c      	b.n	800da58 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da44:	2b00      	cmp	r3, #0
 800da46:	d003      	beq.n	800da50 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	645a      	str	r2, [r3, #68]	; 0x44
 800da4e:	e002      	b.n	800da56 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800da56:	2300      	movs	r3, #0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3718      	adds	r7, #24
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	c1100000 	.word	0xc1100000

0800da64 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800da74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da78:	e018      	b.n	800daac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da82:	041b      	lsls	r3, r3, #16
 800da84:	4619      	mov	r1, r3
 800da86:	4610      	mov	r0, r2
 800da88:	f001 f830 	bl	800eaec <SDMMC_CmdSendStatus>
 800da8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d001      	beq.n	800da98 <SD_SendStatus+0x34>
  {
    return errorstate;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	e009      	b.n	800daac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2100      	movs	r1, #0
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 fdd2 	bl	800e648 <SDIO_GetResponse>
 800daa4:	4602      	mov	r2, r0
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3710      	adds	r7, #16
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b086      	sub	sp, #24
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dabc:	2300      	movs	r3, #0
 800dabe:	60fb      	str	r3, [r7, #12]
 800dac0:	2300      	movs	r3, #0
 800dac2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2100      	movs	r1, #0
 800daca:	4618      	mov	r0, r3
 800dacc:	f000 fdbc 	bl	800e648 <SDIO_GetResponse>
 800dad0:	4603      	mov	r3, r0
 800dad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dada:	d102      	bne.n	800dae2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dadc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dae0:	e02f      	b.n	800db42 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dae2:	f107 030c 	add.w	r3, r7, #12
 800dae6:	4619      	mov	r1, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 f879 	bl	800dbe0 <SD_FindSCR>
 800daee:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	e023      	b.n	800db42 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db00:	2b00      	cmp	r3, #0
 800db02:	d01c      	beq.n	800db3e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db0c:	041b      	lsls	r3, r3, #16
 800db0e:	4619      	mov	r1, r3
 800db10:	4610      	mov	r0, r2
 800db12:	f000 ff05 	bl	800e920 <SDMMC_CmdAppCommand>
 800db16:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d001      	beq.n	800db22 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	e00f      	b.n	800db42 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2102      	movs	r1, #2
 800db28:	4618      	mov	r0, r3
 800db2a:	f000 ff3e 	bl	800e9aa <SDMMC_CmdBusWidth>
 800db2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	e003      	b.n	800db42 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db3a:	2300      	movs	r3, #0
 800db3c:	e001      	b.n	800db42 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800db42:	4618      	mov	r0, r3
 800db44:	3718      	adds	r7, #24
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b086      	sub	sp, #24
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db52:	2300      	movs	r3, #0
 800db54:	60fb      	str	r3, [r7, #12]
 800db56:	2300      	movs	r3, #0
 800db58:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2100      	movs	r1, #0
 800db60:	4618      	mov	r0, r3
 800db62:	f000 fd71 	bl	800e648 <SDIO_GetResponse>
 800db66:	4603      	mov	r3, r0
 800db68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db70:	d102      	bne.n	800db78 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db76:	e02f      	b.n	800dbd8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db78:	f107 030c 	add.w	r3, r7, #12
 800db7c:	4619      	mov	r1, r3
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 f82e 	bl	800dbe0 <SD_FindSCR>
 800db84:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d001      	beq.n	800db90 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	e023      	b.n	800dbd8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db96:	2b00      	cmp	r3, #0
 800db98:	d01c      	beq.n	800dbd4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dba2:	041b      	lsls	r3, r3, #16
 800dba4:	4619      	mov	r1, r3
 800dba6:	4610      	mov	r0, r2
 800dba8:	f000 feba 	bl	800e920 <SDMMC_CmdAppCommand>
 800dbac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	e00f      	b.n	800dbd8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2100      	movs	r1, #0
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 fef3 	bl	800e9aa <SDMMC_CmdBusWidth>
 800dbc4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d001      	beq.n	800dbd0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	e003      	b.n	800dbd8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	e001      	b.n	800dbd8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3718      	adds	r7, #24
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dbe0:	b590      	push	{r4, r7, lr}
 800dbe2:	b08f      	sub	sp, #60	; 0x3c
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dbea:	f7f8 fd79 	bl	80066e0 <HAL_GetTick>
 800dbee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	60bb      	str	r3, [r7, #8]
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2108      	movs	r1, #8
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 fd5d 	bl	800e6c6 <SDMMC_CmdBlockLength>
 800dc0c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d001      	beq.n	800dc18 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc16:	e0b2      	b.n	800dd7e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc20:	041b      	lsls	r3, r3, #16
 800dc22:	4619      	mov	r1, r3
 800dc24:	4610      	mov	r0, r2
 800dc26:	f000 fe7b 	bl	800e920 <SDMMC_CmdAppCommand>
 800dc2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc34:	e0a3      	b.n	800dd7e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc36:	f04f 33ff 	mov.w	r3, #4294967295
 800dc3a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dc3c:	2308      	movs	r3, #8
 800dc3e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800dc40:	2330      	movs	r3, #48	; 0x30
 800dc42:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dc44:	2302      	movs	r3, #2
 800dc46:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f107 0210 	add.w	r2, r7, #16
 800dc58:	4611      	mov	r1, r2
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f000 fd07 	bl	800e66e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4618      	mov	r0, r3
 800dc66:	f000 fec2 	bl	800e9ee <SDMMC_CmdSendSCR>
 800dc6a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d02a      	beq.n	800dcc8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800dc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc74:	e083      	b.n	800dd7e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00f      	beq.n	800dca4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6819      	ldr	r1, [r3, #0]
 800dc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	f107 0208 	add.w	r2, r7, #8
 800dc90:	18d4      	adds	r4, r2, r3
 800dc92:	4608      	mov	r0, r1
 800dc94:	f000 fc67 	bl	800e566 <SDIO_ReadFIFO>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	6023      	str	r3, [r4, #0]
      index++;
 800dc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc9e:	3301      	adds	r3, #1
 800dca0:	637b      	str	r3, [r7, #52]	; 0x34
 800dca2:	e006      	b.n	800dcb2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d012      	beq.n	800dcd8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dcb2:	f7f8 fd15 	bl	80066e0 <HAL_GetTick>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc0:	d102      	bne.n	800dcc8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dcc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcc6:	e05a      	b.n	800dd7e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcce:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d0cf      	beq.n	800dc76 <SD_FindSCR+0x96>
 800dcd6:	e000      	b.n	800dcda <SD_FindSCR+0xfa>
      break;
 800dcd8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce0:	f003 0308 	and.w	r3, r3, #8
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d005      	beq.n	800dcf4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2208      	movs	r2, #8
 800dcee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dcf0:	2308      	movs	r3, #8
 800dcf2:	e044      	b.n	800dd7e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfa:	f003 0302 	and.w	r3, r3, #2
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d005      	beq.n	800dd0e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2202      	movs	r2, #2
 800dd08:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd0a:	2302      	movs	r3, #2
 800dd0c:	e037      	b.n	800dd7e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd14:	f003 0320 	and.w	r3, r3, #32
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d005      	beq.n	800dd28 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2220      	movs	r2, #32
 800dd22:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd24:	2320      	movs	r3, #32
 800dd26:	e02a      	b.n	800dd7e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd30:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	061a      	lsls	r2, r3, #24
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	021b      	lsls	r3, r3, #8
 800dd3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd3e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	0a1b      	lsrs	r3, r3, #8
 800dd44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd48:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	0e1b      	lsrs	r3, r3, #24
 800dd4e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd52:	601a      	str	r2, [r3, #0]
    scr++;
 800dd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd56:	3304      	adds	r3, #4
 800dd58:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	061a      	lsls	r2, r3, #24
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	021b      	lsls	r3, r3, #8
 800dd62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd66:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	0a1b      	lsrs	r3, r3, #8
 800dd6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd70:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	0e1b      	lsrs	r3, r3, #24
 800dd76:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	373c      	adds	r7, #60	; 0x3c
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd90      	pop	{r4, r7, pc}

0800dd86 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b086      	sub	sp, #24
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd92:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd98:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d03f      	beq.n	800de20 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dda0:	2300      	movs	r3, #0
 800dda2:	617b      	str	r3, [r7, #20]
 800dda4:	e033      	b.n	800de0e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 fbdb 	bl	800e566 <SDIO_ReadFIFO>
 800ddb0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	b2da      	uxtb	r2, r3
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	0a1b      	lsrs	r3, r3, #8
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	3b01      	subs	r3, #1
 800ddda:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	0c1b      	lsrs	r3, r3, #16
 800dde0:	b2da      	uxtb	r2, r3
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3301      	adds	r3, #1
 800ddea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	0e1b      	lsrs	r3, r3, #24
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	3301      	adds	r3, #1
 800de00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	3b01      	subs	r3, #1
 800de06:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	3301      	adds	r3, #1
 800de0c:	617b      	str	r3, [r7, #20]
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2b07      	cmp	r3, #7
 800de12:	d9c8      	bls.n	800dda6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68fa      	ldr	r2, [r7, #12]
 800de18:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	693a      	ldr	r2, [r7, #16]
 800de1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800de20:	bf00      	nop
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6a1b      	ldr	r3, [r3, #32]
 800de34:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de3a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d043      	beq.n	800deca <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800de42:	2300      	movs	r3, #0
 800de44:	617b      	str	r3, [r7, #20]
 800de46:	e037      	b.n	800deb8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	3301      	adds	r3, #1
 800de52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	3b01      	subs	r3, #1
 800de58:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	021a      	lsls	r2, r3, #8
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	4313      	orrs	r3, r2
 800de64:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	3301      	adds	r3, #1
 800de6a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	3b01      	subs	r3, #1
 800de70:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	041a      	lsls	r2, r3, #16
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	3301      	adds	r3, #1
 800de82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	3b01      	subs	r3, #1
 800de88:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	061a      	lsls	r2, r3, #24
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	4313      	orrs	r3, r2
 800de94:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	3301      	adds	r3, #1
 800de9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f107 0208 	add.w	r2, r7, #8
 800deaa:	4611      	mov	r1, r2
 800deac:	4618      	mov	r0, r3
 800deae:	f000 fb67 	bl	800e580 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	3301      	adds	r3, #1
 800deb6:	617b      	str	r3, [r7, #20]
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	2b07      	cmp	r3, #7
 800debc:	d9c4      	bls.n	800de48 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	693a      	ldr	r2, [r7, #16]
 800dec8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800deca:	bf00      	nop
 800decc:	3718      	adds	r7, #24
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b082      	sub	sp, #8
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e041      	b.n	800df68 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800deea:	b2db      	uxtb	r3, r3
 800deec:	2b00      	cmp	r3, #0
 800deee:	d106      	bne.n	800defe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f7f8 fa6b 	bl	80063d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2202      	movs	r2, #2
 800df02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	3304      	adds	r3, #4
 800df0e:	4619      	mov	r1, r3
 800df10:	4610      	mov	r0, r2
 800df12:	f000 f9cd 	bl	800e2b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2201      	movs	r2, #1
 800df1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2201      	movs	r2, #1
 800df22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2201      	movs	r2, #1
 800df2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2201      	movs	r2, #1
 800df32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2201      	movs	r2, #1
 800df3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2201      	movs	r2, #1
 800df42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2201      	movs	r2, #1
 800df4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2201      	movs	r2, #1
 800df52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2201      	movs	r2, #1
 800df5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2201      	movs	r2, #1
 800df62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800df66:	2300      	movs	r3, #0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	2b01      	cmp	r3, #1
 800df82:	d001      	beq.n	800df88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800df84:	2301      	movs	r3, #1
 800df86:	e04e      	b.n	800e026 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2202      	movs	r2, #2
 800df8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	68da      	ldr	r2, [r3, #12]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f042 0201 	orr.w	r2, r2, #1
 800df9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a23      	ldr	r2, [pc, #140]	; (800e034 <HAL_TIM_Base_Start_IT+0xc4>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d022      	beq.n	800dff0 <HAL_TIM_Base_Start_IT+0x80>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfb2:	d01d      	beq.n	800dff0 <HAL_TIM_Base_Start_IT+0x80>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a1f      	ldr	r2, [pc, #124]	; (800e038 <HAL_TIM_Base_Start_IT+0xc8>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d018      	beq.n	800dff0 <HAL_TIM_Base_Start_IT+0x80>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a1e      	ldr	r2, [pc, #120]	; (800e03c <HAL_TIM_Base_Start_IT+0xcc>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d013      	beq.n	800dff0 <HAL_TIM_Base_Start_IT+0x80>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4a1c      	ldr	r2, [pc, #112]	; (800e040 <HAL_TIM_Base_Start_IT+0xd0>)
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d00e      	beq.n	800dff0 <HAL_TIM_Base_Start_IT+0x80>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4a1b      	ldr	r2, [pc, #108]	; (800e044 <HAL_TIM_Base_Start_IT+0xd4>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d009      	beq.n	800dff0 <HAL_TIM_Base_Start_IT+0x80>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a19      	ldr	r2, [pc, #100]	; (800e048 <HAL_TIM_Base_Start_IT+0xd8>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d004      	beq.n	800dff0 <HAL_TIM_Base_Start_IT+0x80>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4a18      	ldr	r2, [pc, #96]	; (800e04c <HAL_TIM_Base_Start_IT+0xdc>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d111      	bne.n	800e014 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f003 0307 	and.w	r3, r3, #7
 800dffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2b06      	cmp	r3, #6
 800e000:	d010      	beq.n	800e024 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f042 0201 	orr.w	r2, r2, #1
 800e010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e012:	e007      	b.n	800e024 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f042 0201 	orr.w	r2, r2, #1
 800e022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	40010000 	.word	0x40010000
 800e038:	40000400 	.word	0x40000400
 800e03c:	40000800 	.word	0x40000800
 800e040:	40000c00 	.word	0x40000c00
 800e044:	40010400 	.word	0x40010400
 800e048:	40014000 	.word	0x40014000
 800e04c:	40001800 	.word	0x40001800

0800e050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	f003 0302 	and.w	r3, r3, #2
 800e062:	2b02      	cmp	r3, #2
 800e064:	d122      	bne.n	800e0ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	f003 0302 	and.w	r3, r3, #2
 800e070:	2b02      	cmp	r3, #2
 800e072:	d11b      	bne.n	800e0ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f06f 0202 	mvn.w	r2, #2
 800e07c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2201      	movs	r2, #1
 800e082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	699b      	ldr	r3, [r3, #24]
 800e08a:	f003 0303 	and.w	r3, r3, #3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 f8ee 	bl	800e274 <HAL_TIM_IC_CaptureCallback>
 800e098:	e005      	b.n	800e0a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 f8e0 	bl	800e260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f8f1 	bl	800e288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	f003 0304 	and.w	r3, r3, #4
 800e0b6:	2b04      	cmp	r3, #4
 800e0b8:	d122      	bne.n	800e100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	f003 0304 	and.w	r3, r3, #4
 800e0c4:	2b04      	cmp	r3, #4
 800e0c6:	d11b      	bne.n	800e100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f06f 0204 	mvn.w	r2, #4
 800e0d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2202      	movs	r2, #2
 800e0d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	699b      	ldr	r3, [r3, #24]
 800e0de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d003      	beq.n	800e0ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 f8c4 	bl	800e274 <HAL_TIM_IC_CaptureCallback>
 800e0ec:	e005      	b.n	800e0fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 f8b6 	bl	800e260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f000 f8c7 	bl	800e288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	691b      	ldr	r3, [r3, #16]
 800e106:	f003 0308 	and.w	r3, r3, #8
 800e10a:	2b08      	cmp	r3, #8
 800e10c:	d122      	bne.n	800e154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	f003 0308 	and.w	r3, r3, #8
 800e118:	2b08      	cmp	r3, #8
 800e11a:	d11b      	bne.n	800e154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f06f 0208 	mvn.w	r2, #8
 800e124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2204      	movs	r2, #4
 800e12a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	69db      	ldr	r3, [r3, #28]
 800e132:	f003 0303 	and.w	r3, r3, #3
 800e136:	2b00      	cmp	r3, #0
 800e138:	d003      	beq.n	800e142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 f89a 	bl	800e274 <HAL_TIM_IC_CaptureCallback>
 800e140:	e005      	b.n	800e14e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 f88c 	bl	800e260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 f89d 	bl	800e288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	691b      	ldr	r3, [r3, #16]
 800e15a:	f003 0310 	and.w	r3, r3, #16
 800e15e:	2b10      	cmp	r3, #16
 800e160:	d122      	bne.n	800e1a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	f003 0310 	and.w	r3, r3, #16
 800e16c:	2b10      	cmp	r3, #16
 800e16e:	d11b      	bne.n	800e1a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f06f 0210 	mvn.w	r2, #16
 800e178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2208      	movs	r2, #8
 800e17e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	69db      	ldr	r3, [r3, #28]
 800e186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d003      	beq.n	800e196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 f870 	bl	800e274 <HAL_TIM_IC_CaptureCallback>
 800e194:	e005      	b.n	800e1a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 f862 	bl	800e260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 f873 	bl	800e288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	f003 0301 	and.w	r3, r3, #1
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d10e      	bne.n	800e1d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	f003 0301 	and.w	r3, r3, #1
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d107      	bne.n	800e1d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f06f 0201 	mvn.w	r2, #1
 800e1cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7f7 fd92 	bl	8005cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	691b      	ldr	r3, [r3, #16]
 800e1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1de:	2b80      	cmp	r3, #128	; 0x80
 800e1e0:	d10e      	bne.n	800e200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1ec:	2b80      	cmp	r3, #128	; 0x80
 800e1ee:	d107      	bne.n	800e200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e1f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f97e 	bl	800e4fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e20a:	2b40      	cmp	r3, #64	; 0x40
 800e20c:	d10e      	bne.n	800e22c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e218:	2b40      	cmp	r3, #64	; 0x40
 800e21a:	d107      	bne.n	800e22c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 f838 	bl	800e29c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	f003 0320 	and.w	r3, r3, #32
 800e236:	2b20      	cmp	r3, #32
 800e238:	d10e      	bne.n	800e258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	f003 0320 	and.w	r3, r3, #32
 800e244:	2b20      	cmp	r3, #32
 800e246:	d107      	bne.n	800e258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f06f 0220 	mvn.w	r2, #32
 800e250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 f948 	bl	800e4e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e258:	bf00      	nop
 800e25a:	3708      	adds	r7, #8
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e268:	bf00      	nop
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e27c:	bf00      	nop
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e290:	bf00      	nop
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e2a4:	bf00      	nop
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr

0800e2b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a40      	ldr	r2, [pc, #256]	; (800e3c4 <TIM_Base_SetConfig+0x114>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d013      	beq.n	800e2f0 <TIM_Base_SetConfig+0x40>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ce:	d00f      	beq.n	800e2f0 <TIM_Base_SetConfig+0x40>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	4a3d      	ldr	r2, [pc, #244]	; (800e3c8 <TIM_Base_SetConfig+0x118>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d00b      	beq.n	800e2f0 <TIM_Base_SetConfig+0x40>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a3c      	ldr	r2, [pc, #240]	; (800e3cc <TIM_Base_SetConfig+0x11c>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d007      	beq.n	800e2f0 <TIM_Base_SetConfig+0x40>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	4a3b      	ldr	r2, [pc, #236]	; (800e3d0 <TIM_Base_SetConfig+0x120>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d003      	beq.n	800e2f0 <TIM_Base_SetConfig+0x40>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4a3a      	ldr	r2, [pc, #232]	; (800e3d4 <TIM_Base_SetConfig+0x124>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d108      	bne.n	800e302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	4313      	orrs	r3, r2
 800e300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4a2f      	ldr	r2, [pc, #188]	; (800e3c4 <TIM_Base_SetConfig+0x114>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d02b      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e310:	d027      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	4a2c      	ldr	r2, [pc, #176]	; (800e3c8 <TIM_Base_SetConfig+0x118>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d023      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4a2b      	ldr	r2, [pc, #172]	; (800e3cc <TIM_Base_SetConfig+0x11c>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d01f      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	4a2a      	ldr	r2, [pc, #168]	; (800e3d0 <TIM_Base_SetConfig+0x120>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d01b      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	4a29      	ldr	r2, [pc, #164]	; (800e3d4 <TIM_Base_SetConfig+0x124>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d017      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	4a28      	ldr	r2, [pc, #160]	; (800e3d8 <TIM_Base_SetConfig+0x128>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d013      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4a27      	ldr	r2, [pc, #156]	; (800e3dc <TIM_Base_SetConfig+0x12c>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d00f      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	4a26      	ldr	r2, [pc, #152]	; (800e3e0 <TIM_Base_SetConfig+0x130>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d00b      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4a25      	ldr	r2, [pc, #148]	; (800e3e4 <TIM_Base_SetConfig+0x134>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d007      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a24      	ldr	r2, [pc, #144]	; (800e3e8 <TIM_Base_SetConfig+0x138>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d003      	beq.n	800e362 <TIM_Base_SetConfig+0xb2>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4a23      	ldr	r2, [pc, #140]	; (800e3ec <TIM_Base_SetConfig+0x13c>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d108      	bne.n	800e374 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	4313      	orrs	r3, r2
 800e372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	695b      	ldr	r3, [r3, #20]
 800e37e:	4313      	orrs	r3, r2
 800e380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	689a      	ldr	r2, [r3, #8]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a0a      	ldr	r2, [pc, #40]	; (800e3c4 <TIM_Base_SetConfig+0x114>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d003      	beq.n	800e3a8 <TIM_Base_SetConfig+0xf8>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4a0c      	ldr	r2, [pc, #48]	; (800e3d4 <TIM_Base_SetConfig+0x124>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d103      	bne.n	800e3b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	691a      	ldr	r2, [r3, #16]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	615a      	str	r2, [r3, #20]
}
 800e3b6:	bf00      	nop
 800e3b8:	3714      	adds	r7, #20
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	40010000 	.word	0x40010000
 800e3c8:	40000400 	.word	0x40000400
 800e3cc:	40000800 	.word	0x40000800
 800e3d0:	40000c00 	.word	0x40000c00
 800e3d4:	40010400 	.word	0x40010400
 800e3d8:	40014000 	.word	0x40014000
 800e3dc:	40014400 	.word	0x40014400
 800e3e0:	40014800 	.word	0x40014800
 800e3e4:	40001800 	.word	0x40001800
 800e3e8:	40001c00 	.word	0x40001c00
 800e3ec:	40002000 	.word	0x40002000

0800e3f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e400:	2b01      	cmp	r3, #1
 800e402:	d101      	bne.n	800e408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e404:	2302      	movs	r3, #2
 800e406:	e05a      	b.n	800e4be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2202      	movs	r2, #2
 800e414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	689b      	ldr	r3, [r3, #8]
 800e426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e42e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	4313      	orrs	r3, r2
 800e438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	68fa      	ldr	r2, [r7, #12]
 800e440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a21      	ldr	r2, [pc, #132]	; (800e4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d022      	beq.n	800e492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e454:	d01d      	beq.n	800e492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a1d      	ldr	r2, [pc, #116]	; (800e4d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d018      	beq.n	800e492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a1b      	ldr	r2, [pc, #108]	; (800e4d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d013      	beq.n	800e492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a1a      	ldr	r2, [pc, #104]	; (800e4d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d00e      	beq.n	800e492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a18      	ldr	r2, [pc, #96]	; (800e4dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d009      	beq.n	800e492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a17      	ldr	r2, [pc, #92]	; (800e4e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d004      	beq.n	800e492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a15      	ldr	r2, [pc, #84]	; (800e4e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d10c      	bne.n	800e4ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3714      	adds	r7, #20
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	40010000 	.word	0x40010000
 800e4d0:	40000400 	.word	0x40000400
 800e4d4:	40000800 	.word	0x40000800
 800e4d8:	40000c00 	.word	0x40000c00
 800e4dc:	40010400 	.word	0x40010400
 800e4e0:	40014000 	.word	0x40014000
 800e4e4:	40001800 	.word	0x40001800

0800e4e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e4f0:	bf00      	nop
 800e4f2:	370c      	adds	r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e504:	bf00      	nop
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e510:	b084      	sub	sp, #16
 800e512:	b480      	push	{r7}
 800e514:	b085      	sub	sp, #20
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
 800e51a:	f107 001c 	add.w	r0, r7, #28
 800e51e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e526:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e528:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e52a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e52e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e532:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e536:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e53a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	4313      	orrs	r3, r2
 800e540:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e54a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e54e:	68fa      	ldr	r2, [r7, #12]
 800e550:	431a      	orrs	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e556:	2300      	movs	r3, #0
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3714      	adds	r7, #20
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	b004      	add	sp, #16
 800e564:	4770      	bx	lr

0800e566 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e566:	b480      	push	{r7}
 800e568:	b083      	sub	sp, #12
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e574:	4618      	mov	r0, r3
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	370c      	adds	r7, #12
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr

0800e5a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e5a2:	b480      	push	{r7}
 800e5a4:	b083      	sub	sp, #12
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2203      	movs	r2, #3
 800e5ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e5b0:	2300      	movs	r3, #0
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	370c      	adds	r7, #12
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr

0800e5be <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e5be:	b480      	push	{r7}
 800e5c0:	b083      	sub	sp, #12
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f003 0303 	and.w	r3, r3, #3
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	370c      	adds	r7, #12
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e5da:	b480      	push	{r7}
 800e5dc:	b085      	sub	sp, #20
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
 800e5e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e5f8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e5fe:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e604:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e606:	68fa      	ldr	r2, [r7, #12]
 800e608:	4313      	orrs	r3, r2
 800e60a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e614:	f023 030f 	bic.w	r3, r3, #15
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	431a      	orrs	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	3714      	adds	r7, #20
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr

0800e62e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e62e:	b480      	push	{r7}
 800e630:	b083      	sub	sp, #12
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	b2db      	uxtb	r3, r3
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	3314      	adds	r3, #20
 800e656:	461a      	mov	r2, r3
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	4413      	add	r3, r2
 800e65c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
}  
 800e662:	4618      	mov	r0, r3
 800e664:	3714      	adds	r7, #20
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr

0800e66e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e66e:	b480      	push	{r7}
 800e670:	b085      	sub	sp, #20
 800e672:	af00      	add	r7, sp, #0
 800e674:	6078      	str	r0, [r7, #4]
 800e676:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	685a      	ldr	r2, [r3, #4]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e694:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e69a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e6a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ac:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	431a      	orrs	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e6b8:	2300      	movs	r3, #0

}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3714      	adds	r7, #20
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr

0800e6c6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b088      	sub	sp, #32
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
 800e6ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e6d4:	2310      	movs	r3, #16
 800e6d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6d8:	2340      	movs	r3, #64	; 0x40
 800e6da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6e6:	f107 0308 	add.w	r3, r7, #8
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f7ff ff74 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e6f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6f6:	2110      	movs	r1, #16
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 fa19 	bl	800eb30 <SDMMC_GetCmdResp1>
 800e6fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e700:	69fb      	ldr	r3, [r7, #28]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3720      	adds	r7, #32
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b088      	sub	sp, #32
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e718:	2311      	movs	r3, #17
 800e71a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e71c:	2340      	movs	r3, #64	; 0x40
 800e71e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e720:	2300      	movs	r3, #0
 800e722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e728:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e72a:	f107 0308 	add.w	r3, r7, #8
 800e72e:	4619      	mov	r1, r3
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f7ff ff52 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e736:	f241 3288 	movw	r2, #5000	; 0x1388
 800e73a:	2111      	movs	r1, #17
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f9f7 	bl	800eb30 <SDMMC_GetCmdResp1>
 800e742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e744:	69fb      	ldr	r3, [r7, #28]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3720      	adds	r7, #32
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b088      	sub	sp, #32
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
 800e756:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e75c:	2312      	movs	r3, #18
 800e75e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e760:	2340      	movs	r3, #64	; 0x40
 800e762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e764:	2300      	movs	r3, #0
 800e766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e76c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e76e:	f107 0308 	add.w	r3, r7, #8
 800e772:	4619      	mov	r1, r3
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f7ff ff30 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e77a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e77e:	2112      	movs	r1, #18
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 f9d5 	bl	800eb30 <SDMMC_GetCmdResp1>
 800e786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e788:	69fb      	ldr	r3, [r7, #28]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3720      	adds	r7, #32
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e792:	b580      	push	{r7, lr}
 800e794:	b088      	sub	sp, #32
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
 800e79a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e7a0:	2318      	movs	r3, #24
 800e7a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e7a4:	2340      	movs	r3, #64	; 0x40
 800e7a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e7ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e7b2:	f107 0308 	add.w	r3, r7, #8
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff ff0e 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e7be:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7c2:	2118      	movs	r1, #24
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 f9b3 	bl	800eb30 <SDMMC_GetCmdResp1>
 800e7ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7cc:	69fb      	ldr	r3, [r7, #28]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3720      	adds	r7, #32
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b088      	sub	sp, #32
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
 800e7de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e7e4:	2319      	movs	r3, #25
 800e7e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e7e8:	2340      	movs	r3, #64	; 0x40
 800e7ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e7f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e7f6:	f107 0308 	add.w	r3, r7, #8
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7ff feec 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e802:	f241 3288 	movw	r2, #5000	; 0x1388
 800e806:	2119      	movs	r1, #25
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 f991 	bl	800eb30 <SDMMC_GetCmdResp1>
 800e80e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e810:	69fb      	ldr	r3, [r7, #28]
}
 800e812:	4618      	mov	r0, r3
 800e814:	3720      	adds	r7, #32
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
	...

0800e81c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b088      	sub	sp, #32
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e824:	2300      	movs	r3, #0
 800e826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e828:	230c      	movs	r3, #12
 800e82a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e82c:	2340      	movs	r3, #64	; 0x40
 800e82e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e830:	2300      	movs	r3, #0
 800e832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e838:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e83a:	f107 0308 	add.w	r3, r7, #8
 800e83e:	4619      	mov	r1, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff feca 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e846:	4a05      	ldr	r2, [pc, #20]	; (800e85c <SDMMC_CmdStopTransfer+0x40>)
 800e848:	210c      	movs	r1, #12
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f970 	bl	800eb30 <SDMMC_GetCmdResp1>
 800e850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e852:	69fb      	ldr	r3, [r7, #28]
}
 800e854:	4618      	mov	r0, r3
 800e856:	3720      	adds	r7, #32
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	05f5e100 	.word	0x05f5e100

0800e860 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b08a      	sub	sp, #40	; 0x28
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e870:	2307      	movs	r3, #7
 800e872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e874:	2340      	movs	r3, #64	; 0x40
 800e876:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e878:	2300      	movs	r3, #0
 800e87a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e87c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e880:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e882:	f107 0310 	add.w	r3, r7, #16
 800e886:	4619      	mov	r1, r3
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f7ff fea6 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e88e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e892:	2107      	movs	r1, #7
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f000 f94b 	bl	800eb30 <SDMMC_GetCmdResp1>
 800e89a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3728      	adds	r7, #40	; 0x28
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b088      	sub	sp, #32
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e8c4:	f107 0308 	add.w	r3, r7, #8
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7ff fe85 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fb65 	bl	800efa0 <SDMMC_GetCmdError>
 800e8d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8d8:	69fb      	ldr	r3, [r7, #28]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3720      	adds	r7, #32
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b088      	sub	sp, #32
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e8ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e8ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e8f0:	2308      	movs	r3, #8
 800e8f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e8f4:	2340      	movs	r3, #64	; 0x40
 800e8f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e8fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e900:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e902:	f107 0308 	add.w	r3, r7, #8
 800e906:	4619      	mov	r1, r3
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff fe66 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 faf8 	bl	800ef04 <SDMMC_GetCmdResp7>
 800e914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e916:	69fb      	ldr	r3, [r7, #28]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3720      	adds	r7, #32
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b088      	sub	sp, #32
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e92e:	2337      	movs	r3, #55	; 0x37
 800e930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e932:	2340      	movs	r3, #64	; 0x40
 800e934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e936:	2300      	movs	r3, #0
 800e938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e93e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e940:	f107 0308 	add.w	r3, r7, #8
 800e944:	4619      	mov	r1, r3
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7ff fe47 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e94c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e950:	2137      	movs	r1, #55	; 0x37
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 f8ec 	bl	800eb30 <SDMMC_GetCmdResp1>
 800e958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e95a:	69fb      	ldr	r3, [r7, #28]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3720      	adds	r7, #32
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b088      	sub	sp, #32
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e97a:	2329      	movs	r3, #41	; 0x29
 800e97c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e97e:	2340      	movs	r3, #64	; 0x40
 800e980:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e982:	2300      	movs	r3, #0
 800e984:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e98a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e98c:	f107 0308 	add.w	r3, r7, #8
 800e990:	4619      	mov	r1, r3
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7ff fe21 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 f9ff 	bl	800ed9c <SDMMC_GetCmdResp3>
 800e99e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9a0:	69fb      	ldr	r3, [r7, #28]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3720      	adds	r7, #32
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b088      	sub	sp, #32
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e9b8:	2306      	movs	r3, #6
 800e9ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9bc:	2340      	movs	r3, #64	; 0x40
 800e9be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9ca:	f107 0308 	add.w	r3, r7, #8
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f7ff fe02 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e9d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9da:	2106      	movs	r1, #6
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 f8a7 	bl	800eb30 <SDMMC_GetCmdResp1>
 800e9e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9e4:	69fb      	ldr	r3, [r7, #28]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3720      	adds	r7, #32
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b088      	sub	sp, #32
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e9fa:	2333      	movs	r3, #51	; 0x33
 800e9fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9fe:	2340      	movs	r3, #64	; 0x40
 800ea00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea02:	2300      	movs	r3, #0
 800ea04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea0c:	f107 0308 	add.w	r3, r7, #8
 800ea10:	4619      	mov	r1, r3
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f7ff fde1 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ea18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea1c:	2133      	movs	r1, #51	; 0x33
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f000 f886 	bl	800eb30 <SDMMC_GetCmdResp1>
 800ea24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea26:	69fb      	ldr	r3, [r7, #28]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3720      	adds	r7, #32
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b088      	sub	sp, #32
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ea3c:	2302      	movs	r3, #2
 800ea3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ea40:	23c0      	movs	r3, #192	; 0xc0
 800ea42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea44:	2300      	movs	r3, #0
 800ea46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea4e:	f107 0308 	add.w	r3, r7, #8
 800ea52:	4619      	mov	r1, r3
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f7ff fdc0 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f956 	bl	800ed0c <SDMMC_GetCmdResp2>
 800ea60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea62:	69fb      	ldr	r3, [r7, #28]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3720      	adds	r7, #32
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b088      	sub	sp, #32
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ea7a:	2309      	movs	r3, #9
 800ea7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ea7e:	23c0      	movs	r3, #192	; 0xc0
 800ea80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea82:	2300      	movs	r3, #0
 800ea84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea8c:	f107 0308 	add.w	r3, r7, #8
 800ea90:	4619      	mov	r1, r3
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7ff fda1 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 f937 	bl	800ed0c <SDMMC_GetCmdResp2>
 800ea9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaa0:	69fb      	ldr	r3, [r7, #28]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3720      	adds	r7, #32
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b088      	sub	sp, #32
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800eab4:	2300      	movs	r3, #0
 800eab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800eab8:	2303      	movs	r3, #3
 800eaba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eabc:	2340      	movs	r3, #64	; 0x40
 800eabe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eac0:	2300      	movs	r3, #0
 800eac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eac8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eaca:	f107 0308 	add.w	r3, r7, #8
 800eace:	4619      	mov	r1, r3
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f7ff fd82 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ead6:	683a      	ldr	r2, [r7, #0]
 800ead8:	2103      	movs	r1, #3
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 f99c 	bl	800ee18 <SDMMC_GetCmdResp6>
 800eae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eae2:	69fb      	ldr	r3, [r7, #28]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3720      	adds	r7, #32
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b088      	sub	sp, #32
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800eafa:	230d      	movs	r3, #13
 800eafc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eafe:	2340      	movs	r3, #64	; 0x40
 800eb00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb02:	2300      	movs	r3, #0
 800eb04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb0c:	f107 0308 	add.w	r3, r7, #8
 800eb10:	4619      	mov	r1, r3
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7ff fd61 	bl	800e5da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800eb18:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb1c:	210d      	movs	r1, #13
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 f806 	bl	800eb30 <SDMMC_GetCmdResp1>
 800eb24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb26:	69fb      	ldr	r3, [r7, #28]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3720      	adds	r7, #32
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b088      	sub	sp, #32
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	460b      	mov	r3, r1
 800eb3a:	607a      	str	r2, [r7, #4]
 800eb3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800eb3e:	4b70      	ldr	r3, [pc, #448]	; (800ed00 <SDMMC_GetCmdResp1+0x1d0>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a70      	ldr	r2, [pc, #448]	; (800ed04 <SDMMC_GetCmdResp1+0x1d4>)
 800eb44:	fba2 2303 	umull	r2, r3, r2, r3
 800eb48:	0a5a      	lsrs	r2, r3, #9
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	fb02 f303 	mul.w	r3, r2, r3
 800eb50:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	1e5a      	subs	r2, r3, #1
 800eb56:	61fa      	str	r2, [r7, #28]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d102      	bne.n	800eb62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb60:	e0c9      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb66:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d0ef      	beq.n	800eb52 <SDMMC_GetCmdResp1+0x22>
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1ea      	bne.n	800eb52 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb80:	f003 0304 	and.w	r3, r3, #4
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d004      	beq.n	800eb92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2204      	movs	r2, #4
 800eb8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb8e:	2304      	movs	r3, #4
 800eb90:	e0b1      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb96:	f003 0301 	and.w	r3, r3, #1
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d004      	beq.n	800eba8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2201      	movs	r2, #1
 800eba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eba4:	2301      	movs	r3, #1
 800eba6:	e0a6      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	22c5      	movs	r2, #197	; 0xc5
 800ebac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ebae:	68f8      	ldr	r0, [r7, #12]
 800ebb0:	f7ff fd3d 	bl	800e62e <SDIO_GetCommandResponse>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	7afb      	ldrb	r3, [r7, #11]
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d001      	beq.n	800ebc2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e099      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f7ff fd3f 	bl	800e648 <SDIO_GetResponse>
 800ebca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ebcc:	697a      	ldr	r2, [r7, #20]
 800ebce:	4b4e      	ldr	r3, [pc, #312]	; (800ed08 <SDMMC_GetCmdResp1+0x1d8>)
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d101      	bne.n	800ebda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	e08d      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	da02      	bge.n	800ebe6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ebe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ebe4:	e087      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d001      	beq.n	800ebf4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ebf0:	2340      	movs	r3, #64	; 0x40
 800ebf2:	e080      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ebfe:	2380      	movs	r3, #128	; 0x80
 800ec00:	e079      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d002      	beq.n	800ec12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ec0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec10:	e071      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d002      	beq.n	800ec22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ec1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec20:	e069      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ec2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec30:	e061      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d002      	beq.n	800ec42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ec3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec40:	e059      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d002      	beq.n	800ec52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ec4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec50:	e051      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d002      	beq.n	800ec62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ec5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ec60:	e049      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ec6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ec70:	e041      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d002      	beq.n	800ec82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ec7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec80:	e039      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d002      	beq.n	800ec92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ec8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ec90:	e031      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d002      	beq.n	800eca2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ec9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800eca0:	e029      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d002      	beq.n	800ecb2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ecac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ecb0:	e021      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d002      	beq.n	800ecc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ecbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ecc0:	e019      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d002      	beq.n	800ecd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ecd0:	e011      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d002      	beq.n	800ece2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ecdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ece0:	e009      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	f003 0308 	and.w	r3, r3, #8
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d002      	beq.n	800ecf2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ecec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ecf0:	e001      	b.n	800ecf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ecf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3720      	adds	r7, #32
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	20000000 	.word	0x20000000
 800ed04:	10624dd3 	.word	0x10624dd3
 800ed08:	fdffe008 	.word	0xfdffe008

0800ed0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b085      	sub	sp, #20
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ed14:	4b1f      	ldr	r3, [pc, #124]	; (800ed94 <SDMMC_GetCmdResp2+0x88>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a1f      	ldr	r2, [pc, #124]	; (800ed98 <SDMMC_GetCmdResp2+0x8c>)
 800ed1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed1e:	0a5b      	lsrs	r3, r3, #9
 800ed20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed24:	fb02 f303 	mul.w	r3, r2, r3
 800ed28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	1e5a      	subs	r2, r3, #1
 800ed2e:	60fa      	str	r2, [r7, #12]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d102      	bne.n	800ed3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed38:	e026      	b.n	800ed88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d0ef      	beq.n	800ed2a <SDMMC_GetCmdResp2+0x1e>
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1ea      	bne.n	800ed2a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed58:	f003 0304 	and.w	r3, r3, #4
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d004      	beq.n	800ed6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2204      	movs	r2, #4
 800ed64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed66:	2304      	movs	r3, #4
 800ed68:	e00e      	b.n	800ed88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed6e:	f003 0301 	and.w	r3, r3, #1
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d004      	beq.n	800ed80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2201      	movs	r2, #1
 800ed7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	e003      	b.n	800ed88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	22c5      	movs	r2, #197	; 0xc5
 800ed84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ed86:	2300      	movs	r3, #0
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3714      	adds	r7, #20
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr
 800ed94:	20000000 	.word	0x20000000
 800ed98:	10624dd3 	.word	0x10624dd3

0800ed9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b085      	sub	sp, #20
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eda4:	4b1a      	ldr	r3, [pc, #104]	; (800ee10 <SDMMC_GetCmdResp3+0x74>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a1a      	ldr	r2, [pc, #104]	; (800ee14 <SDMMC_GetCmdResp3+0x78>)
 800edaa:	fba2 2303 	umull	r2, r3, r2, r3
 800edae:	0a5b      	lsrs	r3, r3, #9
 800edb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800edb4:	fb02 f303 	mul.w	r3, r2, r3
 800edb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	1e5a      	subs	r2, r3, #1
 800edbe:	60fa      	str	r2, [r7, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d102      	bne.n	800edca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800edc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800edc8:	e01b      	b.n	800ee02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d0ef      	beq.n	800edba <SDMMC_GetCmdResp3+0x1e>
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1ea      	bne.n	800edba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ede8:	f003 0304 	and.w	r3, r3, #4
 800edec:	2b00      	cmp	r3, #0
 800edee:	d004      	beq.n	800edfa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2204      	movs	r2, #4
 800edf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800edf6:	2304      	movs	r3, #4
 800edf8:	e003      	b.n	800ee02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	22c5      	movs	r2, #197	; 0xc5
 800edfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ee00:	2300      	movs	r3, #0
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3714      	adds	r7, #20
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr
 800ee0e:	bf00      	nop
 800ee10:	20000000 	.word	0x20000000
 800ee14:	10624dd3 	.word	0x10624dd3

0800ee18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b088      	sub	sp, #32
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	460b      	mov	r3, r1
 800ee22:	607a      	str	r2, [r7, #4]
 800ee24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ee26:	4b35      	ldr	r3, [pc, #212]	; (800eefc <SDMMC_GetCmdResp6+0xe4>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a35      	ldr	r2, [pc, #212]	; (800ef00 <SDMMC_GetCmdResp6+0xe8>)
 800ee2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ee30:	0a5b      	lsrs	r3, r3, #9
 800ee32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee36:	fb02 f303 	mul.w	r3, r2, r3
 800ee3a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	1e5a      	subs	r2, r3, #1
 800ee40:	61fa      	str	r2, [r7, #28]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d102      	bne.n	800ee4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee4a:	e052      	b.n	800eef2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee50:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d0ef      	beq.n	800ee3c <SDMMC_GetCmdResp6+0x24>
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d1ea      	bne.n	800ee3c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee6a:	f003 0304 	and.w	r3, r3, #4
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d004      	beq.n	800ee7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2204      	movs	r2, #4
 800ee76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee78:	2304      	movs	r3, #4
 800ee7a:	e03a      	b.n	800eef2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee80:	f003 0301 	and.w	r3, r3, #1
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d004      	beq.n	800ee92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e02f      	b.n	800eef2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	f7ff fbcb 	bl	800e62e <SDIO_GetCommandResponse>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	7afb      	ldrb	r3, [r7, #11]
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d001      	beq.n	800eea6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eea2:	2301      	movs	r3, #1
 800eea4:	e025      	b.n	800eef2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	22c5      	movs	r2, #197	; 0xc5
 800eeaa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800eeac:	2100      	movs	r1, #0
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f7ff fbca 	bl	800e648 <SDIO_GetResponse>
 800eeb4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d106      	bne.n	800eece <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	0c1b      	lsrs	r3, r3, #16
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800eeca:	2300      	movs	r3, #0
 800eecc:	e011      	b.n	800eef2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d002      	beq.n	800eede <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eedc:	e009      	b.n	800eef2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d002      	beq.n	800eeee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eeec:	e001      	b.n	800eef2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eeee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3720      	adds	r7, #32
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	20000000 	.word	0x20000000
 800ef00:	10624dd3 	.word	0x10624dd3

0800ef04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b085      	sub	sp, #20
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ef0c:	4b22      	ldr	r3, [pc, #136]	; (800ef98 <SDMMC_GetCmdResp7+0x94>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a22      	ldr	r2, [pc, #136]	; (800ef9c <SDMMC_GetCmdResp7+0x98>)
 800ef12:	fba2 2303 	umull	r2, r3, r2, r3
 800ef16:	0a5b      	lsrs	r3, r3, #9
 800ef18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef1c:	fb02 f303 	mul.w	r3, r2, r3
 800ef20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	1e5a      	subs	r2, r3, #1
 800ef26:	60fa      	str	r2, [r7, #12]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d102      	bne.n	800ef32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef30:	e02c      	b.n	800ef8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d0ef      	beq.n	800ef22 <SDMMC_GetCmdResp7+0x1e>
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d1ea      	bne.n	800ef22 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef50:	f003 0304 	and.w	r3, r3, #4
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d004      	beq.n	800ef62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2204      	movs	r2, #4
 800ef5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef5e:	2304      	movs	r3, #4
 800ef60:	e014      	b.n	800ef8c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef66:	f003 0301 	and.w	r3, r3, #1
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d004      	beq.n	800ef78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2201      	movs	r2, #1
 800ef72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef74:	2301      	movs	r3, #1
 800ef76:	e009      	b.n	800ef8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d002      	beq.n	800ef8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2240      	movs	r2, #64	; 0x40
 800ef88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ef8a:	2300      	movs	r3, #0
  
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr
 800ef98:	20000000 	.word	0x20000000
 800ef9c:	10624dd3 	.word	0x10624dd3

0800efa0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800efa8:	4b11      	ldr	r3, [pc, #68]	; (800eff0 <SDMMC_GetCmdError+0x50>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a11      	ldr	r2, [pc, #68]	; (800eff4 <SDMMC_GetCmdError+0x54>)
 800efae:	fba2 2303 	umull	r2, r3, r2, r3
 800efb2:	0a5b      	lsrs	r3, r3, #9
 800efb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800efb8:	fb02 f303 	mul.w	r3, r2, r3
 800efbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	1e5a      	subs	r2, r3, #1
 800efc2:	60fa      	str	r2, [r7, #12]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d102      	bne.n	800efce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800efc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800efcc:	e009      	b.n	800efe2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d0f1      	beq.n	800efbe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	22c5      	movs	r2, #197	; 0xc5
 800efde:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800efe0:	2300      	movs	r3, #0
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3714      	adds	r7, #20
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	20000000 	.word	0x20000000
 800eff4:	10624dd3 	.word	0x10624dd3

0800eff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eff8:	b084      	sub	sp, #16
 800effa:	b580      	push	{r7, lr}
 800effc:	b084      	sub	sp, #16
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
 800f002:	f107 001c 	add.w	r0, r7, #28
 800f006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d122      	bne.n	800f056 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f014:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d105      	bne.n	800f04a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f001 fbe8 	bl	8010820 <USB_CoreReset>
 800f050:	4603      	mov	r3, r0
 800f052:	73fb      	strb	r3, [r7, #15]
 800f054:	e01a      	b.n	800f08c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f001 fbdc 	bl	8010820 <USB_CoreReset>
 800f068:	4603      	mov	r3, r0
 800f06a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d106      	bne.n	800f080 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f076:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	639a      	str	r2, [r3, #56]	; 0x38
 800f07e:	e005      	b.n	800f08c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f084:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f08e:	2b01      	cmp	r3, #1
 800f090:	d10b      	bne.n	800f0aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	f043 0206 	orr.w	r2, r3, #6
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	f043 0220 	orr.w	r2, r3, #32
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3710      	adds	r7, #16
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0b6:	b004      	add	sp, #16
 800f0b8:	4770      	bx	lr
	...

0800f0bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b087      	sub	sp, #28
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f0ca:	79fb      	ldrb	r3, [r7, #7]
 800f0cc:	2b02      	cmp	r3, #2
 800f0ce:	d165      	bne.n	800f19c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	4a41      	ldr	r2, [pc, #260]	; (800f1d8 <USB_SetTurnaroundTime+0x11c>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d906      	bls.n	800f0e6 <USB_SetTurnaroundTime+0x2a>
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	4a40      	ldr	r2, [pc, #256]	; (800f1dc <USB_SetTurnaroundTime+0x120>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d202      	bcs.n	800f0e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f0e0:	230f      	movs	r3, #15
 800f0e2:	617b      	str	r3, [r7, #20]
 800f0e4:	e062      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	4a3c      	ldr	r2, [pc, #240]	; (800f1dc <USB_SetTurnaroundTime+0x120>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d306      	bcc.n	800f0fc <USB_SetTurnaroundTime+0x40>
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	4a3b      	ldr	r2, [pc, #236]	; (800f1e0 <USB_SetTurnaroundTime+0x124>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d202      	bcs.n	800f0fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f0f6:	230e      	movs	r3, #14
 800f0f8:	617b      	str	r3, [r7, #20]
 800f0fa:	e057      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	4a38      	ldr	r2, [pc, #224]	; (800f1e0 <USB_SetTurnaroundTime+0x124>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d306      	bcc.n	800f112 <USB_SetTurnaroundTime+0x56>
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	4a37      	ldr	r2, [pc, #220]	; (800f1e4 <USB_SetTurnaroundTime+0x128>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d202      	bcs.n	800f112 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f10c:	230d      	movs	r3, #13
 800f10e:	617b      	str	r3, [r7, #20]
 800f110:	e04c      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	4a33      	ldr	r2, [pc, #204]	; (800f1e4 <USB_SetTurnaroundTime+0x128>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d306      	bcc.n	800f128 <USB_SetTurnaroundTime+0x6c>
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	4a32      	ldr	r2, [pc, #200]	; (800f1e8 <USB_SetTurnaroundTime+0x12c>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d802      	bhi.n	800f128 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f122:	230c      	movs	r3, #12
 800f124:	617b      	str	r3, [r7, #20]
 800f126:	e041      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	4a2f      	ldr	r2, [pc, #188]	; (800f1e8 <USB_SetTurnaroundTime+0x12c>)
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d906      	bls.n	800f13e <USB_SetTurnaroundTime+0x82>
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	4a2e      	ldr	r2, [pc, #184]	; (800f1ec <USB_SetTurnaroundTime+0x130>)
 800f134:	4293      	cmp	r3, r2
 800f136:	d802      	bhi.n	800f13e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f138:	230b      	movs	r3, #11
 800f13a:	617b      	str	r3, [r7, #20]
 800f13c:	e036      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	4a2a      	ldr	r2, [pc, #168]	; (800f1ec <USB_SetTurnaroundTime+0x130>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d906      	bls.n	800f154 <USB_SetTurnaroundTime+0x98>
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	4a29      	ldr	r2, [pc, #164]	; (800f1f0 <USB_SetTurnaroundTime+0x134>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d802      	bhi.n	800f154 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f14e:	230a      	movs	r3, #10
 800f150:	617b      	str	r3, [r7, #20]
 800f152:	e02b      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	4a26      	ldr	r2, [pc, #152]	; (800f1f0 <USB_SetTurnaroundTime+0x134>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d906      	bls.n	800f16a <USB_SetTurnaroundTime+0xae>
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	4a25      	ldr	r2, [pc, #148]	; (800f1f4 <USB_SetTurnaroundTime+0x138>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d202      	bcs.n	800f16a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f164:	2309      	movs	r3, #9
 800f166:	617b      	str	r3, [r7, #20]
 800f168:	e020      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	4a21      	ldr	r2, [pc, #132]	; (800f1f4 <USB_SetTurnaroundTime+0x138>)
 800f16e:	4293      	cmp	r3, r2
 800f170:	d306      	bcc.n	800f180 <USB_SetTurnaroundTime+0xc4>
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	4a20      	ldr	r2, [pc, #128]	; (800f1f8 <USB_SetTurnaroundTime+0x13c>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d802      	bhi.n	800f180 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f17a:	2308      	movs	r3, #8
 800f17c:	617b      	str	r3, [r7, #20]
 800f17e:	e015      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	4a1d      	ldr	r2, [pc, #116]	; (800f1f8 <USB_SetTurnaroundTime+0x13c>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d906      	bls.n	800f196 <USB_SetTurnaroundTime+0xda>
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	4a1c      	ldr	r2, [pc, #112]	; (800f1fc <USB_SetTurnaroundTime+0x140>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d202      	bcs.n	800f196 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f190:	2307      	movs	r3, #7
 800f192:	617b      	str	r3, [r7, #20]
 800f194:	e00a      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f196:	2306      	movs	r3, #6
 800f198:	617b      	str	r3, [r7, #20]
 800f19a:	e007      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f19c:	79fb      	ldrb	r3, [r7, #7]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d102      	bne.n	800f1a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f1a2:	2309      	movs	r3, #9
 800f1a4:	617b      	str	r3, [r7, #20]
 800f1a6:	e001      	b.n	800f1ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f1a8:	2309      	movs	r3, #9
 800f1aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	68da      	ldr	r2, [r3, #12]
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	029b      	lsls	r3, r3, #10
 800f1c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f1c4:	431a      	orrs	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	371c      	adds	r7, #28
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr
 800f1d8:	00d8acbf 	.word	0x00d8acbf
 800f1dc:	00e4e1c0 	.word	0x00e4e1c0
 800f1e0:	00f42400 	.word	0x00f42400
 800f1e4:	01067380 	.word	0x01067380
 800f1e8:	011a499f 	.word	0x011a499f
 800f1ec:	01312cff 	.word	0x01312cff
 800f1f0:	014ca43f 	.word	0x014ca43f
 800f1f4:	016e3600 	.word	0x016e3600
 800f1f8:	01a6ab1f 	.word	0x01a6ab1f
 800f1fc:	01e84800 	.word	0x01e84800

0800f200 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	689b      	ldr	r3, [r3, #8]
 800f20c:	f043 0201 	orr.w	r2, r3, #1
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f214:	2300      	movs	r3, #0
}
 800f216:	4618      	mov	r0, r3
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr

0800f222 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f222:	b480      	push	{r7}
 800f224:	b083      	sub	sp, #12
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	f023 0201 	bic.w	r2, r3, #1
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f236:	2300      	movs	r3, #0
}
 800f238:	4618      	mov	r0, r3
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	460b      	mov	r3, r1
 800f24e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f250:	2300      	movs	r3, #0
 800f252:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f260:	78fb      	ldrb	r3, [r7, #3]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d115      	bne.n	800f292 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f272:	2001      	movs	r0, #1
 800f274:	f7f7 fa40 	bl	80066f8 <HAL_Delay>
      ms++;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	3301      	adds	r3, #1
 800f27c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f001 fa3f 	bl	8010702 <USB_GetMode>
 800f284:	4603      	mov	r3, r0
 800f286:	2b01      	cmp	r3, #1
 800f288:	d01e      	beq.n	800f2c8 <USB_SetCurrentMode+0x84>
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2b31      	cmp	r3, #49	; 0x31
 800f28e:	d9f0      	bls.n	800f272 <USB_SetCurrentMode+0x2e>
 800f290:	e01a      	b.n	800f2c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f292:	78fb      	ldrb	r3, [r7, #3]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d115      	bne.n	800f2c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	68db      	ldr	r3, [r3, #12]
 800f29c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f2a4:	2001      	movs	r0, #1
 800f2a6:	f7f7 fa27 	bl	80066f8 <HAL_Delay>
      ms++;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f001 fa26 	bl	8010702 <USB_GetMode>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d005      	beq.n	800f2c8 <USB_SetCurrentMode+0x84>
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2b31      	cmp	r3, #49	; 0x31
 800f2c0:	d9f0      	bls.n	800f2a4 <USB_SetCurrentMode+0x60>
 800f2c2:	e001      	b.n	800f2c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	e005      	b.n	800f2d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2b32      	cmp	r3, #50	; 0x32
 800f2cc:	d101      	bne.n	800f2d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e000      	b.n	800f2d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f2d2:	2300      	movs	r3, #0
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3710      	adds	r7, #16
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f2dc:	b084      	sub	sp, #16
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b086      	sub	sp, #24
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
 800f2e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f2ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	613b      	str	r3, [r7, #16]
 800f2fa:	e009      	b.n	800f310 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	3340      	adds	r3, #64	; 0x40
 800f302:	009b      	lsls	r3, r3, #2
 800f304:	4413      	add	r3, r2
 800f306:	2200      	movs	r2, #0
 800f308:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	3301      	adds	r3, #1
 800f30e:	613b      	str	r3, [r7, #16]
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	2b0e      	cmp	r3, #14
 800f314:	d9f2      	bls.n	800f2fc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d11c      	bne.n	800f356 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f32a:	f043 0302 	orr.w	r3, r3, #2
 800f32e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f334:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	601a      	str	r2, [r3, #0]
 800f354:	e005      	b.n	800f362 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f35a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f368:	461a      	mov	r2, r3
 800f36a:	2300      	movs	r3, #0
 800f36c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f374:	4619      	mov	r1, r3
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f37c:	461a      	mov	r2, r3
 800f37e:	680b      	ldr	r3, [r1, #0]
 800f380:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f384:	2b01      	cmp	r3, #1
 800f386:	d10c      	bne.n	800f3a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d104      	bne.n	800f398 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f38e:	2100      	movs	r1, #0
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f000 f965 	bl	800f660 <USB_SetDevSpeed>
 800f396:	e008      	b.n	800f3aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f398:	2101      	movs	r1, #1
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f960 	bl	800f660 <USB_SetDevSpeed>
 800f3a0:	e003      	b.n	800f3aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f3a2:	2103      	movs	r1, #3
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 f95b 	bl	800f660 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f3aa:	2110      	movs	r1, #16
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 f8f3 	bl	800f598 <USB_FlushTxFifo>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 f91f 	bl	800f600 <USB_FlushRxFifo>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d001      	beq.n	800f3cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3de:	461a      	mov	r2, r3
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	613b      	str	r3, [r7, #16]
 800f3f4:	e043      	b.n	800f47e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	015a      	lsls	r2, r3, #5
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f40c:	d118      	bne.n	800f440 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d10a      	bne.n	800f42a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	015a      	lsls	r2, r3, #5
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	4413      	add	r3, r2
 800f41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f420:	461a      	mov	r2, r3
 800f422:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f426:	6013      	str	r3, [r2, #0]
 800f428:	e013      	b.n	800f452 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	015a      	lsls	r2, r3, #5
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	4413      	add	r3, r2
 800f432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f436:	461a      	mov	r2, r3
 800f438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f43c:	6013      	str	r3, [r2, #0]
 800f43e:	e008      	b.n	800f452 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	015a      	lsls	r2, r3, #5
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	4413      	add	r3, r2
 800f448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f44c:	461a      	mov	r2, r3
 800f44e:	2300      	movs	r3, #0
 800f450:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	015a      	lsls	r2, r3, #5
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	4413      	add	r3, r2
 800f45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f45e:	461a      	mov	r2, r3
 800f460:	2300      	movs	r3, #0
 800f462:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	015a      	lsls	r2, r3, #5
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	4413      	add	r3, r2
 800f46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f470:	461a      	mov	r2, r3
 800f472:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f476:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	3301      	adds	r3, #1
 800f47c:	613b      	str	r3, [r7, #16]
 800f47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f480:	693a      	ldr	r2, [r7, #16]
 800f482:	429a      	cmp	r2, r3
 800f484:	d3b7      	bcc.n	800f3f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f486:	2300      	movs	r3, #0
 800f488:	613b      	str	r3, [r7, #16]
 800f48a:	e043      	b.n	800f514 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	015a      	lsls	r2, r3, #5
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	4413      	add	r3, r2
 800f494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f49e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f4a2:	d118      	bne.n	800f4d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10a      	bne.n	800f4c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	015a      	lsls	r2, r3, #5
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f4bc:	6013      	str	r3, [r2, #0]
 800f4be:	e013      	b.n	800f4e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	015a      	lsls	r2, r3, #5
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	4413      	add	r3, r2
 800f4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f4d2:	6013      	str	r3, [r2, #0]
 800f4d4:	e008      	b.n	800f4e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	015a      	lsls	r2, r3, #5
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	4413      	add	r3, r2
 800f4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	015a      	lsls	r2, r3, #5
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	015a      	lsls	r2, r3, #5
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	4413      	add	r3, r2
 800f502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f506:	461a      	mov	r2, r3
 800f508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f50c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	3301      	adds	r3, #1
 800f512:	613b      	str	r3, [r7, #16]
 800f514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f516:	693a      	ldr	r2, [r7, #16]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d3b7      	bcc.n	800f48c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f522:	691b      	ldr	r3, [r3, #16]
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f52a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f52e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f53c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f540:	2b00      	cmp	r3, #0
 800f542:	d105      	bne.n	800f550 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	699b      	ldr	r3, [r3, #24]
 800f548:	f043 0210 	orr.w	r2, r3, #16
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	699a      	ldr	r2, [r3, #24]
 800f554:	4b0f      	ldr	r3, [pc, #60]	; (800f594 <USB_DevInit+0x2b8>)
 800f556:	4313      	orrs	r3, r2
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d005      	beq.n	800f56e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	699b      	ldr	r3, [r3, #24]
 800f566:	f043 0208 	orr.w	r2, r3, #8
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f570:	2b01      	cmp	r3, #1
 800f572:	d107      	bne.n	800f584 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	699b      	ldr	r3, [r3, #24]
 800f578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f57c:	f043 0304 	orr.w	r3, r3, #4
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f584:	7dfb      	ldrb	r3, [r7, #23]
}
 800f586:	4618      	mov	r0, r3
 800f588:	3718      	adds	r7, #24
 800f58a:	46bd      	mov	sp, r7
 800f58c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f590:	b004      	add	sp, #16
 800f592:	4770      	bx	lr
 800f594:	803c3800 	.word	0x803c3800

0800f598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	4a13      	ldr	r2, [pc, #76]	; (800f5fc <USB_FlushTxFifo+0x64>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d901      	bls.n	800f5b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f5b4:	2303      	movs	r3, #3
 800f5b6:	e01b      	b.n	800f5f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	691b      	ldr	r3, [r3, #16]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	daf2      	bge.n	800f5a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	019b      	lsls	r3, r3, #6
 800f5c8:	f043 0220 	orr.w	r2, r3, #32
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	4a08      	ldr	r2, [pc, #32]	; (800f5fc <USB_FlushTxFifo+0x64>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d901      	bls.n	800f5e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f5de:	2303      	movs	r3, #3
 800f5e0:	e006      	b.n	800f5f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	691b      	ldr	r3, [r3, #16]
 800f5e6:	f003 0320 	and.w	r3, r3, #32
 800f5ea:	2b20      	cmp	r3, #32
 800f5ec:	d0f0      	beq.n	800f5d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f5ee:	2300      	movs	r3, #0
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3714      	adds	r7, #20
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr
 800f5fc:	00030d40 	.word	0x00030d40

0800f600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f600:	b480      	push	{r7}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f608:	2300      	movs	r3, #0
 800f60a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	3301      	adds	r3, #1
 800f610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	4a11      	ldr	r2, [pc, #68]	; (800f65c <USB_FlushRxFifo+0x5c>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d901      	bls.n	800f61e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f61a:	2303      	movs	r3, #3
 800f61c:	e018      	b.n	800f650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	691b      	ldr	r3, [r3, #16]
 800f622:	2b00      	cmp	r3, #0
 800f624:	daf2      	bge.n	800f60c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f626:	2300      	movs	r3, #0
 800f628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2210      	movs	r2, #16
 800f62e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	3301      	adds	r3, #1
 800f634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	4a08      	ldr	r2, [pc, #32]	; (800f65c <USB_FlushRxFifo+0x5c>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d901      	bls.n	800f642 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f63e:	2303      	movs	r3, #3
 800f640:	e006      	b.n	800f650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	f003 0310 	and.w	r3, r3, #16
 800f64a:	2b10      	cmp	r3, #16
 800f64c:	d0f0      	beq.n	800f630 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f64e:	2300      	movs	r3, #0
}
 800f650:	4618      	mov	r0, r3
 800f652:	3714      	adds	r7, #20
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	00030d40 	.word	0x00030d40

0800f660 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f660:	b480      	push	{r7}
 800f662:	b085      	sub	sp, #20
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	460b      	mov	r3, r1
 800f66a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	78fb      	ldrb	r3, [r7, #3]
 800f67a:	68f9      	ldr	r1, [r7, #12]
 800f67c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f680:	4313      	orrs	r3, r2
 800f682:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f684:	2300      	movs	r3, #0
}
 800f686:	4618      	mov	r0, r3
 800f688:	3714      	adds	r7, #20
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr

0800f692 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f692:	b480      	push	{r7}
 800f694:	b087      	sub	sp, #28
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6a4:	689b      	ldr	r3, [r3, #8]
 800f6a6:	f003 0306 	and.w	r3, r3, #6
 800f6aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d102      	bne.n	800f6b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	75fb      	strb	r3, [r7, #23]
 800f6b6:	e00a      	b.n	800f6ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d002      	beq.n	800f6c4 <USB_GetDevSpeed+0x32>
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2b06      	cmp	r3, #6
 800f6c2:	d102      	bne.n	800f6ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f6c4:	2302      	movs	r3, #2
 800f6c6:	75fb      	strb	r3, [r7, #23]
 800f6c8:	e001      	b.n	800f6ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f6ca:	230f      	movs	r3, #15
 800f6cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	371c      	adds	r7, #28
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr

0800f6dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b085      	sub	sp, #20
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	785b      	ldrb	r3, [r3, #1]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d13a      	bne.n	800f76e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6fe:	69da      	ldr	r2, [r3, #28]
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	f003 030f 	and.w	r3, r3, #15
 800f708:	2101      	movs	r1, #1
 800f70a:	fa01 f303 	lsl.w	r3, r1, r3
 800f70e:	b29b      	uxth	r3, r3
 800f710:	68f9      	ldr	r1, [r7, #12]
 800f712:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f716:	4313      	orrs	r3, r2
 800f718:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	015a      	lsls	r2, r3, #5
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	4413      	add	r3, r2
 800f722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d155      	bne.n	800f7dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	015a      	lsls	r2, r3, #5
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	4413      	add	r3, r2
 800f738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	791b      	ldrb	r3, [r3, #4]
 800f74a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f74c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	059b      	lsls	r3, r3, #22
 800f752:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f754:	4313      	orrs	r3, r2
 800f756:	68ba      	ldr	r2, [r7, #8]
 800f758:	0151      	lsls	r1, r2, #5
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	440a      	add	r2, r1
 800f75e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f76a:	6013      	str	r3, [r2, #0]
 800f76c:	e036      	b.n	800f7dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f774:	69da      	ldr	r2, [r3, #28]
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	f003 030f 	and.w	r3, r3, #15
 800f77e:	2101      	movs	r1, #1
 800f780:	fa01 f303 	lsl.w	r3, r1, r3
 800f784:	041b      	lsls	r3, r3, #16
 800f786:	68f9      	ldr	r1, [r7, #12]
 800f788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f78c:	4313      	orrs	r3, r2
 800f78e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	015a      	lsls	r2, r3, #5
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	4413      	add	r3, r2
 800f798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d11a      	bne.n	800f7dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	015a      	lsls	r2, r3, #5
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	68db      	ldr	r3, [r3, #12]
 800f7b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	791b      	ldrb	r3, [r3, #4]
 800f7c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f7c2:	430b      	orrs	r3, r1
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	68ba      	ldr	r2, [r7, #8]
 800f7c8:	0151      	lsls	r1, r2, #5
 800f7ca:	68fa      	ldr	r2, [r7, #12]
 800f7cc:	440a      	add	r2, r1
 800f7ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr
	...

0800f7ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b085      	sub	sp, #20
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	785b      	ldrb	r3, [r3, #1]
 800f804:	2b01      	cmp	r3, #1
 800f806:	d161      	bne.n	800f8cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	015a      	lsls	r2, r3, #5
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	4413      	add	r3, r2
 800f810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f81a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f81e:	d11f      	bne.n	800f860 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	015a      	lsls	r2, r3, #5
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	4413      	add	r3, r2
 800f828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	68ba      	ldr	r2, [r7, #8]
 800f830:	0151      	lsls	r1, r2, #5
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	440a      	add	r2, r1
 800f836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f83a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f83e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	015a      	lsls	r2, r3, #5
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	4413      	add	r3, r2
 800f848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	0151      	lsls	r1, r2, #5
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	440a      	add	r2, r1
 800f856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f85a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f85e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	f003 030f 	and.w	r3, r3, #15
 800f870:	2101      	movs	r1, #1
 800f872:	fa01 f303 	lsl.w	r3, r1, r3
 800f876:	b29b      	uxth	r3, r3
 800f878:	43db      	mvns	r3, r3
 800f87a:	68f9      	ldr	r1, [r7, #12]
 800f87c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f880:	4013      	ands	r3, r2
 800f882:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f88a:	69da      	ldr	r2, [r3, #28]
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	f003 030f 	and.w	r3, r3, #15
 800f894:	2101      	movs	r1, #1
 800f896:	fa01 f303 	lsl.w	r3, r1, r3
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	43db      	mvns	r3, r3
 800f89e:	68f9      	ldr	r1, [r7, #12]
 800f8a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	015a      	lsls	r2, r3, #5
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	0159      	lsls	r1, r3, #5
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	440b      	add	r3, r1
 800f8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	4b35      	ldr	r3, [pc, #212]	; (800f99c <USB_DeactivateEndpoint+0x1b0>)
 800f8c6:	4013      	ands	r3, r2
 800f8c8:	600b      	str	r3, [r1, #0]
 800f8ca:	e060      	b.n	800f98e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	015a      	lsls	r2, r3, #5
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f8de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8e2:	d11f      	bne.n	800f924 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	015a      	lsls	r2, r3, #5
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	68ba      	ldr	r2, [r7, #8]
 800f8f4:	0151      	lsls	r1, r2, #5
 800f8f6:	68fa      	ldr	r2, [r7, #12]
 800f8f8:	440a      	add	r2, r1
 800f8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f902:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	015a      	lsls	r2, r3, #5
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	4413      	add	r3, r2
 800f90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	68ba      	ldr	r2, [r7, #8]
 800f914:	0151      	lsls	r1, r2, #5
 800f916:	68fa      	ldr	r2, [r7, #12]
 800f918:	440a      	add	r2, r1
 800f91a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f91e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f922:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f92a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	f003 030f 	and.w	r3, r3, #15
 800f934:	2101      	movs	r1, #1
 800f936:	fa01 f303 	lsl.w	r3, r1, r3
 800f93a:	041b      	lsls	r3, r3, #16
 800f93c:	43db      	mvns	r3, r3
 800f93e:	68f9      	ldr	r1, [r7, #12]
 800f940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f944:	4013      	ands	r3, r2
 800f946:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f94e:	69da      	ldr	r2, [r3, #28]
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	f003 030f 	and.w	r3, r3, #15
 800f958:	2101      	movs	r1, #1
 800f95a:	fa01 f303 	lsl.w	r3, r1, r3
 800f95e:	041b      	lsls	r3, r3, #16
 800f960:	43db      	mvns	r3, r3
 800f962:	68f9      	ldr	r1, [r7, #12]
 800f964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f968:	4013      	ands	r3, r2
 800f96a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	015a      	lsls	r2, r3, #5
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	4413      	add	r3, r2
 800f974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	0159      	lsls	r1, r3, #5
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	440b      	add	r3, r1
 800f982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f986:	4619      	mov	r1, r3
 800f988:	4b05      	ldr	r3, [pc, #20]	; (800f9a0 <USB_DeactivateEndpoint+0x1b4>)
 800f98a:	4013      	ands	r3, r2
 800f98c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f98e:	2300      	movs	r3, #0
}
 800f990:	4618      	mov	r0, r3
 800f992:	3714      	adds	r7, #20
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr
 800f99c:	ec337800 	.word	0xec337800
 800f9a0:	eff37800 	.word	0xeff37800

0800f9a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08a      	sub	sp, #40	; 0x28
 800f9a8:	af02      	add	r7, sp, #8
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	785b      	ldrb	r3, [r3, #1]
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	f040 815c 	bne.w	800fc7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	699b      	ldr	r3, [r3, #24]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d132      	bne.n	800fa34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f9ce:	69bb      	ldr	r3, [r7, #24]
 800f9d0:	015a      	lsls	r2, r3, #5
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9da:	691b      	ldr	r3, [r3, #16]
 800f9dc:	69ba      	ldr	r2, [r7, #24]
 800f9de:	0151      	lsls	r1, r2, #5
 800f9e0:	69fa      	ldr	r2, [r7, #28]
 800f9e2:	440a      	add	r2, r1
 800f9e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f9ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f9f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	015a      	lsls	r2, r3, #5
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9fe:	691b      	ldr	r3, [r3, #16]
 800fa00:	69ba      	ldr	r2, [r7, #24]
 800fa02:	0151      	lsls	r1, r2, #5
 800fa04:	69fa      	ldr	r2, [r7, #28]
 800fa06:	440a      	add	r2, r1
 800fa08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa12:	69bb      	ldr	r3, [r7, #24]
 800fa14:	015a      	lsls	r2, r3, #5
 800fa16:	69fb      	ldr	r3, [r7, #28]
 800fa18:	4413      	add	r3, r2
 800fa1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	69ba      	ldr	r2, [r7, #24]
 800fa22:	0151      	lsls	r1, r2, #5
 800fa24:	69fa      	ldr	r2, [r7, #28]
 800fa26:	440a      	add	r2, r1
 800fa28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa2c:	0cdb      	lsrs	r3, r3, #19
 800fa2e:	04db      	lsls	r3, r3, #19
 800fa30:	6113      	str	r3, [r2, #16]
 800fa32:	e074      	b.n	800fb1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	015a      	lsls	r2, r3, #5
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa40:	691b      	ldr	r3, [r3, #16]
 800fa42:	69ba      	ldr	r2, [r7, #24]
 800fa44:	0151      	lsls	r1, r2, #5
 800fa46:	69fa      	ldr	r2, [r7, #28]
 800fa48:	440a      	add	r2, r1
 800fa4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa4e:	0cdb      	lsrs	r3, r3, #19
 800fa50:	04db      	lsls	r3, r3, #19
 800fa52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa54:	69bb      	ldr	r3, [r7, #24]
 800fa56:	015a      	lsls	r2, r3, #5
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa60:	691b      	ldr	r3, [r3, #16]
 800fa62:	69ba      	ldr	r2, [r7, #24]
 800fa64:	0151      	lsls	r1, r2, #5
 800fa66:	69fa      	ldr	r2, [r7, #28]
 800fa68:	440a      	add	r2, r1
 800fa6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fa72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fa76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fa78:	69bb      	ldr	r3, [r7, #24]
 800fa7a:	015a      	lsls	r2, r3, #5
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	4413      	add	r3, r2
 800fa80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	6999      	ldr	r1, [r3, #24]
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	440b      	add	r3, r1
 800fa90:	1e59      	subs	r1, r3, #1
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	fbb1 f3f3 	udiv	r3, r1, r3
 800fa9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fa9c:	4b9d      	ldr	r3, [pc, #628]	; (800fd14 <USB_EPStartXfer+0x370>)
 800fa9e:	400b      	ands	r3, r1
 800faa0:	69b9      	ldr	r1, [r7, #24]
 800faa2:	0148      	lsls	r0, r1, #5
 800faa4:	69f9      	ldr	r1, [r7, #28]
 800faa6:	4401      	add	r1, r0
 800faa8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800faac:	4313      	orrs	r3, r2
 800faae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	015a      	lsls	r2, r3, #5
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	4413      	add	r3, r2
 800fab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fabc:	691a      	ldr	r2, [r3, #16]
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	699b      	ldr	r3, [r3, #24]
 800fac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fac6:	69b9      	ldr	r1, [r7, #24]
 800fac8:	0148      	lsls	r0, r1, #5
 800faca:	69f9      	ldr	r1, [r7, #28]
 800facc:	4401      	add	r1, r0
 800face:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fad2:	4313      	orrs	r3, r2
 800fad4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	791b      	ldrb	r3, [r3, #4]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d11f      	bne.n	800fb1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	015a      	lsls	r2, r3, #5
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	4413      	add	r3, r2
 800fae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	69ba      	ldr	r2, [r7, #24]
 800faee:	0151      	lsls	r1, r2, #5
 800faf0:	69fa      	ldr	r2, [r7, #28]
 800faf2:	440a      	add	r2, r1
 800faf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faf8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fafc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	015a      	lsls	r2, r3, #5
 800fb02:	69fb      	ldr	r3, [r7, #28]
 800fb04:	4413      	add	r3, r2
 800fb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb0a:	691b      	ldr	r3, [r3, #16]
 800fb0c:	69ba      	ldr	r2, [r7, #24]
 800fb0e:	0151      	lsls	r1, r2, #5
 800fb10:	69fa      	ldr	r2, [r7, #28]
 800fb12:	440a      	add	r2, r1
 800fb14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800fb1e:	79fb      	ldrb	r3, [r7, #7]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d14b      	bne.n	800fbbc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	695b      	ldr	r3, [r3, #20]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d009      	beq.n	800fb40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	015a      	lsls	r2, r3, #5
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	4413      	add	r3, r2
 800fb34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb38:	461a      	mov	r2, r3
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	695b      	ldr	r3, [r3, #20]
 800fb3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	791b      	ldrb	r3, [r3, #4]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d128      	bne.n	800fb9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d110      	bne.n	800fb7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	015a      	lsls	r2, r3, #5
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	4413      	add	r3, r2
 800fb60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	69ba      	ldr	r2, [r7, #24]
 800fb68:	0151      	lsls	r1, r2, #5
 800fb6a:	69fa      	ldr	r2, [r7, #28]
 800fb6c:	440a      	add	r2, r1
 800fb6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb76:	6013      	str	r3, [r2, #0]
 800fb78:	e00f      	b.n	800fb9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fb7a:	69bb      	ldr	r3, [r7, #24]
 800fb7c:	015a      	lsls	r2, r3, #5
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	4413      	add	r3, r2
 800fb82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	69ba      	ldr	r2, [r7, #24]
 800fb8a:	0151      	lsls	r1, r2, #5
 800fb8c:	69fa      	ldr	r2, [r7, #28]
 800fb8e:	440a      	add	r2, r1
 800fb90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fb9a:	69bb      	ldr	r3, [r7, #24]
 800fb9c:	015a      	lsls	r2, r3, #5
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	4413      	add	r3, r2
 800fba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	69ba      	ldr	r2, [r7, #24]
 800fbaa:	0151      	lsls	r1, r2, #5
 800fbac:	69fa      	ldr	r2, [r7, #28]
 800fbae:	440a      	add	r2, r1
 800fbb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fbb8:	6013      	str	r3, [r2, #0]
 800fbba:	e133      	b.n	800fe24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	015a      	lsls	r2, r3, #5
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	4413      	add	r3, r2
 800fbc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	69ba      	ldr	r2, [r7, #24]
 800fbcc:	0151      	lsls	r1, r2, #5
 800fbce:	69fa      	ldr	r2, [r7, #28]
 800fbd0:	440a      	add	r2, r1
 800fbd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fbda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	791b      	ldrb	r3, [r3, #4]
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d015      	beq.n	800fc10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	699b      	ldr	r3, [r3, #24]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f000 811b 	beq.w	800fe24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	f003 030f 	and.w	r3, r3, #15
 800fbfe:	2101      	movs	r1, #1
 800fc00:	fa01 f303 	lsl.w	r3, r1, r3
 800fc04:	69f9      	ldr	r1, [r7, #28]
 800fc06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc0a:	4313      	orrs	r3, r2
 800fc0c:	634b      	str	r3, [r1, #52]	; 0x34
 800fc0e:	e109      	b.n	800fe24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc16:	689b      	ldr	r3, [r3, #8]
 800fc18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d110      	bne.n	800fc42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	015a      	lsls	r2, r3, #5
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	4413      	add	r3, r2
 800fc28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	69ba      	ldr	r2, [r7, #24]
 800fc30:	0151      	lsls	r1, r2, #5
 800fc32:	69fa      	ldr	r2, [r7, #28]
 800fc34:	440a      	add	r2, r1
 800fc36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fc3e:	6013      	str	r3, [r2, #0]
 800fc40:	e00f      	b.n	800fc62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	015a      	lsls	r2, r3, #5
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	4413      	add	r3, r2
 800fc4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	69ba      	ldr	r2, [r7, #24]
 800fc52:	0151      	lsls	r1, r2, #5
 800fc54:	69fa      	ldr	r2, [r7, #28]
 800fc56:	440a      	add	r2, r1
 800fc58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	6919      	ldr	r1, [r3, #16]
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	781a      	ldrb	r2, [r3, #0]
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	699b      	ldr	r3, [r3, #24]
 800fc6e:	b298      	uxth	r0, r3
 800fc70:	79fb      	ldrb	r3, [r7, #7]
 800fc72:	9300      	str	r3, [sp, #0]
 800fc74:	4603      	mov	r3, r0
 800fc76:	68f8      	ldr	r0, [r7, #12]
 800fc78:	f000 fade 	bl	8010238 <USB_WritePacket>
 800fc7c:	e0d2      	b.n	800fe24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	015a      	lsls	r2, r3, #5
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	4413      	add	r3, r2
 800fc86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	69ba      	ldr	r2, [r7, #24]
 800fc8e:	0151      	lsls	r1, r2, #5
 800fc90:	69fa      	ldr	r2, [r7, #28]
 800fc92:	440a      	add	r2, r1
 800fc94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc98:	0cdb      	lsrs	r3, r3, #19
 800fc9a:	04db      	lsls	r3, r3, #19
 800fc9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	015a      	lsls	r2, r3, #5
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	4413      	add	r3, r2
 800fca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	69ba      	ldr	r2, [r7, #24]
 800fcae:	0151      	lsls	r1, r2, #5
 800fcb0:	69fa      	ldr	r2, [r7, #28]
 800fcb2:	440a      	add	r2, r1
 800fcb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fcbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fcc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	699b      	ldr	r3, [r3, #24]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d126      	bne.n	800fd18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	015a      	lsls	r2, r3, #5
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcd6:	691a      	ldr	r2, [r3, #16]
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	68db      	ldr	r3, [r3, #12]
 800fcdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fce0:	69b9      	ldr	r1, [r7, #24]
 800fce2:	0148      	lsls	r0, r1, #5
 800fce4:	69f9      	ldr	r1, [r7, #28]
 800fce6:	4401      	add	r1, r0
 800fce8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fcec:	4313      	orrs	r3, r2
 800fcee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	015a      	lsls	r2, r3, #5
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcfc:	691b      	ldr	r3, [r3, #16]
 800fcfe:	69ba      	ldr	r2, [r7, #24]
 800fd00:	0151      	lsls	r1, r2, #5
 800fd02:	69fa      	ldr	r2, [r7, #28]
 800fd04:	440a      	add	r2, r1
 800fd06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd0e:	6113      	str	r3, [r2, #16]
 800fd10:	e03a      	b.n	800fd88 <USB_EPStartXfer+0x3e4>
 800fd12:	bf00      	nop
 800fd14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	699a      	ldr	r2, [r3, #24]
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	4413      	add	r3, r2
 800fd22:	1e5a      	subs	r2, r3, #1
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	68db      	ldr	r3, [r3, #12]
 800fd32:	8afa      	ldrh	r2, [r7, #22]
 800fd34:	fb03 f202 	mul.w	r2, r3, r2
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fd3c:	69bb      	ldr	r3, [r7, #24]
 800fd3e:	015a      	lsls	r2, r3, #5
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	4413      	add	r3, r2
 800fd44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd48:	691a      	ldr	r2, [r3, #16]
 800fd4a:	8afb      	ldrh	r3, [r7, #22]
 800fd4c:	04d9      	lsls	r1, r3, #19
 800fd4e:	4b38      	ldr	r3, [pc, #224]	; (800fe30 <USB_EPStartXfer+0x48c>)
 800fd50:	400b      	ands	r3, r1
 800fd52:	69b9      	ldr	r1, [r7, #24]
 800fd54:	0148      	lsls	r0, r1, #5
 800fd56:	69f9      	ldr	r1, [r7, #28]
 800fd58:	4401      	add	r1, r0
 800fd5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	015a      	lsls	r2, r3, #5
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	4413      	add	r3, r2
 800fd6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6e:	691a      	ldr	r2, [r3, #16]
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	69db      	ldr	r3, [r3, #28]
 800fd74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd78:	69b9      	ldr	r1, [r7, #24]
 800fd7a:	0148      	lsls	r0, r1, #5
 800fd7c:	69f9      	ldr	r1, [r7, #28]
 800fd7e:	4401      	add	r1, r0
 800fd80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fd84:	4313      	orrs	r3, r2
 800fd86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fd88:	79fb      	ldrb	r3, [r7, #7]
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d10d      	bne.n	800fdaa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	691b      	ldr	r3, [r3, #16]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d009      	beq.n	800fdaa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	6919      	ldr	r1, [r3, #16]
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	015a      	lsls	r2, r3, #5
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	4413      	add	r3, r2
 800fda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda6:	460a      	mov	r2, r1
 800fda8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	791b      	ldrb	r3, [r3, #4]
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d128      	bne.n	800fe04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdb8:	689b      	ldr	r3, [r3, #8]
 800fdba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d110      	bne.n	800fde4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	015a      	lsls	r2, r3, #5
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	4413      	add	r3, r2
 800fdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	69ba      	ldr	r2, [r7, #24]
 800fdd2:	0151      	lsls	r1, r2, #5
 800fdd4:	69fa      	ldr	r2, [r7, #28]
 800fdd6:	440a      	add	r2, r1
 800fdd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fddc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fde0:	6013      	str	r3, [r2, #0]
 800fde2:	e00f      	b.n	800fe04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fde4:	69bb      	ldr	r3, [r7, #24]
 800fde6:	015a      	lsls	r2, r3, #5
 800fde8:	69fb      	ldr	r3, [r7, #28]
 800fdea:	4413      	add	r3, r2
 800fdec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	69ba      	ldr	r2, [r7, #24]
 800fdf4:	0151      	lsls	r1, r2, #5
 800fdf6:	69fa      	ldr	r2, [r7, #28]
 800fdf8:	440a      	add	r2, r1
 800fdfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fe04:	69bb      	ldr	r3, [r7, #24]
 800fe06:	015a      	lsls	r2, r3, #5
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	69ba      	ldr	r2, [r7, #24]
 800fe14:	0151      	lsls	r1, r2, #5
 800fe16:	69fa      	ldr	r2, [r7, #28]
 800fe18:	440a      	add	r2, r1
 800fe1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fe24:	2300      	movs	r3, #0
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3720      	adds	r7, #32
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	1ff80000 	.word	0x1ff80000

0800fe34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b087      	sub	sp, #28
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	4613      	mov	r3, r2
 800fe40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	785b      	ldrb	r3, [r3, #1]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	f040 80ce 	bne.w	800fff2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	699b      	ldr	r3, [r3, #24]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d132      	bne.n	800fec4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	015a      	lsls	r2, r3, #5
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	4413      	add	r3, r2
 800fe66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe6a:	691b      	ldr	r3, [r3, #16]
 800fe6c:	693a      	ldr	r2, [r7, #16]
 800fe6e:	0151      	lsls	r1, r2, #5
 800fe70:	697a      	ldr	r2, [r7, #20]
 800fe72:	440a      	add	r2, r1
 800fe74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fe7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fe80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	015a      	lsls	r2, r3, #5
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	4413      	add	r3, r2
 800fe8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe8e:	691b      	ldr	r3, [r3, #16]
 800fe90:	693a      	ldr	r2, [r7, #16]
 800fe92:	0151      	lsls	r1, r2, #5
 800fe94:	697a      	ldr	r2, [r7, #20]
 800fe96:	440a      	add	r2, r1
 800fe98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	015a      	lsls	r2, r3, #5
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	4413      	add	r3, r2
 800feaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feae:	691b      	ldr	r3, [r3, #16]
 800feb0:	693a      	ldr	r2, [r7, #16]
 800feb2:	0151      	lsls	r1, r2, #5
 800feb4:	697a      	ldr	r2, [r7, #20]
 800feb6:	440a      	add	r2, r1
 800feb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800febc:	0cdb      	lsrs	r3, r3, #19
 800febe:	04db      	lsls	r3, r3, #19
 800fec0:	6113      	str	r3, [r2, #16]
 800fec2:	e04e      	b.n	800ff62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	015a      	lsls	r2, r3, #5
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	4413      	add	r3, r2
 800fecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fed0:	691b      	ldr	r3, [r3, #16]
 800fed2:	693a      	ldr	r2, [r7, #16]
 800fed4:	0151      	lsls	r1, r2, #5
 800fed6:	697a      	ldr	r2, [r7, #20]
 800fed8:	440a      	add	r2, r1
 800feda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fede:	0cdb      	lsrs	r3, r3, #19
 800fee0:	04db      	lsls	r3, r3, #19
 800fee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	015a      	lsls	r2, r3, #5
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	4413      	add	r3, r2
 800feec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	693a      	ldr	r2, [r7, #16]
 800fef4:	0151      	lsls	r1, r2, #5
 800fef6:	697a      	ldr	r2, [r7, #20]
 800fef8:	440a      	add	r2, r1
 800fefa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fefe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ff02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ff06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	699a      	ldr	r2, [r3, #24]
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d903      	bls.n	800ff1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	68da      	ldr	r2, [r3, #12]
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	015a      	lsls	r2, r3, #5
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	4413      	add	r3, r2
 800ff24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff28:	691b      	ldr	r3, [r3, #16]
 800ff2a:	693a      	ldr	r2, [r7, #16]
 800ff2c:	0151      	lsls	r1, r2, #5
 800ff2e:	697a      	ldr	r2, [r7, #20]
 800ff30:	440a      	add	r2, r1
 800ff32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	015a      	lsls	r2, r3, #5
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	4413      	add	r3, r2
 800ff44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff48:	691a      	ldr	r2, [r3, #16]
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	699b      	ldr	r3, [r3, #24]
 800ff4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff52:	6939      	ldr	r1, [r7, #16]
 800ff54:	0148      	lsls	r0, r1, #5
 800ff56:	6979      	ldr	r1, [r7, #20]
 800ff58:	4401      	add	r1, r0
 800ff5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ff62:	79fb      	ldrb	r3, [r7, #7]
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d11e      	bne.n	800ffa6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	695b      	ldr	r3, [r3, #20]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d009      	beq.n	800ff84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	015a      	lsls	r2, r3, #5
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	4413      	add	r3, r2
 800ff78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	695b      	ldr	r3, [r3, #20]
 800ff82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	015a      	lsls	r2, r3, #5
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	693a      	ldr	r2, [r7, #16]
 800ff94:	0151      	lsls	r1, r2, #5
 800ff96:	697a      	ldr	r2, [r7, #20]
 800ff98:	440a      	add	r2, r1
 800ff9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ffa2:	6013      	str	r3, [r2, #0]
 800ffa4:	e097      	b.n	80100d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	015a      	lsls	r2, r3, #5
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	4413      	add	r3, r2
 800ffae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	693a      	ldr	r2, [r7, #16]
 800ffb6:	0151      	lsls	r1, r2, #5
 800ffb8:	697a      	ldr	r2, [r7, #20]
 800ffba:	440a      	add	r2, r1
 800ffbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ffc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	699b      	ldr	r3, [r3, #24]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f000 8083 	beq.w	80100d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	f003 030f 	and.w	r3, r3, #15
 800ffe0:	2101      	movs	r1, #1
 800ffe2:	fa01 f303 	lsl.w	r3, r1, r3
 800ffe6:	6979      	ldr	r1, [r7, #20]
 800ffe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffec:	4313      	orrs	r3, r2
 800ffee:	634b      	str	r3, [r1, #52]	; 0x34
 800fff0:	e071      	b.n	80100d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	015a      	lsls	r2, r3, #5
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	4413      	add	r3, r2
 800fffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	693a      	ldr	r2, [r7, #16]
 8010002:	0151      	lsls	r1, r2, #5
 8010004:	697a      	ldr	r2, [r7, #20]
 8010006:	440a      	add	r2, r1
 8010008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801000c:	0cdb      	lsrs	r3, r3, #19
 801000e:	04db      	lsls	r3, r3, #19
 8010010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	015a      	lsls	r2, r3, #5
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	4413      	add	r3, r2
 801001a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801001e:	691b      	ldr	r3, [r3, #16]
 8010020:	693a      	ldr	r2, [r7, #16]
 8010022:	0151      	lsls	r1, r2, #5
 8010024:	697a      	ldr	r2, [r7, #20]
 8010026:	440a      	add	r2, r1
 8010028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801002c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010034:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	699b      	ldr	r3, [r3, #24]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d003      	beq.n	8010046 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	68da      	ldr	r2, [r3, #12]
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	68da      	ldr	r2, [r3, #12]
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	015a      	lsls	r2, r3, #5
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	4413      	add	r3, r2
 8010056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	693a      	ldr	r2, [r7, #16]
 801005e:	0151      	lsls	r1, r2, #5
 8010060:	697a      	ldr	r2, [r7, #20]
 8010062:	440a      	add	r2, r1
 8010064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801006c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	015a      	lsls	r2, r3, #5
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	4413      	add	r3, r2
 8010076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801007a:	691a      	ldr	r2, [r3, #16]
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	69db      	ldr	r3, [r3, #28]
 8010080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010084:	6939      	ldr	r1, [r7, #16]
 8010086:	0148      	lsls	r0, r1, #5
 8010088:	6979      	ldr	r1, [r7, #20]
 801008a:	4401      	add	r1, r0
 801008c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010090:	4313      	orrs	r3, r2
 8010092:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010094:	79fb      	ldrb	r3, [r7, #7]
 8010096:	2b01      	cmp	r3, #1
 8010098:	d10d      	bne.n	80100b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	691b      	ldr	r3, [r3, #16]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d009      	beq.n	80100b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	6919      	ldr	r1, [r3, #16]
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	015a      	lsls	r2, r3, #5
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	4413      	add	r3, r2
 80100ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100b2:	460a      	mov	r2, r1
 80100b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	015a      	lsls	r2, r3, #5
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	4413      	add	r3, r2
 80100be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	693a      	ldr	r2, [r7, #16]
 80100c6:	0151      	lsls	r1, r2, #5
 80100c8:	697a      	ldr	r2, [r7, #20]
 80100ca:	440a      	add	r2, r1
 80100cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80100d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80100d6:	2300      	movs	r3, #0
}
 80100d8:	4618      	mov	r0, r3
 80100da:	371c      	adds	r7, #28
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr

080100e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b087      	sub	sp, #28
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80100ee:	2300      	movs	r3, #0
 80100f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	785b      	ldrb	r3, [r3, #1]
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d14a      	bne.n	8010198 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	015a      	lsls	r2, r3, #5
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	4413      	add	r3, r2
 801010c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801011a:	f040 8086 	bne.w	801022a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	015a      	lsls	r2, r3, #5
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	4413      	add	r3, r2
 8010128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	683a      	ldr	r2, [r7, #0]
 8010130:	7812      	ldrb	r2, [r2, #0]
 8010132:	0151      	lsls	r1, r2, #5
 8010134:	693a      	ldr	r2, [r7, #16]
 8010136:	440a      	add	r2, r1
 8010138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801013c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010140:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	015a      	lsls	r2, r3, #5
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	4413      	add	r3, r2
 801014c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	683a      	ldr	r2, [r7, #0]
 8010154:	7812      	ldrb	r2, [r2, #0]
 8010156:	0151      	lsls	r1, r2, #5
 8010158:	693a      	ldr	r2, [r7, #16]
 801015a:	440a      	add	r2, r1
 801015c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010164:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	3301      	adds	r3, #1
 801016a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f242 7210 	movw	r2, #10000	; 0x2710
 8010172:	4293      	cmp	r3, r2
 8010174:	d902      	bls.n	801017c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010176:	2301      	movs	r3, #1
 8010178:	75fb      	strb	r3, [r7, #23]
          break;
 801017a:	e056      	b.n	801022a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	781b      	ldrb	r3, [r3, #0]
 8010180:	015a      	lsls	r2, r3, #5
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	4413      	add	r3, r2
 8010186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010194:	d0e7      	beq.n	8010166 <USB_EPStopXfer+0x82>
 8010196:	e048      	b.n	801022a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	015a      	lsls	r2, r3, #5
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	4413      	add	r3, r2
 80101a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101b0:	d13b      	bne.n	801022a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	015a      	lsls	r2, r3, #5
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	4413      	add	r3, r2
 80101bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	683a      	ldr	r2, [r7, #0]
 80101c4:	7812      	ldrb	r2, [r2, #0]
 80101c6:	0151      	lsls	r1, r2, #5
 80101c8:	693a      	ldr	r2, [r7, #16]
 80101ca:	440a      	add	r2, r1
 80101cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80101d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	015a      	lsls	r2, r3, #5
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	4413      	add	r3, r2
 80101e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	683a      	ldr	r2, [r7, #0]
 80101e8:	7812      	ldrb	r2, [r2, #0]
 80101ea:	0151      	lsls	r1, r2, #5
 80101ec:	693a      	ldr	r2, [r7, #16]
 80101ee:	440a      	add	r2, r1
 80101f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	3301      	adds	r3, #1
 80101fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f242 7210 	movw	r2, #10000	; 0x2710
 8010206:	4293      	cmp	r3, r2
 8010208:	d902      	bls.n	8010210 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801020a:	2301      	movs	r3, #1
 801020c:	75fb      	strb	r3, [r7, #23]
          break;
 801020e:	e00c      	b.n	801022a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	015a      	lsls	r2, r3, #5
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	4413      	add	r3, r2
 801021a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010228:	d0e7      	beq.n	80101fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801022a:	7dfb      	ldrb	r3, [r7, #23]
}
 801022c:	4618      	mov	r0, r3
 801022e:	371c      	adds	r7, #28
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr

08010238 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010238:	b480      	push	{r7}
 801023a:	b089      	sub	sp, #36	; 0x24
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	4611      	mov	r1, r2
 8010244:	461a      	mov	r2, r3
 8010246:	460b      	mov	r3, r1
 8010248:	71fb      	strb	r3, [r7, #7]
 801024a:	4613      	mov	r3, r2
 801024c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801025a:	2b00      	cmp	r3, #0
 801025c:	d123      	bne.n	80102a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801025e:	88bb      	ldrh	r3, [r7, #4]
 8010260:	3303      	adds	r3, #3
 8010262:	089b      	lsrs	r3, r3, #2
 8010264:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010266:	2300      	movs	r3, #0
 8010268:	61bb      	str	r3, [r7, #24]
 801026a:	e018      	b.n	801029e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	031a      	lsls	r2, r3, #12
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	4413      	add	r3, r2
 8010274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010278:	461a      	mov	r2, r3
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	3301      	adds	r3, #1
 8010284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	3301      	adds	r3, #1
 801028a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	3301      	adds	r3, #1
 8010290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	3301      	adds	r3, #1
 8010296:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010298:	69bb      	ldr	r3, [r7, #24]
 801029a:	3301      	adds	r3, #1
 801029c:	61bb      	str	r3, [r7, #24]
 801029e:	69ba      	ldr	r2, [r7, #24]
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d3e2      	bcc.n	801026c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80102a6:	2300      	movs	r3, #0
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3724      	adds	r7, #36	; 0x24
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b08b      	sub	sp, #44	; 0x2c
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	60f8      	str	r0, [r7, #12]
 80102bc:	60b9      	str	r1, [r7, #8]
 80102be:	4613      	mov	r3, r2
 80102c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80102ca:	88fb      	ldrh	r3, [r7, #6]
 80102cc:	089b      	lsrs	r3, r3, #2
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80102d2:	88fb      	ldrh	r3, [r7, #6]
 80102d4:	f003 0303 	and.w	r3, r3, #3
 80102d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80102da:	2300      	movs	r3, #0
 80102dc:	623b      	str	r3, [r7, #32]
 80102de:	e014      	b.n	801030a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80102e0:	69bb      	ldr	r3, [r7, #24]
 80102e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80102ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ee:	3301      	adds	r3, #1
 80102f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80102f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f4:	3301      	adds	r3, #1
 80102f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80102f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fa:	3301      	adds	r3, #1
 80102fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80102fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010300:	3301      	adds	r3, #1
 8010302:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010304:	6a3b      	ldr	r3, [r7, #32]
 8010306:	3301      	adds	r3, #1
 8010308:	623b      	str	r3, [r7, #32]
 801030a:	6a3a      	ldr	r2, [r7, #32]
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	429a      	cmp	r2, r3
 8010310:	d3e6      	bcc.n	80102e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010312:	8bfb      	ldrh	r3, [r7, #30]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d01e      	beq.n	8010356 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010318:	2300      	movs	r3, #0
 801031a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010322:	461a      	mov	r2, r3
 8010324:	f107 0310 	add.w	r3, r7, #16
 8010328:	6812      	ldr	r2, [r2, #0]
 801032a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801032c:	693a      	ldr	r2, [r7, #16]
 801032e:	6a3b      	ldr	r3, [r7, #32]
 8010330:	b2db      	uxtb	r3, r3
 8010332:	00db      	lsls	r3, r3, #3
 8010334:	fa22 f303 	lsr.w	r3, r2, r3
 8010338:	b2da      	uxtb	r2, r3
 801033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033c:	701a      	strb	r2, [r3, #0]
      i++;
 801033e:	6a3b      	ldr	r3, [r7, #32]
 8010340:	3301      	adds	r3, #1
 8010342:	623b      	str	r3, [r7, #32]
      pDest++;
 8010344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010346:	3301      	adds	r3, #1
 8010348:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801034a:	8bfb      	ldrh	r3, [r7, #30]
 801034c:	3b01      	subs	r3, #1
 801034e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010350:	8bfb      	ldrh	r3, [r7, #30]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1ea      	bne.n	801032c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010358:	4618      	mov	r0, r3
 801035a:	372c      	adds	r7, #44	; 0x2c
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	785b      	ldrb	r3, [r3, #1]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d12c      	bne.n	80103da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	015a      	lsls	r2, r3, #5
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	4413      	add	r3, r2
 8010388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	db12      	blt.n	80103b8 <USB_EPSetStall+0x54>
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d00f      	beq.n	80103b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	015a      	lsls	r2, r3, #5
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	4413      	add	r3, r2
 80103a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	68ba      	ldr	r2, [r7, #8]
 80103a8:	0151      	lsls	r1, r2, #5
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	440a      	add	r2, r1
 80103ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80103b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	015a      	lsls	r2, r3, #5
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	4413      	add	r3, r2
 80103c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	68ba      	ldr	r2, [r7, #8]
 80103c8:	0151      	lsls	r1, r2, #5
 80103ca:	68fa      	ldr	r2, [r7, #12]
 80103cc:	440a      	add	r2, r1
 80103ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80103d6:	6013      	str	r3, [r2, #0]
 80103d8:	e02b      	b.n	8010432 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	015a      	lsls	r2, r3, #5
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	4413      	add	r3, r2
 80103e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	db12      	blt.n	8010412 <USB_EPSetStall+0xae>
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00f      	beq.n	8010412 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	015a      	lsls	r2, r3, #5
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	4413      	add	r3, r2
 80103fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	68ba      	ldr	r2, [r7, #8]
 8010402:	0151      	lsls	r1, r2, #5
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	440a      	add	r2, r1
 8010408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801040c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010410:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	015a      	lsls	r2, r3, #5
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	4413      	add	r3, r2
 801041a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	68ba      	ldr	r2, [r7, #8]
 8010422:	0151      	lsls	r1, r2, #5
 8010424:	68fa      	ldr	r2, [r7, #12]
 8010426:	440a      	add	r2, r1
 8010428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801042c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010430:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010432:	2300      	movs	r3, #0
}
 8010434:	4618      	mov	r0, r3
 8010436:	3714      	adds	r7, #20
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	785b      	ldrb	r3, [r3, #1]
 8010458:	2b01      	cmp	r3, #1
 801045a:	d128      	bne.n	80104ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	015a      	lsls	r2, r3, #5
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	4413      	add	r3, r2
 8010464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68ba      	ldr	r2, [r7, #8]
 801046c:	0151      	lsls	r1, r2, #5
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	440a      	add	r2, r1
 8010472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801047a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	791b      	ldrb	r3, [r3, #4]
 8010480:	2b03      	cmp	r3, #3
 8010482:	d003      	beq.n	801048c <USB_EPClearStall+0x4c>
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	791b      	ldrb	r3, [r3, #4]
 8010488:	2b02      	cmp	r3, #2
 801048a:	d138      	bne.n	80104fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	015a      	lsls	r2, r3, #5
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	4413      	add	r3, r2
 8010494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	0151      	lsls	r1, r2, #5
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	440a      	add	r2, r1
 80104a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104aa:	6013      	str	r3, [r2, #0]
 80104ac:	e027      	b.n	80104fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	015a      	lsls	r2, r3, #5
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	4413      	add	r3, r2
 80104b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	68ba      	ldr	r2, [r7, #8]
 80104be:	0151      	lsls	r1, r2, #5
 80104c0:	68fa      	ldr	r2, [r7, #12]
 80104c2:	440a      	add	r2, r1
 80104c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80104cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	791b      	ldrb	r3, [r3, #4]
 80104d2:	2b03      	cmp	r3, #3
 80104d4:	d003      	beq.n	80104de <USB_EPClearStall+0x9e>
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	791b      	ldrb	r3, [r3, #4]
 80104da:	2b02      	cmp	r3, #2
 80104dc:	d10f      	bne.n	80104fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	015a      	lsls	r2, r3, #5
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	4413      	add	r3, r2
 80104e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	68ba      	ldr	r2, [r7, #8]
 80104ee:	0151      	lsls	r1, r2, #5
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	440a      	add	r2, r1
 80104f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80104fe:	2300      	movs	r3, #0
}
 8010500:	4618      	mov	r0, r3
 8010502:	3714      	adds	r7, #20
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr

0801050c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801050c:	b480      	push	{r7}
 801050e:	b085      	sub	sp, #20
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	460b      	mov	r3, r1
 8010516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801052a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801052e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010536:	681a      	ldr	r2, [r3, #0]
 8010538:	78fb      	ldrb	r3, [r7, #3]
 801053a:	011b      	lsls	r3, r3, #4
 801053c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010540:	68f9      	ldr	r1, [r7, #12]
 8010542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010546:	4313      	orrs	r3, r2
 8010548:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801054a:	2300      	movs	r3, #0
}
 801054c:	4618      	mov	r0, r3
 801054e:	3714      	adds	r7, #20
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010558:	b480      	push	{r7}
 801055a:	b085      	sub	sp, #20
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010572:	f023 0303 	bic.w	r3, r3, #3
 8010576:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	68fa      	ldr	r2, [r7, #12]
 8010582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010586:	f023 0302 	bic.w	r3, r3, #2
 801058a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801058c:	2300      	movs	r3, #0
}
 801058e:	4618      	mov	r0, r3
 8010590:	3714      	adds	r7, #20
 8010592:	46bd      	mov	sp, r7
 8010594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010598:	4770      	bx	lr

0801059a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801059a:	b480      	push	{r7}
 801059c:	b085      	sub	sp, #20
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	68fa      	ldr	r2, [r7, #12]
 80105b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80105b4:	f023 0303 	bic.w	r3, r3, #3
 80105b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80105c8:	f043 0302 	orr.w	r3, r3, #2
 80105cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80105ce:	2300      	movs	r3, #0
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3714      	adds	r7, #20
 80105d4:	46bd      	mov	sp, r7
 80105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105da:	4770      	bx	lr

080105dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80105dc:	b480      	push	{r7}
 80105de:	b085      	sub	sp, #20
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	695b      	ldr	r3, [r3, #20]
 80105e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	699b      	ldr	r3, [r3, #24]
 80105ee:	68fa      	ldr	r2, [r7, #12]
 80105f0:	4013      	ands	r3, r2
 80105f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80105f4:	68fb      	ldr	r3, [r7, #12]
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3714      	adds	r7, #20
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr

08010602 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010602:	b480      	push	{r7}
 8010604:	b085      	sub	sp, #20
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010614:	699b      	ldr	r3, [r3, #24]
 8010616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801061e:	69db      	ldr	r3, [r3, #28]
 8010620:	68ba      	ldr	r2, [r7, #8]
 8010622:	4013      	ands	r3, r2
 8010624:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	0c1b      	lsrs	r3, r3, #16
}
 801062a:	4618      	mov	r0, r3
 801062c:	3714      	adds	r7, #20
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr

08010636 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010636:	b480      	push	{r7}
 8010638:	b085      	sub	sp, #20
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010648:	699b      	ldr	r3, [r3, #24]
 801064a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010652:	69db      	ldr	r3, [r3, #28]
 8010654:	68ba      	ldr	r2, [r7, #8]
 8010656:	4013      	ands	r3, r2
 8010658:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	b29b      	uxth	r3, r3
}
 801065e:	4618      	mov	r0, r3
 8010660:	3714      	adds	r7, #20
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr

0801066a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801066a:	b480      	push	{r7}
 801066c:	b085      	sub	sp, #20
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
 8010672:	460b      	mov	r3, r1
 8010674:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801067a:	78fb      	ldrb	r3, [r7, #3]
 801067c:	015a      	lsls	r2, r3, #5
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	4413      	add	r3, r2
 8010682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010690:	695b      	ldr	r3, [r3, #20]
 8010692:	68ba      	ldr	r2, [r7, #8]
 8010694:	4013      	ands	r3, r2
 8010696:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010698:	68bb      	ldr	r3, [r7, #8]
}
 801069a:	4618      	mov	r0, r3
 801069c:	3714      	adds	r7, #20
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr

080106a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80106a6:	b480      	push	{r7}
 80106a8:	b087      	sub	sp, #28
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
 80106ae:	460b      	mov	r3, r1
 80106b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106bc:	691b      	ldr	r3, [r3, #16]
 80106be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80106ca:	78fb      	ldrb	r3, [r7, #3]
 80106cc:	f003 030f 	and.w	r3, r3, #15
 80106d0:	68fa      	ldr	r2, [r7, #12]
 80106d2:	fa22 f303 	lsr.w	r3, r2, r3
 80106d6:	01db      	lsls	r3, r3, #7
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	693a      	ldr	r2, [r7, #16]
 80106dc:	4313      	orrs	r3, r2
 80106de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80106e0:	78fb      	ldrb	r3, [r7, #3]
 80106e2:	015a      	lsls	r2, r3, #5
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	4413      	add	r3, r2
 80106e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	693a      	ldr	r2, [r7, #16]
 80106f0:	4013      	ands	r3, r2
 80106f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80106f4:	68bb      	ldr	r3, [r7, #8]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	371c      	adds	r7, #28
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr

08010702 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010702:	b480      	push	{r7}
 8010704:	b083      	sub	sp, #12
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	695b      	ldr	r3, [r3, #20]
 801070e:	f003 0301 	and.w	r3, r3, #1
}
 8010712:	4618      	mov	r0, r3
 8010714:	370c      	adds	r7, #12
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr

0801071e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801071e:	b480      	push	{r7}
 8010720:	b085      	sub	sp, #20
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68fa      	ldr	r2, [r7, #12]
 8010734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010738:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801073c:	f023 0307 	bic.w	r3, r3, #7
 8010740:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010756:	2300      	movs	r3, #0
}
 8010758:	4618      	mov	r0, r3
 801075a:	3714      	adds	r7, #20
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010764:	b480      	push	{r7}
 8010766:	b087      	sub	sp, #28
 8010768:	af00      	add	r7, sp, #0
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	460b      	mov	r3, r1
 801076e:	607a      	str	r2, [r7, #4]
 8010770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	333c      	adds	r3, #60	; 0x3c
 801077a:	3304      	adds	r3, #4
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	4a26      	ldr	r2, [pc, #152]	; (801081c <USB_EP0_OutStart+0xb8>)
 8010784:	4293      	cmp	r3, r2
 8010786:	d90a      	bls.n	801079e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010798:	d101      	bne.n	801079e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801079a:	2300      	movs	r3, #0
 801079c:	e037      	b.n	801080e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107a4:	461a      	mov	r2, r3
 80107a6:	2300      	movs	r3, #0
 80107a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107b0:	691b      	ldr	r3, [r3, #16]
 80107b2:	697a      	ldr	r2, [r7, #20]
 80107b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80107bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107c4:	691b      	ldr	r3, [r3, #16]
 80107c6:	697a      	ldr	r2, [r7, #20]
 80107c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107cc:	f043 0318 	orr.w	r3, r3, #24
 80107d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107d8:	691b      	ldr	r3, [r3, #16]
 80107da:	697a      	ldr	r2, [r7, #20]
 80107dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80107e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80107e6:	7afb      	ldrb	r3, [r7, #11]
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d10f      	bne.n	801080c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107f2:	461a      	mov	r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	697a      	ldr	r2, [r7, #20]
 8010802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010806:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801080a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801080c:	2300      	movs	r3, #0
}
 801080e:	4618      	mov	r0, r3
 8010810:	371c      	adds	r7, #28
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr
 801081a:	bf00      	nop
 801081c:	4f54300a 	.word	0x4f54300a

08010820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010820:	b480      	push	{r7}
 8010822:	b085      	sub	sp, #20
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010828:	2300      	movs	r3, #0
 801082a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	3301      	adds	r3, #1
 8010830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	4a13      	ldr	r2, [pc, #76]	; (8010884 <USB_CoreReset+0x64>)
 8010836:	4293      	cmp	r3, r2
 8010838:	d901      	bls.n	801083e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801083a:	2303      	movs	r3, #3
 801083c:	e01b      	b.n	8010876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	691b      	ldr	r3, [r3, #16]
 8010842:	2b00      	cmp	r3, #0
 8010844:	daf2      	bge.n	801082c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010846:	2300      	movs	r3, #0
 8010848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	691b      	ldr	r3, [r3, #16]
 801084e:	f043 0201 	orr.w	r2, r3, #1
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	3301      	adds	r3, #1
 801085a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	4a09      	ldr	r2, [pc, #36]	; (8010884 <USB_CoreReset+0x64>)
 8010860:	4293      	cmp	r3, r2
 8010862:	d901      	bls.n	8010868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010864:	2303      	movs	r3, #3
 8010866:	e006      	b.n	8010876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	691b      	ldr	r3, [r3, #16]
 801086c:	f003 0301 	and.w	r3, r3, #1
 8010870:	2b01      	cmp	r3, #1
 8010872:	d0f0      	beq.n	8010856 <USB_CoreReset+0x36>

  return HAL_OK;
 8010874:	2300      	movs	r3, #0
}
 8010876:	4618      	mov	r0, r3
 8010878:	3714      	adds	r7, #20
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	00030d40 	.word	0x00030d40

08010888 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801088c:	4904      	ldr	r1, [pc, #16]	; (80108a0 <MX_FATFS_Init+0x18>)
 801088e:	4805      	ldr	r0, [pc, #20]	; (80108a4 <MX_FATFS_Init+0x1c>)
 8010890:	f006 fb58 	bl	8016f44 <FATFS_LinkDriver>
 8010894:	4603      	mov	r3, r0
 8010896:	461a      	mov	r2, r3
 8010898:	4b03      	ldr	r3, [pc, #12]	; (80108a8 <MX_FATFS_Init+0x20>)
 801089a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801089c:	bf00      	nop
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	20006798 	.word	0x20006798
 80108a4:	080185f4 	.word	0x080185f4
 80108a8:	20006794 	.word	0x20006794

080108ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80108ac:	b480      	push	{r7}
 80108ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80108b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr

080108bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80108c2:	2300      	movs	r3, #0
 80108c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80108c6:	f000 f896 	bl	80109f6 <BSP_SD_IsDetected>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d001      	beq.n	80108d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80108d0:	2301      	movs	r3, #1
 80108d2:	e012      	b.n	80108fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80108d4:	480b      	ldr	r0, [pc, #44]	; (8010904 <BSP_SD_Init+0x48>)
 80108d6:	f7fb fc7b 	bl	800c1d0 <HAL_SD_Init>
 80108da:	4603      	mov	r3, r0
 80108dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80108de:	79fb      	ldrb	r3, [r7, #7]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d109      	bne.n	80108f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80108e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80108e8:	4806      	ldr	r0, [pc, #24]	; (8010904 <BSP_SD_Init+0x48>)
 80108ea:	f7fc fd97 	bl	800d41c <HAL_SD_ConfigWideBusOperation>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d001      	beq.n	80108f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80108f4:	2301      	movs	r3, #1
 80108f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80108f8:	79fb      	ldrb	r3, [r7, #7]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3708      	adds	r7, #8
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
 8010902:	bf00      	nop
 8010904:	200003a0 	.word	0x200003a0

08010908 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b086      	sub	sp, #24
 801090c:	af00      	add	r7, sp, #0
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010914:	2300      	movs	r3, #0
 8010916:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	68ba      	ldr	r2, [r7, #8]
 801091c:	68f9      	ldr	r1, [r7, #12]
 801091e:	4806      	ldr	r0, [pc, #24]	; (8010938 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010920:	f7fc f86a 	bl	800c9f8 <HAL_SD_ReadBlocks_DMA>
 8010924:	4603      	mov	r3, r0
 8010926:	2b00      	cmp	r3, #0
 8010928:	d001      	beq.n	801092e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801092a:	2301      	movs	r3, #1
 801092c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801092e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010930:	4618      	mov	r0, r3
 8010932:	3718      	adds	r7, #24
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	200003a0 	.word	0x200003a0

0801093c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b086      	sub	sp, #24
 8010940:	af00      	add	r7, sp, #0
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010948:	2300      	movs	r3, #0
 801094a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	68ba      	ldr	r2, [r7, #8]
 8010950:	68f9      	ldr	r1, [r7, #12]
 8010952:	4806      	ldr	r0, [pc, #24]	; (801096c <BSP_SD_WriteBlocks_DMA+0x30>)
 8010954:	f7fc f930 	bl	800cbb8 <HAL_SD_WriteBlocks_DMA>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d001      	beq.n	8010962 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801095e:	2301      	movs	r3, #1
 8010960:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010962:	7dfb      	ldrb	r3, [r7, #23]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3718      	adds	r7, #24
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	200003a0 	.word	0x200003a0

08010970 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010974:	4805      	ldr	r0, [pc, #20]	; (801098c <BSP_SD_GetCardState+0x1c>)
 8010976:	f7fc fdeb 	bl	800d550 <HAL_SD_GetCardState>
 801097a:	4603      	mov	r3, r0
 801097c:	2b04      	cmp	r3, #4
 801097e:	bf14      	ite	ne
 8010980:	2301      	movne	r3, #1
 8010982:	2300      	moveq	r3, #0
 8010984:	b2db      	uxtb	r3, r3
}
 8010986:	4618      	mov	r0, r3
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	200003a0 	.word	0x200003a0

08010990 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010998:	6879      	ldr	r1, [r7, #4]
 801099a:	4803      	ldr	r0, [pc, #12]	; (80109a8 <BSP_SD_GetCardInfo+0x18>)
 801099c:	f7fc fd12 	bl	800d3c4 <HAL_SD_GetCardInfo>
}
 80109a0:	bf00      	nop
 80109a2:	3708      	adds	r7, #8
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	200003a0 	.word	0x200003a0

080109ac <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80109b4:	f000 f818 	bl	80109e8 <BSP_SD_AbortCallback>
}
 80109b8:	bf00      	nop
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80109c8:	f000 f9a8 	bl	8010d1c <BSP_SD_WriteCpltCallback>
}
 80109cc:	bf00      	nop
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80109dc:	f000 f9aa 	bl	8010d34 <BSP_SD_ReadCpltCallback>
}
 80109e0:	bf00      	nop
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80109e8:	b480      	push	{r7}
 80109ea:	af00      	add	r7, sp, #0

}
 80109ec:	bf00      	nop
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b082      	sub	sp, #8
 80109fa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80109fc:	2301      	movs	r3, #1
 80109fe:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010a00:	f000 f80c 	bl	8010a1c <BSP_PlatformIsDetected>
 8010a04:	4603      	mov	r3, r0
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d101      	bne.n	8010a0e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010a0e:	79fb      	ldrb	r3, [r7, #7]
 8010a10:	b2db      	uxtb	r3, r3
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
	...

08010a1c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010a22:	2301      	movs	r3, #1
 8010a24:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010a26:	2180      	movs	r1, #128	; 0x80
 8010a28:	4806      	ldr	r0, [pc, #24]	; (8010a44 <BSP_PlatformIsDetected+0x28>)
 8010a2a:	f7f7 ffad 	bl	8008988 <HAL_GPIO_ReadPin>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d001      	beq.n	8010a38 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8010a34:	2300      	movs	r3, #0
 8010a36:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010a38:	79fb      	ldrb	r3, [r7, #7]
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3708      	adds	r7, #8
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	40020800 	.word	0x40020800

08010a48 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b084      	sub	sp, #16
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010a50:	f7f5 fe46 	bl	80066e0 <HAL_GetTick>
 8010a54:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010a56:	e006      	b.n	8010a66 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010a58:	f7ff ff8a 	bl	8010970 <BSP_SD_GetCardState>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d101      	bne.n	8010a66 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010a62:	2300      	movs	r3, #0
 8010a64:	e009      	b.n	8010a7a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010a66:	f7f5 fe3b 	bl	80066e0 <HAL_GetTick>
 8010a6a:	4602      	mov	r2, r0
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	1ad3      	subs	r3, r2, r3
 8010a70:	687a      	ldr	r2, [r7, #4]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d8f0      	bhi.n	8010a58 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
	...

08010a84 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010a8e:	4b0b      	ldr	r3, [pc, #44]	; (8010abc <SD_CheckStatus+0x38>)
 8010a90:	2201      	movs	r2, #1
 8010a92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010a94:	f7ff ff6c 	bl	8010970 <BSP_SD_GetCardState>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d107      	bne.n	8010aae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010a9e:	4b07      	ldr	r3, [pc, #28]	; (8010abc <SD_CheckStatus+0x38>)
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	f023 0301 	bic.w	r3, r3, #1
 8010aa8:	b2da      	uxtb	r2, r3
 8010aaa:	4b04      	ldr	r3, [pc, #16]	; (8010abc <SD_CheckStatus+0x38>)
 8010aac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010aae:	4b03      	ldr	r3, [pc, #12]	; (8010abc <SD_CheckStatus+0x38>)
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	b2db      	uxtb	r3, r3
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3708      	adds	r7, #8
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	20000009 	.word	0x20000009

08010ac0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010aca:	f7ff fef7 	bl	80108bc <BSP_SD_Init>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d107      	bne.n	8010ae4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010ad4:	79fb      	ldrb	r3, [r7, #7]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7ff ffd4 	bl	8010a84 <SD_CheckStatus>
 8010adc:	4603      	mov	r3, r0
 8010ade:	461a      	mov	r2, r3
 8010ae0:	4b04      	ldr	r3, [pc, #16]	; (8010af4 <SD_initialize+0x34>)
 8010ae2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010ae4:	4b03      	ldr	r3, [pc, #12]	; (8010af4 <SD_initialize+0x34>)
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	b2db      	uxtb	r3, r3
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3708      	adds	r7, #8
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	20000009 	.word	0x20000009

08010af8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	4603      	mov	r3, r0
 8010b00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010b02:	79fb      	ldrb	r3, [r7, #7]
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff ffbd 	bl	8010a84 <SD_CheckStatus>
 8010b0a:	4603      	mov	r3, r0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3708      	adds	r7, #8
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60b9      	str	r1, [r7, #8]
 8010b1c:	607a      	str	r2, [r7, #4]
 8010b1e:	603b      	str	r3, [r7, #0]
 8010b20:	4603      	mov	r3, r0
 8010b22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010b24:	2301      	movs	r3, #1
 8010b26:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010b28:	f247 5030 	movw	r0, #30000	; 0x7530
 8010b2c:	f7ff ff8c 	bl	8010a48 <SD_CheckStatusWithTimeout>
 8010b30:	4603      	mov	r3, r0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	da01      	bge.n	8010b3a <SD_read+0x26>
  {
    return res;
 8010b36:	7dfb      	ldrb	r3, [r7, #23]
 8010b38:	e03b      	b.n	8010bb2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010b3a:	683a      	ldr	r2, [r7, #0]
 8010b3c:	6879      	ldr	r1, [r7, #4]
 8010b3e:	68b8      	ldr	r0, [r7, #8]
 8010b40:	f7ff fee2 	bl	8010908 <BSP_SD_ReadBlocks_DMA>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d132      	bne.n	8010bb0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010b4a:	4b1c      	ldr	r3, [pc, #112]	; (8010bbc <SD_read+0xa8>)
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010b50:	f7f5 fdc6 	bl	80066e0 <HAL_GetTick>
 8010b54:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010b56:	bf00      	nop
 8010b58:	4b18      	ldr	r3, [pc, #96]	; (8010bbc <SD_read+0xa8>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d108      	bne.n	8010b72 <SD_read+0x5e>
 8010b60:	f7f5 fdbe 	bl	80066e0 <HAL_GetTick>
 8010b64:	4602      	mov	r2, r0
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	1ad3      	subs	r3, r2, r3
 8010b6a:	f247 522f 	movw	r2, #29999	; 0x752f
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	d9f2      	bls.n	8010b58 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010b72:	4b12      	ldr	r3, [pc, #72]	; (8010bbc <SD_read+0xa8>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d102      	bne.n	8010b80 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	75fb      	strb	r3, [r7, #23]
 8010b7e:	e017      	b.n	8010bb0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010b80:	4b0e      	ldr	r3, [pc, #56]	; (8010bbc <SD_read+0xa8>)
 8010b82:	2200      	movs	r2, #0
 8010b84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010b86:	f7f5 fdab 	bl	80066e0 <HAL_GetTick>
 8010b8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010b8c:	e007      	b.n	8010b9e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010b8e:	f7ff feef 	bl	8010970 <BSP_SD_GetCardState>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d102      	bne.n	8010b9e <SD_read+0x8a>
          {
            res = RES_OK;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010b9c:	e008      	b.n	8010bb0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010b9e:	f7f5 fd9f 	bl	80066e0 <HAL_GetTick>
 8010ba2:	4602      	mov	r2, r0
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	1ad3      	subs	r3, r2, r3
 8010ba8:	f247 522f 	movw	r2, #29999	; 0x752f
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d9ee      	bls.n	8010b8e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3718      	adds	r7, #24
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	200067a0 	.word	0x200067a0

08010bc0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b086      	sub	sp, #24
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	60b9      	str	r1, [r7, #8]
 8010bc8:	607a      	str	r2, [r7, #4]
 8010bca:	603b      	str	r3, [r7, #0]
 8010bcc:	4603      	mov	r3, r0
 8010bce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010bd4:	4b24      	ldr	r3, [pc, #144]	; (8010c68 <SD_write+0xa8>)
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010bda:	f247 5030 	movw	r0, #30000	; 0x7530
 8010bde:	f7ff ff33 	bl	8010a48 <SD_CheckStatusWithTimeout>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	da01      	bge.n	8010bec <SD_write+0x2c>
  {
    return res;
 8010be8:	7dfb      	ldrb	r3, [r7, #23]
 8010bea:	e038      	b.n	8010c5e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010bec:	683a      	ldr	r2, [r7, #0]
 8010bee:	6879      	ldr	r1, [r7, #4]
 8010bf0:	68b8      	ldr	r0, [r7, #8]
 8010bf2:	f7ff fea3 	bl	801093c <BSP_SD_WriteBlocks_DMA>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d12f      	bne.n	8010c5c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010bfc:	f7f5 fd70 	bl	80066e0 <HAL_GetTick>
 8010c00:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010c02:	bf00      	nop
 8010c04:	4b18      	ldr	r3, [pc, #96]	; (8010c68 <SD_write+0xa8>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d108      	bne.n	8010c1e <SD_write+0x5e>
 8010c0c:	f7f5 fd68 	bl	80066e0 <HAL_GetTick>
 8010c10:	4602      	mov	r2, r0
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	1ad3      	subs	r3, r2, r3
 8010c16:	f247 522f 	movw	r2, #29999	; 0x752f
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d9f2      	bls.n	8010c04 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010c1e:	4b12      	ldr	r3, [pc, #72]	; (8010c68 <SD_write+0xa8>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d102      	bne.n	8010c2c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010c26:	2301      	movs	r3, #1
 8010c28:	75fb      	strb	r3, [r7, #23]
 8010c2a:	e017      	b.n	8010c5c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010c2c:	4b0e      	ldr	r3, [pc, #56]	; (8010c68 <SD_write+0xa8>)
 8010c2e:	2200      	movs	r2, #0
 8010c30:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010c32:	f7f5 fd55 	bl	80066e0 <HAL_GetTick>
 8010c36:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010c38:	e007      	b.n	8010c4a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c3a:	f7ff fe99 	bl	8010970 <BSP_SD_GetCardState>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d102      	bne.n	8010c4a <SD_write+0x8a>
          {
            res = RES_OK;
 8010c44:	2300      	movs	r3, #0
 8010c46:	75fb      	strb	r3, [r7, #23]
            break;
 8010c48:	e008      	b.n	8010c5c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010c4a:	f7f5 fd49 	bl	80066e0 <HAL_GetTick>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	1ad3      	subs	r3, r2, r3
 8010c54:	f247 522f 	movw	r2, #29999	; 0x752f
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d9ee      	bls.n	8010c3a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3718      	adds	r7, #24
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	2000679c 	.word	0x2000679c

08010c6c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b08c      	sub	sp, #48	; 0x30
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	4603      	mov	r3, r0
 8010c74:	603a      	str	r2, [r7, #0]
 8010c76:	71fb      	strb	r3, [r7, #7]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010c82:	4b25      	ldr	r3, [pc, #148]	; (8010d18 <SD_ioctl+0xac>)
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	b2db      	uxtb	r3, r3
 8010c88:	f003 0301 	and.w	r3, r3, #1
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d001      	beq.n	8010c94 <SD_ioctl+0x28>
 8010c90:	2303      	movs	r3, #3
 8010c92:	e03c      	b.n	8010d0e <SD_ioctl+0xa2>

  switch (cmd)
 8010c94:	79bb      	ldrb	r3, [r7, #6]
 8010c96:	2b03      	cmp	r3, #3
 8010c98:	d834      	bhi.n	8010d04 <SD_ioctl+0x98>
 8010c9a:	a201      	add	r2, pc, #4	; (adr r2, 8010ca0 <SD_ioctl+0x34>)
 8010c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca0:	08010cb1 	.word	0x08010cb1
 8010ca4:	08010cb9 	.word	0x08010cb9
 8010ca8:	08010cd1 	.word	0x08010cd1
 8010cac:	08010ceb 	.word	0x08010ceb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010cb6:	e028      	b.n	8010d0a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010cb8:	f107 030c 	add.w	r3, r7, #12
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7ff fe67 	bl	8010990 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010cce:	e01c      	b.n	8010d0a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010cd0:	f107 030c 	add.w	r3, r7, #12
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7ff fe5b 	bl	8010990 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cdc:	b29a      	uxth	r2, r3
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010ce8:	e00f      	b.n	8010d0a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010cea:	f107 030c 	add.w	r3, r7, #12
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7ff fe4e 	bl	8010990 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf6:	0a5a      	lsrs	r2, r3, #9
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010d02:	e002      	b.n	8010d0a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010d04:	2304      	movs	r3, #4
 8010d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3730      	adds	r7, #48	; 0x30
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	20000009 	.word	0x20000009

08010d1c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010d20:	4b03      	ldr	r3, [pc, #12]	; (8010d30 <BSP_SD_WriteCpltCallback+0x14>)
 8010d22:	2201      	movs	r2, #1
 8010d24:	601a      	str	r2, [r3, #0]
}
 8010d26:	bf00      	nop
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr
 8010d30:	2000679c 	.word	0x2000679c

08010d34 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010d34:	b480      	push	{r7}
 8010d36:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010d38:	4b03      	ldr	r3, [pc, #12]	; (8010d48 <BSP_SD_ReadCpltCallback+0x14>)
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	601a      	str	r2, [r3, #0]
}
 8010d3e:	bf00      	nop
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr
 8010d48:	200067a0 	.word	0x200067a0

08010d4c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b084      	sub	sp, #16
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	460b      	mov	r3, r1
 8010d56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8010d58:	f44f 701d 	mov.w	r0, #628	; 0x274
 8010d5c:	f006 fef2 	bl	8017b44 <USBD_static_malloc>
 8010d60:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d109      	bne.n	8010d7c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	32b0      	adds	r2, #176	; 0xb0
 8010d72:	2100      	movs	r1, #0
 8010d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010d78:	2302      	movs	r3, #2
 8010d7a:	e06e      	b.n	8010e5a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	32b0      	adds	r2, #176	; 0xb0
 8010d86:	68f9      	ldr	r1, [r7, #12]
 8010d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	32b0      	adds	r2, #176	; 0xb0
 8010d96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	7c1b      	ldrb	r3, [r3, #16]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d12b      	bne.n	8010e00 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8010da8:	4b2e      	ldr	r3, [pc, #184]	; (8010e64 <USBD_MSC_Init+0x118>)
 8010daa:	7819      	ldrb	r1, [r3, #0]
 8010dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010db0:	2202      	movs	r2, #2
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f006 fd35 	bl	8017822 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8010db8:	4b2a      	ldr	r3, [pc, #168]	; (8010e64 <USBD_MSC_Init+0x118>)
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	f003 020f 	and.w	r2, r3, #15
 8010dc0:	6879      	ldr	r1, [r7, #4]
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	4413      	add	r3, r2
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	440b      	add	r3, r1
 8010dcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8010dd4:	4b24      	ldr	r3, [pc, #144]	; (8010e68 <USBD_MSC_Init+0x11c>)
 8010dd6:	7819      	ldrb	r1, [r3, #0]
 8010dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ddc:	2202      	movs	r2, #2
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f006 fd1f 	bl	8017822 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8010de4:	4b20      	ldr	r3, [pc, #128]	; (8010e68 <USBD_MSC_Init+0x11c>)
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	f003 020f 	and.w	r2, r3, #15
 8010dec:	6879      	ldr	r1, [r7, #4]
 8010dee:	4613      	mov	r3, r2
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	4413      	add	r3, r2
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	440b      	add	r3, r1
 8010df8:	3324      	adds	r3, #36	; 0x24
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	801a      	strh	r2, [r3, #0]
 8010dfe:	e028      	b.n	8010e52 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010e00:	4b18      	ldr	r3, [pc, #96]	; (8010e64 <USBD_MSC_Init+0x118>)
 8010e02:	7819      	ldrb	r1, [r3, #0]
 8010e04:	2340      	movs	r3, #64	; 0x40
 8010e06:	2202      	movs	r2, #2
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f006 fd0a 	bl	8017822 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8010e0e:	4b15      	ldr	r3, [pc, #84]	; (8010e64 <USBD_MSC_Init+0x118>)
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	f003 020f 	and.w	r2, r3, #15
 8010e16:	6879      	ldr	r1, [r7, #4]
 8010e18:	4613      	mov	r3, r2
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	4413      	add	r3, r2
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	440b      	add	r3, r1
 8010e22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010e26:	2201      	movs	r2, #1
 8010e28:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010e2a:	4b0f      	ldr	r3, [pc, #60]	; (8010e68 <USBD_MSC_Init+0x11c>)
 8010e2c:	7819      	ldrb	r1, [r3, #0]
 8010e2e:	2340      	movs	r3, #64	; 0x40
 8010e30:	2202      	movs	r2, #2
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f006 fcf5 	bl	8017822 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8010e38:	4b0b      	ldr	r3, [pc, #44]	; (8010e68 <USBD_MSC_Init+0x11c>)
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	f003 020f 	and.w	r2, r3, #15
 8010e40:	6879      	ldr	r1, [r7, #4]
 8010e42:	4613      	mov	r3, r2
 8010e44:	009b      	lsls	r3, r3, #2
 8010e46:	4413      	add	r3, r2
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	440b      	add	r3, r1
 8010e4c:	3324      	adds	r3, #36	; 0x24
 8010e4e:	2201      	movs	r2, #1
 8010e50:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f000 fa2c 	bl	80112b0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8010e58:	2300      	movs	r3, #0
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	2000006f 	.word	0x2000006f
 8010e68:	2000006e 	.word	0x2000006e

08010e6c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b082      	sub	sp, #8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	460b      	mov	r3, r1
 8010e76:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8010e78:	4b26      	ldr	r3, [pc, #152]	; (8010f14 <USBD_MSC_DeInit+0xa8>)
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f006 fcf5 	bl	801786e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8010e84:	4b23      	ldr	r3, [pc, #140]	; (8010f14 <USBD_MSC_DeInit+0xa8>)
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	f003 020f 	and.w	r2, r3, #15
 8010e8c:	6879      	ldr	r1, [r7, #4]
 8010e8e:	4613      	mov	r3, r2
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	4413      	add	r3, r2
 8010e94:	009b      	lsls	r3, r3, #2
 8010e96:	440b      	add	r3, r1
 8010e98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8010ea0:	4b1d      	ldr	r3, [pc, #116]	; (8010f18 <USBD_MSC_DeInit+0xac>)
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f006 fce1 	bl	801786e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8010eac:	4b1a      	ldr	r3, [pc, #104]	; (8010f18 <USBD_MSC_DeInit+0xac>)
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	f003 020f 	and.w	r2, r3, #15
 8010eb4:	6879      	ldr	r1, [r7, #4]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	009b      	lsls	r3, r3, #2
 8010eba:	4413      	add	r3, r2
 8010ebc:	009b      	lsls	r3, r3, #2
 8010ebe:	440b      	add	r3, r1
 8010ec0:	3324      	adds	r3, #36	; 0x24
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	32b0      	adds	r2, #176	; 0xb0
 8010ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d018      	beq.n	8010f0a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 fa67 	bl	80113ac <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	32b0      	adds	r2, #176	; 0xb0
 8010ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eec:	4618      	mov	r0, r3
 8010eee:	f006 fe37 	bl	8017b60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	32b0      	adds	r2, #176	; 0xb0
 8010efc:	2100      	movs	r1, #0
 8010efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2200      	movs	r2, #0
 8010f06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010f0a:	2300      	movs	r3, #0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3708      	adds	r7, #8
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	2000006f 	.word	0x2000006f
 8010f18:	2000006e 	.word	0x2000006e

08010f1c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b086      	sub	sp, #24
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	32b0      	adds	r2, #176	; 0xb0
 8010f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f34:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f36:	2300      	movs	r3, #0
 8010f38:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d101      	bne.n	8010f48 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8010f44:	2303      	movs	r3, #3
 8010f46:	e0e1      	b.n	801110c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d053      	beq.n	8010ffc <USBD_MSC_Setup+0xe0>
 8010f54:	2b20      	cmp	r3, #32
 8010f56:	f040 80d1 	bne.w	80110fc <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	785b      	ldrb	r3, [r3, #1]
 8010f5e:	2bfe      	cmp	r3, #254	; 0xfe
 8010f60:	d002      	beq.n	8010f68 <USBD_MSC_Setup+0x4c>
 8010f62:	2bff      	cmp	r3, #255	; 0xff
 8010f64:	d02a      	beq.n	8010fbc <USBD_MSC_Setup+0xa0>
 8010f66:	e041      	b.n	8010fec <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	885b      	ldrh	r3, [r3, #2]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d11e      	bne.n	8010fae <USBD_MSC_Setup+0x92>
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	88db      	ldrh	r3, [r3, #6]
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d11a      	bne.n	8010fae <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	da15      	bge.n	8010fae <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	33b0      	adds	r3, #176	; 0xb0
 8010f8c:	009b      	lsls	r3, r3, #2
 8010f8e:	4413      	add	r3, r2
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	699b      	ldr	r3, [r3, #24]
 8010f94:	4798      	blx	r3
 8010f96:	4603      	mov	r3, r0
 8010f98:	461a      	mov	r2, r3
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f003 f923 	bl	80141f0 <USBD_CtlSendData>
 8010faa:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010fac:	e025      	b.n	8010ffa <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8010fae:	6839      	ldr	r1, [r7, #0]
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f003 f8ac 	bl	801410e <USBD_CtlError>
            ret = USBD_FAIL;
 8010fb6:	2303      	movs	r3, #3
 8010fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8010fba:	e01e      	b.n	8010ffa <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	885b      	ldrh	r3, [r3, #2]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d10c      	bne.n	8010fde <USBD_MSC_Setup+0xc2>
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	88db      	ldrh	r3, [r3, #6]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d108      	bne.n	8010fde <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	db03      	blt.n	8010fde <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 f9b4 	bl	8011344 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010fdc:	e00d      	b.n	8010ffa <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8010fde:	6839      	ldr	r1, [r7, #0]
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f003 f894 	bl	801410e <USBD_CtlError>
            ret = USBD_FAIL;
 8010fe6:	2303      	movs	r3, #3
 8010fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8010fea:	e006      	b.n	8010ffa <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8010fec:	6839      	ldr	r1, [r7, #0]
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f003 f88d 	bl	801410e <USBD_CtlError>
          ret = USBD_FAIL;
 8010ff4:	2303      	movs	r3, #3
 8010ff6:	75fb      	strb	r3, [r7, #23]
          break;
 8010ff8:	bf00      	nop
      }
      break;
 8010ffa:	e086      	b.n	801110a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	785b      	ldrb	r3, [r3, #1]
 8011000:	2b0b      	cmp	r3, #11
 8011002:	d872      	bhi.n	80110ea <USBD_MSC_Setup+0x1ce>
 8011004:	a201      	add	r2, pc, #4	; (adr r2, 801100c <USBD_MSC_Setup+0xf0>)
 8011006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801100a:	bf00      	nop
 801100c:	0801103d 	.word	0x0801103d
 8011010:	080110b9 	.word	0x080110b9
 8011014:	080110eb 	.word	0x080110eb
 8011018:	080110eb 	.word	0x080110eb
 801101c:	080110eb 	.word	0x080110eb
 8011020:	080110eb 	.word	0x080110eb
 8011024:	080110eb 	.word	0x080110eb
 8011028:	080110eb 	.word	0x080110eb
 801102c:	080110eb 	.word	0x080110eb
 8011030:	080110eb 	.word	0x080110eb
 8011034:	08011067 	.word	0x08011067
 8011038:	08011091 	.word	0x08011091
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011042:	b2db      	uxtb	r3, r3
 8011044:	2b03      	cmp	r3, #3
 8011046:	d107      	bne.n	8011058 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011048:	f107 030e 	add.w	r3, r7, #14
 801104c:	2202      	movs	r2, #2
 801104e:	4619      	mov	r1, r3
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f003 f8cd 	bl	80141f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011056:	e050      	b.n	80110fa <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011058:	6839      	ldr	r1, [r7, #0]
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f003 f857 	bl	801410e <USBD_CtlError>
            ret = USBD_FAIL;
 8011060:	2303      	movs	r3, #3
 8011062:	75fb      	strb	r3, [r7, #23]
          break;
 8011064:	e049      	b.n	80110fa <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801106c:	b2db      	uxtb	r3, r3
 801106e:	2b03      	cmp	r3, #3
 8011070:	d107      	bne.n	8011082 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	3304      	adds	r3, #4
 8011076:	2201      	movs	r2, #1
 8011078:	4619      	mov	r1, r3
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f003 f8b8 	bl	80141f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011080:	e03b      	b.n	80110fa <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011082:	6839      	ldr	r1, [r7, #0]
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f003 f842 	bl	801410e <USBD_CtlError>
            ret = USBD_FAIL;
 801108a:	2303      	movs	r3, #3
 801108c:	75fb      	strb	r3, [r7, #23]
          break;
 801108e:	e034      	b.n	80110fa <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011096:	b2db      	uxtb	r3, r3
 8011098:	2b03      	cmp	r3, #3
 801109a:	d106      	bne.n	80110aa <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	885b      	ldrh	r3, [r3, #2]
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	461a      	mov	r2, r3
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80110a8:	e027      	b.n	80110fa <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80110aa:	6839      	ldr	r1, [r7, #0]
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f003 f82e 	bl	801410e <USBD_CtlError>
            ret = USBD_FAIL;
 80110b2:	2303      	movs	r3, #3
 80110b4:	75fb      	strb	r3, [r7, #23]
          break;
 80110b6:	e020      	b.n	80110fa <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	2b03      	cmp	r3, #3
 80110c2:	d119      	bne.n	80110f8 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	885b      	ldrh	r3, [r3, #2]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d115      	bne.n	80110f8 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	889b      	ldrh	r3, [r3, #4]
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	4619      	mov	r1, r3
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f006 fbe9 	bl	80178ac <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	889b      	ldrh	r3, [r3, #4]
 80110de:	b2db      	uxtb	r3, r3
 80110e0:	4619      	mov	r1, r3
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 fb2e 	bl	8011744 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80110e8:	e006      	b.n	80110f8 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80110ea:	6839      	ldr	r1, [r7, #0]
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f003 f80e 	bl	801410e <USBD_CtlError>
          ret = USBD_FAIL;
 80110f2:	2303      	movs	r3, #3
 80110f4:	75fb      	strb	r3, [r7, #23]
          break;
 80110f6:	e000      	b.n	80110fa <USBD_MSC_Setup+0x1de>
          break;
 80110f8:	bf00      	nop
      }
      break;
 80110fa:	e006      	b.n	801110a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80110fc:	6839      	ldr	r1, [r7, #0]
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f003 f805 	bl	801410e <USBD_CtlError>
      ret = USBD_FAIL;
 8011104:	2303      	movs	r3, #3
 8011106:	75fb      	strb	r3, [r7, #23]
      break;
 8011108:	bf00      	nop
  }

  return (uint8_t)ret;
 801110a:	7dfb      	ldrb	r3, [r7, #23]
}
 801110c:	4618      	mov	r0, r3
 801110e:	3718      	adds	r7, #24
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}

08011114 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	460b      	mov	r3, r1
 801111e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8011120:	78fb      	ldrb	r3, [r7, #3]
 8011122:	4619      	mov	r1, r3
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f000 f959 	bl	80113dc <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801112a:	2300      	movs	r3, #0
}
 801112c:	4618      	mov	r0, r3
 801112e:	3708      	adds	r7, #8
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	460b      	mov	r3, r1
 801113e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8011140:	78fb      	ldrb	r3, [r7, #3]
 8011142:	4619      	mov	r1, r3
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 f983 	bl	8011450 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801114a:	2300      	movs	r3, #0
}
 801114c:	4618      	mov	r0, r3
 801114e:	3708      	adds	r7, #8
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}

08011154 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801115c:	2181      	movs	r1, #129	; 0x81
 801115e:	4812      	ldr	r0, [pc, #72]	; (80111a8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8011160:	f002 f972 	bl	8013448 <USBD_GetEpDesc>
 8011164:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011166:	2101      	movs	r1, #1
 8011168:	480f      	ldr	r0, [pc, #60]	; (80111a8 <USBD_MSC_GetHSCfgDesc+0x54>)
 801116a:	f002 f96d 	bl	8013448 <USBD_GetEpDesc>
 801116e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d006      	beq.n	8011184 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2200      	movs	r2, #0
 801117a:	711a      	strb	r2, [r3, #4]
 801117c:	2200      	movs	r2, #0
 801117e:	f042 0202 	orr.w	r2, r2, #2
 8011182:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d006      	beq.n	8011198 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	2200      	movs	r2, #0
 801118e:	711a      	strb	r2, [r3, #4]
 8011190:	2200      	movs	r2, #0
 8011192:	f042 0202 	orr.w	r2, r2, #2
 8011196:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2220      	movs	r2, #32
 801119c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801119e:	4b02      	ldr	r3, [pc, #8]	; (80111a8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3710      	adds	r7, #16
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	20000044 	.word	0x20000044

080111ac <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80111b4:	2181      	movs	r1, #129	; 0x81
 80111b6:	4812      	ldr	r0, [pc, #72]	; (8011200 <USBD_MSC_GetFSCfgDesc+0x54>)
 80111b8:	f002 f946 	bl	8013448 <USBD_GetEpDesc>
 80111bc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80111be:	2101      	movs	r1, #1
 80111c0:	480f      	ldr	r0, [pc, #60]	; (8011200 <USBD_MSC_GetFSCfgDesc+0x54>)
 80111c2:	f002 f941 	bl	8013448 <USBD_GetEpDesc>
 80111c6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d006      	beq.n	80111dc <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2200      	movs	r2, #0
 80111d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80111d6:	711a      	strb	r2, [r3, #4]
 80111d8:	2200      	movs	r2, #0
 80111da:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d006      	beq.n	80111f0 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	2200      	movs	r2, #0
 80111e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80111ea:	711a      	strb	r2, [r3, #4]
 80111ec:	2200      	movs	r2, #0
 80111ee:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2220      	movs	r2, #32
 80111f4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80111f6:	4b02      	ldr	r3, [pc, #8]	; (8011200 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3710      	adds	r7, #16
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	20000044 	.word	0x20000044

08011204 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801120c:	2181      	movs	r1, #129	; 0x81
 801120e:	4812      	ldr	r0, [pc, #72]	; (8011258 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8011210:	f002 f91a 	bl	8013448 <USBD_GetEpDesc>
 8011214:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011216:	2101      	movs	r1, #1
 8011218:	480f      	ldr	r0, [pc, #60]	; (8011258 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801121a:	f002 f915 	bl	8013448 <USBD_GetEpDesc>
 801121e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d006      	beq.n	8011234 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2200      	movs	r2, #0
 801122a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801122e:	711a      	strb	r2, [r3, #4]
 8011230:	2200      	movs	r2, #0
 8011232:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d006      	beq.n	8011248 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	2200      	movs	r2, #0
 801123e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011242:	711a      	strb	r2, [r3, #4]
 8011244:	2200      	movs	r2, #0
 8011246:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2220      	movs	r2, #32
 801124c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801124e:	4b02      	ldr	r3, [pc, #8]	; (8011258 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8011250:	4618      	mov	r0, r3
 8011252:	3710      	adds	r7, #16
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	20000044 	.word	0x20000044

0801125c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801125c:	b480      	push	{r7}
 801125e:	b083      	sub	sp, #12
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	220a      	movs	r2, #10
 8011268:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801126a:	4b03      	ldr	r3, [pc, #12]	; (8011278 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801126c:	4618      	mov	r0, r3
 801126e:	370c      	adds	r7, #12
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr
 8011278:	20000064 	.word	0x20000064

0801127c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801127c:	b480      	push	{r7}
 801127e:	b083      	sub	sp, #12
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d101      	bne.n	8011290 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801128c:	2303      	movs	r3, #3
 801128e:	e009      	b.n	80112a4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	33b0      	adds	r3, #176	; 0xb0
 801129a:	009b      	lsls	r3, r3, #2
 801129c:	4413      	add	r3, r2
 801129e:	683a      	ldr	r2, [r7, #0]
 80112a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80112a2:	2300      	movs	r3, #0
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	32b0      	adds	r2, #176	; 0xb0
 80112c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112c6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d032      	beq.n	8011334 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2200      	movs	r2, #0
 80112d2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2200      	movs	r2, #0
 80112d8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2200      	movs	r2, #0
 80112de:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2200      	movs	r2, #0
 80112ee:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	33b0      	adds	r3, #176	; 0xb0
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	4413      	add	r3, r2
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2000      	movs	r0, #0
 8011306:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8011308:	4b0c      	ldr	r3, [pc, #48]	; (801133c <MSC_BOT_Init+0x8c>)
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	4619      	mov	r1, r3
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f006 facc 	bl	80178ac <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8011314:	4b0a      	ldr	r3, [pc, #40]	; (8011340 <MSC_BOT_Init+0x90>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	4619      	mov	r1, r3
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f006 fac6 	bl	80178ac <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8011320:	4b06      	ldr	r3, [pc, #24]	; (801133c <MSC_BOT_Init+0x8c>)
 8011322:	7819      	ldrb	r1, [r3, #0]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801132a:	231f      	movs	r3, #31
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f006 fb86 	bl	8017a3e <USBD_LL_PrepareReceive>
 8011332:	e000      	b.n	8011336 <MSC_BOT_Init+0x86>
    return;
 8011334:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011336:	3710      	adds	r7, #16
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}
 801133c:	2000006f 	.word	0x2000006f
 8011340:	2000006e 	.word	0x2000006e

08011344 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	32b0      	adds	r2, #176	; 0xb0
 8011356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801135a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d01b      	beq.n	801139a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2200      	movs	r2, #0
 8011366:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2201      	movs	r2, #1
 801136c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801136e:	4b0d      	ldr	r3, [pc, #52]	; (80113a4 <MSC_BOT_Reset+0x60>)
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	4619      	mov	r1, r3
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f006 fad7 	bl	8017928 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801137a:	4b0b      	ldr	r3, [pc, #44]	; (80113a8 <MSC_BOT_Reset+0x64>)
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	4619      	mov	r1, r3
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f006 fad1 	bl	8017928 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8011386:	4b08      	ldr	r3, [pc, #32]	; (80113a8 <MSC_BOT_Reset+0x64>)
 8011388:	7819      	ldrb	r1, [r3, #0]
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011390:	231f      	movs	r3, #31
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f006 fb53 	bl	8017a3e <USBD_LL_PrepareReceive>
 8011398:	e000      	b.n	801139c <MSC_BOT_Reset+0x58>
    return;
 801139a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	2000006e 	.word	0x2000006e
 80113a8:	2000006f 	.word	0x2000006f

080113ac <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	32b0      	adds	r2, #176	; 0xb0
 80113be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113c2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d002      	beq.n	80113d0 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2200      	movs	r2, #0
 80113ce:	721a      	strb	r2, [r3, #8]
  }
}
 80113d0:	bf00      	nop
 80113d2:	3714      	adds	r7, #20
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr

080113dc <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	460b      	mov	r3, r1
 80113e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	32b0      	adds	r2, #176	; 0xb0
 80113f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113f6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d020      	beq.n	8011440 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	7a1b      	ldrb	r3, [r3, #8]
 8011402:	2b02      	cmp	r3, #2
 8011404:	d005      	beq.n	8011412 <MSC_BOT_DataIn+0x36>
 8011406:	2b02      	cmp	r3, #2
 8011408:	db1c      	blt.n	8011444 <MSC_BOT_DataIn+0x68>
 801140a:	3b03      	subs	r3, #3
 801140c:	2b01      	cmp	r3, #1
 801140e:	d819      	bhi.n	8011444 <MSC_BOT_DataIn+0x68>
 8011410:	e011      	b.n	8011436 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801141e:	461a      	mov	r2, r3
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f000 f9c9 	bl	80117b8 <SCSI_ProcessCmd>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	da0d      	bge.n	8011448 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801142c:	2101      	movs	r1, #1
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f000 f90c 	bl	801164c <MSC_BOT_SendCSW>
      }
      break;
 8011434:	e008      	b.n	8011448 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011436:	2100      	movs	r1, #0
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 f907 	bl	801164c <MSC_BOT_SendCSW>
      break;
 801143e:	e004      	b.n	801144a <MSC_BOT_DataIn+0x6e>
    return;
 8011440:	bf00      	nop
 8011442:	e002      	b.n	801144a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8011444:	bf00      	nop
 8011446:	e000      	b.n	801144a <MSC_BOT_DataIn+0x6e>
      break;
 8011448:	bf00      	nop
  }
}
 801144a:	3710      	adds	r7, #16
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	460b      	mov	r3, r1
 801145a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	32b0      	adds	r2, #176	; 0xb0
 8011466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801146a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d01c      	beq.n	80114ac <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	7a1b      	ldrb	r3, [r3, #8]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d002      	beq.n	8011480 <MSC_BOT_DataOut+0x30>
 801147a:	2b01      	cmp	r3, #1
 801147c:	d004      	beq.n	8011488 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801147e:	e018      	b.n	80114b2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f000 f819 	bl	80114b8 <MSC_BOT_CBW_Decode>
      break;
 8011486:	e014      	b.n	80114b2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011494:	461a      	mov	r2, r3
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f000 f98e 	bl	80117b8 <SCSI_ProcessCmd>
 801149c:	4603      	mov	r3, r0
 801149e:	2b00      	cmp	r3, #0
 80114a0:	da06      	bge.n	80114b0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80114a2:	2101      	movs	r1, #1
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f000 f8d1 	bl	801164c <MSC_BOT_SendCSW>
      break;
 80114aa:	e001      	b.n	80114b0 <MSC_BOT_DataOut+0x60>
    return;
 80114ac:	bf00      	nop
 80114ae:	e000      	b.n	80114b2 <MSC_BOT_DataOut+0x62>
      break;
 80114b0:	bf00      	nop
  }
}
 80114b2:	3710      	adds	r7, #16
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	32b0      	adds	r2, #176	; 0xb0
 80114ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114ce:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d079      	beq.n	80115ca <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80114ee:	4b3a      	ldr	r3, [pc, #232]	; (80115d8 <MSC_BOT_CBW_Decode+0x120>)
 80114f0:	781b      	ldrb	r3, [r3, #0]
 80114f2:	4619      	mov	r1, r3
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f006 fac3 	bl	8017a80 <USBD_LL_GetRxDataSize>
 80114fa:	4603      	mov	r3, r0
 80114fc:	2b1f      	cmp	r3, #31
 80114fe:	d114      	bne.n	801152a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8011506:	4a35      	ldr	r2, [pc, #212]	; (80115dc <MSC_BOT_CBW_Decode+0x124>)
 8011508:	4293      	cmp	r3, r2
 801150a:	d10e      	bne.n	801152a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011512:	2b01      	cmp	r3, #1
 8011514:	d809      	bhi.n	801152a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801151c:	2b00      	cmp	r3, #0
 801151e:	d004      	beq.n	801152a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011526:	2b10      	cmp	r3, #16
 8011528:	d90e      	bls.n	8011548 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011530:	2320      	movs	r3, #32
 8011532:	2205      	movs	r2, #5
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f000 fe28 	bl	801218a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2202      	movs	r2, #2
 801153e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f000 f8bd 	bl	80116c0 <MSC_BOT_Abort>
 8011546:	e043      	b.n	80115d0 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011554:	461a      	mov	r2, r3
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f000 f92e 	bl	80117b8 <SCSI_ProcessCmd>
 801155c:	4603      	mov	r3, r0
 801155e:	2b00      	cmp	r3, #0
 8011560:	da0c      	bge.n	801157c <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	7a1b      	ldrb	r3, [r3, #8]
 8011566:	2b05      	cmp	r3, #5
 8011568:	d104      	bne.n	8011574 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801156a:	2101      	movs	r1, #1
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f000 f86d 	bl	801164c <MSC_BOT_SendCSW>
 8011572:	e02d      	b.n	80115d0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f000 f8a3 	bl	80116c0 <MSC_BOT_Abort>
 801157a:	e029      	b.n	80115d0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	7a1b      	ldrb	r3, [r3, #8]
 8011580:	2b02      	cmp	r3, #2
 8011582:	d024      	beq.n	80115ce <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011588:	2b01      	cmp	r3, #1
 801158a:	d020      	beq.n	80115ce <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011590:	2b03      	cmp	r3, #3
 8011592:	d01c      	beq.n	80115ce <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d009      	beq.n	80115b0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f103 0110 	add.w	r1, r3, #16
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	461a      	mov	r2, r3
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f000 f819 	bl	80115e0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80115ae:	e00f      	b.n	80115d0 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d104      	bne.n	80115c2 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80115b8:	2100      	movs	r1, #0
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 f846 	bl	801164c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80115c0:	e006      	b.n	80115d0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f000 f87c 	bl	80116c0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80115c8:	e002      	b.n	80115d0 <MSC_BOT_CBW_Decode+0x118>
    return;
 80115ca:	bf00      	nop
 80115cc:	e000      	b.n	80115d0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80115ce:	bf00      	nop
    }
  }
}
 80115d0:	3710      	adds	r7, #16
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	2000006f 	.word	0x2000006f
 80115dc:	43425355 	.word	0x43425355

080115e0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b086      	sub	sp, #24
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	60b9      	str	r1, [r7, #8]
 80115ea:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	32b0      	adds	r2, #176	; 0xb0
 80115f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115fa:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d01e      	beq.n	8011640 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	4293      	cmp	r3, r2
 801160c:	bf28      	it	cs
 801160e:	4613      	movcs	r3, r2
 8011610:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	1ad2      	subs	r2, r2, r3
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	2200      	movs	r2, #0
 8011626:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	2204      	movs	r2, #4
 801162e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8011630:	4b05      	ldr	r3, [pc, #20]	; (8011648 <MSC_BOT_SendData+0x68>)
 8011632:	7819      	ldrb	r1, [r3, #0]
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	68ba      	ldr	r2, [r7, #8]
 8011638:	68f8      	ldr	r0, [r7, #12]
 801163a:	f006 f9df 	bl	80179fc <USBD_LL_Transmit>
 801163e:	e000      	b.n	8011642 <MSC_BOT_SendData+0x62>
    return;
 8011640:	bf00      	nop
}
 8011642:	3718      	adds	r7, #24
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	2000006e 	.word	0x2000006e

0801164c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b084      	sub	sp, #16
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	460b      	mov	r3, r1
 8011656:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	32b0      	adds	r2, #176	; 0xb0
 8011662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011666:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d01d      	beq.n	80116aa <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	4a10      	ldr	r2, [pc, #64]	; (80116b4 <MSC_BOT_SendCSW+0x68>)
 8011672:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	78fa      	ldrb	r2, [r7, #3]
 801167a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2200      	movs	r2, #0
 8011682:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8011684:	4b0c      	ldr	r3, [pc, #48]	; (80116b8 <MSC_BOT_SendCSW+0x6c>)
 8011686:	7819      	ldrb	r1, [r3, #0]
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801168e:	230d      	movs	r3, #13
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f006 f9b3 	bl	80179fc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8011696:	4b09      	ldr	r3, [pc, #36]	; (80116bc <MSC_BOT_SendCSW+0x70>)
 8011698:	7819      	ldrb	r1, [r3, #0]
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80116a0:	231f      	movs	r3, #31
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f006 f9cb 	bl	8017a3e <USBD_LL_PrepareReceive>
 80116a8:	e000      	b.n	80116ac <MSC_BOT_SendCSW+0x60>
    return;
 80116aa:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	53425355 	.word	0x53425355
 80116b8:	2000006e 	.word	0x2000006e
 80116bc:	2000006f 	.word	0x2000006f

080116c0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	32b0      	adds	r2, #176	; 0xb0
 80116d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116d6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d02a      	beq.n	8011734 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10e      	bne.n	8011706 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d009      	beq.n	8011706 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d105      	bne.n	8011706 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80116fa:	4b10      	ldr	r3, [pc, #64]	; (801173c <MSC_BOT_Abort+0x7c>)
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	4619      	mov	r1, r3
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f006 f8f2 	bl	80178ea <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011706:	4b0e      	ldr	r3, [pc, #56]	; (8011740 <MSC_BOT_Abort+0x80>)
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	4619      	mov	r1, r3
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f006 f8ec 	bl	80178ea <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	7a5b      	ldrb	r3, [r3, #9]
 8011716:	2b02      	cmp	r3, #2
 8011718:	d10d      	bne.n	8011736 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801171a:	4b09      	ldr	r3, [pc, #36]	; (8011740 <MSC_BOT_Abort+0x80>)
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	4619      	mov	r1, r3
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f006 f8e2 	bl	80178ea <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011726:	4b05      	ldr	r3, [pc, #20]	; (801173c <MSC_BOT_Abort+0x7c>)
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	4619      	mov	r1, r3
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f006 f8dc 	bl	80178ea <USBD_LL_StallEP>
 8011732:	e000      	b.n	8011736 <MSC_BOT_Abort+0x76>
    return;
 8011734:	bf00      	nop
  }
}
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	2000006f 	.word	0x2000006f
 8011740:	2000006e 	.word	0x2000006e

08011744 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b084      	sub	sp, #16
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	460b      	mov	r3, r1
 801174e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	32b0      	adds	r2, #176	; 0xb0
 801175a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801175e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d01d      	beq.n	80117a2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	7a5b      	ldrb	r3, [r3, #9]
 801176a:	2b02      	cmp	r3, #2
 801176c:	d10c      	bne.n	8011788 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801176e:	4b10      	ldr	r3, [pc, #64]	; (80117b0 <MSC_BOT_CplClrFeature+0x6c>)
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	4619      	mov	r1, r3
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f006 f8b8 	bl	80178ea <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801177a:	4b0e      	ldr	r3, [pc, #56]	; (80117b4 <MSC_BOT_CplClrFeature+0x70>)
 801177c:	781b      	ldrb	r3, [r3, #0]
 801177e:	4619      	mov	r1, r3
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f006 f8b2 	bl	80178ea <USBD_LL_StallEP>
 8011786:	e00f      	b.n	80117a8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8011788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801178c:	2b00      	cmp	r3, #0
 801178e:	da0a      	bge.n	80117a6 <MSC_BOT_CplClrFeature+0x62>
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	7a5b      	ldrb	r3, [r3, #9]
 8011794:	2b01      	cmp	r3, #1
 8011796:	d006      	beq.n	80117a6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011798:	2101      	movs	r1, #1
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f7ff ff56 	bl	801164c <MSC_BOT_SendCSW>
 80117a0:	e002      	b.n	80117a8 <MSC_BOT_CplClrFeature+0x64>
    return;
 80117a2:	bf00      	nop
 80117a4:	e000      	b.n	80117a8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80117a6:	bf00      	nop
  }
}
 80117a8:	3710      	adds	r7, #16
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}
 80117ae:	bf00      	nop
 80117b0:	2000006e 	.word	0x2000006e
 80117b4:	2000006f 	.word	0x2000006f

080117b8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b086      	sub	sp, #24
 80117bc:	af00      	add	r7, sp, #0
 80117be:	60f8      	str	r0, [r7, #12]
 80117c0:	460b      	mov	r3, r1
 80117c2:	607a      	str	r2, [r7, #4]
 80117c4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	32b0      	adds	r2, #176	; 0xb0
 80117d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117d4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d102      	bne.n	80117e2 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80117dc:	f04f 33ff 	mov.w	r3, #4294967295
 80117e0:	e168      	b.n	8011ab4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	2baa      	cmp	r3, #170	; 0xaa
 80117e8:	f000 8144 	beq.w	8011a74 <SCSI_ProcessCmd+0x2bc>
 80117ec:	2baa      	cmp	r3, #170	; 0xaa
 80117ee:	f300 8153 	bgt.w	8011a98 <SCSI_ProcessCmd+0x2e0>
 80117f2:	2ba8      	cmp	r3, #168	; 0xa8
 80117f4:	f000 812c 	beq.w	8011a50 <SCSI_ProcessCmd+0x298>
 80117f8:	2ba8      	cmp	r3, #168	; 0xa8
 80117fa:	f300 814d 	bgt.w	8011a98 <SCSI_ProcessCmd+0x2e0>
 80117fe:	2b5a      	cmp	r3, #90	; 0x5a
 8011800:	f300 80c0 	bgt.w	8011984 <SCSI_ProcessCmd+0x1cc>
 8011804:	2b00      	cmp	r3, #0
 8011806:	f2c0 8147 	blt.w	8011a98 <SCSI_ProcessCmd+0x2e0>
 801180a:	2b5a      	cmp	r3, #90	; 0x5a
 801180c:	f200 8144 	bhi.w	8011a98 <SCSI_ProcessCmd+0x2e0>
 8011810:	a201      	add	r2, pc, #4	; (adr r2, 8011818 <SCSI_ProcessCmd+0x60>)
 8011812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011816:	bf00      	nop
 8011818:	0801198b 	.word	0x0801198b
 801181c:	08011a99 	.word	0x08011a99
 8011820:	08011a99 	.word	0x08011a99
 8011824:	0801199d 	.word	0x0801199d
 8011828:	08011a99 	.word	0x08011a99
 801182c:	08011a99 	.word	0x08011a99
 8011830:	08011a99 	.word	0x08011a99
 8011834:	08011a99 	.word	0x08011a99
 8011838:	08011a99 	.word	0x08011a99
 801183c:	08011a99 	.word	0x08011a99
 8011840:	08011a99 	.word	0x08011a99
 8011844:	08011a99 	.word	0x08011a99
 8011848:	08011a99 	.word	0x08011a99
 801184c:	08011a99 	.word	0x08011a99
 8011850:	08011a99 	.word	0x08011a99
 8011854:	08011a99 	.word	0x08011a99
 8011858:	08011a99 	.word	0x08011a99
 801185c:	08011a99 	.word	0x08011a99
 8011860:	080119af 	.word	0x080119af
 8011864:	08011a99 	.word	0x08011a99
 8011868:	08011a99 	.word	0x08011a99
 801186c:	08011a99 	.word	0x08011a99
 8011870:	08011a99 	.word	0x08011a99
 8011874:	08011a99 	.word	0x08011a99
 8011878:	08011a99 	.word	0x08011a99
 801187c:	08011a99 	.word	0x08011a99
 8011880:	080119e5 	.word	0x080119e5
 8011884:	080119c1 	.word	0x080119c1
 8011888:	08011a99 	.word	0x08011a99
 801188c:	08011a99 	.word	0x08011a99
 8011890:	080119d3 	.word	0x080119d3
 8011894:	08011a99 	.word	0x08011a99
 8011898:	08011a99 	.word	0x08011a99
 801189c:	08011a99 	.word	0x08011a99
 80118a0:	08011a99 	.word	0x08011a99
 80118a4:	08011a09 	.word	0x08011a09
 80118a8:	08011a99 	.word	0x08011a99
 80118ac:	08011a1b 	.word	0x08011a1b
 80118b0:	08011a99 	.word	0x08011a99
 80118b4:	08011a99 	.word	0x08011a99
 80118b8:	08011a3f 	.word	0x08011a3f
 80118bc:	08011a99 	.word	0x08011a99
 80118c0:	08011a63 	.word	0x08011a63
 80118c4:	08011a99 	.word	0x08011a99
 80118c8:	08011a99 	.word	0x08011a99
 80118cc:	08011a99 	.word	0x08011a99
 80118d0:	08011a99 	.word	0x08011a99
 80118d4:	08011a87 	.word	0x08011a87
 80118d8:	08011a99 	.word	0x08011a99
 80118dc:	08011a99 	.word	0x08011a99
 80118e0:	08011a99 	.word	0x08011a99
 80118e4:	08011a99 	.word	0x08011a99
 80118e8:	08011a99 	.word	0x08011a99
 80118ec:	08011a99 	.word	0x08011a99
 80118f0:	08011a99 	.word	0x08011a99
 80118f4:	08011a99 	.word	0x08011a99
 80118f8:	08011a99 	.word	0x08011a99
 80118fc:	08011a99 	.word	0x08011a99
 8011900:	08011a99 	.word	0x08011a99
 8011904:	08011a99 	.word	0x08011a99
 8011908:	08011a99 	.word	0x08011a99
 801190c:	08011a99 	.word	0x08011a99
 8011910:	08011a99 	.word	0x08011a99
 8011914:	08011a99 	.word	0x08011a99
 8011918:	08011a99 	.word	0x08011a99
 801191c:	08011a99 	.word	0x08011a99
 8011920:	08011a99 	.word	0x08011a99
 8011924:	08011a99 	.word	0x08011a99
 8011928:	08011a99 	.word	0x08011a99
 801192c:	08011a99 	.word	0x08011a99
 8011930:	08011a99 	.word	0x08011a99
 8011934:	08011a99 	.word	0x08011a99
 8011938:	08011a99 	.word	0x08011a99
 801193c:	08011a99 	.word	0x08011a99
 8011940:	08011a99 	.word	0x08011a99
 8011944:	08011a99 	.word	0x08011a99
 8011948:	08011a99 	.word	0x08011a99
 801194c:	08011a99 	.word	0x08011a99
 8011950:	08011a99 	.word	0x08011a99
 8011954:	08011a99 	.word	0x08011a99
 8011958:	08011a99 	.word	0x08011a99
 801195c:	08011a99 	.word	0x08011a99
 8011960:	08011a99 	.word	0x08011a99
 8011964:	08011a99 	.word	0x08011a99
 8011968:	08011a99 	.word	0x08011a99
 801196c:	08011a99 	.word	0x08011a99
 8011970:	08011a99 	.word	0x08011a99
 8011974:	08011a99 	.word	0x08011a99
 8011978:	08011a99 	.word	0x08011a99
 801197c:	08011a99 	.word	0x08011a99
 8011980:	080119f7 	.word	0x080119f7
 8011984:	2b9e      	cmp	r3, #158	; 0x9e
 8011986:	d051      	beq.n	8011a2c <SCSI_ProcessCmd+0x274>
 8011988:	e086      	b.n	8011a98 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801198a:	7afb      	ldrb	r3, [r7, #11]
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	4619      	mov	r1, r3
 8011990:	68f8      	ldr	r0, [r7, #12]
 8011992:	f000 f893 	bl	8011abc <SCSI_TestUnitReady>
 8011996:	4603      	mov	r3, r0
 8011998:	75fb      	strb	r3, [r7, #23]
      break;
 801199a:	e089      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801199c:	7afb      	ldrb	r3, [r7, #11]
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	4619      	mov	r1, r3
 80119a2:	68f8      	ldr	r0, [r7, #12]
 80119a4:	f000 fb6e 	bl	8012084 <SCSI_RequestSense>
 80119a8:	4603      	mov	r3, r0
 80119aa:	75fb      	strb	r3, [r7, #23]
      break;
 80119ac:	e080      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80119ae:	7afb      	ldrb	r3, [r7, #11]
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	4619      	mov	r1, r3
 80119b4:	68f8      	ldr	r0, [r7, #12]
 80119b6:	f000 f8db 	bl	8011b70 <SCSI_Inquiry>
 80119ba:	4603      	mov	r3, r0
 80119bc:	75fb      	strb	r3, [r7, #23]
      break;
 80119be:	e077      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80119c0:	7afb      	ldrb	r3, [r7, #11]
 80119c2:	687a      	ldr	r2, [r7, #4]
 80119c4:	4619      	mov	r1, r3
 80119c6:	68f8      	ldr	r0, [r7, #12]
 80119c8:	f000 fc2a 	bl	8012220 <SCSI_StartStopUnit>
 80119cc:	4603      	mov	r3, r0
 80119ce:	75fb      	strb	r3, [r7, #23]
      break;
 80119d0:	e06e      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80119d2:	7afb      	ldrb	r3, [r7, #11]
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	4619      	mov	r1, r3
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f000 fc76 	bl	80122ca <SCSI_AllowPreventRemovable>
 80119de:	4603      	mov	r3, r0
 80119e0:	75fb      	strb	r3, [r7, #23]
      break;
 80119e2:	e065      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80119e4:	7afb      	ldrb	r3, [r7, #11]
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	4619      	mov	r1, r3
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	f000 faea 	bl	8011fc4 <SCSI_ModeSense6>
 80119f0:	4603      	mov	r3, r0
 80119f2:	75fb      	strb	r3, [r7, #23]
      break;
 80119f4:	e05c      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80119f6:	7afb      	ldrb	r3, [r7, #11]
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	4619      	mov	r1, r3
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f000 fb11 	bl	8012024 <SCSI_ModeSense10>
 8011a02:	4603      	mov	r3, r0
 8011a04:	75fb      	strb	r3, [r7, #23]
      break;
 8011a06:	e053      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8011a08:	7afb      	ldrb	r3, [r7, #11]
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	68f8      	ldr	r0, [r7, #12]
 8011a10:	f000 fa5d 	bl	8011ece <SCSI_ReadFormatCapacity>
 8011a14:	4603      	mov	r3, r0
 8011a16:	75fb      	strb	r3, [r7, #23]
      break;
 8011a18:	e04a      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8011a1a:	7afb      	ldrb	r3, [r7, #11]
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	4619      	mov	r1, r3
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f000 f923 	bl	8011c6c <SCSI_ReadCapacity10>
 8011a26:	4603      	mov	r3, r0
 8011a28:	75fb      	strb	r3, [r7, #23]
      break;
 8011a2a:	e041      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8011a2c:	7afb      	ldrb	r3, [r7, #11]
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	4619      	mov	r1, r3
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	f000 f998 	bl	8011d68 <SCSI_ReadCapacity16>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8011a3c:	e038      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8011a3e:	7afb      	ldrb	r3, [r7, #11]
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	4619      	mov	r1, r3
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f000 fc6d 	bl	8012324 <SCSI_Read10>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8011a4e:	e02f      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8011a50:	7afb      	ldrb	r3, [r7, #11]
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	4619      	mov	r1, r3
 8011a56:	68f8      	ldr	r0, [r7, #12]
 8011a58:	f000 fd0e 	bl	8012478 <SCSI_Read12>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8011a60:	e026      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8011a62:	7afb      	ldrb	r3, [r7, #11]
 8011a64:	687a      	ldr	r2, [r7, #4]
 8011a66:	4619      	mov	r1, r3
 8011a68:	68f8      	ldr	r0, [r7, #12]
 8011a6a:	f000 fdb9 	bl	80125e0 <SCSI_Write10>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	75fb      	strb	r3, [r7, #23]
      break;
 8011a72:	e01d      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8011a74:	7afb      	ldrb	r3, [r7, #11]
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	4619      	mov	r1, r3
 8011a7a:	68f8      	ldr	r0, [r7, #12]
 8011a7c:	f000 fe86 	bl	801278c <SCSI_Write12>
 8011a80:	4603      	mov	r3, r0
 8011a82:	75fb      	strb	r3, [r7, #23]
      break;
 8011a84:	e014      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8011a86:	7afb      	ldrb	r3, [r7, #11]
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	68f8      	ldr	r0, [r7, #12]
 8011a8e:	f000 ff63 	bl	8012958 <SCSI_Verify10>
 8011a92:	4603      	mov	r3, r0
 8011a94:	75fb      	strb	r3, [r7, #23]
      break;
 8011a96:	e00b      	b.n	8011ab0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8011a98:	7af9      	ldrb	r1, [r7, #11]
 8011a9a:	2320      	movs	r3, #32
 8011a9c:	2205      	movs	r2, #5
 8011a9e:	68f8      	ldr	r0, [r7, #12]
 8011aa0:	f000 fb73 	bl	801218a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	2202      	movs	r2, #2
 8011aa8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8011aaa:	23ff      	movs	r3, #255	; 0xff
 8011aac:	75fb      	strb	r3, [r7, #23]
      break;
 8011aae:	bf00      	nop
  }

  return ret;
 8011ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3718      	adds	r7, #24
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}

08011abc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b086      	sub	sp, #24
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	60f8      	str	r0, [r7, #12]
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	607a      	str	r2, [r7, #4]
 8011ac8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	32b0      	adds	r2, #176	; 0xb0
 8011ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ad8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d102      	bne.n	8011ae6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8011ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae4:	e03f      	b.n	8011b66 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d00a      	beq.n	8011b06 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011af6:	2320      	movs	r3, #32
 8011af8:	2205      	movs	r2, #5
 8011afa:	68f8      	ldr	r0, [r7, #12]
 8011afc:	f000 fb45 	bl	801218a <SCSI_SenseCode>

    return -1;
 8011b00:	f04f 33ff 	mov.w	r3, #4294967295
 8011b04:	e02f      	b.n	8011b66 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011b0c:	2b02      	cmp	r3, #2
 8011b0e:	d10b      	bne.n	8011b28 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011b10:	7af9      	ldrb	r1, [r7, #11]
 8011b12:	233a      	movs	r3, #58	; 0x3a
 8011b14:	2202      	movs	r2, #2
 8011b16:	68f8      	ldr	r0, [r7, #12]
 8011b18:	f000 fb37 	bl	801218a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	2205      	movs	r2, #5
 8011b20:	721a      	strb	r2, [r3, #8]
    return -1;
 8011b22:	f04f 33ff 	mov.w	r3, #4294967295
 8011b26:	e01e      	b.n	8011b66 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011b2e:	68fa      	ldr	r2, [r7, #12]
 8011b30:	33b0      	adds	r3, #176	; 0xb0
 8011b32:	009b      	lsls	r3, r3, #2
 8011b34:	4413      	add	r3, r2
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	689b      	ldr	r3, [r3, #8]
 8011b3a:	7afa      	ldrb	r2, [r7, #11]
 8011b3c:	4610      	mov	r0, r2
 8011b3e:	4798      	blx	r3
 8011b40:	4603      	mov	r3, r0
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d00b      	beq.n	8011b5e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011b46:	7af9      	ldrb	r1, [r7, #11]
 8011b48:	233a      	movs	r3, #58	; 0x3a
 8011b4a:	2202      	movs	r2, #2
 8011b4c:	68f8      	ldr	r0, [r7, #12]
 8011b4e:	f000 fb1c 	bl	801218a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	2205      	movs	r2, #5
 8011b56:	721a      	strb	r2, [r3, #8]

    return -1;
 8011b58:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5c:	e003      	b.n	8011b66 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	2200      	movs	r2, #0
 8011b62:	60da      	str	r2, [r3, #12]

  return 0;
 8011b64:	2300      	movs	r3, #0
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3718      	adds	r7, #24
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
	...

08011b70 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b088      	sub	sp, #32
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	460b      	mov	r3, r1
 8011b7a:	607a      	str	r2, [r7, #4]
 8011b7c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	32b0      	adds	r2, #176	; 0xb0
 8011b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b8c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d102      	bne.n	8011b9a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8011b94:	f04f 33ff 	mov.w	r3, #4294967295
 8011b98:	e05f      	b.n	8011c5a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d10a      	bne.n	8011bba <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011ba4:	69bb      	ldr	r3, [r7, #24]
 8011ba6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011baa:	2320      	movs	r3, #32
 8011bac:	2205      	movs	r2, #5
 8011bae:	68f8      	ldr	r0, [r7, #12]
 8011bb0:	f000 faeb 	bl	801218a <SCSI_SenseCode>
    return -1;
 8011bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb8:	e04f      	b.n	8011c5a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	f003 0301 	and.w	r3, r3, #1
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d020      	beq.n	8011c0a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	3302      	adds	r3, #2
 8011bcc:	781b      	ldrb	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d105      	bne.n	8011bde <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8011bd2:	2206      	movs	r2, #6
 8011bd4:	4923      	ldr	r1, [pc, #140]	; (8011c64 <SCSI_Inquiry+0xf4>)
 8011bd6:	69b8      	ldr	r0, [r7, #24]
 8011bd8:	f001 f844 	bl	8012c64 <SCSI_UpdateBotData>
 8011bdc:	e03c      	b.n	8011c58 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	3302      	adds	r3, #2
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	2b80      	cmp	r3, #128	; 0x80
 8011be6:	d105      	bne.n	8011bf4 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8011be8:	2208      	movs	r2, #8
 8011bea:	491f      	ldr	r1, [pc, #124]	; (8011c68 <SCSI_Inquiry+0xf8>)
 8011bec:	69b8      	ldr	r0, [r7, #24]
 8011bee:	f001 f839 	bl	8012c64 <SCSI_UpdateBotData>
 8011bf2:	e031      	b.n	8011c58 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8011bf4:	69bb      	ldr	r3, [r7, #24]
 8011bf6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011bfa:	2324      	movs	r3, #36	; 0x24
 8011bfc:	2205      	movs	r2, #5
 8011bfe:	68f8      	ldr	r0, [r7, #12]
 8011c00:	f000 fac3 	bl	801218a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8011c04:	f04f 33ff 	mov.w	r3, #4294967295
 8011c08:	e027      	b.n	8011c5a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011c10:	68fa      	ldr	r2, [r7, #12]
 8011c12:	33b0      	adds	r3, #176	; 0xb0
 8011c14:	009b      	lsls	r3, r3, #2
 8011c16:	4413      	add	r3, r2
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	69d9      	ldr	r1, [r3, #28]
 8011c1c:	7afa      	ldrb	r2, [r7, #11]
 8011c1e:	4613      	mov	r3, r2
 8011c20:	00db      	lsls	r3, r3, #3
 8011c22:	4413      	add	r3, r2
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	440b      	add	r3, r1
 8011c28:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	3304      	adds	r3, #4
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	3305      	adds	r3, #5
 8011c34:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	3304      	adds	r3, #4
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	8bfa      	ldrh	r2, [r7, #30]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d303      	bcc.n	8011c4c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	3304      	adds	r3, #4
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8011c4c:	8bfb      	ldrh	r3, [r7, #30]
 8011c4e:	461a      	mov	r2, r3
 8011c50:	6979      	ldr	r1, [r7, #20]
 8011c52:	69b8      	ldr	r0, [r7, #24]
 8011c54:	f001 f806 	bl	8012c64 <SCSI_UpdateBotData>
  }

  return 0;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3720      	adds	r7, #32
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop
 8011c64:	20000070 	.word	0x20000070
 8011c68:	20000078 	.word	0x20000078

08011c6c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	460b      	mov	r3, r1
 8011c76:	607a      	str	r2, [r7, #4]
 8011c78:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	32b0      	adds	r2, #176	; 0xb0
 8011c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c88:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d102      	bne.n	8011c96 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8011c90:	f04f 33ff 	mov.w	r3, #4294967295
 8011c94:	e064      	b.n	8011d60 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011c9c:	68fa      	ldr	r2, [r7, #12]
 8011c9e:	33b0      	adds	r3, #176	; 0xb0
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	4413      	add	r3, r2
 8011ca4:	685b      	ldr	r3, [r3, #4]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	697a      	ldr	r2, [r7, #20]
 8011caa:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8011cb4:	7af8      	ldrb	r0, [r7, #11]
 8011cb6:	4798      	blx	r3
 8011cb8:	4603      	mov	r3, r0
 8011cba:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011cbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d104      	bne.n	8011cce <SCSI_ReadCapacity10+0x62>
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011cca:	2b02      	cmp	r3, #2
 8011ccc:	d108      	bne.n	8011ce0 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011cce:	7af9      	ldrb	r1, [r7, #11]
 8011cd0:	233a      	movs	r3, #58	; 0x3a
 8011cd2:	2202      	movs	r2, #2
 8011cd4:	68f8      	ldr	r0, [r7, #12]
 8011cd6:	f000 fa58 	bl	801218a <SCSI_SenseCode>
    return -1;
 8011cda:	f04f 33ff 	mov.w	r3, #4294967295
 8011cde:	e03f      	b.n	8011d60 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011ce6:	3b01      	subs	r3, #1
 8011ce8:	0e1b      	lsrs	r3, r3, #24
 8011cea:	b2da      	uxtb	r2, r3
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011cf6:	3b01      	subs	r3, #1
 8011cf8:	0c1b      	lsrs	r3, r3, #16
 8011cfa:	b2da      	uxtb	r2, r3
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011d06:	3b01      	subs	r3, #1
 8011d08:	0a1b      	lsrs	r3, r3, #8
 8011d0a:	b2da      	uxtb	r2, r3
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011d16:	b2db      	uxtb	r3, r3
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	b2da      	uxtb	r2, r3
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011d26:	161b      	asrs	r3, r3, #24
 8011d28:	b2da      	uxtb	r2, r3
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011d34:	141b      	asrs	r3, r3, #16
 8011d36:	b2da      	uxtb	r2, r3
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011d42:	0a1b      	lsrs	r3, r3, #8
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	2208      	movs	r2, #8
 8011d5c:	60da      	str	r2, [r3, #12]

  return 0;
 8011d5e:	2300      	movs	r3, #0

}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3718      	adds	r7, #24
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b088      	sub	sp, #32
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	460b      	mov	r3, r1
 8011d72:	607a      	str	r2, [r7, #4]
 8011d74:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	32b0      	adds	r2, #176	; 0xb0
 8011d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d84:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d102      	bne.n	8011d92 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8011d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d90:	e099      	b.n	8011ec6 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011d98:	68fa      	ldr	r2, [r7, #12]
 8011d9a:	33b0      	adds	r3, #176	; 0xb0
 8011d9c:	009b      	lsls	r3, r3, #2
 8011d9e:	4413      	add	r3, r2
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	69ba      	ldr	r2, [r7, #24]
 8011da6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8011daa:	69ba      	ldr	r2, [r7, #24]
 8011dac:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8011db0:	7af8      	ldrb	r0, [r7, #11]
 8011db2:	4798      	blx	r3
 8011db4:	4603      	mov	r3, r0
 8011db6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d104      	bne.n	8011dca <SCSI_ReadCapacity16+0x62>
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011dc6:	2b02      	cmp	r3, #2
 8011dc8:	d108      	bne.n	8011ddc <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011dca:	7af9      	ldrb	r1, [r7, #11]
 8011dcc:	233a      	movs	r3, #58	; 0x3a
 8011dce:	2202      	movs	r2, #2
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f000 f9da 	bl	801218a <SCSI_SenseCode>
    return -1;
 8011dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8011dda:	e074      	b.n	8011ec6 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	330a      	adds	r3, #10
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	330b      	adds	r3, #11
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011dec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	330c      	adds	r3, #12
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8011df6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	320d      	adds	r2, #13
 8011dfc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8011dfe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011e00:	69bb      	ldr	r3, [r7, #24]
 8011e02:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011e04:	2300      	movs	r3, #0
 8011e06:	77fb      	strb	r3, [r7, #31]
 8011e08:	e007      	b.n	8011e1a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8011e0a:	7ffb      	ldrb	r3, [r7, #31]
 8011e0c:	69ba      	ldr	r2, [r7, #24]
 8011e0e:	4413      	add	r3, r2
 8011e10:	2200      	movs	r2, #0
 8011e12:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011e14:	7ffb      	ldrb	r3, [r7, #31]
 8011e16:	3301      	adds	r3, #1
 8011e18:	77fb      	strb	r3, [r7, #31]
 8011e1a:	7ffa      	ldrb	r2, [r7, #31]
 8011e1c:	69bb      	ldr	r3, [r7, #24]
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d3f2      	bcc.n	8011e0a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8011e24:	69bb      	ldr	r3, [r7, #24]
 8011e26:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011e2a:	3b01      	subs	r3, #1
 8011e2c:	0e1b      	lsrs	r3, r3, #24
 8011e2e:	b2da      	uxtb	r2, r3
 8011e30:	69bb      	ldr	r3, [r7, #24]
 8011e32:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011e3a:	3b01      	subs	r3, #1
 8011e3c:	0c1b      	lsrs	r3, r3, #16
 8011e3e:	b2da      	uxtb	r2, r3
 8011e40:	69bb      	ldr	r3, [r7, #24]
 8011e42:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8011e44:	69bb      	ldr	r3, [r7, #24]
 8011e46:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011e4a:	3b01      	subs	r3, #1
 8011e4c:	0a1b      	lsrs	r3, r3, #8
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	69bb      	ldr	r3, [r7, #24]
 8011e52:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	3b01      	subs	r3, #1
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	69bb      	ldr	r3, [r7, #24]
 8011e62:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011e64:	69bb      	ldr	r3, [r7, #24]
 8011e66:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e6a:	161b      	asrs	r3, r3, #24
 8011e6c:	b2da      	uxtb	r2, r3
 8011e6e:	69bb      	ldr	r3, [r7, #24]
 8011e70:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8011e72:	69bb      	ldr	r3, [r7, #24]
 8011e74:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e78:	141b      	asrs	r3, r3, #16
 8011e7a:	b2da      	uxtb	r2, r3
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8011e80:	69bb      	ldr	r3, [r7, #24]
 8011e82:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e86:	0a1b      	lsrs	r3, r3, #8
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	b2da      	uxtb	r2, r3
 8011e8c:	69bb      	ldr	r3, [r7, #24]
 8011e8e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8011e90:	69bb      	ldr	r3, [r7, #24]
 8011e92:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e96:	b2da      	uxtb	r2, r3
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	330a      	adds	r3, #10
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	330b      	adds	r3, #11
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011eac:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	330c      	adds	r3, #12
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8011eb6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8011eb8:	687a      	ldr	r2, [r7, #4]
 8011eba:	320d      	adds	r2, #13
 8011ebc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8011ebe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011ec0:	69bb      	ldr	r3, [r7, #24]
 8011ec2:	60da      	str	r2, [r3, #12]

  return 0;
 8011ec4:	2300      	movs	r3, #0
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3720      	adds	r7, #32
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b088      	sub	sp, #32
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	60f8      	str	r0, [r7, #12]
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	607a      	str	r2, [r7, #4]
 8011eda:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	32b0      	adds	r2, #176	; 0xb0
 8011ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011eea:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011eec:	69bb      	ldr	r3, [r7, #24]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d102      	bne.n	8011ef8 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8011ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ef6:	e061      	b.n	8011fbc <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011efe:	68fa      	ldr	r2, [r7, #12]
 8011f00:	33b0      	adds	r3, #176	; 0xb0
 8011f02:	009b      	lsls	r3, r3, #2
 8011f04:	4413      	add	r3, r2
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	f107 0214 	add.w	r2, r7, #20
 8011f0e:	f107 0110 	add.w	r1, r7, #16
 8011f12:	7af8      	ldrb	r0, [r7, #11]
 8011f14:	4798      	blx	r3
 8011f16:	4603      	mov	r3, r0
 8011f18:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d104      	bne.n	8011f2c <SCSI_ReadFormatCapacity+0x5e>
 8011f22:	69bb      	ldr	r3, [r7, #24]
 8011f24:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011f28:	2b02      	cmp	r3, #2
 8011f2a:	d108      	bne.n	8011f3e <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011f2c:	7af9      	ldrb	r1, [r7, #11]
 8011f2e:	233a      	movs	r3, #58	; 0x3a
 8011f30:	2202      	movs	r2, #2
 8011f32:	68f8      	ldr	r0, [r7, #12]
 8011f34:	f000 f929 	bl	801218a <SCSI_SenseCode>
    return -1;
 8011f38:	f04f 33ff 	mov.w	r3, #4294967295
 8011f3c:	e03e      	b.n	8011fbc <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8011f3e:	2300      	movs	r3, #0
 8011f40:	83fb      	strh	r3, [r7, #30]
 8011f42:	e007      	b.n	8011f54 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8011f44:	8bfb      	ldrh	r3, [r7, #30]
 8011f46:	69ba      	ldr	r2, [r7, #24]
 8011f48:	4413      	add	r3, r2
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8011f4e:	8bfb      	ldrh	r3, [r7, #30]
 8011f50:	3301      	adds	r3, #1
 8011f52:	83fb      	strh	r3, [r7, #30]
 8011f54:	8bfb      	ldrh	r3, [r7, #30]
 8011f56:	2b0b      	cmp	r3, #11
 8011f58:	d9f4      	bls.n	8011f44 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8011f5a:	69bb      	ldr	r3, [r7, #24]
 8011f5c:	2208      	movs	r2, #8
 8011f5e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	3b01      	subs	r3, #1
 8011f64:	0e1b      	lsrs	r3, r3, #24
 8011f66:	b2da      	uxtb	r2, r3
 8011f68:	69bb      	ldr	r3, [r7, #24]
 8011f6a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	3b01      	subs	r3, #1
 8011f70:	0c1b      	lsrs	r3, r3, #16
 8011f72:	b2da      	uxtb	r2, r3
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	3b01      	subs	r3, #1
 8011f7c:	0a1b      	lsrs	r3, r3, #8
 8011f7e:	b2da      	uxtb	r2, r3
 8011f80:	69bb      	ldr	r3, [r7, #24]
 8011f82:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	3b01      	subs	r3, #1
 8011f8a:	b2da      	uxtb	r2, r3
 8011f8c:	69bb      	ldr	r3, [r7, #24]
 8011f8e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8011f90:	69bb      	ldr	r3, [r7, #24]
 8011f92:	2202      	movs	r2, #2
 8011f94:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8011f96:	8abb      	ldrh	r3, [r7, #20]
 8011f98:	141b      	asrs	r3, r3, #16
 8011f9a:	b2da      	uxtb	r2, r3
 8011f9c:	69bb      	ldr	r3, [r7, #24]
 8011f9e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8011fa0:	8abb      	ldrh	r3, [r7, #20]
 8011fa2:	0a1b      	lsrs	r3, r3, #8
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	b2da      	uxtb	r2, r3
 8011fa8:	69bb      	ldr	r3, [r7, #24]
 8011faa:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8011fac:	8abb      	ldrh	r3, [r7, #20]
 8011fae:	b2da      	uxtb	r2, r3
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	220c      	movs	r2, #12
 8011fb8:	60da      	str	r2, [r3, #12]

  return 0;
 8011fba:	2300      	movs	r3, #0
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3720      	adds	r7, #32
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b086      	sub	sp, #24
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	460b      	mov	r3, r1
 8011fce:	607a      	str	r2, [r7, #4]
 8011fd0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	32b0      	adds	r2, #176	; 0xb0
 8011fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fe0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8011fe2:	2317      	movs	r3, #23
 8011fe4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d102      	bne.n	8011ff2 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8011fec:	f04f 33ff 	mov.w	r3, #4294967295
 8011ff0:	e011      	b.n	8012016 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	3304      	adds	r3, #4
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	8afa      	ldrh	r2, [r7, #22]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d303      	bcc.n	8012008 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	3304      	adds	r3, #4
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8012008:	8afb      	ldrh	r3, [r7, #22]
 801200a:	461a      	mov	r2, r3
 801200c:	4904      	ldr	r1, [pc, #16]	; (8012020 <SCSI_ModeSense6+0x5c>)
 801200e:	6938      	ldr	r0, [r7, #16]
 8012010:	f000 fe28 	bl	8012c64 <SCSI_UpdateBotData>

  return 0;
 8012014:	2300      	movs	r3, #0
}
 8012016:	4618      	mov	r0, r3
 8012018:	3718      	adds	r7, #24
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	20000080 	.word	0x20000080

08012024 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b086      	sub	sp, #24
 8012028:	af00      	add	r7, sp, #0
 801202a:	60f8      	str	r0, [r7, #12]
 801202c:	460b      	mov	r3, r1
 801202e:	607a      	str	r2, [r7, #4]
 8012030:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	32b0      	adds	r2, #176	; 0xb0
 801203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012040:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8012042:	231b      	movs	r3, #27
 8012044:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d102      	bne.n	8012052 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 801204c:	f04f 33ff 	mov.w	r3, #4294967295
 8012050:	e011      	b.n	8012076 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	3308      	adds	r3, #8
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	b29b      	uxth	r3, r3
 801205a:	8afa      	ldrh	r2, [r7, #22]
 801205c:	429a      	cmp	r2, r3
 801205e:	d303      	bcc.n	8012068 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	3308      	adds	r3, #8
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8012068:	8afb      	ldrh	r3, [r7, #22]
 801206a:	461a      	mov	r2, r3
 801206c:	4904      	ldr	r1, [pc, #16]	; (8012080 <SCSI_ModeSense10+0x5c>)
 801206e:	6938      	ldr	r0, [r7, #16]
 8012070:	f000 fdf8 	bl	8012c64 <SCSI_UpdateBotData>

  return 0;
 8012074:	2300      	movs	r3, #0
}
 8012076:	4618      	mov	r0, r3
 8012078:	3718      	adds	r7, #24
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	20000098 	.word	0x20000098

08012084 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b086      	sub	sp, #24
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	460b      	mov	r3, r1
 801208e:	607a      	str	r2, [r7, #4]
 8012090:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	32b0      	adds	r2, #176	; 0xb0
 801209c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120a0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d102      	bne.n	80120ae <SCSI_RequestSense+0x2a>
  {
    return -1;
 80120a8:	f04f 33ff 	mov.w	r3, #4294967295
 80120ac:	e069      	b.n	8012182 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d10a      	bne.n	80120ce <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80120be:	2320      	movs	r3, #32
 80120c0:	2205      	movs	r2, #5
 80120c2:	68f8      	ldr	r0, [r7, #12]
 80120c4:	f000 f861 	bl	801218a <SCSI_SenseCode>
    return -1;
 80120c8:	f04f 33ff 	mov.w	r3, #4294967295
 80120cc:	e059      	b.n	8012182 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80120ce:	2300      	movs	r3, #0
 80120d0:	75fb      	strb	r3, [r7, #23]
 80120d2:	e007      	b.n	80120e4 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 80120d4:	7dfb      	ldrb	r3, [r7, #23]
 80120d6:	693a      	ldr	r2, [r7, #16]
 80120d8:	4413      	add	r3, r2
 80120da:	2200      	movs	r2, #0
 80120dc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80120de:	7dfb      	ldrb	r3, [r7, #23]
 80120e0:	3301      	adds	r3, #1
 80120e2:	75fb      	strb	r3, [r7, #23]
 80120e4:	7dfb      	ldrb	r3, [r7, #23]
 80120e6:	2b11      	cmp	r3, #17
 80120e8:	d9f4      	bls.n	80120d4 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	2270      	movs	r2, #112	; 0x70
 80120ee:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	220c      	movs	r2, #12
 80120f4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012102:	429a      	cmp	r2, r3
 8012104:	d02e      	beq.n	8012164 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801210c:	461a      	mov	r2, r3
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	3248      	adds	r2, #72	; 0x48
 8012112:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012120:	693a      	ldr	r2, [r7, #16]
 8012122:	3348      	adds	r3, #72	; 0x48
 8012124:	00db      	lsls	r3, r3, #3
 8012126:	4413      	add	r3, r2
 8012128:	791a      	ldrb	r2, [r3, #4]
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012134:	693a      	ldr	r2, [r7, #16]
 8012136:	3348      	adds	r3, #72	; 0x48
 8012138:	00db      	lsls	r3, r3, #3
 801213a:	4413      	add	r3, r2
 801213c:	795a      	ldrb	r2, [r3, #5]
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012148:	3301      	adds	r3, #1
 801214a:	b2da      	uxtb	r2, r3
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012158:	2b04      	cmp	r3, #4
 801215a:	d103      	bne.n	8012164 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	2200      	movs	r2, #0
 8012160:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	2212      	movs	r2, #18
 8012168:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	3304      	adds	r3, #4
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	2b12      	cmp	r3, #18
 8012172:	d805      	bhi.n	8012180 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	3304      	adds	r3, #4
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	461a      	mov	r2, r3
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	3718      	adds	r7, #24
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}

0801218a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801218a:	b480      	push	{r7}
 801218c:	b085      	sub	sp, #20
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
 8012192:	4608      	mov	r0, r1
 8012194:	4611      	mov	r1, r2
 8012196:	461a      	mov	r2, r3
 8012198:	4603      	mov	r3, r0
 801219a:	70fb      	strb	r3, [r7, #3]
 801219c:	460b      	mov	r3, r1
 801219e:	70bb      	strb	r3, [r7, #2]
 80121a0:	4613      	mov	r3, r2
 80121a2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	32b0      	adds	r2, #176	; 0xb0
 80121ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121b2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d02c      	beq.n	8012214 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80121c0:	461a      	mov	r2, r3
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	3248      	adds	r2, #72	; 0x48
 80121c6:	78b9      	ldrb	r1, [r7, #2]
 80121c8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80121d2:	68fa      	ldr	r2, [r7, #12]
 80121d4:	3348      	adds	r3, #72	; 0x48
 80121d6:	00db      	lsls	r3, r3, #3
 80121d8:	4413      	add	r3, r2
 80121da:	787a      	ldrb	r2, [r7, #1]
 80121dc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80121e4:	68fa      	ldr	r2, [r7, #12]
 80121e6:	3348      	adds	r3, #72	; 0x48
 80121e8:	00db      	lsls	r3, r3, #3
 80121ea:	4413      	add	r3, r2
 80121ec:	2200      	movs	r2, #0
 80121ee:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80121f6:	3301      	adds	r3, #1
 80121f8:	b2da      	uxtb	r2, r3
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012206:	2b04      	cmp	r3, #4
 8012208:	d105      	bne.n	8012216 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2200      	movs	r2, #0
 801220e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8012212:	e000      	b.n	8012216 <SCSI_SenseCode+0x8c>
    return;
 8012214:	bf00      	nop
  }
}
 8012216:	3714      	adds	r7, #20
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b086      	sub	sp, #24
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	460b      	mov	r3, r1
 801222a:	607a      	str	r2, [r7, #4]
 801222c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	32b0      	adds	r2, #176	; 0xb0
 8012238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801223c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d102      	bne.n	801224a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8012244:	f04f 33ff 	mov.w	r3, #4294967295
 8012248:	e03b      	b.n	80122c2 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012250:	2b01      	cmp	r3, #1
 8012252:	d10f      	bne.n	8012274 <SCSI_StartStopUnit+0x54>
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	3304      	adds	r3, #4
 8012258:	781b      	ldrb	r3, [r3, #0]
 801225a:	f003 0303 	and.w	r3, r3, #3
 801225e:	2b02      	cmp	r3, #2
 8012260:	d108      	bne.n	8012274 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012262:	7af9      	ldrb	r1, [r7, #11]
 8012264:	2324      	movs	r3, #36	; 0x24
 8012266:	2205      	movs	r2, #5
 8012268:	68f8      	ldr	r0, [r7, #12]
 801226a:	f7ff ff8e 	bl	801218a <SCSI_SenseCode>

    return -1;
 801226e:	f04f 33ff 	mov.w	r3, #4294967295
 8012272:	e026      	b.n	80122c2 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	3304      	adds	r3, #4
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	f003 0303 	and.w	r3, r3, #3
 801227e:	2b01      	cmp	r3, #1
 8012280:	d104      	bne.n	801228c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	2200      	movs	r2, #0
 8012286:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801228a:	e016      	b.n	80122ba <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	3304      	adds	r3, #4
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	f003 0303 	and.w	r3, r3, #3
 8012296:	2b02      	cmp	r3, #2
 8012298:	d104      	bne.n	80122a4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	2202      	movs	r2, #2
 801229e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80122a2:	e00a      	b.n	80122ba <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	3304      	adds	r3, #4
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	f003 0303 	and.w	r3, r3, #3
 80122ae:	2b03      	cmp	r3, #3
 80122b0:	d103      	bne.n	80122ba <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	2200      	movs	r2, #0
 80122b6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	2200      	movs	r2, #0
 80122be:	60da      	str	r2, [r3, #12]

  return 0;
 80122c0:	2300      	movs	r3, #0
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3718      	adds	r7, #24
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}

080122ca <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80122ca:	b480      	push	{r7}
 80122cc:	b087      	sub	sp, #28
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	60f8      	str	r0, [r7, #12]
 80122d2:	460b      	mov	r3, r1
 80122d4:	607a      	str	r2, [r7, #4]
 80122d6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	32b0      	adds	r2, #176	; 0xb0
 80122e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122e6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d102      	bne.n	80122f4 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 80122ee:	f04f 33ff 	mov.w	r3, #4294967295
 80122f2:	e011      	b.n	8012318 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	3304      	adds	r3, #4
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d104      	bne.n	8012308 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	2200      	movs	r2, #0
 8012302:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8012306:	e003      	b.n	8012310 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	2201      	movs	r2, #1
 801230c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	2200      	movs	r2, #0
 8012314:	60da      	str	r2, [r3, #12]

  return 0;
 8012316:	2300      	movs	r3, #0
}
 8012318:	4618      	mov	r0, r3
 801231a:	371c      	adds	r7, #28
 801231c:	46bd      	mov	sp, r7
 801231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012322:	4770      	bx	lr

08012324 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b086      	sub	sp, #24
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	460b      	mov	r3, r1
 801232e:	607a      	str	r2, [r7, #4]
 8012330:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	32b0      	adds	r2, #176	; 0xb0
 801233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012340:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d102      	bne.n	801234e <SCSI_Read10+0x2a>
  {
    return -1;
 8012348:	f04f 33ff 	mov.w	r3, #4294967295
 801234c:	e090      	b.n	8012470 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	7a1b      	ldrb	r3, [r3, #8]
 8012352:	2b00      	cmp	r3, #0
 8012354:	f040 8082 	bne.w	801245c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801235e:	b25b      	sxtb	r3, r3
 8012360:	2b00      	cmp	r3, #0
 8012362:	db0a      	blt.n	801237a <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801236a:	2320      	movs	r3, #32
 801236c:	2205      	movs	r2, #5
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f7ff ff0b 	bl	801218a <SCSI_SenseCode>
      return -1;
 8012374:	f04f 33ff 	mov.w	r3, #4294967295
 8012378:	e07a      	b.n	8012470 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012380:	2b02      	cmp	r3, #2
 8012382:	d108      	bne.n	8012396 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012384:	7af9      	ldrb	r1, [r7, #11]
 8012386:	233a      	movs	r3, #58	; 0x3a
 8012388:	2202      	movs	r2, #2
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f7ff fefd 	bl	801218a <SCSI_SenseCode>

      return -1;
 8012390:	f04f 33ff 	mov.w	r3, #4294967295
 8012394:	e06c      	b.n	8012470 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801239c:	68fa      	ldr	r2, [r7, #12]
 801239e:	33b0      	adds	r3, #176	; 0xb0
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	4413      	add	r3, r2
 80123a4:	685b      	ldr	r3, [r3, #4]
 80123a6:	689b      	ldr	r3, [r3, #8]
 80123a8:	7afa      	ldrb	r2, [r7, #11]
 80123aa:	4610      	mov	r0, r2
 80123ac:	4798      	blx	r3
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d008      	beq.n	80123c6 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80123b4:	7af9      	ldrb	r1, [r7, #11]
 80123b6:	233a      	movs	r3, #58	; 0x3a
 80123b8:	2202      	movs	r2, #2
 80123ba:	68f8      	ldr	r0, [r7, #12]
 80123bc:	f7ff fee5 	bl	801218a <SCSI_SenseCode>
      return -1;
 80123c0:	f04f 33ff 	mov.w	r3, #4294967295
 80123c4:	e054      	b.n	8012470 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	3302      	adds	r3, #2
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	3303      	adds	r3, #3
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80123d6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	3304      	adds	r3, #4
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80123e0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80123e2:	687a      	ldr	r2, [r7, #4]
 80123e4:	3205      	adds	r2, #5
 80123e6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80123e8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	3307      	adds	r3, #7
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	021b      	lsls	r3, r3, #8
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	3208      	adds	r2, #8
 80123fc:	7812      	ldrb	r2, [r2, #0]
 80123fe:	431a      	orrs	r2, r3
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012412:	7af9      	ldrb	r1, [r7, #11]
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f000 fadc 	bl	80129d2 <SCSI_CheckAddressRange>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	da02      	bge.n	8012426 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012420:	f04f 33ff 	mov.w	r3, #4294967295
 8012424:	e024      	b.n	8012470 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801242c:	697b      	ldr	r3, [r7, #20]
 801242e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012432:	6979      	ldr	r1, [r7, #20]
 8012434:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8012438:	fb01 f303 	mul.w	r3, r1, r3
 801243c:	429a      	cmp	r2, r3
 801243e:	d00a      	beq.n	8012456 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012446:	2320      	movs	r3, #32
 8012448:	2205      	movs	r2, #5
 801244a:	68f8      	ldr	r0, [r7, #12]
 801244c:	f7ff fe9d 	bl	801218a <SCSI_SenseCode>
      return -1;
 8012450:	f04f 33ff 	mov.w	r3, #4294967295
 8012454:	e00c      	b.n	8012470 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	2202      	movs	r2, #2
 801245a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012462:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8012464:	7afb      	ldrb	r3, [r7, #11]
 8012466:	4619      	mov	r1, r3
 8012468:	68f8      	ldr	r0, [r7, #12]
 801246a:	f000 fadf 	bl	8012a2c <SCSI_ProcessRead>
 801246e:	4603      	mov	r3, r0
}
 8012470:	4618      	mov	r0, r3
 8012472:	3718      	adds	r7, #24
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}

08012478 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b086      	sub	sp, #24
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	460b      	mov	r3, r1
 8012482:	607a      	str	r2, [r7, #4]
 8012484:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	32b0      	adds	r2, #176	; 0xb0
 8012490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012494:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d102      	bne.n	80124a2 <SCSI_Read12+0x2a>
  {
    return -1;
 801249c:	f04f 33ff 	mov.w	r3, #4294967295
 80124a0:	e09a      	b.n	80125d8 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	7a1b      	ldrb	r3, [r3, #8]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	f040 808c 	bne.w	80125c4 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80124b2:	b25b      	sxtb	r3, r3
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	db0a      	blt.n	80124ce <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80124be:	2320      	movs	r3, #32
 80124c0:	2205      	movs	r2, #5
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f7ff fe61 	bl	801218a <SCSI_SenseCode>
      return -1;
 80124c8:	f04f 33ff 	mov.w	r3, #4294967295
 80124cc:	e084      	b.n	80125d8 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80124d4:	2b02      	cmp	r3, #2
 80124d6:	d108      	bne.n	80124ea <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80124d8:	7af9      	ldrb	r1, [r7, #11]
 80124da:	233a      	movs	r3, #58	; 0x3a
 80124dc:	2202      	movs	r2, #2
 80124de:	68f8      	ldr	r0, [r7, #12]
 80124e0:	f7ff fe53 	bl	801218a <SCSI_SenseCode>
      return -1;
 80124e4:	f04f 33ff 	mov.w	r3, #4294967295
 80124e8:	e076      	b.n	80125d8 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80124f0:	68fa      	ldr	r2, [r7, #12]
 80124f2:	33b0      	adds	r3, #176	; 0xb0
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	4413      	add	r3, r2
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	7afa      	ldrb	r2, [r7, #11]
 80124fe:	4610      	mov	r0, r2
 8012500:	4798      	blx	r3
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d008      	beq.n	801251a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012508:	7af9      	ldrb	r1, [r7, #11]
 801250a:	233a      	movs	r3, #58	; 0x3a
 801250c:	2202      	movs	r2, #2
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f7ff fe3b 	bl	801218a <SCSI_SenseCode>
      return -1;
 8012514:	f04f 33ff 	mov.w	r3, #4294967295
 8012518:	e05e      	b.n	80125d8 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	3302      	adds	r3, #2
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	3303      	adds	r3, #3
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801252a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	3304      	adds	r3, #4
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012534:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012536:	687a      	ldr	r2, [r7, #4]
 8012538:	3205      	adds	r2, #5
 801253a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801253c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	3306      	adds	r3, #6
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	3307      	adds	r3, #7
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012554:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	3308      	adds	r3, #8
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801255e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	3209      	adds	r2, #9
 8012564:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012566:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801257a:	7af9      	ldrb	r1, [r7, #11]
 801257c:	68f8      	ldr	r0, [r7, #12]
 801257e:	f000 fa28 	bl	80129d2 <SCSI_CheckAddressRange>
 8012582:	4603      	mov	r3, r0
 8012584:	2b00      	cmp	r3, #0
 8012586:	da02      	bge.n	801258e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012588:	f04f 33ff 	mov.w	r3, #4294967295
 801258c:	e024      	b.n	80125d8 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801259a:	6979      	ldr	r1, [r7, #20]
 801259c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80125a0:	fb01 f303 	mul.w	r3, r1, r3
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d00a      	beq.n	80125be <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80125ae:	2320      	movs	r3, #32
 80125b0:	2205      	movs	r2, #5
 80125b2:	68f8      	ldr	r0, [r7, #12]
 80125b4:	f7ff fde9 	bl	801218a <SCSI_SenseCode>
      return -1;
 80125b8:	f04f 33ff 	mov.w	r3, #4294967295
 80125bc:	e00c      	b.n	80125d8 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	2202      	movs	r2, #2
 80125c2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80125ca:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80125cc:	7afb      	ldrb	r3, [r7, #11]
 80125ce:	4619      	mov	r1, r3
 80125d0:	68f8      	ldr	r0, [r7, #12]
 80125d2:	f000 fa2b 	bl	8012a2c <SCSI_ProcessRead>
 80125d6:	4603      	mov	r3, r0
}
 80125d8:	4618      	mov	r0, r3
 80125da:	3718      	adds	r7, #24
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b086      	sub	sp, #24
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	460b      	mov	r3, r1
 80125ea:	607a      	str	r2, [r7, #4]
 80125ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	32b0      	adds	r2, #176	; 0xb0
 80125f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125fc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d102      	bne.n	801260a <SCSI_Write10+0x2a>
  {
    return -1;
 8012604:	f04f 33ff 	mov.w	r3, #4294967295
 8012608:	e0ba      	b.n	8012780 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	7a1b      	ldrb	r3, [r3, #8]
 801260e:	2b00      	cmp	r3, #0
 8012610:	f040 80b0 	bne.w	8012774 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801261a:	2b00      	cmp	r3, #0
 801261c:	d10a      	bne.n	8012634 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012624:	2320      	movs	r3, #32
 8012626:	2205      	movs	r2, #5
 8012628:	68f8      	ldr	r0, [r7, #12]
 801262a:	f7ff fdae 	bl	801218a <SCSI_SenseCode>
      return -1;
 801262e:	f04f 33ff 	mov.w	r3, #4294967295
 8012632:	e0a5      	b.n	8012780 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801263a:	b25b      	sxtb	r3, r3
 801263c:	2b00      	cmp	r3, #0
 801263e:	da0a      	bge.n	8012656 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012646:	2320      	movs	r3, #32
 8012648:	2205      	movs	r2, #5
 801264a:	68f8      	ldr	r0, [r7, #12]
 801264c:	f7ff fd9d 	bl	801218a <SCSI_SenseCode>
      return -1;
 8012650:	f04f 33ff 	mov.w	r3, #4294967295
 8012654:	e094      	b.n	8012780 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801265c:	68fa      	ldr	r2, [r7, #12]
 801265e:	33b0      	adds	r3, #176	; 0xb0
 8012660:	009b      	lsls	r3, r3, #2
 8012662:	4413      	add	r3, r2
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	689b      	ldr	r3, [r3, #8]
 8012668:	7afa      	ldrb	r2, [r7, #11]
 801266a:	4610      	mov	r0, r2
 801266c:	4798      	blx	r3
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d008      	beq.n	8012686 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012674:	7af9      	ldrb	r1, [r7, #11]
 8012676:	233a      	movs	r3, #58	; 0x3a
 8012678:	2202      	movs	r2, #2
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f7ff fd85 	bl	801218a <SCSI_SenseCode>
      return -1;
 8012680:	f04f 33ff 	mov.w	r3, #4294967295
 8012684:	e07c      	b.n	8012780 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801268c:	68fa      	ldr	r2, [r7, #12]
 801268e:	33b0      	adds	r3, #176	; 0xb0
 8012690:	009b      	lsls	r3, r3, #2
 8012692:	4413      	add	r3, r2
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	68db      	ldr	r3, [r3, #12]
 8012698:	7afa      	ldrb	r2, [r7, #11]
 801269a:	4610      	mov	r0, r2
 801269c:	4798      	blx	r3
 801269e:	4603      	mov	r3, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d008      	beq.n	80126b6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80126a4:	7af9      	ldrb	r1, [r7, #11]
 80126a6:	2327      	movs	r3, #39	; 0x27
 80126a8:	2202      	movs	r2, #2
 80126aa:	68f8      	ldr	r0, [r7, #12]
 80126ac:	f7ff fd6d 	bl	801218a <SCSI_SenseCode>
      return -1;
 80126b0:	f04f 33ff 	mov.w	r3, #4294967295
 80126b4:	e064      	b.n	8012780 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	3302      	adds	r3, #2
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	3303      	adds	r3, #3
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80126c6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	3304      	adds	r3, #4
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80126d0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	3205      	adds	r2, #5
 80126d6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80126d8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	3307      	adds	r3, #7
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80126e8:	687a      	ldr	r2, [r7, #4]
 80126ea:	3208      	adds	r2, #8
 80126ec:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80126ee:	431a      	orrs	r2, r3
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012702:	7af9      	ldrb	r1, [r7, #11]
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f000 f964 	bl	80129d2 <SCSI_CheckAddressRange>
 801270a:	4603      	mov	r3, r0
 801270c:	2b00      	cmp	r3, #0
 801270e:	da02      	bge.n	8012716 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012710:	f04f 33ff 	mov.w	r3, #4294967295
 8012714:	e034      	b.n	8012780 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801271c:	697a      	ldr	r2, [r7, #20]
 801271e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012722:	fb02 f303 	mul.w	r3, r2, r3
 8012726:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801272e:	693a      	ldr	r2, [r7, #16]
 8012730:	429a      	cmp	r2, r3
 8012732:	d00a      	beq.n	801274a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801273a:	2320      	movs	r3, #32
 801273c:	2205      	movs	r2, #5
 801273e:	68f8      	ldr	r0, [r7, #12]
 8012740:	f7ff fd23 	bl	801218a <SCSI_SenseCode>
      return -1;
 8012744:	f04f 33ff 	mov.w	r3, #4294967295
 8012748:	e01a      	b.n	8012780 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012750:	bf28      	it	cs
 8012752:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012756:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	2201      	movs	r2, #1
 801275c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801275e:	4b0a      	ldr	r3, [pc, #40]	; (8012788 <SCSI_Write10+0x1a8>)
 8012760:	7819      	ldrb	r1, [r3, #0]
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	f103 0210 	add.w	r2, r3, #16
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	68f8      	ldr	r0, [r7, #12]
 801276c:	f005 f967 	bl	8017a3e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012770:	2300      	movs	r3, #0
 8012772:	e005      	b.n	8012780 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8012774:	7afb      	ldrb	r3, [r7, #11]
 8012776:	4619      	mov	r1, r3
 8012778:	68f8      	ldr	r0, [r7, #12]
 801277a:	f000 f9dd 	bl	8012b38 <SCSI_ProcessWrite>
 801277e:	4603      	mov	r3, r0
}
 8012780:	4618      	mov	r0, r3
 8012782:	3718      	adds	r7, #24
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}
 8012788:	2000006f 	.word	0x2000006f

0801278c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b086      	sub	sp, #24
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	460b      	mov	r3, r1
 8012796:	607a      	str	r2, [r7, #4]
 8012798:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	32b0      	adds	r2, #176	; 0xb0
 80127a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127a8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d102      	bne.n	80127b6 <SCSI_Write12+0x2a>
  {
    return -1;
 80127b0:	f04f 33ff 	mov.w	r3, #4294967295
 80127b4:	e0ca      	b.n	801294c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	7a1b      	ldrb	r3, [r3, #8]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	f040 80c0 	bne.w	8012940 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d10a      	bne.n	80127e0 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80127d0:	2320      	movs	r3, #32
 80127d2:	2205      	movs	r2, #5
 80127d4:	68f8      	ldr	r0, [r7, #12]
 80127d6:	f7ff fcd8 	bl	801218a <SCSI_SenseCode>
      return -1;
 80127da:	f04f 33ff 	mov.w	r3, #4294967295
 80127de:	e0b5      	b.n	801294c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80127e6:	b25b      	sxtb	r3, r3
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	da0a      	bge.n	8012802 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80127f2:	2320      	movs	r3, #32
 80127f4:	2205      	movs	r2, #5
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f7ff fcc7 	bl	801218a <SCSI_SenseCode>
      return -1;
 80127fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012800:	e0a4      	b.n	801294c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012808:	68fa      	ldr	r2, [r7, #12]
 801280a:	33b0      	adds	r3, #176	; 0xb0
 801280c:	009b      	lsls	r3, r3, #2
 801280e:	4413      	add	r3, r2
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	689b      	ldr	r3, [r3, #8]
 8012814:	7afa      	ldrb	r2, [r7, #11]
 8012816:	4610      	mov	r0, r2
 8012818:	4798      	blx	r3
 801281a:	4603      	mov	r3, r0
 801281c:	2b00      	cmp	r3, #0
 801281e:	d00b      	beq.n	8012838 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012820:	7af9      	ldrb	r1, [r7, #11]
 8012822:	233a      	movs	r3, #58	; 0x3a
 8012824:	2202      	movs	r2, #2
 8012826:	68f8      	ldr	r0, [r7, #12]
 8012828:	f7ff fcaf 	bl	801218a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	2205      	movs	r2, #5
 8012830:	721a      	strb	r2, [r3, #8]
      return -1;
 8012832:	f04f 33ff 	mov.w	r3, #4294967295
 8012836:	e089      	b.n	801294c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801283e:	68fa      	ldr	r2, [r7, #12]
 8012840:	33b0      	adds	r3, #176	; 0xb0
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	4413      	add	r3, r2
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	68db      	ldr	r3, [r3, #12]
 801284a:	7afa      	ldrb	r2, [r7, #11]
 801284c:	4610      	mov	r0, r2
 801284e:	4798      	blx	r3
 8012850:	4603      	mov	r3, r0
 8012852:	2b00      	cmp	r3, #0
 8012854:	d00b      	beq.n	801286e <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012856:	7af9      	ldrb	r1, [r7, #11]
 8012858:	2327      	movs	r3, #39	; 0x27
 801285a:	2202      	movs	r2, #2
 801285c:	68f8      	ldr	r0, [r7, #12]
 801285e:	f7ff fc94 	bl	801218a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	2205      	movs	r2, #5
 8012866:	721a      	strb	r2, [r3, #8]
      return -1;
 8012868:	f04f 33ff 	mov.w	r3, #4294967295
 801286c:	e06e      	b.n	801294c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	3302      	adds	r3, #2
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	3303      	adds	r3, #3
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801287e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	3304      	adds	r3, #4
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012888:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801288a:	687a      	ldr	r2, [r7, #4]
 801288c:	3205      	adds	r2, #5
 801288e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012890:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	3306      	adds	r3, #6
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	3307      	adds	r3, #7
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80128a8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	3308      	adds	r3, #8
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80128b2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	3209      	adds	r2, #9
 80128b8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80128ba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80128bc:	697b      	ldr	r3, [r7, #20]
 80128be:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80128ce:	7af9      	ldrb	r1, [r7, #11]
 80128d0:	68f8      	ldr	r0, [r7, #12]
 80128d2:	f000 f87e 	bl	80129d2 <SCSI_CheckAddressRange>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	da02      	bge.n	80128e2 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80128dc:	f04f 33ff 	mov.w	r3, #4294967295
 80128e0:	e034      	b.n	801294c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80128e8:	697a      	ldr	r2, [r7, #20]
 80128ea:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80128ee:	fb02 f303 	mul.w	r3, r2, r3
 80128f2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80128fa:	693a      	ldr	r2, [r7, #16]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d00a      	beq.n	8012916 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012906:	2320      	movs	r3, #32
 8012908:	2205      	movs	r2, #5
 801290a:	68f8      	ldr	r0, [r7, #12]
 801290c:	f7ff fc3d 	bl	801218a <SCSI_SenseCode>
      return -1;
 8012910:	f04f 33ff 	mov.w	r3, #4294967295
 8012914:	e01a      	b.n	801294c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801291c:	bf28      	it	cs
 801291e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012922:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	2201      	movs	r2, #1
 8012928:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801292a:	4b0a      	ldr	r3, [pc, #40]	; (8012954 <SCSI_Write12+0x1c8>)
 801292c:	7819      	ldrb	r1, [r3, #0]
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	f103 0210 	add.w	r2, r3, #16
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	68f8      	ldr	r0, [r7, #12]
 8012938:	f005 f881 	bl	8017a3e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801293c:	2300      	movs	r3, #0
 801293e:	e005      	b.n	801294c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8012940:	7afb      	ldrb	r3, [r7, #11]
 8012942:	4619      	mov	r1, r3
 8012944:	68f8      	ldr	r0, [r7, #12]
 8012946:	f000 f8f7 	bl	8012b38 <SCSI_ProcessWrite>
 801294a:	4603      	mov	r3, r0
}
 801294c:	4618      	mov	r0, r3
 801294e:	3718      	adds	r7, #24
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	2000006f 	.word	0x2000006f

08012958 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b086      	sub	sp, #24
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	460b      	mov	r3, r1
 8012962:	607a      	str	r2, [r7, #4]
 8012964:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	32b0      	adds	r2, #176	; 0xb0
 8012970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012974:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d102      	bne.n	8012982 <SCSI_Verify10+0x2a>
  {
    return -1;
 801297c:	f04f 33ff 	mov.w	r3, #4294967295
 8012980:	e023      	b.n	80129ca <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	3301      	adds	r3, #1
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	f003 0302 	and.w	r3, r3, #2
 801298c:	2b00      	cmp	r3, #0
 801298e:	d008      	beq.n	80129a2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012990:	7af9      	ldrb	r1, [r7, #11]
 8012992:	2324      	movs	r3, #36	; 0x24
 8012994:	2205      	movs	r2, #5
 8012996:	68f8      	ldr	r0, [r7, #12]
 8012998:	f7ff fbf7 	bl	801218a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801299c:	f04f 33ff 	mov.w	r3, #4294967295
 80129a0:	e013      	b.n	80129ca <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80129ae:	7af9      	ldrb	r1, [r7, #11]
 80129b0:	68f8      	ldr	r0, [r7, #12]
 80129b2:	f000 f80e 	bl	80129d2 <SCSI_CheckAddressRange>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	da02      	bge.n	80129c2 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80129bc:	f04f 33ff 	mov.w	r3, #4294967295
 80129c0:	e003      	b.n	80129ca <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	2200      	movs	r2, #0
 80129c6:	60da      	str	r2, [r3, #12]

  return 0;
 80129c8:	2300      	movs	r3, #0
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3718      	adds	r7, #24
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}

080129d2 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b086      	sub	sp, #24
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	60f8      	str	r0, [r7, #12]
 80129da:	607a      	str	r2, [r7, #4]
 80129dc:	603b      	str	r3, [r7, #0]
 80129de:	460b      	mov	r3, r1
 80129e0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	32b0      	adds	r2, #176	; 0xb0
 80129ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129f0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d102      	bne.n	80129fe <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 80129f8:	f04f 33ff 	mov.w	r3, #4294967295
 80129fc:	e011      	b.n	8012a22 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	441a      	add	r2, r3
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d908      	bls.n	8012a20 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8012a0e:	7af9      	ldrb	r1, [r7, #11]
 8012a10:	2321      	movs	r3, #33	; 0x21
 8012a12:	2205      	movs	r2, #5
 8012a14:	68f8      	ldr	r0, [r7, #12]
 8012a16:	f7ff fbb8 	bl	801218a <SCSI_SenseCode>
    return -1;
 8012a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a1e:	e000      	b.n	8012a22 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3718      	adds	r7, #24
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
	...

08012a2c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012a2c:	b590      	push	{r4, r7, lr}
 8012a2e:	b085      	sub	sp, #20
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	460b      	mov	r3, r1
 8012a36:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	32b0      	adds	r2, #176	; 0xb0
 8012a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a46:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d102      	bne.n	8012a54 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8012a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a52:	e06a      	b.n	8012b2a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012a5a:	68fa      	ldr	r2, [r7, #12]
 8012a5c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012a60:	fb02 f303 	mul.w	r3, r2, r3
 8012a64:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a6c:	bf28      	it	cs
 8012a6e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012a72:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	33b0      	adds	r3, #176	; 0xb0
 8012a7e:	009b      	lsls	r3, r3, #2
 8012a80:	4413      	add	r3, r2
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	691c      	ldr	r4, [r3, #16]
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	f103 0110 	add.w	r1, r3, #16
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012a98:	4618      	mov	r0, r3
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	78f8      	ldrb	r0, [r7, #3]
 8012aa4:	47a0      	blx	r4
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	da08      	bge.n	8012abe <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8012aac:	78f9      	ldrb	r1, [r7, #3]
 8012aae:	2311      	movs	r3, #17
 8012ab0:	2204      	movs	r2, #4
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f7ff fb69 	bl	801218a <SCSI_SenseCode>
    return -1;
 8012ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8012abc:	e035      	b.n	8012b2a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8012abe:	4b1d      	ldr	r3, [pc, #116]	; (8012b34 <SCSI_ProcessRead+0x108>)
 8012ac0:	7819      	ldrb	r1, [r3, #0]
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	f103 0210 	add.w	r2, r3, #16
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f004 ff96 	bl	80179fc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012adc:	4619      	mov	r1, r3
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	fbb3 f3f1 	udiv	r3, r3, r1
 8012ae4:	441a      	add	r2, r3
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012af8:	4619      	mov	r1, r3
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	fbb3 f3f1 	udiv	r3, r3, r1
 8012b00:	1ad2      	subs	r2, r2, r3
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	1ad2      	subs	r2, r2, r3
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d102      	bne.n	8012b28 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	2203      	movs	r2, #3
 8012b26:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8012b28:	2300      	movs	r3, #0
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3714      	adds	r7, #20
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd90      	pop	{r4, r7, pc}
 8012b32:	bf00      	nop
 8012b34:	2000006e 	.word	0x2000006e

08012b38 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012b38:	b590      	push	{r4, r7, lr}
 8012b3a:	b085      	sub	sp, #20
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	460b      	mov	r3, r1
 8012b42:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	32b0      	adds	r2, #176	; 0xb0
 8012b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b52:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d102      	bne.n	8012b60 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8012b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8012b5e:	e07a      	b.n	8012c56 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012b66:	68fa      	ldr	r2, [r7, #12]
 8012b68:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012b6c:	fb02 f303 	mul.w	r3, r2, r3
 8012b70:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b78:	bf28      	it	cs
 8012b7a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012b7e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b86:	687a      	ldr	r2, [r7, #4]
 8012b88:	33b0      	adds	r3, #176	; 0xb0
 8012b8a:	009b      	lsls	r3, r3, #2
 8012b8c:	4413      	add	r3, r2
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	695c      	ldr	r4, [r3, #20]
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	f103 0110 	add.w	r1, r3, #16
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	78f8      	ldrb	r0, [r7, #3]
 8012bb0:	47a0      	blx	r4
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	da08      	bge.n	8012bca <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8012bb8:	78f9      	ldrb	r1, [r7, #3]
 8012bba:	2303      	movs	r3, #3
 8012bbc:	2204      	movs	r2, #4
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f7ff fae3 	bl	801218a <SCSI_SenseCode>
    return -1;
 8012bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bc8:	e045      	b.n	8012c56 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012bd6:	4619      	mov	r1, r3
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8012bde:	441a      	add	r2, r3
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012bf2:	4619      	mov	r1, r3
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8012bfa:	1ad2      	subs	r2, r2, r3
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	1ad2      	subs	r2, r2, r3
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d104      	bne.n	8012c26 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012c1c:	2100      	movs	r1, #0
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f7fe fd14 	bl	801164c <MSC_BOT_SendCSW>
 8012c24:	e016      	b.n	8012c54 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012c32:	fb02 f303 	mul.w	r3, r2, r3
 8012c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c3a:	bf28      	it	cs
 8012c3c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012c40:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012c42:	4b07      	ldr	r3, [pc, #28]	; (8012c60 <SCSI_ProcessWrite+0x128>)
 8012c44:	7819      	ldrb	r1, [r3, #0]
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	f103 0210 	add.w	r2, r3, #16
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f004 fef5 	bl	8017a3e <USBD_LL_PrepareReceive>
  }

  return 0;
 8012c54:	2300      	movs	r3, #0
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3714      	adds	r7, #20
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd90      	pop	{r4, r7, pc}
 8012c5e:	bf00      	nop
 8012c60:	2000006f 	.word	0x2000006f

08012c64 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8012c64:	b480      	push	{r7}
 8012c66:	b087      	sub	sp, #28
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	60b9      	str	r1, [r7, #8]
 8012c6e:	4613      	mov	r3, r2
 8012c70:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8012c72:	88fb      	ldrh	r3, [r7, #6]
 8012c74:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d102      	bne.n	8012c82 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8012c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c80:	e013      	b.n	8012caa <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8012c82:	8afa      	ldrh	r2, [r7, #22]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8012c88:	e00b      	b.n	8012ca2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8012c8a:	8afb      	ldrh	r3, [r7, #22]
 8012c8c:	3b01      	subs	r3, #1
 8012c8e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8012c90:	8afb      	ldrh	r3, [r7, #22]
 8012c92:	68ba      	ldr	r2, [r7, #8]
 8012c94:	441a      	add	r2, r3
 8012c96:	8afb      	ldrh	r3, [r7, #22]
 8012c98:	7811      	ldrb	r1, [r2, #0]
 8012c9a:	68fa      	ldr	r2, [r7, #12]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	460a      	mov	r2, r1
 8012ca0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8012ca2:	8afb      	ldrh	r3, [r7, #22]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d1f0      	bne.n	8012c8a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	371c      	adds	r7, #28
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb4:	4770      	bx	lr

08012cb6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012cb6:	b580      	push	{r7, lr}
 8012cb8:	b086      	sub	sp, #24
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	60f8      	str	r0, [r7, #12]
 8012cbe:	60b9      	str	r1, [r7, #8]
 8012cc0:	4613      	mov	r3, r2
 8012cc2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d101      	bne.n	8012cce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012cca:	2303      	movs	r3, #3
 8012ccc:	e01f      	b.n	8012d0e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d003      	beq.n	8012cf4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	68ba      	ldr	r2, [r7, #8]
 8012cf0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	79fa      	ldrb	r2, [r7, #7]
 8012d00:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012d02:	68f8      	ldr	r0, [r7, #12]
 8012d04:	f004 fd26 	bl	8017754 <USBD_LL_Init>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3718      	adds	r7, #24
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}

08012d16 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012d16:	b580      	push	{r7, lr}
 8012d18:	b084      	sub	sp, #16
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
 8012d1e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012d20:	2300      	movs	r3, #0
 8012d22:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d101      	bne.n	8012d2e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012d2a:	2303      	movs	r3, #3
 8012d2c:	e025      	b.n	8012d7a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	683a      	ldr	r2, [r7, #0]
 8012d32:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	32ae      	adds	r2, #174	; 0xae
 8012d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d00f      	beq.n	8012d6a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	32ae      	adds	r2, #174	; 0xae
 8012d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d5a:	f107 020e 	add.w	r2, r7, #14
 8012d5e:	4610      	mov	r0, r2
 8012d60:	4798      	blx	r3
 8012d62:	4602      	mov	r2, r0
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8012d70:	1c5a      	adds	r2, r3, #1
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8012d78:	2300      	movs	r3, #0
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3710      	adds	r7, #16
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}

08012d82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012d82:	b580      	push	{r7, lr}
 8012d84:	b082      	sub	sp, #8
 8012d86:	af00      	add	r7, sp, #0
 8012d88:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f004 fd2e 	bl	80177ec <USBD_LL_Start>
 8012d90:	4603      	mov	r3, r0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3708      	adds	r7, #8
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012d9a:	b480      	push	{r7}
 8012d9c:	b083      	sub	sp, #12
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012da2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	370c      	adds	r7, #12
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr

08012db0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
 8012db8:	460b      	mov	r3, r1
 8012dba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d009      	beq.n	8012dde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	78fa      	ldrb	r2, [r7, #3]
 8012dd4:	4611      	mov	r1, r2
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	4798      	blx	r3
 8012dda:	4603      	mov	r3, r0
 8012ddc:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3710      	adds	r7, #16
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}

08012de8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b084      	sub	sp, #16
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	460b      	mov	r3, r1
 8012df2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012df4:	2300      	movs	r3, #0
 8012df6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	78fa      	ldrb	r2, [r7, #3]
 8012e02:	4611      	mov	r1, r2
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	4798      	blx	r3
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d001      	beq.n	8012e12 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012e0e:	2303      	movs	r3, #3
 8012e10:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	3710      	adds	r7, #16
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}

08012e1c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b084      	sub	sp, #16
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012e2c:	6839      	ldr	r1, [r7, #0]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f001 f933 	bl	801409a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2201      	movs	r2, #1
 8012e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8012e42:	461a      	mov	r2, r3
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012e50:	f003 031f 	and.w	r3, r3, #31
 8012e54:	2b02      	cmp	r3, #2
 8012e56:	d01a      	beq.n	8012e8e <USBD_LL_SetupStage+0x72>
 8012e58:	2b02      	cmp	r3, #2
 8012e5a:	d822      	bhi.n	8012ea2 <USBD_LL_SetupStage+0x86>
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d002      	beq.n	8012e66 <USBD_LL_SetupStage+0x4a>
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d00a      	beq.n	8012e7a <USBD_LL_SetupStage+0x5e>
 8012e64:	e01d      	b.n	8012ea2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f000 fb60 	bl	8013534 <USBD_StdDevReq>
 8012e74:	4603      	mov	r3, r0
 8012e76:	73fb      	strb	r3, [r7, #15]
      break;
 8012e78:	e020      	b.n	8012ebc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012e80:	4619      	mov	r1, r3
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f000 fbc8 	bl	8013618 <USBD_StdItfReq>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8012e8c:	e016      	b.n	8012ebc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012e94:	4619      	mov	r1, r3
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f000 fc2a 	bl	80136f0 <USBD_StdEPReq>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8012ea0:	e00c      	b.n	8012ebc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012eac:	b2db      	uxtb	r3, r3
 8012eae:	4619      	mov	r1, r3
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f004 fd1a 	bl	80178ea <USBD_LL_StallEP>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8012eba:	bf00      	nop
  }

  return ret;
 8012ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3710      	adds	r7, #16
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}

08012ec6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012ec6:	b580      	push	{r7, lr}
 8012ec8:	b086      	sub	sp, #24
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	60f8      	str	r0, [r7, #12]
 8012ece:	460b      	mov	r3, r1
 8012ed0:	607a      	str	r2, [r7, #4]
 8012ed2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012ed8:	7afb      	ldrb	r3, [r7, #11]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d16e      	bne.n	8012fbc <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012ee4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012eec:	2b03      	cmp	r3, #3
 8012eee:	f040 8098 	bne.w	8013022 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	689a      	ldr	r2, [r3, #8]
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	68db      	ldr	r3, [r3, #12]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d913      	bls.n	8012f26 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	689a      	ldr	r2, [r3, #8]
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	1ad2      	subs	r2, r2, r3
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	68da      	ldr	r2, [r3, #12]
 8012f10:	693b      	ldr	r3, [r7, #16]
 8012f12:	689b      	ldr	r3, [r3, #8]
 8012f14:	4293      	cmp	r3, r2
 8012f16:	bf28      	it	cs
 8012f18:	4613      	movcs	r3, r2
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	6879      	ldr	r1, [r7, #4]
 8012f1e:	68f8      	ldr	r0, [r7, #12]
 8012f20:	f001 f992 	bl	8014248 <USBD_CtlContinueRx>
 8012f24:	e07d      	b.n	8013022 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012f2c:	f003 031f 	and.w	r3, r3, #31
 8012f30:	2b02      	cmp	r3, #2
 8012f32:	d014      	beq.n	8012f5e <USBD_LL_DataOutStage+0x98>
 8012f34:	2b02      	cmp	r3, #2
 8012f36:	d81d      	bhi.n	8012f74 <USBD_LL_DataOutStage+0xae>
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d002      	beq.n	8012f42 <USBD_LL_DataOutStage+0x7c>
 8012f3c:	2b01      	cmp	r3, #1
 8012f3e:	d003      	beq.n	8012f48 <USBD_LL_DataOutStage+0x82>
 8012f40:	e018      	b.n	8012f74 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012f42:	2300      	movs	r3, #0
 8012f44:	75bb      	strb	r3, [r7, #22]
            break;
 8012f46:	e018      	b.n	8012f7a <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012f4e:	b2db      	uxtb	r3, r3
 8012f50:	4619      	mov	r1, r3
 8012f52:	68f8      	ldr	r0, [r7, #12]
 8012f54:	f000 fa5e 	bl	8013414 <USBD_CoreFindIF>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	75bb      	strb	r3, [r7, #22]
            break;
 8012f5c:	e00d      	b.n	8012f7a <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	4619      	mov	r1, r3
 8012f68:	68f8      	ldr	r0, [r7, #12]
 8012f6a:	f000 fa60 	bl	801342e <USBD_CoreFindEP>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	75bb      	strb	r3, [r7, #22]
            break;
 8012f72:	e002      	b.n	8012f7a <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012f74:	2300      	movs	r3, #0
 8012f76:	75bb      	strb	r3, [r7, #22]
            break;
 8012f78:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012f7a:	7dbb      	ldrb	r3, [r7, #22]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d119      	bne.n	8012fb4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f86:	b2db      	uxtb	r3, r3
 8012f88:	2b03      	cmp	r3, #3
 8012f8a:	d113      	bne.n	8012fb4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012f8c:	7dba      	ldrb	r2, [r7, #22]
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	32ae      	adds	r2, #174	; 0xae
 8012f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f96:	691b      	ldr	r3, [r3, #16]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d00b      	beq.n	8012fb4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012f9c:	7dba      	ldrb	r2, [r7, #22]
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012fa4:	7dba      	ldrb	r2, [r7, #22]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	32ae      	adds	r2, #174	; 0xae
 8012faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fae:	691b      	ldr	r3, [r3, #16]
 8012fb0:	68f8      	ldr	r0, [r7, #12]
 8012fb2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012fb4:	68f8      	ldr	r0, [r7, #12]
 8012fb6:	f001 f958 	bl	801426a <USBD_CtlSendStatus>
 8012fba:	e032      	b.n	8013022 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012fbc:	7afb      	ldrb	r3, [r7, #11]
 8012fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fc2:	b2db      	uxtb	r3, r3
 8012fc4:	4619      	mov	r1, r3
 8012fc6:	68f8      	ldr	r0, [r7, #12]
 8012fc8:	f000 fa31 	bl	801342e <USBD_CoreFindEP>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012fd0:	7dbb      	ldrb	r3, [r7, #22]
 8012fd2:	2bff      	cmp	r3, #255	; 0xff
 8012fd4:	d025      	beq.n	8013022 <USBD_LL_DataOutStage+0x15c>
 8012fd6:	7dbb      	ldrb	r3, [r7, #22]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d122      	bne.n	8013022 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	2b03      	cmp	r3, #3
 8012fe6:	d117      	bne.n	8013018 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012fe8:	7dba      	ldrb	r2, [r7, #22]
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	32ae      	adds	r2, #174	; 0xae
 8012fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ff2:	699b      	ldr	r3, [r3, #24]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d00f      	beq.n	8013018 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012ff8:	7dba      	ldrb	r2, [r7, #22]
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013000:	7dba      	ldrb	r2, [r7, #22]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	32ae      	adds	r2, #174	; 0xae
 8013006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801300a:	699b      	ldr	r3, [r3, #24]
 801300c:	7afa      	ldrb	r2, [r7, #11]
 801300e:	4611      	mov	r1, r2
 8013010:	68f8      	ldr	r0, [r7, #12]
 8013012:	4798      	blx	r3
 8013014:	4603      	mov	r3, r0
 8013016:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013018:	7dfb      	ldrb	r3, [r7, #23]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d001      	beq.n	8013022 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801301e:	7dfb      	ldrb	r3, [r7, #23]
 8013020:	e000      	b.n	8013024 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013022:	2300      	movs	r3, #0
}
 8013024:	4618      	mov	r0, r3
 8013026:	3718      	adds	r7, #24
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}

0801302c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b086      	sub	sp, #24
 8013030:	af00      	add	r7, sp, #0
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	460b      	mov	r3, r1
 8013036:	607a      	str	r2, [r7, #4]
 8013038:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801303a:	7afb      	ldrb	r3, [r7, #11]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d16f      	bne.n	8013120 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	3314      	adds	r3, #20
 8013044:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801304c:	2b02      	cmp	r3, #2
 801304e:	d15a      	bne.n	8013106 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	689a      	ldr	r2, [r3, #8]
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	429a      	cmp	r2, r3
 801305a:	d914      	bls.n	8013086 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	689a      	ldr	r2, [r3, #8]
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	1ad2      	subs	r2, r2, r3
 8013066:	693b      	ldr	r3, [r7, #16]
 8013068:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	689b      	ldr	r3, [r3, #8]
 801306e:	461a      	mov	r2, r3
 8013070:	6879      	ldr	r1, [r7, #4]
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f001 f8d7 	bl	8014226 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013078:	2300      	movs	r3, #0
 801307a:	2200      	movs	r2, #0
 801307c:	2100      	movs	r1, #0
 801307e:	68f8      	ldr	r0, [r7, #12]
 8013080:	f004 fcdd 	bl	8017a3e <USBD_LL_PrepareReceive>
 8013084:	e03f      	b.n	8013106 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	68da      	ldr	r2, [r3, #12]
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	689b      	ldr	r3, [r3, #8]
 801308e:	429a      	cmp	r2, r3
 8013090:	d11c      	bne.n	80130cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	685a      	ldr	r2, [r3, #4]
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801309a:	429a      	cmp	r2, r3
 801309c:	d316      	bcc.n	80130cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801309e:	693b      	ldr	r3, [r7, #16]
 80130a0:	685a      	ldr	r2, [r3, #4]
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80130a8:	429a      	cmp	r2, r3
 80130aa:	d20f      	bcs.n	80130cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80130ac:	2200      	movs	r2, #0
 80130ae:	2100      	movs	r1, #0
 80130b0:	68f8      	ldr	r0, [r7, #12]
 80130b2:	f001 f8b8 	bl	8014226 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2200      	movs	r2, #0
 80130ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80130be:	2300      	movs	r3, #0
 80130c0:	2200      	movs	r2, #0
 80130c2:	2100      	movs	r1, #0
 80130c4:	68f8      	ldr	r0, [r7, #12]
 80130c6:	f004 fcba 	bl	8017a3e <USBD_LL_PrepareReceive>
 80130ca:	e01c      	b.n	8013106 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	2b03      	cmp	r3, #3
 80130d6:	d10f      	bne.n	80130f8 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d009      	beq.n	80130f8 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2200      	movs	r2, #0
 80130e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	68f8      	ldr	r0, [r7, #12]
 80130f6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80130f8:	2180      	movs	r1, #128	; 0x80
 80130fa:	68f8      	ldr	r0, [r7, #12]
 80130fc:	f004 fbf5 	bl	80178ea <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013100:	68f8      	ldr	r0, [r7, #12]
 8013102:	f001 f8c5 	bl	8014290 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801310c:	2b00      	cmp	r3, #0
 801310e:	d03a      	beq.n	8013186 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013110:	68f8      	ldr	r0, [r7, #12]
 8013112:	f7ff fe42 	bl	8012d9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2200      	movs	r2, #0
 801311a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801311e:	e032      	b.n	8013186 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013120:	7afb      	ldrb	r3, [r7, #11]
 8013122:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013126:	b2db      	uxtb	r3, r3
 8013128:	4619      	mov	r1, r3
 801312a:	68f8      	ldr	r0, [r7, #12]
 801312c:	f000 f97f 	bl	801342e <USBD_CoreFindEP>
 8013130:	4603      	mov	r3, r0
 8013132:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013134:	7dfb      	ldrb	r3, [r7, #23]
 8013136:	2bff      	cmp	r3, #255	; 0xff
 8013138:	d025      	beq.n	8013186 <USBD_LL_DataInStage+0x15a>
 801313a:	7dfb      	ldrb	r3, [r7, #23]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d122      	bne.n	8013186 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013146:	b2db      	uxtb	r3, r3
 8013148:	2b03      	cmp	r3, #3
 801314a:	d11c      	bne.n	8013186 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801314c:	7dfa      	ldrb	r2, [r7, #23]
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	32ae      	adds	r2, #174	; 0xae
 8013152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013156:	695b      	ldr	r3, [r3, #20]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d014      	beq.n	8013186 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801315c:	7dfa      	ldrb	r2, [r7, #23]
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013164:	7dfa      	ldrb	r2, [r7, #23]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	32ae      	adds	r2, #174	; 0xae
 801316a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801316e:	695b      	ldr	r3, [r3, #20]
 8013170:	7afa      	ldrb	r2, [r7, #11]
 8013172:	4611      	mov	r1, r2
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	4798      	blx	r3
 8013178:	4603      	mov	r3, r0
 801317a:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801317c:	7dbb      	ldrb	r3, [r7, #22]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d001      	beq.n	8013186 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013182:	7dbb      	ldrb	r3, [r7, #22]
 8013184:	e000      	b.n	8013188 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013186:	2300      	movs	r3, #0
}
 8013188:	4618      	mov	r0, r3
 801318a:	3718      	adds	r7, #24
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}

08013190 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b084      	sub	sp, #16
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013198:	2300      	movs	r3, #0
 801319a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2201      	movs	r2, #1
 80131a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2200      	movs	r2, #0
 80131b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2200      	movs	r2, #0
 80131b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d014      	beq.n	80131f6 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d00e      	beq.n	80131f6 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	6852      	ldr	r2, [r2, #4]
 80131e4:	b2d2      	uxtb	r2, r2
 80131e6:	4611      	mov	r1, r2
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	4798      	blx	r3
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80131f2:	2303      	movs	r3, #3
 80131f4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80131f6:	2340      	movs	r3, #64	; 0x40
 80131f8:	2200      	movs	r2, #0
 80131fa:	2100      	movs	r1, #0
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f004 fb10 	bl	8017822 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2201      	movs	r2, #1
 8013206:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2240      	movs	r2, #64	; 0x40
 801320e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013212:	2340      	movs	r3, #64	; 0x40
 8013214:	2200      	movs	r2, #0
 8013216:	2180      	movs	r1, #128	; 0x80
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f004 fb02 	bl	8017822 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2201      	movs	r2, #1
 8013222:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2240      	movs	r2, #64	; 0x40
 8013228:	621a      	str	r2, [r3, #32]

  return ret;
 801322a:	7bfb      	ldrb	r3, [r7, #15]
}
 801322c:	4618      	mov	r0, r3
 801322e:	3710      	adds	r7, #16
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	460b      	mov	r3, r1
 801323e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	78fa      	ldrb	r2, [r7, #3]
 8013244:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013246:	2300      	movs	r3, #0
}
 8013248:	4618      	mov	r0, r3
 801324a:	370c      	adds	r7, #12
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr

08013254 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013254:	b480      	push	{r7}
 8013256:	b083      	sub	sp, #12
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013262:	b2da      	uxtb	r2, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	2204      	movs	r2, #4
 801326e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013272:	2300      	movs	r3, #0
}
 8013274:	4618      	mov	r0, r3
 8013276:	370c      	adds	r7, #12
 8013278:	46bd      	mov	sp, r7
 801327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327e:	4770      	bx	lr

08013280 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013280:	b480      	push	{r7}
 8013282:	b083      	sub	sp, #12
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801328e:	b2db      	uxtb	r3, r3
 8013290:	2b04      	cmp	r3, #4
 8013292:	d106      	bne.n	80132a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801329a:	b2da      	uxtb	r2, r3
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80132a2:	2300      	movs	r3, #0
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	370c      	adds	r7, #12
 80132a8:	46bd      	mov	sp, r7
 80132aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ae:	4770      	bx	lr

080132b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132be:	b2db      	uxtb	r3, r3
 80132c0:	2b03      	cmp	r3, #3
 80132c2:	d110      	bne.n	80132e6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d00b      	beq.n	80132e6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132d4:	69db      	ldr	r3, [r3, #28]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d005      	beq.n	80132e6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132e0:	69db      	ldr	r3, [r3, #28]
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80132e6:	2300      	movs	r3, #0
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3708      	adds	r7, #8
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
 80132f8:	460b      	mov	r3, r1
 80132fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	32ae      	adds	r2, #174	; 0xae
 8013306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d101      	bne.n	8013312 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801330e:	2303      	movs	r3, #3
 8013310:	e01c      	b.n	801334c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013318:	b2db      	uxtb	r3, r3
 801331a:	2b03      	cmp	r3, #3
 801331c:	d115      	bne.n	801334a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	32ae      	adds	r2, #174	; 0xae
 8013328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801332c:	6a1b      	ldr	r3, [r3, #32]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d00b      	beq.n	801334a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	32ae      	adds	r2, #174	; 0xae
 801333c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013340:	6a1b      	ldr	r3, [r3, #32]
 8013342:	78fa      	ldrb	r2, [r7, #3]
 8013344:	4611      	mov	r1, r2
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801334a:	2300      	movs	r3, #0
}
 801334c:	4618      	mov	r0, r3
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	460b      	mov	r3, r1
 801335e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	32ae      	adds	r2, #174	; 0xae
 801336a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d101      	bne.n	8013376 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013372:	2303      	movs	r3, #3
 8013374:	e01c      	b.n	80133b0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801337c:	b2db      	uxtb	r3, r3
 801337e:	2b03      	cmp	r3, #3
 8013380:	d115      	bne.n	80133ae <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	32ae      	adds	r2, #174	; 0xae
 801338c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013392:	2b00      	cmp	r3, #0
 8013394:	d00b      	beq.n	80133ae <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	32ae      	adds	r2, #174	; 0xae
 80133a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133a6:	78fa      	ldrb	r2, [r7, #3]
 80133a8:	4611      	mov	r1, r2
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80133ae:	2300      	movs	r3, #0
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	3708      	adds	r7, #8
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80133b8:	b480      	push	{r7}
 80133ba:	b083      	sub	sp, #12
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80133c0:	2300      	movs	r3, #0
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	370c      	adds	r7, #12
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr

080133ce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80133ce:	b580      	push	{r7, lr}
 80133d0:	b084      	sub	sp, #16
 80133d2:	af00      	add	r7, sp, #0
 80133d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80133d6:	2300      	movs	r3, #0
 80133d8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	2201      	movs	r2, #1
 80133de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d00e      	beq.n	801340a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	6852      	ldr	r2, [r2, #4]
 80133f8:	b2d2      	uxtb	r2, r2
 80133fa:	4611      	mov	r1, r2
 80133fc:	6878      	ldr	r0, [r7, #4]
 80133fe:	4798      	blx	r3
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d001      	beq.n	801340a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013406:	2303      	movs	r3, #3
 8013408:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801340a:	7bfb      	ldrb	r3, [r7, #15]
}
 801340c:	4618      	mov	r0, r3
 801340e:	3710      	adds	r7, #16
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}

08013414 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013414:	b480      	push	{r7}
 8013416:	b083      	sub	sp, #12
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	460b      	mov	r3, r1
 801341e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013420:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013422:	4618      	mov	r0, r3
 8013424:	370c      	adds	r7, #12
 8013426:	46bd      	mov	sp, r7
 8013428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342c:	4770      	bx	lr

0801342e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801342e:	b480      	push	{r7}
 8013430:	b083      	sub	sp, #12
 8013432:	af00      	add	r7, sp, #0
 8013434:	6078      	str	r0, [r7, #4]
 8013436:	460b      	mov	r3, r1
 8013438:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801343a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801343c:	4618      	mov	r0, r3
 801343e:	370c      	adds	r7, #12
 8013440:	46bd      	mov	sp, r7
 8013442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013446:	4770      	bx	lr

08013448 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b086      	sub	sp, #24
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	460b      	mov	r3, r1
 8013452:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801345c:	2300      	movs	r3, #0
 801345e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	885b      	ldrh	r3, [r3, #2]
 8013464:	b29a      	uxth	r2, r3
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	b29b      	uxth	r3, r3
 801346c:	429a      	cmp	r2, r3
 801346e:	d920      	bls.n	80134b2 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	781b      	ldrb	r3, [r3, #0]
 8013474:	b29b      	uxth	r3, r3
 8013476:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013478:	e013      	b.n	80134a2 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801347a:	f107 030a 	add.w	r3, r7, #10
 801347e:	4619      	mov	r1, r3
 8013480:	6978      	ldr	r0, [r7, #20]
 8013482:	f000 f81b 	bl	80134bc <USBD_GetNextDesc>
 8013486:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	785b      	ldrb	r3, [r3, #1]
 801348c:	2b05      	cmp	r3, #5
 801348e:	d108      	bne.n	80134a2 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	789b      	ldrb	r3, [r3, #2]
 8013498:	78fa      	ldrb	r2, [r7, #3]
 801349a:	429a      	cmp	r2, r3
 801349c:	d008      	beq.n	80134b0 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801349e:	2300      	movs	r3, #0
 80134a0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	885b      	ldrh	r3, [r3, #2]
 80134a6:	b29a      	uxth	r2, r3
 80134a8:	897b      	ldrh	r3, [r7, #10]
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d8e5      	bhi.n	801347a <USBD_GetEpDesc+0x32>
 80134ae:	e000      	b.n	80134b2 <USBD_GetEpDesc+0x6a>
          break;
 80134b0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80134b2:	693b      	ldr	r3, [r7, #16]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3718      	adds	r7, #24
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}

080134bc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80134bc:	b480      	push	{r7}
 80134be:	b085      	sub	sp, #20
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	881a      	ldrh	r2, [r3, #0]
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	b29b      	uxth	r3, r3
 80134d4:	4413      	add	r3, r2
 80134d6:	b29a      	uxth	r2, r3
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	461a      	mov	r2, r3
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	4413      	add	r3, r2
 80134e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80134e8:	68fb      	ldr	r3, [r7, #12]
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3714      	adds	r7, #20
 80134ee:	46bd      	mov	sp, r7
 80134f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f4:	4770      	bx	lr

080134f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80134f6:	b480      	push	{r7}
 80134f8:	b087      	sub	sp, #28
 80134fa:	af00      	add	r7, sp, #0
 80134fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	781b      	ldrb	r3, [r3, #0]
 8013506:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	3301      	adds	r3, #1
 801350c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013514:	8a3b      	ldrh	r3, [r7, #16]
 8013516:	021b      	lsls	r3, r3, #8
 8013518:	b21a      	sxth	r2, r3
 801351a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801351e:	4313      	orrs	r3, r2
 8013520:	b21b      	sxth	r3, r3
 8013522:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013524:	89fb      	ldrh	r3, [r7, #14]
}
 8013526:	4618      	mov	r0, r3
 8013528:	371c      	adds	r7, #28
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr
	...

08013534 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b084      	sub	sp, #16
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
 801353c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801353e:	2300      	movs	r3, #0
 8013540:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	781b      	ldrb	r3, [r3, #0]
 8013546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801354a:	2b40      	cmp	r3, #64	; 0x40
 801354c:	d005      	beq.n	801355a <USBD_StdDevReq+0x26>
 801354e:	2b40      	cmp	r3, #64	; 0x40
 8013550:	d857      	bhi.n	8013602 <USBD_StdDevReq+0xce>
 8013552:	2b00      	cmp	r3, #0
 8013554:	d00f      	beq.n	8013576 <USBD_StdDevReq+0x42>
 8013556:	2b20      	cmp	r3, #32
 8013558:	d153      	bne.n	8013602 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	32ae      	adds	r2, #174	; 0xae
 8013564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013568:	689b      	ldr	r3, [r3, #8]
 801356a:	6839      	ldr	r1, [r7, #0]
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	4798      	blx	r3
 8013570:	4603      	mov	r3, r0
 8013572:	73fb      	strb	r3, [r7, #15]
      break;
 8013574:	e04a      	b.n	801360c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	785b      	ldrb	r3, [r3, #1]
 801357a:	2b09      	cmp	r3, #9
 801357c:	d83b      	bhi.n	80135f6 <USBD_StdDevReq+0xc2>
 801357e:	a201      	add	r2, pc, #4	; (adr r2, 8013584 <USBD_StdDevReq+0x50>)
 8013580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013584:	080135d9 	.word	0x080135d9
 8013588:	080135ed 	.word	0x080135ed
 801358c:	080135f7 	.word	0x080135f7
 8013590:	080135e3 	.word	0x080135e3
 8013594:	080135f7 	.word	0x080135f7
 8013598:	080135b7 	.word	0x080135b7
 801359c:	080135ad 	.word	0x080135ad
 80135a0:	080135f7 	.word	0x080135f7
 80135a4:	080135cf 	.word	0x080135cf
 80135a8:	080135c1 	.word	0x080135c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80135ac:	6839      	ldr	r1, [r7, #0]
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f000 fa3c 	bl	8013a2c <USBD_GetDescriptor>
          break;
 80135b4:	e024      	b.n	8013600 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80135b6:	6839      	ldr	r1, [r7, #0]
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f000 fbcb 	bl	8013d54 <USBD_SetAddress>
          break;
 80135be:	e01f      	b.n	8013600 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80135c0:	6839      	ldr	r1, [r7, #0]
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f000 fc0a 	bl	8013ddc <USBD_SetConfig>
 80135c8:	4603      	mov	r3, r0
 80135ca:	73fb      	strb	r3, [r7, #15]
          break;
 80135cc:	e018      	b.n	8013600 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80135ce:	6839      	ldr	r1, [r7, #0]
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f000 fcad 	bl	8013f30 <USBD_GetConfig>
          break;
 80135d6:	e013      	b.n	8013600 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80135d8:	6839      	ldr	r1, [r7, #0]
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f000 fcde 	bl	8013f9c <USBD_GetStatus>
          break;
 80135e0:	e00e      	b.n	8013600 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80135e2:	6839      	ldr	r1, [r7, #0]
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f000 fd0d 	bl	8014004 <USBD_SetFeature>
          break;
 80135ea:	e009      	b.n	8013600 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80135ec:	6839      	ldr	r1, [r7, #0]
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f000 fd31 	bl	8014056 <USBD_ClrFeature>
          break;
 80135f4:	e004      	b.n	8013600 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80135f6:	6839      	ldr	r1, [r7, #0]
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f000 fd88 	bl	801410e <USBD_CtlError>
          break;
 80135fe:	bf00      	nop
      }
      break;
 8013600:	e004      	b.n	801360c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013602:	6839      	ldr	r1, [r7, #0]
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f000 fd82 	bl	801410e <USBD_CtlError>
      break;
 801360a:	bf00      	nop
  }

  return ret;
 801360c:	7bfb      	ldrb	r3, [r7, #15]
}
 801360e:	4618      	mov	r0, r3
 8013610:	3710      	adds	r7, #16
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop

08013618 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b084      	sub	sp, #16
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013622:	2300      	movs	r3, #0
 8013624:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801362e:	2b40      	cmp	r3, #64	; 0x40
 8013630:	d005      	beq.n	801363e <USBD_StdItfReq+0x26>
 8013632:	2b40      	cmp	r3, #64	; 0x40
 8013634:	d852      	bhi.n	80136dc <USBD_StdItfReq+0xc4>
 8013636:	2b00      	cmp	r3, #0
 8013638:	d001      	beq.n	801363e <USBD_StdItfReq+0x26>
 801363a:	2b20      	cmp	r3, #32
 801363c:	d14e      	bne.n	80136dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013644:	b2db      	uxtb	r3, r3
 8013646:	3b01      	subs	r3, #1
 8013648:	2b02      	cmp	r3, #2
 801364a:	d840      	bhi.n	80136ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	889b      	ldrh	r3, [r3, #4]
 8013650:	b2db      	uxtb	r3, r3
 8013652:	2b01      	cmp	r3, #1
 8013654:	d836      	bhi.n	80136c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	889b      	ldrh	r3, [r3, #4]
 801365a:	b2db      	uxtb	r3, r3
 801365c:	4619      	mov	r1, r3
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f7ff fed8 	bl	8013414 <USBD_CoreFindIF>
 8013664:	4603      	mov	r3, r0
 8013666:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013668:	7bbb      	ldrb	r3, [r7, #14]
 801366a:	2bff      	cmp	r3, #255	; 0xff
 801366c:	d01d      	beq.n	80136aa <USBD_StdItfReq+0x92>
 801366e:	7bbb      	ldrb	r3, [r7, #14]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d11a      	bne.n	80136aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013674:	7bba      	ldrb	r2, [r7, #14]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	32ae      	adds	r2, #174	; 0xae
 801367a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801367e:	689b      	ldr	r3, [r3, #8]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d00f      	beq.n	80136a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013684:	7bba      	ldrb	r2, [r7, #14]
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801368c:	7bba      	ldrb	r2, [r7, #14]
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	32ae      	adds	r2, #174	; 0xae
 8013692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013696:	689b      	ldr	r3, [r3, #8]
 8013698:	6839      	ldr	r1, [r7, #0]
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	4798      	blx	r3
 801369e:	4603      	mov	r3, r0
 80136a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80136a2:	e004      	b.n	80136ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80136a4:	2303      	movs	r3, #3
 80136a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80136a8:	e001      	b.n	80136ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80136aa:	2303      	movs	r3, #3
 80136ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	88db      	ldrh	r3, [r3, #6]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d110      	bne.n	80136d8 <USBD_StdItfReq+0xc0>
 80136b6:	7bfb      	ldrb	r3, [r7, #15]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d10d      	bne.n	80136d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f000 fdd4 	bl	801426a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80136c2:	e009      	b.n	80136d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80136c4:	6839      	ldr	r1, [r7, #0]
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f000 fd21 	bl	801410e <USBD_CtlError>
          break;
 80136cc:	e004      	b.n	80136d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80136ce:	6839      	ldr	r1, [r7, #0]
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f000 fd1c 	bl	801410e <USBD_CtlError>
          break;
 80136d6:	e000      	b.n	80136da <USBD_StdItfReq+0xc2>
          break;
 80136d8:	bf00      	nop
      }
      break;
 80136da:	e004      	b.n	80136e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80136dc:	6839      	ldr	r1, [r7, #0]
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f000 fd15 	bl	801410e <USBD_CtlError>
      break;
 80136e4:	bf00      	nop
  }

  return ret;
 80136e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3710      	adds	r7, #16
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}

080136f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b084      	sub	sp, #16
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
 80136f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80136fa:	2300      	movs	r3, #0
 80136fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	889b      	ldrh	r3, [r3, #4]
 8013702:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801370c:	2b40      	cmp	r3, #64	; 0x40
 801370e:	d007      	beq.n	8013720 <USBD_StdEPReq+0x30>
 8013710:	2b40      	cmp	r3, #64	; 0x40
 8013712:	f200 817f 	bhi.w	8013a14 <USBD_StdEPReq+0x324>
 8013716:	2b00      	cmp	r3, #0
 8013718:	d02a      	beq.n	8013770 <USBD_StdEPReq+0x80>
 801371a:	2b20      	cmp	r3, #32
 801371c:	f040 817a 	bne.w	8013a14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013720:	7bbb      	ldrb	r3, [r7, #14]
 8013722:	4619      	mov	r1, r3
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f7ff fe82 	bl	801342e <USBD_CoreFindEP>
 801372a:	4603      	mov	r3, r0
 801372c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801372e:	7b7b      	ldrb	r3, [r7, #13]
 8013730:	2bff      	cmp	r3, #255	; 0xff
 8013732:	f000 8174 	beq.w	8013a1e <USBD_StdEPReq+0x32e>
 8013736:	7b7b      	ldrb	r3, [r7, #13]
 8013738:	2b00      	cmp	r3, #0
 801373a:	f040 8170 	bne.w	8013a1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801373e:	7b7a      	ldrb	r2, [r7, #13]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013746:	7b7a      	ldrb	r2, [r7, #13]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	32ae      	adds	r2, #174	; 0xae
 801374c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013750:	689b      	ldr	r3, [r3, #8]
 8013752:	2b00      	cmp	r3, #0
 8013754:	f000 8163 	beq.w	8013a1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013758:	7b7a      	ldrb	r2, [r7, #13]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	32ae      	adds	r2, #174	; 0xae
 801375e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013762:	689b      	ldr	r3, [r3, #8]
 8013764:	6839      	ldr	r1, [r7, #0]
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	4798      	blx	r3
 801376a:	4603      	mov	r3, r0
 801376c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801376e:	e156      	b.n	8013a1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	785b      	ldrb	r3, [r3, #1]
 8013774:	2b03      	cmp	r3, #3
 8013776:	d008      	beq.n	801378a <USBD_StdEPReq+0x9a>
 8013778:	2b03      	cmp	r3, #3
 801377a:	f300 8145 	bgt.w	8013a08 <USBD_StdEPReq+0x318>
 801377e:	2b00      	cmp	r3, #0
 8013780:	f000 809b 	beq.w	80138ba <USBD_StdEPReq+0x1ca>
 8013784:	2b01      	cmp	r3, #1
 8013786:	d03c      	beq.n	8013802 <USBD_StdEPReq+0x112>
 8013788:	e13e      	b.n	8013a08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013790:	b2db      	uxtb	r3, r3
 8013792:	2b02      	cmp	r3, #2
 8013794:	d002      	beq.n	801379c <USBD_StdEPReq+0xac>
 8013796:	2b03      	cmp	r3, #3
 8013798:	d016      	beq.n	80137c8 <USBD_StdEPReq+0xd8>
 801379a:	e02c      	b.n	80137f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801379c:	7bbb      	ldrb	r3, [r7, #14]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d00d      	beq.n	80137be <USBD_StdEPReq+0xce>
 80137a2:	7bbb      	ldrb	r3, [r7, #14]
 80137a4:	2b80      	cmp	r3, #128	; 0x80
 80137a6:	d00a      	beq.n	80137be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80137a8:	7bbb      	ldrb	r3, [r7, #14]
 80137aa:	4619      	mov	r1, r3
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f004 f89c 	bl	80178ea <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80137b2:	2180      	movs	r1, #128	; 0x80
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f004 f898 	bl	80178ea <USBD_LL_StallEP>
 80137ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80137bc:	e020      	b.n	8013800 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80137be:	6839      	ldr	r1, [r7, #0]
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f000 fca4 	bl	801410e <USBD_CtlError>
              break;
 80137c6:	e01b      	b.n	8013800 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	885b      	ldrh	r3, [r3, #2]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d10e      	bne.n	80137ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80137d0:	7bbb      	ldrb	r3, [r7, #14]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d00b      	beq.n	80137ee <USBD_StdEPReq+0xfe>
 80137d6:	7bbb      	ldrb	r3, [r7, #14]
 80137d8:	2b80      	cmp	r3, #128	; 0x80
 80137da:	d008      	beq.n	80137ee <USBD_StdEPReq+0xfe>
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	88db      	ldrh	r3, [r3, #6]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d104      	bne.n	80137ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80137e4:	7bbb      	ldrb	r3, [r7, #14]
 80137e6:	4619      	mov	r1, r3
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f004 f87e 	bl	80178ea <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	f000 fd3b 	bl	801426a <USBD_CtlSendStatus>

              break;
 80137f4:	e004      	b.n	8013800 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80137f6:	6839      	ldr	r1, [r7, #0]
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f000 fc88 	bl	801410e <USBD_CtlError>
              break;
 80137fe:	bf00      	nop
          }
          break;
 8013800:	e107      	b.n	8013a12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013808:	b2db      	uxtb	r3, r3
 801380a:	2b02      	cmp	r3, #2
 801380c:	d002      	beq.n	8013814 <USBD_StdEPReq+0x124>
 801380e:	2b03      	cmp	r3, #3
 8013810:	d016      	beq.n	8013840 <USBD_StdEPReq+0x150>
 8013812:	e04b      	b.n	80138ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013814:	7bbb      	ldrb	r3, [r7, #14]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d00d      	beq.n	8013836 <USBD_StdEPReq+0x146>
 801381a:	7bbb      	ldrb	r3, [r7, #14]
 801381c:	2b80      	cmp	r3, #128	; 0x80
 801381e:	d00a      	beq.n	8013836 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013820:	7bbb      	ldrb	r3, [r7, #14]
 8013822:	4619      	mov	r1, r3
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f004 f860 	bl	80178ea <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801382a:	2180      	movs	r1, #128	; 0x80
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f004 f85c 	bl	80178ea <USBD_LL_StallEP>
 8013832:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013834:	e040      	b.n	80138b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013836:	6839      	ldr	r1, [r7, #0]
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f000 fc68 	bl	801410e <USBD_CtlError>
              break;
 801383e:	e03b      	b.n	80138b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	885b      	ldrh	r3, [r3, #2]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d136      	bne.n	80138b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013848:	7bbb      	ldrb	r3, [r7, #14]
 801384a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801384e:	2b00      	cmp	r3, #0
 8013850:	d004      	beq.n	801385c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013852:	7bbb      	ldrb	r3, [r7, #14]
 8013854:	4619      	mov	r1, r3
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f004 f866 	bl	8017928 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f000 fd04 	bl	801426a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013862:	7bbb      	ldrb	r3, [r7, #14]
 8013864:	4619      	mov	r1, r3
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f7ff fde1 	bl	801342e <USBD_CoreFindEP>
 801386c:	4603      	mov	r3, r0
 801386e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013870:	7b7b      	ldrb	r3, [r7, #13]
 8013872:	2bff      	cmp	r3, #255	; 0xff
 8013874:	d01f      	beq.n	80138b6 <USBD_StdEPReq+0x1c6>
 8013876:	7b7b      	ldrb	r3, [r7, #13]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d11c      	bne.n	80138b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801387c:	7b7a      	ldrb	r2, [r7, #13]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013884:	7b7a      	ldrb	r2, [r7, #13]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	32ae      	adds	r2, #174	; 0xae
 801388a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801388e:	689b      	ldr	r3, [r3, #8]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d010      	beq.n	80138b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013894:	7b7a      	ldrb	r2, [r7, #13]
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	32ae      	adds	r2, #174	; 0xae
 801389a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801389e:	689b      	ldr	r3, [r3, #8]
 80138a0:	6839      	ldr	r1, [r7, #0]
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	4798      	blx	r3
 80138a6:	4603      	mov	r3, r0
 80138a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80138aa:	e004      	b.n	80138b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80138ac:	6839      	ldr	r1, [r7, #0]
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f000 fc2d 	bl	801410e <USBD_CtlError>
              break;
 80138b4:	e000      	b.n	80138b8 <USBD_StdEPReq+0x1c8>
              break;
 80138b6:	bf00      	nop
          }
          break;
 80138b8:	e0ab      	b.n	8013a12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138c0:	b2db      	uxtb	r3, r3
 80138c2:	2b02      	cmp	r3, #2
 80138c4:	d002      	beq.n	80138cc <USBD_StdEPReq+0x1dc>
 80138c6:	2b03      	cmp	r3, #3
 80138c8:	d032      	beq.n	8013930 <USBD_StdEPReq+0x240>
 80138ca:	e097      	b.n	80139fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80138cc:	7bbb      	ldrb	r3, [r7, #14]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d007      	beq.n	80138e2 <USBD_StdEPReq+0x1f2>
 80138d2:	7bbb      	ldrb	r3, [r7, #14]
 80138d4:	2b80      	cmp	r3, #128	; 0x80
 80138d6:	d004      	beq.n	80138e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80138d8:	6839      	ldr	r1, [r7, #0]
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f000 fc17 	bl	801410e <USBD_CtlError>
                break;
 80138e0:	e091      	b.n	8013a06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80138e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	da0b      	bge.n	8013902 <USBD_StdEPReq+0x212>
 80138ea:	7bbb      	ldrb	r3, [r7, #14]
 80138ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80138f0:	4613      	mov	r3, r2
 80138f2:	009b      	lsls	r3, r3, #2
 80138f4:	4413      	add	r3, r2
 80138f6:	009b      	lsls	r3, r3, #2
 80138f8:	3310      	adds	r3, #16
 80138fa:	687a      	ldr	r2, [r7, #4]
 80138fc:	4413      	add	r3, r2
 80138fe:	3304      	adds	r3, #4
 8013900:	e00b      	b.n	801391a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013902:	7bbb      	ldrb	r3, [r7, #14]
 8013904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013908:	4613      	mov	r3, r2
 801390a:	009b      	lsls	r3, r3, #2
 801390c:	4413      	add	r3, r2
 801390e:	009b      	lsls	r3, r3, #2
 8013910:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	4413      	add	r3, r2
 8013918:	3304      	adds	r3, #4
 801391a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	2200      	movs	r2, #0
 8013920:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	2202      	movs	r2, #2
 8013926:	4619      	mov	r1, r3
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f000 fc61 	bl	80141f0 <USBD_CtlSendData>
              break;
 801392e:	e06a      	b.n	8013a06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013934:	2b00      	cmp	r3, #0
 8013936:	da11      	bge.n	801395c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013938:	7bbb      	ldrb	r3, [r7, #14]
 801393a:	f003 020f 	and.w	r2, r3, #15
 801393e:	6879      	ldr	r1, [r7, #4]
 8013940:	4613      	mov	r3, r2
 8013942:	009b      	lsls	r3, r3, #2
 8013944:	4413      	add	r3, r2
 8013946:	009b      	lsls	r3, r3, #2
 8013948:	440b      	add	r3, r1
 801394a:	3324      	adds	r3, #36	; 0x24
 801394c:	881b      	ldrh	r3, [r3, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d117      	bne.n	8013982 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013952:	6839      	ldr	r1, [r7, #0]
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f000 fbda 	bl	801410e <USBD_CtlError>
                  break;
 801395a:	e054      	b.n	8013a06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801395c:	7bbb      	ldrb	r3, [r7, #14]
 801395e:	f003 020f 	and.w	r2, r3, #15
 8013962:	6879      	ldr	r1, [r7, #4]
 8013964:	4613      	mov	r3, r2
 8013966:	009b      	lsls	r3, r3, #2
 8013968:	4413      	add	r3, r2
 801396a:	009b      	lsls	r3, r3, #2
 801396c:	440b      	add	r3, r1
 801396e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013972:	881b      	ldrh	r3, [r3, #0]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d104      	bne.n	8013982 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013978:	6839      	ldr	r1, [r7, #0]
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f000 fbc7 	bl	801410e <USBD_CtlError>
                  break;
 8013980:	e041      	b.n	8013a06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013986:	2b00      	cmp	r3, #0
 8013988:	da0b      	bge.n	80139a2 <USBD_StdEPReq+0x2b2>
 801398a:	7bbb      	ldrb	r3, [r7, #14]
 801398c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013990:	4613      	mov	r3, r2
 8013992:	009b      	lsls	r3, r3, #2
 8013994:	4413      	add	r3, r2
 8013996:	009b      	lsls	r3, r3, #2
 8013998:	3310      	adds	r3, #16
 801399a:	687a      	ldr	r2, [r7, #4]
 801399c:	4413      	add	r3, r2
 801399e:	3304      	adds	r3, #4
 80139a0:	e00b      	b.n	80139ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80139a2:	7bbb      	ldrb	r3, [r7, #14]
 80139a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80139a8:	4613      	mov	r3, r2
 80139aa:	009b      	lsls	r3, r3, #2
 80139ac:	4413      	add	r3, r2
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80139b4:	687a      	ldr	r2, [r7, #4]
 80139b6:	4413      	add	r3, r2
 80139b8:	3304      	adds	r3, #4
 80139ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80139bc:	7bbb      	ldrb	r3, [r7, #14]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d002      	beq.n	80139c8 <USBD_StdEPReq+0x2d8>
 80139c2:	7bbb      	ldrb	r3, [r7, #14]
 80139c4:	2b80      	cmp	r3, #128	; 0x80
 80139c6:	d103      	bne.n	80139d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	2200      	movs	r2, #0
 80139cc:	601a      	str	r2, [r3, #0]
 80139ce:	e00e      	b.n	80139ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80139d0:	7bbb      	ldrb	r3, [r7, #14]
 80139d2:	4619      	mov	r1, r3
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f003 ffc6 	bl	8017966 <USBD_LL_IsStallEP>
 80139da:	4603      	mov	r3, r0
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d003      	beq.n	80139e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	2201      	movs	r2, #1
 80139e4:	601a      	str	r2, [r3, #0]
 80139e6:	e002      	b.n	80139ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80139e8:	68bb      	ldr	r3, [r7, #8]
 80139ea:	2200      	movs	r2, #0
 80139ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	2202      	movs	r2, #2
 80139f2:	4619      	mov	r1, r3
 80139f4:	6878      	ldr	r0, [r7, #4]
 80139f6:	f000 fbfb 	bl	80141f0 <USBD_CtlSendData>
              break;
 80139fa:	e004      	b.n	8013a06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80139fc:	6839      	ldr	r1, [r7, #0]
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f000 fb85 	bl	801410e <USBD_CtlError>
              break;
 8013a04:	bf00      	nop
          }
          break;
 8013a06:	e004      	b.n	8013a12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013a08:	6839      	ldr	r1, [r7, #0]
 8013a0a:	6878      	ldr	r0, [r7, #4]
 8013a0c:	f000 fb7f 	bl	801410e <USBD_CtlError>
          break;
 8013a10:	bf00      	nop
      }
      break;
 8013a12:	e005      	b.n	8013a20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013a14:	6839      	ldr	r1, [r7, #0]
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f000 fb79 	bl	801410e <USBD_CtlError>
      break;
 8013a1c:	e000      	b.n	8013a20 <USBD_StdEPReq+0x330>
      break;
 8013a1e:	bf00      	nop
  }

  return ret;
 8013a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	3710      	adds	r7, #16
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
	...

08013a2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b084      	sub	sp, #16
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013a36:	2300      	movs	r3, #0
 8013a38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	885b      	ldrh	r3, [r3, #2]
 8013a46:	0a1b      	lsrs	r3, r3, #8
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	3b01      	subs	r3, #1
 8013a4c:	2b0e      	cmp	r3, #14
 8013a4e:	f200 8152 	bhi.w	8013cf6 <USBD_GetDescriptor+0x2ca>
 8013a52:	a201      	add	r2, pc, #4	; (adr r2, 8013a58 <USBD_GetDescriptor+0x2c>)
 8013a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a58:	08013ac9 	.word	0x08013ac9
 8013a5c:	08013ae1 	.word	0x08013ae1
 8013a60:	08013b21 	.word	0x08013b21
 8013a64:	08013cf7 	.word	0x08013cf7
 8013a68:	08013cf7 	.word	0x08013cf7
 8013a6c:	08013c97 	.word	0x08013c97
 8013a70:	08013cc3 	.word	0x08013cc3
 8013a74:	08013cf7 	.word	0x08013cf7
 8013a78:	08013cf7 	.word	0x08013cf7
 8013a7c:	08013cf7 	.word	0x08013cf7
 8013a80:	08013cf7 	.word	0x08013cf7
 8013a84:	08013cf7 	.word	0x08013cf7
 8013a88:	08013cf7 	.word	0x08013cf7
 8013a8c:	08013cf7 	.word	0x08013cf7
 8013a90:	08013a95 	.word	0x08013a95
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a9a:	69db      	ldr	r3, [r3, #28]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d00b      	beq.n	8013ab8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013aa6:	69db      	ldr	r3, [r3, #28]
 8013aa8:	687a      	ldr	r2, [r7, #4]
 8013aaa:	7c12      	ldrb	r2, [r2, #16]
 8013aac:	f107 0108 	add.w	r1, r7, #8
 8013ab0:	4610      	mov	r0, r2
 8013ab2:	4798      	blx	r3
 8013ab4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013ab6:	e126      	b.n	8013d06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013ab8:	6839      	ldr	r1, [r7, #0]
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f000 fb27 	bl	801410e <USBD_CtlError>
        err++;
 8013ac0:	7afb      	ldrb	r3, [r7, #11]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	72fb      	strb	r3, [r7, #11]
      break;
 8013ac6:	e11e      	b.n	8013d06 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	7c12      	ldrb	r2, [r2, #16]
 8013ad4:	f107 0108 	add.w	r1, r7, #8
 8013ad8:	4610      	mov	r0, r2
 8013ada:	4798      	blx	r3
 8013adc:	60f8      	str	r0, [r7, #12]
      break;
 8013ade:	e112      	b.n	8013d06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	7c1b      	ldrb	r3, [r3, #16]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d10d      	bne.n	8013b04 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013af0:	f107 0208 	add.w	r2, r7, #8
 8013af4:	4610      	mov	r0, r2
 8013af6:	4798      	blx	r3
 8013af8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	3301      	adds	r3, #1
 8013afe:	2202      	movs	r2, #2
 8013b00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013b02:	e100      	b.n	8013d06 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b0c:	f107 0208 	add.w	r2, r7, #8
 8013b10:	4610      	mov	r0, r2
 8013b12:	4798      	blx	r3
 8013b14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	3301      	adds	r3, #1
 8013b1a:	2202      	movs	r2, #2
 8013b1c:	701a      	strb	r2, [r3, #0]
      break;
 8013b1e:	e0f2      	b.n	8013d06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	885b      	ldrh	r3, [r3, #2]
 8013b24:	b2db      	uxtb	r3, r3
 8013b26:	2b05      	cmp	r3, #5
 8013b28:	f200 80ac 	bhi.w	8013c84 <USBD_GetDescriptor+0x258>
 8013b2c:	a201      	add	r2, pc, #4	; (adr r2, 8013b34 <USBD_GetDescriptor+0x108>)
 8013b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b32:	bf00      	nop
 8013b34:	08013b4d 	.word	0x08013b4d
 8013b38:	08013b81 	.word	0x08013b81
 8013b3c:	08013bb5 	.word	0x08013bb5
 8013b40:	08013be9 	.word	0x08013be9
 8013b44:	08013c1d 	.word	0x08013c1d
 8013b48:	08013c51 	.word	0x08013c51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b52:	685b      	ldr	r3, [r3, #4]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d00b      	beq.n	8013b70 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b5e:	685b      	ldr	r3, [r3, #4]
 8013b60:	687a      	ldr	r2, [r7, #4]
 8013b62:	7c12      	ldrb	r2, [r2, #16]
 8013b64:	f107 0108 	add.w	r1, r7, #8
 8013b68:	4610      	mov	r0, r2
 8013b6a:	4798      	blx	r3
 8013b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b6e:	e091      	b.n	8013c94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013b70:	6839      	ldr	r1, [r7, #0]
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 facb 	bl	801410e <USBD_CtlError>
            err++;
 8013b78:	7afb      	ldrb	r3, [r7, #11]
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8013b7e:	e089      	b.n	8013c94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b86:	689b      	ldr	r3, [r3, #8]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d00b      	beq.n	8013ba4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b92:	689b      	ldr	r3, [r3, #8]
 8013b94:	687a      	ldr	r2, [r7, #4]
 8013b96:	7c12      	ldrb	r2, [r2, #16]
 8013b98:	f107 0108 	add.w	r1, r7, #8
 8013b9c:	4610      	mov	r0, r2
 8013b9e:	4798      	blx	r3
 8013ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ba2:	e077      	b.n	8013c94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ba4:	6839      	ldr	r1, [r7, #0]
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f000 fab1 	bl	801410e <USBD_CtlError>
            err++;
 8013bac:	7afb      	ldrb	r3, [r7, #11]
 8013bae:	3301      	adds	r3, #1
 8013bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8013bb2:	e06f      	b.n	8013c94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bba:	68db      	ldr	r3, [r3, #12]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d00b      	beq.n	8013bd8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bc6:	68db      	ldr	r3, [r3, #12]
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	7c12      	ldrb	r2, [r2, #16]
 8013bcc:	f107 0108 	add.w	r1, r7, #8
 8013bd0:	4610      	mov	r0, r2
 8013bd2:	4798      	blx	r3
 8013bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013bd6:	e05d      	b.n	8013c94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013bd8:	6839      	ldr	r1, [r7, #0]
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f000 fa97 	bl	801410e <USBD_CtlError>
            err++;
 8013be0:	7afb      	ldrb	r3, [r7, #11]
 8013be2:	3301      	adds	r3, #1
 8013be4:	72fb      	strb	r3, [r7, #11]
          break;
 8013be6:	e055      	b.n	8013c94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bee:	691b      	ldr	r3, [r3, #16]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d00b      	beq.n	8013c0c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bfa:	691b      	ldr	r3, [r3, #16]
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	7c12      	ldrb	r2, [r2, #16]
 8013c00:	f107 0108 	add.w	r1, r7, #8
 8013c04:	4610      	mov	r0, r2
 8013c06:	4798      	blx	r3
 8013c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c0a:	e043      	b.n	8013c94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013c0c:	6839      	ldr	r1, [r7, #0]
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	f000 fa7d 	bl	801410e <USBD_CtlError>
            err++;
 8013c14:	7afb      	ldrb	r3, [r7, #11]
 8013c16:	3301      	adds	r3, #1
 8013c18:	72fb      	strb	r3, [r7, #11]
          break;
 8013c1a:	e03b      	b.n	8013c94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c22:	695b      	ldr	r3, [r3, #20]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d00b      	beq.n	8013c40 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c2e:	695b      	ldr	r3, [r3, #20]
 8013c30:	687a      	ldr	r2, [r7, #4]
 8013c32:	7c12      	ldrb	r2, [r2, #16]
 8013c34:	f107 0108 	add.w	r1, r7, #8
 8013c38:	4610      	mov	r0, r2
 8013c3a:	4798      	blx	r3
 8013c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c3e:	e029      	b.n	8013c94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013c40:	6839      	ldr	r1, [r7, #0]
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f000 fa63 	bl	801410e <USBD_CtlError>
            err++;
 8013c48:	7afb      	ldrb	r3, [r7, #11]
 8013c4a:	3301      	adds	r3, #1
 8013c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8013c4e:	e021      	b.n	8013c94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c56:	699b      	ldr	r3, [r3, #24]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d00b      	beq.n	8013c74 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c62:	699b      	ldr	r3, [r3, #24]
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	7c12      	ldrb	r2, [r2, #16]
 8013c68:	f107 0108 	add.w	r1, r7, #8
 8013c6c:	4610      	mov	r0, r2
 8013c6e:	4798      	blx	r3
 8013c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c72:	e00f      	b.n	8013c94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013c74:	6839      	ldr	r1, [r7, #0]
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f000 fa49 	bl	801410e <USBD_CtlError>
            err++;
 8013c7c:	7afb      	ldrb	r3, [r7, #11]
 8013c7e:	3301      	adds	r3, #1
 8013c80:	72fb      	strb	r3, [r7, #11]
          break;
 8013c82:	e007      	b.n	8013c94 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013c84:	6839      	ldr	r1, [r7, #0]
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f000 fa41 	bl	801410e <USBD_CtlError>
          err++;
 8013c8c:	7afb      	ldrb	r3, [r7, #11]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013c92:	bf00      	nop
      }
      break;
 8013c94:	e037      	b.n	8013d06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	7c1b      	ldrb	r3, [r3, #16]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d109      	bne.n	8013cb2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ca6:	f107 0208 	add.w	r2, r7, #8
 8013caa:	4610      	mov	r0, r2
 8013cac:	4798      	blx	r3
 8013cae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013cb0:	e029      	b.n	8013d06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013cb2:	6839      	ldr	r1, [r7, #0]
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f000 fa2a 	bl	801410e <USBD_CtlError>
        err++;
 8013cba:	7afb      	ldrb	r3, [r7, #11]
 8013cbc:	3301      	adds	r3, #1
 8013cbe:	72fb      	strb	r3, [r7, #11]
      break;
 8013cc0:	e021      	b.n	8013d06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	7c1b      	ldrb	r3, [r3, #16]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d10d      	bne.n	8013ce6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cd2:	f107 0208 	add.w	r2, r7, #8
 8013cd6:	4610      	mov	r0, r2
 8013cd8:	4798      	blx	r3
 8013cda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	3301      	adds	r3, #1
 8013ce0:	2207      	movs	r2, #7
 8013ce2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013ce4:	e00f      	b.n	8013d06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013ce6:	6839      	ldr	r1, [r7, #0]
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f000 fa10 	bl	801410e <USBD_CtlError>
        err++;
 8013cee:	7afb      	ldrb	r3, [r7, #11]
 8013cf0:	3301      	adds	r3, #1
 8013cf2:	72fb      	strb	r3, [r7, #11]
      break;
 8013cf4:	e007      	b.n	8013d06 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013cf6:	6839      	ldr	r1, [r7, #0]
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f000 fa08 	bl	801410e <USBD_CtlError>
      err++;
 8013cfe:	7afb      	ldrb	r3, [r7, #11]
 8013d00:	3301      	adds	r3, #1
 8013d02:	72fb      	strb	r3, [r7, #11]
      break;
 8013d04:	bf00      	nop
  }

  if (err != 0U)
 8013d06:	7afb      	ldrb	r3, [r7, #11]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d11e      	bne.n	8013d4a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	88db      	ldrh	r3, [r3, #6]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d016      	beq.n	8013d42 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013d14:	893b      	ldrh	r3, [r7, #8]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d00e      	beq.n	8013d38 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	88da      	ldrh	r2, [r3, #6]
 8013d1e:	893b      	ldrh	r3, [r7, #8]
 8013d20:	4293      	cmp	r3, r2
 8013d22:	bf28      	it	cs
 8013d24:	4613      	movcs	r3, r2
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013d2a:	893b      	ldrh	r3, [r7, #8]
 8013d2c:	461a      	mov	r2, r3
 8013d2e:	68f9      	ldr	r1, [r7, #12]
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f000 fa5d 	bl	80141f0 <USBD_CtlSendData>
 8013d36:	e009      	b.n	8013d4c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013d38:	6839      	ldr	r1, [r7, #0]
 8013d3a:	6878      	ldr	r0, [r7, #4]
 8013d3c:	f000 f9e7 	bl	801410e <USBD_CtlError>
 8013d40:	e004      	b.n	8013d4c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013d42:	6878      	ldr	r0, [r7, #4]
 8013d44:	f000 fa91 	bl	801426a <USBD_CtlSendStatus>
 8013d48:	e000      	b.n	8013d4c <USBD_GetDescriptor+0x320>
    return;
 8013d4a:	bf00      	nop
  }
}
 8013d4c:	3710      	adds	r7, #16
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}
 8013d52:	bf00      	nop

08013d54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	889b      	ldrh	r3, [r3, #4]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d131      	bne.n	8013dca <USBD_SetAddress+0x76>
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	88db      	ldrh	r3, [r3, #6]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d12d      	bne.n	8013dca <USBD_SetAddress+0x76>
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	885b      	ldrh	r3, [r3, #2]
 8013d72:	2b7f      	cmp	r3, #127	; 0x7f
 8013d74:	d829      	bhi.n	8013dca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	885b      	ldrh	r3, [r3, #2]
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d88:	b2db      	uxtb	r3, r3
 8013d8a:	2b03      	cmp	r3, #3
 8013d8c:	d104      	bne.n	8013d98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013d8e:	6839      	ldr	r1, [r7, #0]
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f000 f9bc 	bl	801410e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d96:	e01d      	b.n	8013dd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	7bfa      	ldrb	r2, [r7, #15]
 8013d9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013da0:	7bfb      	ldrb	r3, [r7, #15]
 8013da2:	4619      	mov	r1, r3
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f003 fe0a 	bl	80179be <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	f000 fa5d 	bl	801426a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013db0:	7bfb      	ldrb	r3, [r7, #15]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d004      	beq.n	8013dc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	2202      	movs	r2, #2
 8013dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dbe:	e009      	b.n	8013dd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dc8:	e004      	b.n	8013dd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013dca:	6839      	ldr	r1, [r7, #0]
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f000 f99e 	bl	801410e <USBD_CtlError>
  }
}
 8013dd2:	bf00      	nop
 8013dd4:	bf00      	nop
 8013dd6:	3710      	adds	r7, #16
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}

08013ddc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b084      	sub	sp, #16
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013de6:	2300      	movs	r3, #0
 8013de8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	885b      	ldrh	r3, [r3, #2]
 8013dee:	b2da      	uxtb	r2, r3
 8013df0:	4b4e      	ldr	r3, [pc, #312]	; (8013f2c <USBD_SetConfig+0x150>)
 8013df2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013df4:	4b4d      	ldr	r3, [pc, #308]	; (8013f2c <USBD_SetConfig+0x150>)
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	2b01      	cmp	r3, #1
 8013dfa:	d905      	bls.n	8013e08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013dfc:	6839      	ldr	r1, [r7, #0]
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f000 f985 	bl	801410e <USBD_CtlError>
    return USBD_FAIL;
 8013e04:	2303      	movs	r3, #3
 8013e06:	e08c      	b.n	8013f22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e0e:	b2db      	uxtb	r3, r3
 8013e10:	2b02      	cmp	r3, #2
 8013e12:	d002      	beq.n	8013e1a <USBD_SetConfig+0x3e>
 8013e14:	2b03      	cmp	r3, #3
 8013e16:	d029      	beq.n	8013e6c <USBD_SetConfig+0x90>
 8013e18:	e075      	b.n	8013f06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013e1a:	4b44      	ldr	r3, [pc, #272]	; (8013f2c <USBD_SetConfig+0x150>)
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d020      	beq.n	8013e64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013e22:	4b42      	ldr	r3, [pc, #264]	; (8013f2c <USBD_SetConfig+0x150>)
 8013e24:	781b      	ldrb	r3, [r3, #0]
 8013e26:	461a      	mov	r2, r3
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013e2c:	4b3f      	ldr	r3, [pc, #252]	; (8013f2c <USBD_SetConfig+0x150>)
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	4619      	mov	r1, r3
 8013e32:	6878      	ldr	r0, [r7, #4]
 8013e34:	f7fe ffbc 	bl	8012db0 <USBD_SetClassConfig>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013e3c:	7bfb      	ldrb	r3, [r7, #15]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d008      	beq.n	8013e54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013e42:	6839      	ldr	r1, [r7, #0]
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	f000 f962 	bl	801410e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2202      	movs	r2, #2
 8013e4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013e52:	e065      	b.n	8013f20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f000 fa08 	bl	801426a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	2203      	movs	r2, #3
 8013e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013e62:	e05d      	b.n	8013f20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f000 fa00 	bl	801426a <USBD_CtlSendStatus>
      break;
 8013e6a:	e059      	b.n	8013f20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013e6c:	4b2f      	ldr	r3, [pc, #188]	; (8013f2c <USBD_SetConfig+0x150>)
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d112      	bne.n	8013e9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2202      	movs	r2, #2
 8013e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013e7c:	4b2b      	ldr	r3, [pc, #172]	; (8013f2c <USBD_SetConfig+0x150>)
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	461a      	mov	r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013e86:	4b29      	ldr	r3, [pc, #164]	; (8013f2c <USBD_SetConfig+0x150>)
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f7fe ffab 	bl	8012de8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f000 f9e9 	bl	801426a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013e98:	e042      	b.n	8013f20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013e9a:	4b24      	ldr	r3, [pc, #144]	; (8013f2c <USBD_SetConfig+0x150>)
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	461a      	mov	r2, r3
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d02a      	beq.n	8013efe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	685b      	ldr	r3, [r3, #4]
 8013eac:	b2db      	uxtb	r3, r3
 8013eae:	4619      	mov	r1, r3
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f7fe ff99 	bl	8012de8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013eb6:	4b1d      	ldr	r3, [pc, #116]	; (8013f2c <USBD_SetConfig+0x150>)
 8013eb8:	781b      	ldrb	r3, [r3, #0]
 8013eba:	461a      	mov	r2, r3
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013ec0:	4b1a      	ldr	r3, [pc, #104]	; (8013f2c <USBD_SetConfig+0x150>)
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f7fe ff72 	bl	8012db0 <USBD_SetClassConfig>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013ed0:	7bfb      	ldrb	r3, [r7, #15]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d00f      	beq.n	8013ef6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013ed6:	6839      	ldr	r1, [r7, #0]
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	f000 f918 	bl	801410e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	685b      	ldr	r3, [r3, #4]
 8013ee2:	b2db      	uxtb	r3, r3
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	f7fe ff7e 	bl	8012de8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2202      	movs	r2, #2
 8013ef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013ef4:	e014      	b.n	8013f20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f000 f9b7 	bl	801426a <USBD_CtlSendStatus>
      break;
 8013efc:	e010      	b.n	8013f20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f000 f9b3 	bl	801426a <USBD_CtlSendStatus>
      break;
 8013f04:	e00c      	b.n	8013f20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013f06:	6839      	ldr	r1, [r7, #0]
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f000 f900 	bl	801410e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013f0e:	4b07      	ldr	r3, [pc, #28]	; (8013f2c <USBD_SetConfig+0x150>)
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	4619      	mov	r1, r3
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f7fe ff67 	bl	8012de8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013f1a:	2303      	movs	r3, #3
 8013f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8013f1e:	bf00      	nop
  }

  return ret;
 8013f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	3710      	adds	r7, #16
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	200067a4 	.word	0x200067a4

08013f30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b082      	sub	sp, #8
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	88db      	ldrh	r3, [r3, #6]
 8013f3e:	2b01      	cmp	r3, #1
 8013f40:	d004      	beq.n	8013f4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013f42:	6839      	ldr	r1, [r7, #0]
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f000 f8e2 	bl	801410e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013f4a:	e023      	b.n	8013f94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f52:	b2db      	uxtb	r3, r3
 8013f54:	2b02      	cmp	r3, #2
 8013f56:	dc02      	bgt.n	8013f5e <USBD_GetConfig+0x2e>
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	dc03      	bgt.n	8013f64 <USBD_GetConfig+0x34>
 8013f5c:	e015      	b.n	8013f8a <USBD_GetConfig+0x5a>
 8013f5e:	2b03      	cmp	r3, #3
 8013f60:	d00b      	beq.n	8013f7a <USBD_GetConfig+0x4a>
 8013f62:	e012      	b.n	8013f8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2200      	movs	r2, #0
 8013f68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	3308      	adds	r3, #8
 8013f6e:	2201      	movs	r2, #1
 8013f70:	4619      	mov	r1, r3
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f000 f93c 	bl	80141f0 <USBD_CtlSendData>
        break;
 8013f78:	e00c      	b.n	8013f94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	3304      	adds	r3, #4
 8013f7e:	2201      	movs	r2, #1
 8013f80:	4619      	mov	r1, r3
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f000 f934 	bl	80141f0 <USBD_CtlSendData>
        break;
 8013f88:	e004      	b.n	8013f94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013f8a:	6839      	ldr	r1, [r7, #0]
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f000 f8be 	bl	801410e <USBD_CtlError>
        break;
 8013f92:	bf00      	nop
}
 8013f94:	bf00      	nop
 8013f96:	3708      	adds	r7, #8
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd80      	pop	{r7, pc}

08013f9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fac:	b2db      	uxtb	r3, r3
 8013fae:	3b01      	subs	r3, #1
 8013fb0:	2b02      	cmp	r3, #2
 8013fb2:	d81e      	bhi.n	8013ff2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	88db      	ldrh	r3, [r3, #6]
 8013fb8:	2b02      	cmp	r3, #2
 8013fba:	d004      	beq.n	8013fc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013fbc:	6839      	ldr	r1, [r7, #0]
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f000 f8a5 	bl	801410e <USBD_CtlError>
        break;
 8013fc4:	e01a      	b.n	8013ffc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2201      	movs	r2, #1
 8013fca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d005      	beq.n	8013fe2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	68db      	ldr	r3, [r3, #12]
 8013fda:	f043 0202 	orr.w	r2, r3, #2
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	330c      	adds	r3, #12
 8013fe6:	2202      	movs	r2, #2
 8013fe8:	4619      	mov	r1, r3
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f000 f900 	bl	80141f0 <USBD_CtlSendData>
      break;
 8013ff0:	e004      	b.n	8013ffc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013ff2:	6839      	ldr	r1, [r7, #0]
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	f000 f88a 	bl	801410e <USBD_CtlError>
      break;
 8013ffa:	bf00      	nop
  }
}
 8013ffc:	bf00      	nop
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}

08014004 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b082      	sub	sp, #8
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	885b      	ldrh	r3, [r3, #2]
 8014012:	2b01      	cmp	r3, #1
 8014014:	d107      	bne.n	8014026 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2201      	movs	r2, #1
 801401a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801401e:	6878      	ldr	r0, [r7, #4]
 8014020:	f000 f923 	bl	801426a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014024:	e013      	b.n	801404e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	885b      	ldrh	r3, [r3, #2]
 801402a:	2b02      	cmp	r3, #2
 801402c:	d10b      	bne.n	8014046 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	889b      	ldrh	r3, [r3, #4]
 8014032:	0a1b      	lsrs	r3, r3, #8
 8014034:	b29b      	uxth	r3, r3
 8014036:	b2da      	uxtb	r2, r3
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f000 f913 	bl	801426a <USBD_CtlSendStatus>
}
 8014044:	e003      	b.n	801404e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014046:	6839      	ldr	r1, [r7, #0]
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f000 f860 	bl	801410e <USBD_CtlError>
}
 801404e:	bf00      	nop
 8014050:	3708      	adds	r7, #8
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}

08014056 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014056:	b580      	push	{r7, lr}
 8014058:	b082      	sub	sp, #8
 801405a:	af00      	add	r7, sp, #0
 801405c:	6078      	str	r0, [r7, #4]
 801405e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014066:	b2db      	uxtb	r3, r3
 8014068:	3b01      	subs	r3, #1
 801406a:	2b02      	cmp	r3, #2
 801406c:	d80b      	bhi.n	8014086 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	885b      	ldrh	r3, [r3, #2]
 8014072:	2b01      	cmp	r3, #1
 8014074:	d10c      	bne.n	8014090 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2200      	movs	r2, #0
 801407a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f000 f8f3 	bl	801426a <USBD_CtlSendStatus>
      }
      break;
 8014084:	e004      	b.n	8014090 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014086:	6839      	ldr	r1, [r7, #0]
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f000 f840 	bl	801410e <USBD_CtlError>
      break;
 801408e:	e000      	b.n	8014092 <USBD_ClrFeature+0x3c>
      break;
 8014090:	bf00      	nop
  }
}
 8014092:	bf00      	nop
 8014094:	3708      	adds	r7, #8
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}

0801409a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801409a:	b580      	push	{r7, lr}
 801409c:	b084      	sub	sp, #16
 801409e:	af00      	add	r7, sp, #0
 80140a0:	6078      	str	r0, [r7, #4]
 80140a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	781a      	ldrb	r2, [r3, #0]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	3301      	adds	r3, #1
 80140b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	781a      	ldrb	r2, [r3, #0]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	3301      	adds	r3, #1
 80140c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80140c4:	68f8      	ldr	r0, [r7, #12]
 80140c6:	f7ff fa16 	bl	80134f6 <SWAPBYTE>
 80140ca:	4603      	mov	r3, r0
 80140cc:	461a      	mov	r2, r3
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	3301      	adds	r3, #1
 80140d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	3301      	adds	r3, #1
 80140dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80140de:	68f8      	ldr	r0, [r7, #12]
 80140e0:	f7ff fa09 	bl	80134f6 <SWAPBYTE>
 80140e4:	4603      	mov	r3, r0
 80140e6:	461a      	mov	r2, r3
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	3301      	adds	r3, #1
 80140f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	3301      	adds	r3, #1
 80140f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80140f8:	68f8      	ldr	r0, [r7, #12]
 80140fa:	f7ff f9fc 	bl	80134f6 <SWAPBYTE>
 80140fe:	4603      	mov	r3, r0
 8014100:	461a      	mov	r2, r3
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	80da      	strh	r2, [r3, #6]
}
 8014106:	bf00      	nop
 8014108:	3710      	adds	r7, #16
 801410a:	46bd      	mov	sp, r7
 801410c:	bd80      	pop	{r7, pc}

0801410e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801410e:	b580      	push	{r7, lr}
 8014110:	b082      	sub	sp, #8
 8014112:	af00      	add	r7, sp, #0
 8014114:	6078      	str	r0, [r7, #4]
 8014116:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014118:	2180      	movs	r1, #128	; 0x80
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f003 fbe5 	bl	80178ea <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014120:	2100      	movs	r1, #0
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f003 fbe1 	bl	80178ea <USBD_LL_StallEP>
}
 8014128:	bf00      	nop
 801412a:	3708      	adds	r7, #8
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}

08014130 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b086      	sub	sp, #24
 8014134:	af00      	add	r7, sp, #0
 8014136:	60f8      	str	r0, [r7, #12]
 8014138:	60b9      	str	r1, [r7, #8]
 801413a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801413c:	2300      	movs	r3, #0
 801413e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d036      	beq.n	80141b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801414a:	6938      	ldr	r0, [r7, #16]
 801414c:	f000 f836 	bl	80141bc <USBD_GetLen>
 8014150:	4603      	mov	r3, r0
 8014152:	3301      	adds	r3, #1
 8014154:	b29b      	uxth	r3, r3
 8014156:	005b      	lsls	r3, r3, #1
 8014158:	b29a      	uxth	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801415e:	7dfb      	ldrb	r3, [r7, #23]
 8014160:	68ba      	ldr	r2, [r7, #8]
 8014162:	4413      	add	r3, r2
 8014164:	687a      	ldr	r2, [r7, #4]
 8014166:	7812      	ldrb	r2, [r2, #0]
 8014168:	701a      	strb	r2, [r3, #0]
  idx++;
 801416a:	7dfb      	ldrb	r3, [r7, #23]
 801416c:	3301      	adds	r3, #1
 801416e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014170:	7dfb      	ldrb	r3, [r7, #23]
 8014172:	68ba      	ldr	r2, [r7, #8]
 8014174:	4413      	add	r3, r2
 8014176:	2203      	movs	r2, #3
 8014178:	701a      	strb	r2, [r3, #0]
  idx++;
 801417a:	7dfb      	ldrb	r3, [r7, #23]
 801417c:	3301      	adds	r3, #1
 801417e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014180:	e013      	b.n	80141aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014182:	7dfb      	ldrb	r3, [r7, #23]
 8014184:	68ba      	ldr	r2, [r7, #8]
 8014186:	4413      	add	r3, r2
 8014188:	693a      	ldr	r2, [r7, #16]
 801418a:	7812      	ldrb	r2, [r2, #0]
 801418c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801418e:	693b      	ldr	r3, [r7, #16]
 8014190:	3301      	adds	r3, #1
 8014192:	613b      	str	r3, [r7, #16]
    idx++;
 8014194:	7dfb      	ldrb	r3, [r7, #23]
 8014196:	3301      	adds	r3, #1
 8014198:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801419a:	7dfb      	ldrb	r3, [r7, #23]
 801419c:	68ba      	ldr	r2, [r7, #8]
 801419e:	4413      	add	r3, r2
 80141a0:	2200      	movs	r2, #0
 80141a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80141a4:	7dfb      	ldrb	r3, [r7, #23]
 80141a6:	3301      	adds	r3, #1
 80141a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80141aa:	693b      	ldr	r3, [r7, #16]
 80141ac:	781b      	ldrb	r3, [r3, #0]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d1e7      	bne.n	8014182 <USBD_GetString+0x52>
 80141b2:	e000      	b.n	80141b6 <USBD_GetString+0x86>
    return;
 80141b4:	bf00      	nop
  }
}
 80141b6:	3718      	adds	r7, #24
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80141bc:	b480      	push	{r7}
 80141be:	b085      	sub	sp, #20
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80141c4:	2300      	movs	r3, #0
 80141c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80141cc:	e005      	b.n	80141da <USBD_GetLen+0x1e>
  {
    len++;
 80141ce:	7bfb      	ldrb	r3, [r7, #15]
 80141d0:	3301      	adds	r3, #1
 80141d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	3301      	adds	r3, #1
 80141d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d1f5      	bne.n	80141ce <USBD_GetLen+0x12>
  }

  return len;
 80141e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3714      	adds	r7, #20
 80141e8:	46bd      	mov	sp, r7
 80141ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ee:	4770      	bx	lr

080141f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b084      	sub	sp, #16
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	2202      	movs	r2, #2
 8014200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	687a      	ldr	r2, [r7, #4]
 8014208:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	687a      	ldr	r2, [r7, #4]
 801420e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	68ba      	ldr	r2, [r7, #8]
 8014214:	2100      	movs	r1, #0
 8014216:	68f8      	ldr	r0, [r7, #12]
 8014218:	f003 fbf0 	bl	80179fc <USBD_LL_Transmit>

  return USBD_OK;
 801421c:	2300      	movs	r3, #0
}
 801421e:	4618      	mov	r0, r3
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}

08014226 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014226:	b580      	push	{r7, lr}
 8014228:	b084      	sub	sp, #16
 801422a:	af00      	add	r7, sp, #0
 801422c:	60f8      	str	r0, [r7, #12]
 801422e:	60b9      	str	r1, [r7, #8]
 8014230:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	68ba      	ldr	r2, [r7, #8]
 8014236:	2100      	movs	r1, #0
 8014238:	68f8      	ldr	r0, [r7, #12]
 801423a:	f003 fbdf 	bl	80179fc <USBD_LL_Transmit>

  return USBD_OK;
 801423e:	2300      	movs	r3, #0
}
 8014240:	4618      	mov	r0, r3
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}

08014248 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af00      	add	r7, sp, #0
 801424e:	60f8      	str	r0, [r7, #12]
 8014250:	60b9      	str	r1, [r7, #8]
 8014252:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	68ba      	ldr	r2, [r7, #8]
 8014258:	2100      	movs	r1, #0
 801425a:	68f8      	ldr	r0, [r7, #12]
 801425c:	f003 fbef 	bl	8017a3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014260:	2300      	movs	r3, #0
}
 8014262:	4618      	mov	r0, r3
 8014264:	3710      	adds	r7, #16
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}

0801426a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801426a:	b580      	push	{r7, lr}
 801426c:	b082      	sub	sp, #8
 801426e:	af00      	add	r7, sp, #0
 8014270:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	2204      	movs	r2, #4
 8014276:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801427a:	2300      	movs	r3, #0
 801427c:	2200      	movs	r2, #0
 801427e:	2100      	movs	r1, #0
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f003 fbbb 	bl	80179fc <USBD_LL_Transmit>

  return USBD_OK;
 8014286:	2300      	movs	r3, #0
}
 8014288:	4618      	mov	r0, r3
 801428a:	3708      	adds	r7, #8
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2205      	movs	r2, #5
 801429c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80142a0:	2300      	movs	r3, #0
 80142a2:	2200      	movs	r2, #0
 80142a4:	2100      	movs	r1, #0
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f003 fbc9 	bl	8017a3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80142ac:	2300      	movs	r3, #0
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
	...

080142b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b084      	sub	sp, #16
 80142bc:	af00      	add	r7, sp, #0
 80142be:	4603      	mov	r3, r0
 80142c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80142c2:	79fb      	ldrb	r3, [r7, #7]
 80142c4:	4a08      	ldr	r2, [pc, #32]	; (80142e8 <disk_status+0x30>)
 80142c6:	009b      	lsls	r3, r3, #2
 80142c8:	4413      	add	r3, r2
 80142ca:	685b      	ldr	r3, [r3, #4]
 80142cc:	685b      	ldr	r3, [r3, #4]
 80142ce:	79fa      	ldrb	r2, [r7, #7]
 80142d0:	4905      	ldr	r1, [pc, #20]	; (80142e8 <disk_status+0x30>)
 80142d2:	440a      	add	r2, r1
 80142d4:	7a12      	ldrb	r2, [r2, #8]
 80142d6:	4610      	mov	r0, r2
 80142d8:	4798      	blx	r3
 80142da:	4603      	mov	r3, r0
 80142dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80142de:	7bfb      	ldrb	r3, [r7, #15]
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3710      	adds	r7, #16
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	200069b0 	.word	0x200069b0

080142ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	4603      	mov	r3, r0
 80142f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80142f6:	2300      	movs	r3, #0
 80142f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80142fa:	79fb      	ldrb	r3, [r7, #7]
 80142fc:	4a0d      	ldr	r2, [pc, #52]	; (8014334 <disk_initialize+0x48>)
 80142fe:	5cd3      	ldrb	r3, [r2, r3]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d111      	bne.n	8014328 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014304:	79fb      	ldrb	r3, [r7, #7]
 8014306:	4a0b      	ldr	r2, [pc, #44]	; (8014334 <disk_initialize+0x48>)
 8014308:	2101      	movs	r1, #1
 801430a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801430c:	79fb      	ldrb	r3, [r7, #7]
 801430e:	4a09      	ldr	r2, [pc, #36]	; (8014334 <disk_initialize+0x48>)
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	4413      	add	r3, r2
 8014314:	685b      	ldr	r3, [r3, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	79fa      	ldrb	r2, [r7, #7]
 801431a:	4906      	ldr	r1, [pc, #24]	; (8014334 <disk_initialize+0x48>)
 801431c:	440a      	add	r2, r1
 801431e:	7a12      	ldrb	r2, [r2, #8]
 8014320:	4610      	mov	r0, r2
 8014322:	4798      	blx	r3
 8014324:	4603      	mov	r3, r0
 8014326:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014328:	7bfb      	ldrb	r3, [r7, #15]
}
 801432a:	4618      	mov	r0, r3
 801432c:	3710      	adds	r7, #16
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	200069b0 	.word	0x200069b0

08014338 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014338:	b590      	push	{r4, r7, lr}
 801433a:	b087      	sub	sp, #28
 801433c:	af00      	add	r7, sp, #0
 801433e:	60b9      	str	r1, [r7, #8]
 8014340:	607a      	str	r2, [r7, #4]
 8014342:	603b      	str	r3, [r7, #0]
 8014344:	4603      	mov	r3, r0
 8014346:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014348:	7bfb      	ldrb	r3, [r7, #15]
 801434a:	4a0a      	ldr	r2, [pc, #40]	; (8014374 <disk_read+0x3c>)
 801434c:	009b      	lsls	r3, r3, #2
 801434e:	4413      	add	r3, r2
 8014350:	685b      	ldr	r3, [r3, #4]
 8014352:	689c      	ldr	r4, [r3, #8]
 8014354:	7bfb      	ldrb	r3, [r7, #15]
 8014356:	4a07      	ldr	r2, [pc, #28]	; (8014374 <disk_read+0x3c>)
 8014358:	4413      	add	r3, r2
 801435a:	7a18      	ldrb	r0, [r3, #8]
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	687a      	ldr	r2, [r7, #4]
 8014360:	68b9      	ldr	r1, [r7, #8]
 8014362:	47a0      	blx	r4
 8014364:	4603      	mov	r3, r0
 8014366:	75fb      	strb	r3, [r7, #23]
  return res;
 8014368:	7dfb      	ldrb	r3, [r7, #23]
}
 801436a:	4618      	mov	r0, r3
 801436c:	371c      	adds	r7, #28
 801436e:	46bd      	mov	sp, r7
 8014370:	bd90      	pop	{r4, r7, pc}
 8014372:	bf00      	nop
 8014374:	200069b0 	.word	0x200069b0

08014378 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014378:	b590      	push	{r4, r7, lr}
 801437a:	b087      	sub	sp, #28
 801437c:	af00      	add	r7, sp, #0
 801437e:	60b9      	str	r1, [r7, #8]
 8014380:	607a      	str	r2, [r7, #4]
 8014382:	603b      	str	r3, [r7, #0]
 8014384:	4603      	mov	r3, r0
 8014386:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014388:	7bfb      	ldrb	r3, [r7, #15]
 801438a:	4a0a      	ldr	r2, [pc, #40]	; (80143b4 <disk_write+0x3c>)
 801438c:	009b      	lsls	r3, r3, #2
 801438e:	4413      	add	r3, r2
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	68dc      	ldr	r4, [r3, #12]
 8014394:	7bfb      	ldrb	r3, [r7, #15]
 8014396:	4a07      	ldr	r2, [pc, #28]	; (80143b4 <disk_write+0x3c>)
 8014398:	4413      	add	r3, r2
 801439a:	7a18      	ldrb	r0, [r3, #8]
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	687a      	ldr	r2, [r7, #4]
 80143a0:	68b9      	ldr	r1, [r7, #8]
 80143a2:	47a0      	blx	r4
 80143a4:	4603      	mov	r3, r0
 80143a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80143a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	371c      	adds	r7, #28
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd90      	pop	{r4, r7, pc}
 80143b2:	bf00      	nop
 80143b4:	200069b0 	.word	0x200069b0

080143b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b084      	sub	sp, #16
 80143bc:	af00      	add	r7, sp, #0
 80143be:	4603      	mov	r3, r0
 80143c0:	603a      	str	r2, [r7, #0]
 80143c2:	71fb      	strb	r3, [r7, #7]
 80143c4:	460b      	mov	r3, r1
 80143c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80143c8:	79fb      	ldrb	r3, [r7, #7]
 80143ca:	4a09      	ldr	r2, [pc, #36]	; (80143f0 <disk_ioctl+0x38>)
 80143cc:	009b      	lsls	r3, r3, #2
 80143ce:	4413      	add	r3, r2
 80143d0:	685b      	ldr	r3, [r3, #4]
 80143d2:	691b      	ldr	r3, [r3, #16]
 80143d4:	79fa      	ldrb	r2, [r7, #7]
 80143d6:	4906      	ldr	r1, [pc, #24]	; (80143f0 <disk_ioctl+0x38>)
 80143d8:	440a      	add	r2, r1
 80143da:	7a10      	ldrb	r0, [r2, #8]
 80143dc:	79b9      	ldrb	r1, [r7, #6]
 80143de:	683a      	ldr	r2, [r7, #0]
 80143e0:	4798      	blx	r3
 80143e2:	4603      	mov	r3, r0
 80143e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80143e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	3710      	adds	r7, #16
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}
 80143f0:	200069b0 	.word	0x200069b0

080143f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80143f4:	b480      	push	{r7}
 80143f6:	b085      	sub	sp, #20
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	3301      	adds	r3, #1
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014404:	89fb      	ldrh	r3, [r7, #14]
 8014406:	021b      	lsls	r3, r3, #8
 8014408:	b21a      	sxth	r2, r3
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	b21b      	sxth	r3, r3
 8014410:	4313      	orrs	r3, r2
 8014412:	b21b      	sxth	r3, r3
 8014414:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014416:	89fb      	ldrh	r3, [r7, #14]
}
 8014418:	4618      	mov	r0, r3
 801441a:	3714      	adds	r7, #20
 801441c:	46bd      	mov	sp, r7
 801441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014422:	4770      	bx	lr

08014424 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014424:	b480      	push	{r7}
 8014426:	b085      	sub	sp, #20
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	3303      	adds	r3, #3
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	021b      	lsls	r3, r3, #8
 8014438:	687a      	ldr	r2, [r7, #4]
 801443a:	3202      	adds	r2, #2
 801443c:	7812      	ldrb	r2, [r2, #0]
 801443e:	4313      	orrs	r3, r2
 8014440:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	021b      	lsls	r3, r3, #8
 8014446:	687a      	ldr	r2, [r7, #4]
 8014448:	3201      	adds	r2, #1
 801444a:	7812      	ldrb	r2, [r2, #0]
 801444c:	4313      	orrs	r3, r2
 801444e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	021b      	lsls	r3, r3, #8
 8014454:	687a      	ldr	r2, [r7, #4]
 8014456:	7812      	ldrb	r2, [r2, #0]
 8014458:	4313      	orrs	r3, r2
 801445a:	60fb      	str	r3, [r7, #12]
	return rv;
 801445c:	68fb      	ldr	r3, [r7, #12]
}
 801445e:	4618      	mov	r0, r3
 8014460:	3714      	adds	r7, #20
 8014462:	46bd      	mov	sp, r7
 8014464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014468:	4770      	bx	lr

0801446a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801446a:	b480      	push	{r7}
 801446c:	b083      	sub	sp, #12
 801446e:	af00      	add	r7, sp, #0
 8014470:	6078      	str	r0, [r7, #4]
 8014472:	460b      	mov	r3, r1
 8014474:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	1c5a      	adds	r2, r3, #1
 801447a:	607a      	str	r2, [r7, #4]
 801447c:	887a      	ldrh	r2, [r7, #2]
 801447e:	b2d2      	uxtb	r2, r2
 8014480:	701a      	strb	r2, [r3, #0]
 8014482:	887b      	ldrh	r3, [r7, #2]
 8014484:	0a1b      	lsrs	r3, r3, #8
 8014486:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	1c5a      	adds	r2, r3, #1
 801448c:	607a      	str	r2, [r7, #4]
 801448e:	887a      	ldrh	r2, [r7, #2]
 8014490:	b2d2      	uxtb	r2, r2
 8014492:	701a      	strb	r2, [r3, #0]
}
 8014494:	bf00      	nop
 8014496:	370c      	adds	r7, #12
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr

080144a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80144a0:	b480      	push	{r7}
 80144a2:	b083      	sub	sp, #12
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	1c5a      	adds	r2, r3, #1
 80144ae:	607a      	str	r2, [r7, #4]
 80144b0:	683a      	ldr	r2, [r7, #0]
 80144b2:	b2d2      	uxtb	r2, r2
 80144b4:	701a      	strb	r2, [r3, #0]
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	0a1b      	lsrs	r3, r3, #8
 80144ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	1c5a      	adds	r2, r3, #1
 80144c0:	607a      	str	r2, [r7, #4]
 80144c2:	683a      	ldr	r2, [r7, #0]
 80144c4:	b2d2      	uxtb	r2, r2
 80144c6:	701a      	strb	r2, [r3, #0]
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	0a1b      	lsrs	r3, r3, #8
 80144cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	1c5a      	adds	r2, r3, #1
 80144d2:	607a      	str	r2, [r7, #4]
 80144d4:	683a      	ldr	r2, [r7, #0]
 80144d6:	b2d2      	uxtb	r2, r2
 80144d8:	701a      	strb	r2, [r3, #0]
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	0a1b      	lsrs	r3, r3, #8
 80144de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	1c5a      	adds	r2, r3, #1
 80144e4:	607a      	str	r2, [r7, #4]
 80144e6:	683a      	ldr	r2, [r7, #0]
 80144e8:	b2d2      	uxtb	r2, r2
 80144ea:	701a      	strb	r2, [r3, #0]
}
 80144ec:	bf00      	nop
 80144ee:	370c      	adds	r7, #12
 80144f0:	46bd      	mov	sp, r7
 80144f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f6:	4770      	bx	lr

080144f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80144f8:	b480      	push	{r7}
 80144fa:	b087      	sub	sp, #28
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d00d      	beq.n	801452e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014512:	693a      	ldr	r2, [r7, #16]
 8014514:	1c53      	adds	r3, r2, #1
 8014516:	613b      	str	r3, [r7, #16]
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	1c59      	adds	r1, r3, #1
 801451c:	6179      	str	r1, [r7, #20]
 801451e:	7812      	ldrb	r2, [r2, #0]
 8014520:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	3b01      	subs	r3, #1
 8014526:	607b      	str	r3, [r7, #4]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d1f1      	bne.n	8014512 <mem_cpy+0x1a>
	}
}
 801452e:	bf00      	nop
 8014530:	371c      	adds	r7, #28
 8014532:	46bd      	mov	sp, r7
 8014534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014538:	4770      	bx	lr

0801453a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801453a:	b480      	push	{r7}
 801453c:	b087      	sub	sp, #28
 801453e:	af00      	add	r7, sp, #0
 8014540:	60f8      	str	r0, [r7, #12]
 8014542:	60b9      	str	r1, [r7, #8]
 8014544:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	1c5a      	adds	r2, r3, #1
 801454e:	617a      	str	r2, [r7, #20]
 8014550:	68ba      	ldr	r2, [r7, #8]
 8014552:	b2d2      	uxtb	r2, r2
 8014554:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	3b01      	subs	r3, #1
 801455a:	607b      	str	r3, [r7, #4]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d1f3      	bne.n	801454a <mem_set+0x10>
}
 8014562:	bf00      	nop
 8014564:	bf00      	nop
 8014566:	371c      	adds	r7, #28
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014570:	b480      	push	{r7}
 8014572:	b089      	sub	sp, #36	; 0x24
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	61fb      	str	r3, [r7, #28]
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014584:	2300      	movs	r3, #0
 8014586:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014588:	69fb      	ldr	r3, [r7, #28]
 801458a:	1c5a      	adds	r2, r3, #1
 801458c:	61fa      	str	r2, [r7, #28]
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	4619      	mov	r1, r3
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	1c5a      	adds	r2, r3, #1
 8014596:	61ba      	str	r2, [r7, #24]
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	1acb      	subs	r3, r1, r3
 801459c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	3b01      	subs	r3, #1
 80145a2:	607b      	str	r3, [r7, #4]
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d002      	beq.n	80145b0 <mem_cmp+0x40>
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d0eb      	beq.n	8014588 <mem_cmp+0x18>

	return r;
 80145b0:	697b      	ldr	r3, [r7, #20]
}
 80145b2:	4618      	mov	r0, r3
 80145b4:	3724      	adds	r7, #36	; 0x24
 80145b6:	46bd      	mov	sp, r7
 80145b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145bc:	4770      	bx	lr

080145be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80145be:	b480      	push	{r7}
 80145c0:	b083      	sub	sp, #12
 80145c2:	af00      	add	r7, sp, #0
 80145c4:	6078      	str	r0, [r7, #4]
 80145c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80145c8:	e002      	b.n	80145d0 <chk_chr+0x12>
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	3301      	adds	r3, #1
 80145ce:	607b      	str	r3, [r7, #4]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d005      	beq.n	80145e4 <chk_chr+0x26>
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	781b      	ldrb	r3, [r3, #0]
 80145dc:	461a      	mov	r2, r3
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	4293      	cmp	r3, r2
 80145e2:	d1f2      	bne.n	80145ca <chk_chr+0xc>
	return *str;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	781b      	ldrb	r3, [r3, #0]
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	370c      	adds	r7, #12
 80145ec:	46bd      	mov	sp, r7
 80145ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f2:	4770      	bx	lr

080145f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b086      	sub	sp, #24
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80145fc:	2300      	movs	r3, #0
 80145fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	78db      	ldrb	r3, [r3, #3]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d034      	beq.n	8014672 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801460c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	7858      	ldrb	r0, [r3, #1]
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014618:	2301      	movs	r3, #1
 801461a:	697a      	ldr	r2, [r7, #20]
 801461c:	f7ff feac 	bl	8014378 <disk_write>
 8014620:	4603      	mov	r3, r0
 8014622:	2b00      	cmp	r3, #0
 8014624:	d002      	beq.n	801462c <sync_window+0x38>
			res = FR_DISK_ERR;
 8014626:	2301      	movs	r3, #1
 8014628:	73fb      	strb	r3, [r7, #15]
 801462a:	e022      	b.n	8014672 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2200      	movs	r2, #0
 8014630:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014636:	697a      	ldr	r2, [r7, #20]
 8014638:	1ad2      	subs	r2, r2, r3
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	6a1b      	ldr	r3, [r3, #32]
 801463e:	429a      	cmp	r2, r3
 8014640:	d217      	bcs.n	8014672 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	789b      	ldrb	r3, [r3, #2]
 8014646:	613b      	str	r3, [r7, #16]
 8014648:	e010      	b.n	801466c <sync_window+0x78>
					wsect += fs->fsize;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6a1b      	ldr	r3, [r3, #32]
 801464e:	697a      	ldr	r2, [r7, #20]
 8014650:	4413      	add	r3, r2
 8014652:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	7858      	ldrb	r0, [r3, #1]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801465e:	2301      	movs	r3, #1
 8014660:	697a      	ldr	r2, [r7, #20]
 8014662:	f7ff fe89 	bl	8014378 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014666:	693b      	ldr	r3, [r7, #16]
 8014668:	3b01      	subs	r3, #1
 801466a:	613b      	str	r3, [r7, #16]
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	2b01      	cmp	r3, #1
 8014670:	d8eb      	bhi.n	801464a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014672:	7bfb      	ldrb	r3, [r7, #15]
}
 8014674:	4618      	mov	r0, r3
 8014676:	3718      	adds	r7, #24
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}

0801467c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b084      	sub	sp, #16
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8014686:	2300      	movs	r3, #0
 8014688:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801468e:	683a      	ldr	r2, [r7, #0]
 8014690:	429a      	cmp	r2, r3
 8014692:	d01b      	beq.n	80146cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f7ff ffad 	bl	80145f4 <sync_window>
 801469a:	4603      	mov	r3, r0
 801469c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801469e:	7bfb      	ldrb	r3, [r7, #15]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d113      	bne.n	80146cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	7858      	ldrb	r0, [r3, #1]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80146ae:	2301      	movs	r3, #1
 80146b0:	683a      	ldr	r2, [r7, #0]
 80146b2:	f7ff fe41 	bl	8014338 <disk_read>
 80146b6:	4603      	mov	r3, r0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d004      	beq.n	80146c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80146bc:	f04f 33ff 	mov.w	r3, #4294967295
 80146c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80146c2:	2301      	movs	r3, #1
 80146c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	683a      	ldr	r2, [r7, #0]
 80146ca:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80146cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3710      	adds	r7, #16
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}
	...

080146d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b084      	sub	sp, #16
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7ff ff87 	bl	80145f4 <sync_window>
 80146e6:	4603      	mov	r3, r0
 80146e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80146ea:	7bfb      	ldrb	r3, [r7, #15]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d159      	bne.n	80147a4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	2b03      	cmp	r3, #3
 80146f6:	d149      	bne.n	801478c <sync_fs+0xb4>
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	791b      	ldrb	r3, [r3, #4]
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	d145      	bne.n	801478c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	899b      	ldrh	r3, [r3, #12]
 801470a:	461a      	mov	r2, r3
 801470c:	2100      	movs	r1, #0
 801470e:	f7ff ff14 	bl	801453a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	3338      	adds	r3, #56	; 0x38
 8014716:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801471a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801471e:	4618      	mov	r0, r3
 8014720:	f7ff fea3 	bl	801446a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	3338      	adds	r3, #56	; 0x38
 8014728:	4921      	ldr	r1, [pc, #132]	; (80147b0 <sync_fs+0xd8>)
 801472a:	4618      	mov	r0, r3
 801472c:	f7ff feb8 	bl	80144a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	3338      	adds	r3, #56	; 0x38
 8014734:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014738:	491e      	ldr	r1, [pc, #120]	; (80147b4 <sync_fs+0xdc>)
 801473a:	4618      	mov	r0, r3
 801473c:	f7ff feb0 	bl	80144a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	3338      	adds	r3, #56	; 0x38
 8014744:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	699b      	ldr	r3, [r3, #24]
 801474c:	4619      	mov	r1, r3
 801474e:	4610      	mov	r0, r2
 8014750:	f7ff fea6 	bl	80144a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	3338      	adds	r3, #56	; 0x38
 8014758:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	695b      	ldr	r3, [r3, #20]
 8014760:	4619      	mov	r1, r3
 8014762:	4610      	mov	r0, r2
 8014764:	f7ff fe9c 	bl	80144a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801476c:	1c5a      	adds	r2, r3, #1
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	7858      	ldrb	r0, [r3, #1]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014780:	2301      	movs	r3, #1
 8014782:	f7ff fdf9 	bl	8014378 <disk_write>
			fs->fsi_flag = 0;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	2200      	movs	r2, #0
 801478a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	785b      	ldrb	r3, [r3, #1]
 8014790:	2200      	movs	r2, #0
 8014792:	2100      	movs	r1, #0
 8014794:	4618      	mov	r0, r3
 8014796:	f7ff fe0f 	bl	80143b8 <disk_ioctl>
 801479a:	4603      	mov	r3, r0
 801479c:	2b00      	cmp	r3, #0
 801479e:	d001      	beq.n	80147a4 <sync_fs+0xcc>
 80147a0:	2301      	movs	r3, #1
 80147a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80147a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	3710      	adds	r7, #16
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bd80      	pop	{r7, pc}
 80147ae:	bf00      	nop
 80147b0:	41615252 	.word	0x41615252
 80147b4:	61417272 	.word	0x61417272

080147b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	3b02      	subs	r3, #2
 80147c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	69db      	ldr	r3, [r3, #28]
 80147cc:	3b02      	subs	r3, #2
 80147ce:	683a      	ldr	r2, [r7, #0]
 80147d0:	429a      	cmp	r2, r3
 80147d2:	d301      	bcc.n	80147d8 <clust2sect+0x20>
 80147d4:	2300      	movs	r3, #0
 80147d6:	e008      	b.n	80147ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	895b      	ldrh	r3, [r3, #10]
 80147dc:	461a      	mov	r2, r3
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	fb03 f202 	mul.w	r2, r3, r2
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147e8:	4413      	add	r3, r2
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	370c      	adds	r7, #12
 80147ee:	46bd      	mov	sp, r7
 80147f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f4:	4770      	bx	lr

080147f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80147f6:	b580      	push	{r7, lr}
 80147f8:	b086      	sub	sp, #24
 80147fa:	af00      	add	r7, sp, #0
 80147fc:	6078      	str	r0, [r7, #4]
 80147fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	2b01      	cmp	r3, #1
 801480a:	d904      	bls.n	8014816 <get_fat+0x20>
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	69db      	ldr	r3, [r3, #28]
 8014810:	683a      	ldr	r2, [r7, #0]
 8014812:	429a      	cmp	r2, r3
 8014814:	d302      	bcc.n	801481c <get_fat+0x26>
		val = 1;	/* Internal error */
 8014816:	2301      	movs	r3, #1
 8014818:	617b      	str	r3, [r7, #20]
 801481a:	e0bb      	b.n	8014994 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801481c:	f04f 33ff 	mov.w	r3, #4294967295
 8014820:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014822:	693b      	ldr	r3, [r7, #16]
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	2b03      	cmp	r3, #3
 8014828:	f000 8083 	beq.w	8014932 <get_fat+0x13c>
 801482c:	2b03      	cmp	r3, #3
 801482e:	f300 80a7 	bgt.w	8014980 <get_fat+0x18a>
 8014832:	2b01      	cmp	r3, #1
 8014834:	d002      	beq.n	801483c <get_fat+0x46>
 8014836:	2b02      	cmp	r3, #2
 8014838:	d056      	beq.n	80148e8 <get_fat+0xf2>
 801483a:	e0a1      	b.n	8014980 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	60fb      	str	r3, [r7, #12]
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	085b      	lsrs	r3, r3, #1
 8014844:	68fa      	ldr	r2, [r7, #12]
 8014846:	4413      	add	r3, r2
 8014848:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	899b      	ldrh	r3, [r3, #12]
 8014852:	4619      	mov	r1, r3
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	fbb3 f3f1 	udiv	r3, r3, r1
 801485a:	4413      	add	r3, r2
 801485c:	4619      	mov	r1, r3
 801485e:	6938      	ldr	r0, [r7, #16]
 8014860:	f7ff ff0c 	bl	801467c <move_window>
 8014864:	4603      	mov	r3, r0
 8014866:	2b00      	cmp	r3, #0
 8014868:	f040 808d 	bne.w	8014986 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	1c5a      	adds	r2, r3, #1
 8014870:	60fa      	str	r2, [r7, #12]
 8014872:	693a      	ldr	r2, [r7, #16]
 8014874:	8992      	ldrh	r2, [r2, #12]
 8014876:	fbb3 f1f2 	udiv	r1, r3, r2
 801487a:	fb01 f202 	mul.w	r2, r1, r2
 801487e:	1a9b      	subs	r3, r3, r2
 8014880:	693a      	ldr	r2, [r7, #16]
 8014882:	4413      	add	r3, r2
 8014884:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014888:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801488e:	693b      	ldr	r3, [r7, #16]
 8014890:	899b      	ldrh	r3, [r3, #12]
 8014892:	4619      	mov	r1, r3
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	fbb3 f3f1 	udiv	r3, r3, r1
 801489a:	4413      	add	r3, r2
 801489c:	4619      	mov	r1, r3
 801489e:	6938      	ldr	r0, [r7, #16]
 80148a0:	f7ff feec 	bl	801467c <move_window>
 80148a4:	4603      	mov	r3, r0
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d16f      	bne.n	801498a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80148aa:	693b      	ldr	r3, [r7, #16]
 80148ac:	899b      	ldrh	r3, [r3, #12]
 80148ae:	461a      	mov	r2, r3
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80148b6:	fb01 f202 	mul.w	r2, r1, r2
 80148ba:	1a9b      	subs	r3, r3, r2
 80148bc:	693a      	ldr	r2, [r7, #16]
 80148be:	4413      	add	r3, r2
 80148c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80148c4:	021b      	lsls	r3, r3, #8
 80148c6:	461a      	mov	r2, r3
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	4313      	orrs	r3, r2
 80148cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	f003 0301 	and.w	r3, r3, #1
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d002      	beq.n	80148de <get_fat+0xe8>
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	091b      	lsrs	r3, r3, #4
 80148dc:	e002      	b.n	80148e4 <get_fat+0xee>
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80148e4:	617b      	str	r3, [r7, #20]
			break;
 80148e6:	e055      	b.n	8014994 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80148e8:	693b      	ldr	r3, [r7, #16]
 80148ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	899b      	ldrh	r3, [r3, #12]
 80148f0:	085b      	lsrs	r3, r3, #1
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	4619      	mov	r1, r3
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80148fc:	4413      	add	r3, r2
 80148fe:	4619      	mov	r1, r3
 8014900:	6938      	ldr	r0, [r7, #16]
 8014902:	f7ff febb 	bl	801467c <move_window>
 8014906:	4603      	mov	r3, r0
 8014908:	2b00      	cmp	r3, #0
 801490a:	d140      	bne.n	801498e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	005b      	lsls	r3, r3, #1
 8014916:	693a      	ldr	r2, [r7, #16]
 8014918:	8992      	ldrh	r2, [r2, #12]
 801491a:	fbb3 f0f2 	udiv	r0, r3, r2
 801491e:	fb00 f202 	mul.w	r2, r0, r2
 8014922:	1a9b      	subs	r3, r3, r2
 8014924:	440b      	add	r3, r1
 8014926:	4618      	mov	r0, r3
 8014928:	f7ff fd64 	bl	80143f4 <ld_word>
 801492c:	4603      	mov	r3, r0
 801492e:	617b      	str	r3, [r7, #20]
			break;
 8014930:	e030      	b.n	8014994 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	899b      	ldrh	r3, [r3, #12]
 801493a:	089b      	lsrs	r3, r3, #2
 801493c:	b29b      	uxth	r3, r3
 801493e:	4619      	mov	r1, r3
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	fbb3 f3f1 	udiv	r3, r3, r1
 8014946:	4413      	add	r3, r2
 8014948:	4619      	mov	r1, r3
 801494a:	6938      	ldr	r0, [r7, #16]
 801494c:	f7ff fe96 	bl	801467c <move_window>
 8014950:	4603      	mov	r3, r0
 8014952:	2b00      	cmp	r3, #0
 8014954:	d11d      	bne.n	8014992 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	009b      	lsls	r3, r3, #2
 8014960:	693a      	ldr	r2, [r7, #16]
 8014962:	8992      	ldrh	r2, [r2, #12]
 8014964:	fbb3 f0f2 	udiv	r0, r3, r2
 8014968:	fb00 f202 	mul.w	r2, r0, r2
 801496c:	1a9b      	subs	r3, r3, r2
 801496e:	440b      	add	r3, r1
 8014970:	4618      	mov	r0, r3
 8014972:	f7ff fd57 	bl	8014424 <ld_dword>
 8014976:	4603      	mov	r3, r0
 8014978:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801497c:	617b      	str	r3, [r7, #20]
			break;
 801497e:	e009      	b.n	8014994 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014980:	2301      	movs	r3, #1
 8014982:	617b      	str	r3, [r7, #20]
 8014984:	e006      	b.n	8014994 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014986:	bf00      	nop
 8014988:	e004      	b.n	8014994 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801498a:	bf00      	nop
 801498c:	e002      	b.n	8014994 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801498e:	bf00      	nop
 8014990:	e000      	b.n	8014994 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014992:	bf00      	nop
		}
	}

	return val;
 8014994:	697b      	ldr	r3, [r7, #20]
}
 8014996:	4618      	mov	r0, r3
 8014998:	3718      	adds	r7, #24
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}

0801499e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801499e:	b590      	push	{r4, r7, lr}
 80149a0:	b089      	sub	sp, #36	; 0x24
 80149a2:	af00      	add	r7, sp, #0
 80149a4:	60f8      	str	r0, [r7, #12]
 80149a6:	60b9      	str	r1, [r7, #8]
 80149a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80149aa:	2302      	movs	r3, #2
 80149ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	f240 8102 	bls.w	8014bba <put_fat+0x21c>
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	69db      	ldr	r3, [r3, #28]
 80149ba:	68ba      	ldr	r2, [r7, #8]
 80149bc:	429a      	cmp	r2, r3
 80149be:	f080 80fc 	bcs.w	8014bba <put_fat+0x21c>
		switch (fs->fs_type) {
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	2b03      	cmp	r3, #3
 80149c8:	f000 80b6 	beq.w	8014b38 <put_fat+0x19a>
 80149cc:	2b03      	cmp	r3, #3
 80149ce:	f300 80fd 	bgt.w	8014bcc <put_fat+0x22e>
 80149d2:	2b01      	cmp	r3, #1
 80149d4:	d003      	beq.n	80149de <put_fat+0x40>
 80149d6:	2b02      	cmp	r3, #2
 80149d8:	f000 8083 	beq.w	8014ae2 <put_fat+0x144>
 80149dc:	e0f6      	b.n	8014bcc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	61bb      	str	r3, [r7, #24]
 80149e2:	69bb      	ldr	r3, [r7, #24]
 80149e4:	085b      	lsrs	r3, r3, #1
 80149e6:	69ba      	ldr	r2, [r7, #24]
 80149e8:	4413      	add	r3, r2
 80149ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	899b      	ldrh	r3, [r3, #12]
 80149f4:	4619      	mov	r1, r3
 80149f6:	69bb      	ldr	r3, [r7, #24]
 80149f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80149fc:	4413      	add	r3, r2
 80149fe:	4619      	mov	r1, r3
 8014a00:	68f8      	ldr	r0, [r7, #12]
 8014a02:	f7ff fe3b 	bl	801467c <move_window>
 8014a06:	4603      	mov	r3, r0
 8014a08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014a0a:	7ffb      	ldrb	r3, [r7, #31]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	f040 80d6 	bne.w	8014bbe <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014a18:	69bb      	ldr	r3, [r7, #24]
 8014a1a:	1c5a      	adds	r2, r3, #1
 8014a1c:	61ba      	str	r2, [r7, #24]
 8014a1e:	68fa      	ldr	r2, [r7, #12]
 8014a20:	8992      	ldrh	r2, [r2, #12]
 8014a22:	fbb3 f0f2 	udiv	r0, r3, r2
 8014a26:	fb00 f202 	mul.w	r2, r0, r2
 8014a2a:	1a9b      	subs	r3, r3, r2
 8014a2c:	440b      	add	r3, r1
 8014a2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	f003 0301 	and.w	r3, r3, #1
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00d      	beq.n	8014a56 <put_fat+0xb8>
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	b25b      	sxtb	r3, r3
 8014a40:	f003 030f 	and.w	r3, r3, #15
 8014a44:	b25a      	sxtb	r2, r3
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	b2db      	uxtb	r3, r3
 8014a4a:	011b      	lsls	r3, r3, #4
 8014a4c:	b25b      	sxtb	r3, r3
 8014a4e:	4313      	orrs	r3, r2
 8014a50:	b25b      	sxtb	r3, r3
 8014a52:	b2db      	uxtb	r3, r3
 8014a54:	e001      	b.n	8014a5a <put_fat+0xbc>
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	b2db      	uxtb	r3, r3
 8014a5a:	697a      	ldr	r2, [r7, #20]
 8014a5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	2201      	movs	r2, #1
 8014a62:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	899b      	ldrh	r3, [r3, #12]
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	69bb      	ldr	r3, [r7, #24]
 8014a70:	fbb3 f3f1 	udiv	r3, r3, r1
 8014a74:	4413      	add	r3, r2
 8014a76:	4619      	mov	r1, r3
 8014a78:	68f8      	ldr	r0, [r7, #12]
 8014a7a:	f7ff fdff 	bl	801467c <move_window>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014a82:	7ffb      	ldrb	r3, [r7, #31]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	f040 809c 	bne.w	8014bc2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	899b      	ldrh	r3, [r3, #12]
 8014a94:	461a      	mov	r2, r3
 8014a96:	69bb      	ldr	r3, [r7, #24]
 8014a98:	fbb3 f0f2 	udiv	r0, r3, r2
 8014a9c:	fb00 f202 	mul.w	r2, r0, r2
 8014aa0:	1a9b      	subs	r3, r3, r2
 8014aa2:	440b      	add	r3, r1
 8014aa4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	f003 0301 	and.w	r3, r3, #1
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d003      	beq.n	8014ab8 <put_fat+0x11a>
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	091b      	lsrs	r3, r3, #4
 8014ab4:	b2db      	uxtb	r3, r3
 8014ab6:	e00e      	b.n	8014ad6 <put_fat+0x138>
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	b25b      	sxtb	r3, r3
 8014abe:	f023 030f 	bic.w	r3, r3, #15
 8014ac2:	b25a      	sxtb	r2, r3
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	0a1b      	lsrs	r3, r3, #8
 8014ac8:	b25b      	sxtb	r3, r3
 8014aca:	f003 030f 	and.w	r3, r3, #15
 8014ace:	b25b      	sxtb	r3, r3
 8014ad0:	4313      	orrs	r3, r2
 8014ad2:	b25b      	sxtb	r3, r3
 8014ad4:	b2db      	uxtb	r3, r3
 8014ad6:	697a      	ldr	r2, [r7, #20]
 8014ad8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	2201      	movs	r2, #1
 8014ade:	70da      	strb	r2, [r3, #3]
			break;
 8014ae0:	e074      	b.n	8014bcc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	899b      	ldrh	r3, [r3, #12]
 8014aea:	085b      	lsrs	r3, r3, #1
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	4619      	mov	r1, r3
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8014af6:	4413      	add	r3, r2
 8014af8:	4619      	mov	r1, r3
 8014afa:	68f8      	ldr	r0, [r7, #12]
 8014afc:	f7ff fdbe 	bl	801467c <move_window>
 8014b00:	4603      	mov	r3, r0
 8014b02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014b04:	7ffb      	ldrb	r3, [r7, #31]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d15d      	bne.n	8014bc6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	005b      	lsls	r3, r3, #1
 8014b14:	68fa      	ldr	r2, [r7, #12]
 8014b16:	8992      	ldrh	r2, [r2, #12]
 8014b18:	fbb3 f0f2 	udiv	r0, r3, r2
 8014b1c:	fb00 f202 	mul.w	r2, r0, r2
 8014b20:	1a9b      	subs	r3, r3, r2
 8014b22:	440b      	add	r3, r1
 8014b24:	687a      	ldr	r2, [r7, #4]
 8014b26:	b292      	uxth	r2, r2
 8014b28:	4611      	mov	r1, r2
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7ff fc9d 	bl	801446a <st_word>
			fs->wflag = 1;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2201      	movs	r2, #1
 8014b34:	70da      	strb	r2, [r3, #3]
			break;
 8014b36:	e049      	b.n	8014bcc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	899b      	ldrh	r3, [r3, #12]
 8014b40:	089b      	lsrs	r3, r3, #2
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	4619      	mov	r1, r3
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b4c:	4413      	add	r3, r2
 8014b4e:	4619      	mov	r1, r3
 8014b50:	68f8      	ldr	r0, [r7, #12]
 8014b52:	f7ff fd93 	bl	801467c <move_window>
 8014b56:	4603      	mov	r3, r0
 8014b58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014b5a:	7ffb      	ldrb	r3, [r7, #31]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d134      	bne.n	8014bca <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	009b      	lsls	r3, r3, #2
 8014b70:	68fa      	ldr	r2, [r7, #12]
 8014b72:	8992      	ldrh	r2, [r2, #12]
 8014b74:	fbb3 f0f2 	udiv	r0, r3, r2
 8014b78:	fb00 f202 	mul.w	r2, r0, r2
 8014b7c:	1a9b      	subs	r3, r3, r2
 8014b7e:	440b      	add	r3, r1
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7ff fc4f 	bl	8014424 <ld_dword>
 8014b86:	4603      	mov	r3, r0
 8014b88:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014b8c:	4323      	orrs	r3, r4
 8014b8e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	009b      	lsls	r3, r3, #2
 8014b9a:	68fa      	ldr	r2, [r7, #12]
 8014b9c:	8992      	ldrh	r2, [r2, #12]
 8014b9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8014ba2:	fb00 f202 	mul.w	r2, r0, r2
 8014ba6:	1a9b      	subs	r3, r3, r2
 8014ba8:	440b      	add	r3, r1
 8014baa:	6879      	ldr	r1, [r7, #4]
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7ff fc77 	bl	80144a0 <st_dword>
			fs->wflag = 1;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	2201      	movs	r2, #1
 8014bb6:	70da      	strb	r2, [r3, #3]
			break;
 8014bb8:	e008      	b.n	8014bcc <put_fat+0x22e>
		}
	}
 8014bba:	bf00      	nop
 8014bbc:	e006      	b.n	8014bcc <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bbe:	bf00      	nop
 8014bc0:	e004      	b.n	8014bcc <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bc2:	bf00      	nop
 8014bc4:	e002      	b.n	8014bcc <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bc6:	bf00      	nop
 8014bc8:	e000      	b.n	8014bcc <put_fat+0x22e>
			if (res != FR_OK) break;
 8014bca:	bf00      	nop
	return res;
 8014bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3724      	adds	r7, #36	; 0x24
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd90      	pop	{r4, r7, pc}

08014bd6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014bd6:	b580      	push	{r7, lr}
 8014bd8:	b088      	sub	sp, #32
 8014bda:	af00      	add	r7, sp, #0
 8014bdc:	60f8      	str	r0, [r7, #12]
 8014bde:	60b9      	str	r1, [r7, #8]
 8014be0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014be2:	2300      	movs	r3, #0
 8014be4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d904      	bls.n	8014bfc <remove_chain+0x26>
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	69db      	ldr	r3, [r3, #28]
 8014bf6:	68ba      	ldr	r2, [r7, #8]
 8014bf8:	429a      	cmp	r2, r3
 8014bfa:	d301      	bcc.n	8014c00 <remove_chain+0x2a>
 8014bfc:	2302      	movs	r3, #2
 8014bfe:	e04b      	b.n	8014c98 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d00c      	beq.n	8014c20 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014c06:	f04f 32ff 	mov.w	r2, #4294967295
 8014c0a:	6879      	ldr	r1, [r7, #4]
 8014c0c:	69b8      	ldr	r0, [r7, #24]
 8014c0e:	f7ff fec6 	bl	801499e <put_fat>
 8014c12:	4603      	mov	r3, r0
 8014c14:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014c16:	7ffb      	ldrb	r3, [r7, #31]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d001      	beq.n	8014c20 <remove_chain+0x4a>
 8014c1c:	7ffb      	ldrb	r3, [r7, #31]
 8014c1e:	e03b      	b.n	8014c98 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014c20:	68b9      	ldr	r1, [r7, #8]
 8014c22:	68f8      	ldr	r0, [r7, #12]
 8014c24:	f7ff fde7 	bl	80147f6 <get_fat>
 8014c28:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d031      	beq.n	8014c94 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	2b01      	cmp	r3, #1
 8014c34:	d101      	bne.n	8014c3a <remove_chain+0x64>
 8014c36:	2302      	movs	r3, #2
 8014c38:	e02e      	b.n	8014c98 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c40:	d101      	bne.n	8014c46 <remove_chain+0x70>
 8014c42:	2301      	movs	r3, #1
 8014c44:	e028      	b.n	8014c98 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014c46:	2200      	movs	r2, #0
 8014c48:	68b9      	ldr	r1, [r7, #8]
 8014c4a:	69b8      	ldr	r0, [r7, #24]
 8014c4c:	f7ff fea7 	bl	801499e <put_fat>
 8014c50:	4603      	mov	r3, r0
 8014c52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014c54:	7ffb      	ldrb	r3, [r7, #31]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d001      	beq.n	8014c5e <remove_chain+0x88>
 8014c5a:	7ffb      	ldrb	r3, [r7, #31]
 8014c5c:	e01c      	b.n	8014c98 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014c5e:	69bb      	ldr	r3, [r7, #24]
 8014c60:	699a      	ldr	r2, [r3, #24]
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	69db      	ldr	r3, [r3, #28]
 8014c66:	3b02      	subs	r3, #2
 8014c68:	429a      	cmp	r2, r3
 8014c6a:	d20b      	bcs.n	8014c84 <remove_chain+0xae>
			fs->free_clst++;
 8014c6c:	69bb      	ldr	r3, [r7, #24]
 8014c6e:	699b      	ldr	r3, [r3, #24]
 8014c70:	1c5a      	adds	r2, r3, #1
 8014c72:	69bb      	ldr	r3, [r7, #24]
 8014c74:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8014c76:	69bb      	ldr	r3, [r7, #24]
 8014c78:	791b      	ldrb	r3, [r3, #4]
 8014c7a:	f043 0301 	orr.w	r3, r3, #1
 8014c7e:	b2da      	uxtb	r2, r3
 8014c80:	69bb      	ldr	r3, [r7, #24]
 8014c82:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014c84:	697b      	ldr	r3, [r7, #20]
 8014c86:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014c88:	69bb      	ldr	r3, [r7, #24]
 8014c8a:	69db      	ldr	r3, [r3, #28]
 8014c8c:	68ba      	ldr	r2, [r7, #8]
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d3c6      	bcc.n	8014c20 <remove_chain+0x4a>
 8014c92:	e000      	b.n	8014c96 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014c94:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014c96:	2300      	movs	r3, #0
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3720      	adds	r7, #32
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b088      	sub	sp, #32
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
 8014ca8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d10d      	bne.n	8014cd2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	695b      	ldr	r3, [r3, #20]
 8014cba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014cbc:	69bb      	ldr	r3, [r7, #24]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d004      	beq.n	8014ccc <create_chain+0x2c>
 8014cc2:	693b      	ldr	r3, [r7, #16]
 8014cc4:	69db      	ldr	r3, [r3, #28]
 8014cc6:	69ba      	ldr	r2, [r7, #24]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d31b      	bcc.n	8014d04 <create_chain+0x64>
 8014ccc:	2301      	movs	r3, #1
 8014cce:	61bb      	str	r3, [r7, #24]
 8014cd0:	e018      	b.n	8014d04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014cd2:	6839      	ldr	r1, [r7, #0]
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f7ff fd8e 	bl	80147f6 <get_fat>
 8014cda:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	2b01      	cmp	r3, #1
 8014ce0:	d801      	bhi.n	8014ce6 <create_chain+0x46>
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	e070      	b.n	8014dc8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cec:	d101      	bne.n	8014cf2 <create_chain+0x52>
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	e06a      	b.n	8014dc8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	69db      	ldr	r3, [r3, #28]
 8014cf6:	68fa      	ldr	r2, [r7, #12]
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	d201      	bcs.n	8014d00 <create_chain+0x60>
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	e063      	b.n	8014dc8 <create_chain+0x128>
		scl = clst;
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014d04:	69bb      	ldr	r3, [r7, #24]
 8014d06:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014d08:	69fb      	ldr	r3, [r7, #28]
 8014d0a:	3301      	adds	r3, #1
 8014d0c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	69db      	ldr	r3, [r3, #28]
 8014d12:	69fa      	ldr	r2, [r7, #28]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d307      	bcc.n	8014d28 <create_chain+0x88>
				ncl = 2;
 8014d18:	2302      	movs	r3, #2
 8014d1a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014d1c:	69fa      	ldr	r2, [r7, #28]
 8014d1e:	69bb      	ldr	r3, [r7, #24]
 8014d20:	429a      	cmp	r2, r3
 8014d22:	d901      	bls.n	8014d28 <create_chain+0x88>
 8014d24:	2300      	movs	r3, #0
 8014d26:	e04f      	b.n	8014dc8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014d28:	69f9      	ldr	r1, [r7, #28]
 8014d2a:	6878      	ldr	r0, [r7, #4]
 8014d2c:	f7ff fd63 	bl	80147f6 <get_fat>
 8014d30:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d00e      	beq.n	8014d56 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	2b01      	cmp	r3, #1
 8014d3c:	d003      	beq.n	8014d46 <create_chain+0xa6>
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d44:	d101      	bne.n	8014d4a <create_chain+0xaa>
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	e03e      	b.n	8014dc8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014d4a:	69fa      	ldr	r2, [r7, #28]
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	429a      	cmp	r2, r3
 8014d50:	d1da      	bne.n	8014d08 <create_chain+0x68>
 8014d52:	2300      	movs	r3, #0
 8014d54:	e038      	b.n	8014dc8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014d56:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014d58:	f04f 32ff 	mov.w	r2, #4294967295
 8014d5c:	69f9      	ldr	r1, [r7, #28]
 8014d5e:	6938      	ldr	r0, [r7, #16]
 8014d60:	f7ff fe1d 	bl	801499e <put_fat>
 8014d64:	4603      	mov	r3, r0
 8014d66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014d68:	7dfb      	ldrb	r3, [r7, #23]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d109      	bne.n	8014d82 <create_chain+0xe2>
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d006      	beq.n	8014d82 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014d74:	69fa      	ldr	r2, [r7, #28]
 8014d76:	6839      	ldr	r1, [r7, #0]
 8014d78:	6938      	ldr	r0, [r7, #16]
 8014d7a:	f7ff fe10 	bl	801499e <put_fat>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014d82:	7dfb      	ldrb	r3, [r7, #23]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d116      	bne.n	8014db6 <create_chain+0x116>
		fs->last_clst = ncl;
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	69fa      	ldr	r2, [r7, #28]
 8014d8c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014d8e:	693b      	ldr	r3, [r7, #16]
 8014d90:	699a      	ldr	r2, [r3, #24]
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	69db      	ldr	r3, [r3, #28]
 8014d96:	3b02      	subs	r3, #2
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d804      	bhi.n	8014da6 <create_chain+0x106>
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	699b      	ldr	r3, [r3, #24]
 8014da0:	1e5a      	subs	r2, r3, #1
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	791b      	ldrb	r3, [r3, #4]
 8014daa:	f043 0301 	orr.w	r3, r3, #1
 8014dae:	b2da      	uxtb	r2, r3
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	711a      	strb	r2, [r3, #4]
 8014db4:	e007      	b.n	8014dc6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014db6:	7dfb      	ldrb	r3, [r7, #23]
 8014db8:	2b01      	cmp	r3, #1
 8014dba:	d102      	bne.n	8014dc2 <create_chain+0x122>
 8014dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8014dc0:	e000      	b.n	8014dc4 <create_chain+0x124>
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014dc6:	69fb      	ldr	r3, [r7, #28]
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3720      	adds	r7, #32
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b087      	sub	sp, #28
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014de4:	3304      	adds	r3, #4
 8014de6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	899b      	ldrh	r3, [r3, #12]
 8014dec:	461a      	mov	r2, r3
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8014df4:	68fa      	ldr	r2, [r7, #12]
 8014df6:	8952      	ldrh	r2, [r2, #10]
 8014df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8014dfc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	1d1a      	adds	r2, r3, #4
 8014e02:	613a      	str	r2, [r7, #16]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d101      	bne.n	8014e12 <clmt_clust+0x42>
 8014e0e:	2300      	movs	r3, #0
 8014e10:	e010      	b.n	8014e34 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8014e12:	697a      	ldr	r2, [r7, #20]
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d307      	bcc.n	8014e2a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8014e1a:	697a      	ldr	r2, [r7, #20]
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	1ad3      	subs	r3, r2, r3
 8014e20:	617b      	str	r3, [r7, #20]
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	3304      	adds	r3, #4
 8014e26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014e28:	e7e9      	b.n	8014dfe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8014e2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	697b      	ldr	r3, [r7, #20]
 8014e32:	4413      	add	r3, r2
}
 8014e34:	4618      	mov	r0, r3
 8014e36:	371c      	adds	r7, #28
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3e:	4770      	bx	lr

08014e40 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b086      	sub	sp, #24
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014e56:	d204      	bcs.n	8014e62 <dir_sdi+0x22>
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	f003 031f 	and.w	r3, r3, #31
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d001      	beq.n	8014e66 <dir_sdi+0x26>
		return FR_INT_ERR;
 8014e62:	2302      	movs	r3, #2
 8014e64:	e071      	b.n	8014f4a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	683a      	ldr	r2, [r7, #0]
 8014e6a:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	689b      	ldr	r3, [r3, #8]
 8014e70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d106      	bne.n	8014e86 <dir_sdi+0x46>
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	781b      	ldrb	r3, [r3, #0]
 8014e7c:	2b02      	cmp	r3, #2
 8014e7e:	d902      	bls.n	8014e86 <dir_sdi+0x46>
		clst = fs->dirbase;
 8014e80:	693b      	ldr	r3, [r7, #16]
 8014e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d10c      	bne.n	8014ea6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	095b      	lsrs	r3, r3, #5
 8014e90:	693a      	ldr	r2, [r7, #16]
 8014e92:	8912      	ldrh	r2, [r2, #8]
 8014e94:	4293      	cmp	r3, r2
 8014e96:	d301      	bcc.n	8014e9c <dir_sdi+0x5c>
 8014e98:	2302      	movs	r3, #2
 8014e9a:	e056      	b.n	8014f4a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8014e9c:	693b      	ldr	r3, [r7, #16]
 8014e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	619a      	str	r2, [r3, #24]
 8014ea4:	e02d      	b.n	8014f02 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	895b      	ldrh	r3, [r3, #10]
 8014eaa:	461a      	mov	r2, r3
 8014eac:	693b      	ldr	r3, [r7, #16]
 8014eae:	899b      	ldrh	r3, [r3, #12]
 8014eb0:	fb02 f303 	mul.w	r3, r2, r3
 8014eb4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014eb6:	e019      	b.n	8014eec <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6979      	ldr	r1, [r7, #20]
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f7ff fc9a 	bl	80147f6 <get_fat>
 8014ec2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eca:	d101      	bne.n	8014ed0 <dir_sdi+0x90>
 8014ecc:	2301      	movs	r3, #1
 8014ece:	e03c      	b.n	8014f4a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	2b01      	cmp	r3, #1
 8014ed4:	d904      	bls.n	8014ee0 <dir_sdi+0xa0>
 8014ed6:	693b      	ldr	r3, [r7, #16]
 8014ed8:	69db      	ldr	r3, [r3, #28]
 8014eda:	697a      	ldr	r2, [r7, #20]
 8014edc:	429a      	cmp	r2, r3
 8014ede:	d301      	bcc.n	8014ee4 <dir_sdi+0xa4>
 8014ee0:	2302      	movs	r3, #2
 8014ee2:	e032      	b.n	8014f4a <dir_sdi+0x10a>
			ofs -= csz;
 8014ee4:	683a      	ldr	r2, [r7, #0]
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	1ad3      	subs	r3, r2, r3
 8014eea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014eec:	683a      	ldr	r2, [r7, #0]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	429a      	cmp	r2, r3
 8014ef2:	d2e1      	bcs.n	8014eb8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8014ef4:	6979      	ldr	r1, [r7, #20]
 8014ef6:	6938      	ldr	r0, [r7, #16]
 8014ef8:	f7ff fc5e 	bl	80147b8 <clust2sect>
 8014efc:	4602      	mov	r2, r0
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	697a      	ldr	r2, [r7, #20]
 8014f06:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	699b      	ldr	r3, [r3, #24]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d101      	bne.n	8014f14 <dir_sdi+0xd4>
 8014f10:	2302      	movs	r3, #2
 8014f12:	e01a      	b.n	8014f4a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	699a      	ldr	r2, [r3, #24]
 8014f18:	693b      	ldr	r3, [r7, #16]
 8014f1a:	899b      	ldrh	r3, [r3, #12]
 8014f1c:	4619      	mov	r1, r3
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f24:	441a      	add	r2, r3
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	899b      	ldrh	r3, [r3, #12]
 8014f34:	461a      	mov	r2, r3
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	fbb3 f0f2 	udiv	r0, r3, r2
 8014f3c:	fb00 f202 	mul.w	r2, r0, r2
 8014f40:	1a9b      	subs	r3, r3, r2
 8014f42:	18ca      	adds	r2, r1, r3
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8014f48:	2300      	movs	r3, #0
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3718      	adds	r7, #24
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}

08014f52 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8014f52:	b580      	push	{r7, lr}
 8014f54:	b086      	sub	sp, #24
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	6078      	str	r0, [r7, #4]
 8014f5a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	691b      	ldr	r3, [r3, #16]
 8014f66:	3320      	adds	r3, #32
 8014f68:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	699b      	ldr	r3, [r3, #24]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d003      	beq.n	8014f7a <dir_next+0x28>
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014f78:	d301      	bcc.n	8014f7e <dir_next+0x2c>
 8014f7a:	2304      	movs	r3, #4
 8014f7c:	e0bb      	b.n	80150f6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	899b      	ldrh	r3, [r3, #12]
 8014f82:	461a      	mov	r2, r3
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	fbb3 f1f2 	udiv	r1, r3, r2
 8014f8a:	fb01 f202 	mul.w	r2, r1, r2
 8014f8e:	1a9b      	subs	r3, r3, r2
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	f040 809d 	bne.w	80150d0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	699b      	ldr	r3, [r3, #24]
 8014f9a:	1c5a      	adds	r2, r3, #1
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	695b      	ldr	r3, [r3, #20]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d10b      	bne.n	8014fc0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	095b      	lsrs	r3, r3, #5
 8014fac:	68fa      	ldr	r2, [r7, #12]
 8014fae:	8912      	ldrh	r2, [r2, #8]
 8014fb0:	4293      	cmp	r3, r2
 8014fb2:	f0c0 808d 	bcc.w	80150d0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	619a      	str	r2, [r3, #24]
 8014fbc:	2304      	movs	r3, #4
 8014fbe:	e09a      	b.n	80150f6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	899b      	ldrh	r3, [r3, #12]
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8014fcc:	68fa      	ldr	r2, [r7, #12]
 8014fce:	8952      	ldrh	r2, [r2, #10]
 8014fd0:	3a01      	subs	r2, #1
 8014fd2:	4013      	ands	r3, r2
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d17b      	bne.n	80150d0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014fd8:	687a      	ldr	r2, [r7, #4]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	695b      	ldr	r3, [r3, #20]
 8014fde:	4619      	mov	r1, r3
 8014fe0:	4610      	mov	r0, r2
 8014fe2:	f7ff fc08 	bl	80147f6 <get_fat>
 8014fe6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	2b01      	cmp	r3, #1
 8014fec:	d801      	bhi.n	8014ff2 <dir_next+0xa0>
 8014fee:	2302      	movs	r3, #2
 8014ff0:	e081      	b.n	80150f6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014ff2:	697b      	ldr	r3, [r7, #20]
 8014ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ff8:	d101      	bne.n	8014ffe <dir_next+0xac>
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	e07b      	b.n	80150f6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	69db      	ldr	r3, [r3, #28]
 8015002:	697a      	ldr	r2, [r7, #20]
 8015004:	429a      	cmp	r2, r3
 8015006:	d359      	bcc.n	80150bc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d104      	bne.n	8015018 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	2200      	movs	r2, #0
 8015012:	619a      	str	r2, [r3, #24]
 8015014:	2304      	movs	r3, #4
 8015016:	e06e      	b.n	80150f6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015018:	687a      	ldr	r2, [r7, #4]
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	695b      	ldr	r3, [r3, #20]
 801501e:	4619      	mov	r1, r3
 8015020:	4610      	mov	r0, r2
 8015022:	f7ff fe3d 	bl	8014ca0 <create_chain>
 8015026:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015028:	697b      	ldr	r3, [r7, #20]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d101      	bne.n	8015032 <dir_next+0xe0>
 801502e:	2307      	movs	r3, #7
 8015030:	e061      	b.n	80150f6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	2b01      	cmp	r3, #1
 8015036:	d101      	bne.n	801503c <dir_next+0xea>
 8015038:	2302      	movs	r3, #2
 801503a:	e05c      	b.n	80150f6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015042:	d101      	bne.n	8015048 <dir_next+0xf6>
 8015044:	2301      	movs	r3, #1
 8015046:	e056      	b.n	80150f6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015048:	68f8      	ldr	r0, [r7, #12]
 801504a:	f7ff fad3 	bl	80145f4 <sync_window>
 801504e:	4603      	mov	r3, r0
 8015050:	2b00      	cmp	r3, #0
 8015052:	d001      	beq.n	8015058 <dir_next+0x106>
 8015054:	2301      	movs	r3, #1
 8015056:	e04e      	b.n	80150f6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	899b      	ldrh	r3, [r3, #12]
 8015062:	461a      	mov	r2, r3
 8015064:	2100      	movs	r1, #0
 8015066:	f7ff fa68 	bl	801453a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801506a:	2300      	movs	r3, #0
 801506c:	613b      	str	r3, [r7, #16]
 801506e:	6979      	ldr	r1, [r7, #20]
 8015070:	68f8      	ldr	r0, [r7, #12]
 8015072:	f7ff fba1 	bl	80147b8 <clust2sect>
 8015076:	4602      	mov	r2, r0
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	635a      	str	r2, [r3, #52]	; 0x34
 801507c:	e012      	b.n	80150a4 <dir_next+0x152>
						fs->wflag = 1;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	2201      	movs	r2, #1
 8015082:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015084:	68f8      	ldr	r0, [r7, #12]
 8015086:	f7ff fab5 	bl	80145f4 <sync_window>
 801508a:	4603      	mov	r3, r0
 801508c:	2b00      	cmp	r3, #0
 801508e:	d001      	beq.n	8015094 <dir_next+0x142>
 8015090:	2301      	movs	r3, #1
 8015092:	e030      	b.n	80150f6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	3301      	adds	r3, #1
 8015098:	613b      	str	r3, [r7, #16]
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801509e:	1c5a      	adds	r2, r3, #1
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	635a      	str	r2, [r3, #52]	; 0x34
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	895b      	ldrh	r3, [r3, #10]
 80150a8:	461a      	mov	r2, r3
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	4293      	cmp	r3, r2
 80150ae:	d3e6      	bcc.n	801507e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80150b4:	693b      	ldr	r3, [r7, #16]
 80150b6:	1ad2      	subs	r2, r2, r3
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	697a      	ldr	r2, [r7, #20]
 80150c0:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 80150c2:	6979      	ldr	r1, [r7, #20]
 80150c4:	68f8      	ldr	r0, [r7, #12]
 80150c6:	f7ff fb77 	bl	80147b8 <clust2sect>
 80150ca:	4602      	mov	r2, r0
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	68ba      	ldr	r2, [r7, #8]
 80150d4:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	899b      	ldrh	r3, [r3, #12]
 80150e0:	461a      	mov	r2, r3
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80150e8:	fb00 f202 	mul.w	r2, r0, r2
 80150ec:	1a9b      	subs	r3, r3, r2
 80150ee:	18ca      	adds	r2, r1, r3
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80150f4:	2300      	movs	r3, #0
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3718      	adds	r7, #24
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}

080150fe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80150fe:	b580      	push	{r7, lr}
 8015100:	b086      	sub	sp, #24
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
 8015106:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801510e:	2100      	movs	r1, #0
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f7ff fe95 	bl	8014e40 <dir_sdi>
 8015116:	4603      	mov	r3, r0
 8015118:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801511a:	7dfb      	ldrb	r3, [r7, #23]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d12b      	bne.n	8015178 <dir_alloc+0x7a>
		n = 0;
 8015120:	2300      	movs	r3, #0
 8015122:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	699b      	ldr	r3, [r3, #24]
 8015128:	4619      	mov	r1, r3
 801512a:	68f8      	ldr	r0, [r7, #12]
 801512c:	f7ff faa6 	bl	801467c <move_window>
 8015130:	4603      	mov	r3, r0
 8015132:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015134:	7dfb      	ldrb	r3, [r7, #23]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d11d      	bne.n	8015176 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	69db      	ldr	r3, [r3, #28]
 801513e:	781b      	ldrb	r3, [r3, #0]
 8015140:	2be5      	cmp	r3, #229	; 0xe5
 8015142:	d004      	beq.n	801514e <dir_alloc+0x50>
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	69db      	ldr	r3, [r3, #28]
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d107      	bne.n	801515e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	3301      	adds	r3, #1
 8015152:	613b      	str	r3, [r7, #16]
 8015154:	693a      	ldr	r2, [r7, #16]
 8015156:	683b      	ldr	r3, [r7, #0]
 8015158:	429a      	cmp	r2, r3
 801515a:	d102      	bne.n	8015162 <dir_alloc+0x64>
 801515c:	e00c      	b.n	8015178 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801515e:	2300      	movs	r3, #0
 8015160:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015162:	2101      	movs	r1, #1
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f7ff fef4 	bl	8014f52 <dir_next>
 801516a:	4603      	mov	r3, r0
 801516c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801516e:	7dfb      	ldrb	r3, [r7, #23]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d0d7      	beq.n	8015124 <dir_alloc+0x26>
 8015174:	e000      	b.n	8015178 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015176:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015178:	7dfb      	ldrb	r3, [r7, #23]
 801517a:	2b04      	cmp	r3, #4
 801517c:	d101      	bne.n	8015182 <dir_alloc+0x84>
 801517e:	2307      	movs	r3, #7
 8015180:	75fb      	strb	r3, [r7, #23]
	return res;
 8015182:	7dfb      	ldrb	r3, [r7, #23]
}
 8015184:	4618      	mov	r0, r3
 8015186:	3718      	adds	r7, #24
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}

0801518c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b084      	sub	sp, #16
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015196:	683b      	ldr	r3, [r7, #0]
 8015198:	331a      	adds	r3, #26
 801519a:	4618      	mov	r0, r3
 801519c:	f7ff f92a 	bl	80143f4 <ld_word>
 80151a0:	4603      	mov	r3, r0
 80151a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	781b      	ldrb	r3, [r3, #0]
 80151a8:	2b03      	cmp	r3, #3
 80151aa:	d109      	bne.n	80151c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	3314      	adds	r3, #20
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7ff f91f 	bl	80143f4 <ld_word>
 80151b6:	4603      	mov	r3, r0
 80151b8:	041b      	lsls	r3, r3, #16
 80151ba:	68fa      	ldr	r2, [r7, #12]
 80151bc:	4313      	orrs	r3, r2
 80151be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80151c0:	68fb      	ldr	r3, [r7, #12]
}
 80151c2:	4618      	mov	r0, r3
 80151c4:	3710      	adds	r7, #16
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bd80      	pop	{r7, pc}

080151ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80151ca:	b580      	push	{r7, lr}
 80151cc:	b084      	sub	sp, #16
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	60f8      	str	r0, [r7, #12]
 80151d2:	60b9      	str	r1, [r7, #8]
 80151d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80151d6:	68bb      	ldr	r3, [r7, #8]
 80151d8:	331a      	adds	r3, #26
 80151da:	687a      	ldr	r2, [r7, #4]
 80151dc:	b292      	uxth	r2, r2
 80151de:	4611      	mov	r1, r2
 80151e0:	4618      	mov	r0, r3
 80151e2:	f7ff f942 	bl	801446a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	781b      	ldrb	r3, [r3, #0]
 80151ea:	2b03      	cmp	r3, #3
 80151ec:	d109      	bne.n	8015202 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80151ee:	68bb      	ldr	r3, [r7, #8]
 80151f0:	f103 0214 	add.w	r2, r3, #20
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	0c1b      	lsrs	r3, r3, #16
 80151f8:	b29b      	uxth	r3, r3
 80151fa:	4619      	mov	r1, r3
 80151fc:	4610      	mov	r0, r2
 80151fe:	f7ff f934 	bl	801446a <st_word>
	}
}
 8015202:	bf00      	nop
 8015204:	3710      	adds	r7, #16
 8015206:	46bd      	mov	sp, r7
 8015208:	bd80      	pop	{r7, pc}
	...

0801520c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801520c:	b590      	push	{r4, r7, lr}
 801520e:	b087      	sub	sp, #28
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
 8015214:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8015216:	683b      	ldr	r3, [r7, #0]
 8015218:	331a      	adds	r3, #26
 801521a:	4618      	mov	r0, r3
 801521c:	f7ff f8ea 	bl	80143f4 <ld_word>
 8015220:	4603      	mov	r3, r0
 8015222:	2b00      	cmp	r3, #0
 8015224:	d001      	beq.n	801522a <cmp_lfn+0x1e>
 8015226:	2300      	movs	r3, #0
 8015228:	e059      	b.n	80152de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	781b      	ldrb	r3, [r3, #0]
 801522e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015232:	1e5a      	subs	r2, r3, #1
 8015234:	4613      	mov	r3, r2
 8015236:	005b      	lsls	r3, r3, #1
 8015238:	4413      	add	r3, r2
 801523a:	009b      	lsls	r3, r3, #2
 801523c:	4413      	add	r3, r2
 801523e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015240:	2301      	movs	r3, #1
 8015242:	81fb      	strh	r3, [r7, #14]
 8015244:	2300      	movs	r3, #0
 8015246:	613b      	str	r3, [r7, #16]
 8015248:	e033      	b.n	80152b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801524a:	4a27      	ldr	r2, [pc, #156]	; (80152e8 <cmp_lfn+0xdc>)
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	4413      	add	r3, r2
 8015250:	781b      	ldrb	r3, [r3, #0]
 8015252:	461a      	mov	r2, r3
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	4413      	add	r3, r2
 8015258:	4618      	mov	r0, r3
 801525a:	f7ff f8cb 	bl	80143f4 <ld_word>
 801525e:	4603      	mov	r3, r0
 8015260:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015262:	89fb      	ldrh	r3, [r7, #14]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d01a      	beq.n	801529e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	2bfe      	cmp	r3, #254	; 0xfe
 801526c:	d812      	bhi.n	8015294 <cmp_lfn+0x88>
 801526e:	89bb      	ldrh	r3, [r7, #12]
 8015270:	4618      	mov	r0, r3
 8015272:	f001 feb3 	bl	8016fdc <ff_wtoupper>
 8015276:	4603      	mov	r3, r0
 8015278:	461c      	mov	r4, r3
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	1c5a      	adds	r2, r3, #1
 801527e:	617a      	str	r2, [r7, #20]
 8015280:	005b      	lsls	r3, r3, #1
 8015282:	687a      	ldr	r2, [r7, #4]
 8015284:	4413      	add	r3, r2
 8015286:	881b      	ldrh	r3, [r3, #0]
 8015288:	4618      	mov	r0, r3
 801528a:	f001 fea7 	bl	8016fdc <ff_wtoupper>
 801528e:	4603      	mov	r3, r0
 8015290:	429c      	cmp	r4, r3
 8015292:	d001      	beq.n	8015298 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8015294:	2300      	movs	r3, #0
 8015296:	e022      	b.n	80152de <cmp_lfn+0xd2>
			}
			wc = uc;
 8015298:	89bb      	ldrh	r3, [r7, #12]
 801529a:	81fb      	strh	r3, [r7, #14]
 801529c:	e006      	b.n	80152ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801529e:	89bb      	ldrh	r3, [r7, #12]
 80152a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80152a4:	4293      	cmp	r3, r2
 80152a6:	d001      	beq.n	80152ac <cmp_lfn+0xa0>
 80152a8:	2300      	movs	r3, #0
 80152aa:	e018      	b.n	80152de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	3301      	adds	r3, #1
 80152b0:	613b      	str	r3, [r7, #16]
 80152b2:	693b      	ldr	r3, [r7, #16]
 80152b4:	2b0c      	cmp	r3, #12
 80152b6:	d9c8      	bls.n	801524a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d00b      	beq.n	80152dc <cmp_lfn+0xd0>
 80152c4:	89fb      	ldrh	r3, [r7, #14]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d008      	beq.n	80152dc <cmp_lfn+0xd0>
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	005b      	lsls	r3, r3, #1
 80152ce:	687a      	ldr	r2, [r7, #4]
 80152d0:	4413      	add	r3, r2
 80152d2:	881b      	ldrh	r3, [r3, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d001      	beq.n	80152dc <cmp_lfn+0xd0>
 80152d8:	2300      	movs	r3, #0
 80152da:	e000      	b.n	80152de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80152dc:	2301      	movs	r3, #1
}
 80152de:	4618      	mov	r0, r3
 80152e0:	371c      	adds	r7, #28
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd90      	pop	{r4, r7, pc}
 80152e6:	bf00      	nop
 80152e8:	08018688 	.word	0x08018688

080152ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b088      	sub	sp, #32
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	60f8      	str	r0, [r7, #12]
 80152f4:	60b9      	str	r1, [r7, #8]
 80152f6:	4611      	mov	r1, r2
 80152f8:	461a      	mov	r2, r3
 80152fa:	460b      	mov	r3, r1
 80152fc:	71fb      	strb	r3, [r7, #7]
 80152fe:	4613      	mov	r3, r2
 8015300:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	330d      	adds	r3, #13
 8015306:	79ba      	ldrb	r2, [r7, #6]
 8015308:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801530a:	68bb      	ldr	r3, [r7, #8]
 801530c:	330b      	adds	r3, #11
 801530e:	220f      	movs	r2, #15
 8015310:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	330c      	adds	r3, #12
 8015316:	2200      	movs	r2, #0
 8015318:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	331a      	adds	r3, #26
 801531e:	2100      	movs	r1, #0
 8015320:	4618      	mov	r0, r3
 8015322:	f7ff f8a2 	bl	801446a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015326:	79fb      	ldrb	r3, [r7, #7]
 8015328:	1e5a      	subs	r2, r3, #1
 801532a:	4613      	mov	r3, r2
 801532c:	005b      	lsls	r3, r3, #1
 801532e:	4413      	add	r3, r2
 8015330:	009b      	lsls	r3, r3, #2
 8015332:	4413      	add	r3, r2
 8015334:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8015336:	2300      	movs	r3, #0
 8015338:	82fb      	strh	r3, [r7, #22]
 801533a:	2300      	movs	r3, #0
 801533c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801533e:	8afb      	ldrh	r3, [r7, #22]
 8015340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015344:	4293      	cmp	r3, r2
 8015346:	d007      	beq.n	8015358 <put_lfn+0x6c>
 8015348:	69fb      	ldr	r3, [r7, #28]
 801534a:	1c5a      	adds	r2, r3, #1
 801534c:	61fa      	str	r2, [r7, #28]
 801534e:	005b      	lsls	r3, r3, #1
 8015350:	68fa      	ldr	r2, [r7, #12]
 8015352:	4413      	add	r3, r2
 8015354:	881b      	ldrh	r3, [r3, #0]
 8015356:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015358:	4a17      	ldr	r2, [pc, #92]	; (80153b8 <put_lfn+0xcc>)
 801535a:	69bb      	ldr	r3, [r7, #24]
 801535c:	4413      	add	r3, r2
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	461a      	mov	r2, r3
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	4413      	add	r3, r2
 8015366:	8afa      	ldrh	r2, [r7, #22]
 8015368:	4611      	mov	r1, r2
 801536a:	4618      	mov	r0, r3
 801536c:	f7ff f87d 	bl	801446a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015370:	8afb      	ldrh	r3, [r7, #22]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d102      	bne.n	801537c <put_lfn+0x90>
 8015376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801537a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801537c:	69bb      	ldr	r3, [r7, #24]
 801537e:	3301      	adds	r3, #1
 8015380:	61bb      	str	r3, [r7, #24]
 8015382:	69bb      	ldr	r3, [r7, #24]
 8015384:	2b0c      	cmp	r3, #12
 8015386:	d9da      	bls.n	801533e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015388:	8afb      	ldrh	r3, [r7, #22]
 801538a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801538e:	4293      	cmp	r3, r2
 8015390:	d006      	beq.n	80153a0 <put_lfn+0xb4>
 8015392:	69fb      	ldr	r3, [r7, #28]
 8015394:	005b      	lsls	r3, r3, #1
 8015396:	68fa      	ldr	r2, [r7, #12]
 8015398:	4413      	add	r3, r2
 801539a:	881b      	ldrh	r3, [r3, #0]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d103      	bne.n	80153a8 <put_lfn+0xbc>
 80153a0:	79fb      	ldrb	r3, [r7, #7]
 80153a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	79fa      	ldrb	r2, [r7, #7]
 80153ac:	701a      	strb	r2, [r3, #0]
}
 80153ae:	bf00      	nop
 80153b0:	3720      	adds	r7, #32
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	08018688 	.word	0x08018688

080153bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b08c      	sub	sp, #48	; 0x30
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	60f8      	str	r0, [r7, #12]
 80153c4:	60b9      	str	r1, [r7, #8]
 80153c6:	607a      	str	r2, [r7, #4]
 80153c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80153ca:	220b      	movs	r2, #11
 80153cc:	68b9      	ldr	r1, [r7, #8]
 80153ce:	68f8      	ldr	r0, [r7, #12]
 80153d0:	f7ff f892 	bl	80144f8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	2b05      	cmp	r3, #5
 80153d8:	d92b      	bls.n	8015432 <gen_numname+0x76>
		sr = seq;
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80153de:	e022      	b.n	8015426 <gen_numname+0x6a>
			wc = *lfn++;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	1c9a      	adds	r2, r3, #2
 80153e4:	607a      	str	r2, [r7, #4]
 80153e6:	881b      	ldrh	r3, [r3, #0]
 80153e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80153ea:	2300      	movs	r3, #0
 80153ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80153ee:	e017      	b.n	8015420 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80153f0:	69fb      	ldr	r3, [r7, #28]
 80153f2:	005a      	lsls	r2, r3, #1
 80153f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80153f6:	f003 0301 	and.w	r3, r3, #1
 80153fa:	4413      	add	r3, r2
 80153fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80153fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015400:	085b      	lsrs	r3, r3, #1
 8015402:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801540a:	2b00      	cmp	r3, #0
 801540c:	d005      	beq.n	801541a <gen_numname+0x5e>
 801540e:	69fb      	ldr	r3, [r7, #28]
 8015410:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8015414:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8015418:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801541c:	3301      	adds	r3, #1
 801541e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015422:	2b0f      	cmp	r3, #15
 8015424:	d9e4      	bls.n	80153f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	881b      	ldrh	r3, [r3, #0]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d1d8      	bne.n	80153e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801542e:	69fb      	ldr	r3, [r7, #28]
 8015430:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8015432:	2307      	movs	r3, #7
 8015434:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	b2db      	uxtb	r3, r3
 801543a:	f003 030f 	and.w	r3, r3, #15
 801543e:	b2db      	uxtb	r3, r3
 8015440:	3330      	adds	r3, #48	; 0x30
 8015442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8015446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801544a:	2b39      	cmp	r3, #57	; 0x39
 801544c:	d904      	bls.n	8015458 <gen_numname+0x9c>
 801544e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015452:	3307      	adds	r3, #7
 8015454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8015458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801545a:	1e5a      	subs	r2, r3, #1
 801545c:	62ba      	str	r2, [r7, #40]	; 0x28
 801545e:	3330      	adds	r3, #48	; 0x30
 8015460:	443b      	add	r3, r7
 8015462:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8015466:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	091b      	lsrs	r3, r3, #4
 801546e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d1df      	bne.n	8015436 <gen_numname+0x7a>
	ns[i] = '~';
 8015476:	f107 0214 	add.w	r2, r7, #20
 801547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801547c:	4413      	add	r3, r2
 801547e:	227e      	movs	r2, #126	; 0x7e
 8015480:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015482:	2300      	movs	r3, #0
 8015484:	627b      	str	r3, [r7, #36]	; 0x24
 8015486:	e002      	b.n	801548e <gen_numname+0xd2>
 8015488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548a:	3301      	adds	r3, #1
 801548c:	627b      	str	r3, [r7, #36]	; 0x24
 801548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015492:	429a      	cmp	r2, r3
 8015494:	d205      	bcs.n	80154a2 <gen_numname+0xe6>
 8015496:	68fa      	ldr	r2, [r7, #12]
 8015498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549a:	4413      	add	r3, r2
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	2b20      	cmp	r3, #32
 80154a0:	d1f2      	bne.n	8015488 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80154a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154a4:	2b07      	cmp	r3, #7
 80154a6:	d807      	bhi.n	80154b8 <gen_numname+0xfc>
 80154a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154aa:	1c5a      	adds	r2, r3, #1
 80154ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80154ae:	3330      	adds	r3, #48	; 0x30
 80154b0:	443b      	add	r3, r7
 80154b2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80154b6:	e000      	b.n	80154ba <gen_numname+0xfe>
 80154b8:	2120      	movs	r1, #32
 80154ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154bc:	1c5a      	adds	r2, r3, #1
 80154be:	627a      	str	r2, [r7, #36]	; 0x24
 80154c0:	68fa      	ldr	r2, [r7, #12]
 80154c2:	4413      	add	r3, r2
 80154c4:	460a      	mov	r2, r1
 80154c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80154c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ca:	2b07      	cmp	r3, #7
 80154cc:	d9e9      	bls.n	80154a2 <gen_numname+0xe6>
}
 80154ce:	bf00      	nop
 80154d0:	bf00      	nop
 80154d2:	3730      	adds	r7, #48	; 0x30
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}

080154d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80154d8:	b480      	push	{r7}
 80154da:	b085      	sub	sp, #20
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80154e0:	2300      	movs	r3, #0
 80154e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80154e4:	230b      	movs	r3, #11
 80154e6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80154e8:	7bfb      	ldrb	r3, [r7, #15]
 80154ea:	b2da      	uxtb	r2, r3
 80154ec:	0852      	lsrs	r2, r2, #1
 80154ee:	01db      	lsls	r3, r3, #7
 80154f0:	4313      	orrs	r3, r2
 80154f2:	b2da      	uxtb	r2, r3
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	1c59      	adds	r1, r3, #1
 80154f8:	6079      	str	r1, [r7, #4]
 80154fa:	781b      	ldrb	r3, [r3, #0]
 80154fc:	4413      	add	r3, r2
 80154fe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	3b01      	subs	r3, #1
 8015504:	60bb      	str	r3, [r7, #8]
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d1ed      	bne.n	80154e8 <sum_sfn+0x10>
	return sum;
 801550c:	7bfb      	ldrb	r3, [r7, #15]
}
 801550e:	4618      	mov	r0, r3
 8015510:	3714      	adds	r7, #20
 8015512:	46bd      	mov	sp, r7
 8015514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015518:	4770      	bx	lr

0801551a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801551a:	b580      	push	{r7, lr}
 801551c:	b086      	sub	sp, #24
 801551e:	af00      	add	r7, sp, #0
 8015520:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015528:	2100      	movs	r1, #0
 801552a:	6878      	ldr	r0, [r7, #4]
 801552c:	f7ff fc88 	bl	8014e40 <dir_sdi>
 8015530:	4603      	mov	r3, r0
 8015532:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015534:	7dfb      	ldrb	r3, [r7, #23]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d001      	beq.n	801553e <dir_find+0x24>
 801553a:	7dfb      	ldrb	r3, [r7, #23]
 801553c:	e0a9      	b.n	8015692 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801553e:	23ff      	movs	r3, #255	; 0xff
 8015540:	753b      	strb	r3, [r7, #20]
 8015542:	7d3b      	ldrb	r3, [r7, #20]
 8015544:	757b      	strb	r3, [r7, #21]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	f04f 32ff 	mov.w	r2, #4294967295
 801554c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	699b      	ldr	r3, [r3, #24]
 8015552:	4619      	mov	r1, r3
 8015554:	6938      	ldr	r0, [r7, #16]
 8015556:	f7ff f891 	bl	801467c <move_window>
 801555a:	4603      	mov	r3, r0
 801555c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801555e:	7dfb      	ldrb	r3, [r7, #23]
 8015560:	2b00      	cmp	r3, #0
 8015562:	f040 8090 	bne.w	8015686 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	69db      	ldr	r3, [r3, #28]
 801556a:	781b      	ldrb	r3, [r3, #0]
 801556c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801556e:	7dbb      	ldrb	r3, [r7, #22]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d102      	bne.n	801557a <dir_find+0x60>
 8015574:	2304      	movs	r3, #4
 8015576:	75fb      	strb	r3, [r7, #23]
 8015578:	e08a      	b.n	8015690 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	69db      	ldr	r3, [r3, #28]
 801557e:	330b      	adds	r3, #11
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015586:	73fb      	strb	r3, [r7, #15]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	7bfa      	ldrb	r2, [r7, #15]
 801558c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801558e:	7dbb      	ldrb	r3, [r7, #22]
 8015590:	2be5      	cmp	r3, #229	; 0xe5
 8015592:	d007      	beq.n	80155a4 <dir_find+0x8a>
 8015594:	7bfb      	ldrb	r3, [r7, #15]
 8015596:	f003 0308 	and.w	r3, r3, #8
 801559a:	2b00      	cmp	r3, #0
 801559c:	d009      	beq.n	80155b2 <dir_find+0x98>
 801559e:	7bfb      	ldrb	r3, [r7, #15]
 80155a0:	2b0f      	cmp	r3, #15
 80155a2:	d006      	beq.n	80155b2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80155a4:	23ff      	movs	r3, #255	; 0xff
 80155a6:	757b      	strb	r3, [r7, #21]
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	f04f 32ff 	mov.w	r2, #4294967295
 80155ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80155b0:	e05e      	b.n	8015670 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80155b2:	7bfb      	ldrb	r3, [r7, #15]
 80155b4:	2b0f      	cmp	r3, #15
 80155b6:	d136      	bne.n	8015626 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80155be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d154      	bne.n	8015670 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80155c6:	7dbb      	ldrb	r3, [r7, #22]
 80155c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d00d      	beq.n	80155ec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	69db      	ldr	r3, [r3, #28]
 80155d4:	7b5b      	ldrb	r3, [r3, #13]
 80155d6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80155d8:	7dbb      	ldrb	r3, [r7, #22]
 80155da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80155de:	75bb      	strb	r3, [r7, #22]
 80155e0:	7dbb      	ldrb	r3, [r7, #22]
 80155e2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	691a      	ldr	r2, [r3, #16]
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80155ec:	7dba      	ldrb	r2, [r7, #22]
 80155ee:	7d7b      	ldrb	r3, [r7, #21]
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d115      	bne.n	8015620 <dir_find+0x106>
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	69db      	ldr	r3, [r3, #28]
 80155f8:	330d      	adds	r3, #13
 80155fa:	781b      	ldrb	r3, [r3, #0]
 80155fc:	7d3a      	ldrb	r2, [r7, #20]
 80155fe:	429a      	cmp	r2, r3
 8015600:	d10e      	bne.n	8015620 <dir_find+0x106>
 8015602:	693b      	ldr	r3, [r7, #16]
 8015604:	691a      	ldr	r2, [r3, #16]
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	69db      	ldr	r3, [r3, #28]
 801560a:	4619      	mov	r1, r3
 801560c:	4610      	mov	r0, r2
 801560e:	f7ff fdfd 	bl	801520c <cmp_lfn>
 8015612:	4603      	mov	r3, r0
 8015614:	2b00      	cmp	r3, #0
 8015616:	d003      	beq.n	8015620 <dir_find+0x106>
 8015618:	7d7b      	ldrb	r3, [r7, #21]
 801561a:	3b01      	subs	r3, #1
 801561c:	b2db      	uxtb	r3, r3
 801561e:	e000      	b.n	8015622 <dir_find+0x108>
 8015620:	23ff      	movs	r3, #255	; 0xff
 8015622:	757b      	strb	r3, [r7, #21]
 8015624:	e024      	b.n	8015670 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015626:	7d7b      	ldrb	r3, [r7, #21]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d109      	bne.n	8015640 <dir_find+0x126>
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	69db      	ldr	r3, [r3, #28]
 8015630:	4618      	mov	r0, r3
 8015632:	f7ff ff51 	bl	80154d8 <sum_sfn>
 8015636:	4603      	mov	r3, r0
 8015638:	461a      	mov	r2, r3
 801563a:	7d3b      	ldrb	r3, [r7, #20]
 801563c:	4293      	cmp	r3, r2
 801563e:	d024      	beq.n	801568a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015646:	f003 0301 	and.w	r3, r3, #1
 801564a:	2b00      	cmp	r3, #0
 801564c:	d10a      	bne.n	8015664 <dir_find+0x14a>
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	69d8      	ldr	r0, [r3, #28]
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	3320      	adds	r3, #32
 8015656:	220b      	movs	r2, #11
 8015658:	4619      	mov	r1, r3
 801565a:	f7fe ff89 	bl	8014570 <mem_cmp>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	d014      	beq.n	801568e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015664:	23ff      	movs	r3, #255	; 0xff
 8015666:	757b      	strb	r3, [r7, #21]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f04f 32ff 	mov.w	r2, #4294967295
 801566e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015670:	2100      	movs	r1, #0
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	f7ff fc6d 	bl	8014f52 <dir_next>
 8015678:	4603      	mov	r3, r0
 801567a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801567c:	7dfb      	ldrb	r3, [r7, #23]
 801567e:	2b00      	cmp	r3, #0
 8015680:	f43f af65 	beq.w	801554e <dir_find+0x34>
 8015684:	e004      	b.n	8015690 <dir_find+0x176>
		if (res != FR_OK) break;
 8015686:	bf00      	nop
 8015688:	e002      	b.n	8015690 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801568a:	bf00      	nop
 801568c:	e000      	b.n	8015690 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801568e:	bf00      	nop

	return res;
 8015690:	7dfb      	ldrb	r3, [r7, #23]
}
 8015692:	4618      	mov	r0, r3
 8015694:	3718      	adds	r7, #24
 8015696:	46bd      	mov	sp, r7
 8015698:	bd80      	pop	{r7, pc}
	...

0801569c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b08c      	sub	sp, #48	; 0x30
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80156b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d001      	beq.n	80156bc <dir_register+0x20>
 80156b8:	2306      	movs	r3, #6
 80156ba:	e0e0      	b.n	801587e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80156bc:	2300      	movs	r3, #0
 80156be:	627b      	str	r3, [r7, #36]	; 0x24
 80156c0:	e002      	b.n	80156c8 <dir_register+0x2c>
 80156c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c4:	3301      	adds	r3, #1
 80156c6:	627b      	str	r3, [r7, #36]	; 0x24
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	691a      	ldr	r2, [r3, #16]
 80156cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ce:	005b      	lsls	r3, r3, #1
 80156d0:	4413      	add	r3, r2
 80156d2:	881b      	ldrh	r3, [r3, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d1f4      	bne.n	80156c2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f103 0120 	add.w	r1, r3, #32
 80156de:	f107 030c 	add.w	r3, r7, #12
 80156e2:	220c      	movs	r2, #12
 80156e4:	4618      	mov	r0, r3
 80156e6:	f7fe ff07 	bl	80144f8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80156ea:	7dfb      	ldrb	r3, [r7, #23]
 80156ec:	f003 0301 	and.w	r3, r3, #1
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d032      	beq.n	801575a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2240      	movs	r2, #64	; 0x40
 80156f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 80156fc:	2301      	movs	r3, #1
 80156fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8015700:	e016      	b.n	8015730 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f103 0020 	add.w	r0, r3, #32
 8015708:	69fb      	ldr	r3, [r7, #28]
 801570a:	691a      	ldr	r2, [r3, #16]
 801570c:	f107 010c 	add.w	r1, r7, #12
 8015710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015712:	f7ff fe53 	bl	80153bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f7ff feff 	bl	801551a <dir_find>
 801571c:	4603      	mov	r3, r0
 801571e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8015722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015726:	2b00      	cmp	r3, #0
 8015728:	d106      	bne.n	8015738 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801572c:	3301      	adds	r3, #1
 801572e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015732:	2b63      	cmp	r3, #99	; 0x63
 8015734:	d9e5      	bls.n	8015702 <dir_register+0x66>
 8015736:	e000      	b.n	801573a <dir_register+0x9e>
			if (res != FR_OK) break;
 8015738:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573c:	2b64      	cmp	r3, #100	; 0x64
 801573e:	d101      	bne.n	8015744 <dir_register+0xa8>
 8015740:	2307      	movs	r3, #7
 8015742:	e09c      	b.n	801587e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015748:	2b04      	cmp	r3, #4
 801574a:	d002      	beq.n	8015752 <dir_register+0xb6>
 801574c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015750:	e095      	b.n	801587e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015752:	7dfa      	ldrb	r2, [r7, #23]
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801575a:	7dfb      	ldrb	r3, [r7, #23]
 801575c:	f003 0302 	and.w	r3, r3, #2
 8015760:	2b00      	cmp	r3, #0
 8015762:	d007      	beq.n	8015774 <dir_register+0xd8>
 8015764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015766:	330c      	adds	r3, #12
 8015768:	4a47      	ldr	r2, [pc, #284]	; (8015888 <dir_register+0x1ec>)
 801576a:	fba2 2303 	umull	r2, r3, r2, r3
 801576e:	089b      	lsrs	r3, r3, #2
 8015770:	3301      	adds	r3, #1
 8015772:	e000      	b.n	8015776 <dir_register+0xda>
 8015774:	2301      	movs	r3, #1
 8015776:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015778:	6a39      	ldr	r1, [r7, #32]
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f7ff fcbf 	bl	80150fe <dir_alloc>
 8015780:	4603      	mov	r3, r0
 8015782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801578a:	2b00      	cmp	r3, #0
 801578c:	d148      	bne.n	8015820 <dir_register+0x184>
 801578e:	6a3b      	ldr	r3, [r7, #32]
 8015790:	3b01      	subs	r3, #1
 8015792:	623b      	str	r3, [r7, #32]
 8015794:	6a3b      	ldr	r3, [r7, #32]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d042      	beq.n	8015820 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	691a      	ldr	r2, [r3, #16]
 801579e:	6a3b      	ldr	r3, [r7, #32]
 80157a0:	015b      	lsls	r3, r3, #5
 80157a2:	1ad3      	subs	r3, r2, r3
 80157a4:	4619      	mov	r1, r3
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f7ff fb4a 	bl	8014e40 <dir_sdi>
 80157ac:	4603      	mov	r3, r0
 80157ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80157b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d132      	bne.n	8015820 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	3320      	adds	r3, #32
 80157be:	4618      	mov	r0, r3
 80157c0:	f7ff fe8a 	bl	80154d8 <sum_sfn>
 80157c4:	4603      	mov	r3, r0
 80157c6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	699b      	ldr	r3, [r3, #24]
 80157cc:	4619      	mov	r1, r3
 80157ce:	69f8      	ldr	r0, [r7, #28]
 80157d0:	f7fe ff54 	bl	801467c <move_window>
 80157d4:	4603      	mov	r3, r0
 80157d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80157da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d11d      	bne.n	801581e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	6918      	ldr	r0, [r3, #16]
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	69d9      	ldr	r1, [r3, #28]
 80157ea:	6a3b      	ldr	r3, [r7, #32]
 80157ec:	b2da      	uxtb	r2, r3
 80157ee:	7efb      	ldrb	r3, [r7, #27]
 80157f0:	f7ff fd7c 	bl	80152ec <put_lfn>
				fs->wflag = 1;
 80157f4:	69fb      	ldr	r3, [r7, #28]
 80157f6:	2201      	movs	r2, #1
 80157f8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80157fa:	2100      	movs	r1, #0
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f7ff fba8 	bl	8014f52 <dir_next>
 8015802:	4603      	mov	r3, r0
 8015804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801580c:	2b00      	cmp	r3, #0
 801580e:	d107      	bne.n	8015820 <dir_register+0x184>
 8015810:	6a3b      	ldr	r3, [r7, #32]
 8015812:	3b01      	subs	r3, #1
 8015814:	623b      	str	r3, [r7, #32]
 8015816:	6a3b      	ldr	r3, [r7, #32]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d1d5      	bne.n	80157c8 <dir_register+0x12c>
 801581c:	e000      	b.n	8015820 <dir_register+0x184>
				if (res != FR_OK) break;
 801581e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015824:	2b00      	cmp	r3, #0
 8015826:	d128      	bne.n	801587a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	699b      	ldr	r3, [r3, #24]
 801582c:	4619      	mov	r1, r3
 801582e:	69f8      	ldr	r0, [r7, #28]
 8015830:	f7fe ff24 	bl	801467c <move_window>
 8015834:	4603      	mov	r3, r0
 8015836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801583a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801583e:	2b00      	cmp	r3, #0
 8015840:	d11b      	bne.n	801587a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	69db      	ldr	r3, [r3, #28]
 8015846:	2220      	movs	r2, #32
 8015848:	2100      	movs	r1, #0
 801584a:	4618      	mov	r0, r3
 801584c:	f7fe fe75 	bl	801453a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	69d8      	ldr	r0, [r3, #28]
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	3320      	adds	r3, #32
 8015858:	220b      	movs	r2, #11
 801585a:	4619      	mov	r1, r3
 801585c:	f7fe fe4c 	bl	80144f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	69db      	ldr	r3, [r3, #28]
 801586a:	330c      	adds	r3, #12
 801586c:	f002 0218 	and.w	r2, r2, #24
 8015870:	b2d2      	uxtb	r2, r2
 8015872:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	2201      	movs	r2, #1
 8015878:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801587a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801587e:	4618      	mov	r0, r3
 8015880:	3730      	adds	r7, #48	; 0x30
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}
 8015886:	bf00      	nop
 8015888:	4ec4ec4f 	.word	0x4ec4ec4f

0801588c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b08a      	sub	sp, #40	; 0x28
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
 8015894:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	613b      	str	r3, [r7, #16]
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	691b      	ldr	r3, [r3, #16]
 80158a2:	60fb      	str	r3, [r7, #12]
 80158a4:	2300      	movs	r3, #0
 80158a6:	617b      	str	r3, [r7, #20]
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80158ac:	69bb      	ldr	r3, [r7, #24]
 80158ae:	1c5a      	adds	r2, r3, #1
 80158b0:	61ba      	str	r2, [r7, #24]
 80158b2:	693a      	ldr	r2, [r7, #16]
 80158b4:	4413      	add	r3, r2
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80158ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158bc:	2b1f      	cmp	r3, #31
 80158be:	d940      	bls.n	8015942 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80158c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158c2:	2b2f      	cmp	r3, #47	; 0x2f
 80158c4:	d006      	beq.n	80158d4 <create_name+0x48>
 80158c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158c8:	2b5c      	cmp	r3, #92	; 0x5c
 80158ca:	d110      	bne.n	80158ee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80158cc:	e002      	b.n	80158d4 <create_name+0x48>
 80158ce:	69bb      	ldr	r3, [r7, #24]
 80158d0:	3301      	adds	r3, #1
 80158d2:	61bb      	str	r3, [r7, #24]
 80158d4:	693a      	ldr	r2, [r7, #16]
 80158d6:	69bb      	ldr	r3, [r7, #24]
 80158d8:	4413      	add	r3, r2
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	2b2f      	cmp	r3, #47	; 0x2f
 80158de:	d0f6      	beq.n	80158ce <create_name+0x42>
 80158e0:	693a      	ldr	r2, [r7, #16]
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	4413      	add	r3, r2
 80158e6:	781b      	ldrb	r3, [r3, #0]
 80158e8:	2b5c      	cmp	r3, #92	; 0x5c
 80158ea:	d0f0      	beq.n	80158ce <create_name+0x42>
			break;
 80158ec:	e02a      	b.n	8015944 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80158ee:	697b      	ldr	r3, [r7, #20]
 80158f0:	2bfe      	cmp	r3, #254	; 0xfe
 80158f2:	d901      	bls.n	80158f8 <create_name+0x6c>
 80158f4:	2306      	movs	r3, #6
 80158f6:	e17d      	b.n	8015bf4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80158f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158fa:	b2db      	uxtb	r3, r3
 80158fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80158fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015900:	2101      	movs	r1, #1
 8015902:	4618      	mov	r0, r3
 8015904:	f001 fb2e 	bl	8016f64 <ff_convert>
 8015908:	4603      	mov	r3, r0
 801590a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801590c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801590e:	2b00      	cmp	r3, #0
 8015910:	d101      	bne.n	8015916 <create_name+0x8a>
 8015912:	2306      	movs	r3, #6
 8015914:	e16e      	b.n	8015bf4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8015916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015918:	2b7f      	cmp	r3, #127	; 0x7f
 801591a:	d809      	bhi.n	8015930 <create_name+0xa4>
 801591c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801591e:	4619      	mov	r1, r3
 8015920:	488d      	ldr	r0, [pc, #564]	; (8015b58 <create_name+0x2cc>)
 8015922:	f7fe fe4c 	bl	80145be <chk_chr>
 8015926:	4603      	mov	r3, r0
 8015928:	2b00      	cmp	r3, #0
 801592a:	d001      	beq.n	8015930 <create_name+0xa4>
 801592c:	2306      	movs	r3, #6
 801592e:	e161      	b.n	8015bf4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8015930:	697b      	ldr	r3, [r7, #20]
 8015932:	1c5a      	adds	r2, r3, #1
 8015934:	617a      	str	r2, [r7, #20]
 8015936:	005b      	lsls	r3, r3, #1
 8015938:	68fa      	ldr	r2, [r7, #12]
 801593a:	4413      	add	r3, r2
 801593c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801593e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8015940:	e7b4      	b.n	80158ac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8015942:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8015944:	693a      	ldr	r2, [r7, #16]
 8015946:	69bb      	ldr	r3, [r7, #24]
 8015948:	441a      	add	r2, r3
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801594e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015950:	2b1f      	cmp	r3, #31
 8015952:	d801      	bhi.n	8015958 <create_name+0xcc>
 8015954:	2304      	movs	r3, #4
 8015956:	e000      	b.n	801595a <create_name+0xce>
 8015958:	2300      	movs	r3, #0
 801595a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801595e:	e011      	b.n	8015984 <create_name+0xf8>
		w = lfn[di - 1];
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015966:	3b01      	subs	r3, #1
 8015968:	005b      	lsls	r3, r3, #1
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	4413      	add	r3, r2
 801596e:	881b      	ldrh	r3, [r3, #0]
 8015970:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8015972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015974:	2b20      	cmp	r3, #32
 8015976:	d002      	beq.n	801597e <create_name+0xf2>
 8015978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801597a:	2b2e      	cmp	r3, #46	; 0x2e
 801597c:	d106      	bne.n	801598c <create_name+0x100>
		di--;
 801597e:	697b      	ldr	r3, [r7, #20]
 8015980:	3b01      	subs	r3, #1
 8015982:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d1ea      	bne.n	8015960 <create_name+0xd4>
 801598a:	e000      	b.n	801598e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801598c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	005b      	lsls	r3, r3, #1
 8015992:	68fa      	ldr	r2, [r7, #12]
 8015994:	4413      	add	r3, r2
 8015996:	2200      	movs	r2, #0
 8015998:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d101      	bne.n	80159a4 <create_name+0x118>
 80159a0:	2306      	movs	r3, #6
 80159a2:	e127      	b.n	8015bf4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	3320      	adds	r3, #32
 80159a8:	220b      	movs	r2, #11
 80159aa:	2120      	movs	r1, #32
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7fe fdc4 	bl	801453a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80159b2:	2300      	movs	r3, #0
 80159b4:	61bb      	str	r3, [r7, #24]
 80159b6:	e002      	b.n	80159be <create_name+0x132>
 80159b8:	69bb      	ldr	r3, [r7, #24]
 80159ba:	3301      	adds	r3, #1
 80159bc:	61bb      	str	r3, [r7, #24]
 80159be:	69bb      	ldr	r3, [r7, #24]
 80159c0:	005b      	lsls	r3, r3, #1
 80159c2:	68fa      	ldr	r2, [r7, #12]
 80159c4:	4413      	add	r3, r2
 80159c6:	881b      	ldrh	r3, [r3, #0]
 80159c8:	2b20      	cmp	r3, #32
 80159ca:	d0f5      	beq.n	80159b8 <create_name+0x12c>
 80159cc:	69bb      	ldr	r3, [r7, #24]
 80159ce:	005b      	lsls	r3, r3, #1
 80159d0:	68fa      	ldr	r2, [r7, #12]
 80159d2:	4413      	add	r3, r2
 80159d4:	881b      	ldrh	r3, [r3, #0]
 80159d6:	2b2e      	cmp	r3, #46	; 0x2e
 80159d8:	d0ee      	beq.n	80159b8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d009      	beq.n	80159f4 <create_name+0x168>
 80159e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159e4:	f043 0303 	orr.w	r3, r3, #3
 80159e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80159ec:	e002      	b.n	80159f4 <create_name+0x168>
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	3b01      	subs	r3, #1
 80159f2:	617b      	str	r3, [r7, #20]
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d009      	beq.n	8015a0e <create_name+0x182>
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015a00:	3b01      	subs	r3, #1
 8015a02:	005b      	lsls	r3, r3, #1
 8015a04:	68fa      	ldr	r2, [r7, #12]
 8015a06:	4413      	add	r3, r2
 8015a08:	881b      	ldrh	r3, [r3, #0]
 8015a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8015a0c:	d1ef      	bne.n	80159ee <create_name+0x162>

	i = b = 0; ni = 8;
 8015a0e:	2300      	movs	r3, #0
 8015a10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015a14:	2300      	movs	r3, #0
 8015a16:	623b      	str	r3, [r7, #32]
 8015a18:	2308      	movs	r3, #8
 8015a1a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8015a1c:	69bb      	ldr	r3, [r7, #24]
 8015a1e:	1c5a      	adds	r2, r3, #1
 8015a20:	61ba      	str	r2, [r7, #24]
 8015a22:	005b      	lsls	r3, r3, #1
 8015a24:	68fa      	ldr	r2, [r7, #12]
 8015a26:	4413      	add	r3, r2
 8015a28:	881b      	ldrh	r3, [r3, #0]
 8015a2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8015a2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	f000 8090 	beq.w	8015b54 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8015a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a36:	2b20      	cmp	r3, #32
 8015a38:	d006      	beq.n	8015a48 <create_name+0x1bc>
 8015a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8015a3e:	d10a      	bne.n	8015a56 <create_name+0x1ca>
 8015a40:	69ba      	ldr	r2, [r7, #24]
 8015a42:	697b      	ldr	r3, [r7, #20]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d006      	beq.n	8015a56 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8015a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a4c:	f043 0303 	orr.w	r3, r3, #3
 8015a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a54:	e07d      	b.n	8015b52 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8015a56:	6a3a      	ldr	r2, [r7, #32]
 8015a58:	69fb      	ldr	r3, [r7, #28]
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d203      	bcs.n	8015a66 <create_name+0x1da>
 8015a5e:	69ba      	ldr	r2, [r7, #24]
 8015a60:	697b      	ldr	r3, [r7, #20]
 8015a62:	429a      	cmp	r2, r3
 8015a64:	d123      	bne.n	8015aae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8015a66:	69fb      	ldr	r3, [r7, #28]
 8015a68:	2b0b      	cmp	r3, #11
 8015a6a:	d106      	bne.n	8015a7a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8015a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a70:	f043 0303 	orr.w	r3, r3, #3
 8015a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a78:	e075      	b.n	8015b66 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8015a7a:	69ba      	ldr	r2, [r7, #24]
 8015a7c:	697b      	ldr	r3, [r7, #20]
 8015a7e:	429a      	cmp	r2, r3
 8015a80:	d005      	beq.n	8015a8e <create_name+0x202>
 8015a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a86:	f043 0303 	orr.w	r3, r3, #3
 8015a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8015a8e:	69ba      	ldr	r2, [r7, #24]
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d866      	bhi.n	8015b64 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8015a96:	697b      	ldr	r3, [r7, #20]
 8015a98:	61bb      	str	r3, [r7, #24]
 8015a9a:	2308      	movs	r3, #8
 8015a9c:	623b      	str	r3, [r7, #32]
 8015a9e:	230b      	movs	r3, #11
 8015aa0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8015aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015aa6:	009b      	lsls	r3, r3, #2
 8015aa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015aac:	e051      	b.n	8015b52 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8015aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8015ab2:	d914      	bls.n	8015ade <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8015ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ab6:	2100      	movs	r1, #0
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f001 fa53 	bl	8016f64 <ff_convert>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d004      	beq.n	8015ad2 <create_name+0x246>
 8015ac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015aca:	3b80      	subs	r3, #128	; 0x80
 8015acc:	4a23      	ldr	r2, [pc, #140]	; (8015b5c <create_name+0x2d0>)
 8015ace:	5cd3      	ldrb	r3, [r2, r3]
 8015ad0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8015ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ad6:	f043 0302 	orr.w	r3, r3, #2
 8015ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d007      	beq.n	8015af4 <create_name+0x268>
 8015ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ae6:	4619      	mov	r1, r3
 8015ae8:	481d      	ldr	r0, [pc, #116]	; (8015b60 <create_name+0x2d4>)
 8015aea:	f7fe fd68 	bl	80145be <chk_chr>
 8015aee:	4603      	mov	r3, r0
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d008      	beq.n	8015b06 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8015af4:	235f      	movs	r3, #95	; 0x5f
 8015af6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8015af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015afc:	f043 0303 	orr.w	r3, r3, #3
 8015b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b04:	e01b      	b.n	8015b3e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8015b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b08:	2b40      	cmp	r3, #64	; 0x40
 8015b0a:	d909      	bls.n	8015b20 <create_name+0x294>
 8015b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b0e:	2b5a      	cmp	r3, #90	; 0x5a
 8015b10:	d806      	bhi.n	8015b20 <create_name+0x294>
					b |= 2;
 8015b12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b16:	f043 0302 	orr.w	r3, r3, #2
 8015b1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015b1e:	e00e      	b.n	8015b3e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8015b20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b22:	2b60      	cmp	r3, #96	; 0x60
 8015b24:	d90b      	bls.n	8015b3e <create_name+0x2b2>
 8015b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b28:	2b7a      	cmp	r3, #122	; 0x7a
 8015b2a:	d808      	bhi.n	8015b3e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8015b2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b30:	f043 0301 	orr.w	r3, r3, #1
 8015b34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015b3a:	3b20      	subs	r3, #32
 8015b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8015b3e:	6a3b      	ldr	r3, [r7, #32]
 8015b40:	1c5a      	adds	r2, r3, #1
 8015b42:	623a      	str	r2, [r7, #32]
 8015b44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b46:	b2d1      	uxtb	r1, r2
 8015b48:	687a      	ldr	r2, [r7, #4]
 8015b4a:	4413      	add	r3, r2
 8015b4c:	460a      	mov	r2, r1
 8015b4e:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 8015b52:	e763      	b.n	8015a1c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8015b54:	bf00      	nop
 8015b56:	e006      	b.n	8015b66 <create_name+0x2da>
 8015b58:	0801854c 	.word	0x0801854c
 8015b5c:	08018608 	.word	0x08018608
 8015b60:	08018558 	.word	0x08018558
			if (si > di) break;			/* No extension */
 8015b64:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b6c:	2be5      	cmp	r3, #229	; 0xe5
 8015b6e:	d103      	bne.n	8015b78 <create_name+0x2ec>
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	2205      	movs	r2, #5
 8015b74:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 8015b78:	69fb      	ldr	r3, [r7, #28]
 8015b7a:	2b08      	cmp	r3, #8
 8015b7c:	d104      	bne.n	8015b88 <create_name+0x2fc>
 8015b7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b82:	009b      	lsls	r3, r3, #2
 8015b84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015b88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b8c:	f003 030c 	and.w	r3, r3, #12
 8015b90:	2b0c      	cmp	r3, #12
 8015b92:	d005      	beq.n	8015ba0 <create_name+0x314>
 8015b94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b98:	f003 0303 	and.w	r3, r3, #3
 8015b9c:	2b03      	cmp	r3, #3
 8015b9e:	d105      	bne.n	8015bac <create_name+0x320>
 8015ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ba4:	f043 0302 	orr.w	r3, r3, #2
 8015ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bb0:	f003 0302 	and.w	r3, r3, #2
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d117      	bne.n	8015be8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015bb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015bbc:	f003 0303 	and.w	r3, r3, #3
 8015bc0:	2b01      	cmp	r3, #1
 8015bc2:	d105      	bne.n	8015bd0 <create_name+0x344>
 8015bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bc8:	f043 0310 	orr.w	r3, r3, #16
 8015bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8015bd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015bd4:	f003 030c 	and.w	r3, r3, #12
 8015bd8:	2b04      	cmp	r3, #4
 8015bda:	d105      	bne.n	8015be8 <create_name+0x35c>
 8015bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015be0:	f043 0308 	orr.w	r3, r3, #8
 8015be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015bee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8015bf2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3728      	adds	r7, #40	; 0x28
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}

08015bfc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b086      	sub	sp, #24
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
 8015c04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015c10:	e002      	b.n	8015c18 <follow_path+0x1c>
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	3301      	adds	r3, #1
 8015c16:	603b      	str	r3, [r7, #0]
 8015c18:	683b      	ldr	r3, [r7, #0]
 8015c1a:	781b      	ldrb	r3, [r3, #0]
 8015c1c:	2b2f      	cmp	r3, #47	; 0x2f
 8015c1e:	d0f8      	beq.n	8015c12 <follow_path+0x16>
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	781b      	ldrb	r3, [r3, #0]
 8015c24:	2b5c      	cmp	r3, #92	; 0x5c
 8015c26:	d0f4      	beq.n	8015c12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	781b      	ldrb	r3, [r3, #0]
 8015c32:	2b1f      	cmp	r3, #31
 8015c34:	d80a      	bhi.n	8015c4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	2280      	movs	r2, #128	; 0x80
 8015c3a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8015c3e:	2100      	movs	r1, #0
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f7ff f8fd 	bl	8014e40 <dir_sdi>
 8015c46:	4603      	mov	r3, r0
 8015c48:	75fb      	strb	r3, [r7, #23]
 8015c4a:	e048      	b.n	8015cde <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015c4c:	463b      	mov	r3, r7
 8015c4e:	4619      	mov	r1, r3
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	f7ff fe1b 	bl	801588c <create_name>
 8015c56:	4603      	mov	r3, r0
 8015c58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015c5a:	7dfb      	ldrb	r3, [r7, #23]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d139      	bne.n	8015cd4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015c60:	6878      	ldr	r0, [r7, #4]
 8015c62:	f7ff fc5a 	bl	801551a <dir_find>
 8015c66:	4603      	mov	r3, r0
 8015c68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015c70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015c72:	7dfb      	ldrb	r3, [r7, #23]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d00a      	beq.n	8015c8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015c78:	7dfb      	ldrb	r3, [r7, #23]
 8015c7a:	2b04      	cmp	r3, #4
 8015c7c:	d12c      	bne.n	8015cd8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015c7e:	7afb      	ldrb	r3, [r7, #11]
 8015c80:	f003 0304 	and.w	r3, r3, #4
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d127      	bne.n	8015cd8 <follow_path+0xdc>
 8015c88:	2305      	movs	r3, #5
 8015c8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015c8c:	e024      	b.n	8015cd8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015c8e:	7afb      	ldrb	r3, [r7, #11]
 8015c90:	f003 0304 	and.w	r3, r3, #4
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d121      	bne.n	8015cdc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	799b      	ldrb	r3, [r3, #6]
 8015c9c:	f003 0310 	and.w	r3, r3, #16
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d102      	bne.n	8015caa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015ca4:	2305      	movs	r3, #5
 8015ca6:	75fb      	strb	r3, [r7, #23]
 8015ca8:	e019      	b.n	8015cde <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	691b      	ldr	r3, [r3, #16]
 8015cb4:	68fa      	ldr	r2, [r7, #12]
 8015cb6:	8992      	ldrh	r2, [r2, #12]
 8015cb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8015cbc:	fb00 f202 	mul.w	r2, r0, r2
 8015cc0:	1a9b      	subs	r3, r3, r2
 8015cc2:	440b      	add	r3, r1
 8015cc4:	4619      	mov	r1, r3
 8015cc6:	68f8      	ldr	r0, [r7, #12]
 8015cc8:	f7ff fa60 	bl	801518c <ld_clust>
 8015ccc:	4602      	mov	r2, r0
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015cd2:	e7bb      	b.n	8015c4c <follow_path+0x50>
			if (res != FR_OK) break;
 8015cd4:	bf00      	nop
 8015cd6:	e002      	b.n	8015cde <follow_path+0xe2>
				break;
 8015cd8:	bf00      	nop
 8015cda:	e000      	b.n	8015cde <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015cdc:	bf00      	nop
			}
		}
	}

	return res;
 8015cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3718      	adds	r7, #24
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}

08015ce8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015ce8:	b480      	push	{r7}
 8015cea:	b087      	sub	sp, #28
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8015cf4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d031      	beq.n	8015d62 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	617b      	str	r3, [r7, #20]
 8015d04:	e002      	b.n	8015d0c <get_ldnumber+0x24>
 8015d06:	697b      	ldr	r3, [r7, #20]
 8015d08:	3301      	adds	r3, #1
 8015d0a:	617b      	str	r3, [r7, #20]
 8015d0c:	697b      	ldr	r3, [r7, #20]
 8015d0e:	781b      	ldrb	r3, [r3, #0]
 8015d10:	2b1f      	cmp	r3, #31
 8015d12:	d903      	bls.n	8015d1c <get_ldnumber+0x34>
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	2b3a      	cmp	r3, #58	; 0x3a
 8015d1a:	d1f4      	bne.n	8015d06 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8015d1c:	697b      	ldr	r3, [r7, #20]
 8015d1e:	781b      	ldrb	r3, [r3, #0]
 8015d20:	2b3a      	cmp	r3, #58	; 0x3a
 8015d22:	d11c      	bne.n	8015d5e <get_ldnumber+0x76>
			tp = *path;
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	1c5a      	adds	r2, r3, #1
 8015d2e:	60fa      	str	r2, [r7, #12]
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	3b30      	subs	r3, #48	; 0x30
 8015d34:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	2b09      	cmp	r3, #9
 8015d3a:	d80e      	bhi.n	8015d5a <get_ldnumber+0x72>
 8015d3c:	68fa      	ldr	r2, [r7, #12]
 8015d3e:	697b      	ldr	r3, [r7, #20]
 8015d40:	429a      	cmp	r2, r3
 8015d42:	d10a      	bne.n	8015d5a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d107      	bne.n	8015d5a <get_ldnumber+0x72>
					vol = (int)i;
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	3301      	adds	r3, #1
 8015d52:	617b      	str	r3, [r7, #20]
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	697a      	ldr	r2, [r7, #20]
 8015d58:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015d5a:	693b      	ldr	r3, [r7, #16]
 8015d5c:	e002      	b.n	8015d64 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015d5e:	2300      	movs	r3, #0
 8015d60:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015d62:	693b      	ldr	r3, [r7, #16]
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	371c      	adds	r7, #28
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6e:	4770      	bx	lr

08015d70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
 8015d78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	70da      	strb	r2, [r3, #3]
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f04f 32ff 	mov.w	r2, #4294967295
 8015d86:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015d88:	6839      	ldr	r1, [r7, #0]
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f7fe fc76 	bl	801467c <move_window>
 8015d90:	4603      	mov	r3, r0
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d001      	beq.n	8015d9a <check_fs+0x2a>
 8015d96:	2304      	movs	r3, #4
 8015d98:	e038      	b.n	8015e0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	3338      	adds	r3, #56	; 0x38
 8015d9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7fe fb26 	bl	80143f4 <ld_word>
 8015da8:	4603      	mov	r3, r0
 8015daa:	461a      	mov	r2, r3
 8015dac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015db0:	429a      	cmp	r2, r3
 8015db2:	d001      	beq.n	8015db8 <check_fs+0x48>
 8015db4:	2303      	movs	r3, #3
 8015db6:	e029      	b.n	8015e0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015dbe:	2be9      	cmp	r3, #233	; 0xe9
 8015dc0:	d009      	beq.n	8015dd6 <check_fs+0x66>
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015dc8:	2beb      	cmp	r3, #235	; 0xeb
 8015dca:	d11e      	bne.n	8015e0a <check_fs+0x9a>
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8015dd2:	2b90      	cmp	r3, #144	; 0x90
 8015dd4:	d119      	bne.n	8015e0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	3338      	adds	r3, #56	; 0x38
 8015dda:	3336      	adds	r3, #54	; 0x36
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7fe fb21 	bl	8014424 <ld_dword>
 8015de2:	4603      	mov	r3, r0
 8015de4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015de8:	4a0a      	ldr	r2, [pc, #40]	; (8015e14 <check_fs+0xa4>)
 8015dea:	4293      	cmp	r3, r2
 8015dec:	d101      	bne.n	8015df2 <check_fs+0x82>
 8015dee:	2300      	movs	r3, #0
 8015df0:	e00c      	b.n	8015e0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	3338      	adds	r3, #56	; 0x38
 8015df6:	3352      	adds	r3, #82	; 0x52
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f7fe fb13 	bl	8014424 <ld_dword>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	4a05      	ldr	r2, [pc, #20]	; (8015e18 <check_fs+0xa8>)
 8015e02:	4293      	cmp	r3, r2
 8015e04:	d101      	bne.n	8015e0a <check_fs+0x9a>
 8015e06:	2300      	movs	r3, #0
 8015e08:	e000      	b.n	8015e0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8015e0a:	2302      	movs	r3, #2
}
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	3708      	adds	r7, #8
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}
 8015e14:	00544146 	.word	0x00544146
 8015e18:	33544146 	.word	0x33544146

08015e1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b096      	sub	sp, #88	; 0x58
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	60f8      	str	r0, [r7, #12]
 8015e24:	60b9      	str	r1, [r7, #8]
 8015e26:	4613      	mov	r3, r2
 8015e28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8015e2a:	68bb      	ldr	r3, [r7, #8]
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8015e30:	68f8      	ldr	r0, [r7, #12]
 8015e32:	f7ff ff59 	bl	8015ce8 <get_ldnumber>
 8015e36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8015e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	da01      	bge.n	8015e42 <find_volume+0x26>
 8015e3e:	230b      	movs	r3, #11
 8015e40:	e262      	b.n	8016308 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8015e42:	4a9f      	ldr	r2, [pc, #636]	; (80160c0 <find_volume+0x2a4>)
 8015e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d101      	bne.n	8015e56 <find_volume+0x3a>
 8015e52:	230c      	movs	r3, #12
 8015e54:	e258      	b.n	8016308 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8015e56:	68bb      	ldr	r3, [r7, #8]
 8015e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015e5c:	79fb      	ldrb	r3, [r7, #7]
 8015e5e:	f023 0301 	bic.w	r3, r3, #1
 8015e62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e66:	781b      	ldrb	r3, [r3, #0]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d01a      	beq.n	8015ea2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8015e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e6e:	785b      	ldrb	r3, [r3, #1]
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7fe fa21 	bl	80142b8 <disk_status>
 8015e76:	4603      	mov	r3, r0
 8015e78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015e7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015e80:	f003 0301 	and.w	r3, r3, #1
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d10c      	bne.n	8015ea2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015e88:	79fb      	ldrb	r3, [r7, #7]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d007      	beq.n	8015e9e <find_volume+0x82>
 8015e8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015e92:	f003 0304 	and.w	r3, r3, #4
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d001      	beq.n	8015e9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8015e9a:	230a      	movs	r3, #10
 8015e9c:	e234      	b.n	8016308 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	e232      	b.n	8016308 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eaa:	b2da      	uxtb	r2, r3
 8015eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eb2:	785b      	ldrb	r3, [r3, #1]
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7fe fa19 	bl	80142ec <disk_initialize>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015ec4:	f003 0301 	and.w	r3, r3, #1
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d001      	beq.n	8015ed0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015ecc:	2303      	movs	r3, #3
 8015ece:	e21b      	b.n	8016308 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8015ed0:	79fb      	ldrb	r3, [r7, #7]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d007      	beq.n	8015ee6 <find_volume+0xca>
 8015ed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015eda:	f003 0304 	and.w	r3, r3, #4
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d001      	beq.n	8015ee6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8015ee2:	230a      	movs	r3, #10
 8015ee4:	e210      	b.n	8016308 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8015ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ee8:	7858      	ldrb	r0, [r3, #1]
 8015eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eec:	330c      	adds	r3, #12
 8015eee:	461a      	mov	r2, r3
 8015ef0:	2102      	movs	r1, #2
 8015ef2:	f7fe fa61 	bl	80143b8 <disk_ioctl>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d001      	beq.n	8015f00 <find_volume+0xe4>
 8015efc:	2301      	movs	r3, #1
 8015efe:	e203      	b.n	8016308 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8015f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f02:	899b      	ldrh	r3, [r3, #12]
 8015f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f08:	d80d      	bhi.n	8015f26 <find_volume+0x10a>
 8015f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f0c:	899b      	ldrh	r3, [r3, #12]
 8015f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015f12:	d308      	bcc.n	8015f26 <find_volume+0x10a>
 8015f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f16:	899b      	ldrh	r3, [r3, #12]
 8015f18:	461a      	mov	r2, r3
 8015f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f1c:	899b      	ldrh	r3, [r3, #12]
 8015f1e:	3b01      	subs	r3, #1
 8015f20:	4013      	ands	r3, r2
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d001      	beq.n	8015f2a <find_volume+0x10e>
 8015f26:	2301      	movs	r3, #1
 8015f28:	e1ee      	b.n	8016308 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8015f2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015f30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015f32:	f7ff ff1d 	bl	8015d70 <check_fs>
 8015f36:	4603      	mov	r3, r0
 8015f38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8015f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015f40:	2b02      	cmp	r3, #2
 8015f42:	d149      	bne.n	8015fd8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015f44:	2300      	movs	r3, #0
 8015f46:	643b      	str	r3, [r7, #64]	; 0x40
 8015f48:	e01e      	b.n	8015f88 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8015f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f4c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f52:	011b      	lsls	r3, r3, #4
 8015f54:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015f58:	4413      	add	r3, r2
 8015f5a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f5e:	3304      	adds	r3, #4
 8015f60:	781b      	ldrb	r3, [r3, #0]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d006      	beq.n	8015f74 <find_volume+0x158>
 8015f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f68:	3308      	adds	r3, #8
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f7fe fa5a 	bl	8014424 <ld_dword>
 8015f70:	4602      	mov	r2, r0
 8015f72:	e000      	b.n	8015f76 <find_volume+0x15a>
 8015f74:	2200      	movs	r2, #0
 8015f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f78:	009b      	lsls	r3, r3, #2
 8015f7a:	3358      	adds	r3, #88	; 0x58
 8015f7c:	443b      	add	r3, r7
 8015f7e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f84:	3301      	adds	r3, #1
 8015f86:	643b      	str	r3, [r7, #64]	; 0x40
 8015f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f8a:	2b03      	cmp	r3, #3
 8015f8c:	d9dd      	bls.n	8015f4a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015f8e:	2300      	movs	r3, #0
 8015f90:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8015f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d002      	beq.n	8015f9e <find_volume+0x182>
 8015f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f9a:	3b01      	subs	r3, #1
 8015f9c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fa0:	009b      	lsls	r3, r3, #2
 8015fa2:	3358      	adds	r3, #88	; 0x58
 8015fa4:	443b      	add	r3, r7
 8015fa6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015faa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d005      	beq.n	8015fbe <find_volume+0x1a2>
 8015fb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015fb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015fb6:	f7ff fedb 	bl	8015d70 <check_fs>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	e000      	b.n	8015fc0 <find_volume+0x1a4>
 8015fbe:	2303      	movs	r3, #3
 8015fc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015fc8:	2b01      	cmp	r3, #1
 8015fca:	d905      	bls.n	8015fd8 <find_volume+0x1bc>
 8015fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fce:	3301      	adds	r3, #1
 8015fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8015fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fd4:	2b03      	cmp	r3, #3
 8015fd6:	d9e2      	bls.n	8015f9e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015fdc:	2b04      	cmp	r3, #4
 8015fde:	d101      	bne.n	8015fe4 <find_volume+0x1c8>
 8015fe0:	2301      	movs	r3, #1
 8015fe2:	e191      	b.n	8016308 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015fe8:	2b01      	cmp	r3, #1
 8015fea:	d901      	bls.n	8015ff0 <find_volume+0x1d4>
 8015fec:	230d      	movs	r3, #13
 8015fee:	e18b      	b.n	8016308 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ff2:	3338      	adds	r3, #56	; 0x38
 8015ff4:	330b      	adds	r3, #11
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f7fe f9fc 	bl	80143f4 <ld_word>
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	461a      	mov	r2, r3
 8016000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016002:	899b      	ldrh	r3, [r3, #12]
 8016004:	429a      	cmp	r2, r3
 8016006:	d001      	beq.n	801600c <find_volume+0x1f0>
 8016008:	230d      	movs	r3, #13
 801600a:	e17d      	b.n	8016308 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801600e:	3338      	adds	r3, #56	; 0x38
 8016010:	3316      	adds	r3, #22
 8016012:	4618      	mov	r0, r3
 8016014:	f7fe f9ee 	bl	80143f4 <ld_word>
 8016018:	4603      	mov	r3, r0
 801601a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801601c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801601e:	2b00      	cmp	r3, #0
 8016020:	d106      	bne.n	8016030 <find_volume+0x214>
 8016022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016024:	3338      	adds	r3, #56	; 0x38
 8016026:	3324      	adds	r3, #36	; 0x24
 8016028:	4618      	mov	r0, r3
 801602a:	f7fe f9fb 	bl	8014424 <ld_dword>
 801602e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016032:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016034:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016038:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801603e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016042:	789b      	ldrb	r3, [r3, #2]
 8016044:	2b01      	cmp	r3, #1
 8016046:	d005      	beq.n	8016054 <find_volume+0x238>
 8016048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801604a:	789b      	ldrb	r3, [r3, #2]
 801604c:	2b02      	cmp	r3, #2
 801604e:	d001      	beq.n	8016054 <find_volume+0x238>
 8016050:	230d      	movs	r3, #13
 8016052:	e159      	b.n	8016308 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016056:	789b      	ldrb	r3, [r3, #2]
 8016058:	461a      	mov	r2, r3
 801605a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801605c:	fb02 f303 	mul.w	r3, r2, r3
 8016060:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016068:	b29a      	uxth	r2, r3
 801606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801606c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016070:	895b      	ldrh	r3, [r3, #10]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d008      	beq.n	8016088 <find_volume+0x26c>
 8016076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016078:	895b      	ldrh	r3, [r3, #10]
 801607a:	461a      	mov	r2, r3
 801607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801607e:	895b      	ldrh	r3, [r3, #10]
 8016080:	3b01      	subs	r3, #1
 8016082:	4013      	ands	r3, r2
 8016084:	2b00      	cmp	r3, #0
 8016086:	d001      	beq.n	801608c <find_volume+0x270>
 8016088:	230d      	movs	r3, #13
 801608a:	e13d      	b.n	8016308 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801608e:	3338      	adds	r3, #56	; 0x38
 8016090:	3311      	adds	r3, #17
 8016092:	4618      	mov	r0, r3
 8016094:	f7fe f9ae 	bl	80143f4 <ld_word>
 8016098:	4603      	mov	r3, r0
 801609a:	461a      	mov	r2, r3
 801609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801609e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80160a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160a2:	891b      	ldrh	r3, [r3, #8]
 80160a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80160a6:	8992      	ldrh	r2, [r2, #12]
 80160a8:	0952      	lsrs	r2, r2, #5
 80160aa:	b292      	uxth	r2, r2
 80160ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80160b0:	fb01 f202 	mul.w	r2, r1, r2
 80160b4:	1a9b      	subs	r3, r3, r2
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d003      	beq.n	80160c4 <find_volume+0x2a8>
 80160bc:	230d      	movs	r3, #13
 80160be:	e123      	b.n	8016308 <find_volume+0x4ec>
 80160c0:	200067a8 	.word	0x200067a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80160c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160c6:	3338      	adds	r3, #56	; 0x38
 80160c8:	3313      	adds	r3, #19
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7fe f992 	bl	80143f4 <ld_word>
 80160d0:	4603      	mov	r3, r0
 80160d2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80160d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d106      	bne.n	80160e8 <find_volume+0x2cc>
 80160da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160dc:	3338      	adds	r3, #56	; 0x38
 80160de:	3320      	adds	r3, #32
 80160e0:	4618      	mov	r0, r3
 80160e2:	f7fe f99f 	bl	8014424 <ld_dword>
 80160e6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80160e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ea:	3338      	adds	r3, #56	; 0x38
 80160ec:	330e      	adds	r3, #14
 80160ee:	4618      	mov	r0, r3
 80160f0:	f7fe f980 	bl	80143f4 <ld_word>
 80160f4:	4603      	mov	r3, r0
 80160f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80160f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d101      	bne.n	8016102 <find_volume+0x2e6>
 80160fe:	230d      	movs	r3, #13
 8016100:	e102      	b.n	8016308 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016102:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016106:	4413      	add	r3, r2
 8016108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801610a:	8911      	ldrh	r1, [r2, #8]
 801610c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801610e:	8992      	ldrh	r2, [r2, #12]
 8016110:	0952      	lsrs	r2, r2, #5
 8016112:	b292      	uxth	r2, r2
 8016114:	fbb1 f2f2 	udiv	r2, r1, r2
 8016118:	b292      	uxth	r2, r2
 801611a:	4413      	add	r3, r2
 801611c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801611e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016122:	429a      	cmp	r2, r3
 8016124:	d201      	bcs.n	801612a <find_volume+0x30e>
 8016126:	230d      	movs	r3, #13
 8016128:	e0ee      	b.n	8016308 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801612a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801612e:	1ad3      	subs	r3, r2, r3
 8016130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016132:	8952      	ldrh	r2, [r2, #10]
 8016134:	fbb3 f3f2 	udiv	r3, r3, r2
 8016138:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801613c:	2b00      	cmp	r3, #0
 801613e:	d101      	bne.n	8016144 <find_volume+0x328>
 8016140:	230d      	movs	r3, #13
 8016142:	e0e1      	b.n	8016308 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8016144:	2303      	movs	r3, #3
 8016146:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016150:	4293      	cmp	r3, r2
 8016152:	d802      	bhi.n	801615a <find_volume+0x33e>
 8016154:	2302      	movs	r3, #2
 8016156:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801615c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016160:	4293      	cmp	r3, r2
 8016162:	d802      	bhi.n	801616a <find_volume+0x34e>
 8016164:	2301      	movs	r3, #1
 8016166:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801616c:	1c9a      	adds	r2, r3, #2
 801616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016170:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8016172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016174:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016176:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016178:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801617a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801617c:	441a      	add	r2, r3
 801617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016180:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8016182:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016186:	441a      	add	r2, r3
 8016188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801618a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801618c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016190:	2b03      	cmp	r3, #3
 8016192:	d11e      	bne.n	80161d2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016196:	3338      	adds	r3, #56	; 0x38
 8016198:	332a      	adds	r3, #42	; 0x2a
 801619a:	4618      	mov	r0, r3
 801619c:	f7fe f92a 	bl	80143f4 <ld_word>
 80161a0:	4603      	mov	r3, r0
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d001      	beq.n	80161aa <find_volume+0x38e>
 80161a6:	230d      	movs	r3, #13
 80161a8:	e0ae      	b.n	8016308 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80161aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ac:	891b      	ldrh	r3, [r3, #8]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d001      	beq.n	80161b6 <find_volume+0x39a>
 80161b2:	230d      	movs	r3, #13
 80161b4:	e0a8      	b.n	8016308 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80161b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161b8:	3338      	adds	r3, #56	; 0x38
 80161ba:	332c      	adds	r3, #44	; 0x2c
 80161bc:	4618      	mov	r0, r3
 80161be:	f7fe f931 	bl	8014424 <ld_dword>
 80161c2:	4602      	mov	r2, r0
 80161c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161c6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80161c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ca:	69db      	ldr	r3, [r3, #28]
 80161cc:	009b      	lsls	r3, r3, #2
 80161ce:	647b      	str	r3, [r7, #68]	; 0x44
 80161d0:	e01f      	b.n	8016212 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80161d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161d4:	891b      	ldrh	r3, [r3, #8]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d101      	bne.n	80161de <find_volume+0x3c2>
 80161da:	230d      	movs	r3, #13
 80161dc:	e094      	b.n	8016308 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80161de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80161e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161e4:	441a      	add	r2, r3
 80161e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161e8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80161ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80161ee:	2b02      	cmp	r3, #2
 80161f0:	d103      	bne.n	80161fa <find_volume+0x3de>
 80161f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161f4:	69db      	ldr	r3, [r3, #28]
 80161f6:	005b      	lsls	r3, r3, #1
 80161f8:	e00a      	b.n	8016210 <find_volume+0x3f4>
 80161fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161fc:	69da      	ldr	r2, [r3, #28]
 80161fe:	4613      	mov	r3, r2
 8016200:	005b      	lsls	r3, r3, #1
 8016202:	4413      	add	r3, r2
 8016204:	085a      	lsrs	r2, r3, #1
 8016206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016208:	69db      	ldr	r3, [r3, #28]
 801620a:	f003 0301 	and.w	r3, r3, #1
 801620e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016210:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016214:	6a1a      	ldr	r2, [r3, #32]
 8016216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016218:	899b      	ldrh	r3, [r3, #12]
 801621a:	4619      	mov	r1, r3
 801621c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801621e:	440b      	add	r3, r1
 8016220:	3b01      	subs	r3, #1
 8016222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016224:	8989      	ldrh	r1, [r1, #12]
 8016226:	fbb3 f3f1 	udiv	r3, r3, r1
 801622a:	429a      	cmp	r2, r3
 801622c:	d201      	bcs.n	8016232 <find_volume+0x416>
 801622e:	230d      	movs	r3, #13
 8016230:	e06a      	b.n	8016308 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016234:	f04f 32ff 	mov.w	r2, #4294967295
 8016238:	619a      	str	r2, [r3, #24]
 801623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801623c:	699a      	ldr	r2, [r3, #24]
 801623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016240:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8016242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016244:	2280      	movs	r2, #128	; 0x80
 8016246:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801624c:	2b03      	cmp	r3, #3
 801624e:	d149      	bne.n	80162e4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016252:	3338      	adds	r3, #56	; 0x38
 8016254:	3330      	adds	r3, #48	; 0x30
 8016256:	4618      	mov	r0, r3
 8016258:	f7fe f8cc 	bl	80143f4 <ld_word>
 801625c:	4603      	mov	r3, r0
 801625e:	2b01      	cmp	r3, #1
 8016260:	d140      	bne.n	80162e4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016264:	3301      	adds	r3, #1
 8016266:	4619      	mov	r1, r3
 8016268:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801626a:	f7fe fa07 	bl	801467c <move_window>
 801626e:	4603      	mov	r3, r0
 8016270:	2b00      	cmp	r3, #0
 8016272:	d137      	bne.n	80162e4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8016274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016276:	2200      	movs	r2, #0
 8016278:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801627c:	3338      	adds	r3, #56	; 0x38
 801627e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016282:	4618      	mov	r0, r3
 8016284:	f7fe f8b6 	bl	80143f4 <ld_word>
 8016288:	4603      	mov	r3, r0
 801628a:	461a      	mov	r2, r3
 801628c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016290:	429a      	cmp	r2, r3
 8016292:	d127      	bne.n	80162e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016296:	3338      	adds	r3, #56	; 0x38
 8016298:	4618      	mov	r0, r3
 801629a:	f7fe f8c3 	bl	8014424 <ld_dword>
 801629e:	4603      	mov	r3, r0
 80162a0:	4a1b      	ldr	r2, [pc, #108]	; (8016310 <find_volume+0x4f4>)
 80162a2:	4293      	cmp	r3, r2
 80162a4:	d11e      	bne.n	80162e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80162a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162a8:	3338      	adds	r3, #56	; 0x38
 80162aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80162ae:	4618      	mov	r0, r3
 80162b0:	f7fe f8b8 	bl	8014424 <ld_dword>
 80162b4:	4603      	mov	r3, r0
 80162b6:	4a17      	ldr	r2, [pc, #92]	; (8016314 <find_volume+0x4f8>)
 80162b8:	4293      	cmp	r3, r2
 80162ba:	d113      	bne.n	80162e4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80162bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162be:	3338      	adds	r3, #56	; 0x38
 80162c0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7fe f8ad 	bl	8014424 <ld_dword>
 80162ca:	4602      	mov	r2, r0
 80162cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ce:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80162d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162d2:	3338      	adds	r3, #56	; 0x38
 80162d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80162d8:	4618      	mov	r0, r3
 80162da:	f7fe f8a3 	bl	8014424 <ld_dword>
 80162de:	4602      	mov	r2, r0
 80162e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162e2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80162e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80162ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80162ec:	4b0a      	ldr	r3, [pc, #40]	; (8016318 <find_volume+0x4fc>)
 80162ee:	881b      	ldrh	r3, [r3, #0]
 80162f0:	3301      	adds	r3, #1
 80162f2:	b29a      	uxth	r2, r3
 80162f4:	4b08      	ldr	r3, [pc, #32]	; (8016318 <find_volume+0x4fc>)
 80162f6:	801a      	strh	r2, [r3, #0]
 80162f8:	4b07      	ldr	r3, [pc, #28]	; (8016318 <find_volume+0x4fc>)
 80162fa:	881a      	ldrh	r2, [r3, #0]
 80162fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162fe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8016300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016302:	4a06      	ldr	r2, [pc, #24]	; (801631c <find_volume+0x500>)
 8016304:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8016306:	2300      	movs	r3, #0
}
 8016308:	4618      	mov	r0, r3
 801630a:	3758      	adds	r7, #88	; 0x58
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}
 8016310:	41615252 	.word	0x41615252
 8016314:	61417272 	.word	0x61417272
 8016318:	200067ac 	.word	0x200067ac
 801631c:	200067b0 	.word	0x200067b0

08016320 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b084      	sub	sp, #16
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
 8016328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801632a:	2309      	movs	r3, #9
 801632c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d01c      	beq.n	801636e <validate+0x4e>
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d018      	beq.n	801636e <validate+0x4e>
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d013      	beq.n	801636e <validate+0x4e>
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	889a      	ldrh	r2, [r3, #4]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	88db      	ldrh	r3, [r3, #6]
 8016350:	429a      	cmp	r2, r3
 8016352:	d10c      	bne.n	801636e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	785b      	ldrb	r3, [r3, #1]
 801635a:	4618      	mov	r0, r3
 801635c:	f7fd ffac 	bl	80142b8 <disk_status>
 8016360:	4603      	mov	r3, r0
 8016362:	f003 0301 	and.w	r3, r3, #1
 8016366:	2b00      	cmp	r3, #0
 8016368:	d101      	bne.n	801636e <validate+0x4e>
			res = FR_OK;
 801636a:	2300      	movs	r3, #0
 801636c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801636e:	7bfb      	ldrb	r3, [r7, #15]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d102      	bne.n	801637a <validate+0x5a>
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	e000      	b.n	801637c <validate+0x5c>
 801637a:	2300      	movs	r3, #0
 801637c:	683a      	ldr	r2, [r7, #0]
 801637e:	6013      	str	r3, [r2, #0]
	return res;
 8016380:	7bfb      	ldrb	r3, [r7, #15]
}
 8016382:	4618      	mov	r0, r3
 8016384:	3710      	adds	r7, #16
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
	...

0801638c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b088      	sub	sp, #32
 8016390:	af00      	add	r7, sp, #0
 8016392:	60f8      	str	r0, [r7, #12]
 8016394:	60b9      	str	r1, [r7, #8]
 8016396:	4613      	mov	r3, r2
 8016398:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801639a:	68bb      	ldr	r3, [r7, #8]
 801639c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801639e:	f107 0310 	add.w	r3, r7, #16
 80163a2:	4618      	mov	r0, r3
 80163a4:	f7ff fca0 	bl	8015ce8 <get_ldnumber>
 80163a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80163aa:	69fb      	ldr	r3, [r7, #28]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	da01      	bge.n	80163b4 <f_mount+0x28>
 80163b0:	230b      	movs	r3, #11
 80163b2:	e028      	b.n	8016406 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80163b4:	4a16      	ldr	r2, [pc, #88]	; (8016410 <f_mount+0x84>)
 80163b6:	69fb      	ldr	r3, [r7, #28]
 80163b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80163be:	69bb      	ldr	r3, [r7, #24]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d002      	beq.n	80163ca <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80163c4:	69bb      	ldr	r3, [r7, #24]
 80163c6:	2200      	movs	r2, #0
 80163c8:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d002      	beq.n	80163d6 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	2200      	movs	r2, #0
 80163d4:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80163d6:	68fa      	ldr	r2, [r7, #12]
 80163d8:	490d      	ldr	r1, [pc, #52]	; (8016410 <f_mount+0x84>)
 80163da:	69fb      	ldr	r3, [r7, #28]
 80163dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d002      	beq.n	80163ec <f_mount+0x60>
 80163e6:	79fb      	ldrb	r3, [r7, #7]
 80163e8:	2b01      	cmp	r3, #1
 80163ea:	d001      	beq.n	80163f0 <f_mount+0x64>
 80163ec:	2300      	movs	r3, #0
 80163ee:	e00a      	b.n	8016406 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80163f0:	f107 010c 	add.w	r1, r7, #12
 80163f4:	f107 0308 	add.w	r3, r7, #8
 80163f8:	2200      	movs	r2, #0
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7ff fd0e 	bl	8015e1c <find_volume>
 8016400:	4603      	mov	r3, r0
 8016402:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016404:	7dfb      	ldrb	r3, [r7, #23]
}
 8016406:	4618      	mov	r0, r3
 8016408:	3720      	adds	r7, #32
 801640a:	46bd      	mov	sp, r7
 801640c:	bd80      	pop	{r7, pc}
 801640e:	bf00      	nop
 8016410:	200067a8 	.word	0x200067a8

08016414 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b098      	sub	sp, #96	; 0x60
 8016418:	af00      	add	r7, sp, #0
 801641a:	60f8      	str	r0, [r7, #12]
 801641c:	60b9      	str	r1, [r7, #8]
 801641e:	4613      	mov	r3, r2
 8016420:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d101      	bne.n	801642c <f_open+0x18>
 8016428:	2309      	movs	r3, #9
 801642a:	e188      	b.n	801673e <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801642c:	79fb      	ldrb	r3, [r7, #7]
 801642e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016432:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016434:	79fa      	ldrb	r2, [r7, #7]
 8016436:	f107 0110 	add.w	r1, r7, #16
 801643a:	f107 0308 	add.w	r3, r7, #8
 801643e:	4618      	mov	r0, r3
 8016440:	f7ff fcec 	bl	8015e1c <find_volume>
 8016444:	4603      	mov	r3, r0
 8016446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801644a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801644e:	2b00      	cmp	r3, #0
 8016450:	f040 816c 	bne.w	801672c <f_open+0x318>
		dj.obj.fs = fs;
 8016454:	693b      	ldr	r3, [r7, #16]
 8016456:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016458:	68ba      	ldr	r2, [r7, #8]
 801645a:	f107 0314 	add.w	r3, r7, #20
 801645e:	4611      	mov	r1, r2
 8016460:	4618      	mov	r0, r3
 8016462:	f7ff fbcb 	bl	8015bfc <follow_path>
 8016466:	4603      	mov	r3, r0
 8016468:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801646c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016470:	2b00      	cmp	r3, #0
 8016472:	d107      	bne.n	8016484 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016474:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016478:	b25b      	sxtb	r3, r3
 801647a:	2b00      	cmp	r3, #0
 801647c:	da02      	bge.n	8016484 <f_open+0x70>
				res = FR_INVALID_NAME;
 801647e:	2306      	movs	r3, #6
 8016480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016484:	79fb      	ldrb	r3, [r7, #7]
 8016486:	f003 031c 	and.w	r3, r3, #28
 801648a:	2b00      	cmp	r3, #0
 801648c:	d078      	beq.n	8016580 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 801648e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016492:	2b00      	cmp	r3, #0
 8016494:	d010      	beq.n	80164b8 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801649a:	2b04      	cmp	r3, #4
 801649c:	d107      	bne.n	80164ae <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 801649e:	f107 0314 	add.w	r3, r7, #20
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7ff f8fa 	bl	801569c <dir_register>
 80164a8:	4603      	mov	r3, r0
 80164aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80164ae:	79fb      	ldrb	r3, [r7, #7]
 80164b0:	f043 0308 	orr.w	r3, r3, #8
 80164b4:	71fb      	strb	r3, [r7, #7]
 80164b6:	e010      	b.n	80164da <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80164b8:	7ebb      	ldrb	r3, [r7, #26]
 80164ba:	f003 0311 	and.w	r3, r3, #17
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d003      	beq.n	80164ca <f_open+0xb6>
					res = FR_DENIED;
 80164c2:	2307      	movs	r3, #7
 80164c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80164c8:	e007      	b.n	80164da <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80164ca:	79fb      	ldrb	r3, [r7, #7]
 80164cc:	f003 0304 	and.w	r3, r3, #4
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d002      	beq.n	80164da <f_open+0xc6>
 80164d4:	2308      	movs	r3, #8
 80164d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80164da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d168      	bne.n	80165b4 <f_open+0x1a0>
 80164e2:	79fb      	ldrb	r3, [r7, #7]
 80164e4:	f003 0308 	and.w	r3, r3, #8
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d063      	beq.n	80165b4 <f_open+0x1a0>
				dw = GET_FATTIME();
 80164ec:	f7fa f9de 	bl	80108ac <get_fattime>
 80164f0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80164f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f4:	330e      	adds	r3, #14
 80164f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80164f8:	4618      	mov	r0, r3
 80164fa:	f7fd ffd1 	bl	80144a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80164fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016500:	3316      	adds	r3, #22
 8016502:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016504:	4618      	mov	r0, r3
 8016506:	f7fd ffcb 	bl	80144a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801650c:	330b      	adds	r3, #11
 801650e:	2220      	movs	r2, #32
 8016510:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016516:	4611      	mov	r1, r2
 8016518:	4618      	mov	r0, r3
 801651a:	f7fe fe37 	bl	801518c <ld_clust>
 801651e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016520:	693b      	ldr	r3, [r7, #16]
 8016522:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016524:	2200      	movs	r2, #0
 8016526:	4618      	mov	r0, r3
 8016528:	f7fe fe4f 	bl	80151ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801652e:	331c      	adds	r3, #28
 8016530:	2100      	movs	r1, #0
 8016532:	4618      	mov	r0, r3
 8016534:	f7fd ffb4 	bl	80144a0 <st_dword>
					fs->wflag = 1;
 8016538:	693b      	ldr	r3, [r7, #16]
 801653a:	2201      	movs	r2, #1
 801653c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801653e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016540:	2b00      	cmp	r3, #0
 8016542:	d037      	beq.n	80165b4 <f_open+0x1a0>
						dw = fs->winsect;
 8016544:	693b      	ldr	r3, [r7, #16]
 8016546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016548:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801654a:	f107 0314 	add.w	r3, r7, #20
 801654e:	2200      	movs	r2, #0
 8016550:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016552:	4618      	mov	r0, r3
 8016554:	f7fe fb3f 	bl	8014bd6 <remove_chain>
 8016558:	4603      	mov	r3, r0
 801655a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801655e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016562:	2b00      	cmp	r3, #0
 8016564:	d126      	bne.n	80165b4 <f_open+0x1a0>
							res = move_window(fs, dw);
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801656a:	4618      	mov	r0, r3
 801656c:	f7fe f886 	bl	801467c <move_window>
 8016570:	4603      	mov	r3, r0
 8016572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801657a:	3a01      	subs	r2, #1
 801657c:	615a      	str	r2, [r3, #20]
 801657e:	e019      	b.n	80165b4 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016584:	2b00      	cmp	r3, #0
 8016586:	d115      	bne.n	80165b4 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016588:	7ebb      	ldrb	r3, [r7, #26]
 801658a:	f003 0310 	and.w	r3, r3, #16
 801658e:	2b00      	cmp	r3, #0
 8016590:	d003      	beq.n	801659a <f_open+0x186>
					res = FR_NO_FILE;
 8016592:	2304      	movs	r3, #4
 8016594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016598:	e00c      	b.n	80165b4 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801659a:	79fb      	ldrb	r3, [r7, #7]
 801659c:	f003 0302 	and.w	r3, r3, #2
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d007      	beq.n	80165b4 <f_open+0x1a0>
 80165a4:	7ebb      	ldrb	r3, [r7, #26]
 80165a6:	f003 0301 	and.w	r3, r3, #1
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d002      	beq.n	80165b4 <f_open+0x1a0>
						res = FR_DENIED;
 80165ae:	2307      	movs	r3, #7
 80165b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80165b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d10f      	bne.n	80165dc <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80165bc:	79fb      	ldrb	r3, [r7, #7]
 80165be:	f003 0308 	and.w	r3, r3, #8
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d003      	beq.n	80165ce <f_open+0x1ba>
				mode |= FA_MODIFIED;
 80165c6:	79fb      	ldrb	r3, [r7, #7]
 80165c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80165ce:	693b      	ldr	r3, [r7, #16]
 80165d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80165d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80165dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	f040 80a3 	bne.w	801672c <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80165e6:	693b      	ldr	r3, [r7, #16]
 80165e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165ea:	4611      	mov	r1, r2
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7fe fdcd 	bl	801518c <ld_clust>
 80165f2:	4602      	mov	r2, r0
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80165f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165fa:	331c      	adds	r3, #28
 80165fc:	4618      	mov	r0, r3
 80165fe:	f7fd ff11 	bl	8014424 <ld_dword>
 8016602:	4602      	mov	r2, r0
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	2200      	movs	r2, #0
 801660c:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801660e:	693a      	ldr	r2, [r7, #16]
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016614:	693b      	ldr	r3, [r7, #16]
 8016616:	88da      	ldrh	r2, [r3, #6]
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	79fa      	ldrb	r2, [r7, #7]
 8016620:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	2200      	movs	r2, #0
 8016626:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2200      	movs	r2, #0
 801662c:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	2200      	movs	r2, #0
 8016632:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	332c      	adds	r3, #44	; 0x2c
 8016638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801663c:	2100      	movs	r1, #0
 801663e:	4618      	mov	r0, r3
 8016640:	f7fd ff7b 	bl	801453a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016644:	79fb      	ldrb	r3, [r7, #7]
 8016646:	f003 0320 	and.w	r3, r3, #32
 801664a:	2b00      	cmp	r3, #0
 801664c:	d06e      	beq.n	801672c <f_open+0x318>
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d06a      	beq.n	801672c <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	68da      	ldr	r2, [r3, #12]
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801665e:	693b      	ldr	r3, [r7, #16]
 8016660:	895b      	ldrh	r3, [r3, #10]
 8016662:	461a      	mov	r2, r3
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	899b      	ldrh	r3, [r3, #12]
 8016668:	fb02 f303 	mul.w	r3, r2, r3
 801666c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	689b      	ldr	r3, [r3, #8]
 8016672:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	68db      	ldr	r3, [r3, #12]
 8016678:	657b      	str	r3, [r7, #84]	; 0x54
 801667a:	e016      	b.n	80166aa <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016680:	4618      	mov	r0, r3
 8016682:	f7fe f8b8 	bl	80147f6 <get_fat>
 8016686:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801668a:	2b01      	cmp	r3, #1
 801668c:	d802      	bhi.n	8016694 <f_open+0x280>
 801668e:	2302      	movs	r3, #2
 8016690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016696:	f1b3 3fff 	cmp.w	r3, #4294967295
 801669a:	d102      	bne.n	80166a2 <f_open+0x28e>
 801669c:	2301      	movs	r3, #1
 801669e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80166a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80166a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166a6:	1ad3      	subs	r3, r2, r3
 80166a8:	657b      	str	r3, [r7, #84]	; 0x54
 80166aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d103      	bne.n	80166ba <f_open+0x2a6>
 80166b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80166b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d8e0      	bhi.n	801667c <f_open+0x268>
				}
				fp->clust = clst;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80166be:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80166c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d131      	bne.n	801672c <f_open+0x318>
 80166c8:	693b      	ldr	r3, [r7, #16]
 80166ca:	899b      	ldrh	r3, [r3, #12]
 80166cc:	461a      	mov	r2, r3
 80166ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80166d4:	fb01 f202 	mul.w	r2, r1, r2
 80166d8:	1a9b      	subs	r3, r3, r2
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d026      	beq.n	801672c <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80166de:	693b      	ldr	r3, [r7, #16]
 80166e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7fe f868 	bl	80147b8 <clust2sect>
 80166e8:	6478      	str	r0, [r7, #68]	; 0x44
 80166ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d103      	bne.n	80166f8 <f_open+0x2e4>
						res = FR_INT_ERR;
 80166f0:	2302      	movs	r3, #2
 80166f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80166f6:	e019      	b.n	801672c <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80166f8:	693b      	ldr	r3, [r7, #16]
 80166fa:	899b      	ldrh	r3, [r3, #12]
 80166fc:	461a      	mov	r2, r3
 80166fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016700:	fbb3 f2f2 	udiv	r2, r3, r2
 8016704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016706:	441a      	add	r2, r3
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801670c:	693b      	ldr	r3, [r7, #16]
 801670e:	7858      	ldrb	r0, [r3, #1]
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	69da      	ldr	r2, [r3, #28]
 801671a:	2301      	movs	r3, #1
 801671c:	f7fd fe0c 	bl	8014338 <disk_read>
 8016720:	4603      	mov	r3, r0
 8016722:	2b00      	cmp	r3, #0
 8016724:	d002      	beq.n	801672c <f_open+0x318>
 8016726:	2301      	movs	r3, #1
 8016728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801672c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016730:	2b00      	cmp	r3, #0
 8016732:	d002      	beq.n	801673a <f_open+0x326>
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	2200      	movs	r2, #0
 8016738:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801673a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801673e:	4618      	mov	r0, r3
 8016740:	3760      	adds	r7, #96	; 0x60
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}

08016746 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016746:	b580      	push	{r7, lr}
 8016748:	b08c      	sub	sp, #48	; 0x30
 801674a:	af00      	add	r7, sp, #0
 801674c:	60f8      	str	r0, [r7, #12]
 801674e:	60b9      	str	r1, [r7, #8]
 8016750:	607a      	str	r2, [r7, #4]
 8016752:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016754:	68bb      	ldr	r3, [r7, #8]
 8016756:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	2200      	movs	r2, #0
 801675c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	f107 0210 	add.w	r2, r7, #16
 8016764:	4611      	mov	r1, r2
 8016766:	4618      	mov	r0, r3
 8016768:	f7ff fdda 	bl	8016320 <validate>
 801676c:	4603      	mov	r3, r0
 801676e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016776:	2b00      	cmp	r3, #0
 8016778:	d107      	bne.n	801678a <f_write+0x44>
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	7c5b      	ldrb	r3, [r3, #17]
 801677e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016786:	2b00      	cmp	r3, #0
 8016788:	d002      	beq.n	8016790 <f_write+0x4a>
 801678a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801678e:	e16a      	b.n	8016a66 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	7c1b      	ldrb	r3, [r3, #16]
 8016794:	f003 0302 	and.w	r3, r3, #2
 8016798:	2b00      	cmp	r3, #0
 801679a:	d101      	bne.n	80167a0 <f_write+0x5a>
 801679c:	2307      	movs	r3, #7
 801679e:	e162      	b.n	8016a66 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	695a      	ldr	r2, [r3, #20]
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	441a      	add	r2, r3
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	695b      	ldr	r3, [r3, #20]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	f080 814c 	bcs.w	8016a4a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	695b      	ldr	r3, [r3, #20]
 80167b6:	43db      	mvns	r3, r3
 80167b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80167ba:	e146      	b.n	8016a4a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	695b      	ldr	r3, [r3, #20]
 80167c0:	693a      	ldr	r2, [r7, #16]
 80167c2:	8992      	ldrh	r2, [r2, #12]
 80167c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80167c8:	fb01 f202 	mul.w	r2, r1, r2
 80167cc:	1a9b      	subs	r3, r3, r2
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	f040 80f1 	bne.w	80169b6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	695b      	ldr	r3, [r3, #20]
 80167d8:	693a      	ldr	r2, [r7, #16]
 80167da:	8992      	ldrh	r2, [r2, #12]
 80167dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80167e0:	693a      	ldr	r2, [r7, #16]
 80167e2:	8952      	ldrh	r2, [r2, #10]
 80167e4:	3a01      	subs	r2, #1
 80167e6:	4013      	ands	r3, r2
 80167e8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80167ea:	69bb      	ldr	r3, [r7, #24]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d143      	bne.n	8016878 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	695b      	ldr	r3, [r3, #20]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d10c      	bne.n	8016812 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	689b      	ldr	r3, [r3, #8]
 80167fc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80167fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016800:	2b00      	cmp	r3, #0
 8016802:	d11a      	bne.n	801683a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	2100      	movs	r1, #0
 8016808:	4618      	mov	r0, r3
 801680a:	f7fe fa49 	bl	8014ca0 <create_chain>
 801680e:	62b8      	str	r0, [r7, #40]	; 0x28
 8016810:	e013      	b.n	801683a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016816:	2b00      	cmp	r3, #0
 8016818:	d007      	beq.n	801682a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	695b      	ldr	r3, [r3, #20]
 801681e:	4619      	mov	r1, r3
 8016820:	68f8      	ldr	r0, [r7, #12]
 8016822:	f7fe fad5 	bl	8014dd0 <clmt_clust>
 8016826:	62b8      	str	r0, [r7, #40]	; 0x28
 8016828:	e007      	b.n	801683a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801682a:	68fa      	ldr	r2, [r7, #12]
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	699b      	ldr	r3, [r3, #24]
 8016830:	4619      	mov	r1, r3
 8016832:	4610      	mov	r0, r2
 8016834:	f7fe fa34 	bl	8014ca0 <create_chain>
 8016838:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801683c:	2b00      	cmp	r3, #0
 801683e:	f000 8109 	beq.w	8016a54 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016844:	2b01      	cmp	r3, #1
 8016846:	d104      	bne.n	8016852 <f_write+0x10c>
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	2202      	movs	r2, #2
 801684c:	745a      	strb	r2, [r3, #17]
 801684e:	2302      	movs	r3, #2
 8016850:	e109      	b.n	8016a66 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016858:	d104      	bne.n	8016864 <f_write+0x11e>
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	2201      	movs	r2, #1
 801685e:	745a      	strb	r2, [r3, #17]
 8016860:	2301      	movs	r3, #1
 8016862:	e100      	b.n	8016a66 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016868:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	689b      	ldr	r3, [r3, #8]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d102      	bne.n	8016878 <f_write+0x132>
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016876:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	7c1b      	ldrb	r3, [r3, #16]
 801687c:	b25b      	sxtb	r3, r3
 801687e:	2b00      	cmp	r3, #0
 8016880:	da18      	bge.n	80168b4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016882:	693b      	ldr	r3, [r7, #16]
 8016884:	7858      	ldrb	r0, [r3, #1]
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	69da      	ldr	r2, [r3, #28]
 8016890:	2301      	movs	r3, #1
 8016892:	f7fd fd71 	bl	8014378 <disk_write>
 8016896:	4603      	mov	r3, r0
 8016898:	2b00      	cmp	r3, #0
 801689a:	d004      	beq.n	80168a6 <f_write+0x160>
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	2201      	movs	r2, #1
 80168a0:	745a      	strb	r2, [r3, #17]
 80168a2:	2301      	movs	r3, #1
 80168a4:	e0df      	b.n	8016a66 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	7c1b      	ldrb	r3, [r3, #16]
 80168aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168ae:	b2da      	uxtb	r2, r3
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80168b4:	693a      	ldr	r2, [r7, #16]
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	699b      	ldr	r3, [r3, #24]
 80168ba:	4619      	mov	r1, r3
 80168bc:	4610      	mov	r0, r2
 80168be:	f7fd ff7b 	bl	80147b8 <clust2sect>
 80168c2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80168c4:	697b      	ldr	r3, [r7, #20]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d104      	bne.n	80168d4 <f_write+0x18e>
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	2202      	movs	r2, #2
 80168ce:	745a      	strb	r2, [r3, #17]
 80168d0:	2302      	movs	r3, #2
 80168d2:	e0c8      	b.n	8016a66 <f_write+0x320>
			sect += csect;
 80168d4:	697a      	ldr	r2, [r7, #20]
 80168d6:	69bb      	ldr	r3, [r7, #24]
 80168d8:	4413      	add	r3, r2
 80168da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80168dc:	693b      	ldr	r3, [r7, #16]
 80168de:	899b      	ldrh	r3, [r3, #12]
 80168e0:	461a      	mov	r2, r3
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80168e8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80168ea:	6a3b      	ldr	r3, [r7, #32]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d043      	beq.n	8016978 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80168f0:	69ba      	ldr	r2, [r7, #24]
 80168f2:	6a3b      	ldr	r3, [r7, #32]
 80168f4:	4413      	add	r3, r2
 80168f6:	693a      	ldr	r2, [r7, #16]
 80168f8:	8952      	ldrh	r2, [r2, #10]
 80168fa:	4293      	cmp	r3, r2
 80168fc:	d905      	bls.n	801690a <f_write+0x1c4>
					cc = fs->csize - csect;
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	895b      	ldrh	r3, [r3, #10]
 8016902:	461a      	mov	r2, r3
 8016904:	69bb      	ldr	r3, [r7, #24]
 8016906:	1ad3      	subs	r3, r2, r3
 8016908:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801690a:	693b      	ldr	r3, [r7, #16]
 801690c:	7858      	ldrb	r0, [r3, #1]
 801690e:	6a3b      	ldr	r3, [r7, #32]
 8016910:	697a      	ldr	r2, [r7, #20]
 8016912:	69f9      	ldr	r1, [r7, #28]
 8016914:	f7fd fd30 	bl	8014378 <disk_write>
 8016918:	4603      	mov	r3, r0
 801691a:	2b00      	cmp	r3, #0
 801691c:	d004      	beq.n	8016928 <f_write+0x1e2>
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	2201      	movs	r2, #1
 8016922:	745a      	strb	r2, [r3, #17]
 8016924:	2301      	movs	r3, #1
 8016926:	e09e      	b.n	8016a66 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	69da      	ldr	r2, [r3, #28]
 801692c:	697b      	ldr	r3, [r7, #20]
 801692e:	1ad3      	subs	r3, r2, r3
 8016930:	6a3a      	ldr	r2, [r7, #32]
 8016932:	429a      	cmp	r2, r3
 8016934:	d918      	bls.n	8016968 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	69da      	ldr	r2, [r3, #28]
 8016940:	697b      	ldr	r3, [r7, #20]
 8016942:	1ad3      	subs	r3, r2, r3
 8016944:	693a      	ldr	r2, [r7, #16]
 8016946:	8992      	ldrh	r2, [r2, #12]
 8016948:	fb02 f303 	mul.w	r3, r2, r3
 801694c:	69fa      	ldr	r2, [r7, #28]
 801694e:	18d1      	adds	r1, r2, r3
 8016950:	693b      	ldr	r3, [r7, #16]
 8016952:	899b      	ldrh	r3, [r3, #12]
 8016954:	461a      	mov	r2, r3
 8016956:	f7fd fdcf 	bl	80144f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	7c1b      	ldrb	r3, [r3, #16]
 801695e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016962:	b2da      	uxtb	r2, r3
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016968:	693b      	ldr	r3, [r7, #16]
 801696a:	899b      	ldrh	r3, [r3, #12]
 801696c:	461a      	mov	r2, r3
 801696e:	6a3b      	ldr	r3, [r7, #32]
 8016970:	fb02 f303 	mul.w	r3, r2, r3
 8016974:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016976:	e04b      	b.n	8016a10 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	69db      	ldr	r3, [r3, #28]
 801697c:	697a      	ldr	r2, [r7, #20]
 801697e:	429a      	cmp	r2, r3
 8016980:	d016      	beq.n	80169b0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	695a      	ldr	r2, [r3, #20]
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801698a:	429a      	cmp	r2, r3
 801698c:	d210      	bcs.n	80169b0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801698e:	693b      	ldr	r3, [r7, #16]
 8016990:	7858      	ldrb	r0, [r3, #1]
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016998:	2301      	movs	r3, #1
 801699a:	697a      	ldr	r2, [r7, #20]
 801699c:	f7fd fccc 	bl	8014338 <disk_read>
 80169a0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d004      	beq.n	80169b0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2201      	movs	r2, #1
 80169aa:	745a      	strb	r2, [r3, #17]
 80169ac:	2301      	movs	r3, #1
 80169ae:	e05a      	b.n	8016a66 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	697a      	ldr	r2, [r7, #20]
 80169b4:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80169b6:	693b      	ldr	r3, [r7, #16]
 80169b8:	899b      	ldrh	r3, [r3, #12]
 80169ba:	4618      	mov	r0, r3
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	695b      	ldr	r3, [r3, #20]
 80169c0:	693a      	ldr	r2, [r7, #16]
 80169c2:	8992      	ldrh	r2, [r2, #12]
 80169c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80169c8:	fb01 f202 	mul.w	r2, r1, r2
 80169cc:	1a9b      	subs	r3, r3, r2
 80169ce:	1ac3      	subs	r3, r0, r3
 80169d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80169d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d901      	bls.n	80169de <f_write+0x298>
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	695b      	ldr	r3, [r3, #20]
 80169e8:	693a      	ldr	r2, [r7, #16]
 80169ea:	8992      	ldrh	r2, [r2, #12]
 80169ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80169f0:	fb00 f202 	mul.w	r2, r0, r2
 80169f4:	1a9b      	subs	r3, r3, r2
 80169f6:	440b      	add	r3, r1
 80169f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169fa:	69f9      	ldr	r1, [r7, #28]
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7fd fd7b 	bl	80144f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	7c1b      	ldrb	r3, [r3, #16]
 8016a06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016a0a:	b2da      	uxtb	r2, r3
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016a10:	69fa      	ldr	r2, [r7, #28]
 8016a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a14:	4413      	add	r3, r2
 8016a16:	61fb      	str	r3, [r7, #28]
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	695a      	ldr	r2, [r3, #20]
 8016a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1e:	441a      	add	r2, r3
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	615a      	str	r2, [r3, #20]
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	68da      	ldr	r2, [r3, #12]
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	695b      	ldr	r3, [r3, #20]
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	bf38      	it	cc
 8016a30:	461a      	movcc	r2, r3
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	60da      	str	r2, [r3, #12]
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	681a      	ldr	r2, [r3, #0]
 8016a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3c:	441a      	add	r2, r3
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	601a      	str	r2, [r3, #0]
 8016a42:	687a      	ldr	r2, [r7, #4]
 8016a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a46:	1ad3      	subs	r3, r2, r3
 8016a48:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	f47f aeb5 	bne.w	80167bc <f_write+0x76>
 8016a52:	e000      	b.n	8016a56 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016a54:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	7c1b      	ldrb	r3, [r3, #16]
 8016a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a5e:	b2da      	uxtb	r2, r3
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8016a64:	2300      	movs	r3, #0
}
 8016a66:	4618      	mov	r0, r3
 8016a68:	3730      	adds	r7, #48	; 0x30
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	bd80      	pop	{r7, pc}

08016a6e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016a6e:	b580      	push	{r7, lr}
 8016a70:	b086      	sub	sp, #24
 8016a72:	af00      	add	r7, sp, #0
 8016a74:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f107 0208 	add.w	r2, r7, #8
 8016a7c:	4611      	mov	r1, r2
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7ff fc4e 	bl	8016320 <validate>
 8016a84:	4603      	mov	r3, r0
 8016a86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016a88:	7dfb      	ldrb	r3, [r7, #23]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d168      	bne.n	8016b60 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	7c1b      	ldrb	r3, [r3, #16]
 8016a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d062      	beq.n	8016b60 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	7c1b      	ldrb	r3, [r3, #16]
 8016a9e:	b25b      	sxtb	r3, r3
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	da15      	bge.n	8016ad0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016aa4:	68bb      	ldr	r3, [r7, #8]
 8016aa6:	7858      	ldrb	r0, [r3, #1]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	69da      	ldr	r2, [r3, #28]
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	f7fd fc60 	bl	8014378 <disk_write>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d001      	beq.n	8016ac2 <f_sync+0x54>
 8016abe:	2301      	movs	r3, #1
 8016ac0:	e04f      	b.n	8016b62 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	7c1b      	ldrb	r3, [r3, #16]
 8016ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016aca:	b2da      	uxtb	r2, r3
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8016ad0:	f7f9 feec 	bl	80108ac <get_fattime>
 8016ad4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8016ad6:	68ba      	ldr	r2, [r7, #8]
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6a1b      	ldr	r3, [r3, #32]
 8016adc:	4619      	mov	r1, r3
 8016ade:	4610      	mov	r0, r2
 8016ae0:	f7fd fdcc 	bl	801467c <move_window>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8016ae8:	7dfb      	ldrb	r3, [r7, #23]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d138      	bne.n	8016b60 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016af2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	330b      	adds	r3, #11
 8016af8:	781a      	ldrb	r2, [r3, #0]
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	330b      	adds	r3, #11
 8016afe:	f042 0220 	orr.w	r2, r2, #32
 8016b02:	b2d2      	uxtb	r2, r2
 8016b04:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6818      	ldr	r0, [r3, #0]
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	689b      	ldr	r3, [r3, #8]
 8016b0e:	461a      	mov	r2, r3
 8016b10:	68f9      	ldr	r1, [r7, #12]
 8016b12:	f7fe fb5a 	bl	80151ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	f103 021c 	add.w	r2, r3, #28
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	68db      	ldr	r3, [r3, #12]
 8016b20:	4619      	mov	r1, r3
 8016b22:	4610      	mov	r0, r2
 8016b24:	f7fd fcbc 	bl	80144a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	3316      	adds	r3, #22
 8016b2c:	6939      	ldr	r1, [r7, #16]
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7fd fcb6 	bl	80144a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	3312      	adds	r3, #18
 8016b38:	2100      	movs	r1, #0
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7fd fc95 	bl	801446a <st_word>
					fs->wflag = 1;
 8016b40:	68bb      	ldr	r3, [r7, #8]
 8016b42:	2201      	movs	r2, #1
 8016b44:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016b46:	68bb      	ldr	r3, [r7, #8]
 8016b48:	4618      	mov	r0, r3
 8016b4a:	f7fd fdc5 	bl	80146d8 <sync_fs>
 8016b4e:	4603      	mov	r3, r0
 8016b50:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	7c1b      	ldrb	r3, [r3, #16]
 8016b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016b5a:	b2da      	uxtb	r2, r3
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8016b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	3718      	adds	r7, #24
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}

08016b6a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016b6a:	b580      	push	{r7, lr}
 8016b6c:	b084      	sub	sp, #16
 8016b6e:	af00      	add	r7, sp, #0
 8016b70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016b72:	6878      	ldr	r0, [r7, #4]
 8016b74:	f7ff ff7b 	bl	8016a6e <f_sync>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8016b7c:	7bfb      	ldrb	r3, [r7, #15]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d10e      	bne.n	8016ba0 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	f107 0208 	add.w	r2, r7, #8
 8016b88:	4611      	mov	r1, r2
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f7ff fbc8 	bl	8016320 <validate>
 8016b90:	4603      	mov	r3, r0
 8016b92:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016b94:	7bfb      	ldrb	r3, [r7, #15]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d102      	bne.n	8016ba0 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8016ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3710      	adds	r7, #16
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}

08016baa <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8016baa:	b580      	push	{r7, lr}
 8016bac:	b086      	sub	sp, #24
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
 8016bb2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d101      	bne.n	8016bbe <f_opendir+0x14>
 8016bba:	2309      	movs	r3, #9
 8016bbc:	e04c      	b.n	8016c58 <f_opendir+0xae>

	/* Get logical drive */
	obj = &dp->obj;
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8016bc2:	f107 010c 	add.w	r1, r7, #12
 8016bc6:	463b      	mov	r3, r7
 8016bc8:	2200      	movs	r2, #0
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7ff f926 	bl	8015e1c <find_volume>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016bd4:	7dfb      	ldrb	r3, [r7, #23]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d137      	bne.n	8016c4a <f_opendir+0xa0>
		obj->fs = fs;
 8016bda:	68fa      	ldr	r2, [r7, #12]
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	4619      	mov	r1, r3
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f7ff f809 	bl	8015bfc <follow_path>
 8016bea:	4603      	mov	r3, r0
 8016bec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8016bee:	7dfb      	ldrb	r3, [r7, #23]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d125      	bne.n	8016c40 <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016bfa:	b25b      	sxtb	r3, r3
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	db12      	blt.n	8016c26 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8016c00:	693b      	ldr	r3, [r7, #16]
 8016c02:	799b      	ldrb	r3, [r3, #6]
 8016c04:	f003 0310 	and.w	r3, r3, #16
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d00a      	beq.n	8016c22 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016c0c:	68fa      	ldr	r2, [r7, #12]
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	69db      	ldr	r3, [r3, #28]
 8016c12:	4619      	mov	r1, r3
 8016c14:	4610      	mov	r0, r2
 8016c16:	f7fe fab9 	bl	801518c <ld_clust>
 8016c1a:	4602      	mov	r2, r0
 8016c1c:	693b      	ldr	r3, [r7, #16]
 8016c1e:	609a      	str	r2, [r3, #8]
 8016c20:	e001      	b.n	8016c26 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8016c22:	2305      	movs	r3, #5
 8016c24:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8016c26:	7dfb      	ldrb	r3, [r7, #23]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d109      	bne.n	8016c40 <f_opendir+0x96>
				obj->id = fs->id;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	88da      	ldrh	r2, [r3, #6]
 8016c30:	693b      	ldr	r3, [r7, #16]
 8016c32:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016c34:	2100      	movs	r1, #0
 8016c36:	6878      	ldr	r0, [r7, #4]
 8016c38:	f7fe f902 	bl	8014e40 <dir_sdi>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016c40:	7dfb      	ldrb	r3, [r7, #23]
 8016c42:	2b04      	cmp	r3, #4
 8016c44:	d101      	bne.n	8016c4a <f_opendir+0xa0>
 8016c46:	2305      	movs	r3, #5
 8016c48:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016c4a:	7dfb      	ldrb	r3, [r7, #23]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d002      	beq.n	8016c56 <f_opendir+0xac>
 8016c50:	693b      	ldr	r3, [r7, #16]
 8016c52:	2200      	movs	r2, #0
 8016c54:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3718      	adds	r7, #24
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}

08016c60 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b084      	sub	sp, #16
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	f107 0208 	add.w	r2, r7, #8
 8016c6e:	4611      	mov	r1, r2
 8016c70:	4618      	mov	r0, r3
 8016c72:	f7ff fb55 	bl	8016320 <validate>
 8016c76:	4603      	mov	r3, r0
 8016c78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016c7a:	7bfb      	ldrb	r3, [r7, #15]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d102      	bne.n	8016c86 <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2200      	movs	r2, #0
 8016c84:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8016c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3710      	adds	r7, #16
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}

08016c90 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b096      	sub	sp, #88	; 0x58
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8016c98:	f107 0108 	add.w	r1, r7, #8
 8016c9c:	1d3b      	adds	r3, r7, #4
 8016c9e:	2202      	movs	r2, #2
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7ff f8bb 	bl	8015e1c <find_volume>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8016cac:	68bb      	ldr	r3, [r7, #8]
 8016cae:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8016cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	f040 80f2 	bne.w	8016e9e <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	f107 030c 	add.w	r3, r7, #12
 8016cc0:	4611      	mov	r1, r2
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7fe ff9a 	bl	8015bfc <follow_path>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8016cce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d102      	bne.n	8016cdc <f_mkdir+0x4c>
 8016cd6:	2308      	movs	r3, #8
 8016cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8016cdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ce0:	2b04      	cmp	r3, #4
 8016ce2:	f040 80dc 	bne.w	8016e9e <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016ce6:	f107 030c 	add.w	r3, r7, #12
 8016cea:	2100      	movs	r1, #0
 8016cec:	4618      	mov	r0, r3
 8016cee:	f7fd ffd7 	bl	8014ca0 <create_chain>
 8016cf2:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016cf4:	68bb      	ldr	r3, [r7, #8]
 8016cf6:	895b      	ldrh	r3, [r3, #10]
 8016cf8:	461a      	mov	r2, r3
 8016cfa:	68bb      	ldr	r3, [r7, #8]
 8016cfc:	899b      	ldrh	r3, [r3, #12]
 8016cfe:	fb02 f303 	mul.w	r3, r2, r3
 8016d02:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8016d04:	2300      	movs	r3, #0
 8016d06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8016d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d102      	bne.n	8016d16 <f_mkdir+0x86>
 8016d10:	2307      	movs	r3, #7
 8016d12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8016d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d18:	2b01      	cmp	r3, #1
 8016d1a:	d102      	bne.n	8016d22 <f_mkdir+0x92>
 8016d1c:	2302      	movs	r3, #2
 8016d1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d28:	d102      	bne.n	8016d30 <f_mkdir+0xa0>
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8016d30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d106      	bne.n	8016d46 <f_mkdir+0xb6>
 8016d38:	68bb      	ldr	r3, [r7, #8]
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fd fc5a 	bl	80145f4 <sync_window>
 8016d40:	4603      	mov	r3, r0
 8016d42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8016d46:	f7f9 fdb1 	bl	80108ac <get_fattime>
 8016d4a:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8016d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d16c      	bne.n	8016e2e <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8016d54:	68bb      	ldr	r3, [r7, #8]
 8016d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7fd fd2d 	bl	80147b8 <clust2sect>
 8016d5e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8016d60:	68bb      	ldr	r3, [r7, #8]
 8016d62:	3338      	adds	r3, #56	; 0x38
 8016d64:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	899b      	ldrh	r3, [r3, #12]
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	2100      	movs	r1, #0
 8016d6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d70:	f7fd fbe3 	bl	801453a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8016d74:	220b      	movs	r2, #11
 8016d76:	2120      	movs	r1, #32
 8016d78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d7a:	f7fd fbde 	bl	801453a <mem_set>
					dir[DIR_Name] = '.';
 8016d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d80:	222e      	movs	r2, #46	; 0x2e
 8016d82:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8016d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d86:	330b      	adds	r3, #11
 8016d88:	2210      	movs	r2, #16
 8016d8a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8016d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d8e:	3316      	adds	r3, #22
 8016d90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016d92:	4618      	mov	r0, r3
 8016d94:	f7fd fb84 	bl	80144a0 <st_dword>
					st_clust(fs, dir, dcl);
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f7fe fa13 	bl	80151ca <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8016da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016da6:	3320      	adds	r3, #32
 8016da8:	2220      	movs	r2, #32
 8016daa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016dac:	4618      	mov	r0, r3
 8016dae:	f7fd fba3 	bl	80144f8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016db4:	3321      	adds	r3, #33	; 0x21
 8016db6:	222e      	movs	r2, #46	; 0x2e
 8016db8:	701a      	strb	r2, [r3, #0]
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8016dbe:	68bb      	ldr	r3, [r7, #8]
 8016dc0:	781b      	ldrb	r3, [r3, #0]
 8016dc2:	2b03      	cmp	r3, #3
 8016dc4:	d106      	bne.n	8016dd4 <f_mkdir+0x144>
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	d101      	bne.n	8016dd4 <f_mkdir+0x144>
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8016dd4:	68b8      	ldr	r0, [r7, #8]
 8016dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016dd8:	3320      	adds	r3, #32
 8016dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016ddc:	4619      	mov	r1, r3
 8016dde:	f7fe f9f4 	bl	80151ca <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	895b      	ldrh	r3, [r3, #10]
 8016de6:	653b      	str	r3, [r7, #80]	; 0x50
 8016de8:	e01c      	b.n	8016e24 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8016dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016dec:	1c5a      	adds	r2, r3, #1
 8016dee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016df0:	68ba      	ldr	r2, [r7, #8]
 8016df2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	2201      	movs	r2, #1
 8016df8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7fd fbf9 	bl	80145f4 <sync_window>
 8016e02:	4603      	mov	r3, r0
 8016e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8016e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d10d      	bne.n	8016e2c <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	899b      	ldrh	r3, [r3, #12]
 8016e14:	461a      	mov	r2, r3
 8016e16:	2100      	movs	r1, #0
 8016e18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016e1a:	f7fd fb8e 	bl	801453a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e20:	3b01      	subs	r3, #1
 8016e22:	653b      	str	r3, [r7, #80]	; 0x50
 8016e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d1df      	bne.n	8016dea <f_mkdir+0x15a>
 8016e2a:	e000      	b.n	8016e2e <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8016e2c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8016e2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d107      	bne.n	8016e46 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8016e36:	f107 030c 	add.w	r3, r7, #12
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f7fe fc2e 	bl	801569c <dir_register>
 8016e40:	4603      	mov	r3, r0
 8016e42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8016e46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d120      	bne.n	8016e90 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8016e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e50:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8016e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e54:	3316      	adds	r3, #22
 8016e56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7fd fb21 	bl	80144a0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8016e5e:	68bb      	ldr	r3, [r7, #8]
 8016e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e64:	4618      	mov	r0, r3
 8016e66:	f7fe f9b0 	bl	80151ca <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8016e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e6c:	330b      	adds	r3, #11
 8016e6e:	2210      	movs	r2, #16
 8016e70:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	2201      	movs	r2, #1
 8016e76:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8016e78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d10e      	bne.n	8016e9e <f_mkdir+0x20e>
					res = sync_fs(fs);
 8016e80:	68bb      	ldr	r3, [r7, #8]
 8016e82:	4618      	mov	r0, r3
 8016e84:	f7fd fc28 	bl	80146d8 <sync_fs>
 8016e88:	4603      	mov	r3, r0
 8016e8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8016e8e:	e006      	b.n	8016e9e <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8016e90:	f107 030c 	add.w	r3, r7, #12
 8016e94:	2200      	movs	r2, #0
 8016e96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7fd fe9c 	bl	8014bd6 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8016e9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3758      	adds	r7, #88	; 0x58
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}
	...

08016eac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016eac:	b480      	push	{r7}
 8016eae:	b087      	sub	sp, #28
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	60f8      	str	r0, [r7, #12]
 8016eb4:	60b9      	str	r1, [r7, #8]
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016eba:	2301      	movs	r3, #1
 8016ebc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016ec2:	4b1f      	ldr	r3, [pc, #124]	; (8016f40 <FATFS_LinkDriverEx+0x94>)
 8016ec4:	7a5b      	ldrb	r3, [r3, #9]
 8016ec6:	b2db      	uxtb	r3, r3
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d131      	bne.n	8016f30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016ecc:	4b1c      	ldr	r3, [pc, #112]	; (8016f40 <FATFS_LinkDriverEx+0x94>)
 8016ece:	7a5b      	ldrb	r3, [r3, #9]
 8016ed0:	b2db      	uxtb	r3, r3
 8016ed2:	461a      	mov	r2, r3
 8016ed4:	4b1a      	ldr	r3, [pc, #104]	; (8016f40 <FATFS_LinkDriverEx+0x94>)
 8016ed6:	2100      	movs	r1, #0
 8016ed8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016eda:	4b19      	ldr	r3, [pc, #100]	; (8016f40 <FATFS_LinkDriverEx+0x94>)
 8016edc:	7a5b      	ldrb	r3, [r3, #9]
 8016ede:	b2db      	uxtb	r3, r3
 8016ee0:	4a17      	ldr	r2, [pc, #92]	; (8016f40 <FATFS_LinkDriverEx+0x94>)
 8016ee2:	009b      	lsls	r3, r3, #2
 8016ee4:	4413      	add	r3, r2
 8016ee6:	68fa      	ldr	r2, [r7, #12]
 8016ee8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016eea:	4b15      	ldr	r3, [pc, #84]	; (8016f40 <FATFS_LinkDriverEx+0x94>)
 8016eec:	7a5b      	ldrb	r3, [r3, #9]
 8016eee:	b2db      	uxtb	r3, r3
 8016ef0:	461a      	mov	r2, r3
 8016ef2:	4b13      	ldr	r3, [pc, #76]	; (8016f40 <FATFS_LinkDriverEx+0x94>)
 8016ef4:	4413      	add	r3, r2
 8016ef6:	79fa      	ldrb	r2, [r7, #7]
 8016ef8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016efa:	4b11      	ldr	r3, [pc, #68]	; (8016f40 <FATFS_LinkDriverEx+0x94>)
 8016efc:	7a5b      	ldrb	r3, [r3, #9]
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	1c5a      	adds	r2, r3, #1
 8016f02:	b2d1      	uxtb	r1, r2
 8016f04:	4a0e      	ldr	r2, [pc, #56]	; (8016f40 <FATFS_LinkDriverEx+0x94>)
 8016f06:	7251      	strb	r1, [r2, #9]
 8016f08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016f0a:	7dbb      	ldrb	r3, [r7, #22]
 8016f0c:	3330      	adds	r3, #48	; 0x30
 8016f0e:	b2da      	uxtb	r2, r3
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016f14:	68bb      	ldr	r3, [r7, #8]
 8016f16:	3301      	adds	r3, #1
 8016f18:	223a      	movs	r2, #58	; 0x3a
 8016f1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	3302      	adds	r3, #2
 8016f20:	222f      	movs	r2, #47	; 0x2f
 8016f22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016f24:	68bb      	ldr	r3, [r7, #8]
 8016f26:	3303      	adds	r3, #3
 8016f28:	2200      	movs	r2, #0
 8016f2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	371c      	adds	r7, #28
 8016f36:	46bd      	mov	sp, r7
 8016f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3c:	4770      	bx	lr
 8016f3e:	bf00      	nop
 8016f40:	200069b0 	.word	0x200069b0

08016f44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b082      	sub	sp, #8
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
 8016f4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016f4e:	2200      	movs	r2, #0
 8016f50:	6839      	ldr	r1, [r7, #0]
 8016f52:	6878      	ldr	r0, [r7, #4]
 8016f54:	f7ff ffaa 	bl	8016eac <FATFS_LinkDriverEx>
 8016f58:	4603      	mov	r3, r0
}
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	3708      	adds	r7, #8
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	bd80      	pop	{r7, pc}
	...

08016f64 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016f64:	b480      	push	{r7}
 8016f66:	b085      	sub	sp, #20
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	6039      	str	r1, [r7, #0]
 8016f6e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016f70:	88fb      	ldrh	r3, [r7, #6]
 8016f72:	2b7f      	cmp	r3, #127	; 0x7f
 8016f74:	d802      	bhi.n	8016f7c <ff_convert+0x18>
		c = chr;
 8016f76:	88fb      	ldrh	r3, [r7, #6]
 8016f78:	81fb      	strh	r3, [r7, #14]
 8016f7a:	e025      	b.n	8016fc8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d00b      	beq.n	8016f9a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016f82:	88fb      	ldrh	r3, [r7, #6]
 8016f84:	2bff      	cmp	r3, #255	; 0xff
 8016f86:	d805      	bhi.n	8016f94 <ff_convert+0x30>
 8016f88:	88fb      	ldrh	r3, [r7, #6]
 8016f8a:	3b80      	subs	r3, #128	; 0x80
 8016f8c:	4a12      	ldr	r2, [pc, #72]	; (8016fd8 <ff_convert+0x74>)
 8016f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016f92:	e000      	b.n	8016f96 <ff_convert+0x32>
 8016f94:	2300      	movs	r3, #0
 8016f96:	81fb      	strh	r3, [r7, #14]
 8016f98:	e016      	b.n	8016fc8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	81fb      	strh	r3, [r7, #14]
 8016f9e:	e009      	b.n	8016fb4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016fa0:	89fb      	ldrh	r3, [r7, #14]
 8016fa2:	4a0d      	ldr	r2, [pc, #52]	; (8016fd8 <ff_convert+0x74>)
 8016fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016fa8:	88fa      	ldrh	r2, [r7, #6]
 8016faa:	429a      	cmp	r2, r3
 8016fac:	d006      	beq.n	8016fbc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016fae:	89fb      	ldrh	r3, [r7, #14]
 8016fb0:	3301      	adds	r3, #1
 8016fb2:	81fb      	strh	r3, [r7, #14]
 8016fb4:	89fb      	ldrh	r3, [r7, #14]
 8016fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8016fb8:	d9f2      	bls.n	8016fa0 <ff_convert+0x3c>
 8016fba:	e000      	b.n	8016fbe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016fbc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016fbe:	89fb      	ldrh	r3, [r7, #14]
 8016fc0:	3380      	adds	r3, #128	; 0x80
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	b2db      	uxtb	r3, r3
 8016fc6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016fc8:	89fb      	ldrh	r3, [r7, #14]
}
 8016fca:	4618      	mov	r0, r3
 8016fcc:	3714      	adds	r7, #20
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd4:	4770      	bx	lr
 8016fd6:	bf00      	nop
 8016fd8:	08018698 	.word	0x08018698

08016fdc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8016fdc:	b480      	push	{r7}
 8016fde:	b087      	sub	sp, #28
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8016fe6:	88fb      	ldrh	r3, [r7, #6]
 8016fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016fec:	d201      	bcs.n	8016ff2 <ff_wtoupper+0x16>
 8016fee:	4b3e      	ldr	r3, [pc, #248]	; (80170e8 <ff_wtoupper+0x10c>)
 8016ff0:	e000      	b.n	8016ff4 <ff_wtoupper+0x18>
 8016ff2:	4b3e      	ldr	r3, [pc, #248]	; (80170ec <ff_wtoupper+0x110>)
 8016ff4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8016ff6:	697b      	ldr	r3, [r7, #20]
 8016ff8:	1c9a      	adds	r2, r3, #2
 8016ffa:	617a      	str	r2, [r7, #20]
 8016ffc:	881b      	ldrh	r3, [r3, #0]
 8016ffe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017000:	8a7b      	ldrh	r3, [r7, #18]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d068      	beq.n	80170d8 <ff_wtoupper+0xfc>
 8017006:	88fa      	ldrh	r2, [r7, #6]
 8017008:	8a7b      	ldrh	r3, [r7, #18]
 801700a:	429a      	cmp	r2, r3
 801700c:	d364      	bcc.n	80170d8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801700e:	697b      	ldr	r3, [r7, #20]
 8017010:	1c9a      	adds	r2, r3, #2
 8017012:	617a      	str	r2, [r7, #20]
 8017014:	881b      	ldrh	r3, [r3, #0]
 8017016:	823b      	strh	r3, [r7, #16]
 8017018:	8a3b      	ldrh	r3, [r7, #16]
 801701a:	0a1b      	lsrs	r3, r3, #8
 801701c:	81fb      	strh	r3, [r7, #14]
 801701e:	8a3b      	ldrh	r3, [r7, #16]
 8017020:	b2db      	uxtb	r3, r3
 8017022:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8017024:	88fa      	ldrh	r2, [r7, #6]
 8017026:	8a79      	ldrh	r1, [r7, #18]
 8017028:	8a3b      	ldrh	r3, [r7, #16]
 801702a:	440b      	add	r3, r1
 801702c:	429a      	cmp	r2, r3
 801702e:	da49      	bge.n	80170c4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8017030:	89fb      	ldrh	r3, [r7, #14]
 8017032:	2b08      	cmp	r3, #8
 8017034:	d84f      	bhi.n	80170d6 <ff_wtoupper+0xfa>
 8017036:	a201      	add	r2, pc, #4	; (adr r2, 801703c <ff_wtoupper+0x60>)
 8017038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801703c:	08017061 	.word	0x08017061
 8017040:	08017073 	.word	0x08017073
 8017044:	08017089 	.word	0x08017089
 8017048:	08017091 	.word	0x08017091
 801704c:	08017099 	.word	0x08017099
 8017050:	080170a1 	.word	0x080170a1
 8017054:	080170a9 	.word	0x080170a9
 8017058:	080170b1 	.word	0x080170b1
 801705c:	080170b9 	.word	0x080170b9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017060:	88fa      	ldrh	r2, [r7, #6]
 8017062:	8a7b      	ldrh	r3, [r7, #18]
 8017064:	1ad3      	subs	r3, r2, r3
 8017066:	005b      	lsls	r3, r3, #1
 8017068:	697a      	ldr	r2, [r7, #20]
 801706a:	4413      	add	r3, r2
 801706c:	881b      	ldrh	r3, [r3, #0]
 801706e:	80fb      	strh	r3, [r7, #6]
 8017070:	e027      	b.n	80170c2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017072:	88fa      	ldrh	r2, [r7, #6]
 8017074:	8a7b      	ldrh	r3, [r7, #18]
 8017076:	1ad3      	subs	r3, r2, r3
 8017078:	b29b      	uxth	r3, r3
 801707a:	f003 0301 	and.w	r3, r3, #1
 801707e:	b29b      	uxth	r3, r3
 8017080:	88fa      	ldrh	r2, [r7, #6]
 8017082:	1ad3      	subs	r3, r2, r3
 8017084:	80fb      	strh	r3, [r7, #6]
 8017086:	e01c      	b.n	80170c2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017088:	88fb      	ldrh	r3, [r7, #6]
 801708a:	3b10      	subs	r3, #16
 801708c:	80fb      	strh	r3, [r7, #6]
 801708e:	e018      	b.n	80170c2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017090:	88fb      	ldrh	r3, [r7, #6]
 8017092:	3b20      	subs	r3, #32
 8017094:	80fb      	strh	r3, [r7, #6]
 8017096:	e014      	b.n	80170c2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017098:	88fb      	ldrh	r3, [r7, #6]
 801709a:	3b30      	subs	r3, #48	; 0x30
 801709c:	80fb      	strh	r3, [r7, #6]
 801709e:	e010      	b.n	80170c2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80170a0:	88fb      	ldrh	r3, [r7, #6]
 80170a2:	3b1a      	subs	r3, #26
 80170a4:	80fb      	strh	r3, [r7, #6]
 80170a6:	e00c      	b.n	80170c2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80170a8:	88fb      	ldrh	r3, [r7, #6]
 80170aa:	3308      	adds	r3, #8
 80170ac:	80fb      	strh	r3, [r7, #6]
 80170ae:	e008      	b.n	80170c2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80170b0:	88fb      	ldrh	r3, [r7, #6]
 80170b2:	3b50      	subs	r3, #80	; 0x50
 80170b4:	80fb      	strh	r3, [r7, #6]
 80170b6:	e004      	b.n	80170c2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80170b8:	88fb      	ldrh	r3, [r7, #6]
 80170ba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80170be:	80fb      	strh	r3, [r7, #6]
 80170c0:	bf00      	nop
			}
			break;
 80170c2:	e008      	b.n	80170d6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80170c4:	89fb      	ldrh	r3, [r7, #14]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d195      	bne.n	8016ff6 <ff_wtoupper+0x1a>
 80170ca:	8a3b      	ldrh	r3, [r7, #16]
 80170cc:	005b      	lsls	r3, r3, #1
 80170ce:	697a      	ldr	r2, [r7, #20]
 80170d0:	4413      	add	r3, r2
 80170d2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80170d4:	e78f      	b.n	8016ff6 <ff_wtoupper+0x1a>
			break;
 80170d6:	bf00      	nop
	}

	return chr;
 80170d8:	88fb      	ldrh	r3, [r7, #6]
}
 80170da:	4618      	mov	r0, r3
 80170dc:	371c      	adds	r7, #28
 80170de:	46bd      	mov	sp, r7
 80170e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e4:	4770      	bx	lr
 80170e6:	bf00      	nop
 80170e8:	08018798 	.word	0x08018798
 80170ec:	0801898c 	.word	0x0801898c

080170f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80170f4:	2200      	movs	r2, #0
 80170f6:	4912      	ldr	r1, [pc, #72]	; (8017140 <MX_USB_DEVICE_Init+0x50>)
 80170f8:	4812      	ldr	r0, [pc, #72]	; (8017144 <MX_USB_DEVICE_Init+0x54>)
 80170fa:	f7fb fddc 	bl	8012cb6 <USBD_Init>
 80170fe:	4603      	mov	r3, r0
 8017100:	2b00      	cmp	r3, #0
 8017102:	d001      	beq.n	8017108 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017104:	f7ea fd98 	bl	8001c38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017108:	490f      	ldr	r1, [pc, #60]	; (8017148 <MX_USB_DEVICE_Init+0x58>)
 801710a:	480e      	ldr	r0, [pc, #56]	; (8017144 <MX_USB_DEVICE_Init+0x54>)
 801710c:	f7fb fe03 	bl	8012d16 <USBD_RegisterClass>
 8017110:	4603      	mov	r3, r0
 8017112:	2b00      	cmp	r3, #0
 8017114:	d001      	beq.n	801711a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017116:	f7ea fd8f 	bl	8001c38 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801711a:	490c      	ldr	r1, [pc, #48]	; (801714c <MX_USB_DEVICE_Init+0x5c>)
 801711c:	4809      	ldr	r0, [pc, #36]	; (8017144 <MX_USB_DEVICE_Init+0x54>)
 801711e:	f7fa f8ad 	bl	801127c <USBD_MSC_RegisterStorage>
 8017122:	4603      	mov	r3, r0
 8017124:	2b00      	cmp	r3, #0
 8017126:	d001      	beq.n	801712c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017128:	f7ea fd86 	bl	8001c38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801712c:	4805      	ldr	r0, [pc, #20]	; (8017144 <MX_USB_DEVICE_Init+0x54>)
 801712e:	f7fb fe28 	bl	8012d82 <USBD_Start>
 8017132:	4603      	mov	r3, r0
 8017134:	2b00      	cmp	r3, #0
 8017136:	d001      	beq.n	801713c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017138:	f7ea fd7e 	bl	8001c38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801713c:	bf00      	nop
 801713e:	bd80      	pop	{r7, pc}
 8017140:	200000b4 	.word	0x200000b4
 8017144:	200069bc 	.word	0x200069bc
 8017148:	2000000c 	.word	0x2000000c
 801714c:	20000114 	.word	0x20000114

08017150 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017150:	b480      	push	{r7}
 8017152:	b083      	sub	sp, #12
 8017154:	af00      	add	r7, sp, #0
 8017156:	4603      	mov	r3, r0
 8017158:	6039      	str	r1, [r7, #0]
 801715a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	2212      	movs	r2, #18
 8017160:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017162:	4b03      	ldr	r3, [pc, #12]	; (8017170 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017164:	4618      	mov	r0, r3
 8017166:	370c      	adds	r7, #12
 8017168:	46bd      	mov	sp, r7
 801716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801716e:	4770      	bx	lr
 8017170:	200000d4 	.word	0x200000d4

08017174 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017174:	b480      	push	{r7}
 8017176:	b083      	sub	sp, #12
 8017178:	af00      	add	r7, sp, #0
 801717a:	4603      	mov	r3, r0
 801717c:	6039      	str	r1, [r7, #0]
 801717e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	2204      	movs	r2, #4
 8017184:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017186:	4b03      	ldr	r3, [pc, #12]	; (8017194 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017188:	4618      	mov	r0, r3
 801718a:	370c      	adds	r7, #12
 801718c:	46bd      	mov	sp, r7
 801718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017192:	4770      	bx	lr
 8017194:	200000f4 	.word	0x200000f4

08017198 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	af00      	add	r7, sp, #0
 801719e:	4603      	mov	r3, r0
 80171a0:	6039      	str	r1, [r7, #0]
 80171a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80171a4:	79fb      	ldrb	r3, [r7, #7]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d105      	bne.n	80171b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80171aa:	683a      	ldr	r2, [r7, #0]
 80171ac:	4907      	ldr	r1, [pc, #28]	; (80171cc <USBD_FS_ProductStrDescriptor+0x34>)
 80171ae:	4808      	ldr	r0, [pc, #32]	; (80171d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80171b0:	f7fc ffbe 	bl	8014130 <USBD_GetString>
 80171b4:	e004      	b.n	80171c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80171b6:	683a      	ldr	r2, [r7, #0]
 80171b8:	4904      	ldr	r1, [pc, #16]	; (80171cc <USBD_FS_ProductStrDescriptor+0x34>)
 80171ba:	4805      	ldr	r0, [pc, #20]	; (80171d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80171bc:	f7fc ffb8 	bl	8014130 <USBD_GetString>
  }
  return USBD_StrDesc;
 80171c0:	4b02      	ldr	r3, [pc, #8]	; (80171cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80171c2:	4618      	mov	r0, r3
 80171c4:	3708      	adds	r7, #8
 80171c6:	46bd      	mov	sp, r7
 80171c8:	bd80      	pop	{r7, pc}
 80171ca:	bf00      	nop
 80171cc:	20006c98 	.word	0x20006c98
 80171d0:	08018594 	.word	0x08018594

080171d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b082      	sub	sp, #8
 80171d8:	af00      	add	r7, sp, #0
 80171da:	4603      	mov	r3, r0
 80171dc:	6039      	str	r1, [r7, #0]
 80171de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80171e0:	683a      	ldr	r2, [r7, #0]
 80171e2:	4904      	ldr	r1, [pc, #16]	; (80171f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80171e4:	4804      	ldr	r0, [pc, #16]	; (80171f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80171e6:	f7fc ffa3 	bl	8014130 <USBD_GetString>
  return USBD_StrDesc;
 80171ea:	4b02      	ldr	r3, [pc, #8]	; (80171f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	3708      	adds	r7, #8
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bd80      	pop	{r7, pc}
 80171f4:	20006c98 	.word	0x20006c98
 80171f8:	080185a4 	.word	0x080185a4

080171fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b082      	sub	sp, #8
 8017200:	af00      	add	r7, sp, #0
 8017202:	4603      	mov	r3, r0
 8017204:	6039      	str	r1, [r7, #0]
 8017206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017208:	683b      	ldr	r3, [r7, #0]
 801720a:	221a      	movs	r2, #26
 801720c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801720e:	f000 f855 	bl	80172bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017212:	4b02      	ldr	r3, [pc, #8]	; (801721c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017214:	4618      	mov	r0, r3
 8017216:	3708      	adds	r7, #8
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}
 801721c:	200000f8 	.word	0x200000f8

08017220 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b082      	sub	sp, #8
 8017224:	af00      	add	r7, sp, #0
 8017226:	4603      	mov	r3, r0
 8017228:	6039      	str	r1, [r7, #0]
 801722a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801722c:	79fb      	ldrb	r3, [r7, #7]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d105      	bne.n	801723e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017232:	683a      	ldr	r2, [r7, #0]
 8017234:	4907      	ldr	r1, [pc, #28]	; (8017254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017236:	4808      	ldr	r0, [pc, #32]	; (8017258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017238:	f7fc ff7a 	bl	8014130 <USBD_GetString>
 801723c:	e004      	b.n	8017248 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801723e:	683a      	ldr	r2, [r7, #0]
 8017240:	4904      	ldr	r1, [pc, #16]	; (8017254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017242:	4805      	ldr	r0, [pc, #20]	; (8017258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017244:	f7fc ff74 	bl	8014130 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017248:	4b02      	ldr	r3, [pc, #8]	; (8017254 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801724a:	4618      	mov	r0, r3
 801724c:	3708      	adds	r7, #8
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
 8017252:	bf00      	nop
 8017254:	20006c98 	.word	0x20006c98
 8017258:	080185b8 	.word	0x080185b8

0801725c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801725c:	b580      	push	{r7, lr}
 801725e:	b082      	sub	sp, #8
 8017260:	af00      	add	r7, sp, #0
 8017262:	4603      	mov	r3, r0
 8017264:	6039      	str	r1, [r7, #0]
 8017266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017268:	79fb      	ldrb	r3, [r7, #7]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d105      	bne.n	801727a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801726e:	683a      	ldr	r2, [r7, #0]
 8017270:	4907      	ldr	r1, [pc, #28]	; (8017290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017272:	4808      	ldr	r0, [pc, #32]	; (8017294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017274:	f7fc ff5c 	bl	8014130 <USBD_GetString>
 8017278:	e004      	b.n	8017284 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801727a:	683a      	ldr	r2, [r7, #0]
 801727c:	4904      	ldr	r1, [pc, #16]	; (8017290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801727e:	4805      	ldr	r0, [pc, #20]	; (8017294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017280:	f7fc ff56 	bl	8014130 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017284:	4b02      	ldr	r3, [pc, #8]	; (8017290 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017286:	4618      	mov	r0, r3
 8017288:	3708      	adds	r7, #8
 801728a:	46bd      	mov	sp, r7
 801728c:	bd80      	pop	{r7, pc}
 801728e:	bf00      	nop
 8017290:	20006c98 	.word	0x20006c98
 8017294:	080185c4 	.word	0x080185c4

08017298 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017298:	b480      	push	{r7}
 801729a:	b083      	sub	sp, #12
 801729c:	af00      	add	r7, sp, #0
 801729e:	4603      	mov	r3, r0
 80172a0:	6039      	str	r1, [r7, #0]
 80172a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	220c      	movs	r2, #12
 80172a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80172aa:	4b03      	ldr	r3, [pc, #12]	; (80172b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80172ac:	4618      	mov	r0, r3
 80172ae:	370c      	adds	r7, #12
 80172b0:	46bd      	mov	sp, r7
 80172b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b6:	4770      	bx	lr
 80172b8:	200000e8 	.word	0x200000e8

080172bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b084      	sub	sp, #16
 80172c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80172c2:	4b0f      	ldr	r3, [pc, #60]	; (8017300 <Get_SerialNum+0x44>)
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80172c8:	4b0e      	ldr	r3, [pc, #56]	; (8017304 <Get_SerialNum+0x48>)
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80172ce:	4b0e      	ldr	r3, [pc, #56]	; (8017308 <Get_SerialNum+0x4c>)
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80172d4:	68fa      	ldr	r2, [r7, #12]
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	4413      	add	r3, r2
 80172da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d009      	beq.n	80172f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80172e2:	2208      	movs	r2, #8
 80172e4:	4909      	ldr	r1, [pc, #36]	; (801730c <Get_SerialNum+0x50>)
 80172e6:	68f8      	ldr	r0, [r7, #12]
 80172e8:	f000 f814 	bl	8017314 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80172ec:	2204      	movs	r2, #4
 80172ee:	4908      	ldr	r1, [pc, #32]	; (8017310 <Get_SerialNum+0x54>)
 80172f0:	68b8      	ldr	r0, [r7, #8]
 80172f2:	f000 f80f 	bl	8017314 <IntToUnicode>
  }
}
 80172f6:	bf00      	nop
 80172f8:	3710      	adds	r7, #16
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}
 80172fe:	bf00      	nop
 8017300:	1fff7a10 	.word	0x1fff7a10
 8017304:	1fff7a14 	.word	0x1fff7a14
 8017308:	1fff7a18 	.word	0x1fff7a18
 801730c:	200000fa 	.word	0x200000fa
 8017310:	2000010a 	.word	0x2000010a

08017314 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017314:	b480      	push	{r7}
 8017316:	b087      	sub	sp, #28
 8017318:	af00      	add	r7, sp, #0
 801731a:	60f8      	str	r0, [r7, #12]
 801731c:	60b9      	str	r1, [r7, #8]
 801731e:	4613      	mov	r3, r2
 8017320:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017322:	2300      	movs	r3, #0
 8017324:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017326:	2300      	movs	r3, #0
 8017328:	75fb      	strb	r3, [r7, #23]
 801732a:	e027      	b.n	801737c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	0f1b      	lsrs	r3, r3, #28
 8017330:	2b09      	cmp	r3, #9
 8017332:	d80b      	bhi.n	801734c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	0f1b      	lsrs	r3, r3, #28
 8017338:	b2da      	uxtb	r2, r3
 801733a:	7dfb      	ldrb	r3, [r7, #23]
 801733c:	005b      	lsls	r3, r3, #1
 801733e:	4619      	mov	r1, r3
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	440b      	add	r3, r1
 8017344:	3230      	adds	r2, #48	; 0x30
 8017346:	b2d2      	uxtb	r2, r2
 8017348:	701a      	strb	r2, [r3, #0]
 801734a:	e00a      	b.n	8017362 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	0f1b      	lsrs	r3, r3, #28
 8017350:	b2da      	uxtb	r2, r3
 8017352:	7dfb      	ldrb	r3, [r7, #23]
 8017354:	005b      	lsls	r3, r3, #1
 8017356:	4619      	mov	r1, r3
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	440b      	add	r3, r1
 801735c:	3237      	adds	r2, #55	; 0x37
 801735e:	b2d2      	uxtb	r2, r2
 8017360:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	011b      	lsls	r3, r3, #4
 8017366:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017368:	7dfb      	ldrb	r3, [r7, #23]
 801736a:	005b      	lsls	r3, r3, #1
 801736c:	3301      	adds	r3, #1
 801736e:	68ba      	ldr	r2, [r7, #8]
 8017370:	4413      	add	r3, r2
 8017372:	2200      	movs	r2, #0
 8017374:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017376:	7dfb      	ldrb	r3, [r7, #23]
 8017378:	3301      	adds	r3, #1
 801737a:	75fb      	strb	r3, [r7, #23]
 801737c:	7dfa      	ldrb	r2, [r7, #23]
 801737e:	79fb      	ldrb	r3, [r7, #7]
 8017380:	429a      	cmp	r2, r3
 8017382:	d3d3      	bcc.n	801732c <IntToUnicode+0x18>
  }
}
 8017384:	bf00      	nop
 8017386:	bf00      	nop
 8017388:	371c      	adds	r7, #28
 801738a:	46bd      	mov	sp, r7
 801738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017390:	4770      	bx	lr

08017392 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8017392:	b480      	push	{r7}
 8017394:	b083      	sub	sp, #12
 8017396:	af00      	add	r7, sp, #0
 8017398:	4603      	mov	r3, r0
 801739a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801739c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801739e:	4618      	mov	r0, r3
 80173a0:	370c      	adds	r7, #12
 80173a2:	46bd      	mov	sp, r7
 80173a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a8:	4770      	bx	lr
	...

080173ac <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b08c      	sub	sp, #48	; 0x30
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	4603      	mov	r3, r0
 80173b4:	60b9      	str	r1, [r7, #8]
 80173b6:	607a      	str	r2, [r7, #4]
 80173b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;

  HAL_SD_GetCardInfo(&hsd, &info);
 80173ba:	f107 0310 	add.w	r3, r7, #16
 80173be:	4619      	mov	r1, r3
 80173c0:	4807      	ldr	r0, [pc, #28]	; (80173e0 <STORAGE_GetCapacity_FS+0x34>)
 80173c2:	f7f5 ffff 	bl	800d3c4 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr - 1;
 80173c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c8:	1e5a      	subs	r2, r3, #1
 80173ca:	68bb      	ldr	r3, [r7, #8]
 80173cc:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 80173ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d0:	b29a      	uxth	r2, r3
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 80173d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80173d8:	4618      	mov	r0, r3
 80173da:	3730      	adds	r7, #48	; 0x30
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}
 80173e0:	200003a0 	.word	0x200003a0

080173e4 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80173e4:	b480      	push	{r7}
 80173e6:	b083      	sub	sp, #12
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	4603      	mov	r3, r0
 80173ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80173ee:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80173f0:	4618      	mov	r0, r3
 80173f2:	370c      	adds	r7, #12
 80173f4:	46bd      	mov	sp, r7
 80173f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fa:	4770      	bx	lr

080173fc <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80173fc:	b480      	push	{r7}
 80173fe:	b083      	sub	sp, #12
 8017400:	af00      	add	r7, sp, #0
 8017402:	4603      	mov	r3, r0
 8017404:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8017406:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017408:	4618      	mov	r0, r3
 801740a:	370c      	adds	r7, #12
 801740c:	46bd      	mov	sp, r7
 801740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017412:	4770      	bx	lr

08017414 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b086      	sub	sp, #24
 8017418:	af02      	add	r7, sp, #8
 801741a:	60b9      	str	r1, [r7, #8]
 801741c:	607a      	str	r2, [r7, #4]
 801741e:	461a      	mov	r2, r3
 8017420:	4603      	mov	r3, r0
 8017422:	73fb      	strb	r3, [r7, #15]
 8017424:	4613      	mov	r3, r2
 8017426:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017428:	89bb      	ldrh	r3, [r7, #12]
 801742a:	f04f 32ff 	mov.w	r2, #4294967295
 801742e:	9200      	str	r2, [sp, #0]
 8017430:	687a      	ldr	r2, [r7, #4]
 8017432:	68b9      	ldr	r1, [r7, #8]
 8017434:	4807      	ldr	r0, [pc, #28]	; (8017454 <STORAGE_Read_FS+0x40>)
 8017436:	f7f4 ff7b 	bl	800c330 <HAL_SD_ReadBlocks>
//	HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 801743a:	bf00      	nop
 801743c:	4805      	ldr	r0, [pc, #20]	; (8017454 <STORAGE_Read_FS+0x40>)
 801743e:	f7f6 f887 	bl	800d550 <HAL_SD_GetCardState>
 8017442:	4603      	mov	r3, r0
 8017444:	2b04      	cmp	r3, #4
 8017446:	d1f9      	bne.n	801743c <STORAGE_Read_FS+0x28>

  return (USBD_OK);
 8017448:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801744a:	4618      	mov	r0, r3
 801744c:	3710      	adds	r7, #16
 801744e:	46bd      	mov	sp, r7
 8017450:	bd80      	pop	{r7, pc}
 8017452:	bf00      	nop
 8017454:	200003a0 	.word	0x200003a0

08017458 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b086      	sub	sp, #24
 801745c:	af02      	add	r7, sp, #8
 801745e:	60b9      	str	r1, [r7, #8]
 8017460:	607a      	str	r2, [r7, #4]
 8017462:	461a      	mov	r2, r3
 8017464:	4603      	mov	r3, r0
 8017466:	73fb      	strb	r3, [r7, #15]
 8017468:	4613      	mov	r3, r2
 801746a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801746c:	89bb      	ldrh	r3, [r7, #12]
 801746e:	f04f 32ff 	mov.w	r2, #4294967295
 8017472:	9200      	str	r2, [sp, #0]
 8017474:	687a      	ldr	r2, [r7, #4]
 8017476:	68b9      	ldr	r1, [r7, #8]
 8017478:	4807      	ldr	r0, [pc, #28]	; (8017498 <STORAGE_Write_FS+0x40>)
 801747a:	f7f5 f937 	bl	800c6ec <HAL_SD_WriteBlocks>
//	HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 801747e:	bf00      	nop
 8017480:	4805      	ldr	r0, [pc, #20]	; (8017498 <STORAGE_Write_FS+0x40>)
 8017482:	f7f6 f865 	bl	800d550 <HAL_SD_GetCardState>
 8017486:	4603      	mov	r3, r0
 8017488:	2b04      	cmp	r3, #4
 801748a:	d1f9      	bne.n	8017480 <STORAGE_Write_FS+0x28>

  return (USBD_OK);
 801748c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801748e:	4618      	mov	r0, r3
 8017490:	3710      	adds	r7, #16
 8017492:	46bd      	mov	sp, r7
 8017494:	bd80      	pop	{r7, pc}
 8017496:	bf00      	nop
 8017498:	200003a0 	.word	0x200003a0

0801749c <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801749c:	b480      	push	{r7}
 801749e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80174a0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80174a2:	4618      	mov	r0, r3
 80174a4:	46bd      	mov	sp, r7
 80174a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174aa:	4770      	bx	lr

080174ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b08a      	sub	sp, #40	; 0x28
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80174b4:	f107 0314 	add.w	r3, r7, #20
 80174b8:	2200      	movs	r2, #0
 80174ba:	601a      	str	r2, [r3, #0]
 80174bc:	605a      	str	r2, [r3, #4]
 80174be:	609a      	str	r2, [r3, #8]
 80174c0:	60da      	str	r2, [r3, #12]
 80174c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80174cc:	d147      	bne.n	801755e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80174ce:	2300      	movs	r3, #0
 80174d0:	613b      	str	r3, [r7, #16]
 80174d2:	4b25      	ldr	r3, [pc, #148]	; (8017568 <HAL_PCD_MspInit+0xbc>)
 80174d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174d6:	4a24      	ldr	r2, [pc, #144]	; (8017568 <HAL_PCD_MspInit+0xbc>)
 80174d8:	f043 0301 	orr.w	r3, r3, #1
 80174dc:	6313      	str	r3, [r2, #48]	; 0x30
 80174de:	4b22      	ldr	r3, [pc, #136]	; (8017568 <HAL_PCD_MspInit+0xbc>)
 80174e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174e2:	f003 0301 	and.w	r3, r3, #1
 80174e6:	613b      	str	r3, [r7, #16]
 80174e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80174ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80174ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80174f0:	2300      	movs	r3, #0
 80174f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174f4:	2300      	movs	r3, #0
 80174f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80174f8:	f107 0314 	add.w	r3, r7, #20
 80174fc:	4619      	mov	r1, r3
 80174fe:	481b      	ldr	r0, [pc, #108]	; (801756c <HAL_PCD_MspInit+0xc0>)
 8017500:	f7f1 f8ae 	bl	8008660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017504:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801750a:	2302      	movs	r3, #2
 801750c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801750e:	2300      	movs	r3, #0
 8017510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017512:	2303      	movs	r3, #3
 8017514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017516:	230a      	movs	r3, #10
 8017518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801751a:	f107 0314 	add.w	r3, r7, #20
 801751e:	4619      	mov	r1, r3
 8017520:	4812      	ldr	r0, [pc, #72]	; (801756c <HAL_PCD_MspInit+0xc0>)
 8017522:	f7f1 f89d 	bl	8008660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017526:	4b10      	ldr	r3, [pc, #64]	; (8017568 <HAL_PCD_MspInit+0xbc>)
 8017528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801752a:	4a0f      	ldr	r2, [pc, #60]	; (8017568 <HAL_PCD_MspInit+0xbc>)
 801752c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017530:	6353      	str	r3, [r2, #52]	; 0x34
 8017532:	2300      	movs	r3, #0
 8017534:	60fb      	str	r3, [r7, #12]
 8017536:	4b0c      	ldr	r3, [pc, #48]	; (8017568 <HAL_PCD_MspInit+0xbc>)
 8017538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801753a:	4a0b      	ldr	r2, [pc, #44]	; (8017568 <HAL_PCD_MspInit+0xbc>)
 801753c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017540:	6453      	str	r3, [r2, #68]	; 0x44
 8017542:	4b09      	ldr	r3, [pc, #36]	; (8017568 <HAL_PCD_MspInit+0xbc>)
 8017544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801754a:	60fb      	str	r3, [r7, #12]
 801754c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801754e:	2200      	movs	r2, #0
 8017550:	2100      	movs	r1, #0
 8017552:	2043      	movs	r0, #67	; 0x43
 8017554:	f7f0 fcaf 	bl	8007eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017558:	2043      	movs	r0, #67	; 0x43
 801755a:	f7f0 fcc8 	bl	8007eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801755e:	bf00      	nop
 8017560:	3728      	adds	r7, #40	; 0x28
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}
 8017566:	bf00      	nop
 8017568:	40023800 	.word	0x40023800
 801756c:	40020000 	.word	0x40020000

08017570 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b082      	sub	sp, #8
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017584:	4619      	mov	r1, r3
 8017586:	4610      	mov	r0, r2
 8017588:	f7fb fc48 	bl	8012e1c <USBD_LL_SetupStage>
}
 801758c:	bf00      	nop
 801758e:	3708      	adds	r7, #8
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}

08017594 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b082      	sub	sp, #8
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
 801759c:	460b      	mov	r3, r1
 801759e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80175a6:	78fa      	ldrb	r2, [r7, #3]
 80175a8:	6879      	ldr	r1, [r7, #4]
 80175aa:	4613      	mov	r3, r2
 80175ac:	00db      	lsls	r3, r3, #3
 80175ae:	4413      	add	r3, r2
 80175b0:	009b      	lsls	r3, r3, #2
 80175b2:	440b      	add	r3, r1
 80175b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80175b8:	681a      	ldr	r2, [r3, #0]
 80175ba:	78fb      	ldrb	r3, [r7, #3]
 80175bc:	4619      	mov	r1, r3
 80175be:	f7fb fc82 	bl	8012ec6 <USBD_LL_DataOutStage>
}
 80175c2:	bf00      	nop
 80175c4:	3708      	adds	r7, #8
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd80      	pop	{r7, pc}

080175ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175ca:	b580      	push	{r7, lr}
 80175cc:	b082      	sub	sp, #8
 80175ce:	af00      	add	r7, sp, #0
 80175d0:	6078      	str	r0, [r7, #4]
 80175d2:	460b      	mov	r3, r1
 80175d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80175dc:	78fa      	ldrb	r2, [r7, #3]
 80175de:	6879      	ldr	r1, [r7, #4]
 80175e0:	4613      	mov	r3, r2
 80175e2:	00db      	lsls	r3, r3, #3
 80175e4:	4413      	add	r3, r2
 80175e6:	009b      	lsls	r3, r3, #2
 80175e8:	440b      	add	r3, r1
 80175ea:	334c      	adds	r3, #76	; 0x4c
 80175ec:	681a      	ldr	r2, [r3, #0]
 80175ee:	78fb      	ldrb	r3, [r7, #3]
 80175f0:	4619      	mov	r1, r3
 80175f2:	f7fb fd1b 	bl	801302c <USBD_LL_DataInStage>
}
 80175f6:	bf00      	nop
 80175f8:	3708      	adds	r7, #8
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}

080175fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175fe:	b580      	push	{r7, lr}
 8017600:	b082      	sub	sp, #8
 8017602:	af00      	add	r7, sp, #0
 8017604:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801760c:	4618      	mov	r0, r3
 801760e:	f7fb fe4f 	bl	80132b0 <USBD_LL_SOF>
}
 8017612:	bf00      	nop
 8017614:	3708      	adds	r7, #8
 8017616:	46bd      	mov	sp, r7
 8017618:	bd80      	pop	{r7, pc}

0801761a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801761a:	b580      	push	{r7, lr}
 801761c:	b084      	sub	sp, #16
 801761e:	af00      	add	r7, sp, #0
 8017620:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017622:	2301      	movs	r3, #1
 8017624:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	68db      	ldr	r3, [r3, #12]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d102      	bne.n	8017634 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801762e:	2300      	movs	r3, #0
 8017630:	73fb      	strb	r3, [r7, #15]
 8017632:	e008      	b.n	8017646 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	68db      	ldr	r3, [r3, #12]
 8017638:	2b02      	cmp	r3, #2
 801763a:	d102      	bne.n	8017642 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801763c:	2301      	movs	r3, #1
 801763e:	73fb      	strb	r3, [r7, #15]
 8017640:	e001      	b.n	8017646 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017642:	f7ea faf9 	bl	8001c38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801764c:	7bfa      	ldrb	r2, [r7, #15]
 801764e:	4611      	mov	r1, r2
 8017650:	4618      	mov	r0, r3
 8017652:	f7fb fdef 	bl	8013234 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801765c:	4618      	mov	r0, r3
 801765e:	f7fb fd97 	bl	8013190 <USBD_LL_Reset>
}
 8017662:	bf00      	nop
 8017664:	3710      	adds	r7, #16
 8017666:	46bd      	mov	sp, r7
 8017668:	bd80      	pop	{r7, pc}
	...

0801766c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b082      	sub	sp, #8
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801767a:	4618      	mov	r0, r3
 801767c:	f7fb fdea 	bl	8013254 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	687a      	ldr	r2, [r7, #4]
 801768c:	6812      	ldr	r2, [r2, #0]
 801768e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017692:	f043 0301 	orr.w	r3, r3, #1
 8017696:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6a1b      	ldr	r3, [r3, #32]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d005      	beq.n	80176ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80176a0:	4b04      	ldr	r3, [pc, #16]	; (80176b4 <HAL_PCD_SuspendCallback+0x48>)
 80176a2:	691b      	ldr	r3, [r3, #16]
 80176a4:	4a03      	ldr	r2, [pc, #12]	; (80176b4 <HAL_PCD_SuspendCallback+0x48>)
 80176a6:	f043 0306 	orr.w	r3, r3, #6
 80176aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80176ac:	bf00      	nop
 80176ae:	3708      	adds	r7, #8
 80176b0:	46bd      	mov	sp, r7
 80176b2:	bd80      	pop	{r7, pc}
 80176b4:	e000ed00 	.word	0xe000ed00

080176b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b082      	sub	sp, #8
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80176c6:	4618      	mov	r0, r3
 80176c8:	f7fb fdda 	bl	8013280 <USBD_LL_Resume>
}
 80176cc:	bf00      	nop
 80176ce:	3708      	adds	r7, #8
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}

080176d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b082      	sub	sp, #8
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	460b      	mov	r3, r1
 80176de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80176e6:	78fa      	ldrb	r2, [r7, #3]
 80176e8:	4611      	mov	r1, r2
 80176ea:	4618      	mov	r0, r3
 80176ec:	f7fb fe32 	bl	8013354 <USBD_LL_IsoOUTIncomplete>
}
 80176f0:	bf00      	nop
 80176f2:	3708      	adds	r7, #8
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}

080176f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b082      	sub	sp, #8
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
 8017700:	460b      	mov	r3, r1
 8017702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801770a:	78fa      	ldrb	r2, [r7, #3]
 801770c:	4611      	mov	r1, r2
 801770e:	4618      	mov	r0, r3
 8017710:	f7fb fdee 	bl	80132f0 <USBD_LL_IsoINIncomplete>
}
 8017714:	bf00      	nop
 8017716:	3708      	adds	r7, #8
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}

0801771c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b082      	sub	sp, #8
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801772a:	4618      	mov	r0, r3
 801772c:	f7fb fe44 	bl	80133b8 <USBD_LL_DevConnected>
}
 8017730:	bf00      	nop
 8017732:	3708      	adds	r7, #8
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}

08017738 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b082      	sub	sp, #8
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017746:	4618      	mov	r0, r3
 8017748:	f7fb fe41 	bl	80133ce <USBD_LL_DevDisconnected>
}
 801774c:	bf00      	nop
 801774e:	3708      	adds	r7, #8
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}

08017754 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b082      	sub	sp, #8
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	781b      	ldrb	r3, [r3, #0]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d13c      	bne.n	80177de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017764:	4a20      	ldr	r2, [pc, #128]	; (80177e8 <USBD_LL_Init+0x94>)
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	4a1e      	ldr	r2, [pc, #120]	; (80177e8 <USBD_LL_Init+0x94>)
 8017770:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017774:	4b1c      	ldr	r3, [pc, #112]	; (80177e8 <USBD_LL_Init+0x94>)
 8017776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801777a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801777c:	4b1a      	ldr	r3, [pc, #104]	; (80177e8 <USBD_LL_Init+0x94>)
 801777e:	2206      	movs	r2, #6
 8017780:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017782:	4b19      	ldr	r3, [pc, #100]	; (80177e8 <USBD_LL_Init+0x94>)
 8017784:	2202      	movs	r2, #2
 8017786:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017788:	4b17      	ldr	r3, [pc, #92]	; (80177e8 <USBD_LL_Init+0x94>)
 801778a:	2200      	movs	r2, #0
 801778c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801778e:	4b16      	ldr	r3, [pc, #88]	; (80177e8 <USBD_LL_Init+0x94>)
 8017790:	2202      	movs	r2, #2
 8017792:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017794:	4b14      	ldr	r3, [pc, #80]	; (80177e8 <USBD_LL_Init+0x94>)
 8017796:	2200      	movs	r2, #0
 8017798:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801779a:	4b13      	ldr	r3, [pc, #76]	; (80177e8 <USBD_LL_Init+0x94>)
 801779c:	2200      	movs	r2, #0
 801779e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80177a0:	4b11      	ldr	r3, [pc, #68]	; (80177e8 <USBD_LL_Init+0x94>)
 80177a2:	2200      	movs	r2, #0
 80177a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80177a6:	4b10      	ldr	r3, [pc, #64]	; (80177e8 <USBD_LL_Init+0x94>)
 80177a8:	2201      	movs	r2, #1
 80177aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80177ac:	4b0e      	ldr	r3, [pc, #56]	; (80177e8 <USBD_LL_Init+0x94>)
 80177ae:	2200      	movs	r2, #0
 80177b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80177b2:	480d      	ldr	r0, [pc, #52]	; (80177e8 <USBD_LL_Init+0x94>)
 80177b4:	f7f1 fd97 	bl	80092e6 <HAL_PCD_Init>
 80177b8:	4603      	mov	r3, r0
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d001      	beq.n	80177c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80177be:	f7ea fa3b 	bl	8001c38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80177c2:	2180      	movs	r1, #128	; 0x80
 80177c4:	4808      	ldr	r0, [pc, #32]	; (80177e8 <USBD_LL_Init+0x94>)
 80177c6:	f7f3 f850 	bl	800a86a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80177ca:	2240      	movs	r2, #64	; 0x40
 80177cc:	2100      	movs	r1, #0
 80177ce:	4806      	ldr	r0, [pc, #24]	; (80177e8 <USBD_LL_Init+0x94>)
 80177d0:	f7f3 f804 	bl	800a7dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80177d4:	2280      	movs	r2, #128	; 0x80
 80177d6:	2101      	movs	r1, #1
 80177d8:	4803      	ldr	r0, [pc, #12]	; (80177e8 <USBD_LL_Init+0x94>)
 80177da:	f7f2 ffff 	bl	800a7dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80177de:	2300      	movs	r3, #0
}
 80177e0:	4618      	mov	r0, r3
 80177e2:	3708      	adds	r7, #8
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}
 80177e8:	20006e98 	.word	0x20006e98

080177ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b084      	sub	sp, #16
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177f4:	2300      	movs	r3, #0
 80177f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177f8:	2300      	movs	r3, #0
 80177fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017802:	4618      	mov	r0, r3
 8017804:	f7f1 fe93 	bl	800952e <HAL_PCD_Start>
 8017808:	4603      	mov	r3, r0
 801780a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801780c:	7bfb      	ldrb	r3, [r7, #15]
 801780e:	4618      	mov	r0, r3
 8017810:	f000 f9b0 	bl	8017b74 <USBD_Get_USB_Status>
 8017814:	4603      	mov	r3, r0
 8017816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017818:	7bbb      	ldrb	r3, [r7, #14]
}
 801781a:	4618      	mov	r0, r3
 801781c:	3710      	adds	r7, #16
 801781e:	46bd      	mov	sp, r7
 8017820:	bd80      	pop	{r7, pc}

08017822 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017822:	b580      	push	{r7, lr}
 8017824:	b084      	sub	sp, #16
 8017826:	af00      	add	r7, sp, #0
 8017828:	6078      	str	r0, [r7, #4]
 801782a:	4608      	mov	r0, r1
 801782c:	4611      	mov	r1, r2
 801782e:	461a      	mov	r2, r3
 8017830:	4603      	mov	r3, r0
 8017832:	70fb      	strb	r3, [r7, #3]
 8017834:	460b      	mov	r3, r1
 8017836:	70bb      	strb	r3, [r7, #2]
 8017838:	4613      	mov	r3, r2
 801783a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801783c:	2300      	movs	r3, #0
 801783e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017840:	2300      	movs	r3, #0
 8017842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801784a:	78bb      	ldrb	r3, [r7, #2]
 801784c:	883a      	ldrh	r2, [r7, #0]
 801784e:	78f9      	ldrb	r1, [r7, #3]
 8017850:	f7f2 fb91 	bl	8009f76 <HAL_PCD_EP_Open>
 8017854:	4603      	mov	r3, r0
 8017856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017858:	7bfb      	ldrb	r3, [r7, #15]
 801785a:	4618      	mov	r0, r3
 801785c:	f000 f98a 	bl	8017b74 <USBD_Get_USB_Status>
 8017860:	4603      	mov	r3, r0
 8017862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017864:	7bbb      	ldrb	r3, [r7, #14]
}
 8017866:	4618      	mov	r0, r3
 8017868:	3710      	adds	r7, #16
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}

0801786e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801786e:	b580      	push	{r7, lr}
 8017870:	b084      	sub	sp, #16
 8017872:	af00      	add	r7, sp, #0
 8017874:	6078      	str	r0, [r7, #4]
 8017876:	460b      	mov	r3, r1
 8017878:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801787a:	2300      	movs	r3, #0
 801787c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801787e:	2300      	movs	r3, #0
 8017880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017888:	78fa      	ldrb	r2, [r7, #3]
 801788a:	4611      	mov	r1, r2
 801788c:	4618      	mov	r0, r3
 801788e:	f7f2 fbda 	bl	800a046 <HAL_PCD_EP_Close>
 8017892:	4603      	mov	r3, r0
 8017894:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017896:	7bfb      	ldrb	r3, [r7, #15]
 8017898:	4618      	mov	r0, r3
 801789a:	f000 f96b 	bl	8017b74 <USBD_Get_USB_Status>
 801789e:	4603      	mov	r3, r0
 80178a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80178a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80178a4:	4618      	mov	r0, r3
 80178a6:	3710      	adds	r7, #16
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd80      	pop	{r7, pc}

080178ac <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b084      	sub	sp, #16
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	460b      	mov	r3, r1
 80178b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178b8:	2300      	movs	r3, #0
 80178ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178bc:	2300      	movs	r3, #0
 80178be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80178c6:	78fa      	ldrb	r2, [r7, #3]
 80178c8:	4611      	mov	r1, r2
 80178ca:	4618      	mov	r0, r3
 80178cc:	f7f2 fd9d 	bl	800a40a <HAL_PCD_EP_Flush>
 80178d0:	4603      	mov	r3, r0
 80178d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178d4:	7bfb      	ldrb	r3, [r7, #15]
 80178d6:	4618      	mov	r0, r3
 80178d8:	f000 f94c 	bl	8017b74 <USBD_Get_USB_Status>
 80178dc:	4603      	mov	r3, r0
 80178de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80178e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80178e2:	4618      	mov	r0, r3
 80178e4:	3710      	adds	r7, #16
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bd80      	pop	{r7, pc}

080178ea <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80178ea:	b580      	push	{r7, lr}
 80178ec:	b084      	sub	sp, #16
 80178ee:	af00      	add	r7, sp, #0
 80178f0:	6078      	str	r0, [r7, #4]
 80178f2:	460b      	mov	r3, r1
 80178f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178f6:	2300      	movs	r3, #0
 80178f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178fa:	2300      	movs	r3, #0
 80178fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017904:	78fa      	ldrb	r2, [r7, #3]
 8017906:	4611      	mov	r1, r2
 8017908:	4618      	mov	r0, r3
 801790a:	f7f2 fc93 	bl	800a234 <HAL_PCD_EP_SetStall>
 801790e:	4603      	mov	r3, r0
 8017910:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017912:	7bfb      	ldrb	r3, [r7, #15]
 8017914:	4618      	mov	r0, r3
 8017916:	f000 f92d 	bl	8017b74 <USBD_Get_USB_Status>
 801791a:	4603      	mov	r3, r0
 801791c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801791e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017920:	4618      	mov	r0, r3
 8017922:	3710      	adds	r7, #16
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b084      	sub	sp, #16
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
 8017930:	460b      	mov	r3, r1
 8017932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017934:	2300      	movs	r3, #0
 8017936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017938:	2300      	movs	r3, #0
 801793a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017942:	78fa      	ldrb	r2, [r7, #3]
 8017944:	4611      	mov	r1, r2
 8017946:	4618      	mov	r0, r3
 8017948:	f7f2 fcd8 	bl	800a2fc <HAL_PCD_EP_ClrStall>
 801794c:	4603      	mov	r3, r0
 801794e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017950:	7bfb      	ldrb	r3, [r7, #15]
 8017952:	4618      	mov	r0, r3
 8017954:	f000 f90e 	bl	8017b74 <USBD_Get_USB_Status>
 8017958:	4603      	mov	r3, r0
 801795a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801795c:	7bbb      	ldrb	r3, [r7, #14]
}
 801795e:	4618      	mov	r0, r3
 8017960:	3710      	adds	r7, #16
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}

08017966 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017966:	b480      	push	{r7}
 8017968:	b085      	sub	sp, #20
 801796a:	af00      	add	r7, sp, #0
 801796c:	6078      	str	r0, [r7, #4]
 801796e:	460b      	mov	r3, r1
 8017970:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017978:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801797a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801797e:	2b00      	cmp	r3, #0
 8017980:	da0b      	bge.n	801799a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017982:	78fb      	ldrb	r3, [r7, #3]
 8017984:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017988:	68f9      	ldr	r1, [r7, #12]
 801798a:	4613      	mov	r3, r2
 801798c:	00db      	lsls	r3, r3, #3
 801798e:	4413      	add	r3, r2
 8017990:	009b      	lsls	r3, r3, #2
 8017992:	440b      	add	r3, r1
 8017994:	333e      	adds	r3, #62	; 0x3e
 8017996:	781b      	ldrb	r3, [r3, #0]
 8017998:	e00b      	b.n	80179b2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801799a:	78fb      	ldrb	r3, [r7, #3]
 801799c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80179a0:	68f9      	ldr	r1, [r7, #12]
 80179a2:	4613      	mov	r3, r2
 80179a4:	00db      	lsls	r3, r3, #3
 80179a6:	4413      	add	r3, r2
 80179a8:	009b      	lsls	r3, r3, #2
 80179aa:	440b      	add	r3, r1
 80179ac:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80179b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80179b2:	4618      	mov	r0, r3
 80179b4:	3714      	adds	r7, #20
 80179b6:	46bd      	mov	sp, r7
 80179b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179bc:	4770      	bx	lr

080179be <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80179be:	b580      	push	{r7, lr}
 80179c0:	b084      	sub	sp, #16
 80179c2:	af00      	add	r7, sp, #0
 80179c4:	6078      	str	r0, [r7, #4]
 80179c6:	460b      	mov	r3, r1
 80179c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179ca:	2300      	movs	r3, #0
 80179cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179ce:	2300      	movs	r3, #0
 80179d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80179d8:	78fa      	ldrb	r2, [r7, #3]
 80179da:	4611      	mov	r1, r2
 80179dc:	4618      	mov	r0, r3
 80179de:	f7f2 faa5 	bl	8009f2c <HAL_PCD_SetAddress>
 80179e2:	4603      	mov	r3, r0
 80179e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80179e6:	7bfb      	ldrb	r3, [r7, #15]
 80179e8:	4618      	mov	r0, r3
 80179ea:	f000 f8c3 	bl	8017b74 <USBD_Get_USB_Status>
 80179ee:	4603      	mov	r3, r0
 80179f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80179f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	3710      	adds	r7, #16
 80179f8:	46bd      	mov	sp, r7
 80179fa:	bd80      	pop	{r7, pc}

080179fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b086      	sub	sp, #24
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	60f8      	str	r0, [r7, #12]
 8017a04:	607a      	str	r2, [r7, #4]
 8017a06:	603b      	str	r3, [r7, #0]
 8017a08:	460b      	mov	r3, r1
 8017a0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a10:	2300      	movs	r3, #0
 8017a12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017a1a:	7af9      	ldrb	r1, [r7, #11]
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	687a      	ldr	r2, [r7, #4]
 8017a20:	f7f2 fbbe 	bl	800a1a0 <HAL_PCD_EP_Transmit>
 8017a24:	4603      	mov	r3, r0
 8017a26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a28:	7dfb      	ldrb	r3, [r7, #23]
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f000 f8a2 	bl	8017b74 <USBD_Get_USB_Status>
 8017a30:	4603      	mov	r3, r0
 8017a32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017a34:	7dbb      	ldrb	r3, [r7, #22]
}
 8017a36:	4618      	mov	r0, r3
 8017a38:	3718      	adds	r7, #24
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	bd80      	pop	{r7, pc}

08017a3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017a3e:	b580      	push	{r7, lr}
 8017a40:	b086      	sub	sp, #24
 8017a42:	af00      	add	r7, sp, #0
 8017a44:	60f8      	str	r0, [r7, #12]
 8017a46:	607a      	str	r2, [r7, #4]
 8017a48:	603b      	str	r3, [r7, #0]
 8017a4a:	460b      	mov	r3, r1
 8017a4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a52:	2300      	movs	r3, #0
 8017a54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017a5c:	7af9      	ldrb	r1, [r7, #11]
 8017a5e:	683b      	ldr	r3, [r7, #0]
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	f7f2 fb3a 	bl	800a0da <HAL_PCD_EP_Receive>
 8017a66:	4603      	mov	r3, r0
 8017a68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a6a:	7dfb      	ldrb	r3, [r7, #23]
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f000 f881 	bl	8017b74 <USBD_Get_USB_Status>
 8017a72:	4603      	mov	r3, r0
 8017a74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017a76:	7dbb      	ldrb	r3, [r7, #22]
}
 8017a78:	4618      	mov	r0, r3
 8017a7a:	3718      	adds	r7, #24
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd80      	pop	{r7, pc}

08017a80 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b082      	sub	sp, #8
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
 8017a88:	460b      	mov	r3, r1
 8017a8a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017a92:	78fa      	ldrb	r2, [r7, #3]
 8017a94:	4611      	mov	r1, r2
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7f2 fb6a 	bl	800a170 <HAL_PCD_EP_GetRxCount>
 8017a9c:	4603      	mov	r3, r0
}
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	3708      	adds	r7, #8
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd80      	pop	{r7, pc}
	...

08017aa8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
 8017ab0:	460b      	mov	r3, r1
 8017ab2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017ab4:	78fb      	ldrb	r3, [r7, #3]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d002      	beq.n	8017ac0 <HAL_PCDEx_LPM_Callback+0x18>
 8017aba:	2b01      	cmp	r3, #1
 8017abc:	d01f      	beq.n	8017afe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017abe:	e03b      	b.n	8017b38 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	6a1b      	ldr	r3, [r3, #32]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d007      	beq.n	8017ad8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8017ac8:	f7e9 fd1e 	bl	8001508 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017acc:	4b1c      	ldr	r3, [pc, #112]	; (8017b40 <HAL_PCDEx_LPM_Callback+0x98>)
 8017ace:	691b      	ldr	r3, [r3, #16]
 8017ad0:	4a1b      	ldr	r2, [pc, #108]	; (8017b40 <HAL_PCDEx_LPM_Callback+0x98>)
 8017ad2:	f023 0306 	bic.w	r3, r3, #6
 8017ad6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	687a      	ldr	r2, [r7, #4]
 8017ae4:	6812      	ldr	r2, [r2, #0]
 8017ae6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017aea:	f023 0301 	bic.w	r3, r3, #1
 8017aee:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017af6:	4618      	mov	r0, r3
 8017af8:	f7fb fbc2 	bl	8013280 <USBD_LL_Resume>
    break;
 8017afc:	e01c      	b.n	8017b38 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	687a      	ldr	r2, [r7, #4]
 8017b0a:	6812      	ldr	r2, [r2, #0]
 8017b0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017b10:	f043 0301 	orr.w	r3, r3, #1
 8017b14:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f7fb fb99 	bl	8013254 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	6a1b      	ldr	r3, [r3, #32]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d005      	beq.n	8017b36 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017b2a:	4b05      	ldr	r3, [pc, #20]	; (8017b40 <HAL_PCDEx_LPM_Callback+0x98>)
 8017b2c:	691b      	ldr	r3, [r3, #16]
 8017b2e:	4a04      	ldr	r2, [pc, #16]	; (8017b40 <HAL_PCDEx_LPM_Callback+0x98>)
 8017b30:	f043 0306 	orr.w	r3, r3, #6
 8017b34:	6113      	str	r3, [r2, #16]
    break;
 8017b36:	bf00      	nop
}
 8017b38:	bf00      	nop
 8017b3a:	3708      	adds	r7, #8
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}
 8017b40:	e000ed00 	.word	0xe000ed00

08017b44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017b44:	b480      	push	{r7}
 8017b46:	b083      	sub	sp, #12
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017b4c:	4b03      	ldr	r3, [pc, #12]	; (8017b5c <USBD_static_malloc+0x18>)
}
 8017b4e:	4618      	mov	r0, r3
 8017b50:	370c      	adds	r7, #12
 8017b52:	46bd      	mov	sp, r7
 8017b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b58:	4770      	bx	lr
 8017b5a:	bf00      	nop
 8017b5c:	200073a4 	.word	0x200073a4

08017b60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017b60:	b480      	push	{r7}
 8017b62:	b083      	sub	sp, #12
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]

}
 8017b68:	bf00      	nop
 8017b6a:	370c      	adds	r7, #12
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b72:	4770      	bx	lr

08017b74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017b74:	b480      	push	{r7}
 8017b76:	b085      	sub	sp, #20
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b7e:	2300      	movs	r3, #0
 8017b80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017b82:	79fb      	ldrb	r3, [r7, #7]
 8017b84:	2b03      	cmp	r3, #3
 8017b86:	d817      	bhi.n	8017bb8 <USBD_Get_USB_Status+0x44>
 8017b88:	a201      	add	r2, pc, #4	; (adr r2, 8017b90 <USBD_Get_USB_Status+0x1c>)
 8017b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b8e:	bf00      	nop
 8017b90:	08017ba1 	.word	0x08017ba1
 8017b94:	08017ba7 	.word	0x08017ba7
 8017b98:	08017bad 	.word	0x08017bad
 8017b9c:	08017bb3 	.word	0x08017bb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8017ba4:	e00b      	b.n	8017bbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017ba6:	2303      	movs	r3, #3
 8017ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8017baa:	e008      	b.n	8017bbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017bac:	2301      	movs	r3, #1
 8017bae:	73fb      	strb	r3, [r7, #15]
    break;
 8017bb0:	e005      	b.n	8017bbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017bb2:	2303      	movs	r3, #3
 8017bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8017bb6:	e002      	b.n	8017bbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017bb8:	2303      	movs	r3, #3
 8017bba:	73fb      	strb	r3, [r7, #15]
    break;
 8017bbc:	bf00      	nop
  }
  return usb_status;
 8017bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	3714      	adds	r7, #20
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bca:	4770      	bx	lr

08017bcc <__errno>:
 8017bcc:	4b01      	ldr	r3, [pc, #4]	; (8017bd4 <__errno+0x8>)
 8017bce:	6818      	ldr	r0, [r3, #0]
 8017bd0:	4770      	bx	lr
 8017bd2:	bf00      	nop
 8017bd4:	20000134 	.word	0x20000134

08017bd8 <__libc_init_array>:
 8017bd8:	b570      	push	{r4, r5, r6, lr}
 8017bda:	4d0d      	ldr	r5, [pc, #52]	; (8017c10 <__libc_init_array+0x38>)
 8017bdc:	4c0d      	ldr	r4, [pc, #52]	; (8017c14 <__libc_init_array+0x3c>)
 8017bde:	1b64      	subs	r4, r4, r5
 8017be0:	10a4      	asrs	r4, r4, #2
 8017be2:	2600      	movs	r6, #0
 8017be4:	42a6      	cmp	r6, r4
 8017be6:	d109      	bne.n	8017bfc <__libc_init_array+0x24>
 8017be8:	4d0b      	ldr	r5, [pc, #44]	; (8017c18 <__libc_init_array+0x40>)
 8017bea:	4c0c      	ldr	r4, [pc, #48]	; (8017c1c <__libc_init_array+0x44>)
 8017bec:	f000 fc8e 	bl	801850c <_init>
 8017bf0:	1b64      	subs	r4, r4, r5
 8017bf2:	10a4      	asrs	r4, r4, #2
 8017bf4:	2600      	movs	r6, #0
 8017bf6:	42a6      	cmp	r6, r4
 8017bf8:	d105      	bne.n	8017c06 <__libc_init_array+0x2e>
 8017bfa:	bd70      	pop	{r4, r5, r6, pc}
 8017bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c00:	4798      	blx	r3
 8017c02:	3601      	adds	r6, #1
 8017c04:	e7ee      	b.n	8017be4 <__libc_init_array+0xc>
 8017c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c0a:	4798      	blx	r3
 8017c0c:	3601      	adds	r6, #1
 8017c0e:	e7f2      	b.n	8017bf6 <__libc_init_array+0x1e>
 8017c10:	08018aa8 	.word	0x08018aa8
 8017c14:	08018aa8 	.word	0x08018aa8
 8017c18:	08018aa8 	.word	0x08018aa8
 8017c1c:	08018aac 	.word	0x08018aac

08017c20 <memcpy>:
 8017c20:	440a      	add	r2, r1
 8017c22:	4291      	cmp	r1, r2
 8017c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8017c28:	d100      	bne.n	8017c2c <memcpy+0xc>
 8017c2a:	4770      	bx	lr
 8017c2c:	b510      	push	{r4, lr}
 8017c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c36:	4291      	cmp	r1, r2
 8017c38:	d1f9      	bne.n	8017c2e <memcpy+0xe>
 8017c3a:	bd10      	pop	{r4, pc}

08017c3c <memset>:
 8017c3c:	4402      	add	r2, r0
 8017c3e:	4603      	mov	r3, r0
 8017c40:	4293      	cmp	r3, r2
 8017c42:	d100      	bne.n	8017c46 <memset+0xa>
 8017c44:	4770      	bx	lr
 8017c46:	f803 1b01 	strb.w	r1, [r3], #1
 8017c4a:	e7f9      	b.n	8017c40 <memset+0x4>

08017c4c <siprintf>:
 8017c4c:	b40e      	push	{r1, r2, r3}
 8017c4e:	b500      	push	{lr}
 8017c50:	b09c      	sub	sp, #112	; 0x70
 8017c52:	ab1d      	add	r3, sp, #116	; 0x74
 8017c54:	9002      	str	r0, [sp, #8]
 8017c56:	9006      	str	r0, [sp, #24]
 8017c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017c5c:	4809      	ldr	r0, [pc, #36]	; (8017c84 <siprintf+0x38>)
 8017c5e:	9107      	str	r1, [sp, #28]
 8017c60:	9104      	str	r1, [sp, #16]
 8017c62:	4909      	ldr	r1, [pc, #36]	; (8017c88 <siprintf+0x3c>)
 8017c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c68:	9105      	str	r1, [sp, #20]
 8017c6a:	6800      	ldr	r0, [r0, #0]
 8017c6c:	9301      	str	r3, [sp, #4]
 8017c6e:	a902      	add	r1, sp, #8
 8017c70:	f000 f868 	bl	8017d44 <_svfiprintf_r>
 8017c74:	9b02      	ldr	r3, [sp, #8]
 8017c76:	2200      	movs	r2, #0
 8017c78:	701a      	strb	r2, [r3, #0]
 8017c7a:	b01c      	add	sp, #112	; 0x70
 8017c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c80:	b003      	add	sp, #12
 8017c82:	4770      	bx	lr
 8017c84:	20000134 	.word	0x20000134
 8017c88:	ffff0208 	.word	0xffff0208

08017c8c <__ssputs_r>:
 8017c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c90:	688e      	ldr	r6, [r1, #8]
 8017c92:	429e      	cmp	r6, r3
 8017c94:	4682      	mov	sl, r0
 8017c96:	460c      	mov	r4, r1
 8017c98:	4690      	mov	r8, r2
 8017c9a:	461f      	mov	r7, r3
 8017c9c:	d838      	bhi.n	8017d10 <__ssputs_r+0x84>
 8017c9e:	898a      	ldrh	r2, [r1, #12]
 8017ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017ca4:	d032      	beq.n	8017d0c <__ssputs_r+0x80>
 8017ca6:	6825      	ldr	r5, [r4, #0]
 8017ca8:	6909      	ldr	r1, [r1, #16]
 8017caa:	eba5 0901 	sub.w	r9, r5, r1
 8017cae:	6965      	ldr	r5, [r4, #20]
 8017cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017cb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017cb8:	3301      	adds	r3, #1
 8017cba:	444b      	add	r3, r9
 8017cbc:	106d      	asrs	r5, r5, #1
 8017cbe:	429d      	cmp	r5, r3
 8017cc0:	bf38      	it	cc
 8017cc2:	461d      	movcc	r5, r3
 8017cc4:	0553      	lsls	r3, r2, #21
 8017cc6:	d531      	bpl.n	8017d2c <__ssputs_r+0xa0>
 8017cc8:	4629      	mov	r1, r5
 8017cca:	f000 fb55 	bl	8018378 <_malloc_r>
 8017cce:	4606      	mov	r6, r0
 8017cd0:	b950      	cbnz	r0, 8017ce8 <__ssputs_r+0x5c>
 8017cd2:	230c      	movs	r3, #12
 8017cd4:	f8ca 3000 	str.w	r3, [sl]
 8017cd8:	89a3      	ldrh	r3, [r4, #12]
 8017cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017cde:	81a3      	strh	r3, [r4, #12]
 8017ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ce8:	6921      	ldr	r1, [r4, #16]
 8017cea:	464a      	mov	r2, r9
 8017cec:	f7ff ff98 	bl	8017c20 <memcpy>
 8017cf0:	89a3      	ldrh	r3, [r4, #12]
 8017cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017cfa:	81a3      	strh	r3, [r4, #12]
 8017cfc:	6126      	str	r6, [r4, #16]
 8017cfe:	6165      	str	r5, [r4, #20]
 8017d00:	444e      	add	r6, r9
 8017d02:	eba5 0509 	sub.w	r5, r5, r9
 8017d06:	6026      	str	r6, [r4, #0]
 8017d08:	60a5      	str	r5, [r4, #8]
 8017d0a:	463e      	mov	r6, r7
 8017d0c:	42be      	cmp	r6, r7
 8017d0e:	d900      	bls.n	8017d12 <__ssputs_r+0x86>
 8017d10:	463e      	mov	r6, r7
 8017d12:	6820      	ldr	r0, [r4, #0]
 8017d14:	4632      	mov	r2, r6
 8017d16:	4641      	mov	r1, r8
 8017d18:	f000 faa8 	bl	801826c <memmove>
 8017d1c:	68a3      	ldr	r3, [r4, #8]
 8017d1e:	1b9b      	subs	r3, r3, r6
 8017d20:	60a3      	str	r3, [r4, #8]
 8017d22:	6823      	ldr	r3, [r4, #0]
 8017d24:	4433      	add	r3, r6
 8017d26:	6023      	str	r3, [r4, #0]
 8017d28:	2000      	movs	r0, #0
 8017d2a:	e7db      	b.n	8017ce4 <__ssputs_r+0x58>
 8017d2c:	462a      	mov	r2, r5
 8017d2e:	f000 fb97 	bl	8018460 <_realloc_r>
 8017d32:	4606      	mov	r6, r0
 8017d34:	2800      	cmp	r0, #0
 8017d36:	d1e1      	bne.n	8017cfc <__ssputs_r+0x70>
 8017d38:	6921      	ldr	r1, [r4, #16]
 8017d3a:	4650      	mov	r0, sl
 8017d3c:	f000 fab0 	bl	80182a0 <_free_r>
 8017d40:	e7c7      	b.n	8017cd2 <__ssputs_r+0x46>
	...

08017d44 <_svfiprintf_r>:
 8017d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d48:	4698      	mov	r8, r3
 8017d4a:	898b      	ldrh	r3, [r1, #12]
 8017d4c:	061b      	lsls	r3, r3, #24
 8017d4e:	b09d      	sub	sp, #116	; 0x74
 8017d50:	4607      	mov	r7, r0
 8017d52:	460d      	mov	r5, r1
 8017d54:	4614      	mov	r4, r2
 8017d56:	d50e      	bpl.n	8017d76 <_svfiprintf_r+0x32>
 8017d58:	690b      	ldr	r3, [r1, #16]
 8017d5a:	b963      	cbnz	r3, 8017d76 <_svfiprintf_r+0x32>
 8017d5c:	2140      	movs	r1, #64	; 0x40
 8017d5e:	f000 fb0b 	bl	8018378 <_malloc_r>
 8017d62:	6028      	str	r0, [r5, #0]
 8017d64:	6128      	str	r0, [r5, #16]
 8017d66:	b920      	cbnz	r0, 8017d72 <_svfiprintf_r+0x2e>
 8017d68:	230c      	movs	r3, #12
 8017d6a:	603b      	str	r3, [r7, #0]
 8017d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8017d70:	e0d1      	b.n	8017f16 <_svfiprintf_r+0x1d2>
 8017d72:	2340      	movs	r3, #64	; 0x40
 8017d74:	616b      	str	r3, [r5, #20]
 8017d76:	2300      	movs	r3, #0
 8017d78:	9309      	str	r3, [sp, #36]	; 0x24
 8017d7a:	2320      	movs	r3, #32
 8017d7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d84:	2330      	movs	r3, #48	; 0x30
 8017d86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017f30 <_svfiprintf_r+0x1ec>
 8017d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d8e:	f04f 0901 	mov.w	r9, #1
 8017d92:	4623      	mov	r3, r4
 8017d94:	469a      	mov	sl, r3
 8017d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d9a:	b10a      	cbz	r2, 8017da0 <_svfiprintf_r+0x5c>
 8017d9c:	2a25      	cmp	r2, #37	; 0x25
 8017d9e:	d1f9      	bne.n	8017d94 <_svfiprintf_r+0x50>
 8017da0:	ebba 0b04 	subs.w	fp, sl, r4
 8017da4:	d00b      	beq.n	8017dbe <_svfiprintf_r+0x7a>
 8017da6:	465b      	mov	r3, fp
 8017da8:	4622      	mov	r2, r4
 8017daa:	4629      	mov	r1, r5
 8017dac:	4638      	mov	r0, r7
 8017dae:	f7ff ff6d 	bl	8017c8c <__ssputs_r>
 8017db2:	3001      	adds	r0, #1
 8017db4:	f000 80aa 	beq.w	8017f0c <_svfiprintf_r+0x1c8>
 8017db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017dba:	445a      	add	r2, fp
 8017dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8017dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	f000 80a2 	beq.w	8017f0c <_svfiprintf_r+0x1c8>
 8017dc8:	2300      	movs	r3, #0
 8017dca:	f04f 32ff 	mov.w	r2, #4294967295
 8017dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017dd2:	f10a 0a01 	add.w	sl, sl, #1
 8017dd6:	9304      	str	r3, [sp, #16]
 8017dd8:	9307      	str	r3, [sp, #28]
 8017dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017dde:	931a      	str	r3, [sp, #104]	; 0x68
 8017de0:	4654      	mov	r4, sl
 8017de2:	2205      	movs	r2, #5
 8017de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017de8:	4851      	ldr	r0, [pc, #324]	; (8017f30 <_svfiprintf_r+0x1ec>)
 8017dea:	f7e8 fa11 	bl	8000210 <memchr>
 8017dee:	9a04      	ldr	r2, [sp, #16]
 8017df0:	b9d8      	cbnz	r0, 8017e2a <_svfiprintf_r+0xe6>
 8017df2:	06d0      	lsls	r0, r2, #27
 8017df4:	bf44      	itt	mi
 8017df6:	2320      	movmi	r3, #32
 8017df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017dfc:	0711      	lsls	r1, r2, #28
 8017dfe:	bf44      	itt	mi
 8017e00:	232b      	movmi	r3, #43	; 0x2b
 8017e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e06:	f89a 3000 	ldrb.w	r3, [sl]
 8017e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8017e0c:	d015      	beq.n	8017e3a <_svfiprintf_r+0xf6>
 8017e0e:	9a07      	ldr	r2, [sp, #28]
 8017e10:	4654      	mov	r4, sl
 8017e12:	2000      	movs	r0, #0
 8017e14:	f04f 0c0a 	mov.w	ip, #10
 8017e18:	4621      	mov	r1, r4
 8017e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e1e:	3b30      	subs	r3, #48	; 0x30
 8017e20:	2b09      	cmp	r3, #9
 8017e22:	d94e      	bls.n	8017ec2 <_svfiprintf_r+0x17e>
 8017e24:	b1b0      	cbz	r0, 8017e54 <_svfiprintf_r+0x110>
 8017e26:	9207      	str	r2, [sp, #28]
 8017e28:	e014      	b.n	8017e54 <_svfiprintf_r+0x110>
 8017e2a:	eba0 0308 	sub.w	r3, r0, r8
 8017e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8017e32:	4313      	orrs	r3, r2
 8017e34:	9304      	str	r3, [sp, #16]
 8017e36:	46a2      	mov	sl, r4
 8017e38:	e7d2      	b.n	8017de0 <_svfiprintf_r+0x9c>
 8017e3a:	9b03      	ldr	r3, [sp, #12]
 8017e3c:	1d19      	adds	r1, r3, #4
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	9103      	str	r1, [sp, #12]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	bfbb      	ittet	lt
 8017e46:	425b      	neglt	r3, r3
 8017e48:	f042 0202 	orrlt.w	r2, r2, #2
 8017e4c:	9307      	strge	r3, [sp, #28]
 8017e4e:	9307      	strlt	r3, [sp, #28]
 8017e50:	bfb8      	it	lt
 8017e52:	9204      	strlt	r2, [sp, #16]
 8017e54:	7823      	ldrb	r3, [r4, #0]
 8017e56:	2b2e      	cmp	r3, #46	; 0x2e
 8017e58:	d10c      	bne.n	8017e74 <_svfiprintf_r+0x130>
 8017e5a:	7863      	ldrb	r3, [r4, #1]
 8017e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8017e5e:	d135      	bne.n	8017ecc <_svfiprintf_r+0x188>
 8017e60:	9b03      	ldr	r3, [sp, #12]
 8017e62:	1d1a      	adds	r2, r3, #4
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	9203      	str	r2, [sp, #12]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	bfb8      	it	lt
 8017e6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017e70:	3402      	adds	r4, #2
 8017e72:	9305      	str	r3, [sp, #20]
 8017e74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017f40 <_svfiprintf_r+0x1fc>
 8017e78:	7821      	ldrb	r1, [r4, #0]
 8017e7a:	2203      	movs	r2, #3
 8017e7c:	4650      	mov	r0, sl
 8017e7e:	f7e8 f9c7 	bl	8000210 <memchr>
 8017e82:	b140      	cbz	r0, 8017e96 <_svfiprintf_r+0x152>
 8017e84:	2340      	movs	r3, #64	; 0x40
 8017e86:	eba0 000a 	sub.w	r0, r0, sl
 8017e8a:	fa03 f000 	lsl.w	r0, r3, r0
 8017e8e:	9b04      	ldr	r3, [sp, #16]
 8017e90:	4303      	orrs	r3, r0
 8017e92:	3401      	adds	r4, #1
 8017e94:	9304      	str	r3, [sp, #16]
 8017e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e9a:	4826      	ldr	r0, [pc, #152]	; (8017f34 <_svfiprintf_r+0x1f0>)
 8017e9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ea0:	2206      	movs	r2, #6
 8017ea2:	f7e8 f9b5 	bl	8000210 <memchr>
 8017ea6:	2800      	cmp	r0, #0
 8017ea8:	d038      	beq.n	8017f1c <_svfiprintf_r+0x1d8>
 8017eaa:	4b23      	ldr	r3, [pc, #140]	; (8017f38 <_svfiprintf_r+0x1f4>)
 8017eac:	bb1b      	cbnz	r3, 8017ef6 <_svfiprintf_r+0x1b2>
 8017eae:	9b03      	ldr	r3, [sp, #12]
 8017eb0:	3307      	adds	r3, #7
 8017eb2:	f023 0307 	bic.w	r3, r3, #7
 8017eb6:	3308      	adds	r3, #8
 8017eb8:	9303      	str	r3, [sp, #12]
 8017eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ebc:	4433      	add	r3, r6
 8017ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8017ec0:	e767      	b.n	8017d92 <_svfiprintf_r+0x4e>
 8017ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ec6:	460c      	mov	r4, r1
 8017ec8:	2001      	movs	r0, #1
 8017eca:	e7a5      	b.n	8017e18 <_svfiprintf_r+0xd4>
 8017ecc:	2300      	movs	r3, #0
 8017ece:	3401      	adds	r4, #1
 8017ed0:	9305      	str	r3, [sp, #20]
 8017ed2:	4619      	mov	r1, r3
 8017ed4:	f04f 0c0a 	mov.w	ip, #10
 8017ed8:	4620      	mov	r0, r4
 8017eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ede:	3a30      	subs	r2, #48	; 0x30
 8017ee0:	2a09      	cmp	r2, #9
 8017ee2:	d903      	bls.n	8017eec <_svfiprintf_r+0x1a8>
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d0c5      	beq.n	8017e74 <_svfiprintf_r+0x130>
 8017ee8:	9105      	str	r1, [sp, #20]
 8017eea:	e7c3      	b.n	8017e74 <_svfiprintf_r+0x130>
 8017eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ef0:	4604      	mov	r4, r0
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	e7f0      	b.n	8017ed8 <_svfiprintf_r+0x194>
 8017ef6:	ab03      	add	r3, sp, #12
 8017ef8:	9300      	str	r3, [sp, #0]
 8017efa:	462a      	mov	r2, r5
 8017efc:	4b0f      	ldr	r3, [pc, #60]	; (8017f3c <_svfiprintf_r+0x1f8>)
 8017efe:	a904      	add	r1, sp, #16
 8017f00:	4638      	mov	r0, r7
 8017f02:	f3af 8000 	nop.w
 8017f06:	1c42      	adds	r2, r0, #1
 8017f08:	4606      	mov	r6, r0
 8017f0a:	d1d6      	bne.n	8017eba <_svfiprintf_r+0x176>
 8017f0c:	89ab      	ldrh	r3, [r5, #12]
 8017f0e:	065b      	lsls	r3, r3, #25
 8017f10:	f53f af2c 	bmi.w	8017d6c <_svfiprintf_r+0x28>
 8017f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f16:	b01d      	add	sp, #116	; 0x74
 8017f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f1c:	ab03      	add	r3, sp, #12
 8017f1e:	9300      	str	r3, [sp, #0]
 8017f20:	462a      	mov	r2, r5
 8017f22:	4b06      	ldr	r3, [pc, #24]	; (8017f3c <_svfiprintf_r+0x1f8>)
 8017f24:	a904      	add	r1, sp, #16
 8017f26:	4638      	mov	r0, r7
 8017f28:	f000 f87a 	bl	8018020 <_printf_i>
 8017f2c:	e7eb      	b.n	8017f06 <_svfiprintf_r+0x1c2>
 8017f2e:	bf00      	nop
 8017f30:	08018a6c 	.word	0x08018a6c
 8017f34:	08018a76 	.word	0x08018a76
 8017f38:	00000000 	.word	0x00000000
 8017f3c:	08017c8d 	.word	0x08017c8d
 8017f40:	08018a72 	.word	0x08018a72

08017f44 <_printf_common>:
 8017f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f48:	4616      	mov	r6, r2
 8017f4a:	4699      	mov	r9, r3
 8017f4c:	688a      	ldr	r2, [r1, #8]
 8017f4e:	690b      	ldr	r3, [r1, #16]
 8017f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017f54:	4293      	cmp	r3, r2
 8017f56:	bfb8      	it	lt
 8017f58:	4613      	movlt	r3, r2
 8017f5a:	6033      	str	r3, [r6, #0]
 8017f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f60:	4607      	mov	r7, r0
 8017f62:	460c      	mov	r4, r1
 8017f64:	b10a      	cbz	r2, 8017f6a <_printf_common+0x26>
 8017f66:	3301      	adds	r3, #1
 8017f68:	6033      	str	r3, [r6, #0]
 8017f6a:	6823      	ldr	r3, [r4, #0]
 8017f6c:	0699      	lsls	r1, r3, #26
 8017f6e:	bf42      	ittt	mi
 8017f70:	6833      	ldrmi	r3, [r6, #0]
 8017f72:	3302      	addmi	r3, #2
 8017f74:	6033      	strmi	r3, [r6, #0]
 8017f76:	6825      	ldr	r5, [r4, #0]
 8017f78:	f015 0506 	ands.w	r5, r5, #6
 8017f7c:	d106      	bne.n	8017f8c <_printf_common+0x48>
 8017f7e:	f104 0a19 	add.w	sl, r4, #25
 8017f82:	68e3      	ldr	r3, [r4, #12]
 8017f84:	6832      	ldr	r2, [r6, #0]
 8017f86:	1a9b      	subs	r3, r3, r2
 8017f88:	42ab      	cmp	r3, r5
 8017f8a:	dc26      	bgt.n	8017fda <_printf_common+0x96>
 8017f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f90:	1e13      	subs	r3, r2, #0
 8017f92:	6822      	ldr	r2, [r4, #0]
 8017f94:	bf18      	it	ne
 8017f96:	2301      	movne	r3, #1
 8017f98:	0692      	lsls	r2, r2, #26
 8017f9a:	d42b      	bmi.n	8017ff4 <_printf_common+0xb0>
 8017f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017fa0:	4649      	mov	r1, r9
 8017fa2:	4638      	mov	r0, r7
 8017fa4:	47c0      	blx	r8
 8017fa6:	3001      	adds	r0, #1
 8017fa8:	d01e      	beq.n	8017fe8 <_printf_common+0xa4>
 8017faa:	6823      	ldr	r3, [r4, #0]
 8017fac:	68e5      	ldr	r5, [r4, #12]
 8017fae:	6832      	ldr	r2, [r6, #0]
 8017fb0:	f003 0306 	and.w	r3, r3, #6
 8017fb4:	2b04      	cmp	r3, #4
 8017fb6:	bf08      	it	eq
 8017fb8:	1aad      	subeq	r5, r5, r2
 8017fba:	68a3      	ldr	r3, [r4, #8]
 8017fbc:	6922      	ldr	r2, [r4, #16]
 8017fbe:	bf0c      	ite	eq
 8017fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017fc4:	2500      	movne	r5, #0
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	bfc4      	itt	gt
 8017fca:	1a9b      	subgt	r3, r3, r2
 8017fcc:	18ed      	addgt	r5, r5, r3
 8017fce:	2600      	movs	r6, #0
 8017fd0:	341a      	adds	r4, #26
 8017fd2:	42b5      	cmp	r5, r6
 8017fd4:	d11a      	bne.n	801800c <_printf_common+0xc8>
 8017fd6:	2000      	movs	r0, #0
 8017fd8:	e008      	b.n	8017fec <_printf_common+0xa8>
 8017fda:	2301      	movs	r3, #1
 8017fdc:	4652      	mov	r2, sl
 8017fde:	4649      	mov	r1, r9
 8017fe0:	4638      	mov	r0, r7
 8017fe2:	47c0      	blx	r8
 8017fe4:	3001      	adds	r0, #1
 8017fe6:	d103      	bne.n	8017ff0 <_printf_common+0xac>
 8017fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8017fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ff0:	3501      	adds	r5, #1
 8017ff2:	e7c6      	b.n	8017f82 <_printf_common+0x3e>
 8017ff4:	18e1      	adds	r1, r4, r3
 8017ff6:	1c5a      	adds	r2, r3, #1
 8017ff8:	2030      	movs	r0, #48	; 0x30
 8017ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017ffe:	4422      	add	r2, r4
 8018000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018008:	3302      	adds	r3, #2
 801800a:	e7c7      	b.n	8017f9c <_printf_common+0x58>
 801800c:	2301      	movs	r3, #1
 801800e:	4622      	mov	r2, r4
 8018010:	4649      	mov	r1, r9
 8018012:	4638      	mov	r0, r7
 8018014:	47c0      	blx	r8
 8018016:	3001      	adds	r0, #1
 8018018:	d0e6      	beq.n	8017fe8 <_printf_common+0xa4>
 801801a:	3601      	adds	r6, #1
 801801c:	e7d9      	b.n	8017fd2 <_printf_common+0x8e>
	...

08018020 <_printf_i>:
 8018020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018024:	7e0f      	ldrb	r7, [r1, #24]
 8018026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018028:	2f78      	cmp	r7, #120	; 0x78
 801802a:	4691      	mov	r9, r2
 801802c:	4680      	mov	r8, r0
 801802e:	460c      	mov	r4, r1
 8018030:	469a      	mov	sl, r3
 8018032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018036:	d807      	bhi.n	8018048 <_printf_i+0x28>
 8018038:	2f62      	cmp	r7, #98	; 0x62
 801803a:	d80a      	bhi.n	8018052 <_printf_i+0x32>
 801803c:	2f00      	cmp	r7, #0
 801803e:	f000 80d8 	beq.w	80181f2 <_printf_i+0x1d2>
 8018042:	2f58      	cmp	r7, #88	; 0x58
 8018044:	f000 80a3 	beq.w	801818e <_printf_i+0x16e>
 8018048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801804c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018050:	e03a      	b.n	80180c8 <_printf_i+0xa8>
 8018052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018056:	2b15      	cmp	r3, #21
 8018058:	d8f6      	bhi.n	8018048 <_printf_i+0x28>
 801805a:	a101      	add	r1, pc, #4	; (adr r1, 8018060 <_printf_i+0x40>)
 801805c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018060:	080180b9 	.word	0x080180b9
 8018064:	080180cd 	.word	0x080180cd
 8018068:	08018049 	.word	0x08018049
 801806c:	08018049 	.word	0x08018049
 8018070:	08018049 	.word	0x08018049
 8018074:	08018049 	.word	0x08018049
 8018078:	080180cd 	.word	0x080180cd
 801807c:	08018049 	.word	0x08018049
 8018080:	08018049 	.word	0x08018049
 8018084:	08018049 	.word	0x08018049
 8018088:	08018049 	.word	0x08018049
 801808c:	080181d9 	.word	0x080181d9
 8018090:	080180fd 	.word	0x080180fd
 8018094:	080181bb 	.word	0x080181bb
 8018098:	08018049 	.word	0x08018049
 801809c:	08018049 	.word	0x08018049
 80180a0:	080181fb 	.word	0x080181fb
 80180a4:	08018049 	.word	0x08018049
 80180a8:	080180fd 	.word	0x080180fd
 80180ac:	08018049 	.word	0x08018049
 80180b0:	08018049 	.word	0x08018049
 80180b4:	080181c3 	.word	0x080181c3
 80180b8:	682b      	ldr	r3, [r5, #0]
 80180ba:	1d1a      	adds	r2, r3, #4
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	602a      	str	r2, [r5, #0]
 80180c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80180c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80180c8:	2301      	movs	r3, #1
 80180ca:	e0a3      	b.n	8018214 <_printf_i+0x1f4>
 80180cc:	6820      	ldr	r0, [r4, #0]
 80180ce:	6829      	ldr	r1, [r5, #0]
 80180d0:	0606      	lsls	r6, r0, #24
 80180d2:	f101 0304 	add.w	r3, r1, #4
 80180d6:	d50a      	bpl.n	80180ee <_printf_i+0xce>
 80180d8:	680e      	ldr	r6, [r1, #0]
 80180da:	602b      	str	r3, [r5, #0]
 80180dc:	2e00      	cmp	r6, #0
 80180de:	da03      	bge.n	80180e8 <_printf_i+0xc8>
 80180e0:	232d      	movs	r3, #45	; 0x2d
 80180e2:	4276      	negs	r6, r6
 80180e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180e8:	485e      	ldr	r0, [pc, #376]	; (8018264 <_printf_i+0x244>)
 80180ea:	230a      	movs	r3, #10
 80180ec:	e019      	b.n	8018122 <_printf_i+0x102>
 80180ee:	680e      	ldr	r6, [r1, #0]
 80180f0:	602b      	str	r3, [r5, #0]
 80180f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80180f6:	bf18      	it	ne
 80180f8:	b236      	sxthne	r6, r6
 80180fa:	e7ef      	b.n	80180dc <_printf_i+0xbc>
 80180fc:	682b      	ldr	r3, [r5, #0]
 80180fe:	6820      	ldr	r0, [r4, #0]
 8018100:	1d19      	adds	r1, r3, #4
 8018102:	6029      	str	r1, [r5, #0]
 8018104:	0601      	lsls	r1, r0, #24
 8018106:	d501      	bpl.n	801810c <_printf_i+0xec>
 8018108:	681e      	ldr	r6, [r3, #0]
 801810a:	e002      	b.n	8018112 <_printf_i+0xf2>
 801810c:	0646      	lsls	r6, r0, #25
 801810e:	d5fb      	bpl.n	8018108 <_printf_i+0xe8>
 8018110:	881e      	ldrh	r6, [r3, #0]
 8018112:	4854      	ldr	r0, [pc, #336]	; (8018264 <_printf_i+0x244>)
 8018114:	2f6f      	cmp	r7, #111	; 0x6f
 8018116:	bf0c      	ite	eq
 8018118:	2308      	moveq	r3, #8
 801811a:	230a      	movne	r3, #10
 801811c:	2100      	movs	r1, #0
 801811e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018122:	6865      	ldr	r5, [r4, #4]
 8018124:	60a5      	str	r5, [r4, #8]
 8018126:	2d00      	cmp	r5, #0
 8018128:	bfa2      	ittt	ge
 801812a:	6821      	ldrge	r1, [r4, #0]
 801812c:	f021 0104 	bicge.w	r1, r1, #4
 8018130:	6021      	strge	r1, [r4, #0]
 8018132:	b90e      	cbnz	r6, 8018138 <_printf_i+0x118>
 8018134:	2d00      	cmp	r5, #0
 8018136:	d04d      	beq.n	80181d4 <_printf_i+0x1b4>
 8018138:	4615      	mov	r5, r2
 801813a:	fbb6 f1f3 	udiv	r1, r6, r3
 801813e:	fb03 6711 	mls	r7, r3, r1, r6
 8018142:	5dc7      	ldrb	r7, [r0, r7]
 8018144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018148:	4637      	mov	r7, r6
 801814a:	42bb      	cmp	r3, r7
 801814c:	460e      	mov	r6, r1
 801814e:	d9f4      	bls.n	801813a <_printf_i+0x11a>
 8018150:	2b08      	cmp	r3, #8
 8018152:	d10b      	bne.n	801816c <_printf_i+0x14c>
 8018154:	6823      	ldr	r3, [r4, #0]
 8018156:	07de      	lsls	r6, r3, #31
 8018158:	d508      	bpl.n	801816c <_printf_i+0x14c>
 801815a:	6923      	ldr	r3, [r4, #16]
 801815c:	6861      	ldr	r1, [r4, #4]
 801815e:	4299      	cmp	r1, r3
 8018160:	bfde      	ittt	le
 8018162:	2330      	movle	r3, #48	; 0x30
 8018164:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018168:	f105 35ff 	addle.w	r5, r5, #4294967295
 801816c:	1b52      	subs	r2, r2, r5
 801816e:	6122      	str	r2, [r4, #16]
 8018170:	f8cd a000 	str.w	sl, [sp]
 8018174:	464b      	mov	r3, r9
 8018176:	aa03      	add	r2, sp, #12
 8018178:	4621      	mov	r1, r4
 801817a:	4640      	mov	r0, r8
 801817c:	f7ff fee2 	bl	8017f44 <_printf_common>
 8018180:	3001      	adds	r0, #1
 8018182:	d14c      	bne.n	801821e <_printf_i+0x1fe>
 8018184:	f04f 30ff 	mov.w	r0, #4294967295
 8018188:	b004      	add	sp, #16
 801818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801818e:	4835      	ldr	r0, [pc, #212]	; (8018264 <_printf_i+0x244>)
 8018190:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018194:	6829      	ldr	r1, [r5, #0]
 8018196:	6823      	ldr	r3, [r4, #0]
 8018198:	f851 6b04 	ldr.w	r6, [r1], #4
 801819c:	6029      	str	r1, [r5, #0]
 801819e:	061d      	lsls	r5, r3, #24
 80181a0:	d514      	bpl.n	80181cc <_printf_i+0x1ac>
 80181a2:	07df      	lsls	r7, r3, #31
 80181a4:	bf44      	itt	mi
 80181a6:	f043 0320 	orrmi.w	r3, r3, #32
 80181aa:	6023      	strmi	r3, [r4, #0]
 80181ac:	b91e      	cbnz	r6, 80181b6 <_printf_i+0x196>
 80181ae:	6823      	ldr	r3, [r4, #0]
 80181b0:	f023 0320 	bic.w	r3, r3, #32
 80181b4:	6023      	str	r3, [r4, #0]
 80181b6:	2310      	movs	r3, #16
 80181b8:	e7b0      	b.n	801811c <_printf_i+0xfc>
 80181ba:	6823      	ldr	r3, [r4, #0]
 80181bc:	f043 0320 	orr.w	r3, r3, #32
 80181c0:	6023      	str	r3, [r4, #0]
 80181c2:	2378      	movs	r3, #120	; 0x78
 80181c4:	4828      	ldr	r0, [pc, #160]	; (8018268 <_printf_i+0x248>)
 80181c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80181ca:	e7e3      	b.n	8018194 <_printf_i+0x174>
 80181cc:	0659      	lsls	r1, r3, #25
 80181ce:	bf48      	it	mi
 80181d0:	b2b6      	uxthmi	r6, r6
 80181d2:	e7e6      	b.n	80181a2 <_printf_i+0x182>
 80181d4:	4615      	mov	r5, r2
 80181d6:	e7bb      	b.n	8018150 <_printf_i+0x130>
 80181d8:	682b      	ldr	r3, [r5, #0]
 80181da:	6826      	ldr	r6, [r4, #0]
 80181dc:	6961      	ldr	r1, [r4, #20]
 80181de:	1d18      	adds	r0, r3, #4
 80181e0:	6028      	str	r0, [r5, #0]
 80181e2:	0635      	lsls	r5, r6, #24
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	d501      	bpl.n	80181ec <_printf_i+0x1cc>
 80181e8:	6019      	str	r1, [r3, #0]
 80181ea:	e002      	b.n	80181f2 <_printf_i+0x1d2>
 80181ec:	0670      	lsls	r0, r6, #25
 80181ee:	d5fb      	bpl.n	80181e8 <_printf_i+0x1c8>
 80181f0:	8019      	strh	r1, [r3, #0]
 80181f2:	2300      	movs	r3, #0
 80181f4:	6123      	str	r3, [r4, #16]
 80181f6:	4615      	mov	r5, r2
 80181f8:	e7ba      	b.n	8018170 <_printf_i+0x150>
 80181fa:	682b      	ldr	r3, [r5, #0]
 80181fc:	1d1a      	adds	r2, r3, #4
 80181fe:	602a      	str	r2, [r5, #0]
 8018200:	681d      	ldr	r5, [r3, #0]
 8018202:	6862      	ldr	r2, [r4, #4]
 8018204:	2100      	movs	r1, #0
 8018206:	4628      	mov	r0, r5
 8018208:	f7e8 f802 	bl	8000210 <memchr>
 801820c:	b108      	cbz	r0, 8018212 <_printf_i+0x1f2>
 801820e:	1b40      	subs	r0, r0, r5
 8018210:	6060      	str	r0, [r4, #4]
 8018212:	6863      	ldr	r3, [r4, #4]
 8018214:	6123      	str	r3, [r4, #16]
 8018216:	2300      	movs	r3, #0
 8018218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801821c:	e7a8      	b.n	8018170 <_printf_i+0x150>
 801821e:	6923      	ldr	r3, [r4, #16]
 8018220:	462a      	mov	r2, r5
 8018222:	4649      	mov	r1, r9
 8018224:	4640      	mov	r0, r8
 8018226:	47d0      	blx	sl
 8018228:	3001      	adds	r0, #1
 801822a:	d0ab      	beq.n	8018184 <_printf_i+0x164>
 801822c:	6823      	ldr	r3, [r4, #0]
 801822e:	079b      	lsls	r3, r3, #30
 8018230:	d413      	bmi.n	801825a <_printf_i+0x23a>
 8018232:	68e0      	ldr	r0, [r4, #12]
 8018234:	9b03      	ldr	r3, [sp, #12]
 8018236:	4298      	cmp	r0, r3
 8018238:	bfb8      	it	lt
 801823a:	4618      	movlt	r0, r3
 801823c:	e7a4      	b.n	8018188 <_printf_i+0x168>
 801823e:	2301      	movs	r3, #1
 8018240:	4632      	mov	r2, r6
 8018242:	4649      	mov	r1, r9
 8018244:	4640      	mov	r0, r8
 8018246:	47d0      	blx	sl
 8018248:	3001      	adds	r0, #1
 801824a:	d09b      	beq.n	8018184 <_printf_i+0x164>
 801824c:	3501      	adds	r5, #1
 801824e:	68e3      	ldr	r3, [r4, #12]
 8018250:	9903      	ldr	r1, [sp, #12]
 8018252:	1a5b      	subs	r3, r3, r1
 8018254:	42ab      	cmp	r3, r5
 8018256:	dcf2      	bgt.n	801823e <_printf_i+0x21e>
 8018258:	e7eb      	b.n	8018232 <_printf_i+0x212>
 801825a:	2500      	movs	r5, #0
 801825c:	f104 0619 	add.w	r6, r4, #25
 8018260:	e7f5      	b.n	801824e <_printf_i+0x22e>
 8018262:	bf00      	nop
 8018264:	08018a7d 	.word	0x08018a7d
 8018268:	08018a8e 	.word	0x08018a8e

0801826c <memmove>:
 801826c:	4288      	cmp	r0, r1
 801826e:	b510      	push	{r4, lr}
 8018270:	eb01 0402 	add.w	r4, r1, r2
 8018274:	d902      	bls.n	801827c <memmove+0x10>
 8018276:	4284      	cmp	r4, r0
 8018278:	4623      	mov	r3, r4
 801827a:	d807      	bhi.n	801828c <memmove+0x20>
 801827c:	1e43      	subs	r3, r0, #1
 801827e:	42a1      	cmp	r1, r4
 8018280:	d008      	beq.n	8018294 <memmove+0x28>
 8018282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018286:	f803 2f01 	strb.w	r2, [r3, #1]!
 801828a:	e7f8      	b.n	801827e <memmove+0x12>
 801828c:	4402      	add	r2, r0
 801828e:	4601      	mov	r1, r0
 8018290:	428a      	cmp	r2, r1
 8018292:	d100      	bne.n	8018296 <memmove+0x2a>
 8018294:	bd10      	pop	{r4, pc}
 8018296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801829a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801829e:	e7f7      	b.n	8018290 <memmove+0x24>

080182a0 <_free_r>:
 80182a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80182a2:	2900      	cmp	r1, #0
 80182a4:	d044      	beq.n	8018330 <_free_r+0x90>
 80182a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182aa:	9001      	str	r0, [sp, #4]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	f1a1 0404 	sub.w	r4, r1, #4
 80182b2:	bfb8      	it	lt
 80182b4:	18e4      	addlt	r4, r4, r3
 80182b6:	f000 f913 	bl	80184e0 <__malloc_lock>
 80182ba:	4a1e      	ldr	r2, [pc, #120]	; (8018334 <_free_r+0x94>)
 80182bc:	9801      	ldr	r0, [sp, #4]
 80182be:	6813      	ldr	r3, [r2, #0]
 80182c0:	b933      	cbnz	r3, 80182d0 <_free_r+0x30>
 80182c2:	6063      	str	r3, [r4, #4]
 80182c4:	6014      	str	r4, [r2, #0]
 80182c6:	b003      	add	sp, #12
 80182c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80182cc:	f000 b90e 	b.w	80184ec <__malloc_unlock>
 80182d0:	42a3      	cmp	r3, r4
 80182d2:	d908      	bls.n	80182e6 <_free_r+0x46>
 80182d4:	6825      	ldr	r5, [r4, #0]
 80182d6:	1961      	adds	r1, r4, r5
 80182d8:	428b      	cmp	r3, r1
 80182da:	bf01      	itttt	eq
 80182dc:	6819      	ldreq	r1, [r3, #0]
 80182de:	685b      	ldreq	r3, [r3, #4]
 80182e0:	1949      	addeq	r1, r1, r5
 80182e2:	6021      	streq	r1, [r4, #0]
 80182e4:	e7ed      	b.n	80182c2 <_free_r+0x22>
 80182e6:	461a      	mov	r2, r3
 80182e8:	685b      	ldr	r3, [r3, #4]
 80182ea:	b10b      	cbz	r3, 80182f0 <_free_r+0x50>
 80182ec:	42a3      	cmp	r3, r4
 80182ee:	d9fa      	bls.n	80182e6 <_free_r+0x46>
 80182f0:	6811      	ldr	r1, [r2, #0]
 80182f2:	1855      	adds	r5, r2, r1
 80182f4:	42a5      	cmp	r5, r4
 80182f6:	d10b      	bne.n	8018310 <_free_r+0x70>
 80182f8:	6824      	ldr	r4, [r4, #0]
 80182fa:	4421      	add	r1, r4
 80182fc:	1854      	adds	r4, r2, r1
 80182fe:	42a3      	cmp	r3, r4
 8018300:	6011      	str	r1, [r2, #0]
 8018302:	d1e0      	bne.n	80182c6 <_free_r+0x26>
 8018304:	681c      	ldr	r4, [r3, #0]
 8018306:	685b      	ldr	r3, [r3, #4]
 8018308:	6053      	str	r3, [r2, #4]
 801830a:	4421      	add	r1, r4
 801830c:	6011      	str	r1, [r2, #0]
 801830e:	e7da      	b.n	80182c6 <_free_r+0x26>
 8018310:	d902      	bls.n	8018318 <_free_r+0x78>
 8018312:	230c      	movs	r3, #12
 8018314:	6003      	str	r3, [r0, #0]
 8018316:	e7d6      	b.n	80182c6 <_free_r+0x26>
 8018318:	6825      	ldr	r5, [r4, #0]
 801831a:	1961      	adds	r1, r4, r5
 801831c:	428b      	cmp	r3, r1
 801831e:	bf04      	itt	eq
 8018320:	6819      	ldreq	r1, [r3, #0]
 8018322:	685b      	ldreq	r3, [r3, #4]
 8018324:	6063      	str	r3, [r4, #4]
 8018326:	bf04      	itt	eq
 8018328:	1949      	addeq	r1, r1, r5
 801832a:	6021      	streq	r1, [r4, #0]
 801832c:	6054      	str	r4, [r2, #4]
 801832e:	e7ca      	b.n	80182c6 <_free_r+0x26>
 8018330:	b003      	add	sp, #12
 8018332:	bd30      	pop	{r4, r5, pc}
 8018334:	2000761c 	.word	0x2000761c

08018338 <sbrk_aligned>:
 8018338:	b570      	push	{r4, r5, r6, lr}
 801833a:	4e0e      	ldr	r6, [pc, #56]	; (8018374 <sbrk_aligned+0x3c>)
 801833c:	460c      	mov	r4, r1
 801833e:	6831      	ldr	r1, [r6, #0]
 8018340:	4605      	mov	r5, r0
 8018342:	b911      	cbnz	r1, 801834a <sbrk_aligned+0x12>
 8018344:	f000 f8bc 	bl	80184c0 <_sbrk_r>
 8018348:	6030      	str	r0, [r6, #0]
 801834a:	4621      	mov	r1, r4
 801834c:	4628      	mov	r0, r5
 801834e:	f000 f8b7 	bl	80184c0 <_sbrk_r>
 8018352:	1c43      	adds	r3, r0, #1
 8018354:	d00a      	beq.n	801836c <sbrk_aligned+0x34>
 8018356:	1cc4      	adds	r4, r0, #3
 8018358:	f024 0403 	bic.w	r4, r4, #3
 801835c:	42a0      	cmp	r0, r4
 801835e:	d007      	beq.n	8018370 <sbrk_aligned+0x38>
 8018360:	1a21      	subs	r1, r4, r0
 8018362:	4628      	mov	r0, r5
 8018364:	f000 f8ac 	bl	80184c0 <_sbrk_r>
 8018368:	3001      	adds	r0, #1
 801836a:	d101      	bne.n	8018370 <sbrk_aligned+0x38>
 801836c:	f04f 34ff 	mov.w	r4, #4294967295
 8018370:	4620      	mov	r0, r4
 8018372:	bd70      	pop	{r4, r5, r6, pc}
 8018374:	20007620 	.word	0x20007620

08018378 <_malloc_r>:
 8018378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801837c:	1ccd      	adds	r5, r1, #3
 801837e:	f025 0503 	bic.w	r5, r5, #3
 8018382:	3508      	adds	r5, #8
 8018384:	2d0c      	cmp	r5, #12
 8018386:	bf38      	it	cc
 8018388:	250c      	movcc	r5, #12
 801838a:	2d00      	cmp	r5, #0
 801838c:	4607      	mov	r7, r0
 801838e:	db01      	blt.n	8018394 <_malloc_r+0x1c>
 8018390:	42a9      	cmp	r1, r5
 8018392:	d905      	bls.n	80183a0 <_malloc_r+0x28>
 8018394:	230c      	movs	r3, #12
 8018396:	603b      	str	r3, [r7, #0]
 8018398:	2600      	movs	r6, #0
 801839a:	4630      	mov	r0, r6
 801839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183a0:	4e2e      	ldr	r6, [pc, #184]	; (801845c <_malloc_r+0xe4>)
 80183a2:	f000 f89d 	bl	80184e0 <__malloc_lock>
 80183a6:	6833      	ldr	r3, [r6, #0]
 80183a8:	461c      	mov	r4, r3
 80183aa:	bb34      	cbnz	r4, 80183fa <_malloc_r+0x82>
 80183ac:	4629      	mov	r1, r5
 80183ae:	4638      	mov	r0, r7
 80183b0:	f7ff ffc2 	bl	8018338 <sbrk_aligned>
 80183b4:	1c43      	adds	r3, r0, #1
 80183b6:	4604      	mov	r4, r0
 80183b8:	d14d      	bne.n	8018456 <_malloc_r+0xde>
 80183ba:	6834      	ldr	r4, [r6, #0]
 80183bc:	4626      	mov	r6, r4
 80183be:	2e00      	cmp	r6, #0
 80183c0:	d140      	bne.n	8018444 <_malloc_r+0xcc>
 80183c2:	6823      	ldr	r3, [r4, #0]
 80183c4:	4631      	mov	r1, r6
 80183c6:	4638      	mov	r0, r7
 80183c8:	eb04 0803 	add.w	r8, r4, r3
 80183cc:	f000 f878 	bl	80184c0 <_sbrk_r>
 80183d0:	4580      	cmp	r8, r0
 80183d2:	d13a      	bne.n	801844a <_malloc_r+0xd2>
 80183d4:	6821      	ldr	r1, [r4, #0]
 80183d6:	3503      	adds	r5, #3
 80183d8:	1a6d      	subs	r5, r5, r1
 80183da:	f025 0503 	bic.w	r5, r5, #3
 80183de:	3508      	adds	r5, #8
 80183e0:	2d0c      	cmp	r5, #12
 80183e2:	bf38      	it	cc
 80183e4:	250c      	movcc	r5, #12
 80183e6:	4629      	mov	r1, r5
 80183e8:	4638      	mov	r0, r7
 80183ea:	f7ff ffa5 	bl	8018338 <sbrk_aligned>
 80183ee:	3001      	adds	r0, #1
 80183f0:	d02b      	beq.n	801844a <_malloc_r+0xd2>
 80183f2:	6823      	ldr	r3, [r4, #0]
 80183f4:	442b      	add	r3, r5
 80183f6:	6023      	str	r3, [r4, #0]
 80183f8:	e00e      	b.n	8018418 <_malloc_r+0xa0>
 80183fa:	6822      	ldr	r2, [r4, #0]
 80183fc:	1b52      	subs	r2, r2, r5
 80183fe:	d41e      	bmi.n	801843e <_malloc_r+0xc6>
 8018400:	2a0b      	cmp	r2, #11
 8018402:	d916      	bls.n	8018432 <_malloc_r+0xba>
 8018404:	1961      	adds	r1, r4, r5
 8018406:	42a3      	cmp	r3, r4
 8018408:	6025      	str	r5, [r4, #0]
 801840a:	bf18      	it	ne
 801840c:	6059      	strne	r1, [r3, #4]
 801840e:	6863      	ldr	r3, [r4, #4]
 8018410:	bf08      	it	eq
 8018412:	6031      	streq	r1, [r6, #0]
 8018414:	5162      	str	r2, [r4, r5]
 8018416:	604b      	str	r3, [r1, #4]
 8018418:	4638      	mov	r0, r7
 801841a:	f104 060b 	add.w	r6, r4, #11
 801841e:	f000 f865 	bl	80184ec <__malloc_unlock>
 8018422:	f026 0607 	bic.w	r6, r6, #7
 8018426:	1d23      	adds	r3, r4, #4
 8018428:	1af2      	subs	r2, r6, r3
 801842a:	d0b6      	beq.n	801839a <_malloc_r+0x22>
 801842c:	1b9b      	subs	r3, r3, r6
 801842e:	50a3      	str	r3, [r4, r2]
 8018430:	e7b3      	b.n	801839a <_malloc_r+0x22>
 8018432:	6862      	ldr	r2, [r4, #4]
 8018434:	42a3      	cmp	r3, r4
 8018436:	bf0c      	ite	eq
 8018438:	6032      	streq	r2, [r6, #0]
 801843a:	605a      	strne	r2, [r3, #4]
 801843c:	e7ec      	b.n	8018418 <_malloc_r+0xa0>
 801843e:	4623      	mov	r3, r4
 8018440:	6864      	ldr	r4, [r4, #4]
 8018442:	e7b2      	b.n	80183aa <_malloc_r+0x32>
 8018444:	4634      	mov	r4, r6
 8018446:	6876      	ldr	r6, [r6, #4]
 8018448:	e7b9      	b.n	80183be <_malloc_r+0x46>
 801844a:	230c      	movs	r3, #12
 801844c:	603b      	str	r3, [r7, #0]
 801844e:	4638      	mov	r0, r7
 8018450:	f000 f84c 	bl	80184ec <__malloc_unlock>
 8018454:	e7a1      	b.n	801839a <_malloc_r+0x22>
 8018456:	6025      	str	r5, [r4, #0]
 8018458:	e7de      	b.n	8018418 <_malloc_r+0xa0>
 801845a:	bf00      	nop
 801845c:	2000761c 	.word	0x2000761c

08018460 <_realloc_r>:
 8018460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018464:	4680      	mov	r8, r0
 8018466:	4614      	mov	r4, r2
 8018468:	460e      	mov	r6, r1
 801846a:	b921      	cbnz	r1, 8018476 <_realloc_r+0x16>
 801846c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018470:	4611      	mov	r1, r2
 8018472:	f7ff bf81 	b.w	8018378 <_malloc_r>
 8018476:	b92a      	cbnz	r2, 8018484 <_realloc_r+0x24>
 8018478:	f7ff ff12 	bl	80182a0 <_free_r>
 801847c:	4625      	mov	r5, r4
 801847e:	4628      	mov	r0, r5
 8018480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018484:	f000 f838 	bl	80184f8 <_malloc_usable_size_r>
 8018488:	4284      	cmp	r4, r0
 801848a:	4607      	mov	r7, r0
 801848c:	d802      	bhi.n	8018494 <_realloc_r+0x34>
 801848e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018492:	d812      	bhi.n	80184ba <_realloc_r+0x5a>
 8018494:	4621      	mov	r1, r4
 8018496:	4640      	mov	r0, r8
 8018498:	f7ff ff6e 	bl	8018378 <_malloc_r>
 801849c:	4605      	mov	r5, r0
 801849e:	2800      	cmp	r0, #0
 80184a0:	d0ed      	beq.n	801847e <_realloc_r+0x1e>
 80184a2:	42bc      	cmp	r4, r7
 80184a4:	4622      	mov	r2, r4
 80184a6:	4631      	mov	r1, r6
 80184a8:	bf28      	it	cs
 80184aa:	463a      	movcs	r2, r7
 80184ac:	f7ff fbb8 	bl	8017c20 <memcpy>
 80184b0:	4631      	mov	r1, r6
 80184b2:	4640      	mov	r0, r8
 80184b4:	f7ff fef4 	bl	80182a0 <_free_r>
 80184b8:	e7e1      	b.n	801847e <_realloc_r+0x1e>
 80184ba:	4635      	mov	r5, r6
 80184bc:	e7df      	b.n	801847e <_realloc_r+0x1e>
	...

080184c0 <_sbrk_r>:
 80184c0:	b538      	push	{r3, r4, r5, lr}
 80184c2:	4d06      	ldr	r5, [pc, #24]	; (80184dc <_sbrk_r+0x1c>)
 80184c4:	2300      	movs	r3, #0
 80184c6:	4604      	mov	r4, r0
 80184c8:	4608      	mov	r0, r1
 80184ca:	602b      	str	r3, [r5, #0]
 80184cc:	f7ee f830 	bl	8006530 <_sbrk>
 80184d0:	1c43      	adds	r3, r0, #1
 80184d2:	d102      	bne.n	80184da <_sbrk_r+0x1a>
 80184d4:	682b      	ldr	r3, [r5, #0]
 80184d6:	b103      	cbz	r3, 80184da <_sbrk_r+0x1a>
 80184d8:	6023      	str	r3, [r4, #0]
 80184da:	bd38      	pop	{r3, r4, r5, pc}
 80184dc:	20007624 	.word	0x20007624

080184e0 <__malloc_lock>:
 80184e0:	4801      	ldr	r0, [pc, #4]	; (80184e8 <__malloc_lock+0x8>)
 80184e2:	f000 b811 	b.w	8018508 <__retarget_lock_acquire_recursive>
 80184e6:	bf00      	nop
 80184e8:	20007628 	.word	0x20007628

080184ec <__malloc_unlock>:
 80184ec:	4801      	ldr	r0, [pc, #4]	; (80184f4 <__malloc_unlock+0x8>)
 80184ee:	f000 b80c 	b.w	801850a <__retarget_lock_release_recursive>
 80184f2:	bf00      	nop
 80184f4:	20007628 	.word	0x20007628

080184f8 <_malloc_usable_size_r>:
 80184f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80184fc:	1f18      	subs	r0, r3, #4
 80184fe:	2b00      	cmp	r3, #0
 8018500:	bfbc      	itt	lt
 8018502:	580b      	ldrlt	r3, [r1, r0]
 8018504:	18c0      	addlt	r0, r0, r3
 8018506:	4770      	bx	lr

08018508 <__retarget_lock_acquire_recursive>:
 8018508:	4770      	bx	lr

0801850a <__retarget_lock_release_recursive>:
 801850a:	4770      	bx	lr

0801850c <_init>:
 801850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801850e:	bf00      	nop
 8018510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018512:	bc08      	pop	{r3}
 8018514:	469e      	mov	lr, r3
 8018516:	4770      	bx	lr

08018518 <_fini>:
 8018518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801851a:	bf00      	nop
 801851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801851e:	bc08      	pop	{r3}
 8018520:	469e      	mov	lr, r3
 8018522:	4770      	bx	lr
