
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e984  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800eb48  0800eb48  0001eb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebe4  0800ebe4  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebe4  0800ebe4  0001ebe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebec  0800ebec  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebec  0800ebec  0001ebec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebf0  0800ebf0  0001ebf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800ebf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004094  20000174  0800ed68  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20004208  0800ed68  00024208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f840  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006290  00000000  00000000  0004f9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee8  00000000  00000000  00055c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c50  00000000  00000000  00057b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7a2  00000000  00000000  000597b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c1a8  00000000  00000000  00085f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1260  00000000  00000000  000b20fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a335a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008004  00000000  00000000  001a33b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000174 	.word	0x20000174
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800eb30 	.word	0x0800eb30

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000178 	.word	0x20000178
 8000200:	0800eb30 	.word	0x0800eb30

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <FT_CAN_ProcessData>:
}

#ifndef FT_CAN_SIMPLE

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800050a:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8000512:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 8000514:	89fb      	ldrh	r3, [r7, #14]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	2b00      	cmp	r3, #0
 800051c:	f040 8215 	bne.w	800094a <FT_CAN_ProcessData+0x44e>
	{
		return;
	}

	switch(id >> 1)
 8000520:	89fb      	ldrh	r3, [r7, #14]
 8000522:	085b      	lsrs	r3, r3, #1
 8000524:	b29b      	uxth	r3, r3
 8000526:	2b8d      	cmp	r3, #141	; 0x8d
 8000528:	f300 8166 	bgt.w	80007f8 <FT_CAN_ProcessData+0x2fc>
 800052c:	2b00      	cmp	r3, #0
 800052e:	dc41      	bgt.n	80005b4 <FT_CAN_ProcessData+0xb8>
 8000530:	e204      	b.n	800093c <FT_CAN_ProcessData+0x440>
 8000532:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000536:	2b1b      	cmp	r3, #27
 8000538:	f200 8200 	bhi.w	800093c <FT_CAN_ProcessData+0x440>
 800053c:	a201      	add	r2, pc, #4	; (adr r2, 8000544 <FT_CAN_ProcessData+0x48>)
 800053e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000542:	bf00      	nop
 8000544:	0800090d 	.word	0x0800090d
 8000548:	0800093d 	.word	0x0800093d
 800054c:	0800093d 	.word	0x0800093d
 8000550:	0800093d 	.word	0x0800093d
 8000554:	0800093d 	.word	0x0800093d
 8000558:	0800093d 	.word	0x0800093d
 800055c:	0800093d 	.word	0x0800093d
 8000560:	0800093d 	.word	0x0800093d
 8000564:	0800093d 	.word	0x0800093d
 8000568:	0800093d 	.word	0x0800093d
 800056c:	0800093d 	.word	0x0800093d
 8000570:	0800093d 	.word	0x0800093d
 8000574:	0800093d 	.word	0x0800093d
 8000578:	0800093d 	.word	0x0800093d
 800057c:	0800093d 	.word	0x0800093d
 8000580:	0800093d 	.word	0x0800093d
 8000584:	0800093d 	.word	0x0800093d
 8000588:	0800093d 	.word	0x0800093d
 800058c:	08000915 	.word	0x08000915
 8000590:	0800093d 	.word	0x0800093d
 8000594:	0800093d 	.word	0x0800093d
 8000598:	0800093d 	.word	0x0800093d
 800059c:	0800093d 	.word	0x0800093d
 80005a0:	0800093d 	.word	0x0800093d
 80005a4:	0800091d 	.word	0x0800091d
 80005a8:	08000925 	.word	0x08000925
 80005ac:	0800092d 	.word	0x0800092d
 80005b0:	08000935 	.word	0x08000935
 80005b4:	3b01      	subs	r3, #1
 80005b6:	2b8c      	cmp	r3, #140	; 0x8c
 80005b8:	f200 81c0 	bhi.w	800093c <FT_CAN_ProcessData+0x440>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <FT_CAN_ProcessData+0xc8>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	0800080b 	.word	0x0800080b
 80005c8:	08000815 	.word	0x08000815
 80005cc:	0800081d 	.word	0x0800081d
 80005d0:	08000825 	.word	0x08000825
 80005d4:	0800082d 	.word	0x0800082d
 80005d8:	08000837 	.word	0x08000837
 80005dc:	0800083f 	.word	0x0800083f
 80005e0:	08000875 	.word	0x08000875
 80005e4:	0800087d 	.word	0x0800087d
 80005e8:	08000885 	.word	0x08000885
 80005ec:	0800088d 	.word	0x0800088d
 80005f0:	08000895 	.word	0x08000895
 80005f4:	0800089d 	.word	0x0800089d
 80005f8:	080008a5 	.word	0x080008a5
 80005fc:	080008ad 	.word	0x080008ad
 8000600:	080008b5 	.word	0x080008b5
 8000604:	08000847 	.word	0x08000847
 8000608:	0800093d 	.word	0x0800093d
 800060c:	0800093d 	.word	0x0800093d
 8000610:	0800093d 	.word	0x0800093d
 8000614:	0800093d 	.word	0x0800093d
 8000618:	0800093d 	.word	0x0800093d
 800061c:	0800093d 	.word	0x0800093d
 8000620:	0800093d 	.word	0x0800093d
 8000624:	0800093d 	.word	0x0800093d
 8000628:	0800093d 	.word	0x0800093d
 800062c:	0800093d 	.word	0x0800093d
 8000630:	0800093d 	.word	0x0800093d
 8000634:	0800093d 	.word	0x0800093d
 8000638:	0800093d 	.word	0x0800093d
 800063c:	0800093d 	.word	0x0800093d
 8000640:	0800093d 	.word	0x0800093d
 8000644:	0800093d 	.word	0x0800093d
 8000648:	0800093d 	.word	0x0800093d
 800064c:	0800093d 	.word	0x0800093d
 8000650:	0800093d 	.word	0x0800093d
 8000654:	0800093d 	.word	0x0800093d
 8000658:	0800093d 	.word	0x0800093d
 800065c:	0800084f 	.word	0x0800084f
 8000660:	0800093d 	.word	0x0800093d
 8000664:	0800093d 	.word	0x0800093d
 8000668:	0800093d 	.word	0x0800093d
 800066c:	0800093d 	.word	0x0800093d
 8000670:	0800093d 	.word	0x0800093d
 8000674:	0800093d 	.word	0x0800093d
 8000678:	0800093d 	.word	0x0800093d
 800067c:	0800093d 	.word	0x0800093d
 8000680:	0800093d 	.word	0x0800093d
 8000684:	0800093d 	.word	0x0800093d
 8000688:	0800093d 	.word	0x0800093d
 800068c:	0800093d 	.word	0x0800093d
 8000690:	0800093d 	.word	0x0800093d
 8000694:	0800093d 	.word	0x0800093d
 8000698:	0800093d 	.word	0x0800093d
 800069c:	0800093d 	.word	0x0800093d
 80006a0:	0800093d 	.word	0x0800093d
 80006a4:	0800093d 	.word	0x0800093d
 80006a8:	0800093d 	.word	0x0800093d
 80006ac:	0800093d 	.word	0x0800093d
 80006b0:	0800093d 	.word	0x0800093d
 80006b4:	0800093d 	.word	0x0800093d
 80006b8:	0800093d 	.word	0x0800093d
 80006bc:	0800093d 	.word	0x0800093d
 80006c0:	0800093d 	.word	0x0800093d
 80006c4:	0800093d 	.word	0x0800093d
 80006c8:	08000857 	.word	0x08000857
 80006cc:	0800093d 	.word	0x0800093d
 80006d0:	0800093d 	.word	0x0800093d
 80006d4:	0800093d 	.word	0x0800093d
 80006d8:	0800093d 	.word	0x0800093d
 80006dc:	0800093d 	.word	0x0800093d
 80006e0:	080008bd 	.word	0x080008bd
 80006e4:	080008c5 	.word	0x080008c5
 80006e8:	080008cd 	.word	0x080008cd
 80006ec:	080008d5 	.word	0x080008d5
 80006f0:	080008dd 	.word	0x080008dd
 80006f4:	080008e5 	.word	0x080008e5
 80006f8:	080008ed 	.word	0x080008ed
 80006fc:	080008f5 	.word	0x080008f5
 8000700:	080008fd 	.word	0x080008fd
 8000704:	08000905 	.word	0x08000905
 8000708:	0800093d 	.word	0x0800093d
 800070c:	0800093d 	.word	0x0800093d
 8000710:	0800093d 	.word	0x0800093d
 8000714:	0800093d 	.word	0x0800093d
 8000718:	0800093d 	.word	0x0800093d
 800071c:	0800093d 	.word	0x0800093d
 8000720:	0800093d 	.word	0x0800093d
 8000724:	0800093d 	.word	0x0800093d
 8000728:	0800093d 	.word	0x0800093d
 800072c:	0800093d 	.word	0x0800093d
 8000730:	0800093d 	.word	0x0800093d
 8000734:	0800093d 	.word	0x0800093d
 8000738:	0800093d 	.word	0x0800093d
 800073c:	0800093d 	.word	0x0800093d
 8000740:	0800093d 	.word	0x0800093d
 8000744:	0800093d 	.word	0x0800093d
 8000748:	0800093d 	.word	0x0800093d
 800074c:	0800093d 	.word	0x0800093d
 8000750:	0800093d 	.word	0x0800093d
 8000754:	0800093d 	.word	0x0800093d
 8000758:	0800093d 	.word	0x0800093d
 800075c:	0800093d 	.word	0x0800093d
 8000760:	0800093d 	.word	0x0800093d
 8000764:	0800093d 	.word	0x0800093d
 8000768:	0800093d 	.word	0x0800093d
 800076c:	0800093d 	.word	0x0800093d
 8000770:	0800093d 	.word	0x0800093d
 8000774:	0800093d 	.word	0x0800093d
 8000778:	0800093d 	.word	0x0800093d
 800077c:	0800093d 	.word	0x0800093d
 8000780:	0800093d 	.word	0x0800093d
 8000784:	0800093d 	.word	0x0800093d
 8000788:	0800093d 	.word	0x0800093d
 800078c:	0800093d 	.word	0x0800093d
 8000790:	0800093d 	.word	0x0800093d
 8000794:	0800093d 	.word	0x0800093d
 8000798:	0800093d 	.word	0x0800093d
 800079c:	0800093d 	.word	0x0800093d
 80007a0:	0800093d 	.word	0x0800093d
 80007a4:	0800093d 	.word	0x0800093d
 80007a8:	0800093d 	.word	0x0800093d
 80007ac:	0800093d 	.word	0x0800093d
 80007b0:	0800093d 	.word	0x0800093d
 80007b4:	0800093d 	.word	0x0800093d
 80007b8:	0800093d 	.word	0x0800093d
 80007bc:	0800093d 	.word	0x0800093d
 80007c0:	0800093d 	.word	0x0800093d
 80007c4:	0800093d 	.word	0x0800093d
 80007c8:	0800093d 	.word	0x0800093d
 80007cc:	0800093d 	.word	0x0800093d
 80007d0:	0800093d 	.word	0x0800093d
 80007d4:	0800093d 	.word	0x0800093d
 80007d8:	0800093d 	.word	0x0800093d
 80007dc:	0800093d 	.word	0x0800093d
 80007e0:	0800093d 	.word	0x0800093d
 80007e4:	0800093d 	.word	0x0800093d
 80007e8:	0800093d 	.word	0x0800093d
 80007ec:	0800093d 	.word	0x0800093d
 80007f0:	08000861 	.word	0x08000861
 80007f4:	0800086b 	.word	0x0800086b
 80007f8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80007fc:	f280 809e 	bge.w	800093c <FT_CAN_ProcessData+0x440>
 8000800:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8000804:	f6bf ae95 	bge.w	8000532 <FT_CAN_ProcessData+0x36>
 8000808:	e098      	b.n	800093c <FT_CAN_ProcessData+0x440>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	89ba      	ldrh	r2, [r7, #12]
 800080e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8000812:	e093      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	89ba      	ldrh	r2, [r7, #12]
 8000818:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 800081a:	e08f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	89ba      	ldrh	r2, [r7, #12]
 8000820:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8000822:	e08b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	89ba      	ldrh	r2, [r7, #12]
 8000828:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 800082a:	e087      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	89ba      	ldrh	r2, [r7, #12]
 8000830:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 8000834:	e082      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	89ba      	ldrh	r2, [r7, #12]
 800083a:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 800083c:	e07e      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	89ba      	ldrh	r2, [r7, #12]
 8000842:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8000844:	e07a      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	89ba      	ldrh	r2, [r7, #12]
 800084a:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 800084c:	e076      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	89ba      	ldrh	r2, [r7, #12]
 8000852:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8000854:	e072      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	89ba      	ldrh	r2, [r7, #12]
 800085a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 800085e:	e06d      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	89ba      	ldrh	r2, [r7, #12]
 8000864:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 8000868:	e068      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	89ba      	ldrh	r2, [r7, #12]
 800086e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 8000872:	e063      	b.n	800093c <FT_CAN_ProcessData+0x440>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	89ba      	ldrh	r2, [r7, #12]
 8000878:	831a      	strh	r2, [r3, #24]
			break;
 800087a:	e05f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	89ba      	ldrh	r2, [r7, #12]
 8000880:	805a      	strh	r2, [r3, #2]
			break;
 8000882:	e05b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	89ba      	ldrh	r2, [r7, #12]
 8000888:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 800088a:	e057      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	89ba      	ldrh	r2, [r7, #12]
 8000890:	841a      	strh	r2, [r3, #32]
			break;
 8000892:	e053      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	89ba      	ldrh	r2, [r7, #12]
 8000898:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 800089a:	e04f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	89ba      	ldrh	r2, [r7, #12]
 80008a0:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 80008a2:	e04b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	89ba      	ldrh	r2, [r7, #12]
 80008a8:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 80008aa:	e047      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	89ba      	ldrh	r2, [r7, #12]
 80008b0:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 80008b2:	e043      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	89ba      	ldrh	r2, [r7, #12]
 80008b8:	821a      	strh	r2, [r3, #16]
			break;
 80008ba:	e03f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	89ba      	ldrh	r2, [r7, #12]
 80008c0:	839a      	strh	r2, [r3, #28]
			break;
 80008c2:	e03b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	89ba      	ldrh	r2, [r7, #12]
 80008c8:	83da      	strh	r2, [r3, #30]
			break;
 80008ca:	e037      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	89ba      	ldrh	r2, [r7, #12]
 80008d0:	835a      	strh	r2, [r3, #26]
			break;
 80008d2:	e033      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	89ba      	ldrh	r2, [r7, #12]
 80008d8:	819a      	strh	r2, [r3, #12]
			break;
 80008da:	e02f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	89ba      	ldrh	r2, [r7, #12]
 80008e0:	801a      	strh	r2, [r3, #0]
			break;
 80008e2:	e02b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	89ba      	ldrh	r2, [r7, #12]
 80008e8:	811a      	strh	r2, [r3, #8]
			break;
 80008ea:	e027      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	89ba      	ldrh	r2, [r7, #12]
 80008f0:	825a      	strh	r2, [r3, #18]
			break;
 80008f2:	e023      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	89ba      	ldrh	r2, [r7, #12]
 80008f8:	829a      	strh	r2, [r3, #20]
			break;
 80008fa:	e01f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	89ba      	ldrh	r2, [r7, #12]
 8000900:	82da      	strh	r2, [r3, #22]
			break;
 8000902:	e01b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	89ba      	ldrh	r2, [r7, #12]
 8000908:	815a      	strh	r2, [r3, #10]
			break;
 800090a:	e017      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	89ba      	ldrh	r2, [r7, #12]
 8000910:	809a      	strh	r2, [r3, #4]
			break;
 8000912:	e013      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	89ba      	ldrh	r2, [r7, #12]
 8000918:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 800091a:	e00f      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	89ba      	ldrh	r2, [r7, #12]
 8000920:	81da      	strh	r2, [r3, #14]
			break;
 8000922:	e00b      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	89ba      	ldrh	r2, [r7, #12]
 8000928:	80da      	strh	r2, [r3, #6]
			break;
 800092a:	e007      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	89ba      	ldrh	r2, [r7, #12]
 8000930:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8000932:	e003      	b.n	800093c <FT_CAN_ProcessData+0x440>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	89ba      	ldrh	r2, [r7, #12]
 8000938:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 800093a:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 800093c:	89ba      	ldrh	r2, [r7, #12]
 800093e:	89fb      	ldrh	r3, [r7, #14]
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f806 	bl	8000954 <FT_CAN_ProcessCustomData>
 8000948:	e000      	b.n	800094c <FT_CAN_ProcessData+0x450>
		return;
 800094a:	bf00      	nop
}
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop

08000954 <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	460a      	mov	r2, r1
 800095e:	80fb      	strh	r3, [r7, #6]
 8000960:	4613      	mov	r3, r2
 8000962:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <FT_CAN_ReceiveData>:

#endif

void FT_CAN_ReceiveData(uint32_t RxID, uint32_t RxLength, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	466b      	mov	r3, sp
 8000980:	461d      	mov	r5, r3
	uint32_t extid = (RxID & 0x1FF80000) >> 13;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	0b5a      	lsrs	r2, r3, #13
 8000986:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]

	if(		   (extid != FT_Gear_Controller)
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000994:	d02d      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Knock_Meter)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	f240 1241 	movw	r2, #321	; 0x141
 800099c:	4293      	cmp	r3, r2
 800099e:	d028      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Boost_Controller2)
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 80009a6:	d024      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Injector_Driver)
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 80009ae:	d020      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Nano)
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80009b6:	d01c      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Slim)
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	f240 2241 	movw	r2, #577	; 0x241
 80009be:	4293      	cmp	r3, r2
 80009c0:	d017      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Alcohol_O2)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	f240 2242 	movw	r2, #578	; 0x242
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d012      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FTSpark)
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	f240 2243 	movw	r2, #579	; 0x243
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d00d      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Switchpad)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 80009dc:	d009      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT500)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80009e4:	d005      	beq.n	80009f2 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT600))
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	f240 2281 	movw	r2, #641	; 0x281
 80009ec:	4293      	cmp	r3, r2
 80009ee:	f040 8386 	bne.w	80010fe <FT_CAN_ReceiveData+0x78e>
		return;

	uint8_t buffer[RxLength];
 80009f2:	68bc      	ldr	r4, [r7, #8]
 80009f4:	4623      	mov	r3, r4
 80009f6:	3b01      	subs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	4620      	mov	r0, r4
 80009fc:	f04f 0100 	mov.w	r1, #0
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	00cb      	lsls	r3, r1, #3
 8000a0a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a0e:	00c2      	lsls	r2, r0, #3
 8000a10:	4620      	mov	r0, r4
 8000a12:	f04f 0100 	mov.w	r1, #0
 8000a16:	f04f 0200 	mov.w	r2, #0
 8000a1a:	f04f 0300 	mov.w	r3, #0
 8000a1e:	00cb      	lsls	r3, r1, #3
 8000a20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a24:	00c2      	lsls	r2, r0, #3
 8000a26:	1de3      	adds	r3, r4, #7
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a30:	466b      	mov	r3, sp
 8000a32:	3300      	adds	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < RxLength; i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	77fb      	strb	r3, [r7, #31]
 8000a3a:	e009      	b.n	8000a50 <FT_CAN_ReceiveData+0xe0>
		buffer[i] = pData[i];
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	441a      	add	r2, r3
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	7811      	ldrb	r1, [r2, #0]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < RxLength; i++)
 8000a4a:	7ffb      	ldrb	r3, [r7, #31]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	77fb      	strb	r3, [r7, #31]
 8000a50:	7ffb      	ldrb	r3, [r7, #31]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8f1      	bhi.n	8000a3c <FT_CAN_ReceiveData+0xcc>

	if((((RxID / 0x800) & 0x7) == 0x00) || (((RxID / 0x800) & 0x7) == 0x01))
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	0adb      	lsrs	r3, r3, #11
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <FT_CAN_ReceiveData+0x102>
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	0adb      	lsrs	r3, r3, #11
 8000a68:	f003 0307 	and.w	r3, r3, #7
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	f040 813e 	bne.w	8000cee <FT_CAN_ReceiveData+0x37e>
	{
		if((RxID & 0xFFF) == 0x600)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000a7c:	d143      	bne.n	8000b06 <FT_CAN_ReceiveData+0x196>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->tps |= buffer[1];
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map  = buffer[2] << 8;
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	789b      	ldrb	r3, [r3, #2]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->map |= buffer[3];
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	78db      	ldrb	r3, [r3, #3]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->iat  = buffer[4] << 8;
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->iat |= buffer[5];
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	795b      	ldrb	r3, [r3, #5]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	799b      	ldrb	r3, [r3, #6]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->ect |= buffer[7];
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	79db      	ldrb	r3, [r3, #7]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	865a      	strh	r2, [r3, #50]	; 0x32

			return;
 8000b04:	e2fc      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		else if((RxID & 0xFFF) == 0x601)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b0c:	f240 6201 	movw	r2, #1537	; 0x601
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d143      	bne.n	8000b9c <FT_CAN_ReceiveData+0x22c>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	789b      	ldrb	r3, [r3, #2]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	78db      	ldrb	r3, [r3, #3]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4313      	orrs	r3, r2
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	791b      	ldrb	r3, [r3, #4]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->coolant_pressure |= buffer[5];
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	795b      	ldrb	r3, [r3, #5]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	799b      	ldrb	r3, [r3, #6]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->gear 			 |= buffer[7];
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	79db      	ldrb	r3, [r3, #7]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	875a      	strh	r2, [r3, #58]	; 0x3a

			return;
 8000b9a:	e2b1      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		else if((RxID & 0xFFF) == 0x602)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	f240 6202 	movw	r2, #1538	; 0x602
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d149      	bne.n	8000c3e <FT_CAN_ReceiveData+0x2ce>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->lambda 			|= buffer[1];
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	785b      	ldrb	r3, [r3, #1]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	789b      	ldrb	r3, [r3, #2]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm 			|= buffer[3];
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	78db      	ldrb	r3, [r3, #3]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	791b      	ldrb	r3, [r3, #4]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	795b      	ldrb	r3, [r3, #5]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	799b      	ldrb	r3, [r3, #6]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	79db      	ldrb	r3, [r3, #7]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 8000c3c:	e260      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}

#ifndef FT_CAN_SIMPLE
		else if((RxID & 0xFF) == 0xFF)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2bff      	cmp	r3, #255	; 0xff
 8000c44:	f040 8258 	bne.w	80010f8 <FT_CAN_ReceiveData+0x788>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[1];
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	789b      	ldrb	r3, [r3, #2]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[3];
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	78db      	ldrb	r3, [r3, #3]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000c94:	6838      	ldr	r0, [r7, #0]
 8000c96:	f7ff fc31 	bl	80004fc <FT_CAN_ProcessData>

			FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	791b      	ldrb	r3, [r3, #4]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[5];
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	795b      	ldrb	r3, [r3, #5]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[6] << 8;
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	799b      	ldrb	r3, [r3, #6]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[7];
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	79db      	ldrb	r3, [r3, #7]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000ce6:	6838      	ldr	r0, [r7, #0]
 8000ce8:	f7ff fc08 	bl	80004fc <FT_CAN_ProcessData>

			return;
 8000cec:	e208      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
	}

	else if(buffer[0] == 0xFF)
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2bff      	cmp	r3, #255	; 0xff
 8000cf4:	d129      	bne.n	8000d4a <FT_CAN_ReceiveData+0x3da>
	{
		FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	785b      	ldrb	r3, [r3, #1]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_id 	 |= buffer[2];
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_content  = buffer[3] << 8;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	78db      	ldrb	r3, [r3, #3]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		FT_Data_Struct->data_content |= buffer[4];
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	791b      	ldrb	r3, [r3, #4]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		FT_CAN_ProcessData(FT_Data_Struct);
 8000d42:	6838      	ldr	r0, [r7, #0]
 8000d44:	f7ff fbda 	bl	80004fc <FT_CAN_ProcessData>

		return;
 8000d48:	e1da      	b.n	8001100 <FT_CAN_ReceiveData+0x790>

	//Segmented Messages
	else
	{
		//First Message
		if(buffer[0] == 0)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14b      	bne.n	8000dea <FT_CAN_ReceiveData+0x47a>
		{
			FT_Data_Struct->data_length   = buffer[1] << 8;
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->data_length  |= buffer[2];
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	78db      	ldrb	r3, [r3, #3]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[4];
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	791b      	ldrb	r3, [r3, #4]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[5] << 8;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	795b      	ldrb	r3, [r3, #5]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[6];
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	799b      	ldrb	r3, [r3, #6]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000dc4:	6838      	ldr	r0, [r7, #0]
 8000dc6:	f7ff fb99 	bl	80004fc <FT_CAN_ProcessData>

			if(RxLength == 8)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d107      	bne.n	8000de0 <FT_CAN_ReceiveData+0x470>
				FT_Data_Struct->data_id   = buffer[7] << 8;
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	79db      	ldrb	r3, [r3, #7]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg = 0;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000de8:	e18a      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		//Messages 1, 5, etc
		else if((buffer[0]-1)%4 == 0)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d15c      	bne.n	8000eb2 <FT_CAN_ReceiveData+0x542>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000e04:	3301      	adds	r3, #1
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d120      	bne.n	8000e4c <FT_CAN_ReceiveData+0x4dc>
			{
				FT_Data_Struct->data_id 	 |= buffer[1];
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[2] << 8;
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	789b      	ldrb	r3, [r3, #2]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[3];
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	78db      	ldrb	r3, [r3, #3]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000e46:	6838      	ldr	r0, [r7, #0]
 8000e48:	f7ff fb58 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d128      	bne.n	8000ea4 <FT_CAN_ReceiveData+0x534>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	799b      	ldrb	r3, [r3, #6]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[7];
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	79db      	ldrb	r3, [r3, #7]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000e9e:	6838      	ldr	r0, [r7, #0]
 8000ea0:	f7ff fb2c 	bl	80004fc <FT_CAN_ProcessData>
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000eb0:	e126      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		//messages 2, 6, etc
		else if((buffer[0]-2)%4 == 0)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d150      	bne.n	8000f62 <FT_CAN_ReceiveData+0x5f2>
		{
			if(RxLength >= 5)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	d928      	bls.n	8000f18 <FT_CAN_ReceiveData+0x5a8>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	785b      	ldrb	r3, [r3, #1]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[2];
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	789b      	ldrb	r3, [r3, #2]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	78db      	ldrb	r3, [r3, #3]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[4];
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f12:	6838      	ldr	r0, [r7, #0]
 8000f14:	f7ff faf2 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d11a      	bne.n	8000f54 <FT_CAN_ReceiveData+0x5e4>
			{
				FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	795b      	ldrb	r3, [r3, #5]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	|= buffer[6];
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	799b      	ldrb	r3, [r3, #6]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content = buffer[7] << 8;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	79db      	ldrb	r3, [r3, #7]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			}

			FT_Data_Struct->data_last_seg 	 = buffer[0];
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000f60:	e0ce      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		//Messages 3, 7, etc
		else if((buffer[0]-3)%4 == 0)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	3b03      	subs	r3, #3
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d15f      	bne.n	8001030 <FT_CAN_ReceiveData+0x6c0>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <FT_CAN_ReceiveData+0x62e>
			{
				FT_Data_Struct->data_content |= buffer[1];
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	785b      	ldrb	r3, [r3, #1]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f98:	6838      	ldr	r0, [r7, #0]
 8000f9a:	f7ff faaf 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength >= 6)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d928      	bls.n	8000ff6 <FT_CAN_ReceiveData+0x686>
			{
				FT_Data_Struct->data_id  	  = buffer[2] << 8;
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	789b      	ldrb	r3, [r3, #2]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[3];
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	78db      	ldrb	r3, [r3, #3]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[4] << 8;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	791b      	ldrb	r3, [r3, #4]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[5];
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	795b      	ldrb	r3, [r3, #5]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000ff0:	6838      	ldr	r0, [r7, #0]
 8000ff2:	f7ff fa83 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d112      	bne.n	8001022 <FT_CAN_ReceiveData+0x6b2>
			{
				FT_Data_Struct->data_id 	  = buffer[6] << 8;
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	799b      	ldrb	r3, [r3, #6]
 8001000:	b29b      	uxth	r3, r3
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b29a      	uxth	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[7];
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	79db      	ldrb	r3, [r3, #7]
 8001016:	b29b      	uxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b29a      	uxth	r2, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b29a      	uxth	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 800102e:	e067      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		}
		//Messages 4, 8, etc
		else if(buffer[0]%4 == 0)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d15d      	bne.n	80010fa <FT_CAN_ReceiveData+0x78a>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800104a:	3301      	adds	r3, #1
 800104c:	429a      	cmp	r2, r3
 800104e:	d115      	bne.n	800107c <FT_CAN_ReceiveData+0x70c>
			{
				FT_Data_Struct->data_content  = buffer[1] << 8;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	b29b      	uxth	r3, r3
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b29a      	uxth	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[2];
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b29a      	uxth	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f7ff fa40 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength >= 7)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2b06      	cmp	r3, #6
 8001080:	d928      	bls.n	80010d4 <FT_CAN_ReceiveData+0x764>
			{
				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	78db      	ldrb	r3, [r3, #3]
 8001086:	b29b      	uxth	r3, r3
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b29a      	uxth	r2, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[4];
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	b29b      	uxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[5] << 8;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	795b      	ldrb	r3, [r3, #5]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[6];
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	799b      	ldrb	r3, [r3, #6]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80010ce:	6838      	ldr	r0, [r7, #0]
 80010d0:	f7ff fa14 	bl	80004fc <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d107      	bne.n	80010ea <FT_CAN_ReceiveData+0x77a>
			FT_Data_Struct->data_id 	  	  = buffer[7] << 8;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	79db      	ldrb	r3, [r3, #7]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 80010f6:	e003      	b.n	8001100 <FT_CAN_ReceiveData+0x790>
		if((RxID & 0xFFF) == 0x600)
 80010f8:	bf00      	nop
 80010fa:	46ad      	mov	sp, r5
 80010fc:	e001      	b.n	8001102 <FT_CAN_ReceiveData+0x792>
		return;
 80010fe:	bf00      	nop
 8001100:	46ad      	mov	sp, r5
		}
#endif
	}
}
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bdb0      	pop	{r4, r5, r7, pc}

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f001 fac6 	bl	800269c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f870 	bl	80011f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001114:	f000 f8e6 	bl	80012e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001118:	f000 fb6e 	bl	80017f8 <MX_GPIO_Init>
  MX_DMA_Init();
 800111c:	f000 fb34 	bl	8001788 <MX_DMA_Init>
  MX_IWDG_Init();
 8001120:	f000 fa9c 	bl	800165c <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 8001124:	f000 fada 	bl	80016dc <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001128:	f000 f904 	bl	8001334 <MX_ADC1_Init>
  MX_RTC_Init();
 800112c:	f000 fab0 	bl	8001690 <MX_RTC_Init>
  MX_TIM6_Init();
 8001130:	f000 faf4 	bl	800171c <MX_TIM6_Init>
  MX_FATFS_Init();
 8001134:	f009 fd7c 	bl	800ac30 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001138:	f00c ff88 	bl	800e04c <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800113c:	f000 f992 	bl	8001464 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001140:	f000 fa28 	bl	8001594 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001144:	f000 fa5c 	bl	8001600 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Acc_Msg[0] >= Per_Msg[0])
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <main+0xe0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <main+0xe4>)
 800114e:	8812      	ldrh	r2, [r2, #0]
 8001150:	4293      	cmp	r3, r2
 8001152:	d306      	bcc.n	8001162 <main+0x5a>
	  {
		  Acc_Msg[0] = 0;
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <main+0xe0>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
		  Principal_Transmit_Msg(&hcan1, 0);
 800115a:	2100      	movs	r1, #0
 800115c:	4824      	ldr	r0, [pc, #144]	; (80011f0 <main+0xe8>)
 800115e:	f000 fdad 	bl	8001cbc <Principal_Transmit_Msg>
	  }

	  if(Acc_Msg[1] >= Per_Msg[1])
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <main+0xe0>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a21      	ldr	r2, [pc, #132]	; (80011ec <main+0xe4>)
 8001168:	8852      	ldrh	r2, [r2, #2]
 800116a:	4293      	cmp	r3, r2
 800116c:	d306      	bcc.n	800117c <main+0x74>
	  {
		  Acc_Msg[1] = 0;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <main+0xe0>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
		  Principal_Transmit_Msg(&hcan1, 1);
 8001174:	2101      	movs	r1, #1
 8001176:	481e      	ldr	r0, [pc, #120]	; (80011f0 <main+0xe8>)
 8001178:	f000 fda0 	bl	8001cbc <Principal_Transmit_Msg>
	  }

	  if(Acc_Msg[2] >= Per_Msg[2])
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <main+0xe0>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <main+0xe4>)
 8001182:	8892      	ldrh	r2, [r2, #4]
 8001184:	4293      	cmp	r3, r2
 8001186:	d306      	bcc.n	8001196 <main+0x8e>
	  {
		  Acc_Msg[2] = 0;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <main+0xe0>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
		  Principal_Transmit_Msg(&hcan1, 2);
 800118e:	2102      	movs	r1, #2
 8001190:	4817      	ldr	r0, [pc, #92]	; (80011f0 <main+0xe8>)
 8001192:	f000 fd93 	bl	8001cbc <Principal_Transmit_Msg>
	  }

	  if(Acc_Msg[3] >= Per_Msg[3])
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <main+0xe0>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <main+0xe4>)
 800119c:	88d2      	ldrh	r2, [r2, #6]
 800119e:	4293      	cmp	r3, r2
 80011a0:	d306      	bcc.n	80011b0 <main+0xa8>
	  {
		  Acc_Msg[3] = 0;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <main+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
		  Principal_Transmit_Msg(&hcan1, 3);
 80011a8:	2103      	movs	r1, #3
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <main+0xe8>)
 80011ac:	f000 fd86 	bl	8001cbc <Principal_Transmit_Msg>
	  }

	  if(Acc_Msg[4] >= Per_Msg[4])
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <main+0xe0>)
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <main+0xe4>)
 80011b6:	8912      	ldrh	r2, [r2, #8]
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d306      	bcc.n	80011ca <main+0xc2>
	  {
		  Acc_Msg[4] = 0;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <main+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
		  Principal_Transmit_Msg(&hcan1, 4);
 80011c2:	2104      	movs	r1, #4
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <main+0xe8>)
 80011c6:	f000 fd79 	bl	8001cbc <Principal_Transmit_Msg>
	  }

	  if(Acc_Msg[5] >= Per_Msg[5])
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <main+0xe0>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <main+0xe4>)
 80011d0:	8952      	ldrh	r2, [r2, #10]
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d3b8      	bcc.n	8001148 <main+0x40>
	  {
		  Acc_Msg[5] = 0;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <main+0xe0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
		  Principal_Transmit_Msg(&hcan1, 5);
 80011dc:	2105      	movs	r1, #5
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <main+0xe8>)
 80011e0:	f000 fd6c 	bl	8001cbc <Principal_Transmit_Msg>
	  if(Acc_Msg[0] >= Per_Msg[0])
 80011e4:	e7b0      	b.n	8001148 <main+0x40>
 80011e6:	bf00      	nop
 80011e8:	20001788 	.word	0x20001788
 80011ec:	200018b4 	.word	0x200018b4
 80011f0:	20001814 	.word	0x20001814

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	2234      	movs	r2, #52	; 0x34
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00d fc8c 	bl	800eb20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <SystemClock_Config+0xe8>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <SystemClock_Config+0xe8>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <SystemClock_Config+0xe8>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <SystemClock_Config+0xec>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <SystemClock_Config+0xec>)
 800123e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <SystemClock_Config+0xec>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001250:	2309      	movs	r3, #9
 8001252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800125a:	2301      	movs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800125e:	2301      	movs	r3, #1
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001262:	2302      	movs	r3, #2
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800126c:	2308      	movs	r3, #8
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001270:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001276:	2302      	movs	r3, #2
 8001278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800127a:	2306      	movs	r3, #6
 800127c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800127e:	2302      	movs	r3, #2
 8001280:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4618      	mov	r0, r3
 8001288:	f005 fa9e 	bl	80067c8 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001292:	f000 fb57 	bl	8001944 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001296:	f004 fc65 	bl	8005b64 <HAL_PWREx_EnableOverDrive>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012a0:	f000 fb50 	bl	8001944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2105      	movs	r1, #5
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fc9e 	bl	8005c04 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80012ce:	f000 fb39 	bl	8001944 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3750      	adds	r7, #80	; 0x50
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b098      	sub	sp, #96	; 0x60
 80012e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	225c      	movs	r2, #92	; 0x5c
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00d fc15 	bl	800eb20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80012f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012fa:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 80012fc:	2308      	movs	r3, #8
 80012fe:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001300:	23c0      	movs	r3, #192	; 0xc0
 8001302:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001308:	2304      	movs	r3, #4
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8001310:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001314:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001316:	2300      	movs	r3, #0
 8001318:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fd77 	bl	8005e10 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8001328:	f000 fb0c 	bl	8001944 <Error_Handler>
  }
}
 800132c:	bf00      	nop
 800132e:	3760      	adds	r7, #96	; 0x60
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001346:	4b44      	ldr	r3, [pc, #272]	; (8001458 <MX_ADC1_Init+0x124>)
 8001348:	4a44      	ldr	r2, [pc, #272]	; (800145c <MX_ADC1_Init+0x128>)
 800134a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <MX_ADC1_Init+0x124>)
 800134e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001352:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001354:	4b40      	ldr	r3, [pc, #256]	; (8001458 <MX_ADC1_Init+0x124>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800135a:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <MX_ADC1_Init+0x124>)
 800135c:	2201      	movs	r2, #1
 800135e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001360:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <MX_ADC1_Init+0x124>)
 8001362:	2201      	movs	r2, #1
 8001364:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <MX_ADC1_Init+0x124>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <MX_ADC1_Init+0x124>)
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001374:	4b38      	ldr	r3, [pc, #224]	; (8001458 <MX_ADC1_Init+0x124>)
 8001376:	4a3a      	ldr	r2, [pc, #232]	; (8001460 <MX_ADC1_Init+0x12c>)
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <MX_ADC1_Init+0x124>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <MX_ADC1_Init+0x124>)
 8001382:	2206      	movs	r2, #6
 8001384:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <MX_ADC1_Init+0x124>)
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <MX_ADC1_Init+0x124>)
 8001390:	2201      	movs	r2, #1
 8001392:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001394:	4830      	ldr	r0, [pc, #192]	; (8001458 <MX_ADC1_Init+0x124>)
 8001396:	f001 fa17 	bl	80027c8 <HAL_ADC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013a0:	f000 fad0 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80013ac:	2307      	movs	r3, #7
 80013ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4828      	ldr	r0, [pc, #160]	; (8001458 <MX_ADC1_Init+0x124>)
 80013b6:	f001 fa4b 	bl	8002850 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 fac0 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4821      	ldr	r0, [pc, #132]	; (8001458 <MX_ADC1_Init+0x124>)
 80013d2:	f001 fa3d 	bl	8002850 <HAL_ADC_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013dc:	f000 fab2 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013e4:	2303      	movs	r3, #3
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <MX_ADC1_Init+0x124>)
 80013ee:	f001 fa2f 	bl	8002850 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013f8:	f000 faa4 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013fc:	2303      	movs	r3, #3
 80013fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001400:	2304      	movs	r3, #4
 8001402:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <MX_ADC1_Init+0x124>)
 800140a:	f001 fa21 	bl	8002850 <HAL_ADC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001414:	f000 fa96 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001418:	2304      	movs	r3, #4
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800141c:	2305      	movs	r3, #5
 800141e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_ADC1_Init+0x124>)
 8001426:	f001 fa13 	bl	8002850 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001430:	f000 fa88 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001434:	2305      	movs	r3, #5
 8001436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001438:	2306      	movs	r3, #6
 800143a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_ADC1_Init+0x124>)
 8001442:	f001 fa05 	bl	8002850 <HAL_ADC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800144c:	f000 fa7a 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20001570 	.word	0x20001570
 800145c:	40012000 	.word	0x40012000
 8001460:	0f000001 	.word	0x0f000001

08001464 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <MX_ADC2_Init+0x124>)
 8001478:	4a44      	ldr	r2, [pc, #272]	; (800158c <MX_ADC2_Init+0x128>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800147c:	4b42      	ldr	r3, [pc, #264]	; (8001588 <MX_ADC2_Init+0x124>)
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b40      	ldr	r3, [pc, #256]	; (8001588 <MX_ADC2_Init+0x124>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <MX_ADC2_Init+0x124>)
 800148c:	2201      	movs	r2, #1
 800148e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <MX_ADC2_Init+0x124>)
 8001492:	2201      	movs	r2, #1
 8001494:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <MX_ADC2_Init+0x124>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <MX_ADC2_Init+0x124>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b38      	ldr	r3, [pc, #224]	; (8001588 <MX_ADC2_Init+0x124>)
 80014a6:	4a3a      	ldr	r2, [pc, #232]	; (8001590 <MX_ADC2_Init+0x12c>)
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <MX_ADC2_Init+0x124>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <MX_ADC2_Init+0x124>)
 80014b2:	2206      	movs	r2, #6
 80014b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <MX_ADC2_Init+0x124>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_ADC2_Init+0x124>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014c4:	4830      	ldr	r0, [pc, #192]	; (8001588 <MX_ADC2_Init+0x124>)
 80014c6:	f001 f97f 	bl	80027c8 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 fa38 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014d4:	2306      	movs	r3, #6
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014dc:	2307      	movs	r3, #7
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	4828      	ldr	r0, [pc, #160]	; (8001588 <MX_ADC2_Init+0x124>)
 80014e6:	f001 f9b3 	bl	8002850 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80014f0:	f000 fa28 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014f4:	2307      	movs	r3, #7
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4821      	ldr	r0, [pc, #132]	; (8001588 <MX_ADC2_Init+0x124>)
 8001502:	f001 f9a5 	bl	8002850 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800150c:	f000 fa1a 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001510:	230e      	movs	r3, #14
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	481a      	ldr	r0, [pc, #104]	; (8001588 <MX_ADC2_Init+0x124>)
 800151e:	f001 f997 	bl	8002850 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001528:	f000 fa0c 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800152c:	230f      	movs	r3, #15
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <MX_ADC2_Init+0x124>)
 800153a:	f001 f989 	bl	8002850 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001544:	f000 f9fe 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001548:	2308      	movs	r3, #8
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800154c:	2305      	movs	r3, #5
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_ADC2_Init+0x124>)
 8001556:	f001 f97b 	bl	8002850 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001560:	f000 f9f0 	bl	8001944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001564:	2309      	movs	r3, #9
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001568:	2306      	movs	r3, #6
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_ADC2_Init+0x124>)
 8001572:	f001 f96d 	bl	8002850 <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800157c:	f000 f9e2 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200004c0 	.word	0x200004c0
 800158c:	40012100 	.word	0x40012100
 8001590:	0f000001 	.word	0x0f000001

08001594 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_CAN1_Init+0x64>)
 800159a:	4a18      	ldr	r2, [pc, #96]	; (80015fc <MX_CAN1_Init+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015a0:	2205      	movs	r2, #5
 80015a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015b2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80015b6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_CAN1_Init+0x64>)
 80015e4:	f001 fb62 	bl	8002cac <HAL_CAN_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80015ee:	f000 f9a9 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20001814 	.word	0x20001814
 80015fc:	40006400 	.word	0x40006400

08001600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x50>)
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <MX_I2C1_Init+0x54>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_I2C1_Init+0x50>)
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_I2C1_Init+0x58>)
 800160e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_I2C1_Init+0x50>)
 800161e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_I2C1_Init+0x50>)
 800163e:	f002 ff0f 	bl	8004460 <HAL_I2C_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001648:	f000 f97c 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000508 	.word	0x20000508
 8001654:	40005400 	.word	0x40005400
 8001658:	00061a80 	.word	0x00061a80

0800165c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_IWDG_Init+0x2c>)
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <MX_IWDG_Init+0x30>)
 8001664:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_IWDG_Init+0x2c>)
 8001668:	2204      	movs	r2, #4
 800166a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 249;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_IWDG_Init+0x2c>)
 800166e:	22f9      	movs	r2, #249	; 0xf9
 8001670:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_IWDG_Init+0x2c>)
 8001674:	f003 f838 	bl	80046e8 <HAL_IWDG_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 800167e:	f000 f961 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000055c 	.word	0x2000055c
 800168c:	40003000 	.word	0x40003000

08001690 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_RTC_Init+0x44>)
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <MX_RTC_Init+0x48>)
 8001698:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_RTC_Init+0x44>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_RTC_Init+0x44>)
 80016a2:	227f      	movs	r2, #127	; 0x7f
 80016a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <MX_RTC_Init+0x44>)
 80016a8:	22ff      	movs	r2, #255	; 0xff
 80016aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_RTC_Init+0x44>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <MX_RTC_Init+0x44>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_RTC_Init+0x44>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_RTC_Init+0x44>)
 80016c0:	f005 fb20 	bl	8006d04 <HAL_RTC_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80016ca:	f000 f93b 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20001638 	.word	0x20001638
 80016d8:	40002800 	.word	0x40002800

080016dc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_SDIO_SD_Init+0x38>)
 80016e2:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <MX_SDIO_SD_Init+0x3c>)
 80016e4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_SDIO_SD_Init+0x38>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_SDIO_SD_Init+0x38>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_SDIO_SD_Init+0x38>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_SDIO_SD_Init+0x38>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <MX_SDIO_SD_Init+0x38>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <MX_SDIO_SD_Init+0x38>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	20001704 	.word	0x20001704
 8001718:	40012c00 	.word	0x40012c00

0800171c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_TIM6_Init+0x64>)
 800172c:	4a15      	ldr	r2, [pc, #84]	; (8001784 <MX_TIM6_Init+0x68>)
 800172e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_TIM6_Init+0x64>)
 8001732:	2259      	movs	r2, #89	; 0x59
 8001734:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_TIM6_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_TIM6_Init+0x64>)
 800173e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001742:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_TIM6_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM6_Init+0x64>)
 800174c:	f006 fed9 	bl	8008502 <HAL_TIM_Base_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001756:	f000 f8f5 	bl	8001944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001762:	463b      	mov	r3, r7
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_TIM6_Init+0x64>)
 8001768:	f007 f8ea 	bl	8008940 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001772:	f000 f8e7 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200016b8 	.word	0x200016b8
 8001784:	40001000 	.word	0x40001000

08001788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_DMA_Init+0x6c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <MX_DMA_Init+0x6c>)
 8001798:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_DMA_Init+0x6c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2102      	movs	r1, #2
 80017ae:	2038      	movs	r0, #56	; 0x38
 80017b0:	f002 f8a3 	bl	80038fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017b4:	2038      	movs	r0, #56	; 0x38
 80017b6:	f002 f8bc 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2102      	movs	r1, #2
 80017be:	203a      	movs	r0, #58	; 0x3a
 80017c0:	f002 f89b 	bl	80038fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017c4:	203a      	movs	r0, #58	; 0x3a
 80017c6:	f002 f8b4 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	203b      	movs	r0, #59	; 0x3b
 80017d0:	f002 f893 	bl	80038fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80017d4:	203b      	movs	r0, #59	; 0x3b
 80017d6:	f002 f8ac 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2045      	movs	r0, #69	; 0x45
 80017e0:	f002 f88b 	bl	80038fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80017e4:	2045      	movs	r0, #69	; 0x45
 80017e6:	f002 f8a4 	bl	8003932 <HAL_NVIC_EnableIRQ>

}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <MX_GPIO_Init+0x140>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a48      	ldr	r2, [pc, #288]	; (8001938 <MX_GPIO_Init+0x140>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b46      	ldr	r3, [pc, #280]	; (8001938 <MX_GPIO_Init+0x140>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b42      	ldr	r3, [pc, #264]	; (8001938 <MX_GPIO_Init+0x140>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a41      	ldr	r2, [pc, #260]	; (8001938 <MX_GPIO_Init+0x140>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <MX_GPIO_Init+0x140>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <MX_GPIO_Init+0x140>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a3a      	ldr	r2, [pc, #232]	; (8001938 <MX_GPIO_Init+0x140>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <MX_GPIO_Init+0x140>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <MX_GPIO_Init+0x140>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a33      	ldr	r2, [pc, #204]	; (8001938 <MX_GPIO_Init+0x140>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <MX_GPIO_Init+0x140>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <MX_GPIO_Init+0x140>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <MX_GPIO_Init+0x140>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <MX_GPIO_Init+0x140>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	210f      	movs	r1, #15
 800189e:	4827      	ldr	r0, [pc, #156]	; (800193c <MX_GPIO_Init+0x144>)
 80018a0:	f002 fdac 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80018aa:	4825      	ldr	r0, [pc, #148]	; (8001940 <MX_GPIO_Init+0x148>)
 80018ac:	f002 fda6 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80018b0:	230f      	movs	r3, #15
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	481d      	ldr	r0, [pc, #116]	; (800193c <MX_GPIO_Init+0x144>)
 80018c8:	f002 fbec 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 80018cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4816      	ldr	r0, [pc, #88]	; (8001940 <MX_GPIO_Init+0x148>)
 80018e6:	f002 fbdd 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 80018ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	480f      	ldr	r0, [pc, #60]	; (8001940 <MX_GPIO_Init+0x148>)
 8001902:	f002 fbcf 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4808      	ldr	r0, [pc, #32]	; (800193c <MX_GPIO_Init+0x144>)
 800191a:	f002 fbc3 	bl	80040a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2102      	movs	r1, #2
 8001922:	2028      	movs	r0, #40	; 0x28
 8001924:	f001 ffe9 	bl	80038fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001928:	2028      	movs	r0, #40	; 0x28
 800192a:	f002 f802 	bl	8003932 <HAL_NVIC_EnableIRQ>

}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40020800 	.word	0x40020800
 8001940:	40020400 	.word	0x40020400

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194c:	e7fe      	b.n	800194c <Error_Handler+0x8>
	...

08001950 <Msg_0>:
 */

#include "principal.h"

static void Msg_0(CAN_HandleTypeDef* hcan)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	CAN_Tx_Header.StdId = FIRST_ID;
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <Msg_0+0xd8>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
	CAN_Tx_Header.DLC = 8;
 800195e:	4b32      	ldr	r3, [pc, #200]	; (8001a28 <Msg_0+0xd8>)
 8001960:	2208      	movs	r2, #8
 8001962:	611a      	str	r2, [r3, #16]
	CAN_Tx_Header.IDE = CAN_ID_STD;
 8001964:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <Msg_0+0xd8>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
	CAN_Tx_Header.RTR = CAN_RTR_DATA;
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <Msg_0+0xd8>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
	CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <Msg_0+0xd8>)
 8001972:	2200      	movs	r2, #0
 8001974:	751a      	strb	r2, [r3, #20]

	CAN_Tx_Data[0] = ADC_Buffer[0] >> 8;
 8001976:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <Msg_0+0xdc>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29b      	uxth	r3, r3
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <Msg_0+0xe0>)
 8001982:	701a      	strb	r2, [r3, #0]
	CAN_Tx_Data[1] = ADC_Buffer[0] & 0xff;
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <Msg_0+0xdc>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <Msg_0+0xe0>)
 800198c:	705a      	strb	r2, [r3, #1]
	CAN_Tx_Data[2] = ADC_Buffer[1] >> 8;
 800198e:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <Msg_0+0xdc>)
 8001990:	885b      	ldrh	r3, [r3, #2]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29b      	uxth	r3, r3
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <Msg_0+0xe0>)
 800199a:	709a      	strb	r2, [r3, #2]
	CAN_Tx_Data[3] = ADC_Buffer[1] & 0xff;
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <Msg_0+0xdc>)
 800199e:	885b      	ldrh	r3, [r3, #2]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <Msg_0+0xe0>)
 80019a4:	70da      	strb	r2, [r3, #3]
	CAN_Tx_Data[4] = ADC_Buffer[2] >> 8;
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <Msg_0+0xdc>)
 80019a8:	889b      	ldrh	r3, [r3, #4]
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <Msg_0+0xe0>)
 80019b2:	711a      	strb	r2, [r3, #4]
	CAN_Tx_Data[5] = ADC_Buffer[2] & 0xff;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <Msg_0+0xdc>)
 80019b6:	889b      	ldrh	r3, [r3, #4]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <Msg_0+0xe0>)
 80019bc:	715a      	strb	r2, [r3, #5]
	CAN_Tx_Data[6] = ADC_Buffer[3] >> 8;
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <Msg_0+0xdc>)
 80019c0:	88db      	ldrh	r3, [r3, #6]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <Msg_0+0xe0>)
 80019ca:	719a      	strb	r2, [r3, #6]
	CAN_Tx_Data[7] = ADC_Buffer[3] & 0xff;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <Msg_0+0xdc>)
 80019ce:	88db      	ldrh	r3, [r3, #6]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <Msg_0+0xe0>)
 80019d4:	71da      	strb	r2, [r3, #7]

	if(Acc_CAN[0] >= Per_CAN[0])
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <Msg_0+0xe4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <Msg_0+0xe8>)
 80019dc:	8812      	ldrh	r2, [r2, #0]
 80019de:	4293      	cmp	r3, r2
 80019e0:	d31d      	bcc.n	8001a1e <Msg_0+0xce>
	{
		Acc_CAN[0] = 0;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <Msg_0+0xe4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
		if(HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Header, CAN_Tx_Data, &pTxMailbox) == HAL_OK)
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <Msg_0+0xec>)
 80019ea:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <Msg_0+0xe0>)
 80019ec:	490e      	ldr	r1, [pc, #56]	; (8001a28 <Msg_0+0xd8>)
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f001 fa57 	bl	8002ea2 <HAL_CAN_AddTxMessage>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <Msg_0+0xb0>
			Verify_CAN[0] = 1;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <Msg_0+0xf0>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e002      	b.n	8001a0c <Msg_0+0xbc>
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f001 fb23 	bl	8003058 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d002      	beq.n	8001a1e <Msg_0+0xce>
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d9f3      	bls.n	8001a06 <Msg_0+0xb6>
	}
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200015bc 	.word	0x200015bc
 8001a2c:	200004a8 	.word	0x200004a8
 8001a30:	20001858 	.word	0x20001858
 8001a34:	2000183c 	.word	0x2000183c
 8001a38:	20000480 	.word	0x20000480
 8001a3c:	20000488 	.word	0x20000488
 8001a40:	2000156c 	.word	0x2000156c

08001a44 <Msg_1>:

static void Msg_1(CAN_HandleTypeDef* hcan)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	CAN_Tx_Header.StdId = FIRST_ID + 1;
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <Msg_1+0xd8>)
 8001a4e:	2202      	movs	r2, #2
 8001a50:	601a      	str	r2, [r3, #0]
	CAN_Tx_Header.DLC = 8;
 8001a52:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <Msg_1+0xd8>)
 8001a54:	2208      	movs	r2, #8
 8001a56:	611a      	str	r2, [r3, #16]
	CAN_Tx_Header.IDE = CAN_ID_STD;
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <Msg_1+0xd8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
	CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <Msg_1+0xd8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
	CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <Msg_1+0xd8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	751a      	strb	r2, [r3, #20]

	CAN_Tx_Data[0] = ADC_Buffer[4] >> 8;
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <Msg_1+0xdc>)
 8001a6c:	891b      	ldrh	r3, [r3, #8]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <Msg_1+0xe0>)
 8001a76:	701a      	strb	r2, [r3, #0]
	CAN_Tx_Data[1] = ADC_Buffer[4] & 0xff;
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <Msg_1+0xdc>)
 8001a7a:	891b      	ldrh	r3, [r3, #8]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <Msg_1+0xe0>)
 8001a80:	705a      	strb	r2, [r3, #1]
	CAN_Tx_Data[2] = ADC_Buffer[5] >> 8;
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <Msg_1+0xdc>)
 8001a84:	895b      	ldrh	r3, [r3, #10]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <Msg_1+0xe0>)
 8001a8e:	709a      	strb	r2, [r3, #2]
	CAN_Tx_Data[3] = ADC_Buffer[5] & 0xff;
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <Msg_1+0xdc>)
 8001a92:	895b      	ldrh	r3, [r3, #10]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <Msg_1+0xe0>)
 8001a98:	70da      	strb	r2, [r3, #3]
	CAN_Tx_Data[4] = ADC_Buffer[6] >> 8;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <Msg_1+0xdc>)
 8001a9c:	899b      	ldrh	r3, [r3, #12]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <Msg_1+0xe0>)
 8001aa6:	711a      	strb	r2, [r3, #4]
	CAN_Tx_Data[5] = ADC_Buffer[6] & 0xff;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <Msg_1+0xdc>)
 8001aaa:	899b      	ldrh	r3, [r3, #12]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <Msg_1+0xe0>)
 8001ab0:	715a      	strb	r2, [r3, #5]
	CAN_Tx_Data[6] = ADC_Buffer[7] >> 8;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <Msg_1+0xdc>)
 8001ab4:	89db      	ldrh	r3, [r3, #14]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <Msg_1+0xe0>)
 8001abe:	719a      	strb	r2, [r3, #6]
	CAN_Tx_Data[7] = ADC_Buffer[7] & 0xff;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <Msg_1+0xdc>)
 8001ac2:	89db      	ldrh	r3, [r3, #14]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <Msg_1+0xe0>)
 8001ac8:	71da      	strb	r2, [r3, #7]

	if(Acc_CAN[1] >= Per_CAN[1])
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <Msg_1+0xe4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <Msg_1+0xe8>)
 8001ad0:	8852      	ldrh	r2, [r2, #2]
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d31d      	bcc.n	8001b12 <Msg_1+0xce>
	{
		Acc_CAN[1] = 0;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <Msg_1+0xe4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
		if(HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Header, CAN_Tx_Data, &pTxMailbox) == HAL_OK)
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <Msg_1+0xec>)
 8001ade:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <Msg_1+0xe0>)
 8001ae0:	490e      	ldr	r1, [pc, #56]	; (8001b1c <Msg_1+0xd8>)
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f001 f9dd 	bl	8002ea2 <HAL_CAN_AddTxMessage>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <Msg_1+0xb0>
			Verify_CAN[0] = 1;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <Msg_1+0xf0>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e002      	b.n	8001b00 <Msg_1+0xbc>
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	3301      	adds	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f001 faa9 	bl	8003058 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d002      	beq.n	8001b12 <Msg_1+0xce>
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d9f3      	bls.n	8001afa <Msg_1+0xb6>
	}
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200015bc 	.word	0x200015bc
 8001b20:	200004a8 	.word	0x200004a8
 8001b24:	20001858 	.word	0x20001858
 8001b28:	2000183c 	.word	0x2000183c
 8001b2c:	20000480 	.word	0x20000480
 8001b30:	20000488 	.word	0x20000488
 8001b34:	2000156c 	.word	0x2000156c

08001b38 <Msg_2>:

static void Msg_2(CAN_HandleTypeDef* hcan)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	CAN_Tx_Header.StdId = FIRST_ID + 2;
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <Msg_2+0xd8>)
 8001b42:	2203      	movs	r2, #3
 8001b44:	601a      	str	r2, [r3, #0]
	CAN_Tx_Header.DLC = 8;
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <Msg_2+0xd8>)
 8001b48:	2208      	movs	r2, #8
 8001b4a:	611a      	str	r2, [r3, #16]
	CAN_Tx_Header.IDE = CAN_ID_STD;
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <Msg_2+0xd8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
	CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <Msg_2+0xd8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
	CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <Msg_2+0xd8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	751a      	strb	r2, [r3, #20]

	CAN_Tx_Data[0] = ADC_Buffer[8] >> 8;
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <Msg_2+0xdc>)
 8001b60:	8a1b      	ldrh	r3, [r3, #16]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <Msg_2+0xe0>)
 8001b6a:	701a      	strb	r2, [r3, #0]
	CAN_Tx_Data[1] = ADC_Buffer[8] & 0xff;
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <Msg_2+0xdc>)
 8001b6e:	8a1b      	ldrh	r3, [r3, #16]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <Msg_2+0xe0>)
 8001b74:	705a      	strb	r2, [r3, #1]
	CAN_Tx_Data[2] = ADC_Buffer[9] >> 8;
 8001b76:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <Msg_2+0xdc>)
 8001b78:	8a5b      	ldrh	r3, [r3, #18]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <Msg_2+0xe0>)
 8001b82:	709a      	strb	r2, [r3, #2]
	CAN_Tx_Data[3] = ADC_Buffer[9] & 0xff;
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <Msg_2+0xdc>)
 8001b86:	8a5b      	ldrh	r3, [r3, #18]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <Msg_2+0xe0>)
 8001b8c:	70da      	strb	r2, [r3, #3]
	CAN_Tx_Data[4] = ADC_Buffer[10] >> 8;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <Msg_2+0xdc>)
 8001b90:	8a9b      	ldrh	r3, [r3, #20]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <Msg_2+0xe0>)
 8001b9a:	711a      	strb	r2, [r3, #4]
	CAN_Tx_Data[5] = ADC_Buffer[10] & 0xff;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <Msg_2+0xdc>)
 8001b9e:	8a9b      	ldrh	r3, [r3, #20]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <Msg_2+0xe0>)
 8001ba4:	715a      	strb	r2, [r3, #5]
	CAN_Tx_Data[6] = ADC_Buffer[11] >> 8;
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <Msg_2+0xdc>)
 8001ba8:	8adb      	ldrh	r3, [r3, #22]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <Msg_2+0xe0>)
 8001bb2:	719a      	strb	r2, [r3, #6]
	CAN_Tx_Data[7] = ADC_Buffer[11] & 0xff;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <Msg_2+0xdc>)
 8001bb6:	8adb      	ldrh	r3, [r3, #22]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <Msg_2+0xe0>)
 8001bbc:	71da      	strb	r2, [r3, #7]

	if(Acc_CAN[2] >= Per_CAN[2])
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <Msg_2+0xe4>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <Msg_2+0xe8>)
 8001bc4:	8892      	ldrh	r2, [r2, #4]
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d31d      	bcc.n	8001c06 <Msg_2+0xce>
	{
		Acc_CAN[2] = 0;
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <Msg_2+0xe4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
		if(HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Header, CAN_Tx_Data, &pTxMailbox) == HAL_OK)
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <Msg_2+0xec>)
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <Msg_2+0xe0>)
 8001bd4:	490e      	ldr	r1, [pc, #56]	; (8001c10 <Msg_2+0xd8>)
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f001 f963 	bl	8002ea2 <HAL_CAN_AddTxMessage>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d102      	bne.n	8001be8 <Msg_2+0xb0>
			Verify_CAN[0] = 1;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <Msg_2+0xf0>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e002      	b.n	8001bf4 <Msg_2+0xbc>
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f001 fa2f 	bl	8003058 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d002      	beq.n	8001c06 <Msg_2+0xce>
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d9f3      	bls.n	8001bee <Msg_2+0xb6>
	}
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200015bc 	.word	0x200015bc
 8001c14:	200004a8 	.word	0x200004a8
 8001c18:	20001858 	.word	0x20001858
 8001c1c:	2000183c 	.word	0x2000183c
 8001c20:	20000480 	.word	0x20000480
 8001c24:	20000488 	.word	0x20000488
 8001c28:	2000156c 	.word	0x2000156c

08001c2c <Msg_Verify>:

static void Msg_Verify(CAN_HandleTypeDef* hcan)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	CAN_Tx_Header.StdId = FIRST_ID + 4;
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <Msg_Verify+0x64>)
 8001c36:	2205      	movs	r2, #5
 8001c38:	601a      	str	r2, [r3, #0]
	CAN_Tx_Header.DLC = 8;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <Msg_Verify+0x64>)
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	611a      	str	r2, [r3, #16]
	CAN_Tx_Header.IDE = CAN_ID_STD;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <Msg_Verify+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
	CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <Msg_Verify+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
	CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <Msg_Verify+0x64>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	751a      	strb	r2, [r3, #20]


	if(HAL_CAN_AddTxMessage(hcan, &CAN_Tx_Header, CAN_Tx_Data, &pTxMailbox) == HAL_OK)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <Msg_Verify+0x68>)
 8001c54:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <Msg_Verify+0x6c>)
 8001c56:	490e      	ldr	r1, [pc, #56]	; (8001c90 <Msg_Verify+0x64>)
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f001 f922 	bl	8002ea2 <HAL_CAN_AddTxMessage>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <Msg_Verify+0x3e>
		Verify_CAN[0] = 1;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <Msg_Verify+0x70>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e002      	b.n	8001c76 <Msg_Verify+0x4a>
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	3301      	adds	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f001 f9ee 	bl	8003058 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d002      	beq.n	8001c88 <Msg_Verify+0x5c>
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d9f3      	bls.n	8001c70 <Msg_Verify+0x44>
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200015bc 	.word	0x200015bc
 8001c94:	20000488 	.word	0x20000488
 8001c98:	20001858 	.word	0x20001858
 8001c9c:	2000156c 	.word	0x2000156c

08001ca0 <Msg_PDM>:

static void Msg_PDM()
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <Msg_ECU>:

static void Msg_ECU()
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d824      	bhi.n	8001d18 <Principal_Transmit_Msg+0x5c>
 8001cce:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <Principal_Transmit_Msg+0x18>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001ced 	.word	0x08001ced
 8001cd8:	08001cf5 	.word	0x08001cf5
 8001cdc:	08001cfd 	.word	0x08001cfd
 8001ce0:	08001d05 	.word	0x08001d05
 8001ce4:	08001d0d 	.word	0x08001d0d
 8001ce8:	08001d13 	.word	0x08001d13
	{
		case 0:
			Msg_0(hcan);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fe2f 	bl	8001950 <Msg_0>
			break;
 8001cf2:	e012      	b.n	8001d1a <Principal_Transmit_Msg+0x5e>

		case 1:
			Msg_1(hcan);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fea5 	bl	8001a44 <Msg_1>
			break;
 8001cfa:	e00e      	b.n	8001d1a <Principal_Transmit_Msg+0x5e>

		case 2:
			Msg_2(hcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff1b 	bl	8001b38 <Msg_2>
			break;
 8001d02:	e00a      	b.n	8001d1a <Principal_Transmit_Msg+0x5e>

		case 3:
			Msg_Verify(hcan);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff91 	bl	8001c2c <Msg_Verify>
			break;
 8001d0a:	e006      	b.n	8001d1a <Principal_Transmit_Msg+0x5e>

		case 4:
			Msg_PDM();
 8001d0c:	f7ff ffc8 	bl	8001ca0 <Msg_PDM>
			break;
 8001d10:	e003      	b.n	8001d1a <Principal_Transmit_Msg+0x5e>

		case 5:
			Msg_ECU();
 8001d12:	f7ff ffcc 	bl	8001cae <Msg_ECU>
			break;
 8001d16:	e000      	b.n	8001d1a <Principal_Transmit_Msg+0x5e>

		default:
			return;
 8001d18:	bf00      	nop
	}
}
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <Datalogger_Save_Buffer>:
{

}

void Datalogger_Save_Buffer(uint32_t Data_ID, uint8_t Data_Length, uint8_t* Data_Buffer)
{
 8001d20:	b4b0      	push	{r4, r5, r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	72fb      	strb	r3, [r7, #11]
 8001d2e:	466b      	mov	r3, sp
 8001d30:	461d      	mov	r5, r3
	uint8_t buffer[5 + Data_Length];
 8001d32:	7afb      	ldrb	r3, [r7, #11]
 8001d34:	1d5c      	adds	r4, r3, #5
 8001d36:	1e63      	subs	r3, r4, #1
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f04f 0100 	mov.w	r1, #0
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	00cb      	lsls	r3, r1, #3
 8001d4c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d50:	00c2      	lsls	r2, r0, #3
 8001d52:	4623      	mov	r3, r4
 8001d54:	4618      	mov	r0, r3
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	00cb      	lsls	r3, r1, #3
 8001d64:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d68:	00c2      	lsls	r2, r0, #3
 8001d6a:	4623      	mov	r3, r4
 8001d6c:	3307      	adds	r3, #7
 8001d6e:	08db      	lsrs	r3, r3, #3
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	ebad 0d03 	sub.w	sp, sp, r3
 8001d76:	466b      	mov	r3, sp
 8001d78:	3300      	adds	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

	buffer[0] = 'D';
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2244      	movs	r2, #68	; 0x44
 8001d80:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'L';
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	224c      	movs	r2, #76	; 0x4c
 8001d86:	705a      	strb	r2, [r3, #1]
	buffer[2] = Data_ID & 0xff;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	709a      	strb	r2, [r3, #2]
	buffer[3] = Data_Length;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	7afa      	ldrb	r2, [r7, #11]
 8001d94:	70da      	strb	r2, [r3, #3]
	buffer[4] = Acc_Datalogger;
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <Datalogger_Save_Buffer+0xb8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	711a      	strb	r2, [r3, #4]

	Acc_Datalogger = 0;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <Datalogger_Save_Buffer+0xb8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

	for(uint8_t i = 0; i < Data_Length; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	77fb      	strb	r3, [r7, #31]
 8001daa:	e00a      	b.n	8001dc2 <Datalogger_Save_Buffer+0xa2>
		buffer[5 + i] = Data_Buffer[i];
 8001dac:	7ffb      	ldrb	r3, [r7, #31]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	441a      	add	r2, r3
 8001db2:	7ffb      	ldrb	r3, [r7, #31]
 8001db4:	3305      	adds	r3, #5
 8001db6:	7811      	ldrb	r1, [r2, #0]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Data_Length; i++)
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	77fb      	strb	r3, [r7, #31]
 8001dc2:	7ffa      	ldrb	r2, [r7, #31]
 8001dc4:	7afb      	ldrb	r3, [r7, #11]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3f0      	bcc.n	8001dac <Datalogger_Save_Buffer+0x8c>
 8001dca:	46ad      	mov	sp, r5

//	if()
}
 8001dcc:	bf00      	nop
 8001dce:	3724      	adds	r7, #36	; 0x24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bcb0      	pop	{r4, r5, r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20001854 	.word	0x20001854

08001ddc <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_Rx_Header, CAN_Rx_Data) == HAL_OK)
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001de6:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001de8:	2100      	movs	r1, #0
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f001 f969 	bl	80030c2 <HAL_CAN_GetRxMessage>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d121      	bne.n	8001e3a <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
	{
		Verify_CAN[1] = 1;
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	705a      	strb	r2, [r3, #1]

		if(CAN_Rx_Header.IDE == CAN_ID_STD)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10a      	bne.n	8001e1a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
		{
			Datalogger_Save_Buffer((CAN_Rx_Header.StdId & 0xff), CAN_Rx_Header.DLC, CAN_Rx_Data);
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001e0c:	6912      	ldr	r2, [r2, #16]
 8001e0e:	b2d1      	uxtb	r1, r2
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff84 	bl	8001d20 <Datalogger_Save_Buffer>
		}
	}

	else
		Verify_CAN[1] = 0;
}
 8001e18:	e012      	b.n	8001e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
		else if((CAN_Rx_Header.ExtId & 0x1FFFF000) == 0x1E35C000)
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00b      	beq.n	8001e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
			FT_CAN_ReceiveData(CAN_Rx_Header.ExtId, CAN_Rx_Header.DLC, CAN_Rx_Data, &ECU_Data);
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001e2a:	6858      	ldr	r0, [r3, #4]
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001e2e:	6919      	ldr	r1, [r3, #16]
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001e34:	f7fe fd9c 	bl	8000970 <FT_CAN_ReceiveData>
}
 8001e38:	e002      	b.n	8001e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
		Verify_CAN[1] = 0;
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	705a      	strb	r2, [r3, #1]
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200017a0 	.word	0x200017a0
 8001e4c:	2000048c 	.word	0x2000048c
 8001e50:	2000156c 	.word	0x2000156c
 8001e54:	1ffff000 	.word	0x1ffff000
 8001e58:	1e35c000 	.word	0x1e35c000
 8001e5c:	20001860 	.word	0x20001860

08001e60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == EXTI1_Pin)
	{

	}
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d121      	bne.n	8001ece <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		for(uint8_t i = 0; i < NBR_OF_MSGS; i++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e00a      	b.n	8001ea6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			Acc_CAN[i]++;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e98:	3201      	adds	r2, #1
 8001e9a:	4911      	ldr	r1, [pc, #68]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t i = 0; i < NBR_OF_MSGS; i++)
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d9f1      	bls.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0x18>
		}

		for(uint8_t i = 0; i < (NBR_OF_MSGS + NBR_OF_LOCAL_MSGS); i++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	73bb      	strb	r3, [r7, #14]
 8001eb0:	e00a      	b.n	8001ec8 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			Acc_Msg[i]++;
 8001eb2:	7bbb      	ldrb	r3, [r7, #14]
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001eb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eba:	3201      	adds	r2, #1
 8001ebc:	4909      	ldr	r1, [pc, #36]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t i = 0; i < (NBR_OF_MSGS + NBR_OF_LOCAL_MSGS); i++)
 8001ec2:	7bbb      	ldrb	r3, [r7, #14]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	73bb      	strb	r3, [r7, #14]
 8001ec8:	7bbb      	ldrb	r3, [r7, #14]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d9f1      	bls.n	8001eb2 <HAL_TIM_PeriodElapsedCallback+0x3a>
		}
	}
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40001000 	.word	0x40001000
 8001ee0:	2000183c 	.word	0x2000183c
 8001ee4:	20001788 	.word	0x20001788

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <HAL_MspInit+0x4c>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	; 0x38
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a79      	ldr	r2, [pc, #484]	; (800213c <HAL_ADC_MspInit+0x204>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d158      	bne.n	800200c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
 8001f5e:	4b78      	ldr	r3, [pc, #480]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b75      	ldr	r3, [pc, #468]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	4b71      	ldr	r3, [pc, #452]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a70      	ldr	r2, [pc, #448]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b6e      	ldr	r3, [pc, #440]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	69fb      	ldr	r3, [r7, #28]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f92:	233f      	movs	r3, #63	; 0x3f
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f96:	2303      	movs	r3, #3
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4867      	ldr	r0, [pc, #412]	; (8002144 <HAL_ADC_MspInit+0x20c>)
 8001fa6:	f002 f87d 	bl	80040a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001fac:	4a67      	ldr	r2, [pc, #412]	; (800214c <HAL_ADC_MspInit+0x214>)
 8001fae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fb0:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb6:	4b64      	ldr	r3, [pc, #400]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fbc:	4b62      	ldr	r3, [pc, #392]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fc2:	4b61      	ldr	r3, [pc, #388]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fca:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001fd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fda:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fe2:	4b59      	ldr	r3, [pc, #356]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe8:	4b57      	ldr	r3, [pc, #348]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fee:	4856      	ldr	r0, [pc, #344]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8001ff0:	f001 fcba 	bl	8003968 <HAL_DMA_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ffa:	f7ff fca3 	bl	8001944 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a51      	ldr	r2, [pc, #324]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_ADC_MspInit+0x210>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800200a:	e092      	b.n	8002132 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a4f      	ldr	r2, [pc, #316]	; (8002150 <HAL_ADC_MspInit+0x218>)
 8002012:	4293      	cmp	r3, r2
 8002014:	f040 808d 	bne.w	8002132 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	4b48      	ldr	r3, [pc, #288]	; (8002140 <HAL_ADC_MspInit+0x208>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	4a47      	ldr	r2, [pc, #284]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8002022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002026:	6453      	str	r3, [r2, #68]	; 0x44
 8002028:	4b45      	ldr	r3, [pc, #276]	; (8002140 <HAL_ADC_MspInit+0x208>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_ADC_MspInit+0x208>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a40      	ldr	r2, [pc, #256]	; (8002140 <HAL_ADC_MspInit+0x208>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b3e      	ldr	r3, [pc, #248]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	4a39      	ldr	r2, [pc, #228]	; (8002140 <HAL_ADC_MspInit+0x208>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6313      	str	r3, [r2, #48]	; 0x30
 8002060:	4b37      	ldr	r3, [pc, #220]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	4b33      	ldr	r3, [pc, #204]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4a32      	ldr	r2, [pc, #200]	; (8002140 <HAL_ADC_MspInit+0x208>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	6313      	str	r3, [r2, #48]	; 0x30
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_ADC_MspInit+0x208>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002088:	23c0      	movs	r3, #192	; 0xc0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208c:	2303      	movs	r3, #3
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	482a      	ldr	r0, [pc, #168]	; (8002144 <HAL_ADC_MspInit+0x20c>)
 800209c:	f002 f802 	bl	80040a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020a0:	2330      	movs	r3, #48	; 0x30
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a4:	2303      	movs	r3, #3
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4828      	ldr	r0, [pc, #160]	; (8002154 <HAL_ADC_MspInit+0x21c>)
 80020b4:	f001 fff6 	bl	80040a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020b8:	2303      	movs	r3, #3
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020bc:	2303      	movs	r3, #3
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	4823      	ldr	r0, [pc, #140]	; (8002158 <HAL_ADC_MspInit+0x220>)
 80020cc:	f001 ffea 	bl	80040a4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_ADC_MspInit+0x224>)
 80020d2:	4a23      	ldr	r2, [pc, #140]	; (8002160 <HAL_ADC_MspInit+0x228>)
 80020d4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_ADC_MspInit+0x224>)
 80020d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020dc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020de:	4b1f      	ldr	r3, [pc, #124]	; (800215c <HAL_ADC_MspInit+0x224>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_ADC_MspInit+0x224>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_ADC_MspInit+0x224>)
 80020ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_ADC_MspInit+0x224>)
 80020f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020f8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_ADC_MspInit+0x224>)
 80020fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002100:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_ADC_MspInit+0x224>)
 8002104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002108:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_ADC_MspInit+0x224>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_ADC_MspInit+0x224>)
 8002112:	2200      	movs	r2, #0
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002116:	4811      	ldr	r0, [pc, #68]	; (800215c <HAL_ADC_MspInit+0x224>)
 8002118:	f001 fc26 	bl	8003968 <HAL_DMA_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8002122:	f7ff fc0f 	bl	8001944 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0c      	ldr	r2, [pc, #48]	; (800215c <HAL_ADC_MspInit+0x224>)
 800212a:	639a      	str	r2, [r3, #56]	; 0x38
 800212c:	4a0b      	ldr	r2, [pc, #44]	; (800215c <HAL_ADC_MspInit+0x224>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002132:	bf00      	nop
 8002134:	3738      	adds	r7, #56	; 0x38
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40012000 	.word	0x40012000
 8002140:	40023800 	.word	0x40023800
 8002144:	40020000 	.word	0x40020000
 8002148:	200015d8 	.word	0x200015d8
 800214c:	40026410 	.word	0x40026410
 8002150:	40012100 	.word	0x40012100
 8002154:	40020800 	.word	0x40020800
 8002158:	40020400 	.word	0x40020400
 800215c:	200017b4 	.word	0x200017b4
 8002160:	40026440 	.word	0x40026440

08002164 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_CAN_MspInit+0x94>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d134      	bne.n	80021f0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HAL_CAN_MspInit+0x98>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_CAN_MspInit+0x98>)
 8002190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_CAN_MspInit+0x98>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_CAN_MspInit+0x98>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a14      	ldr	r2, [pc, #80]	; (80021fc <HAL_CAN_MspInit+0x98>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_CAN_MspInit+0x98>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80021d0:	2309      	movs	r3, #9
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	4809      	ldr	r0, [pc, #36]	; (8002200 <HAL_CAN_MspInit+0x9c>)
 80021dc:	f001 ff62 	bl	80040a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2102      	movs	r1, #2
 80021e4:	2014      	movs	r0, #20
 80021e6:	f001 fb88 	bl	80038fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80021ea:	2014      	movs	r0, #20
 80021ec:	f001 fba1 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	; 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40006400 	.word	0x40006400
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020400 	.word	0x40020400

08002204 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_I2C_MspInit+0x84>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d12b      	bne.n	800227e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_I2C_MspInit+0x88>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_I2C_MspInit+0x88>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_I2C_MspInit+0x88>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002242:	23c0      	movs	r3, #192	; 0xc0
 8002244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002246:	2312      	movs	r3, #18
 8002248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002252:	2304      	movs	r3, #4
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <HAL_I2C_MspInit+0x8c>)
 800225e:	f001 ff21 	bl	80040a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_I2C_MspInit+0x88>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <HAL_I2C_MspInit+0x88>)
 800226c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_I2C_MspInit+0x88>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40005400 	.word	0x40005400
 800228c:	40023800 	.word	0x40023800
 8002290:	40020400 	.word	0x40020400

08002294 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b09a      	sub	sp, #104	; 0x68
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	225c      	movs	r2, #92	; 0x5c
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f00c fc3b 	bl	800eb20 <memset>
  if(hrtc->Instance==RTC)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <HAL_RTC_MspInit+0x4c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022b4:	2320      	movs	r3, #32
 80022b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fda4 	bl	8005e10 <HAL_RCCEx_PeriphCLKConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022ce:	f7ff fb39 	bl	8001944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <HAL_RTC_MspInit+0x50>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	3768      	adds	r7, #104	; 0x68
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40002800 	.word	0x40002800
 80022e4:	42470e3c 	.word	0x42470e3c

080022e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a68      	ldr	r2, [pc, #416]	; (80024a8 <HAL_SD_MspInit+0x1c0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	f040 80c9 	bne.w	800249e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	4b66      	ldr	r3, [pc, #408]	; (80024ac <HAL_SD_MspInit+0x1c4>)
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	4a65      	ldr	r2, [pc, #404]	; (80024ac <HAL_SD_MspInit+0x1c4>)
 8002316:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800231a:	6453      	str	r3, [r2, #68]	; 0x44
 800231c:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_SD_MspInit+0x1c4>)
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	4b5f      	ldr	r3, [pc, #380]	; (80024ac <HAL_SD_MspInit+0x1c4>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4a5e      	ldr	r2, [pc, #376]	; (80024ac <HAL_SD_MspInit+0x1c4>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6313      	str	r3, [r2, #48]	; 0x30
 8002338:	4b5c      	ldr	r3, [pc, #368]	; (80024ac <HAL_SD_MspInit+0x1c4>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	4b58      	ldr	r3, [pc, #352]	; (80024ac <HAL_SD_MspInit+0x1c4>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	4a57      	ldr	r2, [pc, #348]	; (80024ac <HAL_SD_MspInit+0x1c4>)
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	6313      	str	r3, [r2, #48]	; 0x30
 8002354:	4b55      	ldr	r3, [pc, #340]	; (80024ac <HAL_SD_MspInit+0x1c4>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002360:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002364:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002372:	230c      	movs	r3, #12
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	484c      	ldr	r0, [pc, #304]	; (80024b0 <HAL_SD_MspInit+0x1c8>)
 800237e:	f001 fe91 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002382:	2304      	movs	r3, #4
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002392:	230c      	movs	r3, #12
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	4845      	ldr	r0, [pc, #276]	; (80024b4 <HAL_SD_MspInit+0x1cc>)
 800239e:	f001 fe81 	bl	80040a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80023a2:	4b45      	ldr	r3, [pc, #276]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023a4:	4a45      	ldr	r2, [pc, #276]	; (80024bc <HAL_SD_MspInit+0x1d4>)
 80023a6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80023a8:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ae:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b0:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b6:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023bc:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023c4:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023ca:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023cc:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023d2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80023d4:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023d6:	2220      	movs	r2, #32
 80023d8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023da:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023e0:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023e2:	2204      	movs	r2, #4
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023e8:	2203      	movs	r2, #3
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80023ec:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80023f4:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80023fc:	482e      	ldr	r0, [pc, #184]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 80023fe:	f001 fab3 	bl	8003968 <HAL_DMA_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8002408:	f7ff fa9c 	bl	8001944 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 8002410:	641a      	str	r2, [r3, #64]	; 0x40
 8002412:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <HAL_SD_MspInit+0x1d0>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002418:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 800241a:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <HAL_SD_MspInit+0x1dc>)
 800241c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 8002420:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002424:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 8002428:	2240      	movs	r2, #64	; 0x40
 800242a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 8002434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002438:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 800243c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002440:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 8002444:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002448:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 800244c:	2220      	movs	r2, #32
 800244e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 8002452:	2200      	movs	r2, #0
 8002454:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 8002458:	2204      	movs	r2, #4
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 800245e:	2203      	movs	r2, #3
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 8002464:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 800246c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002472:	4813      	ldr	r0, [pc, #76]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 8002474:	f001 fa78 	bl	8003968 <HAL_DMA_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800247e:	f7ff fa61 	bl	8001944 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 8002486:	63da      	str	r2, [r3, #60]	; 0x3c
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_SD_MspInit+0x1d8>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 1, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2101      	movs	r1, #1
 8002492:	2031      	movs	r0, #49	; 0x31
 8002494:	f001 fa31 	bl	80038fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002498:	2031      	movs	r0, #49	; 0x31
 800249a:	f001 fa4a 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	20000420 	.word	0x20000420
 80024bc:	40026458 	.word	0x40026458
 80024c0:	20001658 	.word	0x20001658
 80024c4:	400264a0 	.word	0x400264a0

080024c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <HAL_TIM_Base_MspInit+0x48>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d115      	bne.n	8002506 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <HAL_TIM_Base_MspInit+0x4c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <HAL_TIM_Base_MspInit+0x4c>)
 80024e4:	f043 0310 	orr.w	r3, r3, #16
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_TIM_Base_MspInit+0x4c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	2036      	movs	r0, #54	; 0x36
 80024fc:	f001 f9fd 	bl	80038fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002500:	2036      	movs	r0, #54	; 0x36
 8002502:	f001 fa16 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40001000 	.word	0x40001000
 8002514:	40023800 	.word	0x40023800

08002518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800251c:	e7fe      	b.n	800251c <NMI_Handler+0x4>

0800251e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <MemManage_Handler+0x4>

0800252a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252e:	e7fe      	b.n	800252e <BusFault_Handler+0x4>

08002530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <UsageFault_Handler+0x4>

08002536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002564:	f000 f8ec 	bl	8002740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <CAN1_RX0_IRQHandler+0x10>)
 8002572:	f000 feb8 	bl	80032e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20001814 	.word	0x20001814

08002580 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8002584:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002588:	f001 ff52 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 800258c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002590:	f001 ff4e 	bl	8004430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <SDIO_IRQHandler+0x10>)
 800259e:	f004 ff07 	bl	80073b0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20001704 	.word	0x20001704

080025ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <TIM6_DAC_IRQHandler+0x10>)
 80025b2:	f005 fff5 	bl	80085a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200016b8 	.word	0x200016b8

080025c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <DMA2_Stream0_IRQHandler+0x10>)
 80025c6:	f001 faf7 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200015d8 	.word	0x200015d8

080025d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <DMA2_Stream2_IRQHandler+0x10>)
 80025da:	f001 faed 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200017b4 	.word	0x200017b4

080025e8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <DMA2_Stream3_IRQHandler+0x10>)
 80025ee:	f001 fae3 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000420 	.word	0x20000420

080025fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <OTG_FS_IRQHandler+0x10>)
 8002602:	f002 fa0a 	bl	8004a1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20003e00 	.word	0x20003e00

08002610 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <DMA2_Stream6_IRQHandler+0x10>)
 8002616:	f001 facf 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20001658 	.word	0x20001658

08002624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <SystemInit+0x20>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <SystemInit+0x20>)
 8002630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800264e:	490e      	ldr	r1, [pc, #56]	; (8002688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002654:	e002      	b.n	800265c <LoopCopyDataInit>

08002656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265a:	3304      	adds	r3, #4

0800265c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800265c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002660:	d3f9      	bcc.n	8002656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002664:	4c0b      	ldr	r4, [pc, #44]	; (8002694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002668:	e001      	b.n	800266e <LoopFillZerobss>

0800266a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800266c:	3204      	adds	r2, #4

0800266e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002670:	d3fb      	bcc.n	800266a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002672:	f7ff ffd7 	bl	8002624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002676:	f00c fa2f 	bl	800ead8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267a:	f7fe fd45 	bl	8001108 <main>
  bx  lr    
 800267e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 800268c:	0800ebf4 	.word	0x0800ebf4
  ldr r2, =_sbss
 8002690:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8002694:	20004208 	.word	0x20004208

08002698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC_IRQHandler>
	...

0800269c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <HAL_Init+0x40>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_Init+0x40>)
 80026b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a07      	ldr	r2, [pc, #28]	; (80026dc <HAL_Init+0x40>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f001 f90d 	bl	80038e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ca:	200f      	movs	r0, #15
 80026cc:	f000 f808 	bl	80026e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d0:	f7ff fc0a 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00

080026e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_InitTick+0x54>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_InitTick+0x58>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	f001 f925 	bl	800394e <HAL_SYSTICK_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e00e      	b.n	800272c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d80a      	bhi.n	800272a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002714:	2200      	movs	r2, #0
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f001 f8ed 	bl	80038fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002720:	4a06      	ldr	r2, [pc, #24]	; (800273c <HAL_InitTick+0x5c>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e000      	b.n	800272c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000000 	.word	0x20000000
 8002738:	20000008 	.word	0x20000008
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_IncTick+0x20>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_IncTick+0x24>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_IncTick+0x24>)
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000008 	.word	0x20000008
 8002764:	200018c0 	.word	0x200018c0

08002768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return uwTick;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_GetTick+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	200018c0 	.word	0x200018c0

08002780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002788:	f7ff ffee 	bl	8002768 <HAL_GetTick>
 800278c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d005      	beq.n	80027a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_Delay+0x44>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027a6:	bf00      	nop
 80027a8:	f7ff ffde 	bl	8002768 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d8f7      	bhi.n	80027a8 <HAL_Delay+0x28>
  {
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000008 	.word	0x20000008

080027c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e033      	b.n	8002846 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fba6 	bl	8001f38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d118      	bne.n	8002838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800280e:	f023 0302 	bic.w	r3, r3, #2
 8002812:	f043 0202 	orr.w	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f94a 	bl	8002ab4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
 8002836:	e001      	b.n	800283c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_ADC_ConfigChannel+0x1c>
 8002868:	2302      	movs	r3, #2
 800286a:	e113      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x244>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b09      	cmp	r3, #9
 800287a:	d925      	bls.n	80028c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68d9      	ldr	r1, [r3, #12]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	3b1e      	subs	r3, #30
 8002892:	2207      	movs	r2, #7
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43da      	mvns	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	400a      	ands	r2, r1
 80028a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68d9      	ldr	r1, [r3, #12]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	4603      	mov	r3, r0
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4403      	add	r3, r0
 80028ba:	3b1e      	subs	r3, #30
 80028bc:	409a      	lsls	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	e022      	b.n	800290e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6919      	ldr	r1, [r3, #16]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	4613      	mov	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4413      	add	r3, r2
 80028dc:	2207      	movs	r2, #7
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	400a      	ands	r2, r1
 80028ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6919      	ldr	r1, [r3, #16]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4618      	mov	r0, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4403      	add	r3, r0
 8002904:	409a      	lsls	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d824      	bhi.n	8002960 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	3b05      	subs	r3, #5
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b05      	subs	r3, #5
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	635a      	str	r2, [r3, #52]	; 0x34
 800295e:	e04c      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b0c      	cmp	r3, #12
 8002966:	d824      	bhi.n	80029b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	3b23      	subs	r3, #35	; 0x23
 800297a:	221f      	movs	r2, #31
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43da      	mvns	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	400a      	ands	r2, r1
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	4618      	mov	r0, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	3b23      	subs	r3, #35	; 0x23
 80029a4:	fa00 f203 	lsl.w	r2, r0, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
 80029b0:	e023      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b41      	subs	r3, #65	; 0x41
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b41      	subs	r3, #65	; 0x41
 80029ee:	fa00 f203 	lsl.w	r2, r0, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <HAL_ADC_ConfigChannel+0x250>)
 80029fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <HAL_ADC_ConfigChannel+0x254>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10f      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x1d8>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b12      	cmp	r3, #18
 8002a0e:	d10b      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_ADC_ConfigChannel+0x254>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d12b      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x23a>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_ADC_ConfigChannel+0x258>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0x1f4>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b11      	cmp	r3, #17
 8002a42:	d122      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <HAL_ADC_ConfigChannel+0x258>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d111      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_ADC_ConfigChannel+0x25c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <HAL_ADC_ConfigChannel+0x260>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	0c9a      	lsrs	r2, r3, #18
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a7c:	e002      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f9      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40012300 	.word	0x40012300
 8002aa4:	40012000 	.word	0x40012000
 8002aa8:	10000012 	.word	0x10000012
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	431bde83 	.word	0x431bde83

08002ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002abc:	4b79      	ldr	r3, [pc, #484]	; (8002ca4 <ADC_Init+0x1f0>)
 8002abe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	021a      	lsls	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <ADC_Init+0x1f4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d022      	beq.n	8002b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6899      	ldr	r1, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6899      	ldr	r1, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	e00f      	b.n	8002bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0202 	bic.w	r2, r2, #2
 8002bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6899      	ldr	r1, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7e1b      	ldrb	r3, [r3, #24]
 8002bcc:	005a      	lsls	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	035a      	lsls	r2, r3, #13
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	e007      	b.n	8002c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	051a      	lsls	r2, r3, #20
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c6a:	025a      	lsls	r2, r3, #9
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	029a      	lsls	r2, r3, #10
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40012300 	.word	0x40012300
 8002ca8:	0f000001 	.word	0x0f000001

08002cac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0ed      	b.n	8002e9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff fa4a 	bl	8002164 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce0:	f7ff fd42 	bl	8002768 <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ce6:	e012      	b.n	8002d0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ce8:	f7ff fd3e 	bl	8002768 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b0a      	cmp	r3, #10
 8002cf4:	d90b      	bls.n	8002d0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2205      	movs	r2, #5
 8002d06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0c5      	b.n	8002e9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0e5      	beq.n	8002ce8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0202 	bic.w	r2, r2, #2
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d2c:	f7ff fd1c 	bl	8002768 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d32:	e012      	b.n	8002d5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d34:	f7ff fd18 	bl	8002768 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b0a      	cmp	r3, #10
 8002d40:	d90b      	bls.n	8002d5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2205      	movs	r2, #5
 8002d52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e09f      	b.n	8002e9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e5      	bne.n	8002d34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7e1b      	ldrb	r3, [r3, #24]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d108      	bne.n	8002d82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e007      	b.n	8002d92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7e5b      	ldrb	r3, [r3, #25]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d108      	bne.n	8002dac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e007      	b.n	8002dbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7e9b      	ldrb	r3, [r3, #26]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d108      	bne.n	8002dd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0220 	orr.w	r2, r2, #32
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0220 	bic.w	r2, r2, #32
 8002de4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7edb      	ldrb	r3, [r3, #27]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d108      	bne.n	8002e00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0210 	bic.w	r2, r2, #16
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e007      	b.n	8002e10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0210 	orr.w	r2, r2, #16
 8002e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7f1b      	ldrb	r3, [r3, #28]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d108      	bne.n	8002e2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0208 	orr.w	r2, r2, #8
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e007      	b.n	8002e3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0208 	bic.w	r2, r2, #8
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7f5b      	ldrb	r3, [r3, #29]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d108      	bne.n	8002e54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0204 	orr.w	r2, r2, #4
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e007      	b.n	8002e64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0204 	bic.w	r2, r2, #4
 8002e62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	ea42 0103 	orr.w	r1, r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b089      	sub	sp, #36	; 0x24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d003      	beq.n	8002ece <HAL_CAN_AddTxMessage+0x2c>
 8002ec6:	7ffb      	ldrb	r3, [r7, #31]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	f040 80b8 	bne.w	800303e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80a0 	beq.w	800302e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	0e1b      	lsrs	r3, r3, #24
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d907      	bls.n	8002f0e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e09e      	b.n	800304c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	409a      	lsls	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f2a:	68f9      	ldr	r1, [r7, #12]
 8002f2c:	6809      	ldr	r1, [r1, #0]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3318      	adds	r3, #24
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	440b      	add	r3, r1
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e00f      	b.n	8002f5c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f46:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f4c:	68f9      	ldr	r1, [r7, #12]
 8002f4e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f50:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3318      	adds	r3, #24
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	440b      	add	r3, r1
 8002f5a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3318      	adds	r3, #24
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	7d1b      	ldrb	r3, [r3, #20]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d111      	bne.n	8002f9c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3318      	adds	r3, #24
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	4413      	add	r3, r2
 8002f84:	3304      	adds	r3, #4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	6811      	ldr	r1, [r2, #0]
 8002f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3318      	adds	r3, #24
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	440b      	add	r3, r1
 8002f98:	3304      	adds	r3, #4
 8002f9a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3307      	adds	r3, #7
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	061a      	lsls	r2, r3, #24
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3306      	adds	r3, #6
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3305      	adds	r3, #5
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	3204      	adds	r2, #4
 8002fbc:	7812      	ldrb	r2, [r2, #0]
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	6811      	ldr	r1, [r2, #0]
 8002fc4:	ea43 0200 	orr.w	r2, r3, r0
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	440b      	add	r3, r1
 8002fce:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002fd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3303      	adds	r3, #3
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	061a      	lsls	r2, r3, #24
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3302      	adds	r3, #2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	041b      	lsls	r3, r3, #16
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	6811      	ldr	r1, [r2, #0]
 8002ffa:	ea43 0200 	orr.w	r2, r3, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	440b      	add	r3, r1
 8003004:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003008:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3318      	adds	r3, #24
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4413      	add	r3, r2
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	6811      	ldr	r1, [r2, #0]
 800301c:	f043 0201 	orr.w	r2, r3, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3318      	adds	r3, #24
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	440b      	add	r3, r1
 8003028:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e00e      	b.n	800304c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e006      	b.n	800304c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
  }
}
 800304c:	4618      	mov	r0, r3
 800304e:	3724      	adds	r7, #36	; 0x24
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800306a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d002      	beq.n	8003078 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d11d      	bne.n	80030b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3301      	adds	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3301      	adds	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3301      	adds	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80030b4:	68fb      	ldr	r3, [r7, #12]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030c2:	b480      	push	{r7}
 80030c4:	b087      	sub	sp, #28
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d003      	beq.n	80030e6 <HAL_CAN_GetRxMessage+0x24>
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	f040 80f3 	bne.w	80032cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10e      	bne.n	800310a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0e7      	b.n	80032da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d107      	bne.n	8003128 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0d8      	b.n	80032da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	331b      	adds	r3, #27
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4413      	add	r3, r2
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0204 	and.w	r2, r3, #4
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10c      	bne.n	8003160 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	331b      	adds	r3, #27
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4413      	add	r3, r2
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	0d5b      	lsrs	r3, r3, #21
 8003156:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e00b      	b.n	8003178 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	331b      	adds	r3, #27
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	4413      	add	r3, r2
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	08db      	lsrs	r3, r3, #3
 8003170:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	331b      	adds	r3, #27
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	4413      	add	r3, r2
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0202 	and.w	r2, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	331b      	adds	r3, #27
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 020f 	and.w	r2, r3, #15
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	331b      	adds	r3, #27
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	331b      	adds	r3, #27
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	4413      	add	r3, r2
 80031ca:	3304      	adds	r3, #4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	4413      	add	r3, r2
 80031e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	0a1a      	lsrs	r2, r3, #8
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	4413      	add	r3, r2
 8003210:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	0c1a      	lsrs	r2, r3, #16
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	3302      	adds	r3, #2
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	4413      	add	r3, r2
 800322a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0e1a      	lsrs	r2, r3, #24
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	3303      	adds	r3, #3
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	4413      	add	r3, r2
 8003244:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	3304      	adds	r3, #4
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	4413      	add	r3, r2
 800325c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0a1a      	lsrs	r2, r3, #8
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3305      	adds	r3, #5
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	4413      	add	r3, r2
 8003276:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0c1a      	lsrs	r2, r3, #16
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	3306      	adds	r3, #6
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	4413      	add	r3, r2
 8003290:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	0e1a      	lsrs	r2, r3, #24
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	3307      	adds	r3, #7
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0220 	orr.w	r2, r2, #32
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	e007      	b.n	80032c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0220 	orr.w	r2, r2, #32
 80032c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e006      	b.n	80032da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b08a      	sub	sp, #40	; 0x28
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d07c      	beq.n	8003426 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d023      	beq.n	800337e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f983 	bl	8003654 <HAL_CAN_TxMailbox0CompleteCallback>
 800334e:	e016      	b.n	800337e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
 8003362:	e00c      	b.n	800337e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	e002      	b.n	800337e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f989 	bl	8003690 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d024      	beq.n	80033d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003390:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f963 	bl	8003668 <HAL_CAN_TxMailbox1CompleteCallback>
 80033a2:	e016      	b.n	80033d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
 80033b6:	e00c      	b.n	80033d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	e002      	b.n	80033d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f969 	bl	80036a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d024      	beq.n	8003426 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f943 	bl	800367c <HAL_CAN_TxMailbox2CompleteCallback>
 80033f6:	e016      	b.n	8003426 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	e00c      	b.n	8003426 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
 800341e:	e002      	b.n	8003426 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f949 	bl	80036b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00c      	beq.n	800344a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003440:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2210      	movs	r2, #16
 8003448:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d006      	beq.n	800346c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2208      	movs	r2, #8
 8003464:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f930 	bl	80036cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fe fca9 	bl	8001ddc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00c      	beq.n	80034ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2210      	movs	r2, #16
 80034ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2208      	movs	r2, #8
 80034c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f912 	bl	80036f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f8f9 	bl	80036e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00b      	beq.n	8003510 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2210      	movs	r2, #16
 8003508:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8fc 	bl	8003708 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d006      	beq.n	8003532 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2208      	movs	r2, #8
 800352a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f8f5 	bl	800371c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d07b      	beq.n	8003634 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d072      	beq.n	800362c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d043      	beq.n	800362c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d03e      	beq.n	800362c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035b4:	2b60      	cmp	r3, #96	; 0x60
 80035b6:	d02b      	beq.n	8003610 <HAL_CAN_IRQHandler+0x32a>
 80035b8:	2b60      	cmp	r3, #96	; 0x60
 80035ba:	d82e      	bhi.n	800361a <HAL_CAN_IRQHandler+0x334>
 80035bc:	2b50      	cmp	r3, #80	; 0x50
 80035be:	d022      	beq.n	8003606 <HAL_CAN_IRQHandler+0x320>
 80035c0:	2b50      	cmp	r3, #80	; 0x50
 80035c2:	d82a      	bhi.n	800361a <HAL_CAN_IRQHandler+0x334>
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d019      	beq.n	80035fc <HAL_CAN_IRQHandler+0x316>
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d826      	bhi.n	800361a <HAL_CAN_IRQHandler+0x334>
 80035cc:	2b30      	cmp	r3, #48	; 0x30
 80035ce:	d010      	beq.n	80035f2 <HAL_CAN_IRQHandler+0x30c>
 80035d0:	2b30      	cmp	r3, #48	; 0x30
 80035d2:	d822      	bhi.n	800361a <HAL_CAN_IRQHandler+0x334>
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d002      	beq.n	80035de <HAL_CAN_IRQHandler+0x2f8>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d005      	beq.n	80035e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80035dc:	e01d      	b.n	800361a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	f043 0308 	orr.w	r3, r3, #8
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035e6:	e019      	b.n	800361c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f043 0310 	orr.w	r3, r3, #16
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035f0:	e014      	b.n	800361c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	f043 0320 	orr.w	r3, r3, #32
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035fa:	e00f      	b.n	800361c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003604:	e00a      	b.n	800361c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800360e:	e005      	b.n	800361c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003618:	e000      	b.n	800361c <HAL_CAN_IRQHandler+0x336>
            break;
 800361a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800362a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2204      	movs	r2, #4
 8003632:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f872 	bl	8003730 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800364c:	bf00      	nop
 800364e:	3728      	adds	r7, #40	; 0x28
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003760:	4013      	ands	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800376c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003776:	4a04      	ldr	r2, [pc, #16]	; (8003788 <__NVIC_SetPriorityGrouping+0x44>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	60d3      	str	r3, [r2, #12]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	0a1b      	lsrs	r3, r3, #8
 8003796:	f003 0307 	and.w	r3, r3, #7
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db0b      	blt.n	80037d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	4907      	ldr	r1, [pc, #28]	; (80037e0 <__NVIC_EnableIRQ+0x38>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2001      	movs	r0, #1
 80037ca:	fa00 f202 	lsl.w	r2, r0, r2
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	e000e100 	.word	0xe000e100

080037e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	db0a      	blt.n	800380e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	490c      	ldr	r1, [pc, #48]	; (8003830 <__NVIC_SetPriority+0x4c>)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	440b      	add	r3, r1
 8003808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800380c:	e00a      	b.n	8003824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4908      	ldr	r1, [pc, #32]	; (8003834 <__NVIC_SetPriority+0x50>)
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	3b04      	subs	r3, #4
 800381c:	0112      	lsls	r2, r2, #4
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	440b      	add	r3, r1
 8003822:	761a      	strb	r2, [r3, #24]
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000e100 	.word	0xe000e100
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003838:	b480      	push	{r7}
 800383a:	b089      	sub	sp, #36	; 0x24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f1c3 0307 	rsb	r3, r3, #7
 8003852:	2b04      	cmp	r3, #4
 8003854:	bf28      	it	cs
 8003856:	2304      	movcs	r3, #4
 8003858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3304      	adds	r3, #4
 800385e:	2b06      	cmp	r3, #6
 8003860:	d902      	bls.n	8003868 <NVIC_EncodePriority+0x30>
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3b03      	subs	r3, #3
 8003866:	e000      	b.n	800386a <NVIC_EncodePriority+0x32>
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	f04f 32ff 	mov.w	r2, #4294967295
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43da      	mvns	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	401a      	ands	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003880:	f04f 31ff 	mov.w	r1, #4294967295
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fa01 f303 	lsl.w	r3, r1, r3
 800388a:	43d9      	mvns	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003890:	4313      	orrs	r3, r2
         );
}
 8003892:	4618      	mov	r0, r3
 8003894:	3724      	adds	r7, #36	; 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b0:	d301      	bcc.n	80038b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00f      	b.n	80038d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <SysTick_Config+0x40>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038be:	210f      	movs	r1, #15
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	f7ff ff8e 	bl	80037e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <SysTick_Config+0x40>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ce:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <SysTick_Config+0x40>)
 80038d0:	2207      	movs	r2, #7
 80038d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	e000e010 	.word	0xe000e010

080038e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff29 	bl	8003744 <__NVIC_SetPriorityGrouping>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b086      	sub	sp, #24
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800390c:	f7ff ff3e 	bl	800378c <__NVIC_GetPriorityGrouping>
 8003910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f7ff ff8e 	bl	8003838 <NVIC_EncodePriority>
 800391c:	4602      	mov	r2, r0
 800391e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff5d 	bl	80037e4 <__NVIC_SetPriority>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800393c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff31 	bl	80037a8 <__NVIC_EnableIRQ>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ffa2 	bl	80038a0 <SysTick_Config>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003974:	f7fe fef8 	bl	8002768 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e099      	b.n	8003ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a4:	e00f      	b.n	80039c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039a6:	f7fe fedf 	bl	8002768 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d908      	bls.n	80039c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2203      	movs	r2, #3
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e078      	b.n	8003ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e8      	bne.n	80039a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <HAL_DMA_Init+0x158>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d107      	bne.n	8003a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f023 0307 	bic.w	r3, r3, #7
 8003a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d117      	bne.n	8003a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00e      	beq.n	8003a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fa9d 	bl	8003fac <DMA_CheckFifoParam>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2240      	movs	r2, #64	; 0x40
 8003a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a86:	2301      	movs	r3, #1
 8003a88:	e016      	b.n	8003ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa54 	bl	8003f40 <DMA_CalcBaseAndBitshift>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	223f      	movs	r2, #63	; 0x3f
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	f010803f 	.word	0xf010803f

08003ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_DMA_Start_IT+0x26>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e040      	b.n	8003b6c <HAL_DMA_Start_IT+0xa8>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d12f      	bne.n	8003b5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f9e6 	bl	8003ee4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1c:	223f      	movs	r2, #63	; 0x3f
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0216 	orr.w	r2, r2, #22
 8003b32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0208 	orr.w	r2, r2, #8
 8003b4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e005      	b.n	8003b6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
 8003b68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d004      	beq.n	8003b92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e00c      	b.n	8003bac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2205      	movs	r2, #5
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bc4:	4b92      	ldr	r3, [pc, #584]	; (8003e10 <HAL_DMA_IRQHandler+0x258>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a92      	ldr	r2, [pc, #584]	; (8003e14 <HAL_DMA_IRQHandler+0x25c>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0a9b      	lsrs	r3, r3, #10
 8003bd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be2:	2208      	movs	r2, #8
 8003be4:	409a      	lsls	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01a      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0204 	bic.w	r2, r2, #4
 8003c0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c10:	2208      	movs	r2, #8
 8003c12:	409a      	lsls	r2, r3
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f043 0201 	orr.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	2201      	movs	r2, #1
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d012      	beq.n	8003c5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c46:	2201      	movs	r2, #1
 8003c48:	409a      	lsls	r2, r3
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f043 0202 	orr.w	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	2204      	movs	r2, #4
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d012      	beq.n	8003c90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f043 0204 	orr.w	r2, r3, #4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	2210      	movs	r2, #16
 8003c96:	409a      	lsls	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d043      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d03c      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb2:	2210      	movs	r2, #16
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d018      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d108      	bne.n	8003ce8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d024      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
 8003ce6:	e01f      	b.n	8003d28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01b      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
 8003cf8:	e016      	b.n	8003d28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d107      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0208 	bic.w	r2, r2, #8
 8003d16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 808e 	beq.w	8003e56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8086 	beq.w	8003e56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	2220      	movs	r2, #32
 8003d50:	409a      	lsls	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d136      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0216 	bic.w	r2, r2, #22
 8003d70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <HAL_DMA_IRQHandler+0x1da>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0208 	bic.w	r2, r2, #8
 8003da0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	223f      	movs	r2, #63	; 0x3f
 8003da8:	409a      	lsls	r2, r3
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d07d      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	4798      	blx	r3
        }
        return;
 8003dce:	e078      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01c      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d108      	bne.n	8003dfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d030      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
 8003dfc:	e02b      	b.n	8003e56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d027      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
 8003e0e:	e022      	b.n	8003e56 <HAL_DMA_IRQHandler+0x29e>
 8003e10:	20000000 	.word	0x20000000
 8003e14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10f      	bne.n	8003e46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0210 	bic.w	r2, r2, #16
 8003e34:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d032      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d022      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	3301      	adds	r3, #1
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d307      	bcc.n	8003e9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1f2      	bne.n	8003e82 <HAL_DMA_IRQHandler+0x2ca>
 8003e9c:	e000      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e9e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
 8003ec0:	e000      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ec2:	bf00      	nop
    }
  }
}
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop

08003ecc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d108      	bne.n	8003f24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f22:	e007      	b.n	8003f34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	3b10      	subs	r3, #16
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d909      	bls.n	8003f82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f80:	e007      	b.n	8003f92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	aaaaaaab 	.word	0xaaaaaaab
 8003fa8:	0800eba4 	.word	0x0800eba4

08003fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11f      	bne.n	8004006 <DMA_CheckFifoParam+0x5a>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d856      	bhi.n	800407a <DMA_CheckFifoParam+0xce>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <DMA_CheckFifoParam+0x28>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08003ff7 	.word	0x08003ff7
 8003fdc:	08003fe5 	.word	0x08003fe5
 8003fe0:	0800407b 	.word	0x0800407b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d046      	beq.n	800407e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff4:	e043      	b.n	800407e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ffe:	d140      	bne.n	8004082 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004004:	e03d      	b.n	8004082 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400e:	d121      	bne.n	8004054 <DMA_CheckFifoParam+0xa8>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d837      	bhi.n	8004086 <DMA_CheckFifoParam+0xda>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <DMA_CheckFifoParam+0x70>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004033 	.word	0x08004033
 8004024:	0800402d 	.word	0x0800402d
 8004028:	08004045 	.word	0x08004045
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e030      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d025      	beq.n	800408a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004042:	e022      	b.n	800408a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800404c:	d11f      	bne.n	800408e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004052:	e01c      	b.n	800408e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d903      	bls.n	8004062 <DMA_CheckFifoParam+0xb6>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d003      	beq.n	8004068 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004060:	e018      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
      break;
 8004066:	e015      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00e      	beq.n	8004092 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e00b      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      break;
 800407a:	bf00      	nop
 800407c:	e00a      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 800407e:	bf00      	nop
 8004080:	e008      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004082:	bf00      	nop
 8004084:	e006      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004086:	bf00      	nop
 8004088:	e004      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 800408a:	bf00      	nop
 800408c:	e002      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;   
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004092:	bf00      	nop
    }
  } 
  
  return status; 
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	e165      	b.n	800438c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040c0:	2201      	movs	r2, #1
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4013      	ands	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	429a      	cmp	r2, r3
 80040da:	f040 8154 	bne.w	8004386 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d005      	beq.n	80040f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d130      	bne.n	8004158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	2203      	movs	r2, #3
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4013      	ands	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800412c:	2201      	movs	r2, #1
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	f003 0201 	and.w	r2, r3, #1
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b03      	cmp	r3, #3
 8004162:	d017      	beq.n	8004194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	2203      	movs	r2, #3
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4013      	ands	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d123      	bne.n	80041e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	08da      	lsrs	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3208      	adds	r2, #8
 80041a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	220f      	movs	r2, #15
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	08da      	lsrs	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3208      	adds	r2, #8
 80041e2:	69b9      	ldr	r1, [r7, #24]
 80041e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	2203      	movs	r2, #3
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	43db      	mvns	r3, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0203 	and.w	r2, r3, #3
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4313      	orrs	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80ae 	beq.w	8004386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	4b5d      	ldr	r3, [pc, #372]	; (80043a4 <HAL_GPIO_Init+0x300>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	4a5c      	ldr	r2, [pc, #368]	; (80043a4 <HAL_GPIO_Init+0x300>)
 8004234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004238:	6453      	str	r3, [r2, #68]	; 0x44
 800423a:	4b5a      	ldr	r3, [pc, #360]	; (80043a4 <HAL_GPIO_Init+0x300>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004246:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <HAL_GPIO_Init+0x304>)
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	089b      	lsrs	r3, r3, #2
 800424c:	3302      	adds	r3, #2
 800424e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	220f      	movs	r2, #15
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4013      	ands	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a4f      	ldr	r2, [pc, #316]	; (80043ac <HAL_GPIO_Init+0x308>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d025      	beq.n	80042be <HAL_GPIO_Init+0x21a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a4e      	ldr	r2, [pc, #312]	; (80043b0 <HAL_GPIO_Init+0x30c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01f      	beq.n	80042ba <HAL_GPIO_Init+0x216>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a4d      	ldr	r2, [pc, #308]	; (80043b4 <HAL_GPIO_Init+0x310>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d019      	beq.n	80042b6 <HAL_GPIO_Init+0x212>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a4c      	ldr	r2, [pc, #304]	; (80043b8 <HAL_GPIO_Init+0x314>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_GPIO_Init+0x20e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a4b      	ldr	r2, [pc, #300]	; (80043bc <HAL_GPIO_Init+0x318>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00d      	beq.n	80042ae <HAL_GPIO_Init+0x20a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a4a      	ldr	r2, [pc, #296]	; (80043c0 <HAL_GPIO_Init+0x31c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <HAL_GPIO_Init+0x206>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a49      	ldr	r2, [pc, #292]	; (80043c4 <HAL_GPIO_Init+0x320>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_GPIO_Init+0x202>
 80042a2:	2306      	movs	r3, #6
 80042a4:	e00c      	b.n	80042c0 <HAL_GPIO_Init+0x21c>
 80042a6:	2307      	movs	r3, #7
 80042a8:	e00a      	b.n	80042c0 <HAL_GPIO_Init+0x21c>
 80042aa:	2305      	movs	r3, #5
 80042ac:	e008      	b.n	80042c0 <HAL_GPIO_Init+0x21c>
 80042ae:	2304      	movs	r3, #4
 80042b0:	e006      	b.n	80042c0 <HAL_GPIO_Init+0x21c>
 80042b2:	2303      	movs	r3, #3
 80042b4:	e004      	b.n	80042c0 <HAL_GPIO_Init+0x21c>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e002      	b.n	80042c0 <HAL_GPIO_Init+0x21c>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <HAL_GPIO_Init+0x21c>
 80042be:	2300      	movs	r3, #0
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	f002 0203 	and.w	r2, r2, #3
 80042c6:	0092      	lsls	r2, r2, #2
 80042c8:	4093      	lsls	r3, r2
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042d0:	4935      	ldr	r1, [pc, #212]	; (80043a8 <HAL_GPIO_Init+0x304>)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	089b      	lsrs	r3, r3, #2
 80042d6:	3302      	adds	r3, #2
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042de:	4b3a      	ldr	r3, [pc, #232]	; (80043c8 <HAL_GPIO_Init+0x324>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4013      	ands	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004302:	4a31      	ldr	r2, [pc, #196]	; (80043c8 <HAL_GPIO_Init+0x324>)
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004308:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <HAL_GPIO_Init+0x324>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800432c:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <HAL_GPIO_Init+0x324>)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004332:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <HAL_GPIO_Init+0x324>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004356:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <HAL_GPIO_Init+0x324>)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800435c:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <HAL_GPIO_Init+0x324>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004380:	4a11      	ldr	r2, [pc, #68]	; (80043c8 <HAL_GPIO_Init+0x324>)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3301      	adds	r3, #1
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b0f      	cmp	r3, #15
 8004390:	f67f ae96 	bls.w	80040c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3724      	adds	r7, #36	; 0x24
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40013800 	.word	0x40013800
 80043ac:	40020000 	.word	0x40020000
 80043b0:	40020400 	.word	0x40020400
 80043b4:	40020800 	.word	0x40020800
 80043b8:	40020c00 	.word	0x40020c00
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40021400 	.word	0x40021400
 80043c4:	40021800 	.word	0x40021800
 80043c8:	40013c00 	.word	0x40013c00

080043cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	887b      	ldrh	r3, [r7, #2]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	e001      	b.n	80043ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800440c:	787b      	ldrb	r3, [r7, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004418:	e003      	b.n	8004422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	041a      	lsls	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	619a      	str	r2, [r3, #24]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d006      	beq.n	8004454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004446:	4a05      	ldr	r2, [pc, #20]	; (800445c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fd fd06 	bl	8001e60 <HAL_GPIO_EXTI_Callback>
  }
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40013c00 	.word	0x40013c00

08004460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e12b      	b.n	80046ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fd febc 	bl	8002204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044c4:	f001 fc90 	bl	8005de8 <HAL_RCC_GetPCLK1Freq>
 80044c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4a81      	ldr	r2, [pc, #516]	; (80046d4 <HAL_I2C_Init+0x274>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d807      	bhi.n	80044e4 <HAL_I2C_Init+0x84>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a80      	ldr	r2, [pc, #512]	; (80046d8 <HAL_I2C_Init+0x278>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	bf94      	ite	ls
 80044dc:	2301      	movls	r3, #1
 80044de:	2300      	movhi	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	e006      	b.n	80044f2 <HAL_I2C_Init+0x92>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a7d      	ldr	r2, [pc, #500]	; (80046dc <HAL_I2C_Init+0x27c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	bf94      	ite	ls
 80044ec:	2301      	movls	r3, #1
 80044ee:	2300      	movhi	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e0e7      	b.n	80046ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a78      	ldr	r2, [pc, #480]	; (80046e0 <HAL_I2C_Init+0x280>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	0c9b      	lsrs	r3, r3, #18
 8004504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4a6a      	ldr	r2, [pc, #424]	; (80046d4 <HAL_I2C_Init+0x274>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d802      	bhi.n	8004534 <HAL_I2C_Init+0xd4>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3301      	adds	r3, #1
 8004532:	e009      	b.n	8004548 <HAL_I2C_Init+0xe8>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	4a69      	ldr	r2, [pc, #420]	; (80046e4 <HAL_I2C_Init+0x284>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	099b      	lsrs	r3, r3, #6
 8004546:	3301      	adds	r3, #1
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	430b      	orrs	r3, r1
 800454e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800455a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	495c      	ldr	r1, [pc, #368]	; (80046d4 <HAL_I2C_Init+0x274>)
 8004564:	428b      	cmp	r3, r1
 8004566:	d819      	bhi.n	800459c <HAL_I2C_Init+0x13c>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1e59      	subs	r1, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	fbb1 f3f3 	udiv	r3, r1, r3
 8004576:	1c59      	adds	r1, r3, #1
 8004578:	f640 73fc 	movw	r3, #4092	; 0xffc
 800457c:	400b      	ands	r3, r1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_I2C_Init+0x138>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1e59      	subs	r1, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004590:	3301      	adds	r3, #1
 8004592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004596:	e051      	b.n	800463c <HAL_I2C_Init+0x1dc>
 8004598:	2304      	movs	r3, #4
 800459a:	e04f      	b.n	800463c <HAL_I2C_Init+0x1dc>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d111      	bne.n	80045c8 <HAL_I2C_Init+0x168>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1e58      	subs	r0, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	440b      	add	r3, r1
 80045b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b6:	3301      	adds	r3, #1
 80045b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e012      	b.n	80045ee <HAL_I2C_Init+0x18e>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	1e58      	subs	r0, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6859      	ldr	r1, [r3, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	0099      	lsls	r1, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	fbb0 f3f3 	udiv	r3, r0, r3
 80045de:	3301      	adds	r3, #1
 80045e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_I2C_Init+0x196>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e022      	b.n	800463c <HAL_I2C_Init+0x1dc>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10e      	bne.n	800461c <HAL_I2C_Init+0x1bc>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1e58      	subs	r0, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6859      	ldr	r1, [r3, #4]
 8004606:	460b      	mov	r3, r1
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	440b      	add	r3, r1
 800460c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004610:	3301      	adds	r3, #1
 8004612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461a:	e00f      	b.n	800463c <HAL_I2C_Init+0x1dc>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1e58      	subs	r0, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	0099      	lsls	r1, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004632:	3301      	adds	r3, #1
 8004634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	6809      	ldr	r1, [r1, #0]
 8004640:	4313      	orrs	r3, r2
 8004642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69da      	ldr	r2, [r3, #28]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800466a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6911      	ldr	r1, [r2, #16]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68d2      	ldr	r2, [r2, #12]
 8004676:	4311      	orrs	r1, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	430b      	orrs	r3, r1
 800467e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	000186a0 	.word	0x000186a0
 80046d8:	001e847f 	.word	0x001e847f
 80046dc:	003d08ff 	.word	0x003d08ff
 80046e0:	431bde83 	.word	0x431bde83
 80046e4:	10624dd3 	.word	0x10624dd3

080046e8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e034      	b.n	8004764 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004702:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f245 5255 	movw	r2, #21845	; 0x5555
 800470c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6852      	ldr	r2, [r2, #4]
 8004716:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6892      	ldr	r2, [r2, #8]
 8004720:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004722:	f7fe f821 	bl	8002768 <HAL_GetTick>
 8004726:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004728:	e00f      	b.n	800474a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800472a:	f7fe f81d 	bl	8002768 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b31      	cmp	r3, #49	; 0x31
 8004736:	d908      	bls.n	800474a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e00c      	b.n	8004764 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e8      	bne.n	800472a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004760:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800476c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476e:	b08f      	sub	sp, #60	; 0x3c
 8004770:	af0a      	add	r7, sp, #40	; 0x28
 8004772:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e116      	b.n	80049ac <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f009 fe0d 	bl	800e3b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2203      	movs	r2, #3
 80047a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f004 ffd8 	bl	8009772 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	687e      	ldr	r6, [r7, #4]
 80047ca:	466d      	mov	r5, sp
 80047cc:	f106 0410 	add.w	r4, r6, #16
 80047d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80047e0:	1d33      	adds	r3, r6, #4
 80047e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047e4:	6838      	ldr	r0, [r7, #0]
 80047e6:	f004 feaf 	bl	8009548 <USB_CoreInit>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0d7      	b.n	80049ac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2100      	movs	r1, #0
 8004802:	4618      	mov	r0, r3
 8004804:	f004 ffc6 	bl	8009794 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]
 800480c:	e04a      	b.n	80048a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800480e:	7bfa      	ldrb	r2, [r7, #15]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	333d      	adds	r3, #61	; 0x3d
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004822:	7bfa      	ldrb	r2, [r7, #15]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	333c      	adds	r3, #60	; 0x3c
 8004832:	7bfa      	ldrb	r2, [r7, #15]
 8004834:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004836:	7bfa      	ldrb	r2, [r7, #15]
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	b298      	uxth	r0, r3
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	3342      	adds	r3, #66	; 0x42
 800484a:	4602      	mov	r2, r0
 800484c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800484e:	7bfa      	ldrb	r2, [r7, #15]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	333f      	adds	r3, #63	; 0x3f
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004862:	7bfa      	ldrb	r2, [r7, #15]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	3344      	adds	r3, #68	; 0x44
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004876:	7bfa      	ldrb	r2, [r7, #15]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	3348      	adds	r3, #72	; 0x48
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800488a:	7bfa      	ldrb	r2, [r7, #15]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	3350      	adds	r3, #80	; 0x50
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	3301      	adds	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d3af      	bcc.n	800480e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
 80048b2:	e044      	b.n	800493e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048b4:	7bfa      	ldrb	r2, [r7, #15]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048ca:	7bfa      	ldrb	r2, [r7, #15]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80048dc:	7bfa      	ldrb	r2, [r7, #15]
 80048de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048e0:	7bfa      	ldrb	r2, [r7, #15]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80048f2:	2200      	movs	r2, #0
 80048f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048f6:	7bfa      	ldrb	r2, [r7, #15]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800490c:	7bfa      	ldrb	r2, [r7, #15]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	3301      	adds	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	7bfa      	ldrb	r2, [r7, #15]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d3b5      	bcc.n	80048b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	687e      	ldr	r6, [r7, #4]
 8004950:	466d      	mov	r5, sp
 8004952:	f106 0410 	add.w	r4, r6, #16
 8004956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800495a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800495c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800495e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004962:	e885 0003 	stmia.w	r5, {r0, r1}
 8004966:	1d33      	adds	r3, r6, #4
 8004968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800496a:	6838      	ldr	r0, [r7, #0]
 800496c:	f004 ff5e 	bl	800982c <USB_DevInit>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e014      	b.n	80049ac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2b01      	cmp	r3, #1
 8004998:	d102      	bne.n	80049a0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f001 f8be 	bl	8005b1c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f005 ffcd 	bl	800a944 <USB_DevDisconnect>

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_PCD_Start+0x1c>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e020      	b.n	8004a12 <HAL_PCD_Start+0x5e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d109      	bne.n	80049f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d005      	beq.n	80049f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f004 fea9 	bl	8009750 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f005 ff7d 	bl	800a902 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a1a:	b590      	push	{r4, r7, lr}
 8004a1c:	b08d      	sub	sp, #52	; 0x34
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f006 f83b 	bl	800aaac <USB_GetMode>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 83ca 	bne.w	80051d2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f005 ff9f 	bl	800a986 <USB_ReadInterrupts>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 83c0 	beq.w	80051d0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f005 ff96 	bl	800a986 <USB_ReadInterrupts>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d107      	bne.n	8004a74 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f002 0202 	and.w	r2, r2, #2
 8004a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f005 ff84 	bl	800a986 <USB_ReadInterrupts>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d161      	bne.n	8004b4c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0210 	bic.w	r2, r2, #16
 8004a96:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f003 020f 	and.w	r2, r3, #15
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	0c5b      	lsrs	r3, r3, #17
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d124      	bne.n	8004b0e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d035      	beq.n	8004b3c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	091b      	lsrs	r3, r3, #4
 8004ad8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6a38      	ldr	r0, [r7, #32]
 8004ae4:	f005 fdbb 	bl	800a65e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004af4:	441a      	add	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b06:	441a      	add	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	619a      	str	r2, [r3, #24]
 8004b0c:	e016      	b.n	8004b3c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	0c5b      	lsrs	r3, r3, #17
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	2b06      	cmp	r3, #6
 8004b18:	d110      	bne.n	8004b3c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b20:	2208      	movs	r2, #8
 8004b22:	4619      	mov	r1, r3
 8004b24:	6a38      	ldr	r0, [r7, #32]
 8004b26:	f005 fd9a 	bl	800a65e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b36:	441a      	add	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0210 	orr.w	r2, r2, #16
 8004b4a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f005 ff18 	bl	800a986 <USB_ReadInterrupts>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b60:	d16e      	bne.n	8004c40 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f005 ff1e 	bl	800a9ac <USB_ReadDevAllOutEpInterrupt>
 8004b70:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004b72:	e062      	b.n	8004c3a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d057      	beq.n	8004c2e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f005 ff43 	bl	800aa14 <USB_ReadDevOutEPInterrupt>
 8004b8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2301      	movs	r3, #1
 8004baa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fe0a 	bl	80057c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00c      	beq.n	8004bd8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2308      	movs	r3, #8
 8004bce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 ff04 	bl	80059e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c26:	461a      	mov	r2, r3
 8004c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c2c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	3301      	adds	r3, #1
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d199      	bne.n	8004b74 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f005 fe9e 	bl	800a986 <USB_ReadInterrupts>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c54:	f040 80c0 	bne.w	8004dd8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f005 febf 	bl	800a9e0 <USB_ReadDevAllInEpInterrupt>
 8004c62:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004c68:	e0b2      	b.n	8004dd0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80a7 	beq.w	8004dc4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f005 fee5 	bl	800aa50 <USB_ReadDevInEPInterrupt>
 8004c86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d057      	beq.n	8004d42 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	2201      	movs	r2, #1
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69f9      	ldr	r1, [r7, #28]
 8004cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d132      	bne.n	8004d36 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3348      	adds	r3, #72	; 0x48
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4403      	add	r3, r0
 8004cf0:	3344      	adds	r3, #68	; 0x44
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4419      	add	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4403      	add	r3, r0
 8004d04:	3348      	adds	r3, #72	; 0x48
 8004d06:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d113      	bne.n	8004d36 <HAL_PCD_IRQHandler+0x31c>
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3350      	adds	r3, #80	; 0x50
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d108      	bne.n	8004d36 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2101      	movs	r1, #1
 8004d32:	f005 feed 	bl	800ab10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f009 fbca 	bl	800e4d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d58:	461a      	mov	r2, r3
 8004d5a:	2308      	movs	r3, #8
 8004d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d74:	461a      	mov	r2, r3
 8004d76:	2310      	movs	r3, #16
 8004d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	461a      	mov	r2, r3
 8004d92:	2340      	movs	r3, #64	; 0x40
 8004d94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	461a      	mov	r2, r3
 8004dae:	2302      	movs	r3, #2
 8004db0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fc75 	bl	80056ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	085b      	lsrs	r3, r3, #1
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f47f af49 	bne.w	8004c6a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f005 fdd2 	bl	800a986 <USB_ReadInterrupts>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dec:	d122      	bne.n	8004e34 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d108      	bne.n	8004e1e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e14:	2100      	movs	r1, #0
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f009 fdcc 	bl	800e9b4 <HAL_PCDEx_LPM_Callback>
 8004e1c:	e002      	b.n	8004e24 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f009 fbd0 	bl	800e5c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f005 fda4 	bl	800a986 <USB_ReadInterrupts>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e48:	d112      	bne.n	8004e70 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d102      	bne.n	8004e60 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f009 fb8c 	bl	800e578 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004e6e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f005 fd86 	bl	800a986 <USB_ReadInterrupts>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e84:	d121      	bne.n	8004eca <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004e94:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d111      	bne.n	8004ec4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	f003 020f 	and.w	r2, r3, #15
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004eba:	2101      	movs	r1, #1
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f009 fd79 	bl	800e9b4 <HAL_PCDEx_LPM_Callback>
 8004ec2:	e002      	b.n	8004eca <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f009 fb57 	bl	800e578 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f005 fd59 	bl	800a986 <USB_ReadInterrupts>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ede:	f040 80c7 	bne.w	8005070 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2110      	movs	r1, #16
 8004efc:	4618      	mov	r0, r3
 8004efe:	f004 fdf3 	bl	8009ae8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f02:	2300      	movs	r3, #0
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f06:	e056      	b.n	8004fb6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f14:	461a      	mov	r2, r3
 8004f16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f3a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f6e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004faa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d3a3      	bcc.n	8004f08 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004fd2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d016      	beq.n	800500a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fec:	f043 030b 	orr.w	r3, r3, #11
 8004ff0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005002:	f043 030b 	orr.w	r3, r3, #11
 8005006:	6453      	str	r3, [r2, #68]	; 0x44
 8005008:	e015      	b.n	8005036 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005018:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800501c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005020:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005030:	f043 030b 	orr.w	r3, r3, #11
 8005034:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005044:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005048:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800505a:	461a      	mov	r2, r3
 800505c:	f005 fd58 	bl	800ab10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800506e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f005 fc86 	bl	800a986 <USB_ReadInterrupts>
 800507a:	4603      	mov	r3, r0
 800507c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005084:	d124      	bne.n	80050d0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f005 fd1c 	bl	800aac8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f004 fd84 	bl	8009ba2 <USB_GetDevSpeed>
 800509a:	4603      	mov	r3, r0
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681c      	ldr	r4, [r3, #0]
 80050a6:	f000 fe93 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 80050aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	4620      	mov	r0, r4
 80050b6:	f004 faa9 	bl	800960c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f009 fa33 	bl	800e526 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80050ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f005 fc56 	bl	800a986 <USB_ReadInterrupts>
 80050da:	4603      	mov	r3, r0
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d10a      	bne.n	80050fa <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f009 fa10 	bl	800e50a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f002 0208 	and.w	r2, r2, #8
 80050f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f005 fc41 	bl	800a986 <USB_ReadInterrupts>
 8005104:	4603      	mov	r3, r0
 8005106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800510a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800510e:	d10f      	bne.n	8005130 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	b2db      	uxtb	r3, r3
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f009 fa72 	bl	800e604 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800512e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f005 fc26 	bl	800a986 <USB_ReadInterrupts>
 800513a:	4603      	mov	r3, r0
 800513c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005144:	d10f      	bne.n	8005166 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f009 fa45 	bl	800e5e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005164:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f005 fc0b 	bl	800a986 <USB_ReadInterrupts>
 8005170:	4603      	mov	r3, r0
 8005172:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517a:	d10a      	bne.n	8005192 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f009 fa53 	bl	800e628 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695a      	ldr	r2, [r3, #20]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f005 fbf5 	bl	800a986 <USB_ReadInterrupts>
 800519c:	4603      	mov	r3, r0
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d115      	bne.n	80051d2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f009 fa43 	bl	800e644 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	e000      	b.n	80051d2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80051d0:	bf00      	nop
    }
  }
}
 80051d2:	3734      	adds	r7, #52	; 0x34
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd90      	pop	{r4, r7, pc}

080051d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_PCD_SetAddress+0x1a>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e013      	b.n	800521a <HAL_PCD_SetAddress+0x42>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	4611      	mov	r1, r2
 800520a:	4618      	mov	r0, r3
 800520c:	f005 fb53 	bl	800a8b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	4608      	mov	r0, r1
 800522c:	4611      	mov	r1, r2
 800522e:	461a      	mov	r2, r3
 8005230:	4603      	mov	r3, r0
 8005232:	70fb      	strb	r3, [r7, #3]
 8005234:	460b      	mov	r3, r1
 8005236:	803b      	strh	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005244:	2b00      	cmp	r3, #0
 8005246:	da0f      	bge.n	8005268 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	f003 020f 	and.w	r2, r3, #15
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	3338      	adds	r3, #56	; 0x38
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	3304      	adds	r3, #4
 800525e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2201      	movs	r2, #1
 8005264:	705a      	strb	r2, [r3, #1]
 8005266:	e00f      	b.n	8005288 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	f003 020f 	and.w	r2, r3, #15
 800526e:	4613      	mov	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4413      	add	r3, r2
 800527e:	3304      	adds	r3, #4
 8005280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	b2da      	uxtb	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005294:	883a      	ldrh	r2, [r7, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	78ba      	ldrb	r2, [r7, #2]
 800529e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052b2:	78bb      	ldrb	r3, [r7, #2]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d102      	bne.n	80052be <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_PCD_EP_Open+0xaa>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e00e      	b.n	80052ea <HAL_PCD_EP_Open+0xc8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68f9      	ldr	r1, [r7, #12]
 80052da:	4618      	mov	r0, r3
 80052dc:	f004 fc86 	bl	8009bec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80052e8:	7afb      	ldrb	r3, [r7, #11]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005302:	2b00      	cmp	r3, #0
 8005304:	da0f      	bge.n	8005326 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	f003 020f 	and.w	r2, r3, #15
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	3338      	adds	r3, #56	; 0x38
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	3304      	adds	r3, #4
 800531c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	705a      	strb	r2, [r3, #1]
 8005324:	e00f      	b.n	8005346 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	f003 020f 	and.w	r2, r3, #15
 800532c:	4613      	mov	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	4413      	add	r3, r2
 800533c:	3304      	adds	r3, #4
 800533e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	b2da      	uxtb	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_PCD_EP_Close+0x6e>
 800535c:	2302      	movs	r3, #2
 800535e:	e00e      	b.n	800537e <HAL_PCD_EP_Close+0x8c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68f9      	ldr	r1, [r7, #12]
 800536e:	4618      	mov	r0, r3
 8005370:	f004 fcc4 	bl	8009cfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
 8005392:	460b      	mov	r3, r1
 8005394:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005396:	7afb      	ldrb	r3, [r7, #11]
 8005398:	f003 020f 	and.w	r2, r3, #15
 800539c:	4613      	mov	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	3304      	adds	r3, #4
 80053ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2200      	movs	r2, #0
 80053c0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2200      	movs	r2, #0
 80053c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053c8:	7afb      	ldrb	r3, [r7, #11]
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d102      	bne.n	80053e2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053e2:	7afb      	ldrb	r3, [r7, #11]
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d109      	bne.n	8005400 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	f004 ff9f 	bl	800a33c <USB_EP0StartXfer>
 80053fe:	e008      	b.n	8005412 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	6979      	ldr	r1, [r7, #20]
 800540e:	f004 fd51 	bl	8009eb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	f003 020f 	and.w	r2, r3, #15
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800543e:	681b      	ldr	r3, [r3, #0]
}
 8005440:	4618      	mov	r0, r3
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	460b      	mov	r3, r1
 800545a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800545c:	7afb      	ldrb	r3, [r7, #11]
 800545e:	f003 020f 	and.w	r2, r3, #15
 8005462:	4613      	mov	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	3338      	adds	r3, #56	; 0x38
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	3304      	adds	r3, #4
 8005472:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2200      	movs	r2, #0
 8005484:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2201      	movs	r2, #1
 800548a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800548c:	7afb      	ldrb	r3, [r7, #11]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	b2da      	uxtb	r2, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d102      	bne.n	80054a6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054a6:	7afb      	ldrb	r3, [r7, #11]
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	6979      	ldr	r1, [r7, #20]
 80054be:	f004 ff3d 	bl	800a33c <USB_EP0StartXfer>
 80054c2:	e008      	b.n	80054d6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	6979      	ldr	r1, [r7, #20]
 80054d2:	f004 fcef 	bl	8009eb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	f003 020f 	and.w	r2, r3, #15
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d901      	bls.n	80054fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e050      	b.n	80055a0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005502:	2b00      	cmp	r3, #0
 8005504:	da0f      	bge.n	8005526 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	f003 020f 	and.w	r2, r3, #15
 800550c:	4613      	mov	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	3338      	adds	r3, #56	; 0x38
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	3304      	adds	r3, #4
 800551c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	705a      	strb	r2, [r3, #1]
 8005524:	e00d      	b.n	8005542 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	4613      	mov	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4413      	add	r3, r2
 8005538:	3304      	adds	r3, #4
 800553a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	b2da      	uxtb	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_PCD_EP_SetStall+0x82>
 800555e:	2302      	movs	r3, #2
 8005560:	e01e      	b.n	80055a0 <HAL_PCD_EP_SetStall+0xc0>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68f9      	ldr	r1, [r7, #12]
 8005570:	4618      	mov	r0, r3
 8005572:	f005 f8cc 	bl	800a70e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	b2d9      	uxtb	r1, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005590:	461a      	mov	r2, r3
 8005592:	f005 fabd 	bl	800ab10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	f003 020f 	and.w	r2, r3, #15
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d901      	bls.n	80055c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e042      	b.n	800564c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	da0f      	bge.n	80055ee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	f003 020f 	and.w	r2, r3, #15
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	3338      	adds	r3, #56	; 0x38
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4413      	add	r3, r2
 80055e2:	3304      	adds	r3, #4
 80055e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	705a      	strb	r2, [r3, #1]
 80055ec:	e00f      	b.n	800560e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 020f 	and.w	r2, r3, #15
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	4413      	add	r3, r2
 8005604:	3304      	adds	r3, #4
 8005606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	b2da      	uxtb	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_PCD_EP_ClrStall+0x86>
 800562a:	2302      	movs	r3, #2
 800562c:	e00e      	b.n	800564c <HAL_PCD_EP_ClrStall+0xa4>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	4618      	mov	r0, r3
 800563e:	f005 f8d4 	bl	800a7ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_PCD_EP_Flush+0x1a>
 800566a:	2302      	movs	r3, #2
 800566c:	e01b      	b.n	80056a6 <HAL_PCD_EP_Flush+0x52>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8005676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800567a:	2b00      	cmp	r3, #0
 800567c:	da09      	bge.n	8005692 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f004 fa2c 	bl	8009ae8 <USB_FlushTxFifo>
 8005690:	e004      	b.n	800569c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f004 fa4a 	bl	8009b30 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b08a      	sub	sp, #40	; 0x28
 80056b2:	af02      	add	r7, sp, #8
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	3338      	adds	r3, #56	; 0x38
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	3304      	adds	r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d901      	bls.n	80056e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e06c      	b.n	80057c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d902      	bls.n	8005702 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3303      	adds	r3, #3
 8005706:	089b      	lsrs	r3, r3, #2
 8005708:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800570a:	e02b      	b.n	8005764 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	695a      	ldr	r2, [r3, #20]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	429a      	cmp	r2, r3
 8005720:	d902      	bls.n	8005728 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	3303      	adds	r3, #3
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68d9      	ldr	r1, [r3, #12]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005740:	b2db      	uxtb	r3, r3
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4603      	mov	r3, r0
 8005746:	6978      	ldr	r0, [r7, #20]
 8005748:	f004 ff4b 	bl	800a5e2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	441a      	add	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	699a      	ldr	r2, [r3, #24]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	441a      	add	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	b29b      	uxth	r3, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	429a      	cmp	r2, r3
 8005778:	d809      	bhi.n	800578e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005782:	429a      	cmp	r2, r3
 8005784:	d203      	bcs.n	800578e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1be      	bne.n	800570c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	429a      	cmp	r2, r3
 8005798:	d811      	bhi.n	80057be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	2201      	movs	r2, #1
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	43db      	mvns	r3, r3
 80057b4:	6939      	ldr	r1, [r7, #16]
 80057b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ba:	4013      	ands	r3, r2
 80057bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	333c      	adds	r3, #60	; 0x3c
 80057e0:	3304      	adds	r3, #4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	f040 80a0 	bne.w	8005940 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d015      	beq.n	8005836 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a72      	ldr	r2, [pc, #456]	; (80059d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800580e:	4293      	cmp	r3, r2
 8005810:	f240 80dd 	bls.w	80059ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80d7 	beq.w	80059ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582c:	461a      	mov	r2, r3
 800582e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005832:	6093      	str	r3, [r2, #8]
 8005834:	e0cb      	b.n	80059ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	461a      	mov	r2, r3
 800584e:	2320      	movs	r3, #32
 8005850:	6093      	str	r3, [r2, #8]
 8005852:	e0bc      	b.n	80059ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 80b7 	bne.w	80059ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a5d      	ldr	r2, [pc, #372]	; (80059d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d90f      	bls.n	8005888 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587e:	461a      	mov	r2, r3
 8005880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005884:	6093      	str	r3, [r2, #8]
 8005886:	e0a2      	b.n	80059ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800589a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	0159      	lsls	r1, r3, #5
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	440b      	add	r3, r1
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80058ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4403      	add	r3, r0
 80058be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80058c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058d6:	6819      	ldr	r1, [r3, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4403      	add	r3, r0
 80058e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4419      	add	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	4613      	mov	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4403      	add	r3, r0
 80058fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005900:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d114      	bne.n	8005932 <PCD_EP_OutXfrComplete_int+0x16a>
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d108      	bne.n	8005932 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800592a:	461a      	mov	r2, r3
 800592c:	2101      	movs	r1, #1
 800592e:	f005 f8ef 	bl	800ab10 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f008 fdb1 	bl	800e4a0 <HAL_PCD_DataOutStageCallback>
 800593e:	e046      	b.n	80059ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4a26      	ldr	r2, [pc, #152]	; (80059dc <PCD_EP_OutXfrComplete_int+0x214>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d124      	bne.n	8005992 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	461a      	mov	r2, r3
 8005960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005964:	6093      	str	r3, [r2, #8]
 8005966:	e032      	b.n	80059ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d008      	beq.n	8005984 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	461a      	mov	r2, r3
 8005980:	2320      	movs	r3, #32
 8005982:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f008 fd88 	bl	800e4a0 <HAL_PCD_DataOutStageCallback>
 8005990:	e01d      	b.n	80059ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d114      	bne.n	80059c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d108      	bne.n	80059c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059ba:	461a      	mov	r2, r3
 80059bc:	2100      	movs	r1, #0
 80059be:	f005 f8a7 	bl	800ab10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f008 fd69 	bl	800e4a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	4f54300a 	.word	0x4f54300a
 80059dc:	4f54310a 	.word	0x4f54310a

080059e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	333c      	adds	r3, #60	; 0x3c
 80059f8:	3304      	adds	r3, #4
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d90e      	bls.n	8005a34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d009      	beq.n	8005a34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f008 fd21 	bl	800e47c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d90c      	bls.n	8005a5c <PCD_EP_OutSetupPacket_int+0x7c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d108      	bne.n	8005a5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a54:	461a      	mov	r2, r3
 8005a56:	2101      	movs	r1, #1
 8005a58:	f005 f85a 	bl	800ab10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	4f54300a 	.word	0x4f54300a

08005a6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d107      	bne.n	8005a9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005a8a:	883b      	ldrh	r3, [r7, #0]
 8005a8c:	0419      	lsls	r1, r3, #16
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	629a      	str	r2, [r3, #40]	; 0x28
 8005a98:	e028      	b.n	8005aec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73fb      	strb	r3, [r7, #15]
 8005aac:	e00d      	b.n	8005aca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	3340      	adds	r3, #64	; 0x40
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	0c1b      	lsrs	r3, r3, #16
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
 8005aca:	7bfa      	ldrb	r2, [r7, #15]
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3ec      	bcc.n	8005aae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ad4:	883b      	ldrh	r3, [r7, #0]
 8005ad6:	0418      	lsls	r0, r3, #16
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6819      	ldr	r1, [r3, #0]
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	4302      	orrs	r2, r0
 8005ae4:	3340      	adds	r3, #64	; 0x40
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	887a      	ldrh	r2, [r7, #2]
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	f043 0303 	orr.w	r3, r3, #3
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	4b20      	ldr	r3, [pc, #128]	; (8005bf4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	4a1f      	ldr	r2, [pc, #124]	; (8005bf4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b7e:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <HAL_PWREx_EnableOverDrive+0x94>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b90:	f7fc fdea 	bl	8002768 <HAL_GetTick>
 8005b94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b96:	e009      	b.n	8005bac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b98:	f7fc fde6 	bl	8002768 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba6:	d901      	bls.n	8005bac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e01f      	b.n	8005bec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005bac:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb8:	d1ee      	bne.n	8005b98 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005bba:	4b11      	ldr	r3, [pc, #68]	; (8005c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bc0:	f7fc fdd2 	bl	8002768 <HAL_GetTick>
 8005bc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bc6:	e009      	b.n	8005bdc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005bc8:	f7fc fdce 	bl	8002768 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd6:	d901      	bls.n	8005bdc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e007      	b.n	8005bec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be8:	d1ee      	bne.n	8005bc8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	420e0040 	.word	0x420e0040
 8005bfc:	40007000 	.word	0x40007000
 8005c00:	420e0044 	.word	0x420e0044

08005c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0cc      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c18:	4b68      	ldr	r3, [pc, #416]	; (8005dbc <HAL_RCC_ClockConfig+0x1b8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d90c      	bls.n	8005c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c26:	4b65      	ldr	r3, [pc, #404]	; (8005dbc <HAL_RCC_ClockConfig+0x1b8>)
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	4b63      	ldr	r3, [pc, #396]	; (8005dbc <HAL_RCC_ClockConfig+0x1b8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0b8      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d020      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c58:	4b59      	ldr	r3, [pc, #356]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	4a58      	ldr	r2, [pc, #352]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c70:	4b53      	ldr	r3, [pc, #332]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	4a52      	ldr	r2, [pc, #328]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c7c:	4b50      	ldr	r3, [pc, #320]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	494d      	ldr	r1, [pc, #308]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d044      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d107      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ca2:	4b47      	ldr	r3, [pc, #284]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d119      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e07f      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d003      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc2:	4b3f      	ldr	r3, [pc, #252]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e06f      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd2:	4b3b      	ldr	r3, [pc, #236]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e067      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ce2:	4b37      	ldr	r3, [pc, #220]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f023 0203 	bic.w	r2, r3, #3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	4934      	ldr	r1, [pc, #208]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cf4:	f7fc fd38 	bl	8002768 <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cfc:	f7fc fd34 	bl	8002768 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e04f      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d12:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 020c 	and.w	r2, r3, #12
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d1eb      	bne.n	8005cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d24:	4b25      	ldr	r3, [pc, #148]	; (8005dbc <HAL_RCC_ClockConfig+0x1b8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d20c      	bcs.n	8005d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d32:	4b22      	ldr	r3, [pc, #136]	; (8005dbc <HAL_RCC_ClockConfig+0x1b8>)
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3a:	4b20      	ldr	r3, [pc, #128]	; (8005dbc <HAL_RCC_ClockConfig+0x1b8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d001      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e032      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d58:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4916      	ldr	r1, [pc, #88]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d76:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	490e      	ldr	r1, [pc, #56]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d8a:	f000 fb6b 	bl	8006464 <HAL_RCC_GetSysClockFreq>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	490a      	ldr	r1, [pc, #40]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d9c:	5ccb      	ldrb	r3, [r1, r3]
 8005d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005da2:	4a09      	ldr	r2, [pc, #36]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005da6:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <HAL_RCC_ClockConfig+0x1c8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fc fc98 	bl	80026e0 <HAL_InitTick>

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40023c00 	.word	0x40023c00
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	0800eb8c 	.word	0x0800eb8c
 8005dc8:	20000000 	.word	0x20000000
 8005dcc:	20000004 	.word	0x20000004

08005dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000000 	.word	0x20000000

08005de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dec:	f7ff fff0 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	0a9b      	lsrs	r3, r3, #10
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	4903      	ldr	r1, [pc, #12]	; (8005e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dfe:	5ccb      	ldrb	r3, [r1, r3]
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	0800eb9c 	.word	0x0800eb9c

08005e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08c      	sub	sp, #48	; 0x30
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d010      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005e48:	4b6f      	ldr	r3, [pc, #444]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e4e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	496c      	ldr	r1, [pc, #432]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005e66:	2301      	movs	r3, #1
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d010      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005e76:	4b64      	ldr	r3, [pc, #400]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e7c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	4960      	ldr	r1, [pc, #384]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005e94:	2301      	movs	r3, #1
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d017      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ea4:	4b58      	ldr	r3, [pc, #352]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	4955      	ldr	r1, [pc, #340]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec2:	d101      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d017      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ee0:	4b49      	ldr	r3, [pc, #292]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	4946      	ldr	r1, [pc, #280]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005efe:	d101      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005f00:	2301      	movs	r3, #1
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 808a 	beq.w	8006032 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	4b39      	ldr	r3, [pc, #228]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	4a38      	ldr	r2, [pc, #224]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f2e:	4b36      	ldr	r3, [pc, #216]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f36:	60bb      	str	r3, [r7, #8]
 8005f38:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005f3a:	4b34      	ldr	r3, [pc, #208]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a33      	ldr	r2, [pc, #204]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f46:	f7fc fc0f 	bl	8002768 <HAL_GetTick>
 8005f4a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f4e:	f7fc fc0b 	bl	8002768 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e278      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f60:	4b2a      	ldr	r3, [pc, #168]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f6c:	4b26      	ldr	r3, [pc, #152]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f74:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d02f      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f84:	6a3a      	ldr	r2, [r7, #32]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d028      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f8a:	4b1f      	ldr	r3, [pc, #124]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f92:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f94:	4b1e      	ldr	r3, [pc, #120]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f9a:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005fa0:	4a19      	ldr	r2, [pc, #100]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fa6:	4b18      	ldr	r3, [pc, #96]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d114      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005fb2:	f7fc fbd9 	bl	8002768 <HAL_GetTick>
 8005fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb8:	e00a      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fba:	f7fc fbd5 	bl	8002768 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e240      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0ee      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fe8:	d114      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005fea:	4b07      	ldr	r3, [pc, #28]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffe:	4902      	ldr	r1, [pc, #8]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006000:	4313      	orrs	r3, r2
 8006002:	608b      	str	r3, [r1, #8]
 8006004:	e00c      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006006:	bf00      	nop
 8006008:	40023800 	.word	0x40023800
 800600c:	40007000 	.word	0x40007000
 8006010:	42470e40 	.word	0x42470e40
 8006014:	4b4a      	ldr	r3, [pc, #296]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4a49      	ldr	r2, [pc, #292]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800601a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800601e:	6093      	str	r3, [r2, #8]
 8006020:	4b47      	ldr	r3, [pc, #284]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800602c:	4944      	ldr	r1, [pc, #272]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800602e:	4313      	orrs	r3, r2
 8006030:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006044:	4b3f      	ldr	r3, [pc, #252]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006046:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006054:	4b3a      	ldr	r3, [pc, #232]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800605a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006062:	4937      	ldr	r1, [pc, #220]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006076:	4b32      	ldr	r3, [pc, #200]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800607c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006084:	492e      	ldr	r1, [pc, #184]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006094:	2b00      	cmp	r3, #0
 8006096:	d011      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006098:	4b29      	ldr	r3, [pc, #164]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800609a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800609e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a6:	4926      	ldr	r1, [pc, #152]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b6:	d101      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80060b8:	2301      	movs	r3, #1
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80060ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	491a      	ldr	r1, [pc, #104]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d011      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80060ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060f0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f8:	4911      	ldr	r1, [pc, #68]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006108:	d101      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800610a:	2301      	movs	r3, #1
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d005      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611c:	f040 80ff 	bne.w	800631e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006126:	f7fc fb1f 	bl	8002768 <HAL_GetTick>
 800612a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800612c:	e00e      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800612e:	f7fc fb1b 	bl	8002768 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d907      	bls.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e188      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006140:	40023800 	.word	0x40023800
 8006144:	424711e0 	.word	0x424711e0
 8006148:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800614c:	4b7e      	ldr	r3, [pc, #504]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1ea      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006174:	2b00      	cmp	r3, #0
 8006176:	d028      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d124      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006180:	4b71      	ldr	r3, [pc, #452]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006186:	0c1b      	lsrs	r3, r3, #16
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	3301      	adds	r3, #1
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006192:	4b6d      	ldr	r3, [pc, #436]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006198:	0e1b      	lsrs	r3, r3, #24
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	019b      	lsls	r3, r3, #6
 80061aa:	431a      	orrs	r2, r3
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	3b01      	subs	r3, #1
 80061b2:	041b      	lsls	r3, r3, #16
 80061b4:	431a      	orrs	r2, r3
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	061b      	lsls	r3, r3, #24
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	071b      	lsls	r3, r3, #28
 80061c2:	4961      	ldr	r1, [pc, #388]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d004      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061de:	d00a      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d035      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f4:	d130      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80061f6:	4b54      	ldr	r3, [pc, #336]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	3301      	adds	r3, #1
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006208:	4b4f      	ldr	r3, [pc, #316]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620e:	0f1b      	lsrs	r3, r3, #28
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	019b      	lsls	r3, r3, #6
 8006220:	431a      	orrs	r2, r3
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	3b01      	subs	r3, #1
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	061b      	lsls	r3, r3, #24
 8006232:	431a      	orrs	r2, r3
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	071b      	lsls	r3, r3, #28
 8006238:	4943      	ldr	r1, [pc, #268]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006240:	4b41      	ldr	r3, [pc, #260]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006246:	f023 021f 	bic.w	r2, r3, #31
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	3b01      	subs	r3, #1
 8006250:	493d      	ldr	r1, [pc, #244]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006260:	2b00      	cmp	r3, #0
 8006262:	d029      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800626c:	d124      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800626e:	4b36      	ldr	r3, [pc, #216]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006274:	0c1b      	lsrs	r3, r3, #16
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	3301      	adds	r3, #1
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006280:	4b31      	ldr	r3, [pc, #196]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006286:	0f1b      	lsrs	r3, r3, #28
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	019b      	lsls	r3, r3, #6
 8006298:	431a      	orrs	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	3b01      	subs	r3, #1
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	431a      	orrs	r2, r3
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	061b      	lsls	r3, r3, #24
 80062aa:	431a      	orrs	r2, r3
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	071b      	lsls	r3, r3, #28
 80062b0:	4925      	ldr	r1, [pc, #148]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d016      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	019b      	lsls	r3, r3, #6
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	085b      	lsrs	r3, r3, #1
 80062d6:	3b01      	subs	r3, #1
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	061b      	lsls	r3, r3, #24
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	071b      	lsls	r3, r3, #28
 80062ea:	4917      	ldr	r1, [pc, #92]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062f2:	4b16      	ldr	r3, [pc, #88]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062f8:	f7fc fa36 	bl	8002768 <HAL_GetTick>
 80062fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062fe:	e008      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006300:	f7fc fa32 	bl	8002768 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e09f      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006312:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	2b01      	cmp	r3, #1
 8006322:	f040 8095 	bne.w	8006450 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006326:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800632c:	f7fc fa1c 	bl	8002768 <HAL_GetTick>
 8006330:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006332:	e00f      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006334:	f7fc fa18 	bl	8002768 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d908      	bls.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e085      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006346:	bf00      	nop
 8006348:	40023800 	.word	0x40023800
 800634c:	42470068 	.word	0x42470068
 8006350:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006354:	4b41      	ldr	r3, [pc, #260]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800635c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006360:	d0e8      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	2b00      	cmp	r3, #0
 8006374:	d009      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800637e:	2b00      	cmp	r3, #0
 8006380:	d02b      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	2b00      	cmp	r3, #0
 8006388:	d127      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800638a:	4b34      	ldr	r3, [pc, #208]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800638c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006390:	0c1b      	lsrs	r3, r3, #16
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	3301      	adds	r3, #1
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	019b      	lsls	r3, r3, #6
 80063a6:	431a      	orrs	r2, r3
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	3b01      	subs	r3, #1
 80063ae:	041b      	lsls	r3, r3, #16
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	061b      	lsls	r3, r3, #24
 80063b8:	4928      	ldr	r1, [pc, #160]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063c0:	4b26      	ldr	r3, [pc, #152]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	3b01      	subs	r3, #1
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	4922      	ldr	r1, [pc, #136]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01d      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ee:	d118      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063f0:	4b1a      	ldr	r3, [pc, #104]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f6:	0e1b      	lsrs	r3, r3, #24
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	019b      	lsls	r3, r3, #6
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	3b01      	subs	r3, #1
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	431a      	orrs	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	061b      	lsls	r3, r3, #24
 800641a:	4910      	ldr	r1, [pc, #64]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006424:	2201      	movs	r2, #1
 8006426:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006428:	f7fc f99e 	bl	8002768 <HAL_GetTick>
 800642c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006430:	f7fc f99a 	bl	8002768 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e007      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006442:	4b06      	ldr	r3, [pc, #24]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800644a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800644e:	d1ef      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3730      	adds	r7, #48	; 0x30
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800
 8006460:	42470070 	.word	0x42470070

08006464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006468:	b088      	sub	sp, #32
 800646a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006480:	4bce      	ldr	r3, [pc, #824]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 030c 	and.w	r3, r3, #12
 8006488:	2b0c      	cmp	r3, #12
 800648a:	f200 818d 	bhi.w	80067a8 <HAL_RCC_GetSysClockFreq+0x344>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <HAL_RCC_GetSysClockFreq+0x30>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064c9 	.word	0x080064c9
 8006498:	080067a9 	.word	0x080067a9
 800649c:	080067a9 	.word	0x080067a9
 80064a0:	080067a9 	.word	0x080067a9
 80064a4:	080064cf 	.word	0x080064cf
 80064a8:	080067a9 	.word	0x080067a9
 80064ac:	080067a9 	.word	0x080067a9
 80064b0:	080067a9 	.word	0x080067a9
 80064b4:	080064d5 	.word	0x080064d5
 80064b8:	080067a9 	.word	0x080067a9
 80064bc:	080067a9 	.word	0x080067a9
 80064c0:	080067a9 	.word	0x080067a9
 80064c4:	08006649 	.word	0x08006649
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064c8:	4bbd      	ldr	r3, [pc, #756]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80064ca:	61bb      	str	r3, [r7, #24]
       break;
 80064cc:	e16f      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064ce:	4bbd      	ldr	r3, [pc, #756]	; (80067c4 <HAL_RCC_GetSysClockFreq+0x360>)
 80064d0:	61bb      	str	r3, [r7, #24]
      break;
 80064d2:	e16c      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064d4:	4bb9      	ldr	r3, [pc, #740]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064dc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064de:	4bb7      	ldr	r3, [pc, #732]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d053      	beq.n	8006592 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ea:	4bb4      	ldr	r3, [pc, #720]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	099b      	lsrs	r3, r3, #6
 80064f0:	461a      	mov	r2, r3
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064fa:	f04f 0100 	mov.w	r1, #0
 80064fe:	ea02 0400 	and.w	r4, r2, r0
 8006502:	603c      	str	r4, [r7, #0]
 8006504:	400b      	ands	r3, r1
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	e9d7 4500 	ldrd	r4, r5, [r7]
 800650c:	4620      	mov	r0, r4
 800650e:	4629      	mov	r1, r5
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	014b      	lsls	r3, r1, #5
 800651a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800651e:	0142      	lsls	r2, r0, #5
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	4623      	mov	r3, r4
 8006526:	1ac0      	subs	r0, r0, r3
 8006528:	462b      	mov	r3, r5
 800652a:	eb61 0103 	sbc.w	r1, r1, r3
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	018b      	lsls	r3, r1, #6
 8006538:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800653c:	0182      	lsls	r2, r0, #6
 800653e:	1a12      	subs	r2, r2, r0
 8006540:	eb63 0301 	sbc.w	r3, r3, r1
 8006544:	f04f 0000 	mov.w	r0, #0
 8006548:	f04f 0100 	mov.w	r1, #0
 800654c:	00d9      	lsls	r1, r3, #3
 800654e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006552:	00d0      	lsls	r0, r2, #3
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4621      	mov	r1, r4
 800655a:	1852      	adds	r2, r2, r1
 800655c:	4629      	mov	r1, r5
 800655e:	eb43 0101 	adc.w	r1, r3, r1
 8006562:	460b      	mov	r3, r1
 8006564:	f04f 0000 	mov.w	r0, #0
 8006568:	f04f 0100 	mov.w	r1, #0
 800656c:	0259      	lsls	r1, r3, #9
 800656e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006572:	0250      	lsls	r0, r2, #9
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4610      	mov	r0, r2
 800657a:	4619      	mov	r1, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	461a      	mov	r2, r3
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	f7f9 fe3e 	bl	8000204 <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4613      	mov	r3, r2
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e04c      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006592:	4b8a      	ldr	r3, [pc, #552]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	099b      	lsrs	r3, r3, #6
 8006598:	461a      	mov	r2, r3
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065a2:	f04f 0100 	mov.w	r1, #0
 80065a6:	ea02 0a00 	and.w	sl, r2, r0
 80065aa:	ea03 0b01 	and.w	fp, r3, r1
 80065ae:	4650      	mov	r0, sl
 80065b0:	4659      	mov	r1, fp
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	014b      	lsls	r3, r1, #5
 80065bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065c0:	0142      	lsls	r2, r0, #5
 80065c2:	4610      	mov	r0, r2
 80065c4:	4619      	mov	r1, r3
 80065c6:	ebb0 000a 	subs.w	r0, r0, sl
 80065ca:	eb61 010b 	sbc.w	r1, r1, fp
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	018b      	lsls	r3, r1, #6
 80065d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065dc:	0182      	lsls	r2, r0, #6
 80065de:	1a12      	subs	r2, r2, r0
 80065e0:	eb63 0301 	sbc.w	r3, r3, r1
 80065e4:	f04f 0000 	mov.w	r0, #0
 80065e8:	f04f 0100 	mov.w	r1, #0
 80065ec:	00d9      	lsls	r1, r3, #3
 80065ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065f2:	00d0      	lsls	r0, r2, #3
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	eb12 020a 	adds.w	r2, r2, sl
 80065fc:	eb43 030b 	adc.w	r3, r3, fp
 8006600:	f04f 0000 	mov.w	r0, #0
 8006604:	f04f 0100 	mov.w	r1, #0
 8006608:	0299      	lsls	r1, r3, #10
 800660a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800660e:	0290      	lsls	r0, r2, #10
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4610      	mov	r0, r2
 8006616:	4619      	mov	r1, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	461a      	mov	r2, r3
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	f7f9 fdf0 	bl	8000204 <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4613      	mov	r3, r2
 800662a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800662c:	4b63      	ldr	r3, [pc, #396]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	3301      	adds	r3, #1
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	fbb2 f3f3 	udiv	r3, r2, r3
 8006644:	61bb      	str	r3, [r7, #24]
      break;
 8006646:	e0b2      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006648:	4b5c      	ldr	r3, [pc, #368]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006650:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006652:	4b5a      	ldr	r3, [pc, #360]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d04d      	beq.n	80066fa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800665e:	4b57      	ldr	r3, [pc, #348]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	099b      	lsrs	r3, r3, #6
 8006664:	461a      	mov	r2, r3
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800666e:	f04f 0100 	mov.w	r1, #0
 8006672:	ea02 0800 	and.w	r8, r2, r0
 8006676:	ea03 0901 	and.w	r9, r3, r1
 800667a:	4640      	mov	r0, r8
 800667c:	4649      	mov	r1, r9
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	014b      	lsls	r3, r1, #5
 8006688:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800668c:	0142      	lsls	r2, r0, #5
 800668e:	4610      	mov	r0, r2
 8006690:	4619      	mov	r1, r3
 8006692:	ebb0 0008 	subs.w	r0, r0, r8
 8006696:	eb61 0109 	sbc.w	r1, r1, r9
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	f04f 0300 	mov.w	r3, #0
 80066a2:	018b      	lsls	r3, r1, #6
 80066a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80066a8:	0182      	lsls	r2, r0, #6
 80066aa:	1a12      	subs	r2, r2, r0
 80066ac:	eb63 0301 	sbc.w	r3, r3, r1
 80066b0:	f04f 0000 	mov.w	r0, #0
 80066b4:	f04f 0100 	mov.w	r1, #0
 80066b8:	00d9      	lsls	r1, r3, #3
 80066ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066be:	00d0      	lsls	r0, r2, #3
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	eb12 0208 	adds.w	r2, r2, r8
 80066c8:	eb43 0309 	adc.w	r3, r3, r9
 80066cc:	f04f 0000 	mov.w	r0, #0
 80066d0:	f04f 0100 	mov.w	r1, #0
 80066d4:	0259      	lsls	r1, r3, #9
 80066d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80066da:	0250      	lsls	r0, r2, #9
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4610      	mov	r0, r2
 80066e2:	4619      	mov	r1, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	461a      	mov	r2, r3
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	f7f9 fd8a 	bl	8000204 <__aeabi_uldivmod>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4613      	mov	r3, r2
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	e04a      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066fa:	4b30      	ldr	r3, [pc, #192]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	099b      	lsrs	r3, r3, #6
 8006700:	461a      	mov	r2, r3
 8006702:	f04f 0300 	mov.w	r3, #0
 8006706:	f240 10ff 	movw	r0, #511	; 0x1ff
 800670a:	f04f 0100 	mov.w	r1, #0
 800670e:	ea02 0400 	and.w	r4, r2, r0
 8006712:	ea03 0501 	and.w	r5, r3, r1
 8006716:	4620      	mov	r0, r4
 8006718:	4629      	mov	r1, r5
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	014b      	lsls	r3, r1, #5
 8006724:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006728:	0142      	lsls	r2, r0, #5
 800672a:	4610      	mov	r0, r2
 800672c:	4619      	mov	r1, r3
 800672e:	1b00      	subs	r0, r0, r4
 8006730:	eb61 0105 	sbc.w	r1, r1, r5
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	018b      	lsls	r3, r1, #6
 800673e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006742:	0182      	lsls	r2, r0, #6
 8006744:	1a12      	subs	r2, r2, r0
 8006746:	eb63 0301 	sbc.w	r3, r3, r1
 800674a:	f04f 0000 	mov.w	r0, #0
 800674e:	f04f 0100 	mov.w	r1, #0
 8006752:	00d9      	lsls	r1, r3, #3
 8006754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006758:	00d0      	lsls	r0, r2, #3
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	1912      	adds	r2, r2, r4
 8006760:	eb45 0303 	adc.w	r3, r5, r3
 8006764:	f04f 0000 	mov.w	r0, #0
 8006768:	f04f 0100 	mov.w	r1, #0
 800676c:	0299      	lsls	r1, r3, #10
 800676e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006772:	0290      	lsls	r0, r2, #10
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4610      	mov	r0, r2
 800677a:	4619      	mov	r1, r3
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	461a      	mov	r2, r3
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	f7f9 fd3e 	bl	8000204 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4613      	mov	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006790:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <HAL_RCC_GetSysClockFreq+0x358>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	0f1b      	lsrs	r3, r3, #28
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a4:	61bb      	str	r3, [r7, #24]
      break;
 80067a6:	e002      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80067aa:	61bb      	str	r3, [r7, #24]
      break;
 80067ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067ae:	69bb      	ldr	r3, [r7, #24]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3720      	adds	r7, #32
 80067b4:	46bd      	mov	sp, r7
 80067b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ba:	bf00      	nop
 80067bc:	40023800 	.word	0x40023800
 80067c0:	00f42400 	.word	0x00f42400
 80067c4:	007a1200 	.word	0x007a1200

080067c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e28d      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8083 	beq.w	80068ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80067e8:	4b94      	ldr	r3, [pc, #592]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 030c 	and.w	r3, r3, #12
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d019      	beq.n	8006828 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80067f4:	4b91      	ldr	r3, [pc, #580]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d106      	bne.n	800680e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006800:	4b8e      	ldr	r3, [pc, #568]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800680c:	d00c      	beq.n	8006828 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680e:	4b8b      	ldr	r3, [pc, #556]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006816:	2b0c      	cmp	r3, #12
 8006818:	d112      	bne.n	8006840 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800681a:	4b88      	ldr	r3, [pc, #544]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006826:	d10b      	bne.n	8006840 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006828:	4b84      	ldr	r3, [pc, #528]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d05b      	beq.n	80068ec <HAL_RCC_OscConfig+0x124>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d157      	bne.n	80068ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e25a      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006848:	d106      	bne.n	8006858 <HAL_RCC_OscConfig+0x90>
 800684a:	4b7c      	ldr	r3, [pc, #496]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a7b      	ldr	r2, [pc, #492]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e01d      	b.n	8006894 <HAL_RCC_OscConfig+0xcc>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006860:	d10c      	bne.n	800687c <HAL_RCC_OscConfig+0xb4>
 8006862:	4b76      	ldr	r3, [pc, #472]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a75      	ldr	r2, [pc, #468]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4b73      	ldr	r3, [pc, #460]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a72      	ldr	r2, [pc, #456]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e00b      	b.n	8006894 <HAL_RCC_OscConfig+0xcc>
 800687c:	4b6f      	ldr	r3, [pc, #444]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a6e      	ldr	r2, [pc, #440]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	4b6c      	ldr	r3, [pc, #432]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a6b      	ldr	r2, [pc, #428]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 800688e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d013      	beq.n	80068c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689c:	f7fb ff64 	bl	8002768 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068a4:	f7fb ff60 	bl	8002768 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	; 0x64
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e21f      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b6:	4b61      	ldr	r3, [pc, #388]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0xdc>
 80068c2:	e014      	b.n	80068ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fb ff50 	bl	8002768 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068cc:	f7fb ff4c 	bl	8002768 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b64      	cmp	r3, #100	; 0x64
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e20b      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068de:	4b57      	ldr	r3, [pc, #348]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0x104>
 80068ea:	e000      	b.n	80068ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d06f      	beq.n	80069da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80068fa:	4b50      	ldr	r3, [pc, #320]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	2b00      	cmp	r3, #0
 8006904:	d017      	beq.n	8006936 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006906:	4b4d      	ldr	r3, [pc, #308]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800690e:	2b08      	cmp	r3, #8
 8006910:	d105      	bne.n	800691e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006912:	4b4a      	ldr	r3, [pc, #296]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800691e:	4b47      	ldr	r3, [pc, #284]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006926:	2b0c      	cmp	r3, #12
 8006928:	d11c      	bne.n	8006964 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800692a:	4b44      	ldr	r3, [pc, #272]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d116      	bne.n	8006964 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006936:	4b41      	ldr	r3, [pc, #260]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <HAL_RCC_OscConfig+0x186>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d001      	beq.n	800694e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e1d3      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800694e:	4b3b      	ldr	r3, [pc, #236]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	4937      	ldr	r1, [pc, #220]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 800695e:	4313      	orrs	r3, r2
 8006960:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006962:	e03a      	b.n	80069da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d020      	beq.n	80069ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800696c:	4b34      	ldr	r3, [pc, #208]	; (8006a40 <HAL_RCC_OscConfig+0x278>)
 800696e:	2201      	movs	r2, #1
 8006970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006972:	f7fb fef9 	bl	8002768 <HAL_GetTick>
 8006976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800697a:	f7fb fef5 	bl	8002768 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e1b4      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698c:	4b2b      	ldr	r3, [pc, #172]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0f0      	beq.n	800697a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006998:	4b28      	ldr	r3, [pc, #160]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	4925      	ldr	r1, [pc, #148]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	600b      	str	r3, [r1, #0]
 80069ac:	e015      	b.n	80069da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ae:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <HAL_RCC_OscConfig+0x278>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b4:	f7fb fed8 	bl	8002768 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069bc:	f7fb fed4 	bl	8002768 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e193      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ce:	4b1b      	ldr	r3, [pc, #108]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f0      	bne.n	80069bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d036      	beq.n	8006a54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d016      	beq.n	8006a1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ee:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <HAL_RCC_OscConfig+0x27c>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f4:	f7fb feb8 	bl	8002768 <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fa:	e008      	b.n	8006a0e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069fc:	f7fb feb4 	bl	8002768 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e173      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <HAL_RCC_OscConfig+0x274>)
 8006a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0f0      	beq.n	80069fc <HAL_RCC_OscConfig+0x234>
 8006a1a:	e01b      	b.n	8006a54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a1c:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <HAL_RCC_OscConfig+0x27c>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a22:	f7fb fea1 	bl	8002768 <HAL_GetTick>
 8006a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a28:	e00e      	b.n	8006a48 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a2a:	f7fb fe9d 	bl	8002768 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d907      	bls.n	8006a48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e15c      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	42470000 	.word	0x42470000
 8006a44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a48:	4b8a      	ldr	r3, [pc, #552]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1ea      	bne.n	8006a2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8097 	beq.w	8006b90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a66:	4b83      	ldr	r3, [pc, #524]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10f      	bne.n	8006a92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	4b7f      	ldr	r3, [pc, #508]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	4a7e      	ldr	r2, [pc, #504]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a80:	6413      	str	r3, [r2, #64]	; 0x40
 8006a82:	4b7c      	ldr	r3, [pc, #496]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a92:	4b79      	ldr	r3, [pc, #484]	; (8006c78 <HAL_RCC_OscConfig+0x4b0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d118      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a9e:	4b76      	ldr	r3, [pc, #472]	; (8006c78 <HAL_RCC_OscConfig+0x4b0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a75      	ldr	r2, [pc, #468]	; (8006c78 <HAL_RCC_OscConfig+0x4b0>)
 8006aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aaa:	f7fb fe5d 	bl	8002768 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ab2:	f7fb fe59 	bl	8002768 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e118      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac4:	4b6c      	ldr	r3, [pc, #432]	; (8006c78 <HAL_RCC_OscConfig+0x4b0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0f0      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d106      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x31e>
 8006ad8:	4b66      	ldr	r3, [pc, #408]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	4a65      	ldr	r2, [pc, #404]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae4:	e01c      	b.n	8006b20 <HAL_RCC_OscConfig+0x358>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	d10c      	bne.n	8006b08 <HAL_RCC_OscConfig+0x340>
 8006aee:	4b61      	ldr	r3, [pc, #388]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af2:	4a60      	ldr	r2, [pc, #384]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006af4:	f043 0304 	orr.w	r3, r3, #4
 8006af8:	6713      	str	r3, [r2, #112]	; 0x70
 8006afa:	4b5e      	ldr	r3, [pc, #376]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	4a5d      	ldr	r2, [pc, #372]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b00:	f043 0301 	orr.w	r3, r3, #1
 8006b04:	6713      	str	r3, [r2, #112]	; 0x70
 8006b06:	e00b      	b.n	8006b20 <HAL_RCC_OscConfig+0x358>
 8006b08:	4b5a      	ldr	r3, [pc, #360]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0c:	4a59      	ldr	r2, [pc, #356]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b0e:	f023 0301 	bic.w	r3, r3, #1
 8006b12:	6713      	str	r3, [r2, #112]	; 0x70
 8006b14:	4b57      	ldr	r3, [pc, #348]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b18:	4a56      	ldr	r2, [pc, #344]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b1a:	f023 0304 	bic.w	r3, r3, #4
 8006b1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d015      	beq.n	8006b54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b28:	f7fb fe1e 	bl	8002768 <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2e:	e00a      	b.n	8006b46 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b30:	f7fb fe1a 	bl	8002768 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e0d7      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b46:	4b4b      	ldr	r3, [pc, #300]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0ee      	beq.n	8006b30 <HAL_RCC_OscConfig+0x368>
 8006b52:	e014      	b.n	8006b7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b54:	f7fb fe08 	bl	8002768 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b5a:	e00a      	b.n	8006b72 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b5c:	f7fb fe04 	bl	8002768 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e0c1      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b72:	4b40      	ldr	r3, [pc, #256]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1ee      	bne.n	8006b5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d105      	bne.n	8006b90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b84:	4b3b      	ldr	r3, [pc, #236]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	4a3a      	ldr	r2, [pc, #232]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 80ad 	beq.w	8006cf4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b9a:	4b36      	ldr	r3, [pc, #216]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 030c 	and.w	r3, r3, #12
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d060      	beq.n	8006c68 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d145      	bne.n	8006c3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bae:	4b33      	ldr	r3, [pc, #204]	; (8006c7c <HAL_RCC_OscConfig+0x4b4>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fb fdd8 	bl	8002768 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bbc:	f7fb fdd4 	bl	8002768 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e093      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bce:	4b29      	ldr	r3, [pc, #164]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f0      	bne.n	8006bbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69da      	ldr	r2, [r3, #28]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	019b      	lsls	r3, r3, #6
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	041b      	lsls	r3, r3, #16
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	061b      	lsls	r3, r3, #24
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	071b      	lsls	r3, r3, #28
 8006c06:	491b      	ldr	r1, [pc, #108]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c0c:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <HAL_RCC_OscConfig+0x4b4>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c12:	f7fb fda9 	bl	8002768 <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c1a:	f7fb fda5 	bl	8002768 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e064      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c2c:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCC_OscConfig+0x452>
 8006c38:	e05c      	b.n	8006cf4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c3a:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <HAL_RCC_OscConfig+0x4b4>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7fb fd92 	bl	8002768 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c48:	f7fb fd8e 	bl	8002768 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e04d      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5a:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <HAL_RCC_OscConfig+0x4ac>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <HAL_RCC_OscConfig+0x480>
 8006c66:	e045      	b.n	8006cf4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d107      	bne.n	8006c80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e040      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
 8006c74:	40023800 	.word	0x40023800
 8006c78:	40007000 	.word	0x40007000
 8006c7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c80:	4b1f      	ldr	r3, [pc, #124]	; (8006d00 <HAL_RCC_OscConfig+0x538>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d030      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d129      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d122      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d119      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d10f      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d107      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	40023800 	.word	0x40023800

08006d04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e083      	b.n	8006e1e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	7f5b      	ldrb	r3, [r3, #29]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d105      	bne.n	8006d2c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fb fab4 	bl	8002294 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	22ca      	movs	r2, #202	; 0xca
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2253      	movs	r2, #83	; 0x53
 8006d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f897 	bl	8006e76 <RTC_EnterInitMode>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d008      	beq.n	8006d60 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	22ff      	movs	r2, #255	; 0xff
 8006d54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2204      	movs	r2, #4
 8006d5a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e05e      	b.n	8006e1e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d72:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6899      	ldr	r1, [r3, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68d2      	ldr	r2, [r2, #12]
 8006d9a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6919      	ldr	r1, [r3, #16]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	041a      	lsls	r2, r3, #16
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dbe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10e      	bne.n	8006dec <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f829 	bl	8006e26 <HAL_RTC_WaitForSynchro>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	22ff      	movs	r2, #255	; 0xff
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2204      	movs	r2, #4
 8006de6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e018      	b.n	8006e1e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dfa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	22ff      	movs	r2, #255	; 0xff
 8006e14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
  }
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e40:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e42:	f7fb fc91 	bl	8002768 <HAL_GetTick>
 8006e46:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006e48:	e009      	b.n	8006e5e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006e4a:	f7fb fc8d 	bl	8002768 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e58:	d901      	bls.n	8006e5e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e007      	b.n	8006e6e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0ee      	beq.n	8006e4a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d119      	bne.n	8006ec4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f04f 32ff 	mov.w	r2, #4294967295
 8006e98:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e9a:	f7fb fc65 	bl	8002768 <HAL_GetTick>
 8006e9e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006ea0:	e009      	b.n	8006eb6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ea2:	f7fb fc61 	bl	8002768 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eb0:	d901      	bls.n	8006eb6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e007      	b.n	8006ec6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0ee      	beq.n	8006ea2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e022      	b.n	8006f26 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d105      	bne.n	8006ef8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fb f9f8 	bl	80022e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2203      	movs	r2, #3
 8006efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f815 	bl	8006f30 <HAL_SD_InitCard>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e00a      	b.n	8006f26 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f30:	b5b0      	push	{r4, r5, r7, lr}
 8006f32:	b08e      	sub	sp, #56	; 0x38
 8006f34:	af04      	add	r7, sp, #16
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006f40:	2300      	movs	r3, #0
 8006f42:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006f4c:	2376      	movs	r3, #118	; 0x76
 8006f4e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681d      	ldr	r5, [r3, #0]
 8006f54:	466c      	mov	r4, sp
 8006f56:	f107 0314 	add.w	r3, r7, #20
 8006f5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f62:	f107 0308 	add.w	r3, r7, #8
 8006f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f001 fd79 	bl	8008a60 <SDIO_Init>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e04c      	b.n	800701a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006f80:	4b28      	ldr	r3, [pc, #160]	; (8007024 <HAL_SD_InitCard+0xf4>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 fdb1 	bl	8008af2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006f90:	4b24      	ldr	r3, [pc, #144]	; (8007024 <HAL_SD_InitCard+0xf4>)
 8006f92:	2201      	movs	r2, #1
 8006f94:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 ffee 	bl	8007f78 <SD_PowerON>
 8006f9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e02e      	b.n	800701a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 ff0f 	bl	8007de0 <SD_InitCard>
 8006fc2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00b      	beq.n	8006fe2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e01b      	b.n	800701a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 fe14 	bl	8008c18 <SDMMC_CmdBlockLength>
 8006ff0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00f      	beq.n	8007018 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a0a      	ldr	r2, [pc, #40]	; (8007028 <HAL_SD_InitCard+0xf8>)
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3728      	adds	r7, #40	; 0x28
 800701e:	46bd      	mov	sp, r7
 8007020:	bdb0      	pop	{r4, r5, r7, pc}
 8007022:	bf00      	nop
 8007024:	422580a0 	.word	0x422580a0
 8007028:	004005ff 	.word	0x004005ff

0800702c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08c      	sub	sp, #48	; 0x30
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d107      	bne.n	8007054 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e0be      	b.n	80071d2 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b01      	cmp	r3, #1
 800705e:	f040 80b7 	bne.w	80071d0 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	441a      	add	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007072:	429a      	cmp	r2, r3
 8007074:	d907      	bls.n	8007086 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e0a5      	b.n	80071d2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2203      	movs	r2, #3
 800708a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2200      	movs	r2, #0
 8007094:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80070a4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	4a4c      	ldr	r2, [pc, #304]	; (80071dc <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80070ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	4a4b      	ldr	r2, [pc, #300]	; (80071e0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80070b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	2200      	movs	r2, #0
 80070bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3380      	adds	r3, #128	; 0x80
 80070ec:	4619      	mov	r1, r3
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	025b      	lsls	r3, r3, #9
 80070f4:	089b      	lsrs	r3, r3, #2
 80070f6:	f7fc fce5 	bl	8003ac4 <HAL_DMA_Start_IT>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d017      	beq.n	8007130 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800710e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a33      	ldr	r2, [pc, #204]	; (80071e4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007116:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e050      	b.n	80071d2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007130:	4b2d      	ldr	r3, [pc, #180]	; (80071e8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713a:	2b01      	cmp	r3, #1
 800713c:	d002      	beq.n	8007144 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	025b      	lsls	r3, r3, #9
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007144:	f04f 33ff 	mov.w	r3, #4294967295
 8007148:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	025b      	lsls	r3, r3, #9
 800714e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007150:	2390      	movs	r3, #144	; 0x90
 8007152:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007154:	2302      	movs	r3, #2
 8007156:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007158:	2300      	movs	r3, #0
 800715a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800715c:	2301      	movs	r3, #1
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f107 0210 	add.w	r2, r7, #16
 8007168:	4611      	mov	r1, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f001 fd28 	bl	8008bc0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d90a      	bls.n	800718c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2282      	movs	r2, #130	; 0x82
 800717a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007182:	4618      	mov	r0, r3
 8007184:	f001 fd8c 	bl	8008ca0 <SDMMC_CmdReadMultiBlock>
 8007188:	62f8      	str	r0, [r7, #44]	; 0x2c
 800718a:	e009      	b.n	80071a0 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2281      	movs	r2, #129	; 0x81
 8007190:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007198:	4618      	mov	r0, r3
 800719a:	f001 fd5f 	bl	8008c5c <SDMMC_CmdReadSingleBlock>
 800719e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d012      	beq.n	80071cc <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a0e      	ldr	r2, [pc, #56]	; (80071e4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	431a      	orrs	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e002      	b.n	80071d2 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e000      	b.n	80071d2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80071d0:	2302      	movs	r3, #2
  }
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3730      	adds	r7, #48	; 0x30
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	08007bef 	.word	0x08007bef
 80071e0:	08007c61 	.word	0x08007c61
 80071e4:	004005ff 	.word	0x004005ff
 80071e8:	4225858c 	.word	0x4225858c

080071ec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08c      	sub	sp, #48	; 0x30
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e0c1      	b.n	8007398 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b01      	cmp	r3, #1
 800721e:	f040 80ba 	bne.w	8007396 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	441a      	add	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007232:	429a      	cmp	r2, r3
 8007234:	d907      	bls.n	8007246 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e0a8      	b.n	8007398 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2203      	movs	r2, #3
 800724a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2200      	movs	r2, #0
 8007254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f042 021a 	orr.w	r2, r2, #26
 8007264:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	4a4d      	ldr	r2, [pc, #308]	; (80073a0 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800726c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007272:	4a4c      	ldr	r2, [pc, #304]	; (80073a4 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007274:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727a:	2200      	movs	r2, #0
 800727c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	2b01      	cmp	r3, #1
 8007284:	d002      	beq.n	800728c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	025b      	lsls	r3, r3, #9
 800728a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d90a      	bls.n	80072a8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	22a0      	movs	r2, #160	; 0xa0
 8007296:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 fd42 	bl	8008d28 <SDMMC_CmdWriteMultiBlock>
 80072a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80072a6:	e009      	b.n	80072bc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2290      	movs	r2, #144	; 0x90
 80072ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b4:	4618      	mov	r0, r3
 80072b6:	f001 fd15 	bl	8008ce4 <SDMMC_CmdWriteSingleBlock>
 80072ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d012      	beq.n	80072e8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a38      	ldr	r2, [pc, #224]	; (80073a8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80072c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e057      	b.n	8007398 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80072e8:	4b30      	ldr	r3, [pc, #192]	; (80073ac <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80072ea:	2201      	movs	r2, #1
 80072ec:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	2240      	movs	r2, #64	; 0x40
 80072f4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3380      	adds	r3, #128	; 0x80
 800731e:	461a      	mov	r2, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	025b      	lsls	r3, r3, #9
 8007324:	089b      	lsrs	r3, r3, #2
 8007326:	f7fc fbcd 	bl	8003ac4 <HAL_DMA_Start_IT>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01a      	beq.n	8007366 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 021a 	bic.w	r2, r2, #26
 800733e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007346:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e018      	b.n	8007398 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007366:	f04f 33ff 	mov.w	r3, #4294967295
 800736a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	025b      	lsls	r3, r3, #9
 8007370:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007372:	2390      	movs	r3, #144	; 0x90
 8007374:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007376:	2300      	movs	r3, #0
 8007378:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800737a:	2300      	movs	r3, #0
 800737c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800737e:	2301      	movs	r3, #1
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f107 0210 	add.w	r2, r7, #16
 800738a:	4611      	mov	r1, r2
 800738c:	4618      	mov	r0, r3
 800738e:	f001 fc17 	bl	8008bc0 <SDIO_ConfigData>

      return HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	e000      	b.n	8007398 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007396:	2302      	movs	r3, #2
  }
}
 8007398:	4618      	mov	r0, r3
 800739a:	3730      	adds	r7, #48	; 0x30
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	08007bc5 	.word	0x08007bc5
 80073a4:	08007c61 	.word	0x08007c61
 80073a8:	004005ff 	.word	0x004005ff
 80073ac:	4225858c 	.word	0x4225858c

080073b0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d008      	beq.n	80073de <HAL_SD_IRQHandler+0x2e>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 ffed 	bl	80083b6 <SD_Read_IT>
 80073dc:	e155      	b.n	800768a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 808f 	beq.w	800750c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007406:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800740a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0201 	bic.w	r2, r2, #1
 800741a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d039      	beq.n	800749a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <HAL_SD_IRQHandler+0x8a>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d011      	beq.n	800745e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4618      	mov	r0, r3
 8007440:	f001 fc94 	bl	8008d6c <SDMMC_CmdStopTransfer>
 8007444:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f91f 	bl	800769c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f240 523a 	movw	r2, #1338	; 0x53a
 8007466:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <HAL_SD_IRQHandler+0xda>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f003 fc6e 	bl	800ad6c <HAL_SD_RxCpltCallback>
 8007490:	e0fb      	b.n	800768a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f003 fc60 	bl	800ad58 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007498:	e0f7      	b.n	800768a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 80f2 	beq.w	800768a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d011      	beq.n	80074d4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f001 fc59 	bl	8008d6c <SDMMC_CmdStopTransfer>
 80074ba:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d008      	beq.n	80074d4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f8e4 	bl	800769c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f040 80d5 	bne.w	800768a <HAL_SD_IRQHandler+0x2da>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 80cf 	bne.w	800768a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0208 	bic.w	r2, r2, #8
 80074fa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f003 fc27 	bl	800ad58 <HAL_SD_TxCpltCallback>
}
 800750a:	e0be      	b.n	800768a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d008      	beq.n	800752c <HAL_SD_IRQHandler+0x17c>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 ff97 	bl	8008458 <SD_Write_IT>
 800752a:	e0ae      	b.n	800768a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 80a7 	beq.w	800768a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d005      	beq.n	8007556 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	f043 0202 	orr.w	r2, r3, #2
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d005      	beq.n	8007570 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	f043 0208 	orr.w	r2, r3, #8
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	f043 0220 	orr.w	r2, r3, #32
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	f043 0210 	orr.w	r2, r3, #16
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80075bc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 fbd2 	bl	8008d6c <SDMMC_CmdStopTransfer>
 80075c8:	4602      	mov	r2, r0
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f855 	bl	800769c <HAL_SD_ErrorCallback>
}
 80075f2:	e04a      	b.n	800768a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d045      	beq.n	800768a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b00      	cmp	r3, #0
 8007606:	d104      	bne.n	8007612 <HAL_SD_IRQHandler+0x262>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d011      	beq.n	8007636 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007616:	4a1f      	ldr	r2, [pc, #124]	; (8007694 <HAL_SD_IRQHandler+0x2e4>)
 8007618:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761e:	4618      	mov	r0, r3
 8007620:	f7fc faa8 	bl	8003b74 <HAL_DMA_Abort_IT>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d02f      	beq.n	800768a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fb68 	bl	8007d04 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007634:	e029      	b.n	800768a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <HAL_SD_IRQHandler+0x29a>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d011      	beq.n	800766e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	4a12      	ldr	r2, [pc, #72]	; (8007698 <HAL_SD_IRQHandler+0x2e8>)
 8007650:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	4618      	mov	r0, r3
 8007658:	f7fc fa8c 	bl	8003b74 <HAL_DMA_Abort_IT>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d013      	beq.n	800768a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fb83 	bl	8007d72 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800766c:	e00d      	b.n	800768a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f003 fb5e 	bl	800ad44 <HAL_SD_AbortCallback>
}
 8007688:	e7ff      	b.n	800768a <HAL_SD_IRQHandler+0x2da>
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	08007d05 	.word	0x08007d05
 8007698:	08007d73 	.word	0x08007d73

0800769c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076be:	0f9b      	lsrs	r3, r3, #30
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ca:	0e9b      	lsrs	r3, r3, #26
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076dc:	0e1b      	lsrs	r3, r3, #24
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ee:	0c1b      	lsrs	r3, r3, #16
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076fa:	0a1b      	lsrs	r3, r3, #8
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007706:	b2da      	uxtb	r2, r3
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007710:	0d1b      	lsrs	r3, r3, #20
 8007712:	b29a      	uxth	r2, r3
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800771c:	0c1b      	lsrs	r3, r3, #16
 800771e:	b2db      	uxtb	r3, r3
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	b2da      	uxtb	r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800772e:	0bdb      	lsrs	r3, r3, #15
 8007730:	b2db      	uxtb	r3, r3
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	b2da      	uxtb	r2, r3
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007740:	0b9b      	lsrs	r3, r3, #14
 8007742:	b2db      	uxtb	r3, r3
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	b2da      	uxtb	r2, r3
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007752:	0b5b      	lsrs	r3, r3, #13
 8007754:	b2db      	uxtb	r3, r3
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	b2da      	uxtb	r2, r3
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007764:	0b1b      	lsrs	r3, r3, #12
 8007766:	b2db      	uxtb	r3, r3
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	b2da      	uxtb	r2, r3
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2200      	movs	r2, #0
 8007776:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777c:	2b00      	cmp	r3, #0
 800777e:	d163      	bne.n	8007848 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007784:	009a      	lsls	r2, r3, #2
 8007786:	f640 73fc 	movw	r3, #4092	; 0xffc
 800778a:	4013      	ands	r3, r2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007790:	0f92      	lsrs	r2, r2, #30
 8007792:	431a      	orrs	r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800779c:	0edb      	lsrs	r3, r3, #27
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ae:	0e1b      	lsrs	r3, r3, #24
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c0:	0d5b      	lsrs	r3, r3, #21
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d2:	0c9b      	lsrs	r3, r3, #18
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e4:	0bdb      	lsrs	r3, r3, #15
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	7e1b      	ldrb	r3, [r3, #24]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	3302      	adds	r3, #2
 8007808:	2201      	movs	r2, #1
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007812:	fb02 f203 	mul.w	r2, r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	7a1b      	ldrb	r3, [r3, #8]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	2201      	movs	r2, #1
 8007826:	409a      	lsls	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007834:	0a52      	lsrs	r2, r2, #9
 8007836:	fb02 f203 	mul.w	r2, r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007844:	661a      	str	r2, [r3, #96]	; 0x60
 8007846:	e031      	b.n	80078ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784c:	2b01      	cmp	r3, #1
 800784e:	d11d      	bne.n	800788c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007854:	041b      	lsls	r3, r3, #16
 8007856:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800785e:	0c1b      	lsrs	r3, r3, #16
 8007860:	431a      	orrs	r2, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	3301      	adds	r3, #1
 800786c:	029a      	lsls	r2, r3, #10
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007880:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	661a      	str	r2, [r3, #96]	; 0x60
 800788a:	e00f      	b.n	80078ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a58      	ldr	r2, [pc, #352]	; (80079f4 <HAL_SD_GetCardCSD+0x344>)
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e09d      	b.n	80079e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b0:	0b9b      	lsrs	r3, r3, #14
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078c2:	09db      	lsrs	r3, r3, #7
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e4:	0fdb      	lsrs	r3, r3, #31
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f0:	0f5b      	lsrs	r3, r3, #29
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007902:	0e9b      	lsrs	r3, r3, #26
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	b2da      	uxtb	r2, r3
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007914:	0d9b      	lsrs	r3, r3, #22
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	b2da      	uxtb	r2, r3
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007926:	0d5b      	lsrs	r3, r3, #21
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	b2da      	uxtb	r2, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	0c1b      	lsrs	r3, r3, #16
 8007944:	b2db      	uxtb	r3, r3
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	b2da      	uxtb	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	0bdb      	lsrs	r3, r3, #15
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	b2da      	uxtb	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796a:	0b9b      	lsrs	r3, r3, #14
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797e:	0b5b      	lsrs	r3, r3, #13
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	0b1b      	lsrs	r3, r3, #12
 8007994:	b2db      	uxtb	r3, r3
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	b2da      	uxtb	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	0a9b      	lsrs	r3, r3, #10
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ce:	085b      	lsrs	r3, r3, #1
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	004005ff 	.word	0x004005ff

080079f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007a50:	b5b0      	push	{r4, r5, r7, lr}
 8007a52:	b08e      	sub	sp, #56	; 0x38
 8007a54:	af04      	add	r7, sp, #16
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2203      	movs	r2, #3
 8007a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d02e      	beq.n	8007ace <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a76:	d106      	bne.n	8007a86 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
 8007a84:	e029      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a8c:	d10a      	bne.n	8007aa4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fb28 	bl	80080e4 <SD_WideBus_Enable>
 8007a94:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8007aa2:	e01a      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fb65 	bl	800817a <SD_WideBus_Disable>
 8007ab0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
 8007abe:	e00c      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
 8007acc:	e005      	b.n	8007ada <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00b      	beq.n	8007afa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a26      	ldr	r2, [pc, #152]	; (8007b80 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007af8:	e01f      	b.n	8007b3a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681d      	ldr	r5, [r3, #0]
 8007b20:	466c      	mov	r4, sp
 8007b22:	f107 0314 	add.w	r3, r7, #20
 8007b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b2e:	f107 0308 	add.w	r3, r7, #8
 8007b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b34:	4628      	mov	r0, r5
 8007b36:	f000 ff93 	bl	8008a60 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 f868 	bl	8008c18 <SDMMC_CmdBlockLength>
 8007b48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00c      	beq.n	8007b6a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a0a      	ldr	r2, [pc, #40]	; (8007b80 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3728      	adds	r7, #40	; 0x28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	004005ff 	.word	0x004005ff

08007b84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007b90:	f107 030c 	add.w	r3, r7, #12
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa7c 	bl	8008094 <SD_SendStatus>
 8007b9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	0a5b      	lsrs	r3, r3, #9
 8007bb4:	f003 030f 	and.w	r3, r3, #15
 8007bb8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007bba:	693b      	ldr	r3, [r7, #16]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007be0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c00:	2b82      	cmp	r3, #130	; 0x82
 8007c02:	d111      	bne.n	8007c28 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f001 f8af 	bl	8008d6c <SDMMC_CmdStopTransfer>
 8007c0e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d008      	beq.n	8007c28 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7ff fd3a 	bl	800769c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0208 	bic.w	r2, r2, #8
 8007c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c40:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f003 f88b 	bl	800ad6c <HAL_SD_RxCpltCallback>
#endif
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7fc f92c 	bl	8003ecc <HAL_DMA_GetError>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d03e      	beq.n	8007cf8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c80:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c88:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d002      	beq.n	8007c96 <SD_DMAError+0x36>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d12d      	bne.n	8007cf2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a19      	ldr	r2, [pc, #100]	; (8007d00 <SD_DMAError+0xa0>)
 8007c9c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007cac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007cba:	6978      	ldr	r0, [r7, #20]
 8007cbc:	f7ff ff62 	bl	8007b84 <HAL_SD_GetCardState>
 8007cc0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b06      	cmp	r3, #6
 8007cc6:	d002      	beq.n	8007cce <SD_DMAError+0x6e>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d10a      	bne.n	8007ce4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 f84a 	bl	8008d6c <SDMMC_CmdStopTransfer>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007cf2:	6978      	ldr	r0, [r7, #20]
 8007cf4:	f7ff fcd2 	bl	800769c <HAL_SD_ErrorCallback>
#endif
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	004005ff 	.word	0x004005ff

08007d04 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff ff31 	bl	8007b84 <HAL_SD_GetCardState>
 8007d22:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b06      	cmp	r3, #6
 8007d36:	d002      	beq.n	8007d3e <SD_DMATxAbort+0x3a>
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b05      	cmp	r3, #5
 8007d3c:	d10a      	bne.n	8007d54 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f001 f812 	bl	8008d6c <SDMMC_CmdStopTransfer>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f002 fff1 	bl	800ad44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007d62:	e002      	b.n	8007d6a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff fc99 	bl	800769c <HAL_SD_ErrorCallback>
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d88:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff fefa 	bl	8007b84 <HAL_SD_GetCardState>
 8007d90:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b06      	cmp	r3, #6
 8007da4:	d002      	beq.n	8007dac <SD_DMARxAbort+0x3a>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d10a      	bne.n	8007dc2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 ffdb 	bl	8008d6c <SDMMC_CmdStopTransfer>
 8007db6:	4602      	mov	r2, r0
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d103      	bne.n	8007dd2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f002 ffba 	bl	800ad44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007dd0:	e002      	b.n	8007dd8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7ff fc62 	bl	800769c <HAL_SD_ErrorCallback>
}
 8007dd8:	bf00      	nop
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007de0:	b5b0      	push	{r4, r5, r7, lr}
 8007de2:	b094      	sub	sp, #80	; 0x50
 8007de4:	af04      	add	r7, sp, #16
 8007de6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007de8:	2301      	movs	r3, #1
 8007dea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fe8d 	bl	8008b10 <SDIO_GetPowerState>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007dfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e00:	e0b6      	b.n	8007f70 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d02f      	beq.n	8007e6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 f8b6 	bl	8008f80 <SDMMC_CmdSendCID>
 8007e14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <SD_InitCard+0x40>
    {
      return errorstate;
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	e0a7      	b.n	8007f70 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2100      	movs	r1, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 feb7 	bl	8008b9a <SDIO_GetResponse>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2104      	movs	r1, #4
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 feae 	bl	8008b9a <SDIO_GetResponse>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2108      	movs	r1, #8
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fea5 	bl	8008b9a <SDIO_GetResponse>
 8007e50:	4602      	mov	r2, r0
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	210c      	movs	r1, #12
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 fe9c 	bl	8008b9a <SDIO_GetResponse>
 8007e62:	4602      	mov	r2, r0
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d00d      	beq.n	8007e8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f107 020e 	add.w	r2, r7, #14
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 f8bc 	bl	8008ffa <SDMMC_CmdSetRelAdd>
 8007e82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <SD_InitCard+0xae>
    {
      return errorstate;
 8007e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8c:	e070      	b.n	8007f70 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d036      	beq.n	8007f04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007e96:	89fb      	ldrh	r3, [r7, #14]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea6:	041b      	lsls	r3, r3, #16
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	f001 f886 	bl	8008fbc <SDMMC_CmdSendCSD>
 8007eb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <SD_InitCard+0xdc>
    {
      return errorstate;
 8007eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eba:	e059      	b.n	8007f70 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fe69 	bl	8008b9a <SDIO_GetResponse>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2104      	movs	r1, #4
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fe60 	bl	8008b9a <SDIO_GetResponse>
 8007eda:	4602      	mov	r2, r0
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2108      	movs	r1, #8
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fe57 	bl	8008b9a <SDIO_GetResponse>
 8007eec:	4602      	mov	r2, r0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	210c      	movs	r1, #12
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fe4e 	bl	8008b9a <SDIO_GetResponse>
 8007efe:	4602      	mov	r2, r0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2104      	movs	r1, #4
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fe45 	bl	8008b9a <SDIO_GetResponse>
 8007f10:	4603      	mov	r3, r0
 8007f12:	0d1a      	lsrs	r2, r3, #20
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007f18:	f107 0310 	add.w	r3, r7, #16
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff fbc6 	bl	80076b0 <HAL_SD_GetCardCSD>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f2e:	e01f      	b.n	8007f70 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f38:	041b      	lsls	r3, r3, #16
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	4608      	mov	r0, r1
 8007f42:	f000 ff35 	bl	8008db0 <SDMMC_CmdSelDesel>
 8007f46:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <SD_InitCard+0x172>
  {
    return errorstate;
 8007f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f50:	e00e      	b.n	8007f70 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681d      	ldr	r5, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	466c      	mov	r4, sp
 8007f5a:	f103 0210 	add.w	r2, r3, #16
 8007f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f64:	3304      	adds	r3, #4
 8007f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f000 fd79 	bl	8008a60 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3740      	adds	r7, #64	; 0x40
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bdb0      	pop	{r4, r5, r7, pc}

08007f78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 ff30 	bl	8008df6 <SDMMC_CmdGoIdleState>
 8007f96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	e072      	b.n	8008088 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 ff43 	bl	8008e32 <SDMMC_CmdOperCond>
 8007fac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00d      	beq.n	8007fd0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 ff19 	bl	8008df6 <SDMMC_CmdGoIdleState>
 8007fc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	e05b      	b.n	8008088 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d137      	bne.n	800804e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 ff43 	bl	8008e70 <SDMMC_CmdAppCommand>
 8007fea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d02d      	beq.n	800804e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ff2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ff6:	e047      	b.n	8008088 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 ff36 	bl	8008e70 <SDMMC_CmdAppCommand>
 8008004:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <SD_PowerON+0x98>
    {
      return errorstate;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	e03b      	b.n	8008088 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	491e      	ldr	r1, [pc, #120]	; (8008090 <SD_PowerON+0x118>)
 8008016:	4618      	mov	r0, r3
 8008018:	f000 ff4c 	bl	8008eb4 <SDMMC_CmdAppOperCommand>
 800801c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008024:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008028:	e02e      	b.n	8008088 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2100      	movs	r1, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fdb2 	bl	8008b9a <SDIO_GetResponse>
 8008036:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	0fdb      	lsrs	r3, r3, #31
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <SD_PowerON+0xcc>
 8008040:	2301      	movs	r3, #1
 8008042:	e000      	b.n	8008046 <SD_PowerON+0xce>
 8008044:	2300      	movs	r3, #0
 8008046:	613b      	str	r3, [r7, #16]

    count++;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	3301      	adds	r3, #1
 800804c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008054:	4293      	cmp	r3, r2
 8008056:	d802      	bhi.n	800805e <SD_PowerON+0xe6>
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0cc      	beq.n	8007ff8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008064:	4293      	cmp	r3, r2
 8008066:	d902      	bls.n	800806e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800806c:	e00c      	b.n	8008088 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	645a      	str	r2, [r3, #68]	; 0x44
 800807e:	e002      	b.n	8008086 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	c1100000 	.word	0xc1100000

08008094 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80080a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080a8:	e018      	b.n	80080dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b2:	041b      	lsls	r3, r3, #16
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f000 ffc0 	bl	800903c <SDMMC_CmdSendStatus>
 80080bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	e009      	b.n	80080dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fd63 	bl	8008b9a <SDIO_GetResponse>
 80080d4:	4602      	mov	r2, r0
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	2300      	movs	r3, #0
 80080f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fd4d 	bl	8008b9a <SDIO_GetResponse>
 8008100:	4603      	mov	r3, r0
 8008102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800810a:	d102      	bne.n	8008112 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800810c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008110:	e02f      	b.n	8008172 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008112:	f107 030c 	add.w	r3, r7, #12
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f879 	bl	8008210 <SD_FindSCR>
 800811e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	e023      	b.n	8008172 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01c      	beq.n	800816e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813c:	041b      	lsls	r3, r3, #16
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f000 fe95 	bl	8008e70 <SDMMC_CmdAppCommand>
 8008146:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	e00f      	b.n	8008172 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2102      	movs	r1, #2
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fece 	bl	8008efa <SDMMC_CmdBusWidth>
 800815e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	e003      	b.n	8008172 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800816a:	2300      	movs	r3, #0
 800816c:	e001      	b.n	8008172 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800816e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b086      	sub	sp, #24
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	2300      	movs	r3, #0
 8008188:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2100      	movs	r1, #0
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fd02 	bl	8008b9a <SDIO_GetResponse>
 8008196:	4603      	mov	r3, r0
 8008198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081a0:	d102      	bne.n	80081a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081a6:	e02f      	b.n	8008208 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081a8:	f107 030c 	add.w	r3, r7, #12
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f82e 	bl	8008210 <SD_FindSCR>
 80081b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	e023      	b.n	8008208 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d01c      	beq.n	8008204 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d2:	041b      	lsls	r3, r3, #16
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f000 fe4a 	bl	8008e70 <SDMMC_CmdAppCommand>
 80081dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	e00f      	b.n	8008208 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2100      	movs	r1, #0
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fe83 	bl	8008efa <SDMMC_CmdBusWidth>
 80081f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	e003      	b.n	8008208 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008200:	2300      	movs	r3, #0
 8008202:	e001      	b.n	8008208 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008204:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b08f      	sub	sp, #60	; 0x3c
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800821a:	f7fa faa5 	bl	8002768 <HAL_GetTick>
 800821e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008224:	2300      	movs	r3, #0
 8008226:	60bb      	str	r3, [r7, #8]
 8008228:	2300      	movs	r3, #0
 800822a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2108      	movs	r1, #8
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fcee 	bl	8008c18 <SDMMC_CmdBlockLength>
 800823c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	e0b2      	b.n	80083ae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008250:	041b      	lsls	r3, r3, #16
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f000 fe0b 	bl	8008e70 <SDMMC_CmdAppCommand>
 800825a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	e0a3      	b.n	80083ae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008266:	f04f 33ff 	mov.w	r3, #4294967295
 800826a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800826c:	2308      	movs	r3, #8
 800826e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008270:	2330      	movs	r3, #48	; 0x30
 8008272:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008274:	2302      	movs	r3, #2
 8008276:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008278:	2300      	movs	r3, #0
 800827a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800827c:	2301      	movs	r3, #1
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f107 0210 	add.w	r2, r7, #16
 8008288:	4611      	mov	r1, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fc98 	bl	8008bc0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fe52 	bl	8008f3e <SDMMC_CmdSendSCR>
 800829a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d02a      	beq.n	80082f8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	e083      	b.n	80083ae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00f      	beq.n	80082d4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6819      	ldr	r1, [r3, #0]
 80082b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	f107 0208 	add.w	r2, r7, #8
 80082c0:	18d4      	adds	r4, r2, r3
 80082c2:	4608      	mov	r0, r1
 80082c4:	f000 fbf7 	bl	8008ab6 <SDIO_ReadFIFO>
 80082c8:	4603      	mov	r3, r0
 80082ca:	6023      	str	r3, [r4, #0]
      index++;
 80082cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ce:	3301      	adds	r3, #1
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
 80082d2:	e006      	b.n	80082e2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d012      	beq.n	8008308 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082e2:	f7fa fa41 	bl	8002768 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f0:	d102      	bne.n	80082f8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80082f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082f6:	e05a      	b.n	80083ae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0cf      	beq.n	80082a6 <SD_FindSCR+0x96>
 8008306:	e000      	b.n	800830a <SD_FindSCR+0xfa>
      break;
 8008308:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2208      	movs	r2, #8
 800831e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008320:	2308      	movs	r3, #8
 8008322:	e044      	b.n	80083ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2202      	movs	r2, #2
 8008338:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800833a:	2302      	movs	r3, #2
 800833c:	e037      	b.n	80083ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2220      	movs	r2, #32
 8008352:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008354:	2320      	movs	r3, #32
 8008356:	e02a      	b.n	80083ae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008360:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	061a      	lsls	r2, r3, #24
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800836e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	0a1b      	lsrs	r3, r3, #8
 8008374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008378:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	0e1b      	lsrs	r3, r3, #24
 800837e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	601a      	str	r2, [r3, #0]
    scr++;
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	3304      	adds	r3, #4
 8008388:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	061a      	lsls	r2, r3, #24
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008396:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	0e1b      	lsrs	r3, r3, #24
 80083a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083aa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	373c      	adds	r7, #60	; 0x3c
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd90      	pop	{r4, r7, pc}

080083b6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b086      	sub	sp, #24
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d03f      	beq.n	8008450 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	e033      	b.n	800843e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fb6b 	bl	8008ab6 <SDIO_ReadFIFO>
 80083e0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3301      	adds	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	0a1b      	lsrs	r3, r3, #8
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3301      	adds	r3, #1
 8008404:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	3b01      	subs	r3, #1
 800840a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	0c1b      	lsrs	r3, r3, #16
 8008410:	b2da      	uxtb	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3301      	adds	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	3b01      	subs	r3, #1
 8008420:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	0e1b      	lsrs	r3, r3, #24
 8008426:	b2da      	uxtb	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	3b01      	subs	r3, #1
 8008436:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	3301      	adds	r3, #1
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b07      	cmp	r3, #7
 8008442:	d9c8      	bls.n	80083d6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008450:	bf00      	nop
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d043      	beq.n	80084fa <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e037      	b.n	80084e8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	3b01      	subs	r3, #1
 8008488:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	021a      	lsls	r2, r3, #8
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4313      	orrs	r3, r2
 8008494:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3301      	adds	r3, #1
 800849a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	3b01      	subs	r3, #1
 80084a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	041a      	lsls	r2, r3, #16
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60bb      	str	r3, [r7, #8]
      tmp++;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	061a      	lsls	r2, r3, #24
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f107 0208 	add.w	r2, r7, #8
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 faf7 	bl	8008ad0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	3301      	adds	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b07      	cmp	r3, #7
 80084ec:	d9c4      	bls.n	8008478 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80084fa:	bf00      	nop
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e041      	b.n	8008598 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d106      	bne.n	800852e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7f9 ffcd 	bl	80024c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f000 f95d 	bl	8008800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d122      	bne.n	80085fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d11b      	bne.n	80085fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f06f 0202 	mvn.w	r2, #2
 80085cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f8ee 	bl	80087c4 <HAL_TIM_IC_CaptureCallback>
 80085e8:	e005      	b.n	80085f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f8e0 	bl	80087b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f8f1 	bl	80087d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	2b04      	cmp	r3, #4
 8008608:	d122      	bne.n	8008650 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b04      	cmp	r3, #4
 8008616:	d11b      	bne.n	8008650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f06f 0204 	mvn.w	r2, #4
 8008620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2202      	movs	r2, #2
 8008626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f8c4 	bl	80087c4 <HAL_TIM_IC_CaptureCallback>
 800863c:	e005      	b.n	800864a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f8b6 	bl	80087b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f8c7 	bl	80087d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 0308 	and.w	r3, r3, #8
 800865a:	2b08      	cmp	r3, #8
 800865c:	d122      	bne.n	80086a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b08      	cmp	r3, #8
 800866a:	d11b      	bne.n	80086a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0208 	mvn.w	r2, #8
 8008674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2204      	movs	r2, #4
 800867a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f89a 	bl	80087c4 <HAL_TIM_IC_CaptureCallback>
 8008690:	e005      	b.n	800869e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f88c 	bl	80087b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f89d 	bl	80087d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 0310 	and.w	r3, r3, #16
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	d122      	bne.n	80086f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b10      	cmp	r3, #16
 80086be:	d11b      	bne.n	80086f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f06f 0210 	mvn.w	r2, #16
 80086c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2208      	movs	r2, #8
 80086ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f870 	bl	80087c4 <HAL_TIM_IC_CaptureCallback>
 80086e4:	e005      	b.n	80086f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f862 	bl	80087b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f873 	bl	80087d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b01      	cmp	r3, #1
 8008704:	d10e      	bne.n	8008724 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b01      	cmp	r3, #1
 8008712:	d107      	bne.n	8008724 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f06f 0201 	mvn.w	r2, #1
 800871c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7f9 fbaa 	bl	8001e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872e:	2b80      	cmp	r3, #128	; 0x80
 8008730:	d10e      	bne.n	8008750 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873c:	2b80      	cmp	r3, #128	; 0x80
 800873e:	d107      	bne.n	8008750 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f97e 	bl	8008a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875a:	2b40      	cmp	r3, #64	; 0x40
 800875c:	d10e      	bne.n	800877c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008768:	2b40      	cmp	r3, #64	; 0x40
 800876a:	d107      	bne.n	800877c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f838 	bl	80087ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	2b20      	cmp	r3, #32
 8008788:	d10e      	bne.n	80087a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f003 0320 	and.w	r3, r3, #32
 8008794:	2b20      	cmp	r3, #32
 8008796:	d107      	bne.n	80087a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f06f 0220 	mvn.w	r2, #32
 80087a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f948 	bl	8008a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a40      	ldr	r2, [pc, #256]	; (8008914 <TIM_Base_SetConfig+0x114>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d013      	beq.n	8008840 <TIM_Base_SetConfig+0x40>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881e:	d00f      	beq.n	8008840 <TIM_Base_SetConfig+0x40>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a3d      	ldr	r2, [pc, #244]	; (8008918 <TIM_Base_SetConfig+0x118>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00b      	beq.n	8008840 <TIM_Base_SetConfig+0x40>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a3c      	ldr	r2, [pc, #240]	; (800891c <TIM_Base_SetConfig+0x11c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d007      	beq.n	8008840 <TIM_Base_SetConfig+0x40>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a3b      	ldr	r2, [pc, #236]	; (8008920 <TIM_Base_SetConfig+0x120>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d003      	beq.n	8008840 <TIM_Base_SetConfig+0x40>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a3a      	ldr	r2, [pc, #232]	; (8008924 <TIM_Base_SetConfig+0x124>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d108      	bne.n	8008852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a2f      	ldr	r2, [pc, #188]	; (8008914 <TIM_Base_SetConfig+0x114>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d02b      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008860:	d027      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a2c      	ldr	r2, [pc, #176]	; (8008918 <TIM_Base_SetConfig+0x118>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d023      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a2b      	ldr	r2, [pc, #172]	; (800891c <TIM_Base_SetConfig+0x11c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d01f      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2a      	ldr	r2, [pc, #168]	; (8008920 <TIM_Base_SetConfig+0x120>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d01b      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a29      	ldr	r2, [pc, #164]	; (8008924 <TIM_Base_SetConfig+0x124>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d017      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a28      	ldr	r2, [pc, #160]	; (8008928 <TIM_Base_SetConfig+0x128>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d013      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a27      	ldr	r2, [pc, #156]	; (800892c <TIM_Base_SetConfig+0x12c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00f      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a26      	ldr	r2, [pc, #152]	; (8008930 <TIM_Base_SetConfig+0x130>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00b      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a25      	ldr	r2, [pc, #148]	; (8008934 <TIM_Base_SetConfig+0x134>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d007      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a24      	ldr	r2, [pc, #144]	; (8008938 <TIM_Base_SetConfig+0x138>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_Base_SetConfig+0xb2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a23      	ldr	r2, [pc, #140]	; (800893c <TIM_Base_SetConfig+0x13c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d108      	bne.n	80088c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a0a      	ldr	r2, [pc, #40]	; (8008914 <TIM_Base_SetConfig+0x114>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d003      	beq.n	80088f8 <TIM_Base_SetConfig+0xf8>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a0c      	ldr	r2, [pc, #48]	; (8008924 <TIM_Base_SetConfig+0x124>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d103      	bne.n	8008900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	691a      	ldr	r2, [r3, #16]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	615a      	str	r2, [r3, #20]
}
 8008906:	bf00      	nop
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	40010000 	.word	0x40010000
 8008918:	40000400 	.word	0x40000400
 800891c:	40000800 	.word	0x40000800
 8008920:	40000c00 	.word	0x40000c00
 8008924:	40010400 	.word	0x40010400
 8008928:	40014000 	.word	0x40014000
 800892c:	40014400 	.word	0x40014400
 8008930:	40014800 	.word	0x40014800
 8008934:	40001800 	.word	0x40001800
 8008938:	40001c00 	.word	0x40001c00
 800893c:	40002000 	.word	0x40002000

08008940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008950:	2b01      	cmp	r3, #1
 8008952:	d101      	bne.n	8008958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008954:	2302      	movs	r3, #2
 8008956:	e05a      	b.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800897e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4313      	orrs	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a21      	ldr	r2, [pc, #132]	; (8008a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d022      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a4:	d01d      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a1d      	ldr	r2, [pc, #116]	; (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d018      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1b      	ldr	r2, [pc, #108]	; (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d013      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a1a      	ldr	r2, [pc, #104]	; (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d00e      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a18      	ldr	r2, [pc, #96]	; (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d009      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a17      	ldr	r2, [pc, #92]	; (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d004      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a15      	ldr	r2, [pc, #84]	; (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d10c      	bne.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	40010000 	.word	0x40010000
 8008a20:	40000400 	.word	0x40000400
 8008a24:	40000800 	.word	0x40000800
 8008a28:	40000c00 	.word	0x40000c00
 8008a2c:	40010400 	.word	0x40010400
 8008a30:	40014000 	.word	0x40014000
 8008a34:	40001800 	.word	0x40001800

08008a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008a60:	b084      	sub	sp, #16
 8008a62:	b480      	push	{r7}
 8008a64:	b085      	sub	sp, #20
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	f107 001c 	add.w	r0, r7, #28
 8008a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008a76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008a78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008a7a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008a7e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008a82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008a86:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008a8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008a9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	b004      	add	sp, #16
 8008ab4:	4770      	bx	lr

08008ab6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2203      	movs	r2, #3
 8008afe:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008b00:	2002      	movs	r0, #2
 8008b02:	f7f9 fe3d 	bl	8002780 <HAL_Delay>
  
  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0303 	and.w	r3, r3, #3
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008b4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008b50:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008b56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008b66:	f023 030f 	bic.w	r3, r3, #15
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	b2db      	uxtb	r3, r3
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	461a      	mov	r2, r3
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	4413      	add	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
}  
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008be6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008bec:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008bf2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	431a      	orrs	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0

}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b088      	sub	sp, #32
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008c26:	2310      	movs	r3, #16
 8008c28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c38:	f107 0308 	add.w	r3, r7, #8
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff ff74 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c48:	2110      	movs	r1, #16
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fa44 	bl	80090d8 <SDMMC_GetCmdResp1>
 8008c50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c52:	69fb      	ldr	r3, [r7, #28]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3720      	adds	r7, #32
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008c6a:	2311      	movs	r3, #17
 8008c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c6e:	2340      	movs	r3, #64	; 0x40
 8008c70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c72:	2300      	movs	r3, #0
 8008c74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c7c:	f107 0308 	add.w	r3, r7, #8
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff ff52 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c8c:	2111      	movs	r1, #17
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fa22 	bl	80090d8 <SDMMC_GetCmdResp1>
 8008c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c96:	69fb      	ldr	r3, [r7, #28]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3720      	adds	r7, #32
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008cae:	2312      	movs	r3, #18
 8008cb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cb2:	2340      	movs	r3, #64	; 0x40
 8008cb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cc0:	f107 0308 	add.w	r3, r7, #8
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff ff30 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd0:	2112      	movs	r1, #18
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa00 	bl	80090d8 <SDMMC_GetCmdResp1>
 8008cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cda:	69fb      	ldr	r3, [r7, #28]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3720      	adds	r7, #32
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008cf2:	2318      	movs	r3, #24
 8008cf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cf6:	2340      	movs	r3, #64	; 0x40
 8008cf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d04:	f107 0308 	add.w	r3, r7, #8
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff ff0e 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d14:	2118      	movs	r1, #24
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f9de 	bl	80090d8 <SDMMC_GetCmdResp1>
 8008d1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d1e:	69fb      	ldr	r3, [r7, #28]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3720      	adds	r7, #32
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008d36:	2319      	movs	r3, #25
 8008d38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d3a:	2340      	movs	r3, #64	; 0x40
 8008d3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d48:	f107 0308 	add.w	r3, r7, #8
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff feec 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d58:	2119      	movs	r1, #25
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f9bc 	bl	80090d8 <SDMMC_GetCmdResp1>
 8008d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d62:	69fb      	ldr	r3, [r7, #28]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3720      	adds	r7, #32
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008d78:	230c      	movs	r3, #12
 8008d7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d7c:	2340      	movs	r3, #64	; 0x40
 8008d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d80:	2300      	movs	r3, #0
 8008d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d8a:	f107 0308 	add.w	r3, r7, #8
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7ff fecb 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008d96:	4a05      	ldr	r2, [pc, #20]	; (8008dac <SDMMC_CmdStopTransfer+0x40>)
 8008d98:	210c      	movs	r1, #12
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f99c 	bl	80090d8 <SDMMC_GetCmdResp1>
 8008da0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008da2:	69fb      	ldr	r3, [r7, #28]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3720      	adds	r7, #32
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	05f5e100 	.word	0x05f5e100

08008db0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08a      	sub	sp, #40	; 0x28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008dc0:	2307      	movs	r3, #7
 8008dc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dc4:	2340      	movs	r3, #64	; 0x40
 8008dc6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dd0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dd2:	f107 0310 	add.w	r3, r7, #16
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f7ff fea7 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de2:	2107      	movs	r1, #7
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 f977 	bl	80090d8 <SDMMC_GetCmdResp1>
 8008dea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3728      	adds	r7, #40	; 0x28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b088      	sub	sp, #32
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008e06:	2300      	movs	r3, #0
 8008e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e14:	f107 0308 	add.w	r3, r7, #8
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff fe86 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f92d 	bl	8009080 <SDMMC_GetCmdError>
 8008e26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e28:	69fb      	ldr	r3, [r7, #28]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3720      	adds	r7, #32
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b088      	sub	sp, #32
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008e3a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008e3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008e40:	2308      	movs	r3, #8
 8008e42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e44:	2340      	movs	r3, #64	; 0x40
 8008e46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e52:	f107 0308 	add.w	r3, r7, #8
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff fe67 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fb24 	bl	80094ac <SDMMC_GetCmdResp7>
 8008e64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e66:	69fb      	ldr	r3, [r7, #28]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3720      	adds	r7, #32
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008e7e:	2337      	movs	r3, #55	; 0x37
 8008e80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e82:	2340      	movs	r3, #64	; 0x40
 8008e84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e90:	f107 0308 	add.w	r3, r7, #8
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7ff fe48 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea0:	2137      	movs	r1, #55	; 0x37
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f918 	bl	80090d8 <SDMMC_GetCmdResp1>
 8008ea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eaa:	69fb      	ldr	r3, [r7, #28]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3720      	adds	r7, #32
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008eca:	2329      	movs	r3, #41	; 0x29
 8008ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ece:	2340      	movs	r3, #64	; 0x40
 8008ed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008edc:	f107 0308 	add.w	r3, r7, #8
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff fe22 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fa2b 	bl	8009344 <SDMMC_GetCmdResp3>
 8008eee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ef0:	69fb      	ldr	r3, [r7, #28]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3720      	adds	r7, #32
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b088      	sub	sp, #32
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008f08:	2306      	movs	r3, #6
 8008f0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f0c:	2340      	movs	r3, #64	; 0x40
 8008f0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f10:	2300      	movs	r3, #0
 8008f12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f1a:	f107 0308 	add.w	r3, r7, #8
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff fe03 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f2a:	2106      	movs	r1, #6
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f8d3 	bl	80090d8 <SDMMC_GetCmdResp1>
 8008f32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f34:	69fb      	ldr	r3, [r7, #28]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3720      	adds	r7, #32
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b088      	sub	sp, #32
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008f4a:	2333      	movs	r3, #51	; 0x33
 8008f4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f4e:	2340      	movs	r3, #64	; 0x40
 8008f50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f52:	2300      	movs	r3, #0
 8008f54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f5c:	f107 0308 	add.w	r3, r7, #8
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff fde2 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f6c:	2133      	movs	r1, #51	; 0x33
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f8b2 	bl	80090d8 <SDMMC_GetCmdResp1>
 8008f74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f76:	69fb      	ldr	r3, [r7, #28]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3720      	adds	r7, #32
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008f90:	23c0      	movs	r3, #192	; 0xc0
 8008f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f94:	2300      	movs	r3, #0
 8008f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f9e:	f107 0308 	add.w	r3, r7, #8
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fdc1 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f982 	bl	80092b4 <SDMMC_GetCmdResp2>
 8008fb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fb2:	69fb      	ldr	r3, [r7, #28]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3720      	adds	r7, #32
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008fca:	2309      	movs	r3, #9
 8008fcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008fce:	23c0      	movs	r3, #192	; 0xc0
 8008fd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fdc:	f107 0308 	add.w	r3, r7, #8
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff fda2 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f963 	bl	80092b4 <SDMMC_GetCmdResp2>
 8008fee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b088      	sub	sp, #32
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009008:	2303      	movs	r3, #3
 800900a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800900c:	2340      	movs	r3, #64	; 0x40
 800900e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009018:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800901a:	f107 0308 	add.w	r3, r7, #8
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7ff fd83 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	2103      	movs	r1, #3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f9c8 	bl	80093c0 <SDMMC_GetCmdResp6>
 8009030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009032:	69fb      	ldr	r3, [r7, #28]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3720      	adds	r7, #32
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b088      	sub	sp, #32
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800904a:	230d      	movs	r3, #13
 800904c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800904e:	2340      	movs	r3, #64	; 0x40
 8009050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800905a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800905c:	f107 0308 	add.w	r3, r7, #8
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fd62 	bl	8008b2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009068:	f241 3288 	movw	r2, #5000	; 0x1388
 800906c:	210d      	movs	r1, #13
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f832 	bl	80090d8 <SDMMC_GetCmdResp1>
 8009074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009076:	69fb      	ldr	r3, [r7, #28]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3720      	adds	r7, #32
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009088:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <SDMMC_GetCmdError+0x50>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a11      	ldr	r2, [pc, #68]	; (80090d4 <SDMMC_GetCmdError+0x54>)
 800908e:	fba2 2303 	umull	r2, r3, r2, r3
 8009092:	0a5b      	lsrs	r3, r3, #9
 8009094:	f241 3288 	movw	r2, #5000	; 0x1388
 8009098:	fb02 f303 	mul.w	r3, r2, r3
 800909c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1e5a      	subs	r2, r3, #1
 80090a2:	60fa      	str	r2, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090ac:	e009      	b.n	80090c2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0f1      	beq.n	800909e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	22c5      	movs	r2, #197	; 0xc5
 80090be:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20000000 	.word	0x20000000
 80090d4:	10624dd3 	.word	0x10624dd3

080090d8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	460b      	mov	r3, r1
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80090e6:	4b70      	ldr	r3, [pc, #448]	; (80092a8 <SDMMC_GetCmdResp1+0x1d0>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a70      	ldr	r2, [pc, #448]	; (80092ac <SDMMC_GetCmdResp1+0x1d4>)
 80090ec:	fba2 2303 	umull	r2, r3, r2, r3
 80090f0:	0a5a      	lsrs	r2, r3, #9
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	fb02 f303 	mul.w	r3, r2, r3
 80090f8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	1e5a      	subs	r2, r3, #1
 80090fe:	61fa      	str	r2, [r7, #28]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d102      	bne.n	800910a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009108:	e0c9      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009116:	2b00      	cmp	r3, #0
 8009118:	d0ef      	beq.n	80090fa <SDMMC_GetCmdResp1+0x22>
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1ea      	bne.n	80090fa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2204      	movs	r2, #4
 8009134:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009136:	2304      	movs	r3, #4
 8009138:	e0b1      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	d004      	beq.n	8009150 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800914c:	2301      	movs	r3, #1
 800914e:	e0a6      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	22c5      	movs	r2, #197	; 0xc5
 8009154:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7ff fd12 	bl	8008b80 <SDIO_GetCommandResponse>
 800915c:	4603      	mov	r3, r0
 800915e:	461a      	mov	r2, r3
 8009160:	7afb      	ldrb	r3, [r7, #11]
 8009162:	4293      	cmp	r3, r2
 8009164:	d001      	beq.n	800916a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009166:	2301      	movs	r3, #1
 8009168:	e099      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800916a:	2100      	movs	r1, #0
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff fd14 	bl	8008b9a <SDIO_GetResponse>
 8009172:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	4b4e      	ldr	r3, [pc, #312]	; (80092b0 <SDMMC_GetCmdResp1+0x1d8>)
 8009178:	4013      	ands	r3, r2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800917e:	2300      	movs	r3, #0
 8009180:	e08d      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	da02      	bge.n	800918e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800918c:	e087      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009198:	2340      	movs	r3, #64	; 0x40
 800919a:	e080      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80091a6:	2380      	movs	r3, #128	; 0x80
 80091a8:	e079      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80091b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091b8:	e071      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80091c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091c8:	e069      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80091d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d8:	e061      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80091e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091e8:	e059      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80091f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091f8:	e051      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009208:	e049      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009214:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009218:	e041      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009228:	e039      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009238:	e031      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009244:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009248:	e029      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009254:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009258:	e021      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009268:	e019      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009274:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009278:	e011      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009284:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009288:	e009      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f003 0308 	and.w	r3, r3, #8
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009294:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009298:	e001      	b.n	800929e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800929a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3720      	adds	r7, #32
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000000 	.word	0x20000000
 80092ac:	10624dd3 	.word	0x10624dd3
 80092b0:	fdffe008 	.word	0xfdffe008

080092b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092bc:	4b1f      	ldr	r3, [pc, #124]	; (800933c <SDMMC_GetCmdResp2+0x88>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a1f      	ldr	r2, [pc, #124]	; (8009340 <SDMMC_GetCmdResp2+0x8c>)
 80092c2:	fba2 2303 	umull	r2, r3, r2, r3
 80092c6:	0a5b      	lsrs	r3, r3, #9
 80092c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092cc:	fb02 f303 	mul.w	r3, r2, r3
 80092d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	1e5a      	subs	r2, r3, #1
 80092d6:	60fa      	str	r2, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092e0:	e026      	b.n	8009330 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0ef      	beq.n	80092d2 <SDMMC_GetCmdResp2+0x1e>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1ea      	bne.n	80092d2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d004      	beq.n	8009312 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2204      	movs	r2, #4
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800930e:	2304      	movs	r3, #4
 8009310:	e00e      	b.n	8009330 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	2b00      	cmp	r3, #0
 800931c:	d004      	beq.n	8009328 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009324:	2301      	movs	r3, #1
 8009326:	e003      	b.n	8009330 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	22c5      	movs	r2, #197	; 0xc5
 800932c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	20000000 	.word	0x20000000
 8009340:	10624dd3 	.word	0x10624dd3

08009344 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800934c:	4b1a      	ldr	r3, [pc, #104]	; (80093b8 <SDMMC_GetCmdResp3+0x74>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a1a      	ldr	r2, [pc, #104]	; (80093bc <SDMMC_GetCmdResp3+0x78>)
 8009352:	fba2 2303 	umull	r2, r3, r2, r3
 8009356:	0a5b      	lsrs	r3, r3, #9
 8009358:	f241 3288 	movw	r2, #5000	; 0x1388
 800935c:	fb02 f303 	mul.w	r3, r2, r3
 8009360:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	1e5a      	subs	r2, r3, #1
 8009366:	60fa      	str	r2, [r7, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d102      	bne.n	8009372 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800936c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009370:	e01b      	b.n	80093aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009376:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0ef      	beq.n	8009362 <SDMMC_GetCmdResp3+0x1e>
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1ea      	bne.n	8009362 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b00      	cmp	r3, #0
 8009396:	d004      	beq.n	80093a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2204      	movs	r2, #4
 800939c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800939e:	2304      	movs	r3, #4
 80093a0:	e003      	b.n	80093aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	22c5      	movs	r2, #197	; 0xc5
 80093a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	20000000 	.word	0x20000000
 80093bc:	10624dd3 	.word	0x10624dd3

080093c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	460b      	mov	r3, r1
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093ce:	4b35      	ldr	r3, [pc, #212]	; (80094a4 <SDMMC_GetCmdResp6+0xe4>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a35      	ldr	r2, [pc, #212]	; (80094a8 <SDMMC_GetCmdResp6+0xe8>)
 80093d4:	fba2 2303 	umull	r2, r3, r2, r3
 80093d8:	0a5b      	lsrs	r3, r3, #9
 80093da:	f241 3288 	movw	r2, #5000	; 0x1388
 80093de:	fb02 f303 	mul.w	r3, r2, r3
 80093e2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	1e5a      	subs	r2, r3, #1
 80093e8:	61fa      	str	r2, [r7, #28]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d102      	bne.n	80093f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093f2:	e052      	b.n	800949a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0ef      	beq.n	80093e4 <SDMMC_GetCmdResp6+0x24>
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1ea      	bne.n	80093e4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009412:	f003 0304 	and.w	r3, r3, #4
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2204      	movs	r2, #4
 800941e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009420:	2304      	movs	r3, #4
 8009422:	e03a      	b.n	800949a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d004      	beq.n	800943a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009436:	2301      	movs	r3, #1
 8009438:	e02f      	b.n	800949a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff fba0 	bl	8008b80 <SDIO_GetCommandResponse>
 8009440:	4603      	mov	r3, r0
 8009442:	461a      	mov	r2, r3
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	4293      	cmp	r3, r2
 8009448:	d001      	beq.n	800944e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800944a:	2301      	movs	r3, #1
 800944c:	e025      	b.n	800949a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	22c5      	movs	r2, #197	; 0xc5
 8009452:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009454:	2100      	movs	r1, #0
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7ff fb9f 	bl	8008b9a <SDIO_GetResponse>
 800945c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d106      	bne.n	8009476 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	0c1b      	lsrs	r3, r3, #16
 800946c:	b29a      	uxth	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009472:	2300      	movs	r3, #0
 8009474:	e011      	b.n	800949a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009484:	e009      	b.n	800949a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009494:	e001      	b.n	800949a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800949a:	4618      	mov	r0, r3
 800949c:	3720      	adds	r7, #32
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20000000 	.word	0x20000000
 80094a8:	10624dd3 	.word	0x10624dd3

080094ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094b4:	4b22      	ldr	r3, [pc, #136]	; (8009540 <SDMMC_GetCmdResp7+0x94>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a22      	ldr	r2, [pc, #136]	; (8009544 <SDMMC_GetCmdResp7+0x98>)
 80094ba:	fba2 2303 	umull	r2, r3, r2, r3
 80094be:	0a5b      	lsrs	r3, r3, #9
 80094c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c4:	fb02 f303 	mul.w	r3, r2, r3
 80094c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	1e5a      	subs	r2, r3, #1
 80094ce:	60fa      	str	r2, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094d8:	e02c      	b.n	8009534 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d0ef      	beq.n	80094ca <SDMMC_GetCmdResp7+0x1e>
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1ea      	bne.n	80094ca <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f8:	f003 0304 	and.w	r3, r3, #4
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d004      	beq.n	800950a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2204      	movs	r2, #4
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009506:	2304      	movs	r3, #4
 8009508:	e014      	b.n	8009534 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d004      	beq.n	8009520 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800951c:	2301      	movs	r3, #1
 800951e:	e009      	b.n	8009534 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d002      	beq.n	8009532 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2240      	movs	r2, #64	; 0x40
 8009530:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009532:	2300      	movs	r3, #0
  
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	20000000 	.word	0x20000000
 8009544:	10624dd3 	.word	0x10624dd3

08009548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009548:	b084      	sub	sp, #16
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	f107 001c 	add.w	r0, r7, #28
 8009556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	2b01      	cmp	r3, #1
 800955e:	d122      	bne.n	80095a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958a:	2b01      	cmp	r3, #1
 800958c:	d105      	bne.n	800959a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 fb16 	bl	800abcc <USB_CoreReset>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]
 80095a4:	e01a      	b.n	80095dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 fb0a 	bl	800abcc <USB_CoreReset>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d106      	bne.n	80095d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	639a      	str	r2, [r3, #56]	; 0x38
 80095ce:	e005      	b.n	80095dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d10b      	bne.n	80095fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f043 0206 	orr.w	r2, r3, #6
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f043 0220 	orr.w	r2, r3, #32
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009606:	b004      	add	sp, #16
 8009608:	4770      	bx	lr
	...

0800960c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800961a:	79fb      	ldrb	r3, [r7, #7]
 800961c:	2b02      	cmp	r3, #2
 800961e:	d165      	bne.n	80096ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	4a41      	ldr	r2, [pc, #260]	; (8009728 <USB_SetTurnaroundTime+0x11c>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d906      	bls.n	8009636 <USB_SetTurnaroundTime+0x2a>
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	4a40      	ldr	r2, [pc, #256]	; (800972c <USB_SetTurnaroundTime+0x120>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d202      	bcs.n	8009636 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009630:	230f      	movs	r3, #15
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	e062      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4a3c      	ldr	r2, [pc, #240]	; (800972c <USB_SetTurnaroundTime+0x120>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d306      	bcc.n	800964c <USB_SetTurnaroundTime+0x40>
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	4a3b      	ldr	r2, [pc, #236]	; (8009730 <USB_SetTurnaroundTime+0x124>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d202      	bcs.n	800964c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009646:	230e      	movs	r3, #14
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	e057      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4a38      	ldr	r2, [pc, #224]	; (8009730 <USB_SetTurnaroundTime+0x124>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d306      	bcc.n	8009662 <USB_SetTurnaroundTime+0x56>
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	4a37      	ldr	r2, [pc, #220]	; (8009734 <USB_SetTurnaroundTime+0x128>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d202      	bcs.n	8009662 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800965c:	230d      	movs	r3, #13
 800965e:	617b      	str	r3, [r7, #20]
 8009660:	e04c      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	4a33      	ldr	r2, [pc, #204]	; (8009734 <USB_SetTurnaroundTime+0x128>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d306      	bcc.n	8009678 <USB_SetTurnaroundTime+0x6c>
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	4a32      	ldr	r2, [pc, #200]	; (8009738 <USB_SetTurnaroundTime+0x12c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d802      	bhi.n	8009678 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009672:	230c      	movs	r3, #12
 8009674:	617b      	str	r3, [r7, #20]
 8009676:	e041      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4a2f      	ldr	r2, [pc, #188]	; (8009738 <USB_SetTurnaroundTime+0x12c>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d906      	bls.n	800968e <USB_SetTurnaroundTime+0x82>
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	4a2e      	ldr	r2, [pc, #184]	; (800973c <USB_SetTurnaroundTime+0x130>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d802      	bhi.n	800968e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009688:	230b      	movs	r3, #11
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	e036      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4a2a      	ldr	r2, [pc, #168]	; (800973c <USB_SetTurnaroundTime+0x130>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d906      	bls.n	80096a4 <USB_SetTurnaroundTime+0x98>
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	4a29      	ldr	r2, [pc, #164]	; (8009740 <USB_SetTurnaroundTime+0x134>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d802      	bhi.n	80096a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800969e:	230a      	movs	r3, #10
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	e02b      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4a26      	ldr	r2, [pc, #152]	; (8009740 <USB_SetTurnaroundTime+0x134>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d906      	bls.n	80096ba <USB_SetTurnaroundTime+0xae>
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	4a25      	ldr	r2, [pc, #148]	; (8009744 <USB_SetTurnaroundTime+0x138>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d202      	bcs.n	80096ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096b4:	2309      	movs	r3, #9
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	e020      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	4a21      	ldr	r2, [pc, #132]	; (8009744 <USB_SetTurnaroundTime+0x138>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d306      	bcc.n	80096d0 <USB_SetTurnaroundTime+0xc4>
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	4a20      	ldr	r2, [pc, #128]	; (8009748 <USB_SetTurnaroundTime+0x13c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d802      	bhi.n	80096d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80096ca:	2308      	movs	r3, #8
 80096cc:	617b      	str	r3, [r7, #20]
 80096ce:	e015      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4a1d      	ldr	r2, [pc, #116]	; (8009748 <USB_SetTurnaroundTime+0x13c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d906      	bls.n	80096e6 <USB_SetTurnaroundTime+0xda>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	4a1c      	ldr	r2, [pc, #112]	; (800974c <USB_SetTurnaroundTime+0x140>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d202      	bcs.n	80096e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80096e0:	2307      	movs	r3, #7
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	e00a      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80096e6:	2306      	movs	r3, #6
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	e007      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d102      	bne.n	80096f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80096f2:	2309      	movs	r3, #9
 80096f4:	617b      	str	r3, [r7, #20]
 80096f6:	e001      	b.n	80096fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80096f8:	2309      	movs	r3, #9
 80096fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	029b      	lsls	r3, r3, #10
 8009710:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009714:	431a      	orrs	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	371c      	adds	r7, #28
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	00d8acbf 	.word	0x00d8acbf
 800972c:	00e4e1c0 	.word	0x00e4e1c0
 8009730:	00f42400 	.word	0x00f42400
 8009734:	01067380 	.word	0x01067380
 8009738:	011a499f 	.word	0x011a499f
 800973c:	01312cff 	.word	0x01312cff
 8009740:	014ca43f 	.word	0x014ca43f
 8009744:	016e3600 	.word	0x016e3600
 8009748:	01a6ab1f 	.word	0x01a6ab1f
 800974c:	01e84800 	.word	0x01e84800

08009750 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f043 0201 	orr.w	r2, r3, #1
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009772:	b480      	push	{r7}
 8009774:	b083      	sub	sp, #12
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f023 0201 	bic.w	r2, r3, #1
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d115      	bne.n	80097e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097c2:	2001      	movs	r0, #1
 80097c4:	f7f8 ffdc 	bl	8002780 <HAL_Delay>
      ms++;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	3301      	adds	r3, #1
 80097cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 f96c 	bl	800aaac <USB_GetMode>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d01e      	beq.n	8009818 <USB_SetCurrentMode+0x84>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2b31      	cmp	r3, #49	; 0x31
 80097de:	d9f0      	bls.n	80097c2 <USB_SetCurrentMode+0x2e>
 80097e0:	e01a      	b.n	8009818 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d115      	bne.n	8009814 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097f4:	2001      	movs	r0, #1
 80097f6:	f7f8 ffc3 	bl	8002780 <HAL_Delay>
      ms++;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 f953 	bl	800aaac <USB_GetMode>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <USB_SetCurrentMode+0x84>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b31      	cmp	r3, #49	; 0x31
 8009810:	d9f0      	bls.n	80097f4 <USB_SetCurrentMode+0x60>
 8009812:	e001      	b.n	8009818 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e005      	b.n	8009824 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b32      	cmp	r3, #50	; 0x32
 800981c:	d101      	bne.n	8009822 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800982c:	b084      	sub	sp, #16
 800982e:	b580      	push	{r7, lr}
 8009830:	b086      	sub	sp, #24
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800983a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009846:	2300      	movs	r3, #0
 8009848:	613b      	str	r3, [r7, #16]
 800984a:	e009      	b.n	8009860 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	3340      	adds	r3, #64	; 0x40
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	2200      	movs	r2, #0
 8009858:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3301      	adds	r3, #1
 800985e:	613b      	str	r3, [r7, #16]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	2b0e      	cmp	r3, #14
 8009864:	d9f2      	bls.n	800984c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d11c      	bne.n	80098a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800987a:	f043 0302 	orr.w	r3, r3, #2
 800987e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009884:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	e005      	b.n	80098b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098b8:	461a      	mov	r2, r3
 80098ba:	2300      	movs	r3, #0
 80098bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c4:	4619      	mov	r1, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098cc:	461a      	mov	r2, r3
 80098ce:	680b      	ldr	r3, [r1, #0]
 80098d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d10c      	bne.n	80098f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80098d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d104      	bne.n	80098e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80098de:	2100      	movs	r1, #0
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f945 	bl	8009b70 <USB_SetDevSpeed>
 80098e6:	e008      	b.n	80098fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80098e8:	2101      	movs	r1, #1
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f940 	bl	8009b70 <USB_SetDevSpeed>
 80098f0:	e003      	b.n	80098fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098f2:	2103      	movs	r1, #3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f93b 	bl	8009b70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098fa:	2110      	movs	r1, #16
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f8f3 	bl	8009ae8 <USB_FlushTxFifo>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f90f 	bl	8009b30 <USB_FlushRxFifo>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009922:	461a      	mov	r2, r3
 8009924:	2300      	movs	r3, #0
 8009926:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800992e:	461a      	mov	r2, r3
 8009930:	2300      	movs	r3, #0
 8009932:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993a:	461a      	mov	r2, r3
 800993c:	2300      	movs	r3, #0
 800993e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009940:	2300      	movs	r3, #0
 8009942:	613b      	str	r3, [r7, #16]
 8009944:	e043      	b.n	80099ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4413      	add	r3, r2
 800994e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800995c:	d118      	bne.n	8009990 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009970:	461a      	mov	r2, r3
 8009972:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	e013      	b.n	80099a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	4413      	add	r3, r2
 8009982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009986:	461a      	mov	r2, r3
 8009988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	e008      	b.n	80099a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	461a      	mov	r2, r3
 800999e:	2300      	movs	r3, #0
 80099a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ae:	461a      	mov	r2, r3
 80099b0:	2300      	movs	r3, #0
 80099b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c0:	461a      	mov	r2, r3
 80099c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	3301      	adds	r3, #1
 80099cc:	613b      	str	r3, [r7, #16]
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d3b7      	bcc.n	8009946 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099d6:	2300      	movs	r3, #0
 80099d8:	613b      	str	r3, [r7, #16]
 80099da:	e043      	b.n	8009a64 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	015a      	lsls	r2, r3, #5
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	4413      	add	r3, r2
 80099e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099f2:	d118      	bne.n	8009a26 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a06:	461a      	mov	r2, r3
 8009a08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	e013      	b.n	8009a38 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	e008      	b.n	8009a38 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a32:	461a      	mov	r2, r3
 8009a34:	2300      	movs	r3, #0
 8009a36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a44:	461a      	mov	r2, r3
 8009a46:	2300      	movs	r3, #0
 8009a48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a56:	461a      	mov	r2, r3
 8009a58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	3301      	adds	r3, #1
 8009a62:	613b      	str	r3, [r7, #16]
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d3b7      	bcc.n	80099dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009a8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d105      	bne.n	8009aa0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	f043 0210 	orr.w	r2, r3, #16
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	699a      	ldr	r2, [r3, #24]
 8009aa4:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <USB_DevInit+0x2b8>)
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d005      	beq.n	8009abe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	f043 0208 	orr.w	r2, r3, #8
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d107      	bne.n	8009ad4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009acc:	f043 0304 	orr.w	r3, r3, #4
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ae0:	b004      	add	sp, #16
 8009ae2:	4770      	bx	lr
 8009ae4:	803c3800 	.word	0x803c3800

08009ae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	019b      	lsls	r3, r3, #6
 8009afa:	f043 0220 	orr.w	r2, r3, #32
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3301      	adds	r3, #1
 8009b06:	60fb      	str	r3, [r7, #12]
 8009b08:	4a08      	ldr	r2, [pc, #32]	; (8009b2c <USB_FlushTxFifo+0x44>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d901      	bls.n	8009b12 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e006      	b.n	8009b20 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	f003 0320 	and.w	r3, r3, #32
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d0f1      	beq.n	8009b02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	00030d40 	.word	0x00030d40

08009b30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2210      	movs	r2, #16
 8009b40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3301      	adds	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	4a08      	ldr	r2, [pc, #32]	; (8009b6c <USB_FlushRxFifo+0x3c>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d901      	bls.n	8009b52 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e006      	b.n	8009b60 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	f003 0310 	and.w	r3, r3, #16
 8009b5a:	2b10      	cmp	r3, #16
 8009b5c:	d0f1      	beq.n	8009b42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	00030d40 	.word	0x00030d40

08009b70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	68f9      	ldr	r1, [r7, #12]
 8009b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b90:	4313      	orrs	r3, r2
 8009b92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b087      	sub	sp, #28
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 0306 	and.w	r3, r3, #6
 8009bba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d102      	bne.n	8009bc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	75fb      	strb	r3, [r7, #23]
 8009bc6:	e00a      	b.n	8009bde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d002      	beq.n	8009bd4 <USB_GetDevSpeed+0x32>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2b06      	cmp	r3, #6
 8009bd2:	d102      	bne.n	8009bda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	75fb      	strb	r3, [r7, #23]
 8009bd8:	e001      	b.n	8009bde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009bda:	230f      	movs	r3, #15
 8009bdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	785b      	ldrb	r3, [r3, #1]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d13a      	bne.n	8009c7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0e:	69da      	ldr	r2, [r3, #28]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	f003 030f 	and.w	r3, r3, #15
 8009c18:	2101      	movs	r1, #1
 8009c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	68f9      	ldr	r1, [r7, #12]
 8009c22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c26:	4313      	orrs	r3, r2
 8009c28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d155      	bne.n	8009cec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	78db      	ldrb	r3, [r3, #3]
 8009c5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	059b      	lsls	r3, r3, #22
 8009c62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c64:	4313      	orrs	r3, r2
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c7a:	6013      	str	r3, [r2, #0]
 8009c7c:	e036      	b.n	8009cec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c84:	69da      	ldr	r2, [r3, #28]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	2101      	movs	r1, #1
 8009c90:	fa01 f303 	lsl.w	r3, r1, r3
 8009c94:	041b      	lsls	r3, r3, #16
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d11a      	bne.n	8009cec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	78db      	ldrb	r3, [r3, #3]
 8009cd0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cd2:	430b      	orrs	r3, r1
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	0151      	lsls	r1, r2, #5
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	440a      	add	r2, r1
 8009cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
	...

08009cfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	785b      	ldrb	r3, [r3, #1]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d161      	bne.n	8009ddc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d2e:	d11f      	bne.n	8009d70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	0151      	lsls	r1, r2, #5
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	440a      	add	r2, r1
 8009d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	f003 030f 	and.w	r3, r3, #15
 8009d80:	2101      	movs	r1, #1
 8009d82:	fa01 f303 	lsl.w	r3, r1, r3
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	68f9      	ldr	r1, [r7, #12]
 8009d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d90:	4013      	ands	r3, r2
 8009d92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9a:	69da      	ldr	r2, [r3, #28]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	f003 030f 	and.w	r3, r3, #15
 8009da4:	2101      	movs	r1, #1
 8009da6:	fa01 f303 	lsl.w	r3, r1, r3
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	43db      	mvns	r3, r3
 8009dae:	68f9      	ldr	r1, [r7, #12]
 8009db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009db4:	4013      	ands	r3, r2
 8009db6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	0159      	lsls	r1, r3, #5
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	440b      	add	r3, r1
 8009dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4b35      	ldr	r3, [pc, #212]	; (8009eac <USB_DeactivateEndpoint+0x1b0>)
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	600b      	str	r3, [r1, #0]
 8009dda:	e060      	b.n	8009e9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009df2:	d11f      	bne.n	8009e34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	0151      	lsls	r1, r2, #5
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	440a      	add	r2, r1
 8009e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	0151      	lsls	r1, r2, #5
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	440a      	add	r2, r1
 8009e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	f003 030f 	and.w	r3, r3, #15
 8009e44:	2101      	movs	r1, #1
 8009e46:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4a:	041b      	lsls	r3, r3, #16
 8009e4c:	43db      	mvns	r3, r3
 8009e4e:	68f9      	ldr	r1, [r7, #12]
 8009e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e54:	4013      	ands	r3, r2
 8009e56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5e:	69da      	ldr	r2, [r3, #28]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	2101      	movs	r1, #1
 8009e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6e:	041b      	lsls	r3, r3, #16
 8009e70:	43db      	mvns	r3, r3
 8009e72:	68f9      	ldr	r1, [r7, #12]
 8009e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e78:	4013      	ands	r3, r2
 8009e7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	0159      	lsls	r1, r3, #5
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	440b      	add	r3, r1
 8009e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e96:	4619      	mov	r1, r3
 8009e98:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <USB_DeactivateEndpoint+0x1b4>)
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	ec337800 	.word	0xec337800
 8009eb0:	eff37800 	.word	0xeff37800

08009eb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08a      	sub	sp, #40	; 0x28
 8009eb8:	af02      	add	r7, sp, #8
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	785b      	ldrb	r3, [r3, #1]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	f040 815c 	bne.w	800a18e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d132      	bne.n	8009f44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	69ba      	ldr	r2, [r7, #24]
 8009eee:	0151      	lsls	r1, r2, #5
 8009ef0:	69fa      	ldr	r2, [r7, #28]
 8009ef2:	440a      	add	r2, r1
 8009ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ef8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009efc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	015a      	lsls	r2, r3, #5
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	4413      	add	r3, r2
 8009f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	69ba      	ldr	r2, [r7, #24]
 8009f12:	0151      	lsls	r1, r2, #5
 8009f14:	69fa      	ldr	r2, [r7, #28]
 8009f16:	440a      	add	r2, r1
 8009f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	0151      	lsls	r1, r2, #5
 8009f34:	69fa      	ldr	r2, [r7, #28]
 8009f36:	440a      	add	r2, r1
 8009f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f3c:	0cdb      	lsrs	r3, r3, #19
 8009f3e:	04db      	lsls	r3, r3, #19
 8009f40:	6113      	str	r3, [r2, #16]
 8009f42:	e074      	b.n	800a02e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	0151      	lsls	r1, r2, #5
 8009f56:	69fa      	ldr	r2, [r7, #28]
 8009f58:	440a      	add	r2, r1
 8009f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f5e:	0cdb      	lsrs	r3, r3, #19
 8009f60:	04db      	lsls	r3, r3, #19
 8009f62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	69ba      	ldr	r2, [r7, #24]
 8009f74:	0151      	lsls	r1, r2, #5
 8009f76:	69fa      	ldr	r2, [r7, #28]
 8009f78:	440a      	add	r2, r1
 8009f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	6959      	ldr	r1, [r3, #20]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	440b      	add	r3, r1
 8009fa0:	1e59      	subs	r1, r3, #1
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8009faa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009fac:	4b9d      	ldr	r3, [pc, #628]	; (800a224 <USB_EPStartXfer+0x370>)
 8009fae:	400b      	ands	r3, r1
 8009fb0:	69b9      	ldr	r1, [r7, #24]
 8009fb2:	0148      	lsls	r0, r1, #5
 8009fb4:	69f9      	ldr	r1, [r7, #28]
 8009fb6:	4401      	add	r1, r0
 8009fb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fcc:	691a      	ldr	r2, [r3, #16]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fd6:	69b9      	ldr	r1, [r7, #24]
 8009fd8:	0148      	lsls	r0, r1, #5
 8009fda:	69f9      	ldr	r1, [r7, #28]
 8009fdc:	4401      	add	r1, r0
 8009fde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	78db      	ldrb	r3, [r3, #3]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d11f      	bne.n	800a02e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	015a      	lsls	r2, r3, #5
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	69ba      	ldr	r2, [r7, #24]
 8009ffe:	0151      	lsls	r1, r2, #5
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	440a      	add	r2, r1
 800a004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a008:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a00c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	4413      	add	r3, r2
 800a016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	0151      	lsls	r1, r2, #5
 800a020:	69fa      	ldr	r2, [r7, #28]
 800a022:	440a      	add	r2, r1
 800a024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a02c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d14b      	bne.n	800a0cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d009      	beq.n	800a050 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a048:	461a      	mov	r2, r3
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	78db      	ldrb	r3, [r3, #3]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d128      	bne.n	800a0aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a064:	2b00      	cmp	r3, #0
 800a066:	d110      	bne.n	800a08a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	015a      	lsls	r2, r3, #5
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	4413      	add	r3, r2
 800a070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	0151      	lsls	r1, r2, #5
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	440a      	add	r2, r1
 800a07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	e00f      	b.n	800a0aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	0151      	lsls	r1, r2, #5
 800a09c:	69fa      	ldr	r2, [r7, #28]
 800a09e:	440a      	add	r2, r1
 800a0a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	015a      	lsls	r2, r3, #5
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	69ba      	ldr	r2, [r7, #24]
 800a0ba:	0151      	lsls	r1, r2, #5
 800a0bc:	69fa      	ldr	r2, [r7, #28]
 800a0be:	440a      	add	r2, r1
 800a0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	e12f      	b.n	800a32c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	0151      	lsls	r1, r2, #5
 800a0de:	69fa      	ldr	r2, [r7, #28]
 800a0e0:	440a      	add	r2, r1
 800a0e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	78db      	ldrb	r3, [r3, #3]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d015      	beq.n	800a120 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	695b      	ldr	r3, [r3, #20]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 8117 	beq.w	800a32c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	f003 030f 	and.w	r3, r3, #15
 800a10e:	2101      	movs	r1, #1
 800a110:	fa01 f303 	lsl.w	r3, r1, r3
 800a114:	69f9      	ldr	r1, [r7, #28]
 800a116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a11a:	4313      	orrs	r3, r2
 800a11c:	634b      	str	r3, [r1, #52]	; 0x34
 800a11e:	e105      	b.n	800a32c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d110      	bne.n	800a152 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	0151      	lsls	r1, r2, #5
 800a142:	69fa      	ldr	r2, [r7, #28]
 800a144:	440a      	add	r2, r1
 800a146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	e00f      	b.n	800a172 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	69ba      	ldr	r2, [r7, #24]
 800a162:	0151      	lsls	r1, r2, #5
 800a164:	69fa      	ldr	r2, [r7, #28]
 800a166:	440a      	add	r2, r1
 800a168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a16c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a170:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	68d9      	ldr	r1, [r3, #12]
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	781a      	ldrb	r2, [r3, #0]
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	b298      	uxth	r0, r3
 800a180:	79fb      	ldrb	r3, [r7, #7]
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	4603      	mov	r3, r0
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f000 fa2b 	bl	800a5e2 <USB_WritePacket>
 800a18c:	e0ce      	b.n	800a32c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	69fa      	ldr	r2, [r7, #28]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1a8:	0cdb      	lsrs	r3, r3, #19
 800a1aa:	04db      	lsls	r3, r3, #19
 800a1ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	69ba      	ldr	r2, [r7, #24]
 800a1be:	0151      	lsls	r1, r2, #5
 800a1c0:	69fa      	ldr	r2, [r7, #28]
 800a1c2:	440a      	add	r2, r1
 800a1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d126      	bne.n	800a228 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	015a      	lsls	r2, r3, #5
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e6:	691a      	ldr	r2, [r3, #16]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1f0:	69b9      	ldr	r1, [r7, #24]
 800a1f2:	0148      	lsls	r0, r1, #5
 800a1f4:	69f9      	ldr	r1, [r7, #28]
 800a1f6:	4401      	add	r1, r0
 800a1f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	0151      	lsls	r1, r2, #5
 800a212:	69fa      	ldr	r2, [r7, #28]
 800a214:	440a      	add	r2, r1
 800a216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a21a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a21e:	6113      	str	r3, [r2, #16]
 800a220:	e036      	b.n	800a290 <USB_EPStartXfer+0x3dc>
 800a222:	bf00      	nop
 800a224:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	695a      	ldr	r2, [r3, #20]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	4413      	add	r3, r2
 800a232:	1e5a      	subs	r2, r3, #1
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	fbb2 f3f3 	udiv	r3, r2, r3
 800a23c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	691a      	ldr	r2, [r3, #16]
 800a24c:	8afb      	ldrh	r3, [r7, #22]
 800a24e:	04d9      	lsls	r1, r3, #19
 800a250:	4b39      	ldr	r3, [pc, #228]	; (800a338 <USB_EPStartXfer+0x484>)
 800a252:	400b      	ands	r3, r1
 800a254:	69b9      	ldr	r1, [r7, #24]
 800a256:	0148      	lsls	r0, r1, #5
 800a258:	69f9      	ldr	r1, [r7, #28]
 800a25a:	4401      	add	r1, r0
 800a25c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a260:	4313      	orrs	r3, r2
 800a262:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a270:	691a      	ldr	r2, [r3, #16]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	8af9      	ldrh	r1, [r7, #22]
 800a278:	fb01 f303 	mul.w	r3, r1, r3
 800a27c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a280:	69b9      	ldr	r1, [r7, #24]
 800a282:	0148      	lsls	r0, r1, #5
 800a284:	69f9      	ldr	r1, [r7, #28]
 800a286:	4401      	add	r1, r0
 800a288:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a28c:	4313      	orrs	r3, r2
 800a28e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d10d      	bne.n	800a2b2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d009      	beq.n	800a2b2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	68d9      	ldr	r1, [r3, #12]
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	015a      	lsls	r2, r3, #5
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ae:	460a      	mov	r2, r1
 800a2b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	78db      	ldrb	r3, [r3, #3]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d128      	bne.n	800a30c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d110      	bne.n	800a2ec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	0151      	lsls	r1, r2, #5
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	440a      	add	r2, r1
 800a2e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2e8:	6013      	str	r3, [r2, #0]
 800a2ea:	e00f      	b.n	800a30c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	69ba      	ldr	r2, [r7, #24]
 800a2fc:	0151      	lsls	r1, r2, #5
 800a2fe:	69fa      	ldr	r2, [r7, #28]
 800a300:	440a      	add	r2, r1
 800a302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a30a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	4413      	add	r3, r2
 800a314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	69ba      	ldr	r2, [r7, #24]
 800a31c:	0151      	lsls	r1, r2, #5
 800a31e:	69fa      	ldr	r2, [r7, #28]
 800a320:	440a      	add	r2, r1
 800a322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a326:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a32a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	1ff80000 	.word	0x1ff80000

0800a33c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	785b      	ldrb	r3, [r3, #1]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	f040 80cd 	bne.w	800a4f8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d132      	bne.n	800a3cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	0151      	lsls	r1, r2, #5
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	440a      	add	r2, r1
 800a37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a380:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a384:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	4413      	add	r3, r2
 800a392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	0151      	lsls	r1, r2, #5
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	440a      	add	r2, r1
 800a3a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	0151      	lsls	r1, r2, #5
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	440a      	add	r2, r1
 800a3c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3c4:	0cdb      	lsrs	r3, r3, #19
 800a3c6:	04db      	lsls	r3, r3, #19
 800a3c8:	6113      	str	r3, [r2, #16]
 800a3ca:	e04e      	b.n	800a46a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	0151      	lsls	r1, r2, #5
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	440a      	add	r2, r1
 800a3e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e6:	0cdb      	lsrs	r3, r3, #19
 800a3e8:	04db      	lsls	r3, r3, #19
 800a3ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	693a      	ldr	r2, [r7, #16]
 800a3fc:	0151      	lsls	r1, r2, #5
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	440a      	add	r2, r1
 800a402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a406:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a40a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a40e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	695a      	ldr	r2, [r3, #20]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d903      	bls.n	800a424 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	689a      	ldr	r2, [r3, #8]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	0151      	lsls	r1, r2, #5
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	440a      	add	r2, r1
 800a43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a43e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a450:	691a      	ldr	r2, [r3, #16]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a45a:	6939      	ldr	r1, [r7, #16]
 800a45c:	0148      	lsls	r0, r1, #5
 800a45e:	6979      	ldr	r1, [r7, #20]
 800a460:	4401      	add	r1, r0
 800a462:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a466:	4313      	orrs	r3, r2
 800a468:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a46a:	79fb      	ldrb	r3, [r7, #7]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d11e      	bne.n	800a4ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d009      	beq.n	800a48c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a484:	461a      	mov	r2, r3
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	0151      	lsls	r1, r2, #5
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	440a      	add	r2, r1
 800a4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4aa:	6013      	str	r3, [r2, #0]
 800a4ac:	e092      	b.n	800a5d4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	015a      	lsls	r2, r3, #5
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	0151      	lsls	r1, r2, #5
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	440a      	add	r2, r1
 800a4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d07e      	beq.n	800a5d4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	f003 030f 	and.w	r3, r3, #15
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ec:	6979      	ldr	r1, [r7, #20]
 800a4ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	634b      	str	r3, [r1, #52]	; 0x34
 800a4f6:	e06d      	b.n	800a5d4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	0151      	lsls	r1, r2, #5
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	440a      	add	r2, r1
 800a50e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a512:	0cdb      	lsrs	r3, r3, #19
 800a514:	04db      	lsls	r3, r3, #19
 800a516:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	0151      	lsls	r1, r2, #5
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	440a      	add	r2, r1
 800a52e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a532:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a536:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a53a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d003      	beq.n	800a54c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	689a      	ldr	r2, [r3, #8]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	015a      	lsls	r2, r3, #5
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	4413      	add	r3, r2
 800a554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	0151      	lsls	r1, r2, #5
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	440a      	add	r2, r1
 800a562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a566:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a56a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	4413      	add	r3, r2
 800a574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a578:	691a      	ldr	r2, [r3, #16]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a582:	6939      	ldr	r1, [r7, #16]
 800a584:	0148      	lsls	r0, r1, #5
 800a586:	6979      	ldr	r1, [r7, #20]
 800a588:	4401      	add	r1, r0
 800a58a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a58e:	4313      	orrs	r3, r2
 800a590:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a592:	79fb      	ldrb	r3, [r7, #7]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d10d      	bne.n	800a5b4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d009      	beq.n	800a5b4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	68d9      	ldr	r1, [r3, #12]
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b0:	460a      	mov	r2, r1
 800a5b2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	0151      	lsls	r1, r2, #5
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	440a      	add	r2, r1
 800a5ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	371c      	adds	r7, #28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b089      	sub	sp, #36	; 0x24
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	60b9      	str	r1, [r7, #8]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	71fb      	strb	r3, [r7, #7]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a600:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a604:	2b00      	cmp	r3, #0
 800a606:	d123      	bne.n	800a650 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a608:	88bb      	ldrh	r3, [r7, #4]
 800a60a:	3303      	adds	r3, #3
 800a60c:	089b      	lsrs	r3, r3, #2
 800a60e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a610:	2300      	movs	r3, #0
 800a612:	61bb      	str	r3, [r7, #24]
 800a614:	e018      	b.n	800a648 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a616:	79fb      	ldrb	r3, [r7, #7]
 800a618:	031a      	lsls	r2, r3, #12
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a622:	461a      	mov	r2, r3
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	3301      	adds	r3, #1
 800a62e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	3301      	adds	r3, #1
 800a634:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	3301      	adds	r3, #1
 800a63a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	3301      	adds	r3, #1
 800a640:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	3301      	adds	r3, #1
 800a646:	61bb      	str	r3, [r7, #24]
 800a648:	69ba      	ldr	r2, [r7, #24]
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d3e2      	bcc.n	800a616 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3724      	adds	r7, #36	; 0x24
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a65e:	b480      	push	{r7}
 800a660:	b08b      	sub	sp, #44	; 0x2c
 800a662:	af00      	add	r7, sp, #0
 800a664:	60f8      	str	r0, [r7, #12]
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	4613      	mov	r3, r2
 800a66a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a674:	88fb      	ldrh	r3, [r7, #6]
 800a676:	089b      	lsrs	r3, r3, #2
 800a678:	b29b      	uxth	r3, r3
 800a67a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a67c:	88fb      	ldrh	r3, [r7, #6]
 800a67e:	f003 0303 	and.w	r3, r3, #3
 800a682:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a684:	2300      	movs	r3, #0
 800a686:	623b      	str	r3, [r7, #32]
 800a688:	e014      	b.n	800a6b4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	601a      	str	r2, [r3, #0]
    pDest++;
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	3301      	adds	r3, #1
 800a69a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	3301      	adds	r3, #1
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	623b      	str	r3, [r7, #32]
 800a6b4:	6a3a      	ldr	r2, [r7, #32]
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d3e6      	bcc.n	800a68a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a6bc:	8bfb      	ldrh	r3, [r7, #30]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d01e      	beq.n	800a700 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	f107 0310 	add.w	r3, r7, #16
 800a6d2:	6812      	ldr	r2, [r2, #0]
 800a6d4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	00db      	lsls	r3, r3, #3
 800a6de:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	701a      	strb	r2, [r3, #0]
      i++;
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	623b      	str	r3, [r7, #32]
      pDest++;
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a6f4:	8bfb      	ldrh	r3, [r7, #30]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6fa:	8bfb      	ldrh	r3, [r7, #30]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1ea      	bne.n	800a6d6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a702:	4618      	mov	r0, r3
 800a704:	372c      	adds	r7, #44	; 0x2c
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	785b      	ldrb	r3, [r3, #1]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d12c      	bne.n	800a784 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	4413      	add	r3, r2
 800a732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	db12      	blt.n	800a762 <USB_EPSetStall+0x54>
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00f      	beq.n	800a762 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	0151      	lsls	r1, r2, #5
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	440a      	add	r2, r1
 800a758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a75c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a760:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	0151      	lsls	r1, r2, #5
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	440a      	add	r2, r1
 800a778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a77c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	e02b      	b.n	800a7dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	db12      	blt.n	800a7bc <USB_EPSetStall+0xae>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00f      	beq.n	800a7bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	0151      	lsls	r1, r2, #5
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	440a      	add	r2, r1
 800a7b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a7ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	0151      	lsls	r1, r2, #5
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a7da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d128      	bne.n	800a858 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	015a      	lsls	r2, r3, #5
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	4413      	add	r3, r2
 800a80e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	0151      	lsls	r1, r2, #5
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	440a      	add	r2, r1
 800a81c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a820:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a824:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	78db      	ldrb	r3, [r3, #3]
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	d003      	beq.n	800a836 <USB_EPClearStall+0x4c>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	78db      	ldrb	r3, [r3, #3]
 800a832:	2b02      	cmp	r3, #2
 800a834:	d138      	bne.n	800a8a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	0151      	lsls	r1, r2, #5
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	440a      	add	r2, r1
 800a84c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	e027      	b.n	800a8a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	0151      	lsls	r1, r2, #5
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	440a      	add	r2, r1
 800a86e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a876:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	78db      	ldrb	r3, [r3, #3]
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d003      	beq.n	800a888 <USB_EPClearStall+0x9e>
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	78db      	ldrb	r3, [r3, #3]
 800a884:	2b02      	cmp	r3, #2
 800a886:	d10f      	bne.n	800a8a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	015a      	lsls	r2, r3, #5
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	4413      	add	r3, r2
 800a890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	0151      	lsls	r1, r2, #5
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	440a      	add	r2, r1
 800a89e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b085      	sub	sp, #20
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a8d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	78fb      	ldrb	r3, [r7, #3]
 800a8e4:	011b      	lsls	r3, r3, #4
 800a8e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a8ea:	68f9      	ldr	r1, [r7, #12]
 800a8ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a902:	b480      	push	{r7}
 800a904:	b085      	sub	sp, #20
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a91c:	f023 0303 	bic.w	r3, r3, #3
 800a920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a930:	f023 0302 	bic.w	r3, r3, #2
 800a934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a95e:	f023 0303 	bic.w	r3, r3, #3
 800a962:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a972:	f043 0302 	orr.w	r3, r3, #2
 800a976:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a986:	b480      	push	{r7}
 800a988:	b085      	sub	sp, #20
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	4013      	ands	r3, r2
 800a99c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a99e:	68fb      	ldr	r3, [r7, #12]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	0c1b      	lsrs	r3, r3, #16
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	4013      	ands	r3, r2
 800aa02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	b29b      	uxth	r3, r3
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aa24:	78fb      	ldrb	r3, [r7, #3]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	4013      	ands	r3, r2
 800aa40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa42:	68bb      	ldr	r3, [r7, #8]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa72:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa74:	78fb      	ldrb	r3, [r7, #3]
 800aa76:	f003 030f 	and.w	r3, r3, #15
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa80:	01db      	lsls	r3, r3, #7
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa8a:	78fb      	ldrb	r3, [r7, #3]
 800aa8c:	015a      	lsls	r2, r3, #5
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	4413      	add	r3, r2
 800aa92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	371c      	adds	r7, #28
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	f003 0301 	and.w	r3, r3, #1
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aae2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aae6:	f023 0307 	bic.w	r3, r3, #7
 800aaea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aafa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aafe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
	...

0800ab10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b087      	sub	sp, #28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	333c      	adds	r3, #60	; 0x3c
 800ab26:	3304      	adds	r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	4a26      	ldr	r2, [pc, #152]	; (800abc8 <USB_EP0_OutStart+0xb8>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d90a      	bls.n	800ab4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab44:	d101      	bne.n	800ab4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	e037      	b.n	800abba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab50:	461a      	mov	r2, r3
 800ab52:	2300      	movs	r3, #0
 800ab54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab78:	f043 0318 	orr.w	r3, r3, #24
 800ab7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab92:	7afb      	ldrb	r3, [r7, #11]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d10f      	bne.n	800abb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab9e:	461a      	mov	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800abb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	4f54300a 	.word	0x4f54300a

0800abcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abd4:	2300      	movs	r3, #0
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	3301      	adds	r3, #1
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	4a13      	ldr	r2, [pc, #76]	; (800ac2c <USB_CoreReset+0x60>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d901      	bls.n	800abe8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800abe4:	2303      	movs	r3, #3
 800abe6:	e01a      	b.n	800ac1e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	daf3      	bge.n	800abd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abf0:	2300      	movs	r3, #0
 800abf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	f043 0201 	orr.w	r2, r3, #1
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3301      	adds	r3, #1
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	4a09      	ldr	r2, [pc, #36]	; (800ac2c <USB_CoreReset+0x60>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d901      	bls.n	800ac10 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e006      	b.n	800ac1e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	f003 0301 	and.w	r3, r3, #1
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d0f1      	beq.n	800ac00 <USB_CoreReset+0x34>

  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	00030d40 	.word	0x00030d40

0800ac30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ac34:	4904      	ldr	r1, [pc, #16]	; (800ac48 <MX_FATFS_Init+0x18>)
 800ac36:	4805      	ldr	r0, [pc, #20]	; (800ac4c <MX_FATFS_Init+0x1c>)
 800ac38:	f003 f9f8 	bl	800e02c <FATFS_LinkDriver>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	461a      	mov	r2, r3
 800ac40:	4b03      	ldr	r3, [pc, #12]	; (800ac50 <MX_FATFS_Init+0x20>)
 800ac42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ac44:	bf00      	nop
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	200018c8 	.word	0x200018c8
 800ac4c:	0800ebac 	.word	0x0800ebac
 800ac50:	200018c4 	.word	0x200018c4

0800ac54 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ac5e:	f000 f896 	bl	800ad8e <BSP_SD_IsDetected>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d001      	beq.n	800ac6c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e012      	b.n	800ac92 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ac6c:	480b      	ldr	r0, [pc, #44]	; (800ac9c <BSP_SD_Init+0x48>)
 800ac6e:	f7fc f92e 	bl	8006ece <HAL_SD_Init>
 800ac72:	4603      	mov	r3, r0
 800ac74:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d109      	bne.n	800ac90 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ac7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ac80:	4806      	ldr	r0, [pc, #24]	; (800ac9c <BSP_SD_Init+0x48>)
 800ac82:	f7fc fee5 	bl	8007a50 <HAL_SD_ConfigWideBusOperation>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ac90:	79fb      	ldrb	r3, [r7, #7]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20001704 	.word	0x20001704

0800aca0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	68f9      	ldr	r1, [r7, #12]
 800acb6:	4806      	ldr	r0, [pc, #24]	; (800acd0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800acb8:	f7fc f9b8 	bl	800702c <HAL_SD_ReadBlocks_DMA>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800acc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3718      	adds	r7, #24
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	20001704 	.word	0x20001704

0800acd4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	68f9      	ldr	r1, [r7, #12]
 800acea:	4806      	ldr	r0, [pc, #24]	; (800ad04 <BSP_SD_WriteBlocks_DMA+0x30>)
 800acec:	f7fc fa7e 	bl	80071ec <HAL_SD_WriteBlocks_DMA>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	20001704 	.word	0x20001704

0800ad08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ad0c:	4805      	ldr	r0, [pc, #20]	; (800ad24 <BSP_SD_GetCardState+0x1c>)
 800ad0e:	f7fc ff39 	bl	8007b84 <HAL_SD_GetCardState>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	bf14      	ite	ne
 800ad18:	2301      	movne	r3, #1
 800ad1a:	2300      	moveq	r3, #0
 800ad1c:	b2db      	uxtb	r3, r3
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	20001704 	.word	0x20001704

0800ad28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ad30:	6879      	ldr	r1, [r7, #4]
 800ad32:	4803      	ldr	r0, [pc, #12]	; (800ad40 <BSP_SD_GetCardInfo+0x18>)
 800ad34:	f7fc fe60 	bl	80079f8 <HAL_SD_GetCardInfo>
}
 800ad38:	bf00      	nop
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	20001704 	.word	0x20001704

0800ad44 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ad4c:	f000 f818 	bl	800ad80 <BSP_SD_AbortCallback>
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ad60:	f000 f9a8 	bl	800b0b4 <BSP_SD_WriteCpltCallback>
}
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ad74:	f000 f9aa 	bl	800b0cc <BSP_SD_ReadCpltCallback>
}
 800ad78:	bf00      	nop
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0

}
 800ad84:	bf00      	nop
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ad94:	2301      	movs	r3, #1
 800ad96:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ad98:	f000 f80c 	bl	800adb4 <BSP_PlatformIsDetected>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d101      	bne.n	800ada6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ada2:	2300      	movs	r3, #0
 800ada4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ada6:	79fb      	ldrb	r3, [r7, #7]
 800ada8:	b2db      	uxtb	r3, r3
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
	...

0800adb4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800adba:	2301      	movs	r3, #1
 800adbc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800adbe:	2180      	movs	r1, #128	; 0x80
 800adc0:	4806      	ldr	r0, [pc, #24]	; (800addc <BSP_PlatformIsDetected+0x28>)
 800adc2:	f7f9 fb03 	bl	80043cc <HAL_GPIO_ReadPin>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800adcc:	2300      	movs	r3, #0
 800adce:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800add0:	79fb      	ldrb	r3, [r7, #7]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	40020800 	.word	0x40020800

0800ade0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ade8:	f7f7 fcbe 	bl	8002768 <HAL_GetTick>
 800adec:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800adee:	e006      	b.n	800adfe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800adf0:	f7ff ff8a 	bl	800ad08 <BSP_SD_GetCardState>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	e009      	b.n	800ae12 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800adfe:	f7f7 fcb3 	bl	8002768 <HAL_GetTick>
 800ae02:	4602      	mov	r2, r0
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d8f0      	bhi.n	800adf0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ae0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
	...

0800ae1c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	4603      	mov	r3, r0
 800ae24:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ae26:	4b0b      	ldr	r3, [pc, #44]	; (800ae54 <SD_CheckStatus+0x38>)
 800ae28:	2201      	movs	r2, #1
 800ae2a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ae2c:	f7ff ff6c 	bl	800ad08 <BSP_SD_GetCardState>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d107      	bne.n	800ae46 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ae36:	4b07      	ldr	r3, [pc, #28]	; (800ae54 <SD_CheckStatus+0x38>)
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	f023 0301 	bic.w	r3, r3, #1
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	4b04      	ldr	r3, [pc, #16]	; (800ae54 <SD_CheckStatus+0x38>)
 800ae44:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ae46:	4b03      	ldr	r3, [pc, #12]	; (800ae54 <SD_CheckStatus+0x38>)
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	b2db      	uxtb	r3, r3
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	20000009 	.word	0x20000009

0800ae58 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	4603      	mov	r3, r0
 800ae60:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ae62:	f7ff fef7 	bl	800ac54 <BSP_SD_Init>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d107      	bne.n	800ae7c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7ff ffd4 	bl	800ae1c <SD_CheckStatus>
 800ae74:	4603      	mov	r3, r0
 800ae76:	461a      	mov	r2, r3
 800ae78:	4b04      	ldr	r3, [pc, #16]	; (800ae8c <SD_initialize+0x34>)
 800ae7a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ae7c:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <SD_initialize+0x34>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	b2db      	uxtb	r3, r3
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000009 	.word	0x20000009

0800ae90 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ae9a:	79fb      	ldrb	r3, [r7, #7]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7ff ffbd 	bl	800ae1c <SD_CheckStatus>
 800aea2:	4603      	mov	r3, r0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60b9      	str	r1, [r7, #8]
 800aeb4:	607a      	str	r2, [r7, #4]
 800aeb6:	603b      	str	r3, [r7, #0]
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aec0:	f247 5030 	movw	r0, #30000	; 0x7530
 800aec4:	f7ff ff8c 	bl	800ade0 <SD_CheckStatusWithTimeout>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	da01      	bge.n	800aed2 <SD_read+0x26>
  {
    return res;
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	e03b      	b.n	800af4a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	6879      	ldr	r1, [r7, #4]
 800aed6:	68b8      	ldr	r0, [r7, #8]
 800aed8:	f7ff fee2 	bl	800aca0 <BSP_SD_ReadBlocks_DMA>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d132      	bne.n	800af48 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800aee2:	4b1c      	ldr	r3, [pc, #112]	; (800af54 <SD_read+0xa8>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800aee8:	f7f7 fc3e 	bl	8002768 <HAL_GetTick>
 800aeec:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aeee:	bf00      	nop
 800aef0:	4b18      	ldr	r3, [pc, #96]	; (800af54 <SD_read+0xa8>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d108      	bne.n	800af0a <SD_read+0x5e>
 800aef8:	f7f7 fc36 	bl	8002768 <HAL_GetTick>
 800aefc:	4602      	mov	r2, r0
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	f247 522f 	movw	r2, #29999	; 0x752f
 800af06:	4293      	cmp	r3, r2
 800af08:	d9f2      	bls.n	800aef0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800af0a:	4b12      	ldr	r3, [pc, #72]	; (800af54 <SD_read+0xa8>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d102      	bne.n	800af18 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	75fb      	strb	r3, [r7, #23]
 800af16:	e017      	b.n	800af48 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800af18:	4b0e      	ldr	r3, [pc, #56]	; (800af54 <SD_read+0xa8>)
 800af1a:	2200      	movs	r2, #0
 800af1c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800af1e:	f7f7 fc23 	bl	8002768 <HAL_GetTick>
 800af22:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af24:	e007      	b.n	800af36 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af26:	f7ff feef 	bl	800ad08 <BSP_SD_GetCardState>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d102      	bne.n	800af36 <SD_read+0x8a>
          {
            res = RES_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800af34:	e008      	b.n	800af48 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af36:	f7f7 fc17 	bl	8002768 <HAL_GetTick>
 800af3a:	4602      	mov	r2, r0
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	f247 522f 	movw	r2, #29999	; 0x752f
 800af44:	4293      	cmp	r3, r2
 800af46:	d9ee      	bls.n	800af26 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800af48:	7dfb      	ldrb	r3, [r7, #23]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3718      	adds	r7, #24
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	20000194 	.word	0x20000194

0800af58 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800af6c:	4b24      	ldr	r3, [pc, #144]	; (800b000 <SD_write+0xa8>)
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800af72:	f247 5030 	movw	r0, #30000	; 0x7530
 800af76:	f7ff ff33 	bl	800ade0 <SD_CheckStatusWithTimeout>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	da01      	bge.n	800af84 <SD_write+0x2c>
  {
    return res;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	e038      	b.n	800aff6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	68b8      	ldr	r0, [r7, #8]
 800af8a:	f7ff fea3 	bl	800acd4 <BSP_SD_WriteBlocks_DMA>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d12f      	bne.n	800aff4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800af94:	f7f7 fbe8 	bl	8002768 <HAL_GetTick>
 800af98:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800af9a:	bf00      	nop
 800af9c:	4b18      	ldr	r3, [pc, #96]	; (800b000 <SD_write+0xa8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d108      	bne.n	800afb6 <SD_write+0x5e>
 800afa4:	f7f7 fbe0 	bl	8002768 <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	f247 522f 	movw	r2, #29999	; 0x752f
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d9f2      	bls.n	800af9c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800afb6:	4b12      	ldr	r3, [pc, #72]	; (800b000 <SD_write+0xa8>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d102      	bne.n	800afc4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	75fb      	strb	r3, [r7, #23]
 800afc2:	e017      	b.n	800aff4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800afc4:	4b0e      	ldr	r3, [pc, #56]	; (800b000 <SD_write+0xa8>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800afca:	f7f7 fbcd 	bl	8002768 <HAL_GetTick>
 800afce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800afd0:	e007      	b.n	800afe2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800afd2:	f7ff fe99 	bl	800ad08 <BSP_SD_GetCardState>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d102      	bne.n	800afe2 <SD_write+0x8a>
          {
            res = RES_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	75fb      	strb	r3, [r7, #23]
            break;
 800afe0:	e008      	b.n	800aff4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800afe2:	f7f7 fbc1 	bl	8002768 <HAL_GetTick>
 800afe6:	4602      	mov	r2, r0
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	f247 522f 	movw	r2, #29999	; 0x752f
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d9ee      	bls.n	800afd2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	20000190 	.word	0x20000190

0800b004 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08c      	sub	sp, #48	; 0x30
 800b008:	af00      	add	r7, sp, #0
 800b00a:	4603      	mov	r3, r0
 800b00c:	603a      	str	r2, [r7, #0]
 800b00e:	71fb      	strb	r3, [r7, #7]
 800b010:	460b      	mov	r3, r1
 800b012:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b01a:	4b25      	ldr	r3, [pc, #148]	; (800b0b0 <SD_ioctl+0xac>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	f003 0301 	and.w	r3, r3, #1
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <SD_ioctl+0x28>
 800b028:	2303      	movs	r3, #3
 800b02a:	e03c      	b.n	800b0a6 <SD_ioctl+0xa2>

  switch (cmd)
 800b02c:	79bb      	ldrb	r3, [r7, #6]
 800b02e:	2b03      	cmp	r3, #3
 800b030:	d834      	bhi.n	800b09c <SD_ioctl+0x98>
 800b032:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <SD_ioctl+0x34>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b049 	.word	0x0800b049
 800b03c:	0800b051 	.word	0x0800b051
 800b040:	0800b069 	.word	0x0800b069
 800b044:	0800b083 	.word	0x0800b083
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b04e:	e028      	b.n	800b0a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b050:	f107 030c 	add.w	r3, r7, #12
 800b054:	4618      	mov	r0, r3
 800b056:	f7ff fe67 	bl	800ad28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b066:	e01c      	b.n	800b0a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b068:	f107 030c 	add.w	r3, r7, #12
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff fe5b 	bl	800ad28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b074:	b29a      	uxth	r2, r3
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b080:	e00f      	b.n	800b0a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b082:	f107 030c 	add.w	r3, r7, #12
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff fe4e 	bl	800ad28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08e:	0a5a      	lsrs	r2, r3, #9
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b09a:	e002      	b.n	800b0a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b09c:	2304      	movs	r3, #4
 800b09e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b0a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3730      	adds	r7, #48	; 0x30
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20000009 	.word	0x20000009

0800b0b4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b0b8:	4b03      	ldr	r3, [pc, #12]	; (800b0c8 <BSP_SD_WriteCpltCallback+0x14>)
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	601a      	str	r2, [r3, #0]
}
 800b0be:	bf00      	nop
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	20000190 	.word	0x20000190

0800b0cc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b0d0:	4b03      	ldr	r3, [pc, #12]	; (800b0e0 <BSP_SD_ReadCpltCallback+0x14>)
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]
}
 800b0d6:	bf00      	nop
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	20000194 	.word	0x20000194

0800b0e4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800b0f0:	f44f 701d 	mov.w	r0, #628	; 0x274
 800b0f4:	f003 fcac 	bl	800ea50 <USBD_static_malloc>
 800b0f8:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d105      	bne.n	800b10c <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b108:	2302      	movs	r3, #2
 800b10a:	e034      	b.n	800b176 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	7c1b      	ldrb	r3, [r3, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d115      	bne.n	800b148 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b11c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b120:	2202      	movs	r2, #2
 800b122:	2101      	movs	r1, #1
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f003 fb02 	bl	800e72e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b132:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b136:	2202      	movs	r2, #2
 800b138:	2181      	movs	r1, #129	; 0x81
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f003 faf7 	bl	800e72e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	871a      	strh	r2, [r3, #56]	; 0x38
 800b146:	e012      	b.n	800b16e <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b148:	2340      	movs	r3, #64	; 0x40
 800b14a:	2202      	movs	r2, #2
 800b14c:	2101      	movs	r1, #1
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f003 faed 	bl	800e72e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b15c:	2340      	movs	r3, #64	; 0x40
 800b15e:	2202      	movs	r2, #2
 800b160:	2181      	movs	r1, #129	; 0x81
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f003 fae3 	bl	800e72e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f999 	bl	800b4a6 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b082      	sub	sp, #8
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800b18a:	2101      	movs	r1, #1
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f003 faf4 	bl	800e77a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800b19a:	2181      	movs	r1, #129	; 0x81
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f003 faec 	bl	800e77a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00c      	beq.n	800b1cc <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f9d5 	bl	800b562 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f003 fc54 	bl	800ea6c <USBD_static_free>
    pdev->pClassData = NULL;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
	...

0800b1d8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1e8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e0db      	b.n	800b3b4 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b204:	2b00      	cmp	r3, #0
 800b206:	d04e      	beq.n	800b2a6 <USBD_MSC_Setup+0xce>
 800b208:	2b20      	cmp	r3, #32
 800b20a:	f040 80cb 	bne.w	800b3a4 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	785b      	ldrb	r3, [r3, #1]
 800b212:	2bfe      	cmp	r3, #254	; 0xfe
 800b214:	d002      	beq.n	800b21c <USBD_MSC_Setup+0x44>
 800b216:	2bff      	cmp	r3, #255	; 0xff
 800b218:	d025      	beq.n	800b266 <USBD_MSC_Setup+0x8e>
 800b21a:	e03c      	b.n	800b296 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	885b      	ldrh	r3, [r3, #2]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d119      	bne.n	800b258 <USBD_MSC_Setup+0x80>
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	88db      	ldrh	r3, [r3, #6]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d115      	bne.n	800b258 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b232:	2b00      	cmp	r3, #0
 800b234:	da10      	bge.n	800b258 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	4798      	blx	r3
 800b240:	4603      	mov	r3, r0
 800b242:	461a      	mov	r2, r3
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	2201      	movs	r2, #1
 800b24c:	4619      	mov	r1, r3
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f002 fe3d 	bl	800dece <USBD_CtlSendData>
 800b254:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b256:	e025      	b.n	800b2a4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f002 fdc6 	bl	800ddec <USBD_CtlError>
            ret = USBD_FAIL;
 800b260:	2303      	movs	r3, #3
 800b262:	75fb      	strb	r3, [r7, #23]
          break;
 800b264:	e01e      	b.n	800b2a4 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	885b      	ldrh	r3, [r3, #2]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10c      	bne.n	800b288 <USBD_MSC_Setup+0xb0>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	88db      	ldrh	r3, [r3, #6]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d108      	bne.n	800b288 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	db03      	blt.n	800b288 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f948 	bl	800b516 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b286:	e00d      	b.n	800b2a4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f002 fdae 	bl	800ddec <USBD_CtlError>
            ret = USBD_FAIL;
 800b290:	2303      	movs	r3, #3
 800b292:	75fb      	strb	r3, [r7, #23]
          break;
 800b294:	e006      	b.n	800b2a4 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f002 fda7 	bl	800ddec <USBD_CtlError>
          ret = USBD_FAIL;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	75fb      	strb	r3, [r7, #23]
          break;
 800b2a2:	bf00      	nop
      }
      break;
 800b2a4:	e085      	b.n	800b3b2 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	785b      	ldrb	r3, [r3, #1]
 800b2aa:	2b0b      	cmp	r3, #11
 800b2ac:	d871      	bhi.n	800b392 <USBD_MSC_Setup+0x1ba>
 800b2ae:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <USBD_MSC_Setup+0xdc>)
 800b2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b4:	0800b2e5 	.word	0x0800b2e5
 800b2b8:	0800b361 	.word	0x0800b361
 800b2bc:	0800b393 	.word	0x0800b393
 800b2c0:	0800b393 	.word	0x0800b393
 800b2c4:	0800b393 	.word	0x0800b393
 800b2c8:	0800b393 	.word	0x0800b393
 800b2cc:	0800b393 	.word	0x0800b393
 800b2d0:	0800b393 	.word	0x0800b393
 800b2d4:	0800b393 	.word	0x0800b393
 800b2d8:	0800b393 	.word	0x0800b393
 800b2dc:	0800b30f 	.word	0x0800b30f
 800b2e0:	0800b339 	.word	0x0800b339
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	d107      	bne.n	800b300 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b2f0:	f107 030e 	add.w	r3, r7, #14
 800b2f4:	2202      	movs	r2, #2
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f002 fde8 	bl	800dece <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2fe:	e050      	b.n	800b3a2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f002 fd72 	bl	800ddec <USBD_CtlError>
            ret = USBD_FAIL;
 800b308:	2303      	movs	r3, #3
 800b30a:	75fb      	strb	r3, [r7, #23]
          break;
 800b30c:	e049      	b.n	800b3a2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b03      	cmp	r3, #3
 800b318:	d107      	bne.n	800b32a <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	3304      	adds	r3, #4
 800b31e:	2201      	movs	r2, #1
 800b320:	4619      	mov	r1, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f002 fdd3 	bl	800dece <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b328:	e03b      	b.n	800b3a2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f002 fd5d 	bl	800ddec <USBD_CtlError>
            ret = USBD_FAIL;
 800b332:	2303      	movs	r3, #3
 800b334:	75fb      	strb	r3, [r7, #23]
          break;
 800b336:	e034      	b.n	800b3a2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b03      	cmp	r3, #3
 800b342:	d106      	bne.n	800b352 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	885b      	ldrh	r3, [r3, #2]
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	461a      	mov	r2, r3
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b350:	e027      	b.n	800b3a2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f002 fd49 	bl	800ddec <USBD_CtlError>
            ret = USBD_FAIL;
 800b35a:	2303      	movs	r3, #3
 800b35c:	75fb      	strb	r3, [r7, #23]
          break;
 800b35e:	e020      	b.n	800b3a2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d119      	bne.n	800b3a0 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	885b      	ldrh	r3, [r3, #2]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d115      	bne.n	800b3a0 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	889b      	ldrh	r3, [r3, #4]
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	4619      	mov	r1, r3
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f003 fa1b 	bl	800e7b8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	889b      	ldrh	r3, [r3, #4]
 800b386:	b2db      	uxtb	r3, r3
 800b388:	4619      	mov	r1, r3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fa82 	bl	800b894 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800b390:	e006      	b.n	800b3a0 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f002 fd29 	bl	800ddec <USBD_CtlError>
          ret = USBD_FAIL;
 800b39a:	2303      	movs	r3, #3
 800b39c:	75fb      	strb	r3, [r7, #23]
          break;
 800b39e:	e000      	b.n	800b3a2 <USBD_MSC_Setup+0x1ca>
          break;
 800b3a0:	bf00      	nop
      }
      break;
 800b3a2:	e006      	b.n	800b3b2 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f002 fd20 	bl	800ddec <USBD_CtlError>
      ret = USBD_FAIL;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3718      	adds	r7, #24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800b3c8:	78fb      	ldrb	r3, [r7, #3]
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 f8dc 	bl	800b58a <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800b3e8:	78fb      	ldrb	r3, [r7, #3]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 f902 	bl	800b5f6 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2220      	movs	r2, #32
 800b408:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800b40a:	4b03      	ldr	r3, [pc, #12]	; (800b418 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	20000044 	.word	0x20000044

0800b41c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2220      	movs	r2, #32
 800b428:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800b42a:	4b03      	ldr	r3, [pc, #12]	; (800b438 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	20000064 	.word	0x20000064

0800b43c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2220      	movs	r2, #32
 800b448:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800b44a:	4b03      	ldr	r3, [pc, #12]	; (800b458 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr
 800b458:	20000084 	.word	0x20000084

0800b45c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	220a      	movs	r2, #10
 800b468:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800b46a:	4b03      	ldr	r3, [pc, #12]	; (800b478 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	200000a4 	.word	0x200000a4

0800b47c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e004      	b.n	800b49a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	370c      	adds	r7, #12
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4b4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d028      	beq.n	800b50e <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f003 f962 	bl	800e7b8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800b4f4:	2181      	movs	r1, #129	; 0x81
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f003 f95e 	bl	800e7b8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b502:	231f      	movs	r3, #31
 800b504:	2101      	movs	r1, #1
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f003 fa1f 	bl	800e94a <USBD_LL_PrepareReceive>
 800b50c:	e000      	b.n	800b510 <MSC_BOT_Init+0x6a>
    return;
 800b50e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b524:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d016      	beq.n	800b55a <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2201      	movs	r2, #1
 800b536:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800b538:	2181      	movs	r1, #129	; 0x81
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f003 f97a 	bl	800e834 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800b540:	2101      	movs	r1, #1
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f003 f976 	bl	800e834 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b54e:	231f      	movs	r3, #31
 800b550:	2101      	movs	r1, #1
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f003 f9f9 	bl	800e94a <USBD_LL_PrepareReceive>
 800b558:	e000      	b.n	800b55c <MSC_BOT_Reset+0x46>
    return;
 800b55a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800b562:	b480      	push	{r7}
 800b564:	b085      	sub	sp, #20
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b570:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	721a      	strb	r2, [r3, #8]
  }
}
 800b57e:	bf00      	nop
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	460b      	mov	r3, r1
 800b594:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b59c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d020      	beq.n	800b5e6 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	7a1b      	ldrb	r3, [r3, #8]
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d005      	beq.n	800b5b8 <MSC_BOT_DataIn+0x2e>
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	db1c      	blt.n	800b5ea <MSC_BOT_DataIn+0x60>
 800b5b0:	3b03      	subs	r3, #3
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d819      	bhi.n	800b5ea <MSC_BOT_DataIn+0x60>
 800b5b6:	e011      	b.n	800b5dc <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f992 	bl	800b8f0 <SCSI_ProcessCmd>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	da0d      	bge.n	800b5ee <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f8fb 	bl	800b7d0 <MSC_BOT_SendCSW>
      }
      break;
 800b5da:	e008      	b.n	800b5ee <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b5dc:	2100      	movs	r1, #0
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 f8f6 	bl	800b7d0 <MSC_BOT_SendCSW>
      break;
 800b5e4:	e004      	b.n	800b5f0 <MSC_BOT_DataIn+0x66>
    return;
 800b5e6:	bf00      	nop
 800b5e8:	e002      	b.n	800b5f0 <MSC_BOT_DataIn+0x66>

    default:
      break;
 800b5ea:	bf00      	nop
 800b5ec:	e000      	b.n	800b5f0 <MSC_BOT_DataIn+0x66>
      break;
 800b5ee:	bf00      	nop
  }
}
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	460b      	mov	r3, r1
 800b600:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b608:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d01c      	beq.n	800b64a <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	7a1b      	ldrb	r3, [r3, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <MSC_BOT_DataOut+0x28>
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d004      	beq.n	800b626 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800b61c:	e018      	b.n	800b650 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f81a 	bl	800b658 <MSC_BOT_CBW_Decode>
      break;
 800b624:	e014      	b.n	800b650 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b632:	461a      	mov	r2, r3
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f95b 	bl	800b8f0 <SCSI_ProcessCmd>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	da06      	bge.n	800b64e <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b640:	2101      	movs	r1, #1
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f8c4 	bl	800b7d0 <MSC_BOT_SendCSW>
      break;
 800b648:	e001      	b.n	800b64e <MSC_BOT_DataOut+0x58>
    return;
 800b64a:	bf00      	nop
 800b64c:	e000      	b.n	800b650 <MSC_BOT_DataOut+0x5a>
      break;
 800b64e:	bf00      	nop
  }
}
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
	...

0800b658 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b666:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d077      	beq.n	800b75e <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800b686:	2101      	movs	r1, #1
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f003 f97f 	bl	800e98c <USBD_LL_GetRxDataSize>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b1f      	cmp	r3, #31
 800b692:	d114      	bne.n	800b6be <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800b69a:	4a34      	ldr	r2, [pc, #208]	; (800b76c <MSC_BOT_CBW_Decode+0x114>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d10e      	bne.n	800b6be <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d809      	bhi.n	800b6be <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d004      	beq.n	800b6be <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b6ba:	2b10      	cmp	r3, #16
 800b6bc:	d90e      	bls.n	800b6dc <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b6c4:	2320      	movs	r3, #32
 800b6c6:	2205      	movs	r2, #5
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fdbc 	bl	800c246 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f8ab 	bl	800b830 <MSC_BOT_Abort>
 800b6da:	e043      	b.n	800b764 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f900 	bl	800b8f0 <SCSI_ProcessCmd>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	da0c      	bge.n	800b710 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	7a1b      	ldrb	r3, [r3, #8]
 800b6fa:	2b05      	cmp	r3, #5
 800b6fc:	d104      	bne.n	800b708 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b6fe:	2101      	movs	r1, #1
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f865 	bl	800b7d0 <MSC_BOT_SendCSW>
 800b706:	e02d      	b.n	800b764 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f891 	bl	800b830 <MSC_BOT_Abort>
 800b70e:	e029      	b.n	800b764 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	7a1b      	ldrb	r3, [r3, #8]
 800b714:	2b02      	cmp	r3, #2
 800b716:	d024      	beq.n	800b762 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d020      	beq.n	800b762 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b724:	2b03      	cmp	r3, #3
 800b726:	d01c      	beq.n	800b762 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d009      	beq.n	800b744 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f103 0110 	add.w	r1, r3, #16
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	461a      	mov	r2, r3
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f817 	bl	800b770 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800b742:	e00f      	b.n	800b764 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d104      	bne.n	800b756 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b74c:	2100      	movs	r1, #0
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f83e 	bl	800b7d0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800b754:	e006      	b.n	800b764 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f86a 	bl	800b830 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800b75c:	e002      	b.n	800b764 <MSC_BOT_CBW_Decode+0x10c>
    return;
 800b75e:	bf00      	nop
 800b760:	e000      	b.n	800b764 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 800b762:	bf00      	nop
    }
  }
}
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	43425355 	.word	0x43425355

0800b770 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b782:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	4293      	cmp	r3, r2
 800b78e:	bf28      	it	cs
 800b790:	4613      	movcs	r3, r2
 800b792:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d015      	beq.n	800b7c6 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	1ad2      	subs	r2, r2, r3
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	2204      	movs	r2, #4
 800b7b6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	2181      	movs	r1, #129	; 0x81
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f003 f8a2 	bl	800e908 <USBD_LL_Transmit>
 800b7c4:	e000      	b.n	800b7c8 <MSC_BOT_SendData+0x58>
    return;
 800b7c6:	bf00      	nop
}
 800b7c8:	3718      	adds	r7, #24
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7e2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d01b      	beq.n	800b822 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	4a0f      	ldr	r2, [pc, #60]	; (800b82c <MSC_BOT_SendCSW+0x5c>)
 800b7ee:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	78fa      	ldrb	r2, [r7, #3]
 800b7f6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800b806:	230d      	movs	r3, #13
 800b808:	2181      	movs	r1, #129	; 0x81
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f003 f87c 	bl	800e908 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b816:	231f      	movs	r3, #31
 800b818:	2101      	movs	r1, #1
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f003 f895 	bl	800e94a <USBD_LL_PrepareReceive>
 800b820:	e000      	b.n	800b824 <MSC_BOT_SendCSW+0x54>
    return;
 800b822:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	53425355 	.word	0x53425355

0800b830 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b83e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d022      	beq.n	800b88c <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10c      	bne.n	800b86a <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800b856:	2b00      	cmp	r3, #0
 800b858:	d007      	beq.n	800b86a <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d103      	bne.n	800b86a <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800b862:	2101      	movs	r1, #1
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f002 ffc6 	bl	800e7f6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800b86a:	2181      	movs	r1, #129	; 0x81
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f002 ffc2 	bl	800e7f6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	7a5b      	ldrb	r3, [r3, #9]
 800b876:	2b02      	cmp	r3, #2
 800b878:	d109      	bne.n	800b88e <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800b87a:	2181      	movs	r1, #129	; 0x81
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f002 ffba 	bl	800e7f6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800b882:	2101      	movs	r1, #1
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f002 ffb6 	bl	800e7f6 <USBD_LL_StallEP>
 800b88a:	e000      	b.n	800b88e <MSC_BOT_Abort+0x5e>
    return;
 800b88c:	bf00      	nop
  }
}
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8a6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d019      	beq.n	800b8e2 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	7a5b      	ldrb	r3, [r3, #9]
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d108      	bne.n	800b8c8 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800b8b6:	2181      	movs	r1, #129	; 0x81
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f002 ff9c 	bl	800e7f6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800b8be:	2101      	movs	r1, #1
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f002 ff98 	bl	800e7f6 <USBD_LL_StallEP>
 800b8c6:	e00f      	b.n	800b8e8 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800b8c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	da0a      	bge.n	800b8e6 <MSC_BOT_CplClrFeature+0x52>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	7a5b      	ldrb	r3, [r3, #9]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d006      	beq.n	800b8e6 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b8d8:	2101      	movs	r1, #1
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff ff78 	bl	800b7d0 <MSC_BOT_SendCSW>
 800b8e0:	e002      	b.n	800b8e8 <MSC_BOT_CplClrFeature+0x54>
    return;
 800b8e2:	bf00      	nop
 800b8e4:	e000      	b.n	800b8e8 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800b8e6:	bf00      	nop
  }
}
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b904:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 800b90c:	f04f 33ff 	mov.w	r3, #4294967295
 800b910:	e168      	b.n	800bbe4 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	2baa      	cmp	r3, #170	; 0xaa
 800b918:	f000 8144 	beq.w	800bba4 <SCSI_ProcessCmd+0x2b4>
 800b91c:	2baa      	cmp	r3, #170	; 0xaa
 800b91e:	f300 8153 	bgt.w	800bbc8 <SCSI_ProcessCmd+0x2d8>
 800b922:	2ba8      	cmp	r3, #168	; 0xa8
 800b924:	f000 812c 	beq.w	800bb80 <SCSI_ProcessCmd+0x290>
 800b928:	2ba8      	cmp	r3, #168	; 0xa8
 800b92a:	f300 814d 	bgt.w	800bbc8 <SCSI_ProcessCmd+0x2d8>
 800b92e:	2b5a      	cmp	r3, #90	; 0x5a
 800b930:	f300 80c0 	bgt.w	800bab4 <SCSI_ProcessCmd+0x1c4>
 800b934:	2b00      	cmp	r3, #0
 800b936:	f2c0 8147 	blt.w	800bbc8 <SCSI_ProcessCmd+0x2d8>
 800b93a:	2b5a      	cmp	r3, #90	; 0x5a
 800b93c:	f200 8144 	bhi.w	800bbc8 <SCSI_ProcessCmd+0x2d8>
 800b940:	a201      	add	r2, pc, #4	; (adr r2, 800b948 <SCSI_ProcessCmd+0x58>)
 800b942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b946:	bf00      	nop
 800b948:	0800babb 	.word	0x0800babb
 800b94c:	0800bbc9 	.word	0x0800bbc9
 800b950:	0800bbc9 	.word	0x0800bbc9
 800b954:	0800bacd 	.word	0x0800bacd
 800b958:	0800bbc9 	.word	0x0800bbc9
 800b95c:	0800bbc9 	.word	0x0800bbc9
 800b960:	0800bbc9 	.word	0x0800bbc9
 800b964:	0800bbc9 	.word	0x0800bbc9
 800b968:	0800bbc9 	.word	0x0800bbc9
 800b96c:	0800bbc9 	.word	0x0800bbc9
 800b970:	0800bbc9 	.word	0x0800bbc9
 800b974:	0800bbc9 	.word	0x0800bbc9
 800b978:	0800bbc9 	.word	0x0800bbc9
 800b97c:	0800bbc9 	.word	0x0800bbc9
 800b980:	0800bbc9 	.word	0x0800bbc9
 800b984:	0800bbc9 	.word	0x0800bbc9
 800b988:	0800bbc9 	.word	0x0800bbc9
 800b98c:	0800bbc9 	.word	0x0800bbc9
 800b990:	0800badf 	.word	0x0800badf
 800b994:	0800bbc9 	.word	0x0800bbc9
 800b998:	0800bbc9 	.word	0x0800bbc9
 800b99c:	0800bbc9 	.word	0x0800bbc9
 800b9a0:	0800bbc9 	.word	0x0800bbc9
 800b9a4:	0800bbc9 	.word	0x0800bbc9
 800b9a8:	0800bbc9 	.word	0x0800bbc9
 800b9ac:	0800bbc9 	.word	0x0800bbc9
 800b9b0:	0800bb15 	.word	0x0800bb15
 800b9b4:	0800baf1 	.word	0x0800baf1
 800b9b8:	0800bbc9 	.word	0x0800bbc9
 800b9bc:	0800bbc9 	.word	0x0800bbc9
 800b9c0:	0800bb03 	.word	0x0800bb03
 800b9c4:	0800bbc9 	.word	0x0800bbc9
 800b9c8:	0800bbc9 	.word	0x0800bbc9
 800b9cc:	0800bbc9 	.word	0x0800bbc9
 800b9d0:	0800bbc9 	.word	0x0800bbc9
 800b9d4:	0800bb39 	.word	0x0800bb39
 800b9d8:	0800bbc9 	.word	0x0800bbc9
 800b9dc:	0800bb4b 	.word	0x0800bb4b
 800b9e0:	0800bbc9 	.word	0x0800bbc9
 800b9e4:	0800bbc9 	.word	0x0800bbc9
 800b9e8:	0800bb6f 	.word	0x0800bb6f
 800b9ec:	0800bbc9 	.word	0x0800bbc9
 800b9f0:	0800bb93 	.word	0x0800bb93
 800b9f4:	0800bbc9 	.word	0x0800bbc9
 800b9f8:	0800bbc9 	.word	0x0800bbc9
 800b9fc:	0800bbc9 	.word	0x0800bbc9
 800ba00:	0800bbc9 	.word	0x0800bbc9
 800ba04:	0800bbb7 	.word	0x0800bbb7
 800ba08:	0800bbc9 	.word	0x0800bbc9
 800ba0c:	0800bbc9 	.word	0x0800bbc9
 800ba10:	0800bbc9 	.word	0x0800bbc9
 800ba14:	0800bbc9 	.word	0x0800bbc9
 800ba18:	0800bbc9 	.word	0x0800bbc9
 800ba1c:	0800bbc9 	.word	0x0800bbc9
 800ba20:	0800bbc9 	.word	0x0800bbc9
 800ba24:	0800bbc9 	.word	0x0800bbc9
 800ba28:	0800bbc9 	.word	0x0800bbc9
 800ba2c:	0800bbc9 	.word	0x0800bbc9
 800ba30:	0800bbc9 	.word	0x0800bbc9
 800ba34:	0800bbc9 	.word	0x0800bbc9
 800ba38:	0800bbc9 	.word	0x0800bbc9
 800ba3c:	0800bbc9 	.word	0x0800bbc9
 800ba40:	0800bbc9 	.word	0x0800bbc9
 800ba44:	0800bbc9 	.word	0x0800bbc9
 800ba48:	0800bbc9 	.word	0x0800bbc9
 800ba4c:	0800bbc9 	.word	0x0800bbc9
 800ba50:	0800bbc9 	.word	0x0800bbc9
 800ba54:	0800bbc9 	.word	0x0800bbc9
 800ba58:	0800bbc9 	.word	0x0800bbc9
 800ba5c:	0800bbc9 	.word	0x0800bbc9
 800ba60:	0800bbc9 	.word	0x0800bbc9
 800ba64:	0800bbc9 	.word	0x0800bbc9
 800ba68:	0800bbc9 	.word	0x0800bbc9
 800ba6c:	0800bbc9 	.word	0x0800bbc9
 800ba70:	0800bbc9 	.word	0x0800bbc9
 800ba74:	0800bbc9 	.word	0x0800bbc9
 800ba78:	0800bbc9 	.word	0x0800bbc9
 800ba7c:	0800bbc9 	.word	0x0800bbc9
 800ba80:	0800bbc9 	.word	0x0800bbc9
 800ba84:	0800bbc9 	.word	0x0800bbc9
 800ba88:	0800bbc9 	.word	0x0800bbc9
 800ba8c:	0800bbc9 	.word	0x0800bbc9
 800ba90:	0800bbc9 	.word	0x0800bbc9
 800ba94:	0800bbc9 	.word	0x0800bbc9
 800ba98:	0800bbc9 	.word	0x0800bbc9
 800ba9c:	0800bbc9 	.word	0x0800bbc9
 800baa0:	0800bbc9 	.word	0x0800bbc9
 800baa4:	0800bbc9 	.word	0x0800bbc9
 800baa8:	0800bbc9 	.word	0x0800bbc9
 800baac:	0800bbc9 	.word	0x0800bbc9
 800bab0:	0800bb27 	.word	0x0800bb27
 800bab4:	2b9e      	cmp	r3, #158	; 0x9e
 800bab6:	d051      	beq.n	800bb5c <SCSI_ProcessCmd+0x26c>
 800bab8:	e086      	b.n	800bbc8 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800baba:	7afb      	ldrb	r3, [r7, #11]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4619      	mov	r1, r3
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 f893 	bl	800bbec <SCSI_TestUnitReady>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]
      break;
 800baca:	e089      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800bacc:	7afb      	ldrb	r3, [r7, #11]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	4619      	mov	r1, r3
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f000 fb38 	bl	800c148 <SCSI_RequestSense>
 800bad8:	4603      	mov	r3, r0
 800bada:	75fb      	strb	r3, [r7, #23]
      break;
 800badc:	e080      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800bade:	7afb      	ldrb	r3, [r7, #11]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	4619      	mov	r1, r3
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 f8d1 	bl	800bc8c <SCSI_Inquiry>
 800baea:	4603      	mov	r3, r0
 800baec:	75fb      	strb	r3, [r7, #23]
      break;
 800baee:	e077      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800baf0:	7afb      	ldrb	r3, [r7, #11]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	4619      	mov	r1, r3
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 fbec 	bl	800c2d4 <SCSI_StartStopUnit>
 800bafc:	4603      	mov	r3, r0
 800bafe:	75fb      	strb	r3, [r7, #23]
      break;
 800bb00:	e06e      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800bb02:	7afb      	ldrb	r3, [r7, #11]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	4619      	mov	r1, r3
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f000 fc34 	bl	800c376 <SCSI_AllowPreventRemovable>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	75fb      	strb	r3, [r7, #23]
      break;
 800bb12:	e065      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800bb14:	7afb      	ldrb	r3, [r7, #11]
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f000 fabc 	bl	800c098 <SCSI_ModeSense6>
 800bb20:	4603      	mov	r3, r0
 800bb22:	75fb      	strb	r3, [r7, #23]
      break;
 800bb24:	e05c      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800bb26:	7afb      	ldrb	r3, [r7, #11]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f000 fadf 	bl	800c0f0 <SCSI_ModeSense10>
 800bb32:	4603      	mov	r3, r0
 800bb34:	75fb      	strb	r3, [r7, #23]
      break;
 800bb36:	e053      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800bb38:	7afb      	ldrb	r3, [r7, #11]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 fa37 	bl	800bfb2 <SCSI_ReadFormatCapacity>
 800bb44:	4603      	mov	r3, r0
 800bb46:	75fb      	strb	r3, [r7, #23]
      break;
 800bb48:	e04a      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800bb4a:	7afb      	ldrb	r3, [r7, #11]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 f90f 	bl	800bd74 <SCSI_ReadCapacity10>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75fb      	strb	r3, [r7, #23]
      break;
 800bb5a:	e041      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800bb5c:	7afb      	ldrb	r3, [r7, #11]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	4619      	mov	r1, r3
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f000 f97b 	bl	800be5e <SCSI_ReadCapacity16>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb6c:	e038      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800bb6e:	7afb      	ldrb	r3, [r7, #11]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	4619      	mov	r1, r3
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 fc27 	bl	800c3c8 <SCSI_Read10>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	75fb      	strb	r3, [r7, #23]
      break;
 800bb7e:	e02f      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800bb80:	7afb      	ldrb	r3, [r7, #11]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	4619      	mov	r1, r3
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 fcbe 	bl	800c508 <SCSI_Read12>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	75fb      	strb	r3, [r7, #23]
      break;
 800bb90:	e026      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800bb92:	7afb      	ldrb	r3, [r7, #11]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	4619      	mov	r1, r3
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f000 fd60 	bl	800c65e <SCSI_Write10>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	75fb      	strb	r3, [r7, #23]
      break;
 800bba2:	e01d      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800bba4:	7afb      	ldrb	r3, [r7, #11]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f000 fe1c 	bl	800c7e8 <SCSI_Write12>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	75fb      	strb	r3, [r7, #23]
      break;
 800bbb4:	e014      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800bbb6:	7afb      	ldrb	r3, [r7, #11]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f000 fee8 	bl	800c992 <SCSI_Verify10>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	75fb      	strb	r3, [r7, #23]
      break;
 800bbc6:	e00b      	b.n	800bbe0 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800bbc8:	7af9      	ldrb	r1, [r7, #11]
 800bbca:	2320      	movs	r3, #32
 800bbcc:	2205      	movs	r2, #5
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f000 fb39 	bl	800c246 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800bbda:	23ff      	movs	r3, #255	; 0xff
 800bbdc:	75fb      	strb	r3, [r7, #23]
      break;
 800bbde:	bf00      	nop
  }

  return ret;
 800bbe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc00:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d102      	bne.n	800bc0e <SCSI_TestUnitReady+0x22>
  {
    return -1;
 800bc08:	f04f 33ff 	mov.w	r3, #4294967295
 800bc0c:	e03a      	b.n	800bc84 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00a      	beq.n	800bc2e <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bc1e:	2320      	movs	r3, #32
 800bc20:	2205      	movs	r2, #5
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f000 fb0f 	bl	800c246 <SCSI_SenseCode>

    return -1;
 800bc28:	f04f 33ff 	mov.w	r3, #4294967295
 800bc2c:	e02a      	b.n	800bc84 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d10b      	bne.n	800bc50 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bc38:	7af9      	ldrb	r1, [r7, #11]
 800bc3a:	233a      	movs	r3, #58	; 0x3a
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f000 fb01 	bl	800c246 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	2205      	movs	r2, #5
 800bc48:	721a      	strb	r2, [r3, #8]
    return -1;
 800bc4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc4e:	e019      	b.n	800bc84 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	7afa      	ldrb	r2, [r7, #11]
 800bc5a:	4610      	mov	r0, r2
 800bc5c:	4798      	blx	r3
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00b      	beq.n	800bc7c <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bc64:	7af9      	ldrb	r1, [r7, #11]
 800bc66:	233a      	movs	r3, #58	; 0x3a
 800bc68:	2202      	movs	r2, #2
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f000 faeb 	bl	800c246 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2205      	movs	r2, #5
 800bc74:	721a      	strb	r2, [r3, #8]

    return -1;
 800bc76:	f04f 33ff 	mov.w	r3, #4294967295
 800bc7a:	e003      	b.n	800bc84 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	60da      	str	r2, [r3, #12]

  return 0;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b088      	sub	sp, #32
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	460b      	mov	r3, r1
 800bc96:	607a      	str	r2, [r7, #4]
 800bc98:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bca0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d102      	bne.n	800bcae <SCSI_Inquiry+0x22>
  {
    return -1;
 800bca8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcac:	e05a      	b.n	800bd64 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10a      	bne.n	800bcce <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bcbe:	2320      	movs	r3, #32
 800bcc0:	2205      	movs	r2, #5
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f000 fabf 	bl	800c246 <SCSI_SenseCode>
    return -1;
 800bcc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bccc:	e04a      	b.n	800bd64 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	f003 0301 	and.w	r3, r3, #1
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d020      	beq.n	800bd1e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	3302      	adds	r3, #2
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d105      	bne.n	800bcf2 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800bce6:	2206      	movs	r2, #6
 800bce8:	4920      	ldr	r1, [pc, #128]	; (800bd6c <SCSI_Inquiry+0xe0>)
 800bcea:	69b8      	ldr	r0, [r7, #24]
 800bcec:	f000 ffb4 	bl	800cc58 <SCSI_UpdateBotData>
 800bcf0:	e037      	b.n	800bd62 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	3302      	adds	r3, #2
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	2b80      	cmp	r3, #128	; 0x80
 800bcfa:	d105      	bne.n	800bd08 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800bcfc:	2208      	movs	r2, #8
 800bcfe:	491c      	ldr	r1, [pc, #112]	; (800bd70 <SCSI_Inquiry+0xe4>)
 800bd00:	69b8      	ldr	r0, [r7, #24]
 800bd02:	f000 ffa9 	bl	800cc58 <SCSI_UpdateBotData>
 800bd06:	e02c      	b.n	800bd62 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bd0e:	2324      	movs	r3, #36	; 0x24
 800bd10:	2205      	movs	r2, #5
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f000 fa97 	bl	800c246 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800bd18:	f04f 33ff 	mov.w	r3, #4294967295
 800bd1c:	e022      	b.n	800bd64 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd24:	69d9      	ldr	r1, [r3, #28]
 800bd26:	7afa      	ldrb	r2, [r7, #11]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	00db      	lsls	r3, r3, #3
 800bd2c:	4413      	add	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	440b      	add	r3, r1
 800bd32:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	3304      	adds	r3, #4
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	3305      	adds	r3, #5
 800bd3e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3304      	adds	r3, #4
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	8bfa      	ldrh	r2, [r7, #30]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d303      	bcc.n	800bd56 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3304      	adds	r3, #4
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800bd56:	8bfb      	ldrh	r3, [r7, #30]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	6979      	ldr	r1, [r7, #20]
 800bd5c:	69b8      	ldr	r0, [r7, #24]
 800bd5e:	f000 ff7b 	bl	800cc58 <SCSI_UpdateBotData>
  }

  return 0;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3720      	adds	r7, #32
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	200000b0 	.word	0x200000b0
 800bd70:	200000b8 	.word	0x200000b8

0800bd74 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd88:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 800bd90:	f04f 33ff 	mov.w	r3, #4294967295
 800bd94:	e05f      	b.n	800be56 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	697a      	ldr	r2, [r7, #20]
 800bda0:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800bdaa:	7af8      	ldrb	r0, [r7, #11]
 800bdac:	4798      	blx	r3
 800bdae:	4603      	mov	r3, r0
 800bdb0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800bdb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d104      	bne.n	800bdc4 <SCSI_ReadCapacity10+0x50>
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d108      	bne.n	800bdd6 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bdc4:	7af9      	ldrb	r1, [r7, #11]
 800bdc6:	233a      	movs	r3, #58	; 0x3a
 800bdc8:	2202      	movs	r2, #2
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f000 fa3b 	bl	800c246 <SCSI_SenseCode>
    return -1;
 800bdd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd4:	e03f      	b.n	800be56 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bddc:	3b01      	subs	r3, #1
 800bdde:	0e1b      	lsrs	r3, r3, #24
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bdec:	3b01      	subs	r3, #1
 800bdee:	0c1b      	lsrs	r3, r3, #16
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	0a1b      	lsrs	r3, r3, #8
 800be00:	b2da      	uxtb	r2, r3
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	3b01      	subs	r3, #1
 800be10:	b2da      	uxtb	r2, r3
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be1c:	161b      	asrs	r3, r3, #24
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be2a:	141b      	asrs	r3, r3, #16
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be38:	0a1b      	lsrs	r3, r3, #8
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	2208      	movs	r2, #8
 800be52:	60da      	str	r2, [r3, #12]

  return 0;
 800be54:	2300      	movs	r3, #0

}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b088      	sub	sp, #32
 800be62:	af00      	add	r7, sp, #0
 800be64:	60f8      	str	r0, [r7, #12]
 800be66:	460b      	mov	r3, r1
 800be68:	607a      	str	r2, [r7, #4]
 800be6a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be72:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d102      	bne.n	800be80 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800be7a:	f04f 33ff 	mov.w	r3, #4294967295
 800be7e:	e094      	b.n	800bfaa <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800be8e:	69ba      	ldr	r2, [r7, #24]
 800be90:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800be94:	7af8      	ldrb	r0, [r7, #11]
 800be96:	4798      	blx	r3
 800be98:	4603      	mov	r3, r0
 800be9a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800be9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d104      	bne.n	800beae <SCSI_ReadCapacity16+0x50>
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d108      	bne.n	800bec0 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800beae:	7af9      	ldrb	r1, [r7, #11]
 800beb0:	233a      	movs	r3, #58	; 0x3a
 800beb2:	2202      	movs	r2, #2
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f000 f9c6 	bl	800c246 <SCSI_SenseCode>
    return -1;
 800beba:	f04f 33ff 	mov.w	r3, #4294967295
 800bebe:	e074      	b.n	800bfaa <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	330a      	adds	r3, #10
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	330b      	adds	r3, #11
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bed0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	330c      	adds	r3, #12
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800beda:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	320d      	adds	r2, #13
 800bee0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800bee2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800bee8:	2300      	movs	r3, #0
 800beea:	77fb      	strb	r3, [r7, #31]
 800beec:	e007      	b.n	800befe <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 800beee:	7ffb      	ldrb	r3, [r7, #31]
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	4413      	add	r3, r2
 800bef4:	2200      	movs	r2, #0
 800bef6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800bef8:	7ffb      	ldrb	r3, [r7, #31]
 800befa:	3301      	adds	r3, #1
 800befc:	77fb      	strb	r3, [r7, #31]
 800befe:	7ffa      	ldrb	r2, [r7, #31]
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d3f2      	bcc.n	800beee <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	0e1b      	lsrs	r3, r3, #24
 800bf12:	b2da      	uxtb	r2, r3
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	0c1b      	lsrs	r3, r3, #16
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	0a1b      	lsrs	r3, r3, #8
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	3b01      	subs	r3, #1
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf4e:	161b      	asrs	r3, r3, #24
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf5c:	141b      	asrs	r3, r3, #16
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf6a:	0a1b      	lsrs	r3, r3, #8
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	330a      	adds	r3, #10
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	330b      	adds	r3, #11
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bf90:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	330c      	adds	r3, #12
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800bf9a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	320d      	adds	r2, #13
 800bfa0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800bfa2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	60da      	str	r2, [r3, #12]

  return 0;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3720      	adds	r7, #32
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b088      	sub	sp, #32
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	60f8      	str	r0, [r7, #12]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	607a      	str	r2, [r7, #4]
 800bfbe:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfc6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d102      	bne.n	800bfd4 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800bfce:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd2:	e05c      	b.n	800c08e <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	f107 0214 	add.w	r2, r7, #20
 800bfe0:	f107 0110 	add.w	r1, r7, #16
 800bfe4:	7af8      	ldrb	r0, [r7, #11]
 800bfe6:	4798      	blx	r3
 800bfe8:	4603      	mov	r3, r0
 800bfea:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800bfec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <SCSI_ReadFormatCapacity+0x4c>
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800bffa:	2b02      	cmp	r3, #2
 800bffc:	d108      	bne.n	800c010 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bffe:	7af9      	ldrb	r1, [r7, #11]
 800c000:	233a      	movs	r3, #58	; 0x3a
 800c002:	2202      	movs	r2, #2
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f000 f91e 	bl	800c246 <SCSI_SenseCode>
    return -1;
 800c00a:	f04f 33ff 	mov.w	r3, #4294967295
 800c00e:	e03e      	b.n	800c08e <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 800c010:	2300      	movs	r3, #0
 800c012:	83fb      	strh	r3, [r7, #30]
 800c014:	e007      	b.n	800c026 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 800c016:	8bfb      	ldrh	r3, [r7, #30]
 800c018:	69ba      	ldr	r2, [r7, #24]
 800c01a:	4413      	add	r3, r2
 800c01c:	2200      	movs	r2, #0
 800c01e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800c020:	8bfb      	ldrh	r3, [r7, #30]
 800c022:	3301      	adds	r3, #1
 800c024:	83fb      	strh	r3, [r7, #30]
 800c026:	8bfb      	ldrh	r3, [r7, #30]
 800c028:	2b0b      	cmp	r3, #11
 800c02a:	d9f4      	bls.n	800c016 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	2208      	movs	r2, #8
 800c030:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	3b01      	subs	r3, #1
 800c036:	0e1b      	lsrs	r3, r3, #24
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	3b01      	subs	r3, #1
 800c042:	0c1b      	lsrs	r3, r3, #16
 800c044:	b2da      	uxtb	r2, r3
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	3b01      	subs	r3, #1
 800c04e:	0a1b      	lsrs	r3, r3, #8
 800c050:	b2da      	uxtb	r2, r3
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	3b01      	subs	r3, #1
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	2202      	movs	r2, #2
 800c066:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800c068:	8abb      	ldrh	r3, [r7, #20]
 800c06a:	141b      	asrs	r3, r3, #16
 800c06c:	b2da      	uxtb	r2, r3
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800c072:	8abb      	ldrh	r3, [r7, #20]
 800c074:	0a1b      	lsrs	r3, r3, #8
 800c076:	b29b      	uxth	r3, r3
 800c078:	b2da      	uxtb	r2, r3
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800c07e:	8abb      	ldrh	r3, [r7, #20]
 800c080:	b2da      	uxtb	r2, r3
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	220c      	movs	r2, #12
 800c08a:	60da      	str	r2, [r3, #12]

  return 0;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3720      	adds	r7, #32
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
	...

0800c098 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b086      	sub	sp, #24
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	607a      	str	r2, [r7, #4]
 800c0a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0ac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800c0ae:	2317      	movs	r3, #23
 800c0b0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d102      	bne.n	800c0be <SCSI_ModeSense6+0x26>
  {
    return -1;
 800c0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0bc:	e011      	b.n	800c0e2 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	8afa      	ldrh	r2, [r7, #22]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d303      	bcc.n	800c0d4 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3304      	adds	r3, #4
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800c0d4:	8afb      	ldrh	r3, [r7, #22]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	4904      	ldr	r1, [pc, #16]	; (800c0ec <SCSI_ModeSense6+0x54>)
 800c0da:	6938      	ldr	r0, [r7, #16]
 800c0dc:	f000 fdbc 	bl	800cc58 <SCSI_UpdateBotData>

  return 0;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	200000c0 	.word	0x200000c0

0800c0f0 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	607a      	str	r2, [r7, #4]
 800c0fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c104:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800c106:	231b      	movs	r3, #27
 800c108:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d102      	bne.n	800c116 <SCSI_ModeSense10+0x26>
  {
    return -1;
 800c110:	f04f 33ff 	mov.w	r3, #4294967295
 800c114:	e011      	b.n	800c13a <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3308      	adds	r3, #8
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	8afa      	ldrh	r2, [r7, #22]
 800c120:	429a      	cmp	r2, r3
 800c122:	d303      	bcc.n	800c12c <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3308      	adds	r3, #8
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800c12c:	8afb      	ldrh	r3, [r7, #22]
 800c12e:	461a      	mov	r2, r3
 800c130:	4904      	ldr	r1, [pc, #16]	; (800c144 <SCSI_ModeSense10+0x54>)
 800c132:	6938      	ldr	r0, [r7, #16]
 800c134:	f000 fd90 	bl	800cc58 <SCSI_UpdateBotData>

  return 0;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3718      	adds	r7, #24
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	200000d8 	.word	0x200000d8

0800c148 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	460b      	mov	r3, r1
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c15c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d102      	bne.n	800c16a <SCSI_RequestSense+0x22>
  {
    return -1;
 800c164:	f04f 33ff 	mov.w	r3, #4294967295
 800c168:	e069      	b.n	800c23e <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10a      	bne.n	800c18a <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c17a:	2320      	movs	r3, #32
 800c17c:	2205      	movs	r2, #5
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 f861 	bl	800c246 <SCSI_SenseCode>
    return -1;
 800c184:	f04f 33ff 	mov.w	r3, #4294967295
 800c188:	e059      	b.n	800c23e <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c18a:	2300      	movs	r3, #0
 800c18c:	75fb      	strb	r3, [r7, #23]
 800c18e:	e007      	b.n	800c1a0 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	4413      	add	r3, r2
 800c196:	2200      	movs	r2, #0
 800c198:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	3301      	adds	r3, #1
 800c19e:	75fb      	strb	r3, [r7, #23]
 800c1a0:	7dfb      	ldrb	r3, [r7, #23]
 800c1a2:	2b11      	cmp	r3, #17
 800c1a4:	d9f4      	bls.n	800c190 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	2270      	movs	r2, #112	; 0x70
 800c1aa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	220c      	movs	r2, #12
 800c1b0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d02e      	beq.n	800c220 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	3248      	adds	r2, #72	; 0x48
 800c1ce:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	3348      	adds	r3, #72	; 0x48
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	4413      	add	r3, r2
 800c1e4:	791a      	ldrb	r2, [r3, #4]
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	3348      	adds	r3, #72	; 0x48
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	4413      	add	r3, r2
 800c1f8:	795a      	ldrb	r2, [r3, #5]
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c204:	3301      	adds	r3, #1
 800c206:	b2da      	uxtb	r2, r3
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c214:	2b04      	cmp	r3, #4
 800c216:	d103      	bne.n	800c220 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	2212      	movs	r2, #18
 800c224:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	3304      	adds	r3, #4
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b12      	cmp	r3, #18
 800c22e:	d805      	bhi.n	800c23c <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	3304      	adds	r3, #4
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	461a      	mov	r2, r3
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3718      	adds	r7, #24
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800c246:	b480      	push	{r7}
 800c248:	b085      	sub	sp, #20
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	4608      	mov	r0, r1
 800c250:	4611      	mov	r1, r2
 800c252:	461a      	mov	r2, r3
 800c254:	4603      	mov	r3, r0
 800c256:	70fb      	strb	r3, [r7, #3]
 800c258:	460b      	mov	r3, r1
 800c25a:	70bb      	strb	r3, [r7, #2]
 800c25c:	4613      	mov	r3, r2
 800c25e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c266:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d02c      	beq.n	800c2c8 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c274:	461a      	mov	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3248      	adds	r2, #72	; 0x48
 800c27a:	78b9      	ldrb	r1, [r7, #2]
 800c27c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	3348      	adds	r3, #72	; 0x48
 800c28a:	00db      	lsls	r3, r3, #3
 800c28c:	4413      	add	r3, r2
 800c28e:	787a      	ldrb	r2, [r7, #1]
 800c290:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	3348      	adds	r3, #72	; 0x48
 800c29c:	00db      	lsls	r3, r3, #3
 800c29e:	4413      	add	r3, r2
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c2ba:	2b04      	cmp	r3, #4
 800c2bc:	d105      	bne.n	800c2ca <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800c2c6:	e000      	b.n	800c2ca <SCSI_SenseCode+0x84>
    return;
 800c2c8:	bf00      	nop
  }
}
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	607a      	str	r2, [r7, #4]
 800c2e0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2e8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d102      	bne.n	800c2f6 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800c2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f4:	e03b      	b.n	800c36e <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d10f      	bne.n	800c320 <SCSI_StartStopUnit+0x4c>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	3304      	adds	r3, #4
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	f003 0303 	and.w	r3, r3, #3
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d108      	bne.n	800c320 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c30e:	7af9      	ldrb	r1, [r7, #11]
 800c310:	2324      	movs	r3, #36	; 0x24
 800c312:	2205      	movs	r2, #5
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f7ff ff96 	bl	800c246 <SCSI_SenseCode>

    return -1;
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
 800c31e:	e026      	b.n	800c36e <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3304      	adds	r3, #4
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	f003 0303 	and.w	r3, r3, #3
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d104      	bne.n	800c338 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2200      	movs	r2, #0
 800c332:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c336:	e016      	b.n	800c366 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	3304      	adds	r3, #4
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	f003 0303 	and.w	r3, r3, #3
 800c342:	2b02      	cmp	r3, #2
 800c344:	d104      	bne.n	800c350 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2202      	movs	r2, #2
 800c34a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c34e:	e00a      	b.n	800c366 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3304      	adds	r3, #4
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	f003 0303 	and.w	r3, r3, #3
 800c35a:	2b03      	cmp	r3, #3
 800c35c:	d103      	bne.n	800c366 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	2200      	movs	r2, #0
 800c362:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	2200      	movs	r2, #0
 800c36a:	60da      	str	r2, [r3, #12]

  return 0;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c376:	b480      	push	{r7}
 800c378:	b087      	sub	sp, #28
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	460b      	mov	r3, r1
 800c380:	607a      	str	r2, [r7, #4]
 800c382:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c38a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d102      	bne.n	800c398 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800c392:	f04f 33ff 	mov.w	r3, #4294967295
 800c396:	e011      	b.n	800c3bc <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	3304      	adds	r3, #4
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d104      	bne.n	800c3ac <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c3aa:	e003      	b.n	800c3b4 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	60da      	str	r2, [r3, #12]

  return 0;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	371c      	adds	r7, #28
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3dc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d102      	bne.n	800c3ea <SCSI_Read10+0x22>
  {
    return -1;
 800c3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e8:	e08a      	b.n	800c500 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	7a1b      	ldrb	r3, [r3, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d17c      	bne.n	800c4ec <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c3f8:	b25b      	sxtb	r3, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	db0a      	blt.n	800c414 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c404:	2320      	movs	r3, #32
 800c406:	2205      	movs	r2, #5
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f7ff ff1c 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c40e:	f04f 33ff 	mov.w	r3, #4294967295
 800c412:	e075      	b.n	800c500 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d108      	bne.n	800c430 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c41e:	7af9      	ldrb	r1, [r7, #11]
 800c420:	233a      	movs	r3, #58	; 0x3a
 800c422:	2202      	movs	r2, #2
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f7ff ff0e 	bl	800c246 <SCSI_SenseCode>

      return -1;
 800c42a:	f04f 33ff 	mov.w	r3, #4294967295
 800c42e:	e067      	b.n	800c500 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	7afa      	ldrb	r2, [r7, #11]
 800c43a:	4610      	mov	r0, r2
 800c43c:	4798      	blx	r3
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d008      	beq.n	800c456 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c444:	7af9      	ldrb	r1, [r7, #11]
 800c446:	233a      	movs	r3, #58	; 0x3a
 800c448:	2202      	movs	r2, #2
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f7ff fefb 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c450:	f04f 33ff 	mov.w	r3, #4294967295
 800c454:	e054      	b.n	800c500 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3302      	adds	r3, #2
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3303      	adds	r3, #3
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c466:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	3304      	adds	r3, #4
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c470:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	3205      	adds	r2, #5
 800c476:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c478:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	3307      	adds	r3, #7
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	021b      	lsls	r3, r3, #8
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	3208      	adds	r2, #8
 800c48c:	7812      	ldrb	r2, [r2, #0]
 800c48e:	431a      	orrs	r2, r3
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c4a2:	7af9      	ldrb	r1, [r7, #11]
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f000 faad 	bl	800ca04 <SCSI_CheckAddressRange>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	da02      	bge.n	800c4b6 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b4:	e024      	b.n	800c500 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c4c2:	6979      	ldr	r1, [r7, #20]
 800c4c4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800c4c8:	fb01 f303 	mul.w	r3, r1, r3
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d00a      	beq.n	800c4e6 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c4d6:	2320      	movs	r3, #32
 800c4d8:	2205      	movs	r2, #5
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f7ff feb3 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e4:	e00c      	b.n	800c500 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2202      	movs	r2, #2
 800c4ea:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4f2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c4f4:	7afb      	ldrb	r3, [r7, #11]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f000 faab 	bl	800ca54 <SCSI_ProcessRead>
 800c4fe:	4603      	mov	r3, r0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	460b      	mov	r3, r1
 800c512:	607a      	str	r2, [r7, #4]
 800c514:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c51c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d102      	bne.n	800c52a <SCSI_Read12+0x22>
  {
    return -1;
 800c524:	f04f 33ff 	mov.w	r3, #4294967295
 800c528:	e095      	b.n	800c656 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	7a1b      	ldrb	r3, [r3, #8]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f040 8087 	bne.w	800c642 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c53a:	b25b      	sxtb	r3, r3
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	db0a      	blt.n	800c556 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c546:	2320      	movs	r3, #32
 800c548:	2205      	movs	r2, #5
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f7ff fe7b 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c550:	f04f 33ff 	mov.w	r3, #4294967295
 800c554:	e07f      	b.n	800c656 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c55c:	2b02      	cmp	r3, #2
 800c55e:	d108      	bne.n	800c572 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c560:	7af9      	ldrb	r1, [r7, #11]
 800c562:	233a      	movs	r3, #58	; 0x3a
 800c564:	2202      	movs	r2, #2
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff fe6d 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c56c:	f04f 33ff 	mov.w	r3, #4294967295
 800c570:	e071      	b.n	800c656 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	7afa      	ldrb	r2, [r7, #11]
 800c57c:	4610      	mov	r0, r2
 800c57e:	4798      	blx	r3
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d008      	beq.n	800c598 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c586:	7af9      	ldrb	r1, [r7, #11]
 800c588:	233a      	movs	r3, #58	; 0x3a
 800c58a:	2202      	movs	r2, #2
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f7ff fe5a 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c592:	f04f 33ff 	mov.w	r3, #4294967295
 800c596:	e05e      	b.n	800c656 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	3302      	adds	r3, #2
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3303      	adds	r3, #3
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c5a8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c5b2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	3205      	adds	r2, #5
 800c5b8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c5ba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	3306      	adds	r3, #6
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	3307      	adds	r3, #7
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c5d2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3308      	adds	r3, #8
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800c5dc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	3209      	adds	r2, #9
 800c5e2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800c5e4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c5f8:	7af9      	ldrb	r1, [r7, #11]
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f000 fa02 	bl	800ca04 <SCSI_CheckAddressRange>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	da02      	bge.n	800c60c <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c606:	f04f 33ff 	mov.w	r3, #4294967295
 800c60a:	e024      	b.n	800c656 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c618:	6979      	ldr	r1, [r7, #20]
 800c61a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800c61e:	fb01 f303 	mul.w	r3, r1, r3
 800c622:	429a      	cmp	r2, r3
 800c624:	d00a      	beq.n	800c63c <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c62c:	2320      	movs	r3, #32
 800c62e:	2205      	movs	r2, #5
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f7ff fe08 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c636:	f04f 33ff 	mov.w	r3, #4294967295
 800c63a:	e00c      	b.n	800c656 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	2202      	movs	r2, #2
 800c640:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c648:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c64a:	7afb      	ldrb	r3, [r7, #11]
 800c64c:	4619      	mov	r1, r3
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f000 fa00 	bl	800ca54 <SCSI_ProcessRead>
 800c654:	4603      	mov	r3, r0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3718      	adds	r7, #24
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b086      	sub	sp, #24
 800c662:	af00      	add	r7, sp, #0
 800c664:	60f8      	str	r0, [r7, #12]
 800c666:	460b      	mov	r3, r1
 800c668:	607a      	str	r2, [r7, #4]
 800c66a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c672:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d102      	bne.n	800c680 <SCSI_Write10+0x22>
  {
    return -1;
 800c67a:	f04f 33ff 	mov.w	r3, #4294967295
 800c67e:	e0af      	b.n	800c7e0 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	7a1b      	ldrb	r3, [r3, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	f040 80a5 	bne.w	800c7d4 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c690:	2b00      	cmp	r3, #0
 800c692:	d10a      	bne.n	800c6aa <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c69a:	2320      	movs	r3, #32
 800c69c:	2205      	movs	r2, #5
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f7ff fdd1 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a8:	e09a      	b.n	800c7e0 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c6b0:	b25b      	sxtb	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	da0a      	bge.n	800c6cc <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c6bc:	2320      	movs	r3, #32
 800c6be:	2205      	movs	r2, #5
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f7ff fdc0 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ca:	e089      	b.n	800c7e0 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	7afa      	ldrb	r2, [r7, #11]
 800c6d6:	4610      	mov	r0, r2
 800c6d8:	4798      	blx	r3
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d008      	beq.n	800c6f2 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c6e0:	7af9      	ldrb	r1, [r7, #11]
 800c6e2:	233a      	movs	r3, #58	; 0x3a
 800c6e4:	2202      	movs	r2, #2
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f7ff fdad 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f0:	e076      	b.n	800c7e0 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	7afa      	ldrb	r2, [r7, #11]
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	4798      	blx	r3
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d008      	beq.n	800c718 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c706:	7af9      	ldrb	r1, [r7, #11]
 800c708:	2327      	movs	r3, #39	; 0x27
 800c70a:	2202      	movs	r2, #2
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f7ff fd9a 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c712:	f04f 33ff 	mov.w	r3, #4294967295
 800c716:	e063      	b.n	800c7e0 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	3302      	adds	r3, #2
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	3303      	adds	r3, #3
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c728:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	3304      	adds	r3, #4
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c732:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	3205      	adds	r2, #5
 800c738:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c73a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	3307      	adds	r3, #7
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	3208      	adds	r2, #8
 800c74e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c750:	431a      	orrs	r2, r3
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c764:	7af9      	ldrb	r1, [r7, #11]
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f000 f94c 	bl	800ca04 <SCSI_CheckAddressRange>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	da02      	bge.n	800c778 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c772:	f04f 33ff 	mov.w	r3, #4294967295
 800c776:	e033      	b.n	800c7e0 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800c784:	fb02 f303 	mul.w	r3, r2, r3
 800c788:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c790:	693a      	ldr	r2, [r7, #16]
 800c792:	429a      	cmp	r2, r3
 800c794:	d00a      	beq.n	800c7ac <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c79c:	2320      	movs	r3, #32
 800c79e:	2205      	movs	r2, #5
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f7ff fd50 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7aa:	e019      	b.n	800c7e0 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7b2:	bf28      	it	cs
 800c7b4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800c7b8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	f103 0210 	add.w	r2, r3, #16
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	2101      	movs	r1, #1
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f002 f8bd 	bl	800e94a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	e005      	b.n	800c7e0 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 800c7d4:	7afb      	ldrb	r3, [r7, #11]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 f9b4 	bl	800cb46 <SCSI_ProcessWrite>
 800c7de:	4603      	mov	r3, r0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3718      	adds	r7, #24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	607a      	str	r2, [r7, #4]
 800c7f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7fc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d102      	bne.n	800c80a <SCSI_Write12+0x22>
  {
    return -1;
 800c804:	f04f 33ff 	mov.w	r3, #4294967295
 800c808:	e0bf      	b.n	800c98a <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	7a1b      	ldrb	r3, [r3, #8]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f040 80b5 	bne.w	800c97e <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10a      	bne.n	800c834 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c824:	2320      	movs	r3, #32
 800c826:	2205      	movs	r2, #5
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff fd0c 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c82e:	f04f 33ff 	mov.w	r3, #4294967295
 800c832:	e0aa      	b.n	800c98a <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c83a:	b25b      	sxtb	r3, r3
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	da0a      	bge.n	800c856 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c846:	2320      	movs	r3, #32
 800c848:	2205      	movs	r2, #5
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f7ff fcfb 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c850:	f04f 33ff 	mov.w	r3, #4294967295
 800c854:	e099      	b.n	800c98a <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	7afa      	ldrb	r2, [r7, #11]
 800c860:	4610      	mov	r0, r2
 800c862:	4798      	blx	r3
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00b      	beq.n	800c882 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c86a:	7af9      	ldrb	r1, [r7, #11]
 800c86c:	233a      	movs	r3, #58	; 0x3a
 800c86e:	2202      	movs	r2, #2
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7ff fce8 	bl	800c246 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	2205      	movs	r2, #5
 800c87a:	721a      	strb	r2, [r3, #8]
      return -1;
 800c87c:	f04f 33ff 	mov.w	r3, #4294967295
 800c880:	e083      	b.n	800c98a <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	7afa      	ldrb	r2, [r7, #11]
 800c88c:	4610      	mov	r0, r2
 800c88e:	4798      	blx	r3
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00b      	beq.n	800c8ae <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c896:	7af9      	ldrb	r1, [r7, #11]
 800c898:	2327      	movs	r3, #39	; 0x27
 800c89a:	2202      	movs	r2, #2
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f7ff fcd2 	bl	800c246 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	2205      	movs	r2, #5
 800c8a6:	721a      	strb	r2, [r3, #8]
      return -1;
 800c8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ac:	e06d      	b.n	800c98a <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	3302      	adds	r3, #2
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	3303      	adds	r3, #3
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c8be:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c8c8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	3205      	adds	r2, #5
 800c8ce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c8d0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	3306      	adds	r3, #6
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3307      	adds	r3, #7
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c8e8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	3308      	adds	r3, #8
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800c8f2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	3209      	adds	r2, #9
 800c8f8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800c8fa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c90e:	7af9      	ldrb	r1, [r7, #11]
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f000 f877 	bl	800ca04 <SCSI_CheckAddressRange>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	da02      	bge.n	800c922 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c91c:	f04f 33ff 	mov.w	r3, #4294967295
 800c920:	e033      	b.n	800c98a <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800c92e:	fb02 f303 	mul.w	r3, r2, r3
 800c932:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c93a:	693a      	ldr	r2, [r7, #16]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d00a      	beq.n	800c956 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c946:	2320      	movs	r3, #32
 800c948:	2205      	movs	r2, #5
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f7ff fc7b 	bl	800c246 <SCSI_SenseCode>
      return -1;
 800c950:	f04f 33ff 	mov.w	r3, #4294967295
 800c954:	e019      	b.n	800c98a <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c95c:	bf28      	it	cs
 800c95e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800c962:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	2201      	movs	r2, #1
 800c968:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	f103 0210 	add.w	r2, r3, #16
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	2101      	movs	r1, #1
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	f001 ffe8 	bl	800e94a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	e005      	b.n	800c98a <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 800c97e:	7afb      	ldrb	r3, [r7, #11]
 800c980:	4619      	mov	r1, r3
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f000 f8df 	bl	800cb46 <SCSI_ProcessWrite>
 800c988:	4603      	mov	r3, r0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3718      	adds	r7, #24
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b086      	sub	sp, #24
 800c996:	af00      	add	r7, sp, #0
 800c998:	60f8      	str	r0, [r7, #12]
 800c99a:	460b      	mov	r3, r1
 800c99c:	607a      	str	r2, [r7, #4]
 800c99e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9a6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d102      	bne.n	800c9b4 <SCSI_Verify10+0x22>
  {
    return -1;
 800c9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b2:	e023      	b.n	800c9fc <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	f003 0302 	and.w	r3, r3, #2
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d008      	beq.n	800c9d4 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c9c2:	7af9      	ldrb	r1, [r7, #11]
 800c9c4:	2324      	movs	r3, #36	; 0x24
 800c9c6:	2205      	movs	r2, #5
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f7ff fc3c 	bl	800c246 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800c9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d2:	e013      	b.n	800c9fc <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c9e0:	7af9      	ldrb	r1, [r7, #11]
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f000 f80e 	bl	800ca04 <SCSI_CheckAddressRange>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	da02      	bge.n	800c9f4 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 800c9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f2:	e003      	b.n	800c9fc <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	60da      	str	r2, [r3, #12]

  return 0;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3718      	adds	r7, #24
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	607a      	str	r2, [r7, #4]
 800ca0e:	603b      	str	r3, [r7, #0]
 800ca10:	460b      	mov	r3, r1
 800ca12:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca1a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d102      	bne.n	800ca28 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800ca22:	f04f 33ff 	mov.w	r3, #4294967295
 800ca26:	e011      	b.n	800ca4c <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	441a      	add	r2, r3
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d908      	bls.n	800ca4a <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ca38:	7af9      	ldrb	r1, [r7, #11]
 800ca3a:	2321      	movs	r3, #33	; 0x21
 800ca3c:	2205      	movs	r2, #5
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f7ff fc01 	bl	800c246 <SCSI_SenseCode>
    return -1;
 800ca44:	f04f 33ff 	mov.w	r3, #4294967295
 800ca48:	e000      	b.n	800ca4c <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3718      	adds	r7, #24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800ca54:	b590      	push	{r4, r7, lr}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca66:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ca74:	fb02 f303 	mul.w	r3, r2, r3
 800ca78:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d102      	bne.n	800ca86 <SCSI_ProcessRead+0x32>
  {
    return -1;
 800ca80:	f04f 33ff 	mov.w	r3, #4294967295
 800ca84:	e05b      	b.n	800cb3e <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca8c:	bf28      	it	cs
 800ca8e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ca92:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca9a:	691c      	ldr	r4, [r3, #16]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f103 0110 	add.w	r1, r3, #16
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800caae:	4618      	mov	r0, r3
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	78f8      	ldrb	r0, [r7, #3]
 800caba:	47a0      	blx	r4
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	da08      	bge.n	800cad4 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800cac2:	78f9      	ldrb	r1, [r7, #3]
 800cac4:	2311      	movs	r3, #17
 800cac6:	2204      	movs	r2, #4
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7ff fbbc 	bl	800c246 <SCSI_SenseCode>
    return -1;
 800cace:	f04f 33ff 	mov.w	r3, #4294967295
 800cad2:	e034      	b.n	800cb3e <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f103 0210 	add.w	r2, r3, #16
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2181      	movs	r1, #129	; 0x81
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f001 ff12 	bl	800e908 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800caf0:	4619      	mov	r1, r3
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	fbb3 f3f1 	udiv	r3, r3, r1
 800caf8:	441a      	add	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb14:	1ad2      	subs	r2, r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	1ad2      	subs	r2, r2, r3
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d102      	bne.n	800cb3c <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2203      	movs	r2, #3
 800cb3a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3714      	adds	r7, #20
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd90      	pop	{r4, r7, pc}

0800cb46 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cb46:	b590      	push	{r4, r7, lr}
 800cb48:	b085      	sub	sp, #20
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
 800cb4e:	460b      	mov	r3, r1
 800cb50:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb58:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cb66:	fb02 f303 	mul.w	r3, r2, r3
 800cb6a:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d102      	bne.n	800cb78 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 800cb72:	f04f 33ff 	mov.w	r3, #4294967295
 800cb76:	e06b      	b.n	800cc50 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb7e:	bf28      	it	cs
 800cb80:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cb84:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb8c:	695c      	ldr	r4, [r3, #20]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f103 0110 	add.w	r1, r3, #16
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cba0:	4618      	mov	r0, r3
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	78f8      	ldrb	r0, [r7, #3]
 800cbac:	47a0      	blx	r4
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	da08      	bge.n	800cbc6 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800cbb4:	78f9      	ldrb	r1, [r7, #3]
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	2204      	movs	r2, #4
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f7ff fb43 	bl	800c246 <SCSI_SenseCode>
    return -1;
 800cbc0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc4:	e044      	b.n	800cc50 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbda:	441a      	add	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cbee:	4619      	mov	r1, r3
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbf6:	1ad2      	subs	r2, r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	1ad2      	subs	r2, r2, r3
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d104      	bne.n	800cc22 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800cc18:	2100      	movs	r1, #0
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7fe fdd8 	bl	800b7d0 <MSC_BOT_SendCSW>
 800cc20:	e015      	b.n	800cc4e <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cc2e:	fb02 f303 	mul.w	r3, r2, r3
 800cc32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc36:	bf28      	it	cs
 800cc38:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cc3c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f103 0210 	add.w	r2, r3, #16
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2101      	movs	r1, #1
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f001 fe7e 	bl	800e94a <USBD_LL_PrepareReceive>
  }

  return 0;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3714      	adds	r7, #20
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd90      	pop	{r4, r7, pc}

0800cc58 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	4613      	mov	r3, r2
 800cc64:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800cc66:	88fb      	ldrh	r3, [r7, #6]
 800cc68:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d102      	bne.n	800cc76 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800cc70:	f04f 33ff 	mov.w	r3, #4294967295
 800cc74:	e013      	b.n	800cc9e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800cc76:	8afa      	ldrh	r2, [r7, #22]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800cc7c:	e00b      	b.n	800cc96 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800cc7e:	8afb      	ldrh	r3, [r7, #22]
 800cc80:	3b01      	subs	r3, #1
 800cc82:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800cc84:	8afb      	ldrh	r3, [r7, #22]
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	441a      	add	r2, r3
 800cc8a:	8afb      	ldrh	r3, [r7, #22]
 800cc8c:	7811      	ldrb	r1, [r2, #0]
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	4413      	add	r3, r2
 800cc92:	460a      	mov	r2, r1
 800cc94:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800cc96:	8afb      	ldrh	r3, [r7, #22]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1f0      	bne.n	800cc7e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	371c      	adds	r7, #28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b086      	sub	sp, #24
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	60f8      	str	r0, [r7, #12]
 800ccb2:	60b9      	str	r1, [r7, #8]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d101      	bne.n	800ccc2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ccbe:	2303      	movs	r3, #3
 800ccc0:	e01f      	b.n	800cd02 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d003      	beq.n	800cce8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	68ba      	ldr	r2, [r7, #8]
 800cce4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2201      	movs	r2, #1
 800ccec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	79fa      	ldrb	r2, [r7, #7]
 800ccf4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f001 fcb2 	bl	800e660 <USBD_LL_Init>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd00:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3718      	adds	r7, #24
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd14:	2300      	movs	r3, #0
 800cd16:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e016      	b.n	800cd50 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00b      	beq.n	800cd4e <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3e:	f107 020e 	add.w	r2, r7, #14
 800cd42:	4610      	mov	r0, r2
 800cd44:	4798      	blx	r3
 800cd46:	4602      	mov	r2, r0
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f001 fcc9 	bl	800e6f8 <USBD_LL_Start>
 800cd66:	4603      	mov	r3, r0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	370c      	adds	r7, #12
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr

0800cd86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b084      	sub	sp, #16
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	460b      	mov	r3, r1
 800cd90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cd92:	2303      	movs	r3, #3
 800cd94:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d009      	beq.n	800cdb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	78fa      	ldrb	r2, [r7, #3]
 800cdaa:	4611      	mov	r1, r2
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	4798      	blx	r3
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d007      	beq.n	800cde4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	78fa      	ldrb	r2, [r7, #3]
 800cdde:	4611      	mov	r1, r2
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	4798      	blx	r3
  }

  return USBD_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b084      	sub	sp, #16
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cdfe:	6839      	ldr	r1, [r7, #0]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 ffb9 	bl	800dd78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ce14:	461a      	mov	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce22:	f003 031f 	and.w	r3, r3, #31
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	d01a      	beq.n	800ce60 <USBD_LL_SetupStage+0x72>
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	d822      	bhi.n	800ce74 <USBD_LL_SetupStage+0x86>
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d002      	beq.n	800ce38 <USBD_LL_SetupStage+0x4a>
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d00a      	beq.n	800ce4c <USBD_LL_SetupStage+0x5e>
 800ce36:	e01d      	b.n	800ce74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 fa61 	bl	800d308 <USBD_StdDevReq>
 800ce46:	4603      	mov	r3, r0
 800ce48:	73fb      	strb	r3, [r7, #15]
      break;
 800ce4a:	e020      	b.n	800ce8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce52:	4619      	mov	r1, r3
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 fac5 	bl	800d3e4 <USBD_StdItfReq>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce5e:	e016      	b.n	800ce8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce66:	4619      	mov	r1, r3
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 fb04 	bl	800d476 <USBD_StdEPReq>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	73fb      	strb	r3, [r7, #15]
      break;
 800ce72:	e00c      	b.n	800ce8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	4619      	mov	r1, r3
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f001 fcb7 	bl	800e7f6 <USBD_LL_StallEP>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce8c:	bf00      	nop
  }

  return ret;
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	460b      	mov	r3, r1
 800cea2:	607a      	str	r2, [r7, #4]
 800cea4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cea6:	7afb      	ldrb	r3, [r7, #11]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d138      	bne.n	800cf1e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ceb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	d14a      	bne.n	800cf54 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	689a      	ldr	r2, [r3, #8]
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d913      	bls.n	800cef2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	689a      	ldr	r2, [r3, #8]
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	1ad2      	subs	r2, r2, r3
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	68da      	ldr	r2, [r3, #12]
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	4293      	cmp	r3, r2
 800cee2:	bf28      	it	cs
 800cee4:	4613      	movcs	r3, r2
 800cee6:	461a      	mov	r2, r3
 800cee8:	6879      	ldr	r1, [r7, #4]
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f001 f81b 	bl	800df26 <USBD_CtlContinueRx>
 800cef0:	e030      	b.n	800cf54 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	2b03      	cmp	r3, #3
 800cefc:	d10b      	bne.n	800cf16 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d005      	beq.n	800cf16 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf10:	691b      	ldr	r3, [r3, #16]
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f001 f816 	bl	800df48 <USBD_CtlSendStatus>
 800cf1c:	e01a      	b.n	800cf54 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	d114      	bne.n	800cf54 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00e      	beq.n	800cf54 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf3c:	699b      	ldr	r3, [r3, #24]
 800cf3e:	7afa      	ldrb	r2, [r7, #11]
 800cf40:	4611      	mov	r1, r2
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	4798      	blx	r3
 800cf46:	4603      	mov	r3, r0
 800cf48:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cf4a:	7dfb      	ldrb	r3, [r7, #23]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d001      	beq.n	800cf54 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cf50:	7dfb      	ldrb	r3, [r7, #23]
 800cf52:	e000      	b.n	800cf56 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3718      	adds	r7, #24
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b086      	sub	sp, #24
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	60f8      	str	r0, [r7, #12]
 800cf66:	460b      	mov	r3, r1
 800cf68:	607a      	str	r2, [r7, #4]
 800cf6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cf6c:	7afb      	ldrb	r3, [r7, #11]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d16b      	bne.n	800d04a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3314      	adds	r3, #20
 800cf76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d156      	bne.n	800d030 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	689a      	ldr	r2, [r3, #8]
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d914      	bls.n	800cfb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	689a      	ldr	r2, [r3, #8]
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	1ad2      	subs	r2, r2, r3
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f000 ffad 	bl	800df04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfaa:	2300      	movs	r3, #0
 800cfac:	2200      	movs	r2, #0
 800cfae:	2100      	movs	r1, #0
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f001 fcca 	bl	800e94a <USBD_LL_PrepareReceive>
 800cfb6:	e03b      	b.n	800d030 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	68da      	ldr	r2, [r3, #12]
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d11c      	bne.n	800cffe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	685a      	ldr	r2, [r3, #4]
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d316      	bcc.n	800cffe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	685a      	ldr	r2, [r3, #4]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d20f      	bcs.n	800cffe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cfde:	2200      	movs	r2, #0
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f000 ff8e 	bl	800df04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cff0:	2300      	movs	r3, #0
 800cff2:	2200      	movs	r2, #0
 800cff4:	2100      	movs	r1, #0
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f001 fca7 	bl	800e94a <USBD_LL_PrepareReceive>
 800cffc:	e018      	b.n	800d030 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b03      	cmp	r3, #3
 800d008:	d10b      	bne.n	800d022 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d005      	beq.n	800d022 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d022:	2180      	movs	r1, #128	; 0x80
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f001 fbe6 	bl	800e7f6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f000 ff9f 	bl	800df6e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d036:	2b01      	cmp	r3, #1
 800d038:	d122      	bne.n	800d080 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f7ff fe98 	bl	800cd70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2200      	movs	r2, #0
 800d044:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d048:	e01a      	b.n	800d080 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d050:	b2db      	uxtb	r3, r3
 800d052:	2b03      	cmp	r3, #3
 800d054:	d114      	bne.n	800d080 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00e      	beq.n	800d080 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d068:	695b      	ldr	r3, [r3, #20]
 800d06a:	7afa      	ldrb	r2, [r7, #11]
 800d06c:	4611      	mov	r1, r2
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	4798      	blx	r3
 800d072:	4603      	mov	r3, r0
 800d074:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d076:	7dfb      	ldrb	r3, [r7, #23]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d07c:	7dfb      	ldrb	r3, [r7, #23]
 800d07e:	e000      	b.n	800d082 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3718      	adds	r7, #24
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b082      	sub	sp, #8
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2201      	movs	r2, #1
 800d096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d101      	bne.n	800d0be <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	e02f      	b.n	800d11e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00f      	beq.n	800d0e8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d009      	beq.n	800d0e8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	6852      	ldr	r2, [r2, #4]
 800d0e0:	b2d2      	uxtb	r2, r2
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d0e8:	2340      	movs	r3, #64	; 0x40
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f001 fb1d 	bl	800e72e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2240      	movs	r2, #64	; 0x40
 800d100:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d104:	2340      	movs	r3, #64	; 0x40
 800d106:	2200      	movs	r2, #0
 800d108:	2180      	movs	r1, #128	; 0x80
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f001 fb0f 	bl	800e72e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2240      	movs	r2, #64	; 0x40
 800d11a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d126:	b480      	push	{r7}
 800d128:	b083      	sub	sp, #12
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
 800d12e:	460b      	mov	r3, r1
 800d130:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	78fa      	ldrb	r2, [r7, #3]
 800d136:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr

0800d146 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d146:	b480      	push	{r7}
 800d148:	b083      	sub	sp, #12
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d154:	b2da      	uxtb	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2204      	movs	r2, #4
 800d160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	370c      	adds	r7, #12
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr

0800d172 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d172:	b480      	push	{r7}
 800d174:	b083      	sub	sp, #12
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b04      	cmp	r3, #4
 800d184:	d106      	bne.n	800d194 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b082      	sub	sp, #8
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d101      	bne.n	800d1b8 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d1b4:	2303      	movs	r3, #3
 800d1b6:	e012      	b.n	800d1de <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	2b03      	cmp	r3, #3
 800d1c2:	d10b      	bne.n	800d1dc <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ca:	69db      	ldr	r3, [r3, #28]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d005      	beq.n	800d1dc <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1d6:	69db      	ldr	r3, [r3, #28]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b082      	sub	sp, #8
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d101      	bne.n	800d200 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e014      	b.n	800d22a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b03      	cmp	r3, #3
 800d20a:	d10d      	bne.n	800d228 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d212:	6a1b      	ldr	r3, [r3, #32]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d007      	beq.n	800d228 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	78fa      	ldrb	r2, [r7, #3]
 800d222:	4611      	mov	r1, r2
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b082      	sub	sp, #8
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	460b      	mov	r3, r1
 800d23c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d244:	2b00      	cmp	r3, #0
 800d246:	d101      	bne.n	800d24c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d248:	2303      	movs	r3, #3
 800d24a:	e014      	b.n	800d276 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d252:	b2db      	uxtb	r3, r3
 800d254:	2b03      	cmp	r3, #3
 800d256:	d10d      	bne.n	800d274 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d260:	2b00      	cmp	r3, #0
 800d262:	d007      	beq.n	800d274 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d26c:	78fa      	ldrb	r2, [r7, #3]
 800d26e:	4611      	mov	r1, r2
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d27e:	b480      	push	{r7}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d009      	beq.n	800d2c2 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	6852      	ldr	r2, [r2, #4]
 800d2ba:	b2d2      	uxtb	r2, r2
 800d2bc:	4611      	mov	r1, r2
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	4798      	blx	r3
  }

  return USBD_OK;
 800d2c2:	2300      	movs	r3, #0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b087      	sub	sp, #28
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d2ea:	8a3b      	ldrh	r3, [r7, #16]
 800d2ec:	021b      	lsls	r3, r3, #8
 800d2ee:	b21a      	sxth	r2, r3
 800d2f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	b21b      	sxth	r3, r3
 800d2f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d2fa:	89fb      	ldrh	r3, [r7, #14]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	371c      	adds	r7, #28
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d31e:	2b40      	cmp	r3, #64	; 0x40
 800d320:	d005      	beq.n	800d32e <USBD_StdDevReq+0x26>
 800d322:	2b40      	cmp	r3, #64	; 0x40
 800d324:	d853      	bhi.n	800d3ce <USBD_StdDevReq+0xc6>
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00b      	beq.n	800d342 <USBD_StdDevReq+0x3a>
 800d32a:	2b20      	cmp	r3, #32
 800d32c:	d14f      	bne.n	800d3ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	6839      	ldr	r1, [r7, #0]
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	4798      	blx	r3
 800d33c:	4603      	mov	r3, r0
 800d33e:	73fb      	strb	r3, [r7, #15]
      break;
 800d340:	e04a      	b.n	800d3d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	785b      	ldrb	r3, [r3, #1]
 800d346:	2b09      	cmp	r3, #9
 800d348:	d83b      	bhi.n	800d3c2 <USBD_StdDevReq+0xba>
 800d34a:	a201      	add	r2, pc, #4	; (adr r2, 800d350 <USBD_StdDevReq+0x48>)
 800d34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d350:	0800d3a5 	.word	0x0800d3a5
 800d354:	0800d3b9 	.word	0x0800d3b9
 800d358:	0800d3c3 	.word	0x0800d3c3
 800d35c:	0800d3af 	.word	0x0800d3af
 800d360:	0800d3c3 	.word	0x0800d3c3
 800d364:	0800d383 	.word	0x0800d383
 800d368:	0800d379 	.word	0x0800d379
 800d36c:	0800d3c3 	.word	0x0800d3c3
 800d370:	0800d39b 	.word	0x0800d39b
 800d374:	0800d38d 	.word	0x0800d38d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 f9de 	bl	800d73c <USBD_GetDescriptor>
          break;
 800d380:	e024      	b.n	800d3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fb6d 	bl	800da64 <USBD_SetAddress>
          break;
 800d38a:	e01f      	b.n	800d3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d38c:	6839      	ldr	r1, [r7, #0]
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 fbac 	bl	800daec <USBD_SetConfig>
 800d394:	4603      	mov	r3, r0
 800d396:	73fb      	strb	r3, [r7, #15]
          break;
 800d398:	e018      	b.n	800d3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d39a:	6839      	ldr	r1, [r7, #0]
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fc4b 	bl	800dc38 <USBD_GetConfig>
          break;
 800d3a2:	e013      	b.n	800d3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 fc7c 	bl	800dca4 <USBD_GetStatus>
          break;
 800d3ac:	e00e      	b.n	800d3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d3ae:	6839      	ldr	r1, [r7, #0]
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 fcab 	bl	800dd0c <USBD_SetFeature>
          break;
 800d3b6:	e009      	b.n	800d3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d3b8:	6839      	ldr	r1, [r7, #0]
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 fcba 	bl	800dd34 <USBD_ClrFeature>
          break;
 800d3c0:	e004      	b.n	800d3cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 fd11 	bl	800ddec <USBD_CtlError>
          break;
 800d3ca:	bf00      	nop
      }
      break;
 800d3cc:	e004      	b.n	800d3d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d3ce:	6839      	ldr	r1, [r7, #0]
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 fd0b 	bl	800ddec <USBD_CtlError>
      break;
 800d3d6:	bf00      	nop
  }

  return ret;
 800d3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop

0800d3e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3fa:	2b40      	cmp	r3, #64	; 0x40
 800d3fc:	d005      	beq.n	800d40a <USBD_StdItfReq+0x26>
 800d3fe:	2b40      	cmp	r3, #64	; 0x40
 800d400:	d82f      	bhi.n	800d462 <USBD_StdItfReq+0x7e>
 800d402:	2b00      	cmp	r3, #0
 800d404:	d001      	beq.n	800d40a <USBD_StdItfReq+0x26>
 800d406:	2b20      	cmp	r3, #32
 800d408:	d12b      	bne.n	800d462 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d410:	b2db      	uxtb	r3, r3
 800d412:	3b01      	subs	r3, #1
 800d414:	2b02      	cmp	r3, #2
 800d416:	d81d      	bhi.n	800d454 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	889b      	ldrh	r3, [r3, #4]
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d813      	bhi.n	800d44a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	6839      	ldr	r1, [r7, #0]
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	4798      	blx	r3
 800d430:	4603      	mov	r3, r0
 800d432:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	88db      	ldrh	r3, [r3, #6]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d110      	bne.n	800d45e <USBD_StdItfReq+0x7a>
 800d43c:	7bfb      	ldrb	r3, [r7, #15]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10d      	bne.n	800d45e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 fd80 	bl	800df48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d448:	e009      	b.n	800d45e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d44a:	6839      	ldr	r1, [r7, #0]
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 fccd 	bl	800ddec <USBD_CtlError>
          break;
 800d452:	e004      	b.n	800d45e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d454:	6839      	ldr	r1, [r7, #0]
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 fcc8 	bl	800ddec <USBD_CtlError>
          break;
 800d45c:	e000      	b.n	800d460 <USBD_StdItfReq+0x7c>
          break;
 800d45e:	bf00      	nop
      }
      break;
 800d460:	e004      	b.n	800d46c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d462:	6839      	ldr	r1, [r7, #0]
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fcc1 	bl	800ddec <USBD_CtlError>
      break;
 800d46a:	bf00      	nop
  }

  return ret;
 800d46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b084      	sub	sp, #16
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
 800d47e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	889b      	ldrh	r3, [r3, #4]
 800d488:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d492:	2b40      	cmp	r3, #64	; 0x40
 800d494:	d007      	beq.n	800d4a6 <USBD_StdEPReq+0x30>
 800d496:	2b40      	cmp	r3, #64	; 0x40
 800d498:	f200 8145 	bhi.w	800d726 <USBD_StdEPReq+0x2b0>
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00c      	beq.n	800d4ba <USBD_StdEPReq+0x44>
 800d4a0:	2b20      	cmp	r3, #32
 800d4a2:	f040 8140 	bne.w	800d726 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	6839      	ldr	r1, [r7, #0]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	4798      	blx	r3
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d4b8:	e13a      	b.n	800d730 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	785b      	ldrb	r3, [r3, #1]
 800d4be:	2b03      	cmp	r3, #3
 800d4c0:	d007      	beq.n	800d4d2 <USBD_StdEPReq+0x5c>
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	f300 8129 	bgt.w	800d71a <USBD_StdEPReq+0x2a4>
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d07f      	beq.n	800d5cc <USBD_StdEPReq+0x156>
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d03c      	beq.n	800d54a <USBD_StdEPReq+0xd4>
 800d4d0:	e123      	b.n	800d71a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d002      	beq.n	800d4e4 <USBD_StdEPReq+0x6e>
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d016      	beq.n	800d510 <USBD_StdEPReq+0x9a>
 800d4e2:	e02c      	b.n	800d53e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4e4:	7bbb      	ldrb	r3, [r7, #14]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00d      	beq.n	800d506 <USBD_StdEPReq+0x90>
 800d4ea:	7bbb      	ldrb	r3, [r7, #14]
 800d4ec:	2b80      	cmp	r3, #128	; 0x80
 800d4ee:	d00a      	beq.n	800d506 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4f0:	7bbb      	ldrb	r3, [r7, #14]
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f001 f97e 	bl	800e7f6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4fa:	2180      	movs	r1, #128	; 0x80
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f001 f97a 	bl	800e7f6 <USBD_LL_StallEP>
 800d502:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d504:	e020      	b.n	800d548 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 fc6f 	bl	800ddec <USBD_CtlError>
              break;
 800d50e:	e01b      	b.n	800d548 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	885b      	ldrh	r3, [r3, #2]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d10e      	bne.n	800d536 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d518:	7bbb      	ldrb	r3, [r7, #14]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00b      	beq.n	800d536 <USBD_StdEPReq+0xc0>
 800d51e:	7bbb      	ldrb	r3, [r7, #14]
 800d520:	2b80      	cmp	r3, #128	; 0x80
 800d522:	d008      	beq.n	800d536 <USBD_StdEPReq+0xc0>
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	88db      	ldrh	r3, [r3, #6]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d104      	bne.n	800d536 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d52c:	7bbb      	ldrb	r3, [r7, #14]
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f001 f960 	bl	800e7f6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fd06 	bl	800df48 <USBD_CtlSendStatus>

              break;
 800d53c:	e004      	b.n	800d548 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d53e:	6839      	ldr	r1, [r7, #0]
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 fc53 	bl	800ddec <USBD_CtlError>
              break;
 800d546:	bf00      	nop
          }
          break;
 800d548:	e0ec      	b.n	800d724 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b02      	cmp	r3, #2
 800d554:	d002      	beq.n	800d55c <USBD_StdEPReq+0xe6>
 800d556:	2b03      	cmp	r3, #3
 800d558:	d016      	beq.n	800d588 <USBD_StdEPReq+0x112>
 800d55a:	e030      	b.n	800d5be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d55c:	7bbb      	ldrb	r3, [r7, #14]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00d      	beq.n	800d57e <USBD_StdEPReq+0x108>
 800d562:	7bbb      	ldrb	r3, [r7, #14]
 800d564:	2b80      	cmp	r3, #128	; 0x80
 800d566:	d00a      	beq.n	800d57e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d568:	7bbb      	ldrb	r3, [r7, #14]
 800d56a:	4619      	mov	r1, r3
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f001 f942 	bl	800e7f6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d572:	2180      	movs	r1, #128	; 0x80
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f001 f93e 	bl	800e7f6 <USBD_LL_StallEP>
 800d57a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d57c:	e025      	b.n	800d5ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d57e:	6839      	ldr	r1, [r7, #0]
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 fc33 	bl	800ddec <USBD_CtlError>
              break;
 800d586:	e020      	b.n	800d5ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	885b      	ldrh	r3, [r3, #2]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d11b      	bne.n	800d5c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d590:	7bbb      	ldrb	r3, [r7, #14]
 800d592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d596:	2b00      	cmp	r3, #0
 800d598:	d004      	beq.n	800d5a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d59a:	7bbb      	ldrb	r3, [r7, #14]
 800d59c:	4619      	mov	r1, r3
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f001 f948 	bl	800e834 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 fccf 	bl	800df48 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	4798      	blx	r3
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d5bc:	e004      	b.n	800d5c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 fc13 	bl	800ddec <USBD_CtlError>
              break;
 800d5c6:	e000      	b.n	800d5ca <USBD_StdEPReq+0x154>
              break;
 800d5c8:	bf00      	nop
          }
          break;
 800d5ca:	e0ab      	b.n	800d724 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	2b02      	cmp	r3, #2
 800d5d6:	d002      	beq.n	800d5de <USBD_StdEPReq+0x168>
 800d5d8:	2b03      	cmp	r3, #3
 800d5da:	d032      	beq.n	800d642 <USBD_StdEPReq+0x1cc>
 800d5dc:	e097      	b.n	800d70e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5de:	7bbb      	ldrb	r3, [r7, #14]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d007      	beq.n	800d5f4 <USBD_StdEPReq+0x17e>
 800d5e4:	7bbb      	ldrb	r3, [r7, #14]
 800d5e6:	2b80      	cmp	r3, #128	; 0x80
 800d5e8:	d004      	beq.n	800d5f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d5ea:	6839      	ldr	r1, [r7, #0]
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fbfd 	bl	800ddec <USBD_CtlError>
                break;
 800d5f2:	e091      	b.n	800d718 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	da0b      	bge.n	800d614 <USBD_StdEPReq+0x19e>
 800d5fc:	7bbb      	ldrb	r3, [r7, #14]
 800d5fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d602:	4613      	mov	r3, r2
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	4413      	add	r3, r2
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	3310      	adds	r3, #16
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	4413      	add	r3, r2
 800d610:	3304      	adds	r3, #4
 800d612:	e00b      	b.n	800d62c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d614:	7bbb      	ldrb	r3, [r7, #14]
 800d616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d61a:	4613      	mov	r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4413      	add	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	4413      	add	r3, r2
 800d62a:	3304      	adds	r3, #4
 800d62c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	2202      	movs	r2, #2
 800d638:	4619      	mov	r1, r3
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fc47 	bl	800dece <USBD_CtlSendData>
              break;
 800d640:	e06a      	b.n	800d718 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d646:	2b00      	cmp	r3, #0
 800d648:	da11      	bge.n	800d66e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d64a:	7bbb      	ldrb	r3, [r7, #14]
 800d64c:	f003 020f 	and.w	r2, r3, #15
 800d650:	6879      	ldr	r1, [r7, #4]
 800d652:	4613      	mov	r3, r2
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	4413      	add	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	440b      	add	r3, r1
 800d65c:	3324      	adds	r3, #36	; 0x24
 800d65e:	881b      	ldrh	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d117      	bne.n	800d694 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fbc0 	bl	800ddec <USBD_CtlError>
                  break;
 800d66c:	e054      	b.n	800d718 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d66e:	7bbb      	ldrb	r3, [r7, #14]
 800d670:	f003 020f 	and.w	r2, r3, #15
 800d674:	6879      	ldr	r1, [r7, #4]
 800d676:	4613      	mov	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4413      	add	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	440b      	add	r3, r1
 800d680:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d104      	bne.n	800d694 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d68a:	6839      	ldr	r1, [r7, #0]
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 fbad 	bl	800ddec <USBD_CtlError>
                  break;
 800d692:	e041      	b.n	800d718 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	da0b      	bge.n	800d6b4 <USBD_StdEPReq+0x23e>
 800d69c:	7bbb      	ldrb	r3, [r7, #14]
 800d69e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	3310      	adds	r3, #16
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	3304      	adds	r3, #4
 800d6b2:	e00b      	b.n	800d6cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d6b4:	7bbb      	ldrb	r3, [r7, #14]
 800d6b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4413      	add	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	3304      	adds	r3, #4
 800d6cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d6ce:	7bbb      	ldrb	r3, [r7, #14]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d002      	beq.n	800d6da <USBD_StdEPReq+0x264>
 800d6d4:	7bbb      	ldrb	r3, [r7, #14]
 800d6d6:	2b80      	cmp	r3, #128	; 0x80
 800d6d8:	d103      	bne.n	800d6e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	e00e      	b.n	800d700 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d6e2:	7bbb      	ldrb	r3, [r7, #14]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f001 f8c3 	bl	800e872 <USBD_LL_IsStallEP>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d003      	beq.n	800d6fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	e002      	b.n	800d700 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2202      	movs	r2, #2
 800d704:	4619      	mov	r1, r3
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fbe1 	bl	800dece <USBD_CtlSendData>
              break;
 800d70c:	e004      	b.n	800d718 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fb6b 	bl	800ddec <USBD_CtlError>
              break;
 800d716:	bf00      	nop
          }
          break;
 800d718:	e004      	b.n	800d724 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d71a:	6839      	ldr	r1, [r7, #0]
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 fb65 	bl	800ddec <USBD_CtlError>
          break;
 800d722:	bf00      	nop
      }
      break;
 800d724:	e004      	b.n	800d730 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 fb5f 	bl	800ddec <USBD_CtlError>
      break;
 800d72e:	bf00      	nop
  }

  return ret;
 800d730:	7bfb      	ldrb	r3, [r7, #15]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
	...

0800d73c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d746:	2300      	movs	r3, #0
 800d748:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d74a:	2300      	movs	r3, #0
 800d74c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d74e:	2300      	movs	r3, #0
 800d750:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	885b      	ldrh	r3, [r3, #2]
 800d756:	0a1b      	lsrs	r3, r3, #8
 800d758:	b29b      	uxth	r3, r3
 800d75a:	3b01      	subs	r3, #1
 800d75c:	2b0e      	cmp	r3, #14
 800d75e:	f200 8152 	bhi.w	800da06 <USBD_GetDescriptor+0x2ca>
 800d762:	a201      	add	r2, pc, #4	; (adr r2, 800d768 <USBD_GetDescriptor+0x2c>)
 800d764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d768:	0800d7d9 	.word	0x0800d7d9
 800d76c:	0800d7f1 	.word	0x0800d7f1
 800d770:	0800d831 	.word	0x0800d831
 800d774:	0800da07 	.word	0x0800da07
 800d778:	0800da07 	.word	0x0800da07
 800d77c:	0800d9a7 	.word	0x0800d9a7
 800d780:	0800d9d3 	.word	0x0800d9d3
 800d784:	0800da07 	.word	0x0800da07
 800d788:	0800da07 	.word	0x0800da07
 800d78c:	0800da07 	.word	0x0800da07
 800d790:	0800da07 	.word	0x0800da07
 800d794:	0800da07 	.word	0x0800da07
 800d798:	0800da07 	.word	0x0800da07
 800d79c:	0800da07 	.word	0x0800da07
 800d7a0:	0800d7a5 	.word	0x0800d7a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7aa:	69db      	ldr	r3, [r3, #28]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00b      	beq.n	800d7c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7b6:	69db      	ldr	r3, [r3, #28]
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	7c12      	ldrb	r2, [r2, #16]
 800d7bc:	f107 0108 	add.w	r1, r7, #8
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	4798      	blx	r3
 800d7c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7c6:	e126      	b.n	800da16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d7c8:	6839      	ldr	r1, [r7, #0]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 fb0e 	bl	800ddec <USBD_CtlError>
        err++;
 800d7d0:	7afb      	ldrb	r3, [r7, #11]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	72fb      	strb	r3, [r7, #11]
      break;
 800d7d6:	e11e      	b.n	800da16 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	7c12      	ldrb	r2, [r2, #16]
 800d7e4:	f107 0108 	add.w	r1, r7, #8
 800d7e8:	4610      	mov	r0, r2
 800d7ea:	4798      	blx	r3
 800d7ec:	60f8      	str	r0, [r7, #12]
      break;
 800d7ee:	e112      	b.n	800da16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	7c1b      	ldrb	r3, [r3, #16]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10d      	bne.n	800d814 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d800:	f107 0208 	add.w	r2, r7, #8
 800d804:	4610      	mov	r0, r2
 800d806:	4798      	blx	r3
 800d808:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	3301      	adds	r3, #1
 800d80e:	2202      	movs	r2, #2
 800d810:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d812:	e100      	b.n	800da16 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81c:	f107 0208 	add.w	r2, r7, #8
 800d820:	4610      	mov	r0, r2
 800d822:	4798      	blx	r3
 800d824:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	3301      	adds	r3, #1
 800d82a:	2202      	movs	r2, #2
 800d82c:	701a      	strb	r2, [r3, #0]
      break;
 800d82e:	e0f2      	b.n	800da16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	885b      	ldrh	r3, [r3, #2]
 800d834:	b2db      	uxtb	r3, r3
 800d836:	2b05      	cmp	r3, #5
 800d838:	f200 80ac 	bhi.w	800d994 <USBD_GetDescriptor+0x258>
 800d83c:	a201      	add	r2, pc, #4	; (adr r2, 800d844 <USBD_GetDescriptor+0x108>)
 800d83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d842:	bf00      	nop
 800d844:	0800d85d 	.word	0x0800d85d
 800d848:	0800d891 	.word	0x0800d891
 800d84c:	0800d8c5 	.word	0x0800d8c5
 800d850:	0800d8f9 	.word	0x0800d8f9
 800d854:	0800d92d 	.word	0x0800d92d
 800d858:	0800d961 	.word	0x0800d961
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00b      	beq.n	800d880 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	7c12      	ldrb	r2, [r2, #16]
 800d874:	f107 0108 	add.w	r1, r7, #8
 800d878:	4610      	mov	r0, r2
 800d87a:	4798      	blx	r3
 800d87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d87e:	e091      	b.n	800d9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 fab2 	bl	800ddec <USBD_CtlError>
            err++;
 800d888:	7afb      	ldrb	r3, [r7, #11]
 800d88a:	3301      	adds	r3, #1
 800d88c:	72fb      	strb	r3, [r7, #11]
          break;
 800d88e:	e089      	b.n	800d9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00b      	beq.n	800d8b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	7c12      	ldrb	r2, [r2, #16]
 800d8a8:	f107 0108 	add.w	r1, r7, #8
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	4798      	blx	r3
 800d8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8b2:	e077      	b.n	800d9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d8b4:	6839      	ldr	r1, [r7, #0]
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 fa98 	bl	800ddec <USBD_CtlError>
            err++;
 800d8bc:	7afb      	ldrb	r3, [r7, #11]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d8c2:	e06f      	b.n	800d9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00b      	beq.n	800d8e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	7c12      	ldrb	r2, [r2, #16]
 800d8dc:	f107 0108 	add.w	r1, r7, #8
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	4798      	blx	r3
 800d8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8e6:	e05d      	b.n	800d9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d8e8:	6839      	ldr	r1, [r7, #0]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 fa7e 	bl	800ddec <USBD_CtlError>
            err++;
 800d8f0:	7afb      	ldrb	r3, [r7, #11]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d8f6:	e055      	b.n	800d9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8fe:	691b      	ldr	r3, [r3, #16]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00b      	beq.n	800d91c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	7c12      	ldrb	r2, [r2, #16]
 800d910:	f107 0108 	add.w	r1, r7, #8
 800d914:	4610      	mov	r0, r2
 800d916:	4798      	blx	r3
 800d918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d91a:	e043      	b.n	800d9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d91c:	6839      	ldr	r1, [r7, #0]
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 fa64 	bl	800ddec <USBD_CtlError>
            err++;
 800d924:	7afb      	ldrb	r3, [r7, #11]
 800d926:	3301      	adds	r3, #1
 800d928:	72fb      	strb	r3, [r7, #11]
          break;
 800d92a:	e03b      	b.n	800d9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d932:	695b      	ldr	r3, [r3, #20]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00b      	beq.n	800d950 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d93e:	695b      	ldr	r3, [r3, #20]
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	7c12      	ldrb	r2, [r2, #16]
 800d944:	f107 0108 	add.w	r1, r7, #8
 800d948:	4610      	mov	r0, r2
 800d94a:	4798      	blx	r3
 800d94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d94e:	e029      	b.n	800d9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d950:	6839      	ldr	r1, [r7, #0]
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fa4a 	bl	800ddec <USBD_CtlError>
            err++;
 800d958:	7afb      	ldrb	r3, [r7, #11]
 800d95a:	3301      	adds	r3, #1
 800d95c:	72fb      	strb	r3, [r7, #11]
          break;
 800d95e:	e021      	b.n	800d9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00b      	beq.n	800d984 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d972:	699b      	ldr	r3, [r3, #24]
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	7c12      	ldrb	r2, [r2, #16]
 800d978:	f107 0108 	add.w	r1, r7, #8
 800d97c:	4610      	mov	r0, r2
 800d97e:	4798      	blx	r3
 800d980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d982:	e00f      	b.n	800d9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d984:	6839      	ldr	r1, [r7, #0]
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 fa30 	bl	800ddec <USBD_CtlError>
            err++;
 800d98c:	7afb      	ldrb	r3, [r7, #11]
 800d98e:	3301      	adds	r3, #1
 800d990:	72fb      	strb	r3, [r7, #11]
          break;
 800d992:	e007      	b.n	800d9a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d994:	6839      	ldr	r1, [r7, #0]
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fa28 	bl	800ddec <USBD_CtlError>
          err++;
 800d99c:	7afb      	ldrb	r3, [r7, #11]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d9a2:	bf00      	nop
      }
      break;
 800d9a4:	e037      	b.n	800da16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	7c1b      	ldrb	r3, [r3, #16]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d109      	bne.n	800d9c2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9b6:	f107 0208 	add.w	r2, r7, #8
 800d9ba:	4610      	mov	r0, r2
 800d9bc:	4798      	blx	r3
 800d9be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9c0:	e029      	b.n	800da16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 fa11 	bl	800ddec <USBD_CtlError>
        err++;
 800d9ca:	7afb      	ldrb	r3, [r7, #11]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	72fb      	strb	r3, [r7, #11]
      break;
 800d9d0:	e021      	b.n	800da16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	7c1b      	ldrb	r3, [r3, #16]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d10d      	bne.n	800d9f6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e2:	f107 0208 	add.w	r2, r7, #8
 800d9e6:	4610      	mov	r0, r2
 800d9e8:	4798      	blx	r3
 800d9ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	2207      	movs	r2, #7
 800d9f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9f4:	e00f      	b.n	800da16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f9f7 	bl	800ddec <USBD_CtlError>
        err++;
 800d9fe:	7afb      	ldrb	r3, [r7, #11]
 800da00:	3301      	adds	r3, #1
 800da02:	72fb      	strb	r3, [r7, #11]
      break;
 800da04:	e007      	b.n	800da16 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800da06:	6839      	ldr	r1, [r7, #0]
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 f9ef 	bl	800ddec <USBD_CtlError>
      err++;
 800da0e:	7afb      	ldrb	r3, [r7, #11]
 800da10:	3301      	adds	r3, #1
 800da12:	72fb      	strb	r3, [r7, #11]
      break;
 800da14:	bf00      	nop
  }

  if (err != 0U)
 800da16:	7afb      	ldrb	r3, [r7, #11]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d11e      	bne.n	800da5a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	88db      	ldrh	r3, [r3, #6]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d016      	beq.n	800da52 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800da24:	893b      	ldrh	r3, [r7, #8]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d00e      	beq.n	800da48 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	88da      	ldrh	r2, [r3, #6]
 800da2e:	893b      	ldrh	r3, [r7, #8]
 800da30:	4293      	cmp	r3, r2
 800da32:	bf28      	it	cs
 800da34:	4613      	movcs	r3, r2
 800da36:	b29b      	uxth	r3, r3
 800da38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800da3a:	893b      	ldrh	r3, [r7, #8]
 800da3c:	461a      	mov	r2, r3
 800da3e:	68f9      	ldr	r1, [r7, #12]
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 fa44 	bl	800dece <USBD_CtlSendData>
 800da46:	e009      	b.n	800da5c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800da48:	6839      	ldr	r1, [r7, #0]
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 f9ce 	bl	800ddec <USBD_CtlError>
 800da50:	e004      	b.n	800da5c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 fa78 	bl	800df48 <USBD_CtlSendStatus>
 800da58:	e000      	b.n	800da5c <USBD_GetDescriptor+0x320>
    return;
 800da5a:	bf00      	nop
  }
}
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop

0800da64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	889b      	ldrh	r3, [r3, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d131      	bne.n	800dada <USBD_SetAddress+0x76>
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	88db      	ldrh	r3, [r3, #6]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d12d      	bne.n	800dada <USBD_SetAddress+0x76>
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	885b      	ldrh	r3, [r3, #2]
 800da82:	2b7f      	cmp	r3, #127	; 0x7f
 800da84:	d829      	bhi.n	800dada <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	885b      	ldrh	r3, [r3, #2]
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d104      	bne.n	800daa8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800da9e:	6839      	ldr	r1, [r7, #0]
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f9a3 	bl	800ddec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa6:	e01d      	b.n	800dae4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	7bfa      	ldrb	r2, [r7, #15]
 800daac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
 800dab2:	4619      	mov	r1, r3
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 ff08 	bl	800e8ca <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 fa44 	bl	800df48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dac0:	7bfb      	ldrb	r3, [r7, #15]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d004      	beq.n	800dad0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2202      	movs	r2, #2
 800daca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dace:	e009      	b.n	800dae4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2201      	movs	r2, #1
 800dad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dad8:	e004      	b.n	800dae4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 f985 	bl	800ddec <USBD_CtlError>
  }
}
 800dae2:	bf00      	nop
 800dae4:	bf00      	nop
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	885b      	ldrh	r3, [r3, #2]
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	4b4c      	ldr	r3, [pc, #304]	; (800dc34 <USBD_SetConfig+0x148>)
 800db02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800db04:	4b4b      	ldr	r3, [pc, #300]	; (800dc34 <USBD_SetConfig+0x148>)
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d905      	bls.n	800db18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 f96c 	bl	800ddec <USBD_CtlError>
    return USBD_FAIL;
 800db14:	2303      	movs	r3, #3
 800db16:	e088      	b.n	800dc2a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b02      	cmp	r3, #2
 800db22:	d002      	beq.n	800db2a <USBD_SetConfig+0x3e>
 800db24:	2b03      	cmp	r3, #3
 800db26:	d025      	beq.n	800db74 <USBD_SetConfig+0x88>
 800db28:	e071      	b.n	800dc0e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800db2a:	4b42      	ldr	r3, [pc, #264]	; (800dc34 <USBD_SetConfig+0x148>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d01c      	beq.n	800db6c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800db32:	4b40      	ldr	r3, [pc, #256]	; (800dc34 <USBD_SetConfig+0x148>)
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	461a      	mov	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800db3c:	4b3d      	ldr	r3, [pc, #244]	; (800dc34 <USBD_SetConfig+0x148>)
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	4619      	mov	r1, r3
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7ff f91f 	bl	800cd86 <USBD_SetClassConfig>
 800db48:	4603      	mov	r3, r0
 800db4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800db4c:	7bfb      	ldrb	r3, [r7, #15]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d004      	beq.n	800db5c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800db52:	6839      	ldr	r1, [r7, #0]
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 f949 	bl	800ddec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db5a:	e065      	b.n	800dc28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 f9f3 	bl	800df48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2203      	movs	r2, #3
 800db66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800db6a:	e05d      	b.n	800dc28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 f9eb 	bl	800df48 <USBD_CtlSendStatus>
      break;
 800db72:	e059      	b.n	800dc28 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800db74:	4b2f      	ldr	r3, [pc, #188]	; (800dc34 <USBD_SetConfig+0x148>)
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d112      	bne.n	800dba2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2202      	movs	r2, #2
 800db80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800db84:	4b2b      	ldr	r3, [pc, #172]	; (800dc34 <USBD_SetConfig+0x148>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	461a      	mov	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db8e:	4b29      	ldr	r3, [pc, #164]	; (800dc34 <USBD_SetConfig+0x148>)
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff f912 	bl	800cdbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 f9d4 	bl	800df48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dba0:	e042      	b.n	800dc28 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dba2:	4b24      	ldr	r3, [pc, #144]	; (800dc34 <USBD_SetConfig+0x148>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	461a      	mov	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d02a      	beq.n	800dc06 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7ff f900 	bl	800cdbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dbbe:	4b1d      	ldr	r3, [pc, #116]	; (800dc34 <USBD_SetConfig+0x148>)
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbc8:	4b1a      	ldr	r3, [pc, #104]	; (800dc34 <USBD_SetConfig+0x148>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff f8d9 	bl	800cd86 <USBD_SetClassConfig>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dbd8:	7bfb      	ldrb	r3, [r7, #15]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00f      	beq.n	800dbfe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dbde:	6839      	ldr	r1, [r7, #0]
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f000 f903 	bl	800ddec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7ff f8e5 	bl	800cdbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dbfc:	e014      	b.n	800dc28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 f9a2 	bl	800df48 <USBD_CtlSendStatus>
      break;
 800dc04:	e010      	b.n	800dc28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 f99e 	bl	800df48 <USBD_CtlSendStatus>
      break;
 800dc0c:	e00c      	b.n	800dc28 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dc0e:	6839      	ldr	r1, [r7, #0]
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 f8eb 	bl	800ddec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc16:	4b07      	ldr	r3, [pc, #28]	; (800dc34 <USBD_SetConfig+0x148>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff f8ce 	bl	800cdbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dc22:	2303      	movs	r3, #3
 800dc24:	73fb      	strb	r3, [r7, #15]
      break;
 800dc26:	bf00      	nop
  }

  return ret;
 800dc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20000198 	.word	0x20000198

0800dc38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	88db      	ldrh	r3, [r3, #6]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d004      	beq.n	800dc54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f8cd 	bl	800ddec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dc52:	e023      	b.n	800dc9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	dc02      	bgt.n	800dc66 <USBD_GetConfig+0x2e>
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	dc03      	bgt.n	800dc6c <USBD_GetConfig+0x34>
 800dc64:	e015      	b.n	800dc92 <USBD_GetConfig+0x5a>
 800dc66:	2b03      	cmp	r3, #3
 800dc68:	d00b      	beq.n	800dc82 <USBD_GetConfig+0x4a>
 800dc6a:	e012      	b.n	800dc92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	3308      	adds	r3, #8
 800dc76:	2201      	movs	r2, #1
 800dc78:	4619      	mov	r1, r3
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f927 	bl	800dece <USBD_CtlSendData>
        break;
 800dc80:	e00c      	b.n	800dc9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	3304      	adds	r3, #4
 800dc86:	2201      	movs	r2, #1
 800dc88:	4619      	mov	r1, r3
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f91f 	bl	800dece <USBD_CtlSendData>
        break;
 800dc90:	e004      	b.n	800dc9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 f8a9 	bl	800ddec <USBD_CtlError>
        break;
 800dc9a:	bf00      	nop
}
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	d81e      	bhi.n	800dcfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	88db      	ldrh	r3, [r3, #6]
 800dcc0:	2b02      	cmp	r3, #2
 800dcc2:	d004      	beq.n	800dcce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 f890 	bl	800ddec <USBD_CtlError>
        break;
 800dccc:	e01a      	b.n	800dd04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d005      	beq.n	800dcea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	f043 0202 	orr.w	r2, r3, #2
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	330c      	adds	r3, #12
 800dcee:	2202      	movs	r2, #2
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 f8eb 	bl	800dece <USBD_CtlSendData>
      break;
 800dcf8:	e004      	b.n	800dd04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dcfa:	6839      	ldr	r1, [r7, #0]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 f875 	bl	800ddec <USBD_CtlError>
      break;
 800dd02:	bf00      	nop
  }
}
 800dd04:	bf00      	nop
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	885b      	ldrh	r3, [r3, #2]
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d106      	bne.n	800dd2c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 f90e 	bl	800df48 <USBD_CtlSendStatus>
  }
}
 800dd2c:	bf00      	nop
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	3b01      	subs	r3, #1
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d80b      	bhi.n	800dd64 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	885b      	ldrh	r3, [r3, #2]
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d10c      	bne.n	800dd6e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2200      	movs	r2, #0
 800dd58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 f8f3 	bl	800df48 <USBD_CtlSendStatus>
      }
      break;
 800dd62:	e004      	b.n	800dd6e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dd64:	6839      	ldr	r1, [r7, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f840 	bl	800ddec <USBD_CtlError>
      break;
 800dd6c:	e000      	b.n	800dd70 <USBD_ClrFeature+0x3c>
      break;
 800dd6e:	bf00      	nop
  }
}
 800dd70:	bf00      	nop
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	781a      	ldrb	r2, [r3, #0]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	3301      	adds	r3, #1
 800dd92:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	781a      	ldrb	r2, [r3, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	f7ff fa92 	bl	800d2cc <SWAPBYTE>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	461a      	mov	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f7ff fa85 	bl	800d2cc <SWAPBYTE>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f7ff fa78 	bl	800d2cc <SWAPBYTE>
 800dddc:	4603      	mov	r3, r0
 800ddde:	461a      	mov	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	80da      	strh	r2, [r3, #6]
}
 800dde4:	bf00      	nop
 800dde6:	3710      	adds	r7, #16
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddf6:	2180      	movs	r1, #128	; 0x80
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 fcfc 	bl	800e7f6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ddfe:	2100      	movs	r1, #0
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fcf8 	bl	800e7f6 <USBD_LL_StallEP>
}
 800de06:	bf00      	nop
 800de08:	3708      	adds	r7, #8
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b086      	sub	sp, #24
 800de12:	af00      	add	r7, sp, #0
 800de14:	60f8      	str	r0, [r7, #12]
 800de16:	60b9      	str	r1, [r7, #8]
 800de18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800de1a:	2300      	movs	r3, #0
 800de1c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d036      	beq.n	800de92 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800de28:	6938      	ldr	r0, [r7, #16]
 800de2a:	f000 f836 	bl	800de9a <USBD_GetLen>
 800de2e:	4603      	mov	r3, r0
 800de30:	3301      	adds	r3, #1
 800de32:	b29b      	uxth	r3, r3
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	b29a      	uxth	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800de3c:	7dfb      	ldrb	r3, [r7, #23]
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	4413      	add	r3, r2
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	7812      	ldrb	r2, [r2, #0]
 800de46:	701a      	strb	r2, [r3, #0]
  idx++;
 800de48:	7dfb      	ldrb	r3, [r7, #23]
 800de4a:	3301      	adds	r3, #1
 800de4c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800de4e:	7dfb      	ldrb	r3, [r7, #23]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	4413      	add	r3, r2
 800de54:	2203      	movs	r2, #3
 800de56:	701a      	strb	r2, [r3, #0]
  idx++;
 800de58:	7dfb      	ldrb	r3, [r7, #23]
 800de5a:	3301      	adds	r3, #1
 800de5c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800de5e:	e013      	b.n	800de88 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800de60:	7dfb      	ldrb	r3, [r7, #23]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	4413      	add	r3, r2
 800de66:	693a      	ldr	r2, [r7, #16]
 800de68:	7812      	ldrb	r2, [r2, #0]
 800de6a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	3301      	adds	r3, #1
 800de70:	613b      	str	r3, [r7, #16]
    idx++;
 800de72:	7dfb      	ldrb	r3, [r7, #23]
 800de74:	3301      	adds	r3, #1
 800de76:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800de78:	7dfb      	ldrb	r3, [r7, #23]
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	4413      	add	r3, r2
 800de7e:	2200      	movs	r2, #0
 800de80:	701a      	strb	r2, [r3, #0]
    idx++;
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	3301      	adds	r3, #1
 800de86:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1e7      	bne.n	800de60 <USBD_GetString+0x52>
 800de90:	e000      	b.n	800de94 <USBD_GetString+0x86>
    return;
 800de92:	bf00      	nop
  }
}
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de9a:	b480      	push	{r7}
 800de9c:	b085      	sub	sp, #20
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dea2:	2300      	movs	r3, #0
 800dea4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800deaa:	e005      	b.n	800deb8 <USBD_GetLen+0x1e>
  {
    len++;
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	3301      	adds	r3, #1
 800deb0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	3301      	adds	r3, #1
 800deb6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d1f5      	bne.n	800deac <USBD_GetLen+0x12>
  }

  return len;
 800dec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3714      	adds	r7, #20
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr

0800dece <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b084      	sub	sp, #16
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	60f8      	str	r0, [r7, #12]
 800ded6:	60b9      	str	r1, [r7, #8]
 800ded8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2202      	movs	r2, #2
 800dede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	2100      	movs	r1, #0
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f000 fd07 	bl	800e908 <USBD_LL_Transmit>

  return USBD_OK;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3710      	adds	r7, #16
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	2100      	movs	r1, #0
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	f000 fcf6 	bl	800e908 <USBD_LL_Transmit>

  return USBD_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800df26:	b580      	push	{r7, lr}
 800df28:	b084      	sub	sp, #16
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	60f8      	str	r0, [r7, #12]
 800df2e:	60b9      	str	r1, [r7, #8]
 800df30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	68ba      	ldr	r2, [r7, #8]
 800df36:	2100      	movs	r1, #0
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f000 fd06 	bl	800e94a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2204      	movs	r2, #4
 800df54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df58:	2300      	movs	r3, #0
 800df5a:	2200      	movs	r2, #0
 800df5c:	2100      	movs	r1, #0
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 fcd2 	bl	800e908 <USBD_LL_Transmit>

  return USBD_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3708      	adds	r7, #8
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800df6e:	b580      	push	{r7, lr}
 800df70:	b082      	sub	sp, #8
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2205      	movs	r2, #5
 800df7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df7e:	2300      	movs	r3, #0
 800df80:	2200      	movs	r2, #0
 800df82:	2100      	movs	r1, #0
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fce0 	bl	800e94a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df94:	b480      	push	{r7}
 800df96:	b087      	sub	sp, #28
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	4613      	mov	r3, r2
 800dfa0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dfaa:	4b1f      	ldr	r3, [pc, #124]	; (800e028 <FATFS_LinkDriverEx+0x94>)
 800dfac:	7a5b      	ldrb	r3, [r3, #9]
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d131      	bne.n	800e018 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dfb4:	4b1c      	ldr	r3, [pc, #112]	; (800e028 <FATFS_LinkDriverEx+0x94>)
 800dfb6:	7a5b      	ldrb	r3, [r3, #9]
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	461a      	mov	r2, r3
 800dfbc:	4b1a      	ldr	r3, [pc, #104]	; (800e028 <FATFS_LinkDriverEx+0x94>)
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dfc2:	4b19      	ldr	r3, [pc, #100]	; (800e028 <FATFS_LinkDriverEx+0x94>)
 800dfc4:	7a5b      	ldrb	r3, [r3, #9]
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	4a17      	ldr	r2, [pc, #92]	; (800e028 <FATFS_LinkDriverEx+0x94>)
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	4413      	add	r3, r2
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dfd2:	4b15      	ldr	r3, [pc, #84]	; (800e028 <FATFS_LinkDriverEx+0x94>)
 800dfd4:	7a5b      	ldrb	r3, [r3, #9]
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4b13      	ldr	r3, [pc, #76]	; (800e028 <FATFS_LinkDriverEx+0x94>)
 800dfdc:	4413      	add	r3, r2
 800dfde:	79fa      	ldrb	r2, [r7, #7]
 800dfe0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dfe2:	4b11      	ldr	r3, [pc, #68]	; (800e028 <FATFS_LinkDriverEx+0x94>)
 800dfe4:	7a5b      	ldrb	r3, [r3, #9]
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	1c5a      	adds	r2, r3, #1
 800dfea:	b2d1      	uxtb	r1, r2
 800dfec:	4a0e      	ldr	r2, [pc, #56]	; (800e028 <FATFS_LinkDriverEx+0x94>)
 800dfee:	7251      	strb	r1, [r2, #9]
 800dff0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dff2:	7dbb      	ldrb	r3, [r7, #22]
 800dff4:	3330      	adds	r3, #48	; 0x30
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	3301      	adds	r3, #1
 800e000:	223a      	movs	r2, #58	; 0x3a
 800e002:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	3302      	adds	r3, #2
 800e008:	222f      	movs	r2, #47	; 0x2f
 800e00a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	3303      	adds	r3, #3
 800e010:	2200      	movs	r2, #0
 800e012:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e018:	7dfb      	ldrb	r3, [r7, #23]
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	371c      	adds	r7, #28
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	2000019c 	.word	0x2000019c

0800e02c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e036:	2200      	movs	r2, #0
 800e038:	6839      	ldr	r1, [r7, #0]
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7ff ffaa 	bl	800df94 <FATFS_LinkDriverEx>
 800e040:	4603      	mov	r3, r0
}
 800e042:	4618      	mov	r0, r3
 800e044:	3708      	adds	r7, #8
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
	...

0800e04c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e050:	2200      	movs	r2, #0
 800e052:	4912      	ldr	r1, [pc, #72]	; (800e09c <MX_USB_DEVICE_Init+0x50>)
 800e054:	4812      	ldr	r0, [pc, #72]	; (800e0a0 <MX_USB_DEVICE_Init+0x54>)
 800e056:	f7fe fe28 	bl	800ccaa <USBD_Init>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d001      	beq.n	800e064 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e060:	f7f3 fc70 	bl	8001944 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800e064:	490f      	ldr	r1, [pc, #60]	; (800e0a4 <MX_USB_DEVICE_Init+0x58>)
 800e066:	480e      	ldr	r0, [pc, #56]	; (800e0a0 <MX_USB_DEVICE_Init+0x54>)
 800e068:	f7fe fe4f 	bl	800cd0a <USBD_RegisterClass>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d001      	beq.n	800e076 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e072:	f7f3 fc67 	bl	8001944 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800e076:	490c      	ldr	r1, [pc, #48]	; (800e0a8 <MX_USB_DEVICE_Init+0x5c>)
 800e078:	4809      	ldr	r0, [pc, #36]	; (800e0a0 <MX_USB_DEVICE_Init+0x54>)
 800e07a:	f7fd f9ff 	bl	800b47c <USBD_MSC_RegisterStorage>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e084:	f7f3 fc5e 	bl	8001944 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e088:	4805      	ldr	r0, [pc, #20]	; (800e0a0 <MX_USB_DEVICE_Init+0x54>)
 800e08a:	f7fe fe65 	bl	800cd58 <USBD_Start>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d001      	beq.n	800e098 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e094:	f7f3 fc56 	bl	8001944 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e098:	bf00      	nop
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	200000f4 	.word	0x200000f4
 800e0a0:	20003930 	.word	0x20003930
 800e0a4:	2000000c 	.word	0x2000000c
 800e0a8:	20000154 	.word	0x20000154

0800e0ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	6039      	str	r1, [r7, #0]
 800e0b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	2212      	movs	r2, #18
 800e0bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e0be:	4b03      	ldr	r3, [pc, #12]	; (800e0cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	370c      	adds	r7, #12
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr
 800e0cc:	20000114 	.word	0x20000114

0800e0d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	6039      	str	r1, [r7, #0]
 800e0da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	2204      	movs	r2, #4
 800e0e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e0e2:	4b03      	ldr	r3, [pc, #12]	; (800e0f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr
 800e0f0:	20000134 	.word	0x20000134

0800e0f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	6039      	str	r1, [r7, #0]
 800e0fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e100:	79fb      	ldrb	r3, [r7, #7]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d105      	bne.n	800e112 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	4907      	ldr	r1, [pc, #28]	; (800e128 <USBD_FS_ProductStrDescriptor+0x34>)
 800e10a:	4808      	ldr	r0, [pc, #32]	; (800e12c <USBD_FS_ProductStrDescriptor+0x38>)
 800e10c:	f7ff fe7f 	bl	800de0e <USBD_GetString>
 800e110:	e004      	b.n	800e11c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e112:	683a      	ldr	r2, [r7, #0]
 800e114:	4904      	ldr	r1, [pc, #16]	; (800e128 <USBD_FS_ProductStrDescriptor+0x34>)
 800e116:	4805      	ldr	r0, [pc, #20]	; (800e12c <USBD_FS_ProductStrDescriptor+0x38>)
 800e118:	f7ff fe79 	bl	800de0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e11c:	4b02      	ldr	r3, [pc, #8]	; (800e128 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	20003c00 	.word	0x20003c00
 800e12c:	0800eb48 	.word	0x0800eb48

0800e130 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	6039      	str	r1, [r7, #0]
 800e13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e13c:	683a      	ldr	r2, [r7, #0]
 800e13e:	4904      	ldr	r1, [pc, #16]	; (800e150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e140:	4804      	ldr	r0, [pc, #16]	; (800e154 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e142:	f7ff fe64 	bl	800de0e <USBD_GetString>
  return USBD_StrDesc;
 800e146:	4b02      	ldr	r3, [pc, #8]	; (800e150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	20003c00 	.word	0x20003c00
 800e154:	0800eb5c 	.word	0x0800eb5c

0800e158 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	4603      	mov	r3, r0
 800e160:	6039      	str	r1, [r7, #0]
 800e162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	221a      	movs	r2, #26
 800e168:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e16a:	f000 f855 	bl	800e218 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e16e:	4b02      	ldr	r3, [pc, #8]	; (800e178 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20000138 	.word	0x20000138

0800e17c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	4603      	mov	r3, r0
 800e184:	6039      	str	r1, [r7, #0]
 800e186:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e188:	79fb      	ldrb	r3, [r7, #7]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d105      	bne.n	800e19a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	4907      	ldr	r1, [pc, #28]	; (800e1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e192:	4808      	ldr	r0, [pc, #32]	; (800e1b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e194:	f7ff fe3b 	bl	800de0e <USBD_GetString>
 800e198:	e004      	b.n	800e1a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e19a:	683a      	ldr	r2, [r7, #0]
 800e19c:	4904      	ldr	r1, [pc, #16]	; (800e1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e19e:	4805      	ldr	r0, [pc, #20]	; (800e1b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1a0:	f7ff fe35 	bl	800de0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1a4:	4b02      	ldr	r3, [pc, #8]	; (800e1b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	20003c00 	.word	0x20003c00
 800e1b4:	0800eb70 	.word	0x0800eb70

0800e1b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	4603      	mov	r3, r0
 800e1c0:	6039      	str	r1, [r7, #0]
 800e1c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1c4:	79fb      	ldrb	r3, [r7, #7]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d105      	bne.n	800e1d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1ca:	683a      	ldr	r2, [r7, #0]
 800e1cc:	4907      	ldr	r1, [pc, #28]	; (800e1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1ce:	4808      	ldr	r0, [pc, #32]	; (800e1f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e1d0:	f7ff fe1d 	bl	800de0e <USBD_GetString>
 800e1d4:	e004      	b.n	800e1e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	4904      	ldr	r1, [pc, #16]	; (800e1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1da:	4805      	ldr	r0, [pc, #20]	; (800e1f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e1dc:	f7ff fe17 	bl	800de0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1e0:	4b02      	ldr	r3, [pc, #8]	; (800e1ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20003c00 	.word	0x20003c00
 800e1f0:	0800eb7c 	.word	0x0800eb7c

0800e1f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	6039      	str	r1, [r7, #0]
 800e1fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	220c      	movs	r2, #12
 800e204:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e206:	4b03      	ldr	r3, [pc, #12]	; (800e214 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e208:	4618      	mov	r0, r3
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr
 800e214:	20000128 	.word	0x20000128

0800e218 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e21e:	4b0f      	ldr	r3, [pc, #60]	; (800e25c <Get_SerialNum+0x44>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e224:	4b0e      	ldr	r3, [pc, #56]	; (800e260 <Get_SerialNum+0x48>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e22a:	4b0e      	ldr	r3, [pc, #56]	; (800e264 <Get_SerialNum+0x4c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	4413      	add	r3, r2
 800e236:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d009      	beq.n	800e252 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e23e:	2208      	movs	r2, #8
 800e240:	4909      	ldr	r1, [pc, #36]	; (800e268 <Get_SerialNum+0x50>)
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f000 f814 	bl	800e270 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e248:	2204      	movs	r2, #4
 800e24a:	4908      	ldr	r1, [pc, #32]	; (800e26c <Get_SerialNum+0x54>)
 800e24c:	68b8      	ldr	r0, [r7, #8]
 800e24e:	f000 f80f 	bl	800e270 <IntToUnicode>
  }
}
 800e252:	bf00      	nop
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	1fff7a10 	.word	0x1fff7a10
 800e260:	1fff7a14 	.word	0x1fff7a14
 800e264:	1fff7a18 	.word	0x1fff7a18
 800e268:	2000013a 	.word	0x2000013a
 800e26c:	2000014a 	.word	0x2000014a

0800e270 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e270:	b480      	push	{r7}
 800e272:	b087      	sub	sp, #28
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	4613      	mov	r3, r2
 800e27c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e282:	2300      	movs	r3, #0
 800e284:	75fb      	strb	r3, [r7, #23]
 800e286:	e027      	b.n	800e2d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	0f1b      	lsrs	r3, r3, #28
 800e28c:	2b09      	cmp	r3, #9
 800e28e:	d80b      	bhi.n	800e2a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	0f1b      	lsrs	r3, r3, #28
 800e294:	b2da      	uxtb	r2, r3
 800e296:	7dfb      	ldrb	r3, [r7, #23]
 800e298:	005b      	lsls	r3, r3, #1
 800e29a:	4619      	mov	r1, r3
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	440b      	add	r3, r1
 800e2a0:	3230      	adds	r2, #48	; 0x30
 800e2a2:	b2d2      	uxtb	r2, r2
 800e2a4:	701a      	strb	r2, [r3, #0]
 800e2a6:	e00a      	b.n	800e2be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	0f1b      	lsrs	r3, r3, #28
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	7dfb      	ldrb	r3, [r7, #23]
 800e2b0:	005b      	lsls	r3, r3, #1
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	440b      	add	r3, r1
 800e2b8:	3237      	adds	r2, #55	; 0x37
 800e2ba:	b2d2      	uxtb	r2, r2
 800e2bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	011b      	lsls	r3, r3, #4
 800e2c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e2c4:	7dfb      	ldrb	r3, [r7, #23]
 800e2c6:	005b      	lsls	r3, r3, #1
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	68ba      	ldr	r2, [r7, #8]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e2d2:	7dfb      	ldrb	r3, [r7, #23]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	75fb      	strb	r3, [r7, #23]
 800e2d8:	7dfa      	ldrb	r2, [r7, #23]
 800e2da:	79fb      	ldrb	r3, [r7, #7]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d3d3      	bcc.n	800e288 <IntToUnicode+0x18>
  }
}
 800e2e0:	bf00      	nop
 800e2e2:	bf00      	nop
 800e2e4:	371c      	adds	r7, #28
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr

0800e2ee <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800e2ee:	b480      	push	{r7}
 800e2f0:	b083      	sub	sp, #12
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800e2f8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	370c      	adds	r7, #12
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr

0800e306 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800e306:	b480      	push	{r7}
 800e308:	b085      	sub	sp, #20
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	4603      	mov	r3, r0
 800e30e:	60b9      	str	r1, [r7, #8]
 800e310:	607a      	str	r2, [r7, #4]
 800e312:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e31a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e322:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800e324:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e326:	4618      	mov	r0, r3
 800e328:	3714      	adds	r7, #20
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800e332:	b480      	push	{r7}
 800e334:	b083      	sub	sp, #12
 800e336:	af00      	add	r7, sp, #0
 800e338:	4603      	mov	r3, r0
 800e33a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e33c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e33e:	4618      	mov	r0, r3
 800e340:	370c      	adds	r7, #12
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr

0800e34a <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800e34a:	b480      	push	{r7}
 800e34c:	b083      	sub	sp, #12
 800e34e:	af00      	add	r7, sp, #0
 800e350:	4603      	mov	r3, r0
 800e352:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800e354:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e356:	4618      	mov	r0, r3
 800e358:	370c      	adds	r7, #12
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr

0800e362 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e362:	b480      	push	{r7}
 800e364:	b085      	sub	sp, #20
 800e366:	af00      	add	r7, sp, #0
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
 800e36c:	461a      	mov	r2, r3
 800e36e:	4603      	mov	r3, r0
 800e370:	73fb      	strb	r3, [r7, #15]
 800e372:	4613      	mov	r3, r2
 800e374:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800e376:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60b9      	str	r1, [r7, #8]
 800e38c:	607a      	str	r2, [r7, #4]
 800e38e:	461a      	mov	r2, r3
 800e390:	4603      	mov	r3, r0
 800e392:	73fb      	strb	r3, [r7, #15]
 800e394:	4613      	mov	r3, r2
 800e396:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800e398:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800e3a6:	b480      	push	{r7}
 800e3a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800e3aa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
	...

0800e3b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08a      	sub	sp, #40	; 0x28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3c0:	f107 0314 	add.w	r3, r7, #20
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	605a      	str	r2, [r3, #4]
 800e3ca:	609a      	str	r2, [r3, #8]
 800e3cc:	60da      	str	r2, [r3, #12]
 800e3ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e3d8:	d147      	bne.n	800e46a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3da:	2300      	movs	r3, #0
 800e3dc:	613b      	str	r3, [r7, #16]
 800e3de:	4b25      	ldr	r3, [pc, #148]	; (800e474 <HAL_PCD_MspInit+0xbc>)
 800e3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e2:	4a24      	ldr	r2, [pc, #144]	; (800e474 <HAL_PCD_MspInit+0xbc>)
 800e3e4:	f043 0301 	orr.w	r3, r3, #1
 800e3e8:	6313      	str	r3, [r2, #48]	; 0x30
 800e3ea:	4b22      	ldr	r3, [pc, #136]	; (800e474 <HAL_PCD_MspInit+0xbc>)
 800e3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	613b      	str	r3, [r7, #16]
 800e3f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e3f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e400:	2300      	movs	r3, #0
 800e402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e404:	f107 0314 	add.w	r3, r7, #20
 800e408:	4619      	mov	r1, r3
 800e40a:	481b      	ldr	r0, [pc, #108]	; (800e478 <HAL_PCD_MspInit+0xc0>)
 800e40c:	f7f5 fe4a 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e410:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e416:	2302      	movs	r3, #2
 800e418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e41e:	2303      	movs	r3, #3
 800e420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e422:	230a      	movs	r3, #10
 800e424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e426:	f107 0314 	add.w	r3, r7, #20
 800e42a:	4619      	mov	r1, r3
 800e42c:	4812      	ldr	r0, [pc, #72]	; (800e478 <HAL_PCD_MspInit+0xc0>)
 800e42e:	f7f5 fe39 	bl	80040a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e432:	4b10      	ldr	r3, [pc, #64]	; (800e474 <HAL_PCD_MspInit+0xbc>)
 800e434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e436:	4a0f      	ldr	r2, [pc, #60]	; (800e474 <HAL_PCD_MspInit+0xbc>)
 800e438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e43c:	6353      	str	r3, [r2, #52]	; 0x34
 800e43e:	2300      	movs	r3, #0
 800e440:	60fb      	str	r3, [r7, #12]
 800e442:	4b0c      	ldr	r3, [pc, #48]	; (800e474 <HAL_PCD_MspInit+0xbc>)
 800e444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e446:	4a0b      	ldr	r2, [pc, #44]	; (800e474 <HAL_PCD_MspInit+0xbc>)
 800e448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e44c:	6453      	str	r3, [r2, #68]	; 0x44
 800e44e:	4b09      	ldr	r3, [pc, #36]	; (800e474 <HAL_PCD_MspInit+0xbc>)
 800e450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e456:	60fb      	str	r3, [r7, #12]
 800e458:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e45a:	2200      	movs	r2, #0
 800e45c:	2100      	movs	r1, #0
 800e45e:	2043      	movs	r0, #67	; 0x43
 800e460:	f7f5 fa4b 	bl	80038fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e464:	2043      	movs	r0, #67	; 0x43
 800e466:	f7f5 fa64 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e46a:	bf00      	nop
 800e46c:	3728      	adds	r7, #40	; 0x28
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	40023800 	.word	0x40023800
 800e478:	40020000 	.word	0x40020000

0800e47c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e490:	4619      	mov	r1, r3
 800e492:	4610      	mov	r0, r2
 800e494:	f7fe fcab 	bl	800cdee <USBD_LL_SetupStage>
}
 800e498:	bf00      	nop
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e4b2:	78fa      	ldrb	r2, [r7, #3]
 800e4b4:	6879      	ldr	r1, [r7, #4]
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	00db      	lsls	r3, r3, #3
 800e4ba:	1a9b      	subs	r3, r3, r2
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	440b      	add	r3, r1
 800e4c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	78fb      	ldrb	r3, [r7, #3]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	f7fe fce5 	bl	800ce98 <USBD_LL_DataOutStage>
}
 800e4ce:	bf00      	nop
 800e4d0:	3708      	adds	r7, #8
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b082      	sub	sp, #8
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	460b      	mov	r3, r1
 800e4e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e4e8:	78fa      	ldrb	r2, [r7, #3]
 800e4ea:	6879      	ldr	r1, [r7, #4]
 800e4ec:	4613      	mov	r3, r2
 800e4ee:	00db      	lsls	r3, r3, #3
 800e4f0:	1a9b      	subs	r3, r3, r2
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	440b      	add	r3, r1
 800e4f6:	3348      	adds	r3, #72	; 0x48
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	78fb      	ldrb	r3, [r7, #3]
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	f7fe fd2e 	bl	800cf5e <USBD_LL_DataInStage>
}
 800e502:	bf00      	nop
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b082      	sub	sp, #8
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fe fe42 	bl	800d1a2 <USBD_LL_SOF>
}
 800e51e:	bf00      	nop
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b084      	sub	sp, #16
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e52e:	2301      	movs	r3, #1
 800e530:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d102      	bne.n	800e540 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e53a:	2300      	movs	r3, #0
 800e53c:	73fb      	strb	r3, [r7, #15]
 800e53e:	e008      	b.n	800e552 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	2b02      	cmp	r3, #2
 800e546:	d102      	bne.n	800e54e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e548:	2301      	movs	r3, #1
 800e54a:	73fb      	strb	r3, [r7, #15]
 800e54c:	e001      	b.n	800e552 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e54e:	f7f3 f9f9 	bl	8001944 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e558:	7bfa      	ldrb	r2, [r7, #15]
 800e55a:	4611      	mov	r1, r2
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7fe fde2 	bl	800d126 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fe fd8e 	bl	800d08a <USBD_LL_Reset>
}
 800e56e:	bf00      	nop
 800e570:	3710      	adds	r7, #16
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
	...

0800e578 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e586:	4618      	mov	r0, r3
 800e588:	f7fe fddd 	bl	800d146 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	6812      	ldr	r2, [r2, #0]
 800e59a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e59e:	f043 0301 	orr.w	r3, r3, #1
 800e5a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a1b      	ldr	r3, [r3, #32]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d005      	beq.n	800e5b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5ac:	4b04      	ldr	r3, [pc, #16]	; (800e5c0 <HAL_PCD_SuspendCallback+0x48>)
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	4a03      	ldr	r2, [pc, #12]	; (800e5c0 <HAL_PCD_SuspendCallback+0x48>)
 800e5b2:	f043 0306 	orr.w	r3, r3, #6
 800e5b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e5b8:	bf00      	nop
 800e5ba:	3708      	adds	r7, #8
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	e000ed00 	.word	0xe000ed00

0800e5c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fe fdcd 	bl	800d172 <USBD_LL_Resume>
}
 800e5d8:	bf00      	nop
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5f2:	78fa      	ldrb	r2, [r7, #3]
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fe fe1b 	bl	800d232 <USBD_LL_IsoOUTIncomplete>
}
 800e5fc:	bf00      	nop
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	460b      	mov	r3, r1
 800e60e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e616:	78fa      	ldrb	r2, [r7, #3]
 800e618:	4611      	mov	r1, r2
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fe fde3 	bl	800d1e6 <USBD_LL_IsoINIncomplete>
}
 800e620:	bf00      	nop
 800e622:	3708      	adds	r7, #8
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e636:	4618      	mov	r0, r3
 800e638:	f7fe fe21 	bl	800d27e <USBD_LL_DevConnected>
}
 800e63c:	bf00      	nop
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe fe1e 	bl	800d294 <USBD_LL_DevDisconnected>
}
 800e658:	bf00      	nop
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d13c      	bne.n	800e6ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e670:	4a20      	ldr	r2, [pc, #128]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4a1e      	ldr	r2, [pc, #120]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e67c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e680:	4b1c      	ldr	r3, [pc, #112]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e682:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e686:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e688:	4b1a      	ldr	r3, [pc, #104]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e68a:	2206      	movs	r2, #6
 800e68c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e68e:	4b19      	ldr	r3, [pc, #100]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e690:	2202      	movs	r2, #2
 800e692:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e694:	4b17      	ldr	r3, [pc, #92]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e696:	2200      	movs	r2, #0
 800e698:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e69a:	4b16      	ldr	r3, [pc, #88]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e69c:	2202      	movs	r2, #2
 800e69e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e6a0:	4b14      	ldr	r3, [pc, #80]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e6a6:	4b13      	ldr	r3, [pc, #76]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e6ac:	4b11      	ldr	r3, [pc, #68]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e6b2:	4b10      	ldr	r3, [pc, #64]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e6b8:	4b0e      	ldr	r3, [pc, #56]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e6be:	480d      	ldr	r0, [pc, #52]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e6c0:	f7f6 f854 	bl	800476c <HAL_PCD_Init>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d001      	beq.n	800e6ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e6ca:	f7f3 f93b 	bl	8001944 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e6ce:	2180      	movs	r1, #128	; 0x80
 800e6d0:	4808      	ldr	r0, [pc, #32]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e6d2:	f7f7 fa12 	bl	8005afa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e6d6:	2240      	movs	r2, #64	; 0x40
 800e6d8:	2100      	movs	r1, #0
 800e6da:	4806      	ldr	r0, [pc, #24]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e6dc:	f7f7 f9c6 	bl	8005a6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e6e0:	2280      	movs	r2, #128	; 0x80
 800e6e2:	2101      	movs	r1, #1
 800e6e4:	4803      	ldr	r0, [pc, #12]	; (800e6f4 <USBD_LL_Init+0x94>)
 800e6e6:	f7f7 f9c1 	bl	8005a6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3708      	adds	r7, #8
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	20003e00 	.word	0x20003e00

0800e6f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e704:	2300      	movs	r3, #0
 800e706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e70e:	4618      	mov	r0, r3
 800e710:	f7f6 f950 	bl	80049b4 <HAL_PCD_Start>
 800e714:	4603      	mov	r3, r0
 800e716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e718:	7bfb      	ldrb	r3, [r7, #15]
 800e71a:	4618      	mov	r0, r3
 800e71c:	f000 f9b0 	bl	800ea80 <USBD_Get_USB_Status>
 800e720:	4603      	mov	r3, r0
 800e722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e724:	7bbb      	ldrb	r3, [r7, #14]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3710      	adds	r7, #16
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b084      	sub	sp, #16
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
 800e736:	4608      	mov	r0, r1
 800e738:	4611      	mov	r1, r2
 800e73a:	461a      	mov	r2, r3
 800e73c:	4603      	mov	r3, r0
 800e73e:	70fb      	strb	r3, [r7, #3]
 800e740:	460b      	mov	r3, r1
 800e742:	70bb      	strb	r3, [r7, #2]
 800e744:	4613      	mov	r3, r2
 800e746:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e748:	2300      	movs	r3, #0
 800e74a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e74c:	2300      	movs	r3, #0
 800e74e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e756:	78bb      	ldrb	r3, [r7, #2]
 800e758:	883a      	ldrh	r2, [r7, #0]
 800e75a:	78f9      	ldrb	r1, [r7, #3]
 800e75c:	f7f6 fd61 	bl	8005222 <HAL_PCD_EP_Open>
 800e760:	4603      	mov	r3, r0
 800e762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e764:	7bfb      	ldrb	r3, [r7, #15]
 800e766:	4618      	mov	r0, r3
 800e768:	f000 f98a 	bl	800ea80 <USBD_Get_USB_Status>
 800e76c:	4603      	mov	r3, r0
 800e76e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e770:	7bbb      	ldrb	r3, [r7, #14]
}
 800e772:	4618      	mov	r0, r3
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b084      	sub	sp, #16
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
 800e782:	460b      	mov	r3, r1
 800e784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e786:	2300      	movs	r3, #0
 800e788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e78a:	2300      	movs	r3, #0
 800e78c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e794:	78fa      	ldrb	r2, [r7, #3]
 800e796:	4611      	mov	r1, r2
 800e798:	4618      	mov	r0, r3
 800e79a:	f7f6 fdaa 	bl	80052f2 <HAL_PCD_EP_Close>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7a2:	7bfb      	ldrb	r3, [r7, #15]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f000 f96b 	bl	800ea80 <USBD_Get_USB_Status>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7d2:	78fa      	ldrb	r2, [r7, #3]
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7f6 ff3c 	bl	8005654 <HAL_PCD_EP_Flush>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7e0:	7bfb      	ldrb	r3, [r7, #15]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f000 f94c 	bl	800ea80 <USBD_Get_USB_Status>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
 800e7fe:	460b      	mov	r3, r1
 800e800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e806:	2300      	movs	r3, #0
 800e808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e810:	78fa      	ldrb	r2, [r7, #3]
 800e812:	4611      	mov	r1, r2
 800e814:	4618      	mov	r0, r3
 800e816:	f7f6 fe63 	bl	80054e0 <HAL_PCD_EP_SetStall>
 800e81a:	4603      	mov	r3, r0
 800e81c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e81e:	7bfb      	ldrb	r3, [r7, #15]
 800e820:	4618      	mov	r0, r3
 800e822:	f000 f92d 	bl	800ea80 <USBD_Get_USB_Status>
 800e826:	4603      	mov	r3, r0
 800e828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e82a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3710      	adds	r7, #16
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	460b      	mov	r3, r1
 800e83e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e840:	2300      	movs	r3, #0
 800e842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e844:	2300      	movs	r3, #0
 800e846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e84e:	78fa      	ldrb	r2, [r7, #3]
 800e850:	4611      	mov	r1, r2
 800e852:	4618      	mov	r0, r3
 800e854:	f7f6 fea8 	bl	80055a8 <HAL_PCD_EP_ClrStall>
 800e858:	4603      	mov	r3, r0
 800e85a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e85c:	7bfb      	ldrb	r3, [r7, #15]
 800e85e:	4618      	mov	r0, r3
 800e860:	f000 f90e 	bl	800ea80 <USBD_Get_USB_Status>
 800e864:	4603      	mov	r3, r0
 800e866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e868:	7bbb      	ldrb	r3, [r7, #14]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e872:	b480      	push	{r7}
 800e874:	b085      	sub	sp, #20
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
 800e87a:	460b      	mov	r3, r1
 800e87c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e884:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	da0b      	bge.n	800e8a6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e88e:	78fb      	ldrb	r3, [r7, #3]
 800e890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e894:	68f9      	ldr	r1, [r7, #12]
 800e896:	4613      	mov	r3, r2
 800e898:	00db      	lsls	r3, r3, #3
 800e89a:	1a9b      	subs	r3, r3, r2
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	440b      	add	r3, r1
 800e8a0:	333e      	adds	r3, #62	; 0x3e
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	e00b      	b.n	800e8be <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e8a6:	78fb      	ldrb	r3, [r7, #3]
 800e8a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8ac:	68f9      	ldr	r1, [r7, #12]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	00db      	lsls	r3, r3, #3
 800e8b2:	1a9b      	subs	r3, r3, r2
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	440b      	add	r3, r1
 800e8b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e8bc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8ca:	b580      	push	{r7, lr}
 800e8cc:	b084      	sub	sp, #16
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e8e4:	78fa      	ldrb	r2, [r7, #3]
 800e8e6:	4611      	mov	r1, r2
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7f6 fc75 	bl	80051d8 <HAL_PCD_SetAddress>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f000 f8c3 	bl	800ea80 <USBD_Get_USB_Status>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b086      	sub	sp, #24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	607a      	str	r2, [r7, #4]
 800e912:	603b      	str	r3, [r7, #0]
 800e914:	460b      	mov	r3, r1
 800e916:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e918:	2300      	movs	r3, #0
 800e91a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e926:	7af9      	ldrb	r1, [r7, #11]
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	f7f6 fd8e 	bl	800544c <HAL_PCD_EP_Transmit>
 800e930:	4603      	mov	r3, r0
 800e932:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e934:	7dfb      	ldrb	r3, [r7, #23]
 800e936:	4618      	mov	r0, r3
 800e938:	f000 f8a2 	bl	800ea80 <USBD_Get_USB_Status>
 800e93c:	4603      	mov	r3, r0
 800e93e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e940:	7dbb      	ldrb	r3, [r7, #22]
}
 800e942:	4618      	mov	r0, r3
 800e944:	3718      	adds	r7, #24
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b086      	sub	sp, #24
 800e94e:	af00      	add	r7, sp, #0
 800e950:	60f8      	str	r0, [r7, #12]
 800e952:	607a      	str	r2, [r7, #4]
 800e954:	603b      	str	r3, [r7, #0]
 800e956:	460b      	mov	r3, r1
 800e958:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e95a:	2300      	movs	r3, #0
 800e95c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e95e:	2300      	movs	r3, #0
 800e960:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e968:	7af9      	ldrb	r1, [r7, #11]
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	f7f6 fd0a 	bl	8005386 <HAL_PCD_EP_Receive>
 800e972:	4603      	mov	r3, r0
 800e974:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e976:	7dfb      	ldrb	r3, [r7, #23]
 800e978:	4618      	mov	r0, r3
 800e97a:	f000 f881 	bl	800ea80 <USBD_Get_USB_Status>
 800e97e:	4603      	mov	r3, r0
 800e980:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e982:	7dbb      	ldrb	r3, [r7, #22]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3718      	adds	r7, #24
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	460b      	mov	r3, r1
 800e996:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e99e:	78fa      	ldrb	r2, [r7, #3]
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7f6 fd3a 	bl	800541c <HAL_PCD_EP_GetRxCount>
 800e9a8:	4603      	mov	r3, r0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
	...

0800e9b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e9c0:	78fb      	ldrb	r3, [r7, #3]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d002      	beq.n	800e9cc <HAL_PCDEx_LPM_Callback+0x18>
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d01f      	beq.n	800ea0a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e9ca:	e03b      	b.n	800ea44 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6a1b      	ldr	r3, [r3, #32]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d007      	beq.n	800e9e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800e9d4:	f7f2 fc0e 	bl	80011f4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e9d8:	4b1c      	ldr	r3, [pc, #112]	; (800ea4c <HAL_PCDEx_LPM_Callback+0x98>)
 800e9da:	691b      	ldr	r3, [r3, #16]
 800e9dc:	4a1b      	ldr	r2, [pc, #108]	; (800ea4c <HAL_PCDEx_LPM_Callback+0x98>)
 800e9de:	f023 0306 	bic.w	r3, r3, #6
 800e9e2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	6812      	ldr	r2, [r2, #0]
 800e9f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9f6:	f023 0301 	bic.w	r3, r3, #1
 800e9fa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fe fbb5 	bl	800d172 <USBD_LL_Resume>
    break;
 800ea08:	e01c      	b.n	800ea44 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	6812      	ldr	r2, [r2, #0]
 800ea18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea1c:	f043 0301 	orr.w	r3, r3, #1
 800ea20:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fe fb8c 	bl	800d146 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a1b      	ldr	r3, [r3, #32]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d005      	beq.n	800ea42 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea36:	4b05      	ldr	r3, [pc, #20]	; (800ea4c <HAL_PCDEx_LPM_Callback+0x98>)
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	4a04      	ldr	r2, [pc, #16]	; (800ea4c <HAL_PCDEx_LPM_Callback+0x98>)
 800ea3c:	f043 0306 	orr.w	r3, r3, #6
 800ea40:	6113      	str	r3, [r2, #16]
    break;
 800ea42:	bf00      	nop
}
 800ea44:	bf00      	nop
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	e000ed00 	.word	0xe000ed00

0800ea50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ea58:	4b03      	ldr	r3, [pc, #12]	; (800ea68 <USBD_static_malloc+0x18>)
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop
 800ea68:	200001a8 	.word	0x200001a8

0800ea6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]

}
 800ea74:	bf00      	nop
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	4603      	mov	r3, r0
 800ea88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	2b03      	cmp	r3, #3
 800ea92:	d817      	bhi.n	800eac4 <USBD_Get_USB_Status+0x44>
 800ea94:	a201      	add	r2, pc, #4	; (adr r2, 800ea9c <USBD_Get_USB_Status+0x1c>)
 800ea96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea9a:	bf00      	nop
 800ea9c:	0800eaad 	.word	0x0800eaad
 800eaa0:	0800eab3 	.word	0x0800eab3
 800eaa4:	0800eab9 	.word	0x0800eab9
 800eaa8:	0800eabf 	.word	0x0800eabf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eaac:	2300      	movs	r3, #0
 800eaae:	73fb      	strb	r3, [r7, #15]
    break;
 800eab0:	e00b      	b.n	800eaca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eab2:	2303      	movs	r3, #3
 800eab4:	73fb      	strb	r3, [r7, #15]
    break;
 800eab6:	e008      	b.n	800eaca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eab8:	2301      	movs	r3, #1
 800eaba:	73fb      	strb	r3, [r7, #15]
    break;
 800eabc:	e005      	b.n	800eaca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eabe:	2303      	movs	r3, #3
 800eac0:	73fb      	strb	r3, [r7, #15]
    break;
 800eac2:	e002      	b.n	800eaca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eac4:	2303      	movs	r3, #3
 800eac6:	73fb      	strb	r3, [r7, #15]
    break;
 800eac8:	bf00      	nop
  }
  return usb_status;
 800eaca:	7bfb      	ldrb	r3, [r7, #15]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3714      	adds	r7, #20
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <__libc_init_array>:
 800ead8:	b570      	push	{r4, r5, r6, lr}
 800eada:	4d0d      	ldr	r5, [pc, #52]	; (800eb10 <__libc_init_array+0x38>)
 800eadc:	4c0d      	ldr	r4, [pc, #52]	; (800eb14 <__libc_init_array+0x3c>)
 800eade:	1b64      	subs	r4, r4, r5
 800eae0:	10a4      	asrs	r4, r4, #2
 800eae2:	2600      	movs	r6, #0
 800eae4:	42a6      	cmp	r6, r4
 800eae6:	d109      	bne.n	800eafc <__libc_init_array+0x24>
 800eae8:	4d0b      	ldr	r5, [pc, #44]	; (800eb18 <__libc_init_array+0x40>)
 800eaea:	4c0c      	ldr	r4, [pc, #48]	; (800eb1c <__libc_init_array+0x44>)
 800eaec:	f000 f820 	bl	800eb30 <_init>
 800eaf0:	1b64      	subs	r4, r4, r5
 800eaf2:	10a4      	asrs	r4, r4, #2
 800eaf4:	2600      	movs	r6, #0
 800eaf6:	42a6      	cmp	r6, r4
 800eaf8:	d105      	bne.n	800eb06 <__libc_init_array+0x2e>
 800eafa:	bd70      	pop	{r4, r5, r6, pc}
 800eafc:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb00:	4798      	blx	r3
 800eb02:	3601      	adds	r6, #1
 800eb04:	e7ee      	b.n	800eae4 <__libc_init_array+0xc>
 800eb06:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb0a:	4798      	blx	r3
 800eb0c:	3601      	adds	r6, #1
 800eb0e:	e7f2      	b.n	800eaf6 <__libc_init_array+0x1e>
 800eb10:	0800ebec 	.word	0x0800ebec
 800eb14:	0800ebec 	.word	0x0800ebec
 800eb18:	0800ebec 	.word	0x0800ebec
 800eb1c:	0800ebf0 	.word	0x0800ebf0

0800eb20 <memset>:
 800eb20:	4402      	add	r2, r0
 800eb22:	4603      	mov	r3, r0
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d100      	bne.n	800eb2a <memset+0xa>
 800eb28:	4770      	bx	lr
 800eb2a:	f803 1b01 	strb.w	r1, [r3], #1
 800eb2e:	e7f9      	b.n	800eb24 <memset+0x4>

0800eb30 <_init>:
 800eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb32:	bf00      	nop
 800eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb36:	bc08      	pop	{r3}
 800eb38:	469e      	mov	lr, r3
 800eb3a:	4770      	bx	lr

0800eb3c <_fini>:
 800eb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb3e:	bf00      	nop
 800eb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb42:	bc08      	pop	{r3}
 800eb44:	469e      	mov	lr, r3
 800eb46:	4770      	bx	lr
